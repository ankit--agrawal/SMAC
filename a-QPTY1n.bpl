// generated by SMACK version 1.9.0 for corral
// via /mnt/local/smack-project/smack/bin/smack -x=svcomp --time-limit 1800 /proj/SMACK/sv-benchmarks/c/ldv-consumption/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c --verifier-options  /bopt:boolControlVC /bopt:z3opt:SMT.MBQI=false /deepAsserts /doNotUseLabels /noInitPruning /nonUniformUnfolding /trackAllVars /noArrayTheory --unroll 16

// Basic types
type i1 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type ref = i64;
type float = i32;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $2.ref: ref;
axiom ($2.ref == 2);
const $3.ref: ref;
axiom ($3.ref == 3);
const $4.ref: ref;
axiom ($4.ref == 4);
const $5.ref: ref;
axiom ($5.ref == 5);
const $6.ref: ref;
axiom ($6.ref == 6);
const $7.ref: ref;
axiom ($7.ref == 7);
const $8.ref: ref;
axiom ($8.ref == 8);
const $9.ref: ref;
axiom ($9.ref == 9);
const $10.ref: ref;
axiom ($10.ref == 10);
const $11.ref: ref;
axiom ($11.ref == 11);
const $12.ref: ref;
axiom ($12.ref == 12);
const $13.ref: ref;
axiom ($13.ref == 13);
const $14.ref: ref;
axiom ($14.ref == 14);
const $1024.ref: ref;
axiom ($1024.ref == 1024);

// Memory maps (17 regions)
var $M.0: i32;
var $M.1: i32;
var $M.2: i32;
var $M.3: i32;
var $M.4: i32;
var $M.5: i32;
var $M.6: i32;
var $M.7: ref;
var $M.8: [ref] i8;
var $M.9: ref;
var $M.10: i8;
var $M.11: [ref] i8;
var $M.12: [ref] ref;
var $M.13: [ref] ref;
var $M.14: [ref] i32;
var $M.15: [ref] i32;
var $M.16: [ref] i8;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 200589));
axiom ($EXTERNS_BOTTOM == $sub.ref(0, 32776));
axiom ($MALLOC_TOP == 9223372036854775807);

// Bitstd::vector-integer conversions
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2int"} $bv2int.64(i: bv64) returns (i64);

// Pointer-number conversions
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { if $eq.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { if $ne.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { if $ugt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { if $uge.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { if $ult.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { if $ule.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { if $sgt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { if $sge.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { if $slt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { if $sle.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

const LDV_IN_INTERRUPT: ref;
axiom (LDV_IN_INTERRUPT == $sub.ref(0, 1028));
const pt_mutex: ref;
axiom (pt_mutex == $sub.ref(0, 2220));
const pt_class: ref;
axiom (pt_class == $sub.ref(0, 3252));
const {:count 4} pt: ref;
axiom (pt == $sub.ref(0, 5204));
const pt_fops: ref;
axiom (pt_fops == $sub.ref(0, 6444));
const name: ref;
axiom (name == $sub.ref(0, 7476));
const major: ref;
axiom (major == $sub.ref(0, 8504));
const verbose: ref;
axiom (verbose == $sub.ref(0, 9529));
const {:count 512} pt_scratch: ref;
axiom (pt_scratch == $sub.ref(0, 11065));
const {:count 6} drive3: ref;
axiom (drive3 == $sub.ref(0, 12113));
const {:count 6} drive2: ref;
axiom (drive2 == $sub.ref(0, 13161));
const {:count 6} drive1: ref;
axiom (drive1 == $sub.ref(0, 14209));
const {:count 6} drive0: ref;
axiom (drive0 == $sub.ref(0, 15257));
const {:count 4} drives: ref;
axiom (drives == $sub.ref(0, 16313));
const disable: ref;
axiom (disable == $sub.ref(0, 17341));
const ldv_mutex_pt_mutex: ref;
axiom (ldv_mutex_pt_mutex == $sub.ref(0, 18369));
const ldv_mutex_mutex: ref;
axiom (ldv_mutex_mutex == $sub.ref(0, 19397));
const ldv_mutex_lock: ref;
axiom (ldv_mutex_lock == $sub.ref(0, 20425));
const ldv_mutex_cred_guard_mutex: ref;
axiom (ldv_mutex_cred_guard_mutex == $sub.ref(0, 21453));
const {:count 29} .str.49: ref;
axiom (.str.49 == $sub.ref(0, 22506));
const {:count 15} .str.47: ref;
axiom (.str.47 == $sub.ref(0, 23545));
const {:count 20} .str.39: ref;
axiom (.str.39 == $sub.ref(0, 24589));
const {:count 27} .str.40: ref;
axiom (.str.40 == $sub.ref(0, 25640));
const {:count 14} .str.28: ref;
axiom (.str.28 == $sub.ref(0, 26678));
const {:count 37} .str.29: ref;
axiom (.str.29 == $sub.ref(0, 27739));
const {:count 11} .str.26: ref;
axiom (.str.26 == $sub.ref(0, 28774));
const {:count 10} .str.27: ref;
axiom (.str.27 == $sub.ref(0, 29808));
const {:count 57} .str.25: ref;
axiom (.str.25 == $sub.ref(0, 30889));
const {:count 15} .str.22: ref;
axiom (.str.22 == $sub.ref(0, 31928));
const {:count 12} .str.23: ref;
axiom (.str.23 == $sub.ref(0, 32964));
const {:count 29} .str.24: ref;
axiom (.str.24 == $sub.ref(0, 34017));
const {:count 7} .str.48: ref;
axiom (.str.48 == $sub.ref(0, 35048));
const {:count 168} .str.45: ref;
axiom (.str.45 == $sub.ref(0, 36240));
const {:count 27} .str.46: ref;
axiom (.str.46 == $sub.ref(0, 37291));
const {:count 28} .str.41: ref;
axiom (.str.41 == $sub.ref(0, 38343));
const {:count 6} .str.42: ref;
axiom (.str.42 == $sub.ref(0, 39373));
const {:count 10} .str.43: ref;
axiom (.str.43 == $sub.ref(0, 40407));
const {:count 31} .str.44: ref;
axiom (.str.44 == $sub.ref(0, 41462));
const {:count 17} .str.34: ref;
axiom (.str.34 == $sub.ref(0, 42503));
const {:count 5} .str.35: ref;
axiom (.str.35 == $sub.ref(0, 43532));
const {:count 9} .str.36: ref;
axiom (.str.36 == $sub.ref(0, 44565));
const .str.37: ref;
axiom (.str.37 == $sub.ref(0, 45590));
const {:count 29} .str.38: ref;
axiom (.str.38 == $sub.ref(0, 46643));
const {:count 30} .str.31: ref;
axiom (.str.31 == $sub.ref(0, 47697));
const {:count 7} .str.12: ref;
axiom (.str.12 == $sub.ref(0, 48728));
const {:count 6} .str.13: ref;
axiom (.str.13 == $sub.ref(0, 49758));
const {:count 9} .str.14: ref;
axiom (.str.14 == $sub.ref(0, 50791));
const {:count 35} .str.15: ref;
axiom (.str.15 == $sub.ref(0, 51850));
const {:count 11} .str.16: ref;
axiom (.str.16 == $sub.ref(0, 52885));
const {:count 10} .str.17: ref;
axiom (.str.17 == $sub.ref(0, 53919));
const {:count 14} .str.18: ref;
axiom (.str.18 == $sub.ref(0, 54957));
const {:count 12} .str.19: ref;
axiom (.str.19 == $sub.ref(0, 55993));
const {:count 5} .str.20: ref;
axiom (.str.20 == $sub.ref(0, 57022));
const {:count 23} .str.21: ref;
axiom (.str.21 == $sub.ref(0, 58069));
const {:count 16} .str.30: ref;
axiom (.str.30 == $sub.ref(0, 59109));
const .str: ref;
axiom (.str == $sub.ref(0, 60173));
const __this_module: ref;
axiom (__this_module == $sub.ref(0, 32776));
const {:count 3} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 61200));
const {:count 5} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 62229));
const {:count 6} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 63259));
const {:count 29} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 64312));
const {:count 5} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 65341));
const {:count 5} .str.6: ref;
axiom (.str.6 == $sub.ref(0, 66370));
const {:count 34} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 67428));
const {:count 28} .str.8: ref;
axiom (.str.8 == $sub.ref(0, 68480));
const {:count 4} .str.9: ref;
axiom (.str.9 == $sub.ref(0, 69508));
const {:count 13} .str.10: ref;
axiom (.str.10 == $sub.ref(0, 70545));
const {:count 2} .str.11: ref;
axiom (.str.11 == $sub.ref(0, 71571));
const {:count 19} .str.32: ref;
axiom (.str.32 == $sub.ref(0, 72614));
const {:count 9} .str.33: ref;
axiom (.str.33 == $sub.ref(0, 73647));
const {:count 14} .str.2.54: ref;
axiom (.str.2.54 == $sub.ref(0, 74685));
const main: ref;
axiom (main == $sub.ref(0, 75717));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i16: i1;
  var $i17: i64;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i64;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $i15: i32;
  var $i2: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
$bb0:
  call $initialize();
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4472, 20} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4472, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := 1;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4473, 3} true;
  assume {:verifier.code 0} true;
  call ldv_initialize();
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4474, 3} true;
  assume {:verifier.code 0} true;
  call ldv_handler_precall();
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4475, 9} true;
  assume {:verifier.code 0} true;
  call $i0 := pt_init();
  // WARNING: %1 = call i32 @pt_init(), !dbg !3668, !verifier.code !3663
  call {:cexpr "tmp"} boogie_si_record_i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4476, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4476, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4477, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4560, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_final_state();
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4561, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4481, 3} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  goto $bb5;
$bb5:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4549, 13} true;
  assume {:verifier.code 1} true;
  call $i32 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i32);
  // WARNING: %54 = call i32 @__VERIFIER_nondet_int(), !dbg !3748, !verifier.code !3678
  call {:cexpr "tmp___1"} boogie_si_record_i32($i32);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4550, 15} true;
  assume {:verifier.code 0} true;
  $i33 := $ne.i32($i32, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4550, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i33} true;
  goto $bb45, $bb47;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4483, 13} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
  // WARNING: %7 = call i32 @__VERIFIER_nondet_int(), !dbg !3677, !verifier.code !3678
  call {:cexpr "tmp___0"} boogie_si_record_i32($i3);
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  $i4 := $slt.i32($i3, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i4 == 1);
  assume {:verifier.code 0} true;
  $i8 := $slt.i32($i3, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb17, $bb18;
$bb9:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  $i5 := $slt.i32($i3, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4516, 37} true;
  assume {:verifier.code 0} true;
  $i22 := $eq.i32($i2, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4516, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb35, $bb36;
$bb11:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  $i6 := $slt.i32($i3, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4532, 37} true;
  assume {:verifier.code 0} true;
  $i28 := $eq.i32($i2, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4532, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb41, $bb42;
$bb13:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  $i7 := $eq.i32($i3, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4541, 3} true;
  assume {:verifier.code 0} true;
  call ldv_handler_precall();
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4542, 3} true;
  assume {:verifier.code 0} true;
  call $i31 := pt_ioctl($u1, $u5, $u3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4543, 3} true;
  assume {:verifier.code 0} true;
  $i15 := $i2;
  goto $bb28;
$bb15:
  assume {:verifier.code 0} true;
  assume !(($i7 == 1));
  goto $bb16;
$bb16:
  assume {:verifier.code 0} true;
  goto $bb44;
$bb17:
  assume ($i8 == 1);
  assume {:verifier.code 0} true;
  $i9 := $eq.i32($i3, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb19, $bb20;
$bb18:
  assume !(($i8 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4501, 37} true;
  assume {:verifier.code 0} true;
  $i16 := $eq.i32($i2, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4501, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb29, $bb30;
$bb19:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4486, 37} true;
  assume {:verifier.code 0} true;
  $i10 := $eq.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4486, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb21, $bb22;
$bb20:
  assume {:verifier.code 0} true;
  assume !(($i9 == 1));
  goto $bb16;
$bb21:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4487, 5} true;
  assume {:verifier.code 0} true;
  call ldv_handler_precall();
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4488, 22} true;
  assume {:verifier.code 0} true;
  call $i11 := pt_open($u0, $u1);
  // WARNING: %11 = call i32 @pt_open(%struct.inode* undef, %struct.file* undef), !dbg !3687, !verifier.code !3663
  call {:cexpr "res_pt_open_21"} boogie_si_record_i32($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4489, 5} true;
  assume {:verifier.code 0} true;
  call ldv_check_return_value($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4490, 24} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i32($i11, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4490, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb23, $bb24;
$bb22:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  $i14 := $i2;
  goto $bb27;
$bb23:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4491, 7} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb24:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb26;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4557, 3} true;
  assume {:verifier.code 0} true;
  call ldv_handler_precall();
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4558, 3} true;
  assume {:verifier.code 0} true;
  call pt_exit();
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4558, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb26:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4495, 67} true;
  assume {:verifier.code 0} true;
  $i13 := $add.i32($i2, 1);
  // WARNING: %16 = add nsw i32 %.5, 1, !dbg !3696, !verifier.code !3663
  call {:cexpr "ldv_s_pt_fops_file_operations"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4496, 3} true;
  assume {:verifier.code 0} true;
  $i14 := $i13;
  goto $bb27;
$bb27:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4499, 3} true;
  assume {:verifier.code 0} true;
  $i15 := $i14;
  goto $bb28;
$bb28:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4546, 3} true;
  assume {:verifier.code 0} true;
  $i2 := $i15;
  goto $bb5;
$bb29:
  assume ($i16 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4502, 5} true;
  assume {:verifier.code 0} true;
  call ldv_handler_precall();
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4503, 22} true;
  assume {:verifier.code 0} true;
  call $i17 := pt_read($u1, $u2, $u3, $u4);
  // WARNING: %22 = call i64 @pt_read(%struct.file* undef, i8* undef, i64 undef, i64* undef), !dbg !3704, !verifier.code !3663
  call {:cexpr "res_pt_read_24"} boogie_si_record_i64($i17);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4504, 28} true;
  assume {:verifier.code 0} true;
  $i18 := $trunc.i64.i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4504, 5} true;
  assume {:verifier.code 0} true;
  call ldv_check_return_value($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4505, 24} true;
  assume {:verifier.code 0} true;
  $i19 := $slt.i64($i17, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4505, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb31, $bb32;
$bb30:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  $i21 := $i2;
  goto $bb34;
$bb31:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4506, 7} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb32:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  goto $bb33;
$bb33:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4510, 67} true;
  assume {:verifier.code 0} true;
  $i20 := $add.i32($i2, 1);
  // WARNING: %28 = add nsw i32 %.5, 1, !dbg !3714, !verifier.code !3663
  call {:cexpr "ldv_s_pt_fops_file_operations"} boogie_si_record_i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4511, 3} true;
  assume {:verifier.code 0} true;
  $i21 := $i20;
  goto $bb34;
$bb34:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4514, 3} true;
  assume {:verifier.code 0} true;
  $i15 := $i21;
  goto $bb28;
$bb35:
  assume ($i22 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4517, 5} true;
  assume {:verifier.code 0} true;
  call ldv_handler_precall();
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4518, 23} true;
  assume {:verifier.code 0} true;
  call $i23 := pt_write($u1, $u2, $u3, $u4);
  // WARNING: %34 = call i64 @pt_write(%struct.file* undef, i8* undef, i64 undef, i64* undef), !dbg !3722, !verifier.code !3663
  call {:cexpr "res_pt_write_25"} boogie_si_record_i64($i23);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4520, 28} true;
  assume {:verifier.code 0} true;
  $i24 := $trunc.i64.i32($i23);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4520, 5} true;
  assume {:verifier.code 0} true;
  call ldv_check_return_value($i24);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4521, 25} true;
  assume {:verifier.code 0} true;
  $i25 := $slt.i64($i23, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4521, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb37, $bb38;
$bb36:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  $i27 := $i2;
  goto $bb40;
$bb37:
  assume ($i25 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4522, 7} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb38:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  goto $bb39;
$bb39:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4526, 67} true;
  assume {:verifier.code 0} true;
  $i26 := $add.i32($i2, 1);
  // WARNING: %40 = add nsw i32 %.5, 1, !dbg !3732, !verifier.code !3663
  call {:cexpr "ldv_s_pt_fops_file_operations"} boogie_si_record_i32($i26);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4527, 3} true;
  assume {:verifier.code 0} true;
  $i27 := $i26;
  goto $bb40;
$bb40:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4530, 3} true;
  assume {:verifier.code 0} true;
  $i15 := $i27;
  goto $bb28;
$bb41:
  assume ($i28 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4533, 5} true;
  assume {:verifier.code 0} true;
  call ldv_handler_precall();
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4534, 5} true;
  assume {:verifier.code 0} true;
  call $i29 := pt_release($u0, $u1);
  // WARNING: %46 = call i32 @pt_release(%struct.inode* undef, %struct.file* undef), !dbg !3740, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4536, 3} true;
  assume {:verifier.code 0} true;
  $i30 := 0;
  goto $bb43;
$bb42:
  assume !(($i28 == 1));
  assume {:verifier.code 0} true;
  $i30 := $i2;
  goto $bb43;
$bb43:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4539, 3} true;
  assume {:verifier.code 0} true;
  $i15 := $i30;
  goto $bb28;
$bb44:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4545, 3} true;
  assume {:verifier.code 0} true;
  $i15 := $i2;
  goto $bb28;
$bb45:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4550, 20} true;
  assume {:verifier.code 0} true;
  assume ($i33 == 1);
  goto $bb46;
$bb46:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4551, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb47:
  assume !(($i33 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4550, 53} true;
  assume {:verifier.code 0} true;
  $i34 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4550, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb48, $bb49;
$bb48:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4550, 7} true;
  assume {:verifier.code 0} true;
  assume ($i34 == 1);
  goto $bb46;
$bb49:
  assume !(($i34 == 1));
  assume {:verifier.code 0} true;
  goto $bb50;
$bb50:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4550, 56} true;
  assume {:verifier.code 0} true;
  goto $bb25;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 76749));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const ldv_initialize: ref;
axiom (ldv_initialize == $sub.ref(0, 77781));
procedure  ldv_initialize()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5233, 30} true;
  assume {:verifier.code 0} true;
  $M.1 := 1;
  call {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5234, 18} true;
  assume {:verifier.code 0} true;
  $M.2 := 1;
  call {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5235, 19} true;
  assume {:verifier.code 0} true;
  $M.3 := 1;
  call {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5236, 22} true;
  assume {:verifier.code 0} true;
  $M.4 := 1;
  call {:cexpr "ldv_mutex_pt_mutex"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5237, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_handler_precall: ref;
axiom (ldv_handler_precall == $sub.ref(0, 78813));
procedure  ldv_handler_precall();
const pt_init: ref;
axiom (pt_init == $sub.ref(0, 79845));
procedure  pt_init()
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i3: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
$bb0:
  assume {:verifier.code 0} true;
  call $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4330, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4330, 15} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4330, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4332, 5} true;
  assume {:verifier.code 0} true;
  $i3 := $sub.i32(0, 22);
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4399, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4336, 9} true;
  assume {:verifier.code 0} true;
  call $i4 := pt_detect();
  // WARNING: %7 = call i32 @pt_detect(), !dbg !3673, !verifier.code !3660
  call {:cexpr "tmp"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4337, 11} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4337, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4339, 5} true;
  assume {:verifier.code 0} true;
  $i3 := $sub.i32(0, 19);
  goto $bb3;
$bb6:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4343, 40} true;
  assume {:verifier.code 0} true;
  $i6 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4343, 63} true;
  assume {:verifier.code 0} true;
  $p7 := $M.7;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4343, 9} true;
  assume {:verifier.code 0} true;
  call $i8 := register_chrdev($i6, $p7, pt_fops);
  // WARNING: %14 = call i32 @register_chrdev(i32 %12, i8* %13, %struct.file_operations* @pt_fops), !dbg !3683, !verifier.code !3660
  call {:cexpr "err"} boogie_si_record_i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4344, 11} true;
  assume {:verifier.code 0} true;
  $i9 := $slt.i32($i8, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4344, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4345, 56} true;
  assume {:verifier.code 0} true;
  $i10 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4345, 5} true;
  assume {:verifier.code 0} true;
  call $i11 := printk.ref.i32(.str, $i10);
  // WARNING: %18 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i32 0, i32 0), i32 %17), !dbg !3689, !verifier.code !3660
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4356, 9} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb17;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4357, 7} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4349, 18} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i32($M.8, $add.ref(pt, 208));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4349, 26} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i32($i12, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4349, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4350, 27} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.8, $add.ref(pt, 176));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4350, 7} true;
  assume {:verifier.code 0} true;
  call pi_release($p14);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4351, 5} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb13:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb14;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4357, 7} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4349, 18} true;
  assume {:verifier.code 0} true;
  $i36 := $load.i32($M.8, $add.ref($add.ref(pt, 232), 208));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4349, 26} true;
  assume {:verifier.code 0} true;
  $i37 := $ne.i32($i36, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4349, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb29, $bb30;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4362, 5} true;
  assume {:verifier.code 0} true;
  $i3 := $i8;
  goto $bb3;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4366, 9} true;
  assume {:verifier.code 0} true;
  $M.6 := $i8;
  call {:cexpr "major"} boogie_si_record_i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4367, 13} true;
  assume {:verifier.code 0} true;
  call $p15 := __class_create(__this_module, .str.1, $p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4368, 12} true;
  assume {:verifier.code 0} true;
  $M.9 := $p15;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4369, 36} true;
  assume {:verifier.code 0} true;
  $p16 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4369, 20} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p16);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4369, 13} true;
  assume {:verifier.code 0} true;
  call $i18 := IS_ERR($p17);
  // WARNING: %33 = call i64 @IS_ERR(i8* %32), !dbg !3712, !verifier.code !3660
  call {:cexpr "tmp___2"} boogie_si_record_i64($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4370, 15} true;
  assume {:verifier.code 0} true;
  $i19 := $ne.i64($i18, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4370, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb18, $bb19;
$bb18:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4371, 39} true;
  assume {:verifier.code 0} true;
  $p20 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4371, 23} true;
  assume {:verifier.code 0} true;
  $p21 := $bitcast.ref.ref($p20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4371, 15} true;
  assume {:verifier.code 0} true;
  call $i22 := PTR_ERR($p21);
  // WARNING: %38 = call i64 @PTR_ERR(i8* %37), !dbg !3721, !verifier.code !3660
  call {:cexpr "tmp___1"} boogie_si_record_i64($i22);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4372, 11} true;
  assume {:verifier.code 0} true;
  $i23 := $trunc.i64.i32($i22);
  // WARNING: %39 = trunc i64 %38 to i32, !dbg !3724, !verifier.code !3660
  call {:cexpr "err"} boogie_si_record_i32($i23);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4373, 5} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb19:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4397, 36} true;
  assume {:verifier.code 0} true;
  $i35 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4397, 3} true;
  assume {:verifier.code 0} true;
  call unregister_chrdev($i35, .str.1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4397, 3} true;
  assume {:verifier.code 0} true;
  $i3 := $i23;
  goto $bb3;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4389, 7} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4390, 5} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4380, 16} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i32($M.8, $add.ref(pt, 208));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4380, 24} true;
  assume {:verifier.code 0} true;
  $i25 := $ne.i32($i24, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4380, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i25 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 19} true;
  assume {:verifier.code 0} true;
  $p26 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 42} true;
  assume {:verifier.code 0} true;
  $i27 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 48} true;
  assume {:verifier.code 0} true;
  $i28 := $shl.i32($i27, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 5} true;
  assume {:verifier.code 0} true;
  call $p29 := device_create.ref.ref.i32.ref.ref.i32($p26, $0.ref, $i28, $0.ref, .str.2, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 19} true;
  assume {:verifier.code 0} true;
  $p30 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 42} true;
  assume {:verifier.code 0} true;
  $i31 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 48} true;
  assume {:verifier.code 0} true;
  $i32 := $shl.i32($i31, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 55} true;
  assume {:verifier.code 0} true;
  $i33 := $or.i32($i32, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 5} true;
  assume {:verifier.code 0} true;
  call $p34 := device_create.ref.ref.i32.ref.ref.i32($p30, $0.ref, $i33, $0.ref, .str.3, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4384, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb25:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  goto $bb26;
$bb26:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4390, 5} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4380, 16} true;
  assume {:verifier.code 0} true;
  $i45 := $load.i32($M.8, $add.ref($add.ref(pt, 232), 208));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4380, 24} true;
  assume {:verifier.code 0} true;
  $i46 := $ne.i32($i45, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4380, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb40, $bb41;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4395, 3} true;
  assume {:verifier.code 0} true;
  $i3 := $i8;
  goto $bb3;
$bb29:
  assume ($i37 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4350, 27} true;
  assume {:verifier.code 0} true;
  $p38 := $load.ref($M.8, $add.ref($add.ref(pt, 232), 176));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4350, 7} true;
  assume {:verifier.code 0} true;
  call pi_release($p38);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4351, 5} true;
  assume {:verifier.code 0} true;
  goto $bb31;
$bb30:
  assume !(($i37 == 1));
  assume {:verifier.code 0} true;
  goto $bb31;
$bb31:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4357, 7} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb32:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4349, 18} true;
  assume {:verifier.code 0} true;
  $i39 := $load.i32($M.8, $add.ref($add.ref(pt, 464), 208));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4349, 26} true;
  assume {:verifier.code 0} true;
  $i40 := $ne.i32($i39, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4349, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb33, $bb34;
$bb33:
  assume ($i40 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4350, 27} true;
  assume {:verifier.code 0} true;
  $p41 := $load.ref($M.8, $add.ref($add.ref(pt, 464), 176));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4350, 7} true;
  assume {:verifier.code 0} true;
  call pi_release($p41);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4351, 5} true;
  assume {:verifier.code 0} true;
  goto $bb35;
$bb34:
  assume !(($i40 == 1));
  assume {:verifier.code 0} true;
  goto $bb35;
$bb35:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4357, 7} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb36:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4349, 18} true;
  assume {:verifier.code 0} true;
  $i42 := $load.i32($M.8, $add.ref($add.ref(pt, 696), 208));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4349, 26} true;
  assume {:verifier.code 0} true;
  $i43 := $ne.i32($i42, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4349, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i43} true;
  goto $bb37, $bb38;
$bb37:
  assume ($i43 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4350, 27} true;
  assume {:verifier.code 0} true;
  $p44 := $load.ref($M.8, $add.ref($add.ref(pt, 696), 176));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4350, 7} true;
  assume {:verifier.code 0} true;
  call pi_release($p44);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4351, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb38:
  assume !(($i43 == 1));
  assume {:verifier.code 0} true;
  goto $bb39;
$bb39:
  assume {:verifier.code 0} true;
  goto $bb16;
$bb40:
  assume ($i46 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 19} true;
  assume {:verifier.code 0} true;
  $p47 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 42} true;
  assume {:verifier.code 0} true;
  $i48 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 48} true;
  assume {:verifier.code 0} true;
  $i49 := $shl.i32($i48, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 55} true;
  assume {:verifier.code 0} true;
  $i50 := $or.i32($i49, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 5} true;
  assume {:verifier.code 0} true;
  call $p51 := device_create.ref.ref.i32.ref.ref.i32($p47, $0.ref, $i50, $0.ref, .str.2, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 19} true;
  assume {:verifier.code 0} true;
  $p52 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 42} true;
  assume {:verifier.code 0} true;
  $i53 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 48} true;
  assume {:verifier.code 0} true;
  $i54 := $shl.i32($i53, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 55} true;
  assume {:verifier.code 0} true;
  $i55 := $or.i32($i54, 129);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 5} true;
  assume {:verifier.code 0} true;
  call $p56 := device_create.ref.ref.i32.ref.ref.i32($p52, $0.ref, $i55, $0.ref, .str.3, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4384, 3} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb41:
  assume !(($i46 == 1));
  assume {:verifier.code 0} true;
  goto $bb42;
$bb42:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4390, 5} true;
  assume {:verifier.code 0} true;
  goto $bb43;
$bb43:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4380, 16} true;
  assume {:verifier.code 0} true;
  $i57 := $load.i32($M.8, $add.ref($add.ref(pt, 464), 208));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4380, 24} true;
  assume {:verifier.code 0} true;
  $i58 := $ne.i32($i57, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4380, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i58} true;
  goto $bb44, $bb45;
$bb44:
  assume ($i58 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 19} true;
  assume {:verifier.code 0} true;
  $p59 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 42} true;
  assume {:verifier.code 0} true;
  $i60 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 48} true;
  assume {:verifier.code 0} true;
  $i61 := $shl.i32($i60, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 55} true;
  assume {:verifier.code 0} true;
  $i62 := $or.i32($i61, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 5} true;
  assume {:verifier.code 0} true;
  call $p63 := device_create.ref.ref.i32.ref.ref.i32($p59, $0.ref, $i62, $0.ref, .str.2, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 19} true;
  assume {:verifier.code 0} true;
  $p64 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 42} true;
  assume {:verifier.code 0} true;
  $i65 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 48} true;
  assume {:verifier.code 0} true;
  $i66 := $shl.i32($i65, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 55} true;
  assume {:verifier.code 0} true;
  $i67 := $or.i32($i66, 130);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 5} true;
  assume {:verifier.code 0} true;
  call $p68 := device_create.ref.ref.i32.ref.ref.i32($p64, $0.ref, $i67, $0.ref, .str.3, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4384, 3} true;
  assume {:verifier.code 0} true;
  goto $bb46;
$bb45:
  assume !(($i58 == 1));
  assume {:verifier.code 0} true;
  goto $bb46;
$bb46:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4390, 5} true;
  assume {:verifier.code 0} true;
  goto $bb47;
$bb47:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4380, 16} true;
  assume {:verifier.code 0} true;
  $i69 := $load.i32($M.8, $add.ref($add.ref(pt, 696), 208));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4380, 24} true;
  assume {:verifier.code 0} true;
  $i70 := $ne.i32($i69, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4380, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i70} true;
  goto $bb48, $bb49;
$bb48:
  assume ($i70 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 19} true;
  assume {:verifier.code 0} true;
  $p71 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 42} true;
  assume {:verifier.code 0} true;
  $i72 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 48} true;
  assume {:verifier.code 0} true;
  $i73 := $shl.i32($i72, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 55} true;
  assume {:verifier.code 0} true;
  $i74 := $or.i32($i73, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4381, 5} true;
  assume {:verifier.code 0} true;
  call $p75 := device_create.ref.ref.i32.ref.ref.i32($p71, $0.ref, $i74, $0.ref, .str.2, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 19} true;
  assume {:verifier.code 0} true;
  $p76 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 42} true;
  assume {:verifier.code 0} true;
  $i77 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 48} true;
  assume {:verifier.code 0} true;
  $i78 := $shl.i32($i77, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 55} true;
  assume {:verifier.code 0} true;
  $i79 := $or.i32($i78, 131);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4382, 5} true;
  assume {:verifier.code 0} true;
  call $p80 := device_create.ref.ref.i32.ref.ref.i32($p76, $0.ref, $i79, $0.ref, .str.3, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4384, 3} true;
  assume {:verifier.code 0} true;
  goto $bb50;
$bb49:
  assume !(($i70 == 1));
  assume {:verifier.code 0} true;
  goto $bb50;
$bb50:
  assume {:verifier.code 0} true;
  goto $bb28;
}
const pt_open: ref;
axiom (pt_open == $sub.ref(0, 80877));
procedure  pt_open($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i14: i32;
  var $p46: ref;
  var $i10: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3833, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := iminor($p0);
  // WARNING: %3 = call i32 @iminor(%struct.inode* %0), !dbg !3666, !verifier.code !3663
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3834, 20} true;
  assume {:verifier.code 0} true;
  $i3 := $and.i32($i2, 127);
  // WARNING: %4 = and i32 %3, 127, !dbg !3670, !verifier.code !3663
  call {:cexpr "unit"} boogie_si_record_i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3835, 37} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i3);
  $p5 := $add.ref(pt, $mul.ref($i4, 232));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3836, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_lock_8(pt_mutex);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3837, 12} true;
  assume {:verifier.code 0} true;
  $i6 := $sgt.i32($i3, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3837, 16} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3837, 16} true;
  assume {:verifier.code 0} true;
  assume ($i6 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3838, 5} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_9(pt_mutex);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3839, 5} true;
  assume {:verifier.code 0} true;
  $i10 := $sub.i32(0, 19);
  goto $bb6;
$bb3:
  assume !(($i6 == 1));
  $p7 := $add.ref($add.ref(pt, $mul.ref($i4, 232)), 208);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3837, 25} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.8, $p7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3837, 33} true;
  assume {:verifier.code 0} true;
  $i9 := $eq.i32($i8, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3837, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3837, 7} true;
  assume {:verifier.code 0} true;
  assume ($i9 == 1);
  goto $bb2;
$bb5:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3886, 1} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
$bb7:
  $p11 := $add.ref($add.ref(pt, $mul.ref($i4, 232)), 196);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3844, 13} true;
  assume {:verifier.code 0} true;
  call $i12 := atomic_dec_and_test($p11);
  // WARNING: %16 = call i32 @atomic_dec_and_test(%struct.__anonstruct_atomic_t_6* %15), !dbg !3689, !verifier.code !3663
  call {:cexpr "tmp___0"} boogie_si_record_i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3845, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $eq.i32($i12, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3845, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3846, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 16);
  goto $bb10;
$bb9:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume {:verifier.code 0} true;
  $p46 := $add.ref($add.ref(pt, $mul.ref($i4, 232)), 196);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3882, 3} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p46);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3883, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_11(pt_mutex);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3884, 3} true;
  assume {:verifier.code 0} true;
  $i10 := $i14;
  goto $bb6;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3850, 3} true;
  assume {:verifier.code 0} true;
  call $i15 := pt_identify($p5);
  // WARNING: %21 = call i32 @pt_identify(%struct.pt_unit* %6), !dbg !3697, !verifier.code !3663
  $p16 := $add.ref($add.ref(pt, $mul.ref($i4, 232)), 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3852, 14} true;
  assume {:verifier.code 0} true;
  $i17 := $load.i32($M.8, $p16);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3852, 20} true;
  assume {:verifier.code 0} true;
  $i18 := $and.i32($i17, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3852, 25} true;
  assume {:verifier.code 0} true;
  $i19 := $eq.i32($i18, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3852, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3853, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 19);
  goto $bb10;
$bb13:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  goto $bb14;
$bb14:
  $p20 := $add.ref($add.ref(pt, $mul.ref($i4, 232)), 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3858, 14} true;
  assume {:verifier.code 0} true;
  $i21 := $load.i32($M.8, $p20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3858, 20} true;
  assume {:verifier.code 0} true;
  $i22 := $and.i32($i21, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3858, 25} true;
  assume {:verifier.code 0} true;
  $i23 := $eq.i32($i22, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3858, 30} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i23} true;
  goto $bb15, $bb16;
$bb15:
  assume ($i23 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3858, 40} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p1, 132);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3858, 40} true;
  assume {:verifier.code 0} true;
  $i25 := $load.i32($M.8, $p24);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3858, 47} true;
  assume {:verifier.code 0} true;
  $i26 := $and.i32($i25, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3858, 53} true;
  assume {:verifier.code 0} true;
  $i27 := $ne.i32($i26, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3858, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb18, $bb19;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3858, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i23 == 1));
  goto $bb17;
$bb17:
  assume {:verifier.code 0} true;
  goto $bb20;
$bb18:
  assume ($i27 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3859, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 30);
  goto $bb10;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3858, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i27 == 1));
  goto $bb17;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3863, 13} true;
  assume {:verifier.code 0} true;
  call $i28 := iminor($p0);
  // WARNING: %41 = call i32 @iminor(%struct.inode* %0), !dbg !3717, !verifier.code !3663
  call {:cexpr "tmp___1"} boogie_si_record_i32($i28);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3864, 16} true;
  assume {:verifier.code 0} true;
  $i29 := $and.i32($i28, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3864, 24} true;
  assume {:verifier.code 0} true;
  $i30 := $eq.i32($i29, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3864, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i30 == 1);
  $p31 := $add.ref($add.ref(pt, $mul.ref($i4, 232)), 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3865, 25} true;
  assume {:verifier.code 0} true;
  $i32 := $load.i32($M.8, $p31);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3865, 31} true;
  assume {:verifier.code 0} true;
  $i33 := $or.i32($i32, 4);
  $p34 := $add.ref($add.ref(pt, $mul.ref($i4, 232)), 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3865, 17} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p34, $i33);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3866, 3} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb22:
  assume !(($i30 == 1));
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3870, 13} true;
  assume {:verifier.code 0} true;
  call $p35 := kmalloc(16384, 208);
  $p36 := $add.ref($add.ref(pt, $mul.ref($i4, 232)), 216);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3871, 16} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p36, $p35);
  $p37 := $add.ref($add.ref(pt, $mul.ref($i4, 232)), 216);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3872, 29} true;
  assume {:verifier.code 0} true;
  $p38 := $load.ref($M.8, $p37);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3872, 7} true;
  assume {:verifier.code 0} true;
  $i39 := $p2i.ref.i64($p38);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3872, 36} true;
  assume {:verifier.code 0} true;
  $i40 := $eq.i64($i39, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3872, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i40 == 1);
  $p41 := $add.ref($add.ref(pt, $mul.ref($i4, 232)), 224);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3873, 46} true;
  assume {:verifier.code 0} true;
  $p42 := $bitcast.ref.ref($p41);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3873, 5} true;
  assume {:verifier.code 0} true;
  call $i43 := printk.ref.ref(.str.31, $p42);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3874, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 12);
  goto $bb10;
$bb25:
  assume !(($i40 == 1));
  assume {:verifier.code 0} true;
  goto $bb26;
$bb26:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3878, 24} true;
  assume {:verifier.code 0} true;
  $p44 := $bitcast.ref.ref($p5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3878, 9} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($p1, 296);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3878, 22} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p45, $p5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3879, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_10(pt_mutex);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3880, 3} true;
  assume {:verifier.code 0} true;
  $i10 := 0;
  goto $bb6;
}
const ldv_check_return_value: ref;
axiom (ldv_check_return_value == $sub.ref(0, 81909));
procedure  ldv_check_return_value($i0: i32);
const pt_read: ref;
axiom (pt_read == $sub.ref(0, 82941));
procedure  pt_read($p0: ref, $p1: ref, $i2: i64, $p3: ref)
  returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i8;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i64;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i64;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $i99: i1;
  var $i100: i32;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i64;
  var $i105: i1;
  var $i106: i32;
  var $i107: i32;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i64;
  var $i116: i64;
  var $i117: i1;
  var $i96: i64;
  var $i97: i32;
  var $i98: i32;
  var $i118: i32;
  var $i119: i64;
  var $i94: i32;
  var $i95: i64;
  var $i120: i8;
  var $i121: i1;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $i134: i1;
  var $i44: i64;
  var $i45: i32;
  var $i135: i32;
  var $i43: i32;
  var $i133: i32;
  var $i136: i64;
  var $i33: i64;
$bb0:
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(12, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !3954, metadata !3661), !dbg !3955, !verifier.code !3663
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3976, 34} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 296);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3976, 34} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.8, $p5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3976, 10} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3977, 14} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p7, 176);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3977, 14} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.8, $p8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3978, 3} true;
  assume {:verifier.code 0} true;
  $p10 := $p4;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3978, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p10, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3979, 3} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p4, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3979, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p11, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3980, 3} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p4, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3980, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p12, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3981, 3} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p4, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3981, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p13, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3982, 3} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p4, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3982, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p14, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3983, 3} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p4, 5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3983, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p15, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3984, 3} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p4, 6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3984, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p16, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3985, 3} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p4, 7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3985, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p17, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3986, 3} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p4, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3986, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p18, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3987, 3} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p4, 9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3987, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p19, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3988, 3} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p4, 10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3988, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p20, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3989, 3} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p4, 11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3989, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p21, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3990, 14} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3990, 14} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i32($M.8, $p22);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3990, 20} true;
  assume {:verifier.code 0} true;
  $i24 := $and.i32($i23, 24);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3990, 26} true;
  assume {:verifier.code 0} true;
  $i25 := $eq.i32($i24, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3990, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i25 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3991, 25} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3991, 25} true;
  assume {:verifier.code 0} true;
  $i27 := $load.i32($M.8, $p26);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3991, 31} true;
  assume {:verifier.code 0} true;
  $i28 := $or.i32($i27, 16);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3991, 11} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3991, 17} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p29, $i28);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3992, 26} true;
  assume {:verifier.code 0} true;
  $p30 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3992, 11} true;
  assume {:verifier.code 0} true;
  call $i31 := pt_atapi($p7, $p30, 0, $0.ref, .str.34);
  // WARNING: %33 = call i32 @pt_atapi(%struct.pt_unit* %8, i8* %32, i32 0, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.34, i32 0, i32 0)), !dbg !3716, !verifier.code !3660
  call {:cexpr "tmp"} boogie_si_record_i32($i31);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3993, 13} true;
  assume {:verifier.code 0} true;
  $i32 := $ne.i32($i31, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3993, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i25 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3999, 14} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3999, 14} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i32($M.8, $p34);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3999, 20} true;
  assume {:verifier.code 0} true;
  $i36 := $and.i32($i35, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3999, 25} true;
  assume {:verifier.code 0} true;
  $i37 := $ne.i32($i36, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3999, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb8, $bb9;
$bb3:
  assume ($i32 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3994, 7} true;
  assume {:verifier.code 0} true;
  $i33 := $sub.i64(0, 5);
  goto $bb5;
$bb4:
  assume !(($i32 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4133, 1} true;
  assume {:verifier.code 0} true;
  $r := $i33;
  $exn := false;
  return;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3998, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4004, 14} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4004, 14} true;
  assume {:verifier.code 0} true;
  $i39 := $load.i32($M.8, $p38);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4004, 20} true;
  assume {:verifier.code 0} true;
  $i40 := $and.i32($i39, 32);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4004, 26} true;
  assume {:verifier.code 0} true;
  $i41 := $ne.i32($i40, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4004, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb11, $bb12;
$bb8:
  assume ($i37 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4000, 5} true;
  assume {:verifier.code 0} true;
  $i33 := $sub.i64(0, 5);
  goto $bb5;
$bb9:
  assume !(($i37 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:verifier.code 0} true;
  goto $bb7;
$bb11:
  assume ($i41 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4005, 5} true;
  assume {:verifier.code 0} true;
  $i33 := 0;
  goto $bb5;
$bb12:
  assume !(($i41 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4125, 13} true;
  assume {:verifier.code 0} true;
  $i42 := $ne.i64($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4125, 7} true;
  assume {:verifier.code 0} true;
  $i43 := 0;
  assume {:branchcond $i42} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i42 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4125, 7} true;
  assume {:verifier.code 0} true;
  $i44, $i45 := $i2, 0;
  goto $bb17;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4125, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i42 == 1));
  goto $bb16;
$bb16:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb74;
$bb17:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4126, 5} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4012, 13} true;
  assume {:verifier.code 0} true;
  call $i46 := pt_poll_dsc($p7, 2, 3000, .str.35);
  // WARNING: %56 = call i32 @pt_poll_dsc(%struct.pt_unit* %8, i32 2, i32 3000, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i32 0, i32 0)), !dbg !3744, !verifier.code !3660
  call {:cexpr "tmp___0"} boogie_si_record_i32($i46);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4013, 15} true;
  assume {:verifier.code 0} true;
  $i47 := $eq.i32($i46, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4013, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i47} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i47 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4014, 5} true;
  assume {:verifier.code 0} true;
  $i33 := $sub.i64(0, 5);
  goto $bb5;
$bb20:
  assume !(($i47 == 1));
  assume {:verifier.code 0} true;
  goto $bb21;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4018, 7} true;
  assume {:verifier.code 0} true;
  $i48 := $trunc.i64.i32($i44);
  // WARNING: %61 = trunc i64 %.236 to i32, !dbg !3752, !verifier.code !3660
  call {:cexpr "n"} boogie_si_record_i32($i48);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4019, 9} true;
  assume {:verifier.code 0} true;
  $i49 := $sgt.i32($i48, 32768);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4019, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb22, $bb23;
$bb22:
  assume ($i49 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4021, 3} true;
  assume {:verifier.code 0} true;
  $i50 := 32768;
  goto $bb24;
$bb23:
  assume !(($i49 == 1));
  assume {:verifier.code 0} true;
  $i50 := $i48;
  goto $bb24;
$bb24:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4024, 11} true;
  assume {:verifier.code 0} true;
  $i51 := $add.i32($i50, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4024, 25} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($p7, 200);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4024, 25} true;
  assume {:verifier.code 0} true;
  $i53 := $load.i32($M.8, $p52);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4024, 17} true;
  assume {:verifier.code 0} true;
  $i54 := $add.i32($i51, $i53);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4024, 37} true;
  assume {:verifier.code 0} true;
  $p55 := $add.ref($p7, 200);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4024, 37} true;
  assume {:verifier.code 0} true;
  $i56 := $load.i32($M.8, $p55);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4024, 29} true;
  assume {:verifier.code 0} true;
  $i57 := $sdiv.i32($i54, $i56);
  // WARNING: %72 = sdiv i32 %69, %71, !dbg !3764, !verifier.code !3660
  call {:cexpr "b"} boogie_si_record_i32($i57);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4025, 13} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($p7, 200);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4025, 13} true;
  assume {:verifier.code 0} true;
  $i59 := $load.i32($M.8, $p58);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4025, 16} true;
  assume {:verifier.code 0} true;
  $i60 := $mul.i32($i59, $i57);
  // WARNING: %75 = mul nsw i32 %74, %72, !dbg !3768, !verifier.code !3660
  call {:cexpr "n"} boogie_si_record_i32($i60);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4026, 15} true;
  assume {:verifier.code 0} true;
  $i61 := $trunc.i32.i8($i57);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4026, 3} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($p4, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4026, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p62, $i61);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4027, 24} true;
  assume {:verifier.code 0} true;
  $p63 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4027, 7} true;
  assume {:verifier.code 0} true;
  call $i64 := pt_command($p7, $p63, $i60, .str.35);
  // WARNING: %79 = call i32 @pt_command(%struct.pt_unit* %8, i8* %78, i32 %75, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i32 0, i32 0)), !dbg !3773, !verifier.code !3660
  call {:cexpr "r"} boogie_si_record_i32($i64);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4028, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb25, $bb26;
$bb25:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4029, 5} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4030, 3} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb26:
  assume !((1 == 1));
  // WARNING: call void @llvm.dbg.value(metadata i64 1, i64 0, metadata !4071, metadata !3661), !dbg !4072, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i64 1, i64 0, metadata !4073, metadata !3661), !dbg !4074, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4038, 9} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4045, 9} true;
  assume {:verifier.code 0} true;
  $i65 := $ne.i32($i64, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4045, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i65} true;
  goto $bb31, $bb32;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4039, 7} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb29:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4034, 5} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  // WARNING: call void @__const_udelay(i64 4295000), !dbg !3787, !verifier.code !3660
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4073, metadata !3661), !dbg !4074, !verifier.code !3663
  assume {:verifier.code 0} true;
  goto $bb30;
$bb30:
  assume {:verifier.code 0} true;
  goto $bb27;
$bb31:
  assume ($i65 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4046, 5} true;
  assume {:verifier.code 0} true;
  call pt_req_sense($p7, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4047, 5} true;
  assume {:verifier.code 0} true;
  $i33 := $sub.i64(0, 5);
  goto $bb5;
$bb32:
  assume !(($i65 == 1));
  assume {:verifier.code 0} true;
  goto $bb33;
$bb33:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4052, 7} true;
  assume {:verifier.code 0} true;
  call $i66 := pt_wait($p7, 128, 73, $0.ref, .str.37);
  // WARNING: %90 = call i32 @pt_wait(%struct.pt_unit* %8, i32 128, i32 73, i8* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.37, i32 0, i32 0)), !dbg !3797, !verifier.code !3660
  call {:cexpr "r"} boogie_si_record_i32($i66);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4053, 10} true;
  assume {:verifier.code 0} true;
  $i67 := $and.i32($i66, 126976);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4053, 20} true;
  assume {:verifier.code 0} true;
  $i68 := $ne.i32($i67, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4053, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb34, $bb35;
$bb34:
  assume ($i68 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4053, 7} true;
  assume {:verifier.code 0} true;
  goto $bb37;
$bb35:
  assume !(($i68 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4053, 7} true;
  assume {:verifier.code 0} true;
  $i69, $i70, $i71 := $i66, $i44, $i45;
  goto $bb36;
$bb36:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb37:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4054, 5} true;
  assume {:verifier.code 0} true;
  call pi_disconnect($p9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4055, 5} true;
  assume {:verifier.code 0} true;
  call pt_req_sense($p7, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4056, 5} true;
  assume {:verifier.code 0} true;
  $i33 := $sub.i64(0, 5);
  goto $bb5;
$bb38:
  assume ($i127 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4053, 7} true;
  assume {:verifier.code 0} true;
  goto $bb37;
$bb39:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4060, 9} true;
  assume {:verifier.code 0} true;
  $i72 := $ne.i32($i69, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4060, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i72} true;
  goto $bb40, $bb41;
$bb40:
  assume ($i72 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4061, 25} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4061, 25} true;
  assume {:verifier.code 0} true;
  $i74 := $load.i32($M.8, $p73);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4061, 31} true;
  assume {:verifier.code 0} true;
  $i75 := $or.i32($i74, 32);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4061, 11} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4061, 17} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p76, $i75);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4062, 3} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb41:
  assume !(($i72 == 1));
  assume {:verifier.code 0} true;
  goto $bb42;
$bb42:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4065, 7} true;
  assume {:verifier.code 0} true;
  call $i77 := read_reg($p9, 7);
  // WARNING: %105 = call i32 @read_reg(%struct.pi_adapter* %10, i32 7), !dbg !3815, !verifier.code !3660
  call {:cexpr "s"} boogie_si_record_i32($i77);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4066, 10} true;
  assume {:verifier.code 0} true;
  $i78 := $and.i32($i77, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4066, 15} true;
  assume {:verifier.code 0} true;
  $i79 := $eq.i32($i78, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4066, 7} true;
  assume {:verifier.code 0} true;
  $i80, $i81 := $i71, $i70;
  assume {:branchcond $i79} true;
  goto $bb43, $bb44;
$bb43:
  assume ($i79 == 1);
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4067, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb44:
  assume !(($i79 == 1));
  assume {:verifier.code 0} true;
  goto $bb46;
$bb45:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4118, 3} true;
  assume {:verifier.code 0} true;
  call pi_disconnect($p9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4119, 14} true;
  assume {:verifier.code 0} true;
  $p128 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4119, 14} true;
  assume {:verifier.code 0} true;
  $i129 := $load.i32($M.8, $p128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4119, 20} true;
  assume {:verifier.code 0} true;
  $i130 := $and.i32($i129, 32);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4119, 26} true;
  assume {:verifier.code 0} true;
  $i131 := $ne.i32($i130, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4119, 7} true;
  assume {:verifier.code 0} true;
  $i132 := $i80;
  assume {:branchcond $i131} true;
  goto $bb68, $bb69;
$bb46:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4071, 13} true;
  assume {:verifier.code 0} true;
  call $i82 := read_reg($p9, 4);
  // WARNING: %111 = call i32 @read_reg(%struct.pi_adapter* %10, i32 4), !dbg !3824, !verifier.code !3660
  call {:cexpr "tmp___2"} boogie_si_record_i32($i82);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4072, 13} true;
  assume {:verifier.code 0} true;
  call $i83 := read_reg($p9, 5);
  // WARNING: %112 = call i32 @read_reg(%struct.pi_adapter* %10, i32 5), !dbg !3827, !verifier.code !3660
  call {:cexpr "tmp___3"} boogie_si_record_i32($i83);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4073, 25} true;
  assume {:verifier.code 0} true;
  $i84 := $mul.i32($i83, 256);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4073, 15} true;
  assume {:verifier.code 0} true;
  $i85 := $add.i32($i82, $i84);
  // WARNING: %114 = add nsw i32 %111, %113, !dbg !3831, !verifier.code !3660
  call {:cexpr "n"} boogie_si_record_i32($i85);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4074, 13} true;
  assume {:verifier.code 0} true;
  call $i86 := read_reg($p9, 2);
  // WARNING: %115 = call i32 @read_reg(%struct.pi_adapter* %10, i32 2), !dbg !3832, !verifier.code !3660
  call {:cexpr "tmp___4"} boogie_si_record_i32($i86);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4075, 15} true;
  assume {:verifier.code 0} true;
  $i87 := $and.i32($i86, 3);
  // WARNING: %116 = and i32 %115, 3, !dbg !3835, !verifier.code !3660
  call {:cexpr "p"} boogie_si_record_i32($i87);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4076, 9} true;
  assume {:verifier.code 0} true;
  $i88 := $ne.i32($i87, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4076, 7} true;
  assume {:verifier.code 0} true;
  $i89 := $i87;
  assume {:branchcond $i88} true;
  goto $bb47, $bb48;
$bb47:
  assume ($i88 == 1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4077, 5} true;
  assume {:verifier.code 0} true;
  call pi_disconnect($p9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4078, 62} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($p7, 224);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4078, 45} true;
  assume {:verifier.code 0} true;
  $p91 := $bitcast.ref.ref($p90);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4078, 5} true;
  assume {:verifier.code 0} true;
  call $i92 := printk.ref.ref.i32(.str.38, $p91, $i89);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4079, 5} true;
  assume {:verifier.code 0} true;
  $i33 := $sub.i64(0, 5);
  goto $bb5;
$bb48:
  assume !(($i88 == 1));
  assume {:verifier.code 0} true;
  goto $bb49;
$bb49:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4110, 9} true;
  assume {:verifier.code 0} true;
  $i93 := $sgt.i32($i85, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4110, 7} true;
  assume {:verifier.code 0} true;
  $i94, $i95 := $i71, $i70;
  assume {:branchcond $i93} true;
  goto $bb50, $bb51;
$bb50:
  assume ($i93 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4110, 7} true;
  assume {:verifier.code 0} true;
  $i96, $i97, $i98 := $i70, $i71, $i85;
  goto $bb53;
$bb51:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4110, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i93 == 1));
  goto $bb52;
$bb52:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb66;
$bb53:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4111, 5} true;
  assume {:verifier.code 0} true;
  goto $bb54;
$bb54:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4086, 9} true;
  assume {:verifier.code 0} true;
  $i99 := $sgt.i32($i98, 16384);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4086, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i99} true;
  goto $bb55, $bb56;
$bb55:
  assume ($i99 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4088, 3} true;
  assume {:verifier.code 0} true;
  $i100 := 16384;
  goto $bb57;
$bb56:
  assume !(($i99 == 1));
  assume {:verifier.code 0} true;
  $i100 := $i98;
  goto $bb57;
$bb57:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4091, 27} true;
  assume {:verifier.code 0} true;
  $p101 := $add.ref($p7, 216);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4091, 27} true;
  assume {:verifier.code 0} true;
  $p102 := $load.ref($M.8, $p101);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4091, 3} true;
  assume {:verifier.code 0} true;
  call pi_read_block($p9, $p102, $i100);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4092, 9} true;
  assume {:verifier.code 0} true;
  $i103 := $sub.i32($i98, $i100);
  // WARNING: %132 = sub nsw i32 %.1825, %.09, !dbg !3859, !verifier.code !3660
  call {:cexpr "n"} boogie_si_record_i32($i103);
  // WARNING: call void @llvm.dbg.value(metadata i32 %132, i64 0, metadata !4043, metadata !3661), !dbg !4044, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4094, 7} true;
  assume {:verifier.code 0} true;
  $i104 := $sext.i32.i64($i100);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4094, 18} true;
  assume {:verifier.code 0} true;
  $i105 := $ugt.i64($i104, $i96);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4094, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i105} true;
  goto $bb58, $bb59;
$bb58:
  assume ($i105 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4095, 9} true;
  assume {:verifier.code 0} true;
  $i106 := $trunc.i64.i32($i96);
  // WARNING: %136 = trunc i64 %.127 to i32, !dbg !3864, !verifier.code !3660
  call {:cexpr "b"} boogie_si_record_i32($i106);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4096, 3} true;
  assume {:verifier.code 0} true;
  $i107 := $i106;
  goto $bb60;
$bb59:
  assume !(($i105 == 1));
  assume {:verifier.code 0} true;
  $i107 := $i100;
  goto $bb60;
$bb60:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4099, 40} true;
  assume {:verifier.code 0} true;
  $i108 := $sext.i32.i64($i97);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4099, 38} true;
  assume {:verifier.code 0} true;
  $p109 := $add.ref($p1, $mul.ref($i108, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4099, 81} true;
  assume {:verifier.code 0} true;
  $p110 := $add.ref($p7, 216);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4099, 81} true;
  assume {:verifier.code 0} true;
  $p111 := $load.ref($M.8, $p110);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4099, 13} true;
  assume {:verifier.code 0} true;
  call $i112 := copy_to_user($p109, $p111, $i107);
  // WARNING: %143 = call i32 @copy_to_user(i8* %140, i8* %142, i32 %.02), !dbg !3870, !verifier.code !3660
  call {:cexpr "tmp___5"} boogie_si_record_i32($i112);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4101, 15} true;
  assume {:verifier.code 0} true;
  $i113 := $ne.i32($i112, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4101, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i113} true;
  goto $bb61, $bb62;
$bb61:
  assume ($i113 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4102, 5} true;
  assume {:verifier.code 0} true;
  call pi_disconnect($p9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4103, 5} true;
  assume {:verifier.code 0} true;
  $i33 := $sub.i64(0, 14);
  goto $bb5;
$bb62:
  assume !(($i113 == 1));
  assume {:verifier.code 0} true;
  goto $bb63;
$bb63:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4107, 9} true;
  assume {:verifier.code 0} true;
  $i114 := $add.i32($i97, $i107);
  // WARNING: %148 = add nsw i32 %.1526, %.02, !dbg !3879, !verifier.code !3660
  call {:cexpr "t"} boogie_si_record_i32($i114);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4108, 19} true;
  assume {:verifier.code 0} true;
  $i115 := $sext.i32.i64($i107);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4108, 17} true;
  assume {:verifier.code 0} true;
  $i116 := $sub.i64($i96, $i115);
  // WARNING: %150 = sub i64 %.127, %149, !dbg !3881, !verifier.code !3660
  call {:cexpr "count"} boogie_si_record_i64($i116);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4110, 9} true;
  assume {:verifier.code 0} true;
  $i117 := $sgt.i32($i103, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4110, 7} true;
  assume {:verifier.code 0} true;
  $i96, $i97, $i98, $i118, $i119 := $i116, $i114, $i103, $i114, $i116;
  assume {:branchcond $i117} true;
  goto $bb64, $bb65;
$bb64:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4110, 7} true;
  assume {:verifier.code 0} true;
  assume ($i117 == 1);
  goto $bb53;
$bb65:
  assume !(($i117 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4110, 7} true;
  assume {:verifier.code 0} true;
  $i94, $i95 := $i118, $i119;
  goto $bb52;
$bb66:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4052, 36} true;
  assume {:verifier.code 0} true;
  $i120 := $M.10;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4052, 36} true;
  assume {:verifier.code 0} true;
  $i121 := $trunc.i8.i1($i120);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4052, 30} true;
  assume {:verifier.code 0} true;
  $i122 := $zext.i1.i32($i121);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4052, 44} true;
  assume {:verifier.code 0} true;
  $i123 := $sgt.i32($i122, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4052, 30} true;
  assume {:verifier.code 0} true;
  havoc $p124;
  assume ((($i123 == 1) ==> ($p124 == .str.36)) && (($i123 != 1) ==> ($p124 == $0.ref)));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4052, 7} true;
  assume {:verifier.code 0} true;
  call $i125 := pt_wait($p7, 128, 73, $p124, .str.37);
  // WARNING: %160 = call i32 @pt_wait(%struct.pt_unit* %8, i32 128, i32 73, i8* %159, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.37, i32 0, i32 0)), !dbg !3797, !verifier.code !3660
  call {:cexpr "r"} boogie_si_record_i32($i125);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4053, 10} true;
  assume {:verifier.code 0} true;
  $i126 := $and.i32($i125, 126976);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4053, 20} true;
  assume {:verifier.code 0} true;
  $i127 := $ne.i32($i126, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4053, 7} true;
  assume {:verifier.code 0} true;
  $i69, $i70, $i71 := $i125, $i95, $i94;
  assume {:branchcond $i127} true;
  goto $bb38, $bb67;
$bb67:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4053, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i127 == 1));
  goto $bb36;
$bb68:
  assume ($i131 == 1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4120, 5} true;
  assume {:verifier.code 0} true;
  $i133 := $i132;
  goto $bb70;
$bb69:
  assume !(($i131 == 1));
  assume {:verifier.code 0} true;
  goto $bb71;
$bb70:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4131, 11} true;
  assume {:verifier.code 0} true;
  $i136 := $sext.i32.i64($i133);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4131, 3} true;
  assume {:verifier.code 0} true;
  $i33 := $i136;
  goto $bb5;
$bb71:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4125, 13} true;
  assume {:verifier.code 0} true;
  $i134 := $ne.i64($i81, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4125, 7} true;
  assume {:verifier.code 0} true;
  $i44, $i45, $i135 := $i81, $i80, $i80;
  assume {:branchcond $i134} true;
  goto $bb72, $bb73;
$bb72:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4125, 7} true;
  assume {:verifier.code 0} true;
  assume ($i134 == 1);
  goto $bb17;
$bb73:
  assume !(($i134 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4125, 7} true;
  assume {:verifier.code 0} true;
  $i43 := $i135;
  goto $bb16;
$bb74:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4125, 16} true;
  assume {:verifier.code 0} true;
  $i133 := $i43;
  goto $bb70;
}
const pt_write: ref;
axiom (pt_write == $sub.ref(0, 83973));
procedure  pt_write($p0: ref, $p1: ref, $i2: i64, $p3: ref)
  returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i8;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i64;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i64;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $i103: i1;
  var $i104: i32;
  var $i105: i64;
  var $i106: i1;
  var $i107: i32;
  var $i108: i32;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $p112: ref;
  var $i113: i64;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i64;
  var $i120: i64;
  var $i121: i32;
  var $i122: i1;
  var $i100: i64;
  var $i101: i32;
  var $i102: i32;
  var $i123: i32;
  var $i124: i64;
  var $i98: i32;
  var $i99: i64;
  var $i125: i8;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $i137: i32;
  var $i139: i1;
  var $i48: i64;
  var $i49: i32;
  var $i140: i32;
  var $i47: i32;
  var $i138: i32;
  var $i141: i64;
  var $i26: i64;
$bb0:
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(12, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !4195, metadata !3661), !dbg !4196, !verifier.code !3663
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4156, 34} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 296);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4156, 34} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.8, $p5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4156, 10} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4157, 14} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p7, 176);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4157, 14} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.8, $p8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4158, 3} true;
  assume {:verifier.code 0} true;
  $p10 := $p4;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4158, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p10, 10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4159, 3} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p4, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4159, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p11, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4160, 3} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p4, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4160, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p12, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4161, 3} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p4, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4161, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p13, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4162, 3} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p4, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4162, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p14, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4163, 3} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p4, 5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4163, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p15, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4164, 3} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p4, 6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4164, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p16, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4165, 3} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p4, 7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4165, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p17, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4166, 3} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p4, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4166, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p18, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4167, 3} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p4, 9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4167, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p19, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4168, 3} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p4, 10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4168, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p20, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4169, 3} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p4, 11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4169, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p21, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4170, 14} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4170, 14} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i32($M.8, $p22);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4170, 20} true;
  assume {:verifier.code 0} true;
  $i24 := $and.i32($i23, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4170, 25} true;
  assume {:verifier.code 0} true;
  $i25 := $eq.i32($i24, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4170, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i25 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4171, 5} true;
  assume {:verifier.code 0} true;
  $i26 := $sub.i64(0, 30);
  goto $bb3;
$bb2:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4318, 1} true;
  assume {:verifier.code 0} true;
  $r := $i26;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4175, 14} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4175, 14} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i32($M.8, $p27);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4175, 20} true;
  assume {:verifier.code 0} true;
  $i29 := $and.i32($i28, 24);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4175, 26} true;
  assume {:verifier.code 0} true;
  $i30 := $eq.i32($i29, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4175, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i30 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4176, 25} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4176, 25} true;
  assume {:verifier.code 0} true;
  $i32 := $load.i32($M.8, $p31);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4176, 31} true;
  assume {:verifier.code 0} true;
  $i33 := $or.i32($i32, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4176, 11} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4176, 17} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p34, $i33);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4177, 26} true;
  assume {:verifier.code 0} true;
  $p35 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4177, 11} true;
  assume {:verifier.code 0} true;
  call $i36 := pt_atapi($p7, $p35, 0, $0.ref, .str.41);
  // WARNING: %40 = call i32 @pt_atapi(%struct.pt_unit* %8, i8* %39, i32 0, i8* null, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.41, i32 0, i32 0)), !dbg !3723, !verifier.code !3660
  call {:cexpr "tmp"} boogie_si_record_i32($i36);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4178, 13} true;
  assume {:verifier.code 0} true;
  $i37 := $ne.i32($i36, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4178, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb7, $bb8;
$bb6:
  assume !(($i30 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4184, 14} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4184, 14} true;
  assume {:verifier.code 0} true;
  $i39 := $load.i32($M.8, $p38);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4184, 20} true;
  assume {:verifier.code 0} true;
  $i40 := $and.i32($i39, 16);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4184, 26} true;
  assume {:verifier.code 0} true;
  $i41 := $ne.i32($i40, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4184, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb11, $bb12;
$bb7:
  assume ($i37 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4179, 7} true;
  assume {:verifier.code 0} true;
  $i26 := $sub.i64(0, 5);
  goto $bb3;
$bb8:
  assume !(($i37 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4183, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4189, 14} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4189, 14} true;
  assume {:verifier.code 0} true;
  $i43 := $load.i32($M.8, $p42);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4189, 20} true;
  assume {:verifier.code 0} true;
  $i44 := $and.i32($i43, 32);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4189, 26} true;
  assume {:verifier.code 0} true;
  $i45 := $ne.i32($i44, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4189, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb14, $bb15;
$bb11:
  assume ($i41 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4185, 5} true;
  assume {:verifier.code 0} true;
  $i26 := $sub.i64(0, 5);
  goto $bb3;
$bb12:
  assume !(($i41 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:verifier.code 0} true;
  goto $bb10;
$bb14:
  assume ($i45 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4190, 5} true;
  assume {:verifier.code 0} true;
  $i26 := $sub.i64(0, 28);
  goto $bb3;
$bb15:
  assume !(($i45 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4310, 13} true;
  assume {:verifier.code 0} true;
  $i46 := $ne.i64($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4310, 7} true;
  assume {:verifier.code 0} true;
  $i47 := 0;
  assume {:branchcond $i46} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i46 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4310, 7} true;
  assume {:verifier.code 0} true;
  $i48, $i49 := $i2, 0;
  goto $bb20;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4310, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i46 == 1));
  goto $bb19;
$bb19:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb77;
$bb20:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4311, 5} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4197, 13} true;
  assume {:verifier.code 0} true;
  call $i50 := pt_poll_dsc($p7, 2, 3000, .str.42);
  // WARNING: %63 = call i32 @pt_poll_dsc(%struct.pt_unit* %8, i32 2, i32 3000, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i32 0, i32 0)), !dbg !3751, !verifier.code !3660
  call {:cexpr "tmp___0"} boogie_si_record_i32($i50);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4198, 15} true;
  assume {:verifier.code 0} true;
  $i51 := $eq.i32($i50, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4198, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i51} true;
  goto $bb22, $bb23;
$bb22:
  assume ($i51 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4199, 5} true;
  assume {:verifier.code 0} true;
  $i26 := $sub.i64(0, 5);
  goto $bb3;
$bb23:
  assume !(($i51 == 1));
  assume {:verifier.code 0} true;
  goto $bb24;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4203, 7} true;
  assume {:verifier.code 0} true;
  $i52 := $trunc.i64.i32($i48);
  // WARNING: %68 = trunc i64 %.236 to i32, !dbg !3759, !verifier.code !3660
  call {:cexpr "n"} boogie_si_record_i32($i52);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4204, 9} true;
  assume {:verifier.code 0} true;
  $i53 := $sgt.i32($i52, 32768);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4204, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i53} true;
  goto $bb25, $bb26;
$bb25:
  assume ($i53 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4206, 3} true;
  assume {:verifier.code 0} true;
  $i54 := 32768;
  goto $bb27;
$bb26:
  assume !(($i53 == 1));
  assume {:verifier.code 0} true;
  $i54 := $i52;
  goto $bb27;
$bb27:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4209, 11} true;
  assume {:verifier.code 0} true;
  $i55 := $add.i32($i54, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4209, 25} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($p7, 200);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4209, 25} true;
  assume {:verifier.code 0} true;
  $i57 := $load.i32($M.8, $p56);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4209, 17} true;
  assume {:verifier.code 0} true;
  $i58 := $add.i32($i55, $i57);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4209, 37} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($p7, 200);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4209, 37} true;
  assume {:verifier.code 0} true;
  $i60 := $load.i32($M.8, $p59);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4209, 29} true;
  assume {:verifier.code 0} true;
  $i61 := $sdiv.i32($i58, $i60);
  // WARNING: %79 = sdiv i32 %76, %78, !dbg !3771, !verifier.code !3660
  call {:cexpr "b"} boogie_si_record_i32($i61);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4210, 13} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($p7, 200);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4210, 13} true;
  assume {:verifier.code 0} true;
  $i63 := $load.i32($M.8, $p62);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4210, 16} true;
  assume {:verifier.code 0} true;
  $i64 := $mul.i32($i63, $i61);
  // WARNING: %82 = mul nsw i32 %81, %79, !dbg !3775, !verifier.code !3660
  call {:cexpr "n"} boogie_si_record_i32($i64);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4211, 15} true;
  assume {:verifier.code 0} true;
  $i65 := $trunc.i32.i8($i61);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4211, 3} true;
  assume {:verifier.code 0} true;
  $p66 := $add.ref($p4, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4211, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p66, $i65);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4212, 24} true;
  assume {:verifier.code 0} true;
  $p67 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4212, 7} true;
  assume {:verifier.code 0} true;
  call $i68 := pt_command($p7, $p67, $i64, .str.42);
  // WARNING: %86 = call i32 @pt_command(%struct.pt_unit* %8, i8* %85, i32 %82, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i32 0, i32 0)), !dbg !3780, !verifier.code !3660
  call {:cexpr "r"} boogie_si_record_i32($i68);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4213, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb28, $bb29;
$bb28:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4214, 5} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4215, 3} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb29:
  assume !((1 == 1));
  // WARNING: call void @llvm.dbg.value(metadata i64 1, i64 0, metadata !4318, metadata !3661), !dbg !4319, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i64 1, i64 0, metadata !4320, metadata !3661), !dbg !4321, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4223, 9} true;
  assume {:verifier.code 0} true;
  goto $bb31;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4230, 9} true;
  assume {:verifier.code 0} true;
  $i69 := $ne.i32($i68, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4230, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i69} true;
  goto $bb34, $bb35;
$bb31:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4224, 7} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb32:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4219, 5} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  // WARNING: call void @__const_udelay(i64 4295000), !dbg !3794, !verifier.code !3660
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4320, metadata !3661), !dbg !4321, !verifier.code !3663
  assume {:verifier.code 0} true;
  goto $bb33;
$bb33:
  assume {:verifier.code 0} true;
  goto $bb30;
$bb34:
  assume ($i69 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4231, 5} true;
  assume {:verifier.code 0} true;
  call pt_req_sense($p7, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4232, 5} true;
  assume {:verifier.code 0} true;
  $i26 := $sub.i64(0, 5);
  goto $bb3;
$bb35:
  assume !(($i69 == 1));
  assume {:verifier.code 0} true;
  goto $bb36;
$bb36:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4237, 7} true;
  assume {:verifier.code 0} true;
  call $i70 := pt_wait($p7, 128, 73, $0.ref, $0.ref);
  // WARNING: %97 = call i32 @pt_wait(%struct.pt_unit* %8, i32 128, i32 73, i8* null, i8* null), !dbg !3804, !verifier.code !3660
  call {:cexpr "r"} boogie_si_record_i32($i70);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4238, 10} true;
  assume {:verifier.code 0} true;
  $i71 := $and.i32($i70, 126976);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4238, 20} true;
  assume {:verifier.code 0} true;
  $i72 := $ne.i32($i71, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4238, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i72} true;
  goto $bb37, $bb38;
$bb37:
  assume ($i72 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4238, 7} true;
  assume {:verifier.code 0} true;
  goto $bb40;
$bb38:
  assume !(($i72 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4238, 7} true;
  assume {:verifier.code 0} true;
  $i73, $i74, $i75 := $i70, $i48, $i49;
  goto $bb39;
$bb39:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb40:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4239, 5} true;
  assume {:verifier.code 0} true;
  call pi_disconnect($p9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4240, 5} true;
  assume {:verifier.code 0} true;
  call pt_req_sense($p7, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4241, 5} true;
  assume {:verifier.code 0} true;
  $i26 := $sub.i64(0, 5);
  goto $bb3;
$bb41:
  assume ($i132 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4238, 7} true;
  assume {:verifier.code 0} true;
  goto $bb40;
$bb42:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4245, 9} true;
  assume {:verifier.code 0} true;
  $i76 := $ne.i32($i73, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4245, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i76} true;
  goto $bb43, $bb44;
$bb43:
  assume ($i76 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4246, 25} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4246, 25} true;
  assume {:verifier.code 0} true;
  $i78 := $load.i32($M.8, $p77);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4246, 31} true;
  assume {:verifier.code 0} true;
  $i79 := $or.i32($i78, 32);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4246, 11} true;
  assume {:verifier.code 0} true;
  $p80 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4246, 17} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p80, $i79);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4247, 3} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb44:
  assume !(($i76 == 1));
  assume {:verifier.code 0} true;
  goto $bb45;
$bb45:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4250, 7} true;
  assume {:verifier.code 0} true;
  call $i81 := read_reg($p9, 7);
  // WARNING: %112 = call i32 @read_reg(%struct.pi_adapter* %10, i32 7), !dbg !3822, !verifier.code !3660
  call {:cexpr "s"} boogie_si_record_i32($i81);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4251, 10} true;
  assume {:verifier.code 0} true;
  $i82 := $and.i32($i81, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4251, 15} true;
  assume {:verifier.code 0} true;
  $i83 := $eq.i32($i82, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4251, 7} true;
  assume {:verifier.code 0} true;
  $i84, $i85 := $i75, $i74;
  assume {:branchcond $i83} true;
  goto $bb46, $bb47;
$bb46:
  assume ($i83 == 1);
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4252, 5} true;
  assume {:verifier.code 0} true;
  goto $bb48;
$bb47:
  assume !(($i83 == 1));
  assume {:verifier.code 0} true;
  goto $bb49;
$bb48:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4303, 3} true;
  assume {:verifier.code 0} true;
  call pi_disconnect($p9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4304, 14} true;
  assume {:verifier.code 0} true;
  $p133 := $add.ref($p7, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4304, 14} true;
  assume {:verifier.code 0} true;
  $i134 := $load.i32($M.8, $p133);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4304, 20} true;
  assume {:verifier.code 0} true;
  $i135 := $and.i32($i134, 32);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4304, 26} true;
  assume {:verifier.code 0} true;
  $i136 := $ne.i32($i135, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4304, 7} true;
  assume {:verifier.code 0} true;
  $i137 := $i84;
  assume {:branchcond $i136} true;
  goto $bb71, $bb72;
$bb49:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4256, 13} true;
  assume {:verifier.code 0} true;
  call $i86 := read_reg($p9, 4);
  // WARNING: %118 = call i32 @read_reg(%struct.pi_adapter* %10, i32 4), !dbg !3831, !verifier.code !3660
  call {:cexpr "tmp___2"} boogie_si_record_i32($i86);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4257, 13} true;
  assume {:verifier.code 0} true;
  call $i87 := read_reg($p9, 5);
  // WARNING: %119 = call i32 @read_reg(%struct.pi_adapter* %10, i32 5), !dbg !3834, !verifier.code !3660
  call {:cexpr "tmp___3"} boogie_si_record_i32($i87);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4258, 25} true;
  assume {:verifier.code 0} true;
  $i88 := $mul.i32($i87, 256);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4258, 15} true;
  assume {:verifier.code 0} true;
  $i89 := $add.i32($i86, $i88);
  // WARNING: %121 = add nsw i32 %118, %120, !dbg !3838, !verifier.code !3660
  call {:cexpr "n"} boogie_si_record_i32($i89);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4259, 13} true;
  assume {:verifier.code 0} true;
  call $i90 := read_reg($p9, 2);
  // WARNING: %122 = call i32 @read_reg(%struct.pi_adapter* %10, i32 2), !dbg !3839, !verifier.code !3660
  call {:cexpr "tmp___4"} boogie_si_record_i32($i90);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4260, 15} true;
  assume {:verifier.code 0} true;
  $i91 := $and.i32($i90, 3);
  // WARNING: %123 = and i32 %122, 3, !dbg !3842, !verifier.code !3660
  call {:cexpr "p"} boogie_si_record_i32($i91);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4261, 9} true;
  assume {:verifier.code 0} true;
  $i92 := $ne.i32($i91, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4261, 7} true;
  assume {:verifier.code 0} true;
  $i93 := $i91;
  assume {:branchcond $i92} true;
  goto $bb50, $bb51;
$bb50:
  assume ($i92 == 1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4262, 5} true;
  assume {:verifier.code 0} true;
  call pi_disconnect($p9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4263, 64} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($p7, 224);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4263, 47} true;
  assume {:verifier.code 0} true;
  $p95 := $bitcast.ref.ref($p94);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4263, 5} true;
  assume {:verifier.code 0} true;
  call $i96 := printk.ref.ref.i32(.str.44, $p95, $i93);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4264, 5} true;
  assume {:verifier.code 0} true;
  $i26 := $sub.i64(0, 5);
  goto $bb3;
$bb51:
  assume !(($i92 == 1));
  assume {:verifier.code 0} true;
  goto $bb52;
$bb52:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4295, 9} true;
  assume {:verifier.code 0} true;
  $i97 := $sgt.i32($i89, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4295, 7} true;
  assume {:verifier.code 0} true;
  $i98, $i99 := $i75, $i74;
  assume {:branchcond $i97} true;
  goto $bb53, $bb54;
$bb53:
  assume ($i97 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4295, 7} true;
  assume {:verifier.code 0} true;
  $i100, $i101, $i102 := $i74, $i75, $i89;
  goto $bb56;
$bb54:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4295, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i97 == 1));
  goto $bb55;
$bb55:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb69;
$bb56:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4296, 5} true;
  assume {:verifier.code 0} true;
  goto $bb57;
$bb57:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4271, 9} true;
  assume {:verifier.code 0} true;
  $i103 := $sgt.i32($i102, 16384);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4271, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i103} true;
  goto $bb58, $bb59;
$bb58:
  assume ($i103 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4273, 3} true;
  assume {:verifier.code 0} true;
  $i104 := 16384;
  goto $bb60;
$bb59:
  assume !(($i103 == 1));
  assume {:verifier.code 0} true;
  $i104 := $i102;
  goto $bb60;
$bb60:
  assume {:verifier.code 0} true;
  // WARNING: %.09 = phi i32 [ 16384, %134 ], [ %.1825, %135 ], !verifier.code !3660
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4277, 7} true;
  assume {:verifier.code 0} true;
  $i105 := $sext.i32.i64($i104);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4277, 18} true;
  assume {:verifier.code 0} true;
  $i106 := $ugt.i64($i105, $i100);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4277, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i106} true;
  goto $bb61, $bb62;
$bb61:
  assume ($i106 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4278, 9} true;
  assume {:verifier.code 0} true;
  $i107 := $trunc.i64.i32($i100);
  // WARNING: %140 = trunc i64 %.127 to i32, !dbg !3868, !verifier.code !3660
  call {:cexpr "b"} boogie_si_record_i32($i107);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4279, 3} true;
  assume {:verifier.code 0} true;
  $i108 := $i107;
  goto $bb63;
$bb62:
  assume !(($i106 == 1));
  assume {:verifier.code 0} true;
  $i108 := $i104;
  goto $bb63;
$bb63:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4282, 42} true;
  assume {:verifier.code 0} true;
  $p109 := $add.ref($p7, 216);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4282, 42} true;
  assume {:verifier.code 0} true;
  $p110 := $load.ref($M.8, $p109);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4282, 72} true;
  assume {:verifier.code 0} true;
  $i111 := $sext.i32.i64($i101);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4282, 70} true;
  assume {:verifier.code 0} true;
  $p112 := $add.ref($p1, $mul.ref($i111, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4283, 28} true;
  assume {:verifier.code 0} true;
  $i113 := $sext.i32.i64($i108);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4282, 13} true;
  assume {:verifier.code 0} true;
  call $i114 := copy_from_user($p110, $p112, $i113);
  // WARNING: %148 = call i64 @copy_from_user(i8* %144, i8* %146, i64 %147), !dbg !3875, !verifier.code !3660
  call {:cexpr "tmp___5"} boogie_si_record_i64($i114);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4284, 15} true;
  assume {:verifier.code 0} true;
  $i115 := $ne.i64($i114, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4284, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i115} true;
  goto $bb64, $bb65;
$bb64:
  assume ($i115 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4285, 5} true;
  assume {:verifier.code 0} true;
  call pi_disconnect($p9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4286, 5} true;
  assume {:verifier.code 0} true;
  $i26 := $sub.i64(0, 14);
  goto $bb3;
$bb65:
  assume !(($i115 == 1));
  assume {:verifier.code 0} true;
  goto $bb66;
$bb66:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4290, 28} true;
  assume {:verifier.code 0} true;
  $p116 := $add.ref($p7, 216);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4290, 28} true;
  assume {:verifier.code 0} true;
  $p117 := $load.ref($M.8, $p116);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4290, 3} true;
  assume {:verifier.code 0} true;
  call pi_write_block($p9, $p117, $i104);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4291, 9} true;
  assume {:verifier.code 0} true;
  $i118 := $add.i32($i101, $i108);
  // WARNING: %155 = add nsw i32 %.1526, %.02, !dbg !3886, !verifier.code !3660
  call {:cexpr "t"} boogie_si_record_i32($i118);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4292, 19} true;
  assume {:verifier.code 0} true;
  $i119 := $sext.i32.i64($i108);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4292, 17} true;
  assume {:verifier.code 0} true;
  $i120 := $sub.i64($i100, $i119);
  // WARNING: %157 = sub i64 %.127, %156, !dbg !3888, !verifier.code !3660
  call {:cexpr "count"} boogie_si_record_i64($i120);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4293, 9} true;
  assume {:verifier.code 0} true;
  $i121 := $sub.i32($i102, $i104);
  // WARNING: %158 = sub nsw i32 %.1825, %.09, !dbg !3889, !verifier.code !3660
  call {:cexpr "n"} boogie_si_record_i32($i121);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4295, 9} true;
  assume {:verifier.code 0} true;
  $i122 := $sgt.i32($i121, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4295, 7} true;
  assume {:verifier.code 0} true;
  $i100, $i101, $i102, $i123, $i124 := $i120, $i118, $i121, $i118, $i120;
  assume {:branchcond $i122} true;
  goto $bb67, $bb68;
$bb67:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4295, 7} true;
  assume {:verifier.code 0} true;
  assume ($i122 == 1);
  goto $bb56;
$bb68:
  assume !(($i122 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4295, 7} true;
  assume {:verifier.code 0} true;
  $i98, $i99 := $i123, $i124;
  goto $bb55;
$bb69:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4237, 36} true;
  assume {:verifier.code 0} true;
  $i125 := $M.10;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4237, 36} true;
  assume {:verifier.code 0} true;
  $i126 := $trunc.i8.i1($i125);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4237, 30} true;
  assume {:verifier.code 0} true;
  $i127 := $zext.i1.i32($i126);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4237, 44} true;
  assume {:verifier.code 0} true;
  $i128 := $sgt.i32($i127, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4237, 30} true;
  assume {:verifier.code 0} true;
  havoc $p129;
  assume ((($i128 == 1) ==> ($p129 == .str.43)) && (($i128 != 1) ==> ($p129 == $0.ref)));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4237, 7} true;
  assume {:verifier.code 0} true;
  call $i130 := pt_wait($p7, 128, 73, $p129, $0.ref);
  // WARNING: %168 = call i32 @pt_wait(%struct.pt_unit* %8, i32 128, i32 73, i8* %167, i8* null), !dbg !3804, !verifier.code !3660
  call {:cexpr "r"} boogie_si_record_i32($i130);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4238, 10} true;
  assume {:verifier.code 0} true;
  $i131 := $and.i32($i130, 126976);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4238, 20} true;
  assume {:verifier.code 0} true;
  $i132 := $ne.i32($i131, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4238, 7} true;
  assume {:verifier.code 0} true;
  $i73, $i74, $i75 := $i130, $i99, $i98;
  assume {:branchcond $i132} true;
  goto $bb41, $bb70;
$bb70:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4238, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i132 == 1));
  goto $bb39;
$bb71:
  assume ($i136 == 1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4305, 5} true;
  assume {:verifier.code 0} true;
  $i138 := $i137;
  goto $bb73;
$bb72:
  assume !(($i136 == 1));
  assume {:verifier.code 0} true;
  goto $bb74;
$bb73:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4316, 11} true;
  assume {:verifier.code 0} true;
  $i141 := $sext.i32.i64($i138);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4316, 3} true;
  assume {:verifier.code 0} true;
  $i26 := $i141;
  goto $bb3;
$bb74:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4310, 13} true;
  assume {:verifier.code 0} true;
  $i139 := $ne.i64($i85, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4310, 7} true;
  assume {:verifier.code 0} true;
  $i48, $i49, $i140 := $i85, $i84, $i84;
  assume {:branchcond $i139} true;
  goto $bb75, $bb76;
$bb75:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4310, 7} true;
  assume {:verifier.code 0} true;
  assume ($i139 == 1);
  goto $bb20;
$bb76:
  assume !(($i139 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4310, 7} true;
  assume {:verifier.code 0} true;
  $i47 := $i140;
  goto $bb19;
$bb77:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4310, 16} true;
  assume {:verifier.code 0} true;
  $i138 := $i47;
  goto $bb73;
}
const pt_release: ref;
axiom (pt_release == $sub.ref(0, 85005));
procedure  pt_release($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i8: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3931, 34} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p1, 296);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3931, 34} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.8, $p2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3931, 10} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3932, 50} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p4, 196);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3932, 9} true;
  assume {:verifier.code 0} true;
  call $i6 := atomic_read($p5);
  // WARNING: %7 = call i32 @atomic_read(%struct.__anonstruct_atomic_t_6* %6), !dbg !3672, !verifier.code !3663
  call {:cexpr "tmp"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3933, 11} true;
  assume {:verifier.code 0} true;
  $i7 := $sgt.i32($i6, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3933, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3934, 5} true;
  assume {:verifier.code 0} true;
  $i8 := $sub.i32(0, 22);
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3953, 1} true;
  assume {:verifier.code 0} true;
  $r := $i8;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3938, 14} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p4, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3938, 14} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.8, $p9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3938, 20} true;
  assume {:verifier.code 0} true;
  $i11 := $and.i32($i10, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3938, 25} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i32($i11, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3938, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3939, 5} true;
  assume {:verifier.code 0} true;
  call pt_write_fm($p4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3940, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3943, 14} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p4, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3943, 14} true;
  assume {:verifier.code 0} true;
  $i14 := $load.i32($M.8, $p13);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3943, 20} true;
  assume {:verifier.code 0} true;
  $i15 := $and.i32($i14, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3943, 25} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i32($i15, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3943, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i16 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3944, 5} true;
  assume {:verifier.code 0} true;
  call pt_rewind($p4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3945, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3948, 31} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p4, 216);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3948, 31} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.8, $p17);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3948, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p18);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3949, 9} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p4, 216);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3949, 16} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p19, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3950, 22} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p4, 196);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3950, 3} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3951, 3} true;
  assume {:verifier.code 0} true;
  $i8 := 0;
  goto $bb3;
}
const pt_ioctl: ref;
axiom (pt_ioctl == $sub.ref(0, 86037));
procedure  pt_ioctl($p0: ref, $i1: i32, $i2: i64)
  returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i13: i64;
$bb0:
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata %struct.file* %0, i64 0, metadata !4484, metadata !3661), !dbg !4485, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !4486, metadata !3661), !dbg !4487, !verifier.code !3663
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3895, 34} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 296);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3895, 34} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.8, $p4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3895, 10} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3896, 7} true;
  assume {:verifier.code 0} true;
  $p7 := $i2p.i64.ref($i2);
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i1, 1074294017);
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3899, 24} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3899, 42} true;
  assume {:verifier.code 0} true;
  $p10 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3899, 9} true;
  assume {:verifier.code 0} true;
  call $i11 := copy_from_user($p9, $p10, 8);
  // WARNING: %12 = call i64 @copy_from_user(i8* %10, i8* %11, i64 8), !dbg !3681, !verifier.code !3660
  call {:cexpr "tmp"} boogie_si_record_i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3900, 11} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i64($i11, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3900, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb4, $bb5;
$bb3:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb17;
$bb4:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3901, 5} true;
  assume {:verifier.code 0} true;
  $i13 := $sub.i64(0, 14);
  goto $bb6;
$bb5:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3924, 1} true;
  assume {:verifier.code 0} true;
  $r := $i13;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3905, 22} true;
  assume {:verifier.code 0} true;
  $p14 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3905, 22} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i16($M.8, $p14);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3905, 11} true;
  assume {:verifier.code 0} true;
  $i16 := $sext.i16.i32($i15);
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  $i17 := $slt.i32($i16, 6);
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i17 == 1);
  assume {:verifier.code 0} true;
  $i19 := $eq.i32($i16, 5);
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb14, $bb15;
$bb10:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  $i18 := $eq.i32($i16, 6);
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i18 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3907, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_lock_12(pt_mutex);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3908, 3} true;
  assume {:verifier.code 0} true;
  call pt_rewind($p6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3909, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_13(pt_mutex);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3910, 3} true;
  assume {:verifier.code 0} true;
  $i13 := 0;
  goto $bb6;
$bb12:
  assume {:verifier.code 0} true;
  assume !(($i18 == 1));
  goto $bb13;
$bb13:
  assume {:verifier.code 0} true;
  goto $bb16;
$bb14:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3912, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_lock_14(pt_mutex);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3913, 3} true;
  assume {:verifier.code 0} true;
  call pt_write_fm($p6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3914, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_15(pt_mutex);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3915, 3} true;
  assume {:verifier.code 0} true;
  $i13 := 0;
  goto $bb6;
$bb15:
  assume {:verifier.code 0} true;
  assume !(($i19 == 1));
  goto $bb13;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3917, 63} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p6, 224);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3917, 46} true;
  assume {:verifier.code 0} true;
  $p21 := $bitcast.ref.ref($p20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3917, 81} true;
  assume {:verifier.code 0} true;
  $p22 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3917, 81} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i16($M.8, $p22);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3917, 70} true;
  assume {:verifier.code 0} true;
  $i24 := $sext.i16.i32($i23);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3917, 3} true;
  assume {:verifier.code 0} true;
  call $i25 := printk.ref.ref.i32(.str.49, $p21, $i24);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3918, 3} true;
  assume {:verifier.code 0} true;
  $i13 := $sub.i64(0, 22);
  goto $bb6;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3921, 3} true;
  assume {:verifier.code 0} true;
  $i13 := $sub.i64(0, 25);
  goto $bb6;
}
const pt_exit: ref;
axiom (pt_exit == $sub.ref(0, 87069));
procedure  pt_exit()
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4418, 7} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4419, 5} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4410, 16} true;
  assume {:verifier.code 0} true;
  $i0 := $load.i32($M.8, $add.ref(pt, 208));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4410, 24} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4410, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 20} true;
  assume {:verifier.code 0} true;
  $p2 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 40} true;
  assume {:verifier.code 0} true;
  $i3 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 46} true;
  assume {:verifier.code 0} true;
  $i4 := $shl.i32($i3, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 5} true;
  assume {:verifier.code 0} true;
  call device_destroy($p2, $i4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 20} true;
  assume {:verifier.code 0} true;
  $p5 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 40} true;
  assume {:verifier.code 0} true;
  $i6 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 46} true;
  assume {:verifier.code 0} true;
  $i7 := $shl.i32($i6, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 53} true;
  assume {:verifier.code 0} true;
  $i8 := $or.i32($i7, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 5} true;
  assume {:verifier.code 0} true;
  call device_destroy($p5, $i8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4413, 3} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4419, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4410, 16} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i32($M.8, $add.ref($add.ref(pt, 232), 208));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4410, 24} true;
  assume {:verifier.code 0} true;
  $i25 := $ne.i32($i24, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4410, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb26, $bb27;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4423, 17} true;
  assume {:verifier.code 0} true;
  $p9 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4423, 3} true;
  assume {:verifier.code 0} true;
  call class_destroy($p9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4424, 36} true;
  assume {:verifier.code 0} true;
  $i10 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4424, 59} true;
  assume {:verifier.code 0} true;
  $p11 := $M.7;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4424, 3} true;
  assume {:verifier.code 0} true;
  call unregister_chrdev($i10, $p11);
  // WARNING: call void @unregister_chrdev(i32 %17, i8* %18), !dbg !3688, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4435, 7} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4436, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4428, 16} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i32($M.8, $add.ref(pt, 208));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4428, 24} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i32($i12, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4428, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4429, 25} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.8, $add.ref(pt, 176));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4429, 5} true;
  assume {:verifier.code 0} true;
  call pi_release($p14);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4430, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4436, 5} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4428, 16} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i32($M.8, $add.ref($add.ref(pt, 232), 208));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4428, 24} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i32($i15, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4428, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb15, $bb16;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4441, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb15:
  assume ($i16 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4429, 25} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.8, $add.ref($add.ref(pt, 232), 176));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4429, 5} true;
  assume {:verifier.code 0} true;
  call pi_release($p17);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4430, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  goto $bb17;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4436, 5} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4428, 16} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i32($M.8, $add.ref($add.ref(pt, 464), 208));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4428, 24} true;
  assume {:verifier.code 0} true;
  $i19 := $ne.i32($i18, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4428, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4429, 25} true;
  assume {:verifier.code 0} true;
  $p20 := $load.ref($M.8, $add.ref($add.ref(pt, 464), 176));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4429, 5} true;
  assume {:verifier.code 0} true;
  call pi_release($p20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4430, 3} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  goto $bb21;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4436, 5} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4428, 16} true;
  assume {:verifier.code 0} true;
  $i21 := $load.i32($M.8, $add.ref($add.ref(pt, 696), 208));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4428, 24} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.i32($i21, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4428, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i22 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4429, 25} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.8, $add.ref($add.ref(pt, 696), 176));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4429, 5} true;
  assume {:verifier.code 0} true;
  call pi_release($p23);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4430, 3} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb24:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:verifier.code 0} true;
  goto $bb14;
$bb26:
  assume ($i25 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 20} true;
  assume {:verifier.code 0} true;
  $p26 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 40} true;
  assume {:verifier.code 0} true;
  $i27 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 46} true;
  assume {:verifier.code 0} true;
  $i28 := $shl.i32($i27, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 53} true;
  assume {:verifier.code 0} true;
  $i29 := $or.i32($i28, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 5} true;
  assume {:verifier.code 0} true;
  call device_destroy($p26, $i29);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 20} true;
  assume {:verifier.code 0} true;
  $p30 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 40} true;
  assume {:verifier.code 0} true;
  $i31 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 46} true;
  assume {:verifier.code 0} true;
  $i32 := $shl.i32($i31, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 53} true;
  assume {:verifier.code 0} true;
  $i33 := $or.i32($i32, 129);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 5} true;
  assume {:verifier.code 0} true;
  call device_destroy($p30, $i33);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4413, 3} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4419, 5} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb29:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4410, 16} true;
  assume {:verifier.code 0} true;
  $i34 := $load.i32($M.8, $add.ref($add.ref(pt, 464), 208));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4410, 24} true;
  assume {:verifier.code 0} true;
  $i35 := $ne.i32($i34, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4410, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb30, $bb31;
$bb30:
  assume ($i35 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 20} true;
  assume {:verifier.code 0} true;
  $p36 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 40} true;
  assume {:verifier.code 0} true;
  $i37 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 46} true;
  assume {:verifier.code 0} true;
  $i38 := $shl.i32($i37, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 53} true;
  assume {:verifier.code 0} true;
  $i39 := $or.i32($i38, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 5} true;
  assume {:verifier.code 0} true;
  call device_destroy($p36, $i39);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 20} true;
  assume {:verifier.code 0} true;
  $p40 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 40} true;
  assume {:verifier.code 0} true;
  $i41 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 46} true;
  assume {:verifier.code 0} true;
  $i42 := $shl.i32($i41, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 53} true;
  assume {:verifier.code 0} true;
  $i43 := $or.i32($i42, 130);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 5} true;
  assume {:verifier.code 0} true;
  call device_destroy($p40, $i43);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4413, 3} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb31:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  goto $bb32;
$bb32:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4419, 5} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb33:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4410, 16} true;
  assume {:verifier.code 0} true;
  $i44 := $load.i32($M.8, $add.ref($add.ref(pt, 696), 208));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4410, 24} true;
  assume {:verifier.code 0} true;
  $i45 := $ne.i32($i44, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4410, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb34, $bb35;
$bb34:
  assume ($i45 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 20} true;
  assume {:verifier.code 0} true;
  $p46 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 40} true;
  assume {:verifier.code 0} true;
  $i47 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 46} true;
  assume {:verifier.code 0} true;
  $i48 := $shl.i32($i47, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 53} true;
  assume {:verifier.code 0} true;
  $i49 := $or.i32($i48, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4411, 5} true;
  assume {:verifier.code 0} true;
  call device_destroy($p46, $i49);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 20} true;
  assume {:verifier.code 0} true;
  $p50 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 40} true;
  assume {:verifier.code 0} true;
  $i51 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 46} true;
  assume {:verifier.code 0} true;
  $i52 := $shl.i32($i51, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 53} true;
  assume {:verifier.code 0} true;
  $i53 := $or.i32($i52, 131);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4412, 5} true;
  assume {:verifier.code 0} true;
  call device_destroy($p50, $i53);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4413, 3} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb35:
  assume !(($i45 == 1));
  assume {:verifier.code 0} true;
  goto $bb36;
$bb36:
  assume {:verifier.code 0} true;
  goto $bb7;
}
const ldv_check_final_state: ref;
axiom (ldv_check_final_state == $sub.ref(0, 88101));
procedure  ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5245, 7} true;
  assume {:verifier.code 0} true;
  $i0 := $M.1;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5245, 34} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5245, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5247, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5248, 5} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5250, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $M.2;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5250, 22} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i2, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5250, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5252, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i3 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5253, 5} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5255, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $M.3;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5255, 23} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i4, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5255, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5257, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i5 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5258, 5} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5260, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $M.4;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5260, 26} true;
  assume {:verifier.code 0} true;
  $i7 := $eq.i32($i6, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5260, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5262, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume !(($i7 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5263, 5} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5265, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_error: ref;
axiom (ldv_error == $sub.ref(0, 89133));
procedure  ldv_error()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4723, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4724, 10} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4726, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const device_destroy: ref;
axiom (device_destroy == $sub.ref(0, 90165));
procedure  device_destroy($p0: ref, $i1: i32);
const class_destroy: ref;
axiom (class_destroy == $sub.ref(0, 91197));
procedure  class_destroy($p0: ref);
const unregister_chrdev: ref;
axiom (unregister_chrdev == $sub.ref(0, 92229));
procedure  unregister_chrdev($i0: i32, $p1: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2910, 3} true;
  assume {:verifier.code 0} true;
  call __unregister_chrdev($i0, 0, 256, $p1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2911, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const pi_release: ref;
axiom (pi_release == $sub.ref(0, 93261));
procedure  pi_release($p0: ref);
const __unregister_chrdev: ref;
axiom (__unregister_chrdev == $sub.ref(0, 94293));
procedure  __unregister_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref);
const copy_from_user: ref;
axiom (copy_from_user == $sub.ref(0, 95325));
procedure  copy_from_user($p0: ref, $p1: ref, $i2: i64)
  returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i22: i64;
  var $i13: i64;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !4627, metadata !3661), !dbg !4628, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2945, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := __builtinx_object_size.ref.i32($p0, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2945, 9} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i3);
  // WARNING: %5 = sext i32 %4 to i64, !dbg !3670, !verifier.code !3665
  call {:cexpr "tmp"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2946, 8} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i64.i32($i4);
  // WARNING: %6 = trunc i64 %5 to i32, !dbg !3674, !verifier.code !3665
  call {:cexpr "sz"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2947, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2948, 36} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i32($i5, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2948, 36} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2948, 33} true;
  assume {:verifier.code 0} true;
  $i8 := $sext.i32.i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2948, 13} true;
  assume {:verifier.code 0} true;
  call $i9 := ldv__builtin_expect($i8, 1);
  // WARNING: %10 = call i64 @ldv__builtin_expect(i64 %9, i64 1), !dbg !3680, !verifier.code !3665
  call {:cexpr "tmp___1"} boogie_si_record_i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2949, 15} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i64($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2949, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2950, 35} true;
  assume {:verifier.code 0} true;
  $i11 := $trunc.i64.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2950, 9} true;
  assume {:verifier.code 0} true;
  call $i12 := _copy_from_user($p0, $p1, $i11);
  // WARNING: %14 = call i64 @_copy_from_user(i8* %0, i8* %1, i32 %13), !dbg !3688, !verifier.code !3665
  call {:cexpr "n"} boogie_si_record_i64($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2951, 3} true;
  assume {:verifier.code 0} true;
  $i13 := $i12;
  goto $bb3;
$bb2:
  assume !(($i10 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2952, 35} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.i32.i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2952, 54} true;
  assume {:verifier.code 0} true;
  $i15 := $uge.i64($i14, $i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2952, 54} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i1.i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2952, 35} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.i32.i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2952, 15} true;
  assume {:verifier.code 0} true;
  call $i18 := ldv__builtin_expect($i17, 1);
  // WARNING: %20 = call i64 @ldv__builtin_expect(i64 %19, i64 1), !dbg !3693, !verifier.code !3665
  call {:cexpr "tmp___2"} boogie_si_record_i64($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2953, 17} true;
  assume {:verifier.code 0} true;
  $i19 := $ne.i64($i18, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2953, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb4, $bb5;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2967, 3} true;
  assume {:verifier.code 0} true;
  $r := $i13;
  $exn := false;
  return;
$bb4:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2954, 37} true;
  assume {:verifier.code 0} true;
  $i20 := $trunc.i64.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2954, 11} true;
  assume {:verifier.code 0} true;
  call $i21 := _copy_from_user($p0, $p1, $i20);
  // WARNING: %24 = call i64 @_copy_from_user(i8* %0, i8* %1, i32 %23), !dbg !3701, !verifier.code !3665
  call {:cexpr "n"} boogie_si_record_i64($i21);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2955, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $i21;
  goto $bb6;
$bb5:
  assume !(($i19 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2957, 51} true;
  assume {:verifier.code 0} true;
  $i23 := $ne.i32(1, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2957, 51} true;
  assume {:verifier.code 0} true;
  $i24 := $zext.i1.i32($i23);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2957, 37} true;
  assume {:verifier.code 0} true;
  $i25 := $sext.i32.i64($i24);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2957, 17} true;
  assume {:verifier.code 0} true;
  call $i26 := ldv__builtin_expect($i25, 0);
  // WARNING: %29 = call i64 @ldv__builtin_expect(i64 %28, i64 0), !dbg !3708, !verifier.code !3665
  call {:cexpr "tmp___0"} boogie_si_record_i64($i26);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2958, 19} true;
  assume {:verifier.code 0} true;
  $i27 := $ne.i64($i26, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2958, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb7, $bb8;
$bb6:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i13 := $i22;
  goto $bb3;
$bb7:
  assume ($i27 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2959, 9} true;
  assume {:verifier.code 0} true;
  call warn_slowpath_fmt.ref.i32.ref(.str.45, 66, .str.46);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2961, 7} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i27 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2964, 41} true;
  assume {:verifier.code 0} true;
  $i28 := $ne.i32(1, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2964, 41} true;
  assume {:verifier.code 0} true;
  $i29 := $zext.i1.i32($i28);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2964, 27} true;
  assume {:verifier.code 0} true;
  $i30 := $sext.i32.i64($i29);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2964, 7} true;
  assume {:verifier.code 0} true;
  call $i31 := ldv__builtin_expect($i30, 0);
  assume {:verifier.code 0} true;
  $i22 := $i2;
  goto $bb6;
}
const ldv_mutex_lock_12: ref;
axiom (ldv_mutex_lock_12 == $sub.ref(0, 96357));
procedure  ldv_mutex_lock_12($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4683, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_lock_pt_mutex($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4684, 3} true;
  assume {:verifier.code 0} true;
  call mutex_lock($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4685, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const pt_rewind: ref;
axiom (pt_rewind == $sub.ref(0, 97389));
procedure  pt_rewind($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3352, 3} true;
  assume {:verifier.code 0} true;
  $p2 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3352, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p2, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3353, 3} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p1, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3353, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p3, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3354, 3} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p1, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3354, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p4, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3355, 3} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p1, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3355, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p5, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3356, 3} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3356, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p6, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3357, 3} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p1, 5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3357, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p7, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3358, 3} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p1, 6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3358, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p8, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3359, 3} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p1, 7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3359, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p9, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3360, 3} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3360, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p10, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3361, 3} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p1, 9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3361, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p11, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3362, 3} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p1, 10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3362, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p12, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3363, 3} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p1, 11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3363, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p13, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3364, 35} true;
  assume {:verifier.code 0} true;
  $p14 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3364, 3} true;
  assume {:verifier.code 0} true;
  call pt_media_access_cmd($p0, 1200, $p14, .str.48);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3365, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_mutex_unlock_13: ref;
axiom (ldv_mutex_unlock_13 == $sub.ref(0, 98421));
procedure  ldv_mutex_unlock_13($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4693, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_pt_mutex($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4694, 3} true;
  assume {:verifier.code 0} true;
  call mutex_unlock($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4695, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_mutex_lock_14: ref;
axiom (ldv_mutex_lock_14 == $sub.ref(0, 99453));
procedure  ldv_mutex_lock_14($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4703, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_lock_pt_mutex($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4704, 3} true;
  assume {:verifier.code 0} true;
  call mutex_lock($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4705, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const pt_write_fm: ref;
axiom (pt_write_fm == $sub.ref(0, 100485));
procedure  pt_write_fm($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3373, 3} true;
  assume {:verifier.code 0} true;
  $p2 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3373, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p2, 16);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3374, 3} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p1, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3374, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p3, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3375, 3} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p1, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3375, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p4, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3376, 3} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p1, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3376, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p5, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3377, 3} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3377, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p6, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3378, 3} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p1, 5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3378, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p7, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3379, 3} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p1, 6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3379, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p8, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3380, 3} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p1, 7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3380, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p9, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3381, 3} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3381, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p10, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3382, 3} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p1, 9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3382, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p11, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3383, 3} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p1, 10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3383, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p12, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3384, 3} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p1, 11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3384, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p13, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3385, 35} true;
  assume {:verifier.code 0} true;
  $p14 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3385, 3} true;
  assume {:verifier.code 0} true;
  call pt_media_access_cmd($p0, 3000, $p14, .str.47);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3386, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_mutex_unlock_15: ref;
axiom (ldv_mutex_unlock_15 == $sub.ref(0, 101517));
procedure  ldv_mutex_unlock_15($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4713, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_pt_mutex($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4714, 3} true;
  assume {:verifier.code 0} true;
  call mutex_unlock($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4715, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const printk: ref;
axiom (printk == $sub.ref(0, 102549));
procedure  printk.ref.i32($p0: ref, p.1: i32)
  returns ($r: i32);
procedure  printk.ref($p0: ref)
  returns ($r: i32);
procedure  printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32)
  returns ($r: i32);
procedure  printk.ref.ref($p0: ref, p.1: ref)
  returns ($r: i32);
procedure  printk.ref.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32)
  returns ($r: i32);
procedure  printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32)
  returns ($r: i32);
procedure  printk.ref.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: ref)
  returns ($r: i32);
procedure  printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32)
  returns ($r: i32);
procedure  printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref)
  returns ($r: i32);
procedure  printk.ref.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32)
  returns ($r: i32);
procedure  printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32)
  returns ($r: i32);
procedure  printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32)
  returns ($r: i32);
const ldv_mutex_unlock_pt_mutex: ref;
axiom (ldv_mutex_unlock_pt_mutex == $sub.ref(0, 103581));
procedure  ldv_mutex_unlock_pt_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5219, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $M.4;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5219, 26} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i32($i1, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5219, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5221, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5222, 5} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5224, 22} true;
  assume {:verifier.code 0} true;
  $M.4 := 1;
  call {:cexpr "ldv_mutex_pt_mutex"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5225, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const mutex_unlock: ref;
axiom (mutex_unlock == $sub.ref(0, 104613));
procedure  mutex_unlock($p0: ref);
const pt_media_access_cmd: ref;
axiom (pt_media_access_cmd == $sub.ref(0, 105645));
procedure  pt_media_access_cmd($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.pt_unit* %0, i64 0, metadata !4798, metadata !3661), !dbg !4799, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3335, 9} true;
  assume {:verifier.code 0} true;
  call $i4 := pt_command($p0, $p2, 0, $p3);
  // WARNING: %5 = call i32 @pt_command(%struct.pt_unit* %0, i8* %2, i32 0, i8* %3), !dbg !3672, !verifier.code !3665
  call {:cexpr "tmp"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3336, 11} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3336, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3337, 5} true;
  assume {:verifier.code 0} true;
  call pt_req_sense($p0, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3338, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3346, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3342, 23} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p0, 176);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3342, 23} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.8, $p6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3342, 3} true;
  assume {:verifier.code 0} true;
  call pi_disconnect($p7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3343, 3} true;
  assume {:verifier.code 0} true;
  call $i8 := pt_poll_dsc($p0, 250, $i1, $p3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3344, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const pt_command: ref;
axiom (pt_command == $sub.ref(0, 106677));
procedure  pt_command($p0: ref, $p1: ref, $i2: i32, $p3: ref)
  returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i10: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !4826, metadata !3661), !dbg !4827, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3102, 14} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 176);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3102, 14} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.8, $p4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3103, 3} true;
  assume {:verifier.code 0} true;
  call pi_connect($p5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3104, 9} true;
  assume {:verifier.code 0} true;
  call $i6 := DRIVE($p0);
  // WARNING: %7 = call zeroext i8 @DRIVE(%struct.pt_unit* %0), !dbg !3677, !verifier.code !3665
  call {:cexpr "tmp"} boogie_si_record_i8($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3105, 20} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i8.i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3105, 3} true;
  assume {:verifier.code 0} true;
  call write_reg($p5, 6, $i7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3106, 13} true;
  assume {:verifier.code 0} true;
  call $i8 := pt_wait($p0, 136, 0, $p3, .str.22);
  // WARNING: %9 = call i32 @pt_wait(%struct.pt_unit* %0, i32 136, i32 0, i8* %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i32 0, i32 0)), !dbg !3682, !verifier.code !3665
  call {:cexpr "tmp___0"} boogie_si_record_i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3107, 15} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i32($i8, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3107, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3108, 5} true;
  assume {:verifier.code 0} true;
  call pi_disconnect($p5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3109, 5} true;
  assume {:verifier.code 0} true;
  $i10 := $sub.i32(0, 1);
  goto $bb3;
$bb2:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3134, 1} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3113, 25} true;
  assume {:verifier.code 0} true;
  $i11 := $srem.i32($i2, 256);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3113, 3} true;
  assume {:verifier.code 0} true;
  call write_reg($p5, 4, $i11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3114, 25} true;
  assume {:verifier.code 0} true;
  $i12 := $sdiv.i32($i2, 256);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3114, 3} true;
  assume {:verifier.code 0} true;
  call write_reg($p5, 5, $i12);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3115, 3} true;
  assume {:verifier.code 0} true;
  call write_reg($p5, 7, 160);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3116, 13} true;
  assume {:verifier.code 0} true;
  call $i13 := pt_wait($p0, 128, 8, $p3, .str.23);
  // WARNING: %16 = call i32 @pt_wait(%struct.pt_unit* %0, i32 128, i32 8, i8* %3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i32 0, i32 0)), !dbg !3696, !verifier.code !3665
  call {:cexpr "tmp___1"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3117, 15} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i32($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3117, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3118, 5} true;
  assume {:verifier.code 0} true;
  call pi_disconnect($p5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3119, 5} true;
  assume {:verifier.code 0} true;
  $i10 := $sub.i32(0, 1);
  goto $bb3;
$bb6:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3123, 13} true;
  assume {:verifier.code 0} true;
  call $i15 := read_reg($p5, 2);
  // WARNING: %21 = call i32 @read_reg(%struct.pi_adapter* %6, i32 2), !dbg !3705, !verifier.code !3665
  call {:cexpr "tmp___2"} boogie_si_record_i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3124, 15} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i32($i15, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3124, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i16 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3125, 62} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p0, 224);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3125, 45} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p17);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3125, 5} true;
  assume {:verifier.code 0} true;
  call $i19 := printk.ref.ref.ref(.str.24, $p18, $p3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3126, 5} true;
  assume {:verifier.code 0} true;
  call pi_disconnect($p5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3127, 5} true;
  assume {:verifier.code 0} true;
  $i10 := $sub.i32(0, 1);
  goto $bb3;
$bb9:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3131, 3} true;
  assume {:verifier.code 0} true;
  call pi_write_block($p5, $p1, 12);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3132, 3} true;
  assume {:verifier.code 0} true;
  $i10 := 0;
  goto $bb3;
}
const pt_req_sense: ref;
axiom (pt_req_sense == $sub.ref(0, 107709));
procedure  pt_req_sense($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i1;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
$bb0:
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata %struct.pt_unit* %0, i64 0, metadata !4883, metadata !3661), !dbg !4884, !verifier.code !3663
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3184, 3} true;
  assume {:verifier.code 0} true;
  $p4 := $p2;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3184, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p4, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3185, 3} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p2, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3185, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p5, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3186, 3} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p2, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3186, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p6, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3187, 3} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p2, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3187, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p7, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3188, 3} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p2, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3188, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p8, 16);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3189, 3} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p2, 5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3189, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p9, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3190, 3} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p2, 6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3190, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p10, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3191, 3} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p2, 7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3191, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p11, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3192, 3} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p2, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3192, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p12, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3193, 3} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p2, 9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3193, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p13, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3194, 3} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p2, 10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3194, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p14, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3195, 3} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p2, 11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3195, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p15, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3196, 24} true;
  assume {:verifier.code 0} true;
  $p16 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3196, 7} true;
  assume {:verifier.code 0} true;
  call $i17 := pt_command($p0, $p16, 16, .str.28);
  // WARNING: %18 = call i32 @pt_command(%struct.pt_unit* %0, i8* %17, i32 16, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i32 0, i32 0)), !dbg !3699, !verifier.code !3662
  call {:cexpr "r"} boogie_si_record_i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3197, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb1, $bb2;
$bb1:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3198, 5} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3199, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !((1 == 1));
  // WARNING: call void @llvm.dbg.value(metadata i64 1, i64 0, metadata !4925, metadata !3661), !dbg !4926, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i64 1, i64 0, metadata !4927, metadata !3661), !dbg !4928, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3207, 9} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3214, 9} true;
  assume {:verifier.code 0} true;
  $i18 := $eq.i32($i17, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3214, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb7, $bb8;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3208, 7} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3203, 5} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  // WARNING: call void @__const_udelay(i64 4295000), !dbg !3713, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4927, metadata !3661), !dbg !4928, !verifier.code !3663
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  goto $bb3;
$bb7:
  assume ($i18 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3215, 25} true;
  assume {:verifier.code 0} true;
  $p19 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3215, 5} true;
  assume {:verifier.code 0} true;
  call $i20 := pt_completion($p0, $p19, .str.28);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3216, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i18 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3219, 9} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p0, 188);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3219, 20} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p21, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3220, 9} true;
  assume {:verifier.code 0} true;
  $i22 := $eq.i32($i17, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3220, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i22 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3221, 15} true;
  assume {:verifier.code 0} true;
  $i23 := $eq.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3221, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i23} true;
  goto $bb12, $bb13;
$bb11:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  goto $bb15;
$bb12:
  assume ($i23 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3222, 72} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p0, 224);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3222, 55} true;
  assume {:verifier.code 0} true;
  $p25 := $bitcast.ref.ref($p24);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3222, 85} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p3, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3222, 85} true;
  assume {:verifier.code 0} true;
  $i27 := $load.i8($M.8, $p26);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3222, 79} true;
  assume {:verifier.code 0} true;
  $i28 := $sext.i8.i32($i27);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3222, 92} true;
  assume {:verifier.code 0} true;
  $i29 := $and.i32($i28, 15);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3223, 20} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p3, 12);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3223, 20} true;
  assume {:verifier.code 0} true;
  $i31 := $load.i8($M.8, $p30);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3223, 14} true;
  assume {:verifier.code 0} true;
  $i32 := $sext.i8.i32($i31);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3223, 35} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p3, 13);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3223, 35} true;
  assume {:verifier.code 0} true;
  $i34 := $load.i8($M.8, $p33);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3223, 29} true;
  assume {:verifier.code 0} true;
  $i35 := $sext.i8.i32($i34);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3222, 7} true;
  assume {:verifier.code 0} true;
  call $i36 := printk.ref.ref.i32.i32.i32(.str.29, $p25, $i29, $i32, $i35);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3224, 5} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb13:
  assume !(($i23 == 1));
  assume {:verifier.code 0} true;
  goto $bb14;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 32} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p3, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 32} true;
  assume {:verifier.code 0} true;
  $i38 := $load.i8($M.8, $p37);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 26} true;
  assume {:verifier.code 0} true;
  $i39 := $sext.i8.i32($i38);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 39} true;
  assume {:verifier.code 0} true;
  $i40 := $and.i32($i39, 15);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 55} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($p3, 12);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 55} true;
  assume {:verifier.code 0} true;
  $i42 := $load.i8($M.8, $p41);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 49} true;
  assume {:verifier.code 0} true;
  $i43 := $sext.i8.i32($i42);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 63} true;
  assume {:verifier.code 0} true;
  $i44 := $shl.i32($i43, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 69} true;
  assume {:verifier.code 0} true;
  $i45 := $and.i32($i44, 65535);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 45} true;
  assume {:verifier.code 0} true;
  $i46 := $or.i32($i40, $i45);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 89} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($p3, 13);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 89} true;
  assume {:verifier.code 0} true;
  $i48 := $load.i8($M.8, $p47);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 83} true;
  assume {:verifier.code 0} true;
  $i49 := $sext.i8.i32($i48);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 97} true;
  assume {:verifier.code 0} true;
  $i50 := $and.i32($i49, 255);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 104} true;
  assume {:verifier.code 0} true;
  $i51 := $shl.i32($i50, 16);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 79} true;
  assume {:verifier.code 0} true;
  $i52 := $or.i32($i46, $i51);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 11} true;
  assume {:verifier.code 0} true;
  $p53 := $add.ref($p0, 188);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3227, 22} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p53, $i52);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3228, 3} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3231, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const pi_disconnect: ref;
axiom (pi_disconnect == $sub.ref(0, 108741));
procedure  pi_disconnect($p0: ref);
const pt_poll_dsc: ref;
axiom (pt_poll_dsc == $sub.ref(0, 109773));
procedure  pt_poll_dsc($p0: ref, $i1: i32, $i2: i32, $p3: ref)
  returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i24: i1;
  var $i10: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.pt_unit* %0, i64 0, metadata !4983, metadata !3661), !dbg !4984, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !4985, metadata !3661), !dbg !4986, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3290, 14} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 176);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3290, 14} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.8, $p4);
  // WARNING: call void @llvm.dbg.value(metadata %struct.pi_adapter* %6, i64 0, metadata !4993, metadata !3661), !dbg !4994, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !4995, metadata !3661), !dbg !4996, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !4997, metadata !3661), !dbg !4998, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3310, 9} true;
  assume {:verifier.code 0} true;
  $i6 := $slt.i32(0, $i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3310, 7} true;
  assume {:verifier.code 0} true;
  $i7, $i8, $i9 := 0, 0, 0;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3310, 7} true;
  assume {:verifier.code 0} true;
  $i10 := 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3310, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i6 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3311, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3296, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3297, 9} true;
  assume {:verifier.code 0} true;
  $i11 := $add.i32($i10, 1);
  // WARNING: %9 = add nsw i32 %.0411, 1, !dbg !3686, !verifier.code !3665
  call {:cexpr "k"} boogie_si_record_i32($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3298, 3} true;
  assume {:verifier.code 0} true;
  call pi_connect($p5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3299, 9} true;
  assume {:verifier.code 0} true;
  call $i12 := DRIVE($p0);
  // WARNING: %10 = call zeroext i8 @DRIVE(%struct.pt_unit* %0), !dbg !3688, !verifier.code !3665
  call {:cexpr "tmp"} boogie_si_record_i8($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3300, 20} true;
  assume {:verifier.code 0} true;
  $i13 := $zext.i8.i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3300, 3} true;
  assume {:verifier.code 0} true;
  call write_reg($p5, 6, $i13);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3301, 7} true;
  assume {:verifier.code 0} true;
  call $i14 := read_reg($p5, 7);
  // WARNING: %12 = call i32 @read_reg(%struct.pi_adapter* %6, i32 7), !dbg !3693, !verifier.code !3665
  call {:cexpr "s"} boogie_si_record_i32($i14);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3302, 7} true;
  assume {:verifier.code 0} true;
  call $i15 := read_reg($p5, 1);
  // WARNING: %13 = call i32 @read_reg(%struct.pi_adapter* %6, i32 1), !dbg !3694, !verifier.code !3665
  call {:cexpr "e"} boogie_si_record_i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3303, 3} true;
  assume {:verifier.code 0} true;
  call pi_disconnect($p5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3304, 10} true;
  assume {:verifier.code 0} true;
  $i16 := $and.i32($i14, 17);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3304, 16} true;
  assume {:verifier.code 0} true;
  $i17 := $ne.i32($i16, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3304, 7} true;
  assume {:verifier.code 0} true;
  $i18, $i19, $i20 := $i11, $i14, $i15;
  assume {:branchcond $i17} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i17 == 1);
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3305, 5} true;
  assume {:verifier.code 0} true;
  $i21, $i22, $i23 := $i18, $i20, $i19;
  goto $bb8;
$bb7:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3316, 9} true;
  assume {:verifier.code 0} true;
  $i28 := $sge.i32($i21, $i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3316, 16} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb13, $bb15;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3310, 9} true;
  assume {:verifier.code 0} true;
  $i24 := $slt.i32($i11, $i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3310, 7} true;
  assume {:verifier.code 0} true;
  $i10, $i25, $i26, $i27 := $i11, $i11, $i15, $i14;
  assume {:branchcond $i24} true;
  goto $bb10, $bb11;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3310, 7} true;
  assume {:verifier.code 0} true;
  assume ($i24 == 1);
  goto $bb4;
$bb11:
  assume !(($i24 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3310, 7} true;
  assume {:verifier.code 0} true;
  $i7, $i8, $i9 := $i25, $i26, $i27;
  goto $bb3;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3310, 11} true;
  assume {:verifier.code 0} true;
  $i21, $i22, $i23 := $i7, $i8, $i9;
  goto $bb8;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3316, 16} true;
  assume {:verifier.code 0} true;
  assume ($i28 == 1);
  goto $bb14;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3317, 11} true;
  assume {:verifier.code 0} true;
  $i31 := $sge.i32($i21, $i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3317, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb18, $bb19;
$bb15:
  assume !(($i28 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3316, 21} true;
  assume {:verifier.code 0} true;
  $i29 := $and.i32($i23, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3316, 21} true;
  assume {:verifier.code 0} true;
  $i30 := $ne.i32($i29, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3316, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb16, $bb17;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3316, 7} true;
  assume {:verifier.code 0} true;
  assume ($i30 == 1);
  goto $bb14;
$bb17:
  assume !(($i30 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb18:
  assume ($i31 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3318, 55} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p0, 224);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3318, 38} true;
  assume {:verifier.code 0} true;
  $p33 := $bitcast.ref.ref($p32);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3318, 7} true;
  assume {:verifier.code 0} true;
  call $i34 := printk.ref.ref.ref(.str.39, $p33, $p3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3319, 5} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb19:
  assume !(($i31 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3320, 62} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($p0, 224);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3320, 45} true;
  assume {:verifier.code 0} true;
  $p36 := $bitcast.ref.ref($p35);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3320, 7} true;
  assume {:verifier.code 0} true;
  call $i37 := printk.ref.ref.ref.i32.i32(.str.40, $p36, $p3, $i23, $i22);
  assume {:verifier.code 0} true;
  goto $bb20;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3322, 5} true;
  assume {:verifier.code 0} true;
  call pt_req_sense($p0, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3323, 5} true;
  assume {:verifier.code 0} true;
  $i38 := 0;
  goto $bb21;
$bb21:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3329, 1} true;
  assume {:verifier.code 0} true;
  $r := $i38;
  $exn := false;
  return;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3327, 3} true;
  assume {:verifier.code 0} true;
  $i38 := 1;
  goto $bb21;
}
const pt_sleep: ref;
axiom (pt_sleep == $sub.ref(0, 110805));
procedure  pt_sleep($i0: i32)
{
  var $i1: i64;
  var $i2: i64;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3277, 34} true;
  assume {:verifier.code 0} true;
  $i1 := $sext.i32.i64($i0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3277, 3} true;
  assume {:verifier.code 0} true;
  call $i2 := schedule_timeout_interruptible($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3278, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const pi_connect: ref;
axiom (pi_connect == $sub.ref(0, 111837));
procedure  pi_connect($p0: ref);
const DRIVE: ref;
axiom (DRIVE == $sub.ref(0, 112869));
procedure  DRIVE($p0: ref)
  returns ($r: i8)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3038, 39} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 192);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3038, 39} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i32($M.8, $p1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3038, 45} true;
  assume {:verifier.code 0} true;
  $i3 := $add.i32($i2, 10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3038, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.i32.i8($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3038, 11} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i8.i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3038, 52} true;
  assume {:verifier.code 0} true;
  $i6 := $mul.i32($i5, 16);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3038, 10} true;
  assume {:verifier.code 0} true;
  $i7 := $trunc.i32.i8($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3038, 3} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
}
const write_reg: ref;
axiom (write_reg == $sub.ref(0, 113901));
procedure  write_reg($p0: ref, $i1: i32, $i2: i32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.pi_adapter* %0, i64 0, metadata !5071, metadata !3661), !dbg !5072, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !5073, metadata !3661), !dbg !5074, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3029, 3} true;
  assume {:verifier.code 0} true;
  call pi_write_regr($p0, 0, $i1, $i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3030, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const read_reg: ref;
axiom (read_reg == $sub.ref(0, 114933));
procedure  read_reg($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.pi_adapter* %0, i64 0, metadata !5083, metadata !3661), !dbg !5084, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3020, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := pi_read_regr($p0, 0, $i1);
  // WARNING: %3 = call i32 @pi_read_regr(%struct.pi_adapter* %0, i32 0, i32 %1), !dbg !3668, !verifier.code !3665
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3021, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const pi_read_regr: ref;
axiom (pi_read_regr == $sub.ref(0, 115965));
procedure  pi_read_regr($p0: ref, $i1: i32, $i2: i32)
  returns ($r: i32);
const pi_write_regr: ref;
axiom (pi_write_regr == $sub.ref(0, 116997));
procedure  pi_write_regr($p0: ref, $i1: i32, $i2: i32, $i3: i32);
const schedule_timeout_interruptible: ref;
axiom (schedule_timeout_interruptible == $sub.ref(0, 118029));
procedure  schedule_timeout_interruptible($i0: i64)
  returns ($r: i64);
const __const_udelay: ref;
axiom (__const_udelay == $sub.ref(0, 119061));
procedure  __const_udelay($i0: i64);
const pt_completion: ref;
axiom (pt_completion == $sub.ref(0, 120093));
procedure  pt_completion($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3148, 14} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 176);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3148, 14} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.8, $p3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3149, 7} true;
  assume {:verifier.code 0} true;
  call $i5 := pt_wait($p0, 128, 73, $p2, .str.26);
  // WARNING: %6 = call i32 @pt_wait(%struct.pt_unit* %0, i32 128, i32 73, i8* %2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.26, i32 0, i32 0)), !dbg !3674, !verifier.code !3665
  call {:cexpr "r"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3150, 13} true;
  assume {:verifier.code 0} true;
  call $i6 := read_reg($p4, 7);
  // WARNING: %7 = call i32 @read_reg(%struct.pi_adapter* %5, i32 7), !dbg !3677, !verifier.code !3665
  call {:cexpr "tmp___2"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3151, 16} true;
  assume {:verifier.code 0} true;
  $i7 := $and.i32($i6, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3151, 21} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3151, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3152, 11} true;
  assume {:verifier.code 0} true;
  call $i9 := read_reg($p4, 4);
  // WARNING: %11 = call i32 @read_reg(%struct.pi_adapter* %5, i32 4), !dbg !3684, !verifier.code !3665
  call {:cexpr "tmp"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3153, 15} true;
  assume {:verifier.code 0} true;
  call $i10 := read_reg($p4, 5);
  // WARNING: %12 = call i32 @read_reg(%struct.pi_adapter* %5, i32 5), !dbg !3688, !verifier.code !3665
  call {:cexpr "tmp___0"} boogie_si_record_i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3154, 25} true;
  assume {:verifier.code 0} true;
  $i11 := $mul.i32($i10, 256);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3154, 15} true;
  assume {:verifier.code 0} true;
  $i12 := $add.i32($i9, $i11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3154, 32} true;
  assume {:verifier.code 0} true;
  $i13 := $add.i32($i12, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3154, 37} true;
  assume {:verifier.code 0} true;
  $i14 := $and.i32($i13, 65532);
  // WARNING: %16 = and i32 %15, 65532, !dbg !3694, !verifier.code !3665
  call {:cexpr "n"} boogie_si_record_i32($i14);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3155, 15} true;
  assume {:verifier.code 0} true;
  call $i15 := read_reg($p4, 2);
  // WARNING: %17 = call i32 @read_reg(%struct.pi_adapter* %5, i32 2), !dbg !3697, !verifier.code !3665
  call {:cexpr "tmp___1"} boogie_si_record_i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3156, 17} true;
  assume {:verifier.code 0} true;
  $i16 := $and.i32($i15, 3);
  // WARNING: %18 = and i32 %17, 3, !dbg !3700, !verifier.code !3665
  call {:cexpr "p"} boogie_si_record_i32($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3157, 11} true;
  assume {:verifier.code 0} true;
  $i17 := $eq.i32($i16, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3157, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb3:
  assume ($i17 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3158, 7} true;
  assume {:verifier.code 0} true;
  call pi_write_block($p4, $p1, $i14);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3159, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3162, 11} true;
  assume {:verifier.code 0} true;
  $i18 := $eq.i32($i16, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3162, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i18 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3163, 7} true;
  assume {:verifier.code 0} true;
  call pi_read_block($p4, $p1, $i14);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3164, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !(($i18 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3167, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3170, 7} true;
  assume {:verifier.code 0} true;
  call $i19 := pt_wait($p0, 128, 65, $p2, .str.27);
  // WARNING: %29 = call i32 @pt_wait(%struct.pt_unit* %0, i32 128, i32 65, i8* %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27, i32 0, i32 0)), !dbg !3716, !verifier.code !3665
  call {:cexpr "s"} boogie_si_record_i32($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3171, 3} true;
  assume {:verifier.code 0} true;
  call pi_disconnect($p4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3172, 13} true;
  assume {:verifier.code 0} true;
  $i20 := $ne.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3172, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i20 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3172, 11} true;
  assume {:verifier.code 0} true;
  $i21 := $i5;
  goto $bb12;
$bb11:
  assume !(($i20 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3172, 11} true;
  assume {:verifier.code 0} true;
  $i21 := $i19;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3172, 11} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3172, 3} true;
  assume {:verifier.code 0} true;
  $r := $i21;
  $exn := false;
  return;
}
const pt_wait: ref;
axiom (pt_wait == $sub.ref(0, 121125));
procedure  pt_wait($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref)
  returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i15: i32;
  var $i16: i1;
  var $i8: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i13: i32;
  var $i14: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.pt_unit* %0, i64 0, metadata !5163, metadata !3661), !dbg !5164, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !5165, metadata !3661), !dbg !5166, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3052, 14} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 176);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3052, 14} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.8, $p5);
  // WARNING: call void @llvm.dbg.value(metadata %struct.pi_adapter* %7, i64 0, metadata !5175, metadata !3661), !dbg !5176, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3054, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 0;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3058, 7} true;
  assume {:verifier.code 0} true;
  call $i9 := status_reg($p6);
  // WARNING: %10 = call i32 @status_reg(%struct.pi_adapter* %7), !dbg !3682, !verifier.code !3665
  call {:cexpr "r"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3059, 10} true;
  assume {:verifier.code 0} true;
  $i10 := $and.i32($i9, $i1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3059, 16} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.i32($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3059, 21} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb3, $bb5;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3056, 3} true;
  assume {:verifier.code 0} true;
  call __const_udelay(214750);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3056, 3} true;
  assume {:verifier.code 0} true;
  $i7 := $i8;
  goto $bb1;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3059, 21} true;
  assume {:verifier.code 0} true;
  assume ($i11 == 1);
  goto $bb4;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3061, 11} true;
  assume {:verifier.code 0} true;
  $i8 := $add.i32($i7, 1);
  // WARNING: %19 = add nsw i32 %.02, 1, !dbg !3698, !verifier.code !3665
  call {:cexpr "j"} boogie_si_record_i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3062, 13} true;
  assume {:verifier.code 0} true;
  $i17 := $sle.i32($i7, 239999);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3062, 9} true;
  assume {:verifier.code 0} true;
  $i18, $i19 := $i9, $i8;
  assume {:branchcond $i17} true;
  goto $bb11, $bb12;
$bb5:
  assume !(($i11 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3059, 30} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3059, 35} true;
  assume {:verifier.code 0} true;
  $i13, $i14 := $i7, $i9;
  assume {:branchcond $i12} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3059, 41} true;
  assume {:verifier.code 0} true;
  $i15 := $and.i32($i9, $i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3059, 49} true;
  assume {:verifier.code 0} true;
  $i16 := $eq.i32($i15, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3059, 7} true;
  assume {:verifier.code 0} true;
  $i13, $i14 := $i7, $i9;
  assume {:branchcond $i16} true;
  goto $bb9, $bb10;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3059, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i12 == 1));
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3059, 7} true;
  assume {:verifier.code 0} true;
  assume ($i16 == 1);
  goto $bb4;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3059, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i16 == 1));
  goto $bb8;
$bb11:
  assume ($i17 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3063, 7} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb12:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3065, 7} true;
  assume {:verifier.code 0} true;
  $i20, $i21 := $i18, $i19;
  goto $bb13;
$bb13:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3071, 14} true;
  assume {:verifier.code 0} true;
  $i22 := $and.i32($i2, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3071, 19} true;
  assume {:verifier.code 0} true;
  $i23 := $and.i32($i22, $i20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3071, 24} true;
  assume {:verifier.code 0} true;
  $i24 := $ne.i32($i23, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3071, 29} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb15, $bb17;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3059, 53} true;
  assume {:verifier.code 0} true;
  $i20, $i21 := $i14, $i13;
  goto $bb13;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3071, 29} true;
  assume {:verifier.code 0} true;
  assume ($i24 == 1);
  goto $bb16;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3072, 9} true;
  assume {:verifier.code 0} true;
  call $i26 := read_reg($p6, 7);
  // WARNING: %33 = call i32 @read_reg(%struct.pi_adapter* %7, i32 7), !dbg !3717, !verifier.code !3665
  call {:cexpr "s"} boogie_si_record_i32($i26);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3073, 9} true;
  assume {:verifier.code 0} true;
  call $i27 := read_reg($p6, 1);
  // WARNING: %34 = call i32 @read_reg(%struct.pi_adapter* %7, i32 1), !dbg !3721, !verifier.code !3665
  call {:cexpr "e"} boogie_si_record_i32($i27);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3074, 9} true;
  assume {:verifier.code 0} true;
  call $i28 := read_reg($p6, 2);
  // WARNING: %35 = call i32 @read_reg(%struct.pi_adapter* %7, i32 2), !dbg !3724, !verifier.code !3665
  call {:cexpr "p"} boogie_si_record_i32($i28);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3075, 11} true;
  assume {:verifier.code 0} true;
  $i29 := $sgt.i32($i21, 240000);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3075, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb20, $bb21;
$bb17:
  assume !(($i24 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3071, 34} true;
  assume {:verifier.code 0} true;
  $i25 := $sgt.i32($i21, 240000);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3071, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb18, $bb19;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3071, 7} true;
  assume {:verifier.code 0} true;
  assume ($i25 == 1);
  goto $bb16;
$bb19:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  goto $bb27;
$bb20:
  assume ($i29 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3076, 13} true;
  assume {:verifier.code 0} true;
  $i30 := $or.i32($i27, 256);
  // WARNING: %38 = or i32 %34, 256, !dbg !3730, !verifier.code !3665
  call {:cexpr "e"} boogie_si_record_i32($i30);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3077, 5} true;
  assume {:verifier.code 0} true;
  $i31 := $i30;
  goto $bb22;
$bb21:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  $i31 := $i27;
  goto $bb22;
$bb22:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3080, 9} true;
  assume {:verifier.code 0} true;
  $i32 := $p2i.ref.i64($p3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3080, 29} true;
  assume {:verifier.code 0} true;
  $i33 := $ne.i64($i32, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3080, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i33} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i33 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3081, 92} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p0, 224);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3081, 75} true;
  assume {:verifier.code 0} true;
  $p35 := $bitcast.ref.ref($p34);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3081, 7} true;
  assume {:verifier.code 0} true;
  call $i36 := printk.ref.ref.ref.ref.i32.i32.i32.i32.i32(.str.25, $p35, $p3, $p4, $i20, $i26, $i31, $i21, $i28);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3083, 5} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb24:
  assume !(($i33 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3086, 16} true;
  assume {:verifier.code 0} true;
  $i37 := $shl.i32($i31, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3086, 22} true;
  assume {:verifier.code 0} true;
  $i38 := $add.i32($i37, $i26);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3086, 5} true;
  assume {:verifier.code 0} true;
  $i39 := $i38;
  goto $bb26;
$bb26:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3092, 1} true;
  assume {:verifier.code 0} true;
  $r := $i39;
  $exn := false;
  return;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3090, 3} true;
  assume {:verifier.code 0} true;
  $i39 := 0;
  goto $bb26;
}
const pi_write_block: ref;
axiom (pi_write_block == $sub.ref(0, 122157));
procedure  pi_write_block($p0: ref, $p1: ref, $i2: i32);
const pi_read_block: ref;
axiom (pi_read_block == $sub.ref(0, 123189));
procedure  pi_read_block($p0: ref, $p1: ref, $i2: i32);
const status_reg: ref;
axiom (status_reg == $sub.ref(0, 124221));
procedure  status_reg($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3011, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := pi_read_regr($p0, 1, 6);
  // WARNING: %2 = call i32 @pi_read_regr(%struct.pi_adapter* %0, i32 1, i32 6), !dbg !3666, !verifier.code !3665
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3012, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const ldv_mutex_lock_pt_mutex: ref;
axiom (ldv_mutex_lock_pt_mutex == $sub.ref(0, 125253));
procedure  ldv_mutex_lock_pt_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5149, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $M.4;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5149, 26} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i32($i1, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5149, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5151, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5152, 5} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5154, 22} true;
  assume {:verifier.code 0} true;
  $M.4 := 2;
  call {:cexpr "ldv_mutex_pt_mutex"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 5155, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const mutex_lock: ref;
axiom (mutex_lock == $sub.ref(0, 126285));
procedure  mutex_lock($p0: ref);
const __builtinx_object_size: ref;
axiom (__builtinx_object_size == $sub.ref(0, 127317));
procedure  __builtinx_object_size.ref.i32(p.0: ref, p.1: i32)
  returns ($r: i32);
const might_fault: ref;
axiom (might_fault == $sub.ref(0, 128349));
procedure  might_fault();
const ldv__builtin_expect: ref;
axiom (ldv__builtin_expect == $sub.ref(0, 129381));
procedure  ldv__builtin_expect($i0: i64, $i1: i64)
  returns ($r: i64)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !5273, metadata !3661), !dbg !5274, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4733, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const _copy_from_user: ref;
axiom (_copy_from_user == $sub.ref(0, 130413));
procedure  _copy_from_user($p0: ref, $p1: ref, $i2: i32)
  returns ($r: i64);
const warn_slowpath_fmt: ref;
axiom (warn_slowpath_fmt == $sub.ref(0, 131445));
procedure  warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
const atomic_read: ref;
axiom (atomic_read == $sub.ref(0, 132477));
procedure  atomic_read($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2812, 43} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2812, 17} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i32($M.8, $p1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2812, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const kfree: ref;
axiom (kfree == $sub.ref(0, 133509));
procedure  kfree($p0: ref);
const atomic_inc: ref;
axiom (atomic_inc == $sub.ref(0, 134541));
procedure  atomic_inc($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2829, 129} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  call devirtbounce(0, $p1, $p1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2830, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const pt_atapi: ref;
axiom (pt_atapi == $sub.ref(0, 135573));
procedure  pt_atapi($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref)
  returns ($r: i32)
{
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !5302, metadata !3661), !dbg !5303, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3241, 7} true;
  assume {:verifier.code 0} true;
  call $i5 := pt_command($p0, $p1, $i2, $p4);
  // WARNING: %6 = call i32 @pt_command(%struct.pt_unit* %0, i8* %1, i32 %2, i8* %4), !dbg !3674, !verifier.code !3665
  call {:cexpr "r"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3242, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb1, $bb2;
$bb1:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3243, 5} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3244, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !((1 == 1));
  // WARNING: call void @llvm.dbg.value(metadata i64 1, i64 0, metadata !5319, metadata !3661), !dbg !5320, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i64 1, i64 0, metadata !5321, metadata !3661), !dbg !5322, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3252, 9} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3259, 9} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3259, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb7, $bb8;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3253, 7} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3248, 5} true;
  assume {:verifier.code 0} true;
  call __const_udelay(4295000);
  // WARNING: call void @__const_udelay(i64 4295000), !dbg !3689, !verifier.code !3665
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !5321, metadata !3661), !dbg !5322, !verifier.code !3663
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  goto $bb3;
$bb7:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3260, 9} true;
  assume {:verifier.code 0} true;
  call $i7 := pt_completion($p0, $p3, $p4);
  // WARNING: %15 = call i32 @pt_completion(%struct.pt_unit* %0, i8* %3, i8* %4), !dbg !3696, !verifier.code !3665
  call {:cexpr "r"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3261, 3} true;
  assume {:verifier.code 0} true;
  $i8 := $i7;
  goto $bb9;
$bb8:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  $i8 := $i5;
  goto $bb9;
$bb9:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3264, 9} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i32($i8, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3264, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3265, 24} true;
  assume {:verifier.code 0} true;
  $i10 := $p2i.ref.i64($p4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3265, 44} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i64($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3265, 44} true;
  assume {:verifier.code 0} true;
  $i12 := $zext.i1.i32($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3265, 5} true;
  assume {:verifier.code 0} true;
  call pt_req_sense($p0, $i12);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3266, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3269, 3} true;
  assume {:verifier.code 0} true;
  $r := $i8;
  $exn := false;
  return;
}
const copy_to_user: ref;
axiom (copy_to_user == $sub.ref(0, 136605));
procedure  copy_to_user($p0: ref, $p1: ref, $i2: i32)
  returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !5349, metadata !3661), !dbg !5350, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2975, 3} true;
  assume {:verifier.code 0} true;
  call might_fault();
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2976, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := _copy_to_user($p0, $p1, $i2);
  // WARNING: %4 = call i64 @_copy_to_user(i8* %0, i8* %1, i32 %2), !dbg !3672, !verifier.code !3665
  call {:cexpr "tmp"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2977, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.i64.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2977, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const _copy_to_user: ref;
axiom (_copy_to_user == $sub.ref(0, 137637));
procedure  _copy_to_user($p0: ref, $p1: ref, $i2: i32)
  returns ($r: i64);
const iminor: ref;
axiom (iminor == $sub.ref(0, 138669));
procedure  iminor($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2889, 33} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 76);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2889, 33} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i32($M.8, $p1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2889, 40} true;
  assume {:verifier.code 0} true;
  $i3 := $and.i32($i2, 1048575);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2889, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const ldv_mutex_lock_8: ref;
axiom (ldv_mutex_lock_8 == $sub.ref(0, 139701));
procedure  ldv_mutex_lock_8($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4643, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_lock_pt_mutex($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4644, 3} true;
  assume {:verifier.code 0} true;
  call mutex_lock($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4645, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_mutex_unlock_9: ref;
axiom (ldv_mutex_unlock_9 == $sub.ref(0, 140733));
procedure  ldv_mutex_unlock_9($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4653, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_pt_mutex($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4654, 3} true;
  assume {:verifier.code 0} true;
  call mutex_unlock($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4655, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atomic_dec_and_test: ref;
axiom (atomic_dec_and_test == $sub.ref(0, 141765));
procedure  atomic_dec_and_test($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2838, 138} true;
  assume {:verifier.code 0} true;
  $p2 := $p0;
  call devirtbounce.1(0, $p2, $p1, $p2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2840, 26} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i8($M.11, $p1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2840, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i8.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2840, 28} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2840, 28} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2840, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const pt_identify: ref;
axiom (pt_identify == $sub.ref(0, 142797));
procedure  pt_identify($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i8;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i64;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $p118: ref;
  var $i119: i32;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i50: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(10, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(18, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(12, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(12, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(12, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p7 := $alloc($mul.ref(36, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3599, 3} true;
  assume {:verifier.code 0} true;
  $p8 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3599, 9} true;
  assume {:verifier.code 0} true;
  $M.12 := $store.ref($M.12, $p8, .str.12);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3600, 3} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3600, 9} true;
  assume {:verifier.code 0} true;
  $M.12 := $store.ref($M.12, $p9, .str.13);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3601, 3} true;
  assume {:verifier.code 0} true;
  $p10 := $p4;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3601, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p10, 18);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3602, 3} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p4, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3602, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p11, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3603, 3} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p4, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3603, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p12, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3604, 3} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p4, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3604, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p13, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3605, 3} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p4, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3605, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p14, 36);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3606, 3} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p4, 5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3606, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p15, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3607, 3} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p4, 6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3607, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p16, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3608, 3} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p4, 7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3608, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p17, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3609, 3} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p4, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3609, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p18, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3610, 3} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p4, 9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3610, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p19, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3611, 3} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p4, 10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3611, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p20, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3612, 3} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p4, 11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3612, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p21, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3613, 3} true;
  assume {:verifier.code 0} true;
  $p22 := $p5;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3613, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p22, 26);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3614, 3} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p5, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3614, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p23, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3615, 3} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p5, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3615, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p24, 42);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3616, 3} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p5, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3616, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p25, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3617, 3} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p5, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3617, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p26, 36);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3618, 3} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p5, 5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3618, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p27, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3619, 3} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p5, 6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3619, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p28, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3620, 3} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p5, 7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3620, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p29, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3621, 3} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p5, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3621, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p30, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3622, 3} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p5, 9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3622, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p31, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3623, 3} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p5, 10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3623, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p32, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3624, 3} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p5, 11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3624, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p33, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3625, 3} true;
  assume {:verifier.code 0} true;
  $p34 := $p6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3625, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p34, 77);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3626, 3} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($p6, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3626, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p35, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3627, 3} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p6, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3627, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p36, 113);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3628, 3} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p6, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3628, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p37, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3629, 3} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p6, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3629, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p38, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3630, 3} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p6, 5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3630, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p39, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3631, 3} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p6, 6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3631, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p40, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3632, 3} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($p6, 7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3632, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p41, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3633, 3} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($p6, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3633, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p42, 36);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3634, 3} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p6, 9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3634, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p43, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3635, 3} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($p6, 10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3635, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p44, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3636, 3} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($p6, 11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3636, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p45, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3637, 22} true;
  assume {:verifier.code 0} true;
  $p46 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3637, 46} true;
  assume {:verifier.code 0} true;
  $p47 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3637, 7} true;
  assume {:verifier.code 0} true;
  call $i48 := pt_atapi($p0, $p46, 36, $p47, .str.14);
  // WARNING: %49 = call i32 @pt_atapi(%struct.pt_unit* %0, i8* %47, i32 36, i8* %48, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0)), !dbg !3770, !verifier.code !3662
  call {:cexpr "s"} boogie_si_record_i32($i48);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3638, 9} true;
  assume {:verifier.code 0} true;
  $i49 := $ne.i32($i48, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3638, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i49 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3639, 5} true;
  assume {:verifier.code 0} true;
  $i50 := $sub.i32(0, 1);
  goto $bb3;
$bb2:
  assume !(($i49 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3697, 1} true;
  assume {:verifier.code 0} true;
  $r := $i50;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3643, 14} true;
  assume {:verifier.code 0} true;
  $p51 := $p7;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3643, 14} true;
  assume {:verifier.code 0} true;
  $i52 := $load.i8($M.8, $p51);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3643, 8} true;
  assume {:verifier.code 0} true;
  $i53 := $sext.i8.i32($i52);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3643, 21} true;
  assume {:verifier.code 0} true;
  $i54 := $and.i32($i53, 31);
  // WARNING: %57 = and i32 %56, 31, !dbg !3780, !verifier.code !3662
  call {:cexpr "dt"} boogie_si_record_i32($i54);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3644, 10} true;
  assume {:verifier.code 0} true;
  $i55 := $ne.i32($i54, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3644, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i55} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i55 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3645, 15} true;
  assume {:verifier.code 0} true;
  $i56 := $M.10;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3645, 15} true;
  assume {:verifier.code 0} true;
  $i57 := $trunc.i8.i1($i56);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3645, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i57} true;
  goto $bb7, $bb8;
$bb6:
  assume !(($i55 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb7:
  assume ($i57 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3646, 70} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($p0, 224);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3646, 53} true;
  assume {:verifier.code 0} true;
  $p59 := $bitcast.ref.ref($p58);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3646, 83} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($p0, 192);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3646, 83} true;
  assume {:verifier.code 0} true;
  $i61 := $load.i32($M.8, $p60);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3646, 7} true;
  assume {:verifier.code 0} true;
  call $i62 := printk.ref.ref.i32.i32(.str.15, $p59, $i61, $i54);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3648, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i57 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3651, 5} true;
  assume {:verifier.code 0} true;
  $i50 := $sub.i32(0, 1);
  goto $bb3;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3655, 6} true;
  assume {:verifier.code 0} true;
  $p63 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3655, 23} true;
  assume {:verifier.code 0} true;
  $p64 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3655, 3} true;
  assume {:verifier.code 0} true;
  call xs($p63, $p64, 8, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3656, 6} true;
  assume {:verifier.code 0} true;
  $p65 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3656, 23} true;
  assume {:verifier.code 0} true;
  $p66 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3656, 3} true;
  assume {:verifier.code 0} true;
  call xs($p65, $p66, 16, 16);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3657, 9} true;
  assume {:verifier.code 0} true;
  $p67 := $add.ref($p0, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3657, 15} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p67, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3658, 9} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($p0, 204);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3658, 18} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p68, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3659, 9} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($p0, 200);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3659, 12} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p69, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3660, 9} true;
  assume {:verifier.code 0} true;
  call $i70 := pt_ready_wait($p0, 60);
  // WARNING: %79 = call i32 @pt_ready_wait(%struct.pt_unit* %0, i32 60), !dbg !3809, !verifier.code !3662
  call {:cexpr "tmp"} boogie_si_record_i32($i70);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3661, 11} true;
  assume {:verifier.code 0} true;
  $i71 := $eq.i32($i70, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3661, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i71} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i71 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3662, 25} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($p0, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3662, 25} true;
  assume {:verifier.code 0} true;
  $i73 := $load.i32($M.8, $p72);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3662, 31} true;
  assume {:verifier.code 0} true;
  $i74 := $or.i32($i73, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3662, 11} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($p0, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3662, 17} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p75, $i74);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3663, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume !(($i71 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3666, 28} true;
  assume {:verifier.code 0} true;
  $p76 := $bitcast.ref.ref($p5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3666, 52} true;
  assume {:verifier.code 0} true;
  $p77 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3666, 13} true;
  assume {:verifier.code 0} true;
  call $i78 := pt_atapi($p0, $p76, 36, $p77, .str.16);
  // WARNING: %90 = call i32 @pt_atapi(%struct.pt_unit* %0, i8* %88, i32 36, i8* %89, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i32 0, i32 0)), !dbg !3823, !verifier.code !3662
  call {:cexpr "tmp___0"} boogie_si_record_i32($i78);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3667, 15} true;
  assume {:verifier.code 0} true;
  $i79 := $eq.i32($i78, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3667, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i79} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i79 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3668, 15} true;
  assume {:verifier.code 0} true;
  $p80 := $add.ref($p7, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3668, 15} true;
  assume {:verifier.code 0} true;
  $i81 := $load.i8($M.8, $p80);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3668, 9} true;
  assume {:verifier.code 0} true;
  $i82 := $sext.i8.i32($i81);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3668, 22} true;
  assume {:verifier.code 0} true;
  $i83 := $sge.i32($i82, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3668, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i83} true;
  goto $bb16, $bb17;
$bb15:
  assume !(($i79 == 1));
  assume {:verifier.code 0} true;
  goto $bb19;
$bb16:
  assume ($i83 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3669, 27} true;
  assume {:verifier.code 0} true;
  $p84 := $add.ref($p0, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3669, 27} true;
  assume {:verifier.code 0} true;
  $i85 := $load.i32($M.8, $p84);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3669, 33} true;
  assume {:verifier.code 0} true;
  $i86 := $or.i32($i85, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3669, 13} true;
  assume {:verifier.code 0} true;
  $p87 := $add.ref($p0, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3669, 19} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p87, $i86);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3670, 5} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb17:
  assume !(($i83 == 1));
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3673, 19} true;
  assume {:verifier.code 0} true;
  $p88 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3673, 16} true;
  assume {:verifier.code 0} true;
  call $i89 := xn($p88, 10, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3673, 11} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($p0, 200);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3673, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p90, $i89);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3674, 3} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3677, 28} true;
  assume {:verifier.code 0} true;
  $p91 := $bitcast.ref.ref($p6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3677, 52} true;
  assume {:verifier.code 0} true;
  $p92 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3677, 13} true;
  assume {:verifier.code 0} true;
  call $i93 := pt_atapi($p0, $p91, 36, $p92, .str.17);
  // WARNING: %111 = call i32 @pt_atapi(%struct.pt_unit* %0, i8* %109, i32 36, i8* %110, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i32 0, i32 0)), !dbg !3848, !verifier.code !3662
  call {:cexpr "tmp___1"} boogie_si_record_i32($i93);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3678, 15} true;
  assume {:verifier.code 0} true;
  $i94 := $eq.i32($i93, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3678, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i94} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i94 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3679, 25} true;
  assume {:verifier.code 0} true;
  $p95 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3679, 22} true;
  assume {:verifier.code 0} true;
  call $i96 := xn($p95, 24, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3679, 11} true;
  assume {:verifier.code 0} true;
  $p97 := $add.ref($p0, 204);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3679, 20} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p97, $i96);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3680, 3} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb21:
  assume !(($i94 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3683, 44} true;
  assume {:verifier.code 0} true;
  $p98 := $add.ref($p0, 224);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3683, 27} true;
  assume {:verifier.code 0} true;
  $p99 := $bitcast.ref.ref($p98);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3683, 51} true;
  assume {:verifier.code 0} true;
  $p100 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3683, 67} true;
  assume {:verifier.code 0} true;
  $p101 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3684, 19} true;
  assume {:verifier.code 0} true;
  $p102 := $add.ref($p0, 192);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3684, 19} true;
  assume {:verifier.code 0} true;
  $i103 := $load.i32($M.8, $p102);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3684, 10} true;
  assume {:verifier.code 0} true;
  $i104 := $sext.i32.i64($i103);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3684, 10} true;
  assume {:verifier.code 0} true;
  $p105 := $add.ref($p1, $mul.ref($i104, 8));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3684, 10} true;
  assume {:verifier.code 0} true;
  $p106 := $load.ref($M.12, $p105);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3683, 3} true;
  assume {:verifier.code 0} true;
  call $i107 := printk.ref.ref.ref.ref.ref(.str.18, $p99, $p100, $p101, $p106);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3685, 14} true;
  assume {:verifier.code 0} true;
  $p108 := $add.ref($p0, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3685, 14} true;
  assume {:verifier.code 0} true;
  $i109 := $load.i32($M.8, $p108);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3685, 20} true;
  assume {:verifier.code 0} true;
  $i110 := $and.i32($i109, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3685, 25} true;
  assume {:verifier.code 0} true;
  $i111 := $eq.i32($i110, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3685, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i111} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i111 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3686, 5} true;
  assume {:verifier.code 0} true;
  call $i112 := printk.ref(.str.19);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3687, 3} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb24:
  assume !(($i111 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3688, 16} true;
  assume {:verifier.code 0} true;
  $p113 := $add.ref($p0, 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3688, 16} true;
  assume {:verifier.code 0} true;
  $i114 := $load.i32($M.8, $p113);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3688, 22} true;
  assume {:verifier.code 0} true;
  $i115 := $and.i32($i114, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3688, 27} true;
  assume {:verifier.code 0} true;
  $i116 := $eq.i32($i115, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3688, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i116} true;
  goto $bb26, $bb27;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3695, 3} true;
  assume {:verifier.code 0} true;
  $i50 := 0;
  goto $bb3;
$bb26:
  assume ($i116 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3689, 7} true;
  assume {:verifier.code 0} true;
  call $i117 := printk.ref(.str.20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3690, 5} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume !(($i116 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3693, 45} true;
  assume {:verifier.code 0} true;
  $p118 := $add.ref($p0, 200);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3693, 45} true;
  assume {:verifier.code 0} true;
  $i119 := $load.i32($M.8, $p118);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3693, 55} true;
  assume {:verifier.code 0} true;
  $p120 := $add.ref($p0, 204);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3693, 55} true;
  assume {:verifier.code 0} true;
  $i121 := $load.i32($M.8, $p120);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3693, 64} true;
  assume {:verifier.code 0} true;
  $i122 := $sdiv.i32($i121, 1024);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3693, 5} true;
  assume {:verifier.code 0} true;
  call $i123 := printk.ref.i32.i32(.str.21, $i119, $i122);
  assume {:verifier.code 0} true;
  goto $bb25;
}
const kmalloc: ref;
axiom (kmalloc == $sub.ref(0, 143829));
procedure  kmalloc($i0: i64, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !5627, metadata !3661), !dbg !5628, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2923, 13} true;
  assume {:verifier.code 0} true;
  call $p2 := __kmalloc($i0, $i1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2924, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const ldv_mutex_unlock_10: ref;
axiom (ldv_mutex_unlock_10 == $sub.ref(0, 144861));
procedure  ldv_mutex_unlock_10($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4663, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_pt_mutex($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4664, 3} true;
  assume {:verifier.code 0} true;
  call mutex_unlock($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4665, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_mutex_unlock_11: ref;
axiom (ldv_mutex_unlock_11 == $sub.ref(0, 145893));
procedure  ldv_mutex_unlock_11($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4673, 3} true;
  assume {:verifier.code 0} true;
  call ldv_mutex_unlock_pt_mutex($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4674, 3} true;
  assume {:verifier.code 0} true;
  call mutex_unlock($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 4675, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __kmalloc: ref;
axiom (__kmalloc == $sub.ref(0, 146925));
procedure  __kmalloc($i0: i64, $i1: i32)
  returns ($r: ref);
const xs: ref;
axiom (xs == $sub.ref(0, 147957));
procedure  xs($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $i4: i1;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i34: i32;
  var $i35: i32;
  var $i5: i32;
  var $i6: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !5655, metadata !3661), !dbg !5656, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i32 %2, i64 0, metadata !5657, metadata !3661), !dbg !5658, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !5659, metadata !3661), !dbg !5660, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !5661, metadata !3661), !dbg !5662, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !5663, metadata !3661), !dbg !5664, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3546, 9} true;
  assume {:verifier.code 0} true;
  $i4 := $slt.i32(0, $i3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3546, 7} true;
  assume {:verifier.code 0} true;
  $i5, $i6 := 0, 0;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3546, 7} true;
  assume {:verifier.code 0} true;
  $i7, $i8, $i9 := 0, 0, 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3546, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i4 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb4:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3547, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3535, 55} true;
  assume {:verifier.code 0} true;
  $i10 := $add.i32($i8, $i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3535, 36} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i32.i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3535, 34} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p0, $mul.ref($i11, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3535, 28} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i8($M.8, $p12);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3535, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.i8.i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3535, 65} true;
  assume {:verifier.code 0} true;
  $i15 := $ne.i32($i14, 32);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3535, 71} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb6, $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3535, 71} true;
  assume {:verifier.code 0} true;
  assume ($i15 == 1);
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3537, 11} true;
  assume {:verifier.code 0} true;
  $i22 := $add.i32($i9, 1);
  // WARNING: %21 = add nsw i32 %.134, 1, !dbg !3700, !verifier.code !3665
  call {:cexpr "j"} boogie_si_record_i32($i22);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3538, 42} true;
  assume {:verifier.code 0} true;
  $i23 := $add.i32($i8, $i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3538, 23} true;
  assume {:verifier.code 0} true;
  $i24 := $sext.i32.i64($i23);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3538, 21} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p0, $mul.ref($i24, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3538, 15} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i8($M.8, $p25);
  // WARNING: %25 = load i8, i8* %24, align 1, !dbg !3705, !verifier.code !3665
  call {:cexpr "tmp___0"} boogie_si_record_i8($i26);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3539, 14} true;
  assume {:verifier.code 0} true;
  $i27 := $sext.i32.i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3539, 12} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p1, $mul.ref($i27, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3539, 35} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p28, $i26);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3540, 9} true;
  assume {:verifier.code 0} true;
  $i29 := $sext.i8.i32($i26);
  // WARNING: %28 = sext i8 %25 to i32, !dbg !3711, !verifier.code !3665
  call {:cexpr "l"} boogie_si_record_i32($i29);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3541, 3} true;
  assume {:verifier.code 0} true;
  $i30, $i31 := $i22, $i29;
  goto $bb11;
$bb8:
  assume !(($i15 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3535, 107} true;
  assume {:verifier.code 0} true;
  $i16 := $add.i32($i8, $i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3535, 88} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.i32.i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3535, 86} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p0, $mul.ref($i17, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3535, 80} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i8($M.8, $p18);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3535, 74} true;
  assume {:verifier.code 0} true;
  $i20 := $sext.i8.i32($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3535, 116} true;
  assume {:verifier.code 0} true;
  $i21 := $ne.i32($i20, $i7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3535, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb9, $bb10;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3535, 7} true;
  assume {:verifier.code 0} true;
  assume ($i21 == 1);
  goto $bb7;
$bb10:
  assume !(($i21 == 1));
  assume {:verifier.code 0} true;
  $i30, $i31 := $i9, $i7;
  goto $bb11;
$bb11:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3544, 9} true;
  assume {:verifier.code 0} true;
  $i32 := $add.i32($i8, 1);
  // WARNING: %31 = add nsw i32 %.015, 1, !dbg !3713, !verifier.code !3665
  call {:cexpr "k"} boogie_si_record_i32($i32);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3546, 9} true;
  assume {:verifier.code 0} true;
  $i33 := $slt.i32($i32, $i3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3546, 7} true;
  assume {:verifier.code 0} true;
  $i7, $i8, $i9, $i34, $i35 := $i31, $i32, $i30, $i30, $i31;
  assume {:branchcond $i33} true;
  goto $bb12, $bb13;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3546, 7} true;
  assume {:verifier.code 0} true;
  assume ($i33 == 1);
  goto $bb4;
$bb13:
  assume !(($i33 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3546, 7} true;
  assume {:verifier.code 0} true;
  $i5, $i6 := $i34, $i35;
  goto $bb3;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3552, 9} true;
  assume {:verifier.code 0} true;
  $i36 := $eq.i32($i6, 32);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3552, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb15, $bb16;
$bb15:
  assume ($i36 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3553, 11} true;
  assume {:verifier.code 0} true;
  $i37 := $sub.i32($i5, 1);
  // WARNING: %38 = sub nsw i32 %.13.lcssa, 1, !dbg !3719, !verifier.code !3665
  call {:cexpr "j"} boogie_si_record_i32($i37);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3554, 3} true;
  assume {:verifier.code 0} true;
  $i38 := $i37;
  goto $bb17;
$bb16:
  assume !(($i36 == 1));
  assume {:verifier.code 0} true;
  $i38 := $i5;
  goto $bb17;
$bb17:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3557, 12} true;
  assume {:verifier.code 0} true;
  $i39 := $sext.i32.i64($i38);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3557, 10} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p1, $mul.ref($i39, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3557, 31} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p40, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3558, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const pt_ready_wait: ref;
axiom (pt_ready_wait == $sub.ref(0, 148989));
procedure  pt_ready_wait($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i16: i32;
  var $i28: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata %struct.pt_unit* %0, i64 0, metadata !5718, metadata !3661), !dbg !5719, !verifier.code !3663
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3481, 3} true;
  assume {:verifier.code 0} true;
  $p3 := $p2;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3481, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p3, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3482, 3} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p2, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3482, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p4, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3483, 3} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p2, 2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3483, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p5, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3484, 3} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p2, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3484, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p6, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3485, 3} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p2, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3485, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p7, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3486, 3} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p2, 5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3486, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p8, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3487, 3} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p2, 6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3487, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p9, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3488, 3} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p2, 7);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3488, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p10, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3489, 3} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p2, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3489, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p11, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3490, 3} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p2, 9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3490, 13} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p12, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3491, 3} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p2, 10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3491, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p13, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3492, 3} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p2, 11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3492, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i8($M.8, $p14, 0);
  // WARNING: store i8 0, i8* %15, align 1, !dbg !3695, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3512, 9} true;
  assume {:verifier.code 0} true;
  $i15 := $slt.i32(0, $i1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3512, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i15 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3512, 7} true;
  assume {:verifier.code 0} true;
  $i16 := 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3512, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i15 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb18;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3513, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3496, 9} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p0, 188);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3496, 20} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p17, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3497, 18} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3497, 50} true;
  assume {:verifier.code 0} true;
  $i19 := $M.10;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3497, 50} true;
  assume {:verifier.code 0} true;
  $i20 := $trunc.i8.i1($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3497, 44} true;
  assume {:verifier.code 0} true;
  $i21 := $zext.i1.i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3497, 58} true;
  assume {:verifier.code 0} true;
  $i22 := $sgt.i32($i21, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3497, 44} true;
  assume {:verifier.code 0} true;
  havoc $p23;
  assume ((($i22 == 1) ==> ($p23 == .str.30)) && (($i22 != 1) ==> ($p23 == $0.ref)));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3497, 3} true;
  assume {:verifier.code 0} true;
  call $i24 := pt_atapi($p0, $p18, 0, $0.ref, $p23);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3498, 13} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p0, 188);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3498, 13} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i32($M.8, $p25);
  // WARNING: %27 = load i32, i32* %26, align 4, !dbg !3708, !verifier.code !3662
  call {:cexpr "p"} boogie_si_record_i32($i26);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3499, 9} true;
  assume {:verifier.code 0} true;
  $i27 := $eq.i32($i26, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3499, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i27 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3500, 5} true;
  assume {:verifier.code 0} true;
  $i28 := 0;
  goto $bb8;
$bb7:
  assume !(($i27 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3520, 1} true;
  assume {:verifier.code 0} true;
  $r := $i28;
  $exn := false;
  return;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3504, 10} true;
  assume {:verifier.code 0} true;
  $i29 := $and.i32($i26, 65535);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3504, 19} true;
  assume {:verifier.code 0} true;
  $i30 := $ne.i32($i29, 1026);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3504, 27} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i30 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3504, 33} true;
  assume {:verifier.code 0} true;
  $i31 := $and.i32($i26, 255);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3504, 40} true;
  assume {:verifier.code 0} true;
  $i32 := $ne.i32($i31, 6);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3504, 7} true;
  assume {:verifier.code 0} true;
  $i33 := $i26;
  assume {:branchcond $i32} true;
  goto $bb13, $bb14;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3504, 27} true;
  assume {:verifier.code 0} true;
  assume !(($i30 == 1));
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  goto $bb15;
$bb13:
  assume ($i32 == 1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3505, 5} true;
  assume {:verifier.code 0} true;
  $i28 := $i33;
  goto $bb8;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3504, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i32 == 1));
  goto $bb12;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3509, 9} true;
  assume {:verifier.code 0} true;
  $i34 := $add.i32($i16, 1);
  // WARNING: %40 = add nsw i32 %.013, 1, !dbg !3726, !verifier.code !3662
  call {:cexpr "k"} boogie_si_record_i32($i34);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3510, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(250);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3512, 9} true;
  assume {:verifier.code 0} true;
  $i35 := $slt.i32($i34, $i1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3512, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $i34;
  assume {:branchcond $i35} true;
  goto $bb16, $bb17;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3512, 7} true;
  assume {:verifier.code 0} true;
  assume ($i35 == 1);
  goto $bb4;
$bb17:
  assume !(($i35 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3512, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3518, 3} true;
  assume {:verifier.code 0} true;
  $i28 := 32;
  goto $bb8;
}
const xn: ref;
axiom (xn == $sub.ref(0, 150021));
procedure  xn($p0: ref, $i1: i32, $i2: i32)
  returns ($r: i32)
{
  var $i3: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i5: i32;
  var $i6: i32;
  var $i17: i32;
  var $i4: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %0, i64 0, metadata !5788, metadata !3661), !dbg !5789, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !5790, metadata !3661), !dbg !5791, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i32 %2, i64 0, metadata !5792, metadata !3661), !dbg !5793, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !5794, metadata !3661), !dbg !5795, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3574, 9} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.i32(0, $i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3574, 7} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3574, 7} true;
  assume {:verifier.code 0} true;
  $i5, $i6 := 0, 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3574, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb4:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3575, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3571, 9} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.i32($i6, 256);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3571, 51} true;
  assume {:verifier.code 0} true;
  $i8 := $add.i32($i5, $i1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3571, 32} true;
  assume {:verifier.code 0} true;
  $i9 := $sext.i32.i64($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3571, 30} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p0, $mul.ref($i9, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3571, 24} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i8($M.8, $p10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3571, 18} true;
  assume {:verifier.code 0} true;
  $i12 := $sext.i8.i32($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3571, 60} true;
  assume {:verifier.code 0} true;
  $i13 := $and.i32($i12, 255);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3571, 15} true;
  assume {:verifier.code 0} true;
  $i14 := $add.i32($i7, $i13);
  // WARNING: %13 = add nsw i32 %6, %12, !dbg !3685, !verifier.code !3665
  call {:cexpr "v"} boogie_si_record_i32($i14);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3572, 9} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i32($i5, 1);
  // WARNING: %14 = add nsw i32 %.03, 1, !dbg !3686, !verifier.code !3665
  call {:cexpr "k"} boogie_si_record_i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3574, 9} true;
  assume {:verifier.code 0} true;
  $i16 := $slt.i32($i15, $i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3574, 7} true;
  assume {:verifier.code 0} true;
  $i5, $i6, $i17 := $i15, $i14, $i14;
  assume {:branchcond $i16} true;
  goto $bb6, $bb7;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3574, 7} true;
  assume {:verifier.code 0} true;
  assume ($i16 == 1);
  goto $bb4;
$bb7:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3574, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $i17;
  goto $bb3;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3580, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const pt_detect: ref;
axiom (pt_detect == $sub.ref(0, 151053));
procedure  pt_detect()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i8;
  var $i63: i1;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $p74: ref;
  var $p75: ref;
  var $i73: i32;
  var $i76: i32;
  var $i32: i32;
  var $i33: i32;
  var $i77: i32;
  var $i78: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i1;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $p96: ref;
  var $p97: ref;
  var $i95: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p102: ref;
  var $i103: i32;
  var $i101: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !5815, metadata !3661), !dbg !5816, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3752, 43} true;
  assume {:verifier.code 0} true;
  $p0 := $M.7;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3752, 49} true;
  assume {:verifier.code 0} true;
  $p1 := $M.7;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3752, 71} true;
  assume {:verifier.code 0} true;
  $i2 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3752, 3} true;
  assume {:verifier.code 0} true;
  call $i3 := printk.ref.ref.ref.ref.i32(.str.4, $p0, $p1, .str.5, $i2);
  // WARNING: %4 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i32 0, i32 0), i8* %1, i8* %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %3), !dbg !3670, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !5815, metadata !3661), !dbg !5816, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3789, 7} true;
  assume {:verifier.code 0} true;
  $i4, $i5, $i6 := 0, 0, 0;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3790, 5} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3757, 41} true;
  assume {:verifier.code 0} true;
  $i7 := $sext.i32.i64($i4);
  $p8 := $add.ref(pt, $mul.ref($i7, 232));
  $p9 := $add.ref(pt, $mul.ref($i7, 232));
  $p10 := $add.ref($add.ref(pt, $mul.ref($i7, 232)), 176);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3758, 16} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p10, $p9);
  $p11 := $add.ref($add.ref(pt, $mul.ref($i7, 232)), 196);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3759, 3} true;
  assume {:verifier.code 0} true;
  call atomic_set($p11, 1);
  $p12 := $add.ref($add.ref(pt, $mul.ref($i7, 232)), 184);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3760, 19} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p12, 0);
  $p13 := $add.ref($add.ref(pt, $mul.ref($i7, 232)), 188);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3761, 24} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p13, 0);
  $p14 := $add.ref($add.ref(pt, $mul.ref($i7, 232)), 208);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3762, 21} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p14, 0);
  $p15 := $add.ref($add.ref(pt, $mul.ref($i7, 232)), 216);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3763, 20} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p15, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3764, 24} true;
  assume {:verifier.code 0} true;
  $i16 := $sext.i32.i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3764, 24} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref(drives, $mul.ref($i16, 8));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3764, 24} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.13, $p17);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3764, 21} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p18, 16);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3764, 21} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i32($M.14, $p19);
  $p21 := $add.ref($add.ref(pt, $mul.ref($i7, 232)), 192);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3764, 19} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p21, $i20);
  $p22 := $add.ref($add.ref(pt, $mul.ref($i7, 232)), 224);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3765, 12} true;
  assume {:verifier.code 0} true;
  $p23 := $bitcast.ref.ref($p22);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3765, 53} true;
  assume {:verifier.code 0} true;
  $p24 := $M.7;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3765, 3} true;
  assume {:verifier.code 0} true;
  call $i25 := snprintf.ref.i64.ref.ref.i32($p23, 8, .str.6, $p24, $i4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3766, 10} true;
  assume {:verifier.code 0} true;
  $i26 := $sext.i32.i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3766, 10} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref(drives, $mul.ref($i26, 8));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3766, 10} true;
  assume {:verifier.code 0} true;
  $p28 := $load.ref($M.13, $p27);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3766, 7} true;
  assume {:verifier.code 0} true;
  $p29 := $p28;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3766, 7} true;
  assume {:verifier.code 0} true;
  $i30 := $load.i32($M.14, $p29);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3766, 28} true;
  assume {:verifier.code 0} true;
  $i31 := $eq.i32($i30, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3766, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i31 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3767, 5} true;
  assume {:verifier.code 0} true;
  $i32, $i33 := $i6, $i5;
  goto $bb5;
$bb4:
  assume !(($i31 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3787, 15} true;
  assume {:verifier.code 0} true;
  $i77 := $add.i32($i4, 1);
  // WARNING: %82 = add nsw i32 %.017, 1, !dbg !3734, !verifier.code !3663
  call {:cexpr "unit"} boogie_si_record_i32($i77);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3789, 12} true;
  assume {:verifier.code 0} true;
  $i78 := $sle.i32($i77, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3789, 7} true;
  assume {:verifier.code 0} true;
  $i4, $i5, $i6, $i79, $i80 := $i77, $i33, $i32, $i32, $i33;
  assume {:branchcond $i78} true;
  goto $bb13, $bb14;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3771, 25} true;
  assume {:verifier.code 0} true;
  $i34 := $add.i32($i5, 1);
  // WARNING: %34 = add nsw i32 %.16, 1, !dbg !3696, !verifier.code !3663
  call {:cexpr "specified"} boogie_si_record_i32($i34);
  $p35 := $add.ref($add.ref(pt, $mul.ref($i7, 232)), 176);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 31} true;
  assume {:verifier.code 0} true;
  $p36 := $load.ref($M.8, $p35);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 41} true;
  assume {:verifier.code 0} true;
  $i37 := $sext.i32.i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 41} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref(drives, $mul.ref($i37, 8));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 41} true;
  assume {:verifier.code 0} true;
  $p39 := $load.ref($M.13, $p38);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 38} true;
  assume {:verifier.code 0} true;
  $p40 := $p39;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 38} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i32($M.14, $p40);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 63} true;
  assume {:verifier.code 0} true;
  $i42 := $sext.i32.i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 63} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref(drives, $mul.ref($i42, 8));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 63} true;
  assume {:verifier.code 0} true;
  $p44 := $load.ref($M.13, $p43);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 60} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($p44, 12);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 60} true;
  assume {:verifier.code 0} true;
  $i46 := $load.i32($M.14, $p45);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 85} true;
  assume {:verifier.code 0} true;
  $i47 := $sext.i32.i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 85} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref(drives, $mul.ref($i47, 8));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 85} true;
  assume {:verifier.code 0} true;
  $p49 := $load.ref($M.13, $p48);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 82} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($p49, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 82} true;
  assume {:verifier.code 0} true;
  $i51 := $load.i32($M.14, $p50);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3773, 24} true;
  assume {:verifier.code 0} true;
  $i52 := $sext.i32.i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3773, 24} true;
  assume {:verifier.code 0} true;
  $p53 := $add.ref(drives, $mul.ref($i52, 8));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3773, 24} true;
  assume {:verifier.code 0} true;
  $p54 := $load.ref($M.13, $p53);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3773, 21} true;
  assume {:verifier.code 0} true;
  $p55 := $add.ref($p54, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3773, 21} true;
  assume {:verifier.code 0} true;
  $i56 := $load.i32($M.14, $p55);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3773, 46} true;
  assume {:verifier.code 0} true;
  $i57 := $sext.i32.i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3773, 46} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref(drives, $mul.ref($i57, 8));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3773, 46} true;
  assume {:verifier.code 0} true;
  $p59 := $load.ref($M.13, $p58);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3773, 43} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($p59, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3773, 43} true;
  assume {:verifier.code 0} true;
  $i61 := $load.i32($M.14, $p60);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3774, 30} true;
  assume {:verifier.code 0} true;
  $i62 := $M.10;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3774, 30} true;
  assume {:verifier.code 0} true;
  $i63 := $trunc.i8.i1($i62);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3774, 24} true;
  assume {:verifier.code 0} true;
  $i64 := $zext.i1.i32($i63);
  $p65 := $add.ref($add.ref(pt, $mul.ref($i7, 232)), 224);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3774, 39} true;
  assume {:verifier.code 0} true;
  $p66 := $bitcast.ref.ref($p65);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3772, 13} true;
  assume {:verifier.code 0} true;
  call $i67 := pi_init($p36, 0, $i41, $i46, $i51, $i56, $i61, pt_scratch, 3, $i64, $p66);
  // WARNING: %67 = call i32 @pi_init(%struct.pi_adapter* %36, i32 0, i32 %41, i32 %46, i32 %51, i32 %56, i32 %61, i8* getelementptr inbounds ([512 x i8], [512 x i8]* @pt_scratch, i32 0, i32 0), i32 3, i32 %64, i8* %66), !dbg !3711, !verifier.code !3663
  call {:cexpr "tmp___0"} boogie_si_record_i32($i67);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3775, 15} true;
  assume {:verifier.code 0} true;
  $i68 := $ne.i32($i67, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3775, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i68 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3776, 11} true;
  assume {:verifier.code 0} true;
  call $i69 := pt_probe($p8);
  // WARNING: %70 = call i32 @pt_probe(%struct.pt_unit* %7), !dbg !3717, !verifier.code !3663
  call {:cexpr "tmp"} boogie_si_record_i32($i69);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3777, 13} true;
  assume {:verifier.code 0} true;
  $i70 := $eq.i32($i69, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3777, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i70} true;
  goto $bb9, $bb10;
$bb8:
  assume !(($i68 == 1));
  assume {:verifier.code 0} true;
  $i76 := $i6;
  goto $bb12;
$bb9:
  assume ($i70 == 1);
  $p71 := $add.ref($add.ref(pt, $mul.ref($i7, 232)), 208);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3778, 25} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p71, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3779, 21} true;
  assume {:verifier.code 0} true;
  $i72 := $add.i32($i6, 1);
  // WARNING: %74 = add nsw i32 %.35, 1, !dbg !3726, !verifier.code !3663
  call {:cexpr "found"} boogie_si_record_i32($i72);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3780, 5} true;
  assume {:verifier.code 0} true;
  $i73 := $i72;
  goto $bb11;
$bb10:
  assume !(($i70 == 1));
  $p74 := $add.ref($add.ref(pt, $mul.ref($i7, 232)), 176);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3781, 28} true;
  assume {:verifier.code 0} true;
  $p75 := $load.ref($M.8, $p74);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3781, 7} true;
  assume {:verifier.code 0} true;
  call pi_release($p75);
  assume {:verifier.code 0} true;
  $i73 := $i6;
  goto $bb11;
$bb11:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3783, 3} true;
  assume {:verifier.code 0} true;
  $i76 := $i73;
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3775, 18} true;
  assume {:verifier.code 0} true;
  $i32, $i33 := $i76, $i34;
  goto $bb5;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3789, 7} true;
  assume {:verifier.code 0} true;
  assume ($i78 == 1);
  goto $bb1;
$bb14:
  assume !(($i78 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3795, 17} true;
  assume {:verifier.code 0} true;
  $i81 := $eq.i32($i80, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3795, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i81} true;
  goto $bb16, $bb17;
$bb16:
  assume ($i81 == 1);
  $p82 := $add.ref(pt, 176);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3797, 29} true;
  assume {:verifier.code 0} true;
  $p83 := $load.ref($M.8, $p82);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3798, 29} true;
  assume {:verifier.code 0} true;
  $i84 := $M.10;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3798, 29} true;
  assume {:verifier.code 0} true;
  $i85 := $trunc.i8.i1($i84);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3798, 23} true;
  assume {:verifier.code 0} true;
  $i86 := $zext.i1.i32($i85);
  $p87 := $add.ref(pt, 224);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3798, 38} true;
  assume {:verifier.code 0} true;
  $p88 := $bitcast.ref.ref($p87);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3797, 15} true;
  assume {:verifier.code 0} true;
  call $i89 := pi_init($p83, 1, $sub.i32(0, 1), $sub.i32(0, 1), $sub.i32(0, 1), $sub.i32(0, 1), $sub.i32(0, 1), pt_scratch, 3, $i86, $p88);
  // WARNING: %96 = call i32 @pi_init(%struct.pi_adapter* %90, i32 1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i8* getelementptr inbounds ([512 x i8], [512 x i8]* @pt_scratch, i32 0, i32 0), i32 3, i32 %93, i8* %95), !dbg !3749, !verifier.code !3663
  call {:cexpr "tmp___2"} boogie_si_record_i32($i89);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3799, 17} true;
  assume {:verifier.code 0} true;
  $i90 := $ne.i32($i89, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3799, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i90} true;
  goto $bb18, $bb19;
$bb17:
  assume !(($i81 == 1));
  assume {:verifier.code 0} true;
  $i99 := $i79;
  goto $bb24;
$bb18:
  assume ($i90 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3800, 17} true;
  assume {:verifier.code 0} true;
  call $i91 := pt_probe(pt);
  // WARNING: %99 = call i32 @pt_probe(%struct.pt_unit* getelementptr inbounds ([4 x %struct.pt_unit], [4 x %struct.pt_unit]* @pt, i32 0, i32 0)), !dbg !3755, !verifier.code !3663
  call {:cexpr "tmp___1"} boogie_si_record_i32($i91);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3801, 19} true;
  assume {:verifier.code 0} true;
  $i92 := $eq.i32($i91, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3801, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i92} true;
  goto $bb20, $bb21;
$bb19:
  assume !(($i90 == 1));
  assume {:verifier.code 0} true;
  $i98 := $i79;
  goto $bb23;
$bb20:
  assume ($i92 == 1);
  $p93 := $add.ref(pt, 208);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3802, 23} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p93, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3803, 23} true;
  assume {:verifier.code 0} true;
  $i94 := $add.i32($i79, 1);
  // WARNING: %103 = add nsw i32 %.3.lcssa, 1, !dbg !3764, !verifier.code !3663
  call {:cexpr "found"} boogie_si_record_i32($i94);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3804, 7} true;
  assume {:verifier.code 0} true;
  $i95 := $i94;
  goto $bb22;
$bb21:
  assume !(($i92 == 1));
  $p96 := $add.ref(pt, 176);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3805, 26} true;
  assume {:verifier.code 0} true;
  $p97 := $load.ref($M.8, $p96);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3805, 9} true;
  assume {:verifier.code 0} true;
  call pi_release($p97);
  assume {:verifier.code 0} true;
  $i95 := $i79;
  goto $bb22;
$bb22:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3807, 5} true;
  assume {:verifier.code 0} true;
  $i98 := $i95;
  goto $bb23;
$bb23:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3810, 3} true;
  assume {:verifier.code 0} true;
  $i99 := $i98;
  goto $bb24;
$bb24:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3813, 13} true;
  assume {:verifier.code 0} true;
  $i100 := $ne.i32($i99, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3813, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i100} true;
  goto $bb25, $bb26;
$bb25:
  assume ($i100 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3814, 5} true;
  assume {:verifier.code 0} true;
  $i101 := 0;
  goto $bb27;
$bb26:
  assume !(($i100 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3821, 1} true;
  assume {:verifier.code 0} true;
  $r := $i101;
  $exn := false;
  return;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3818, 48} true;
  assume {:verifier.code 0} true;
  $p102 := $M.7;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3818, 3} true;
  assume {:verifier.code 0} true;
  call $i103 := printk.ref.ref(.str.7, $p102);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3819, 3} true;
  assume {:verifier.code 0} true;
  $i101 := $sub.i32(0, 1);
  goto $bb27;
}
const register_chrdev: ref;
axiom (register_chrdev == $sub.ref(0, 152085));
procedure  register_chrdev($i0: i32, $p1: ref, $p2: ref)
  returns ($r: i32)
{
  var $i3: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2901, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := __register_chrdev($i0, 0, 256, $p1, $p2);
  // WARNING: %4 = call i32 @__register_chrdev(i32 %0, i32 0, i32 256, i8* %1, %struct.file_operations* %2), !dbg !3670, !verifier.code !3665
  call {:cexpr "tmp"} boogie_si_record_i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2902, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const __class_create: ref;
axiom (__class_create == $sub.ref(0, 153117));
procedure  __class_create($p0: ref, $p1: ref, $p2: ref)
  returns ($r: ref);
const IS_ERR: ref;
axiom (IS_ERR == $sub.ref(0, 154149));
procedure  IS_ERR($p0: ref)
  returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2803, 29} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2803, 49} true;
  assume {:verifier.code 0} true;
  $i2 := $ugt.i64($i1, 18446744073709547520);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2803, 49} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2803, 29} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2803, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := ldv__builtin_expect($i4, 0);
  // WARNING: %6 = call i64 @ldv__builtin_expect(i64 %5, i64 0), !dbg !3669, !verifier.code !3665
  call {:cexpr "tmp"} boogie_si_record_i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2804, 3} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const PTR_ERR: ref;
axiom (PTR_ERR == $sub.ref(0, 155181));
procedure  PTR_ERR($p0: ref)
  returns ($r: i64)
{
  var $i1: i64;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2795, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2795, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const device_create: ref;
axiom (device_create == $sub.ref(0, 156213));
procedure  device_create.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: i32)
  returns ($r: ref);
const __register_chrdev: ref;
axiom (__register_chrdev == $sub.ref(0, 157245));
procedure  __register_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref)
  returns ($r: i32);
const atomic_set: ref;
axiom (atomic_set == $sub.ref(0, 158277));
procedure  atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.__anonstruct_atomic_t_6* %0, i64 0, metadata !5968, metadata !3661), !dbg !5969, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2820, 6} true;
  assume {:verifier.code 0} true;
  $p2 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2820, 14} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p2, $i1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 2821, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const snprintf: ref;
axiom (snprintf == $sub.ref(0, 159309));
procedure  snprintf.ref.i64.ref.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: i32)
  returns ($r: i32);
const pi_init: ref;
axiom (pi_init == $sub.ref(0, 160341));
procedure  pi_init($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $p7: ref, $i8: i32, $i9: i32, $p10: ref)
  returns ($r: i32);
const pt_probe: ref;
axiom (pt_probe == $sub.ref(0, 161373));
procedure  pt_probe($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i11: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3706, 13} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 192);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3706, 13} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i32($M.8, $p1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3706, 19} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i2, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3706, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3707, 11} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 192);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3707, 17} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p4, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3719, 15} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 192);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3719, 15} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.8, $p5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3719, 21} true;
  assume {:verifier.code 0} true;
  $i7 := $sle.i32($i6, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3719, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3726, 15} true;
  assume {:verifier.code 0} true;
  call $i18 := pt_reset($p0);
  // WARNING: %27 = call i32 @pt_reset(%struct.pt_unit* %0), !dbg !3696, !verifier.code !3665
  call {:cexpr "tmp___2"} boogie_si_record_i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3727, 17} true;
  assume {:verifier.code 0} true;
  $i19 := $eq.i32($i18, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3727, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb16, $bb17;
$bb3:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3719, 9} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3719, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i7 == 1));
  goto $bb5;
$bb5:
  assume {:verifier.code 0} true;
  goto $bb14;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3720, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3710, 15} true;
  assume {:verifier.code 0} true;
  call $i8 := pt_reset($p0);
  // WARNING: %11 = call i32 @pt_reset(%struct.pt_unit* %0), !dbg !3678, !verifier.code !3665
  call {:cexpr "tmp___0"} boogie_si_record_i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3711, 17} true;
  assume {:verifier.code 0} true;
  $i9 := $eq.i32($i8, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3711, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3712, 13} true;
  assume {:verifier.code 0} true;
  call $i10 := pt_identify($p0);
  // WARNING: %14 = call i32 @pt_identify(%struct.pt_unit* %0), !dbg !3684, !verifier.code !3665
  call {:cexpr "tmp"} boogie_si_record_i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3713, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $i10;
  goto $bb10;
$bb9:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3736, 1} true;
  assume {:verifier.code 0} true;
  $r := $i11;
  $exn := false;
  return;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3717, 25} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p0, 192);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3717, 25} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.8, $p12);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3717, 31} true;
  assume {:verifier.code 0} true;
  $i14 := $add.i32($i13, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3717, 11} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p0, 192);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3717, 17} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.i32($M.8, $p15, $i14);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3719, 15} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.8, $p5);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3719, 21} true;
  assume {:verifier.code 0} true;
  $i17 := $sle.i32($i16, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3719, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb12, $bb13;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3719, 9} true;
  assume {:verifier.code 0} true;
  assume ($i17 == 1);
  goto $bb6;
$bb13:
  assume !(($i17 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3719, 9} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3725, 3} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3734, 3} true;
  assume {:verifier.code 0} true;
  $i11 := $sub.i32(0, 1);
  goto $bb10;
$bb16:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3728, 17} true;
  assume {:verifier.code 0} true;
  call $i20 := pt_identify($p0);
  // WARNING: %30 = call i32 @pt_identify(%struct.pt_unit* %0), !dbg !3703, !verifier.code !3665
  call {:cexpr "tmp___1"} boogie_si_record_i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3729, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $i20;
  goto $bb10;
$bb17:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:verifier.code 0} true;
  goto $bb15;
}
const pt_reset: ref;
axiom (pt_reset == $sub.ref(0, 162405));
procedure  pt_reset($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i14: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i33: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $i149: i32;
  var $i150: i32;
  var $i151: i1;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(20, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3403, 14} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 176);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3403, 14} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.8, $p2);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3404, 3} true;
  assume {:verifier.code 0} true;
  $p4 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3404, 13} true;
  assume {:verifier.code 0} true;
  $M.15 := $store.i32($M.15, $p4, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3405, 3} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3405, 13} true;
  assume {:verifier.code 0} true;
  $M.15 := $store.i32($M.15, $p5, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3406, 3} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3406, 13} true;
  assume {:verifier.code 0} true;
  $M.15 := $store.i32($M.15, $p6, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3407, 3} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p1, 12);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3407, 13} true;
  assume {:verifier.code 0} true;
  $M.15 := $store.i32($M.15, $p7, 20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3408, 3} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p1, 16);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3408, 13} true;
  assume {:verifier.code 0} true;
  $M.15 := $store.i32($M.15, $p8, 235);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3409, 3} true;
  assume {:verifier.code 0} true;
  call pi_connect($p3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3410, 9} true;
  assume {:verifier.code 0} true;
  call $i9 := DRIVE($p0);
  // WARNING: %10 = call zeroext i8 @DRIVE(%struct.pt_unit* %0), !dbg !3684, !verifier.code !3662
  call {:cexpr "tmp"} boogie_si_record_i8($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3411, 20} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i8.i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3411, 3} true;
  assume {:verifier.code 0} true;
  call write_reg($p3, 6, $i10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3412, 3} true;
  assume {:verifier.code 0} true;
  call write_reg($p3, 7, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3413, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(5);
  // WARNING: call void @pt_sleep(i32 5), !dbg !3690, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !6051, metadata !3661), !dbg !6052, !verifier.code !3663
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3421, 7} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i15 := status_reg($p3);
  // WARNING: %17 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  call {:cexpr "tmp___1"} boogie_si_record_i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i16 := $and.i32($i15, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i17 := $ne.i32($i16, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 1;
  assume {:branchcond $i17} true;
  goto $bb6, $bb7;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i11 := status_reg($p3);
  // WARNING: %13 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i12 := $and.i32($i11, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i32($i12, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 2;
  assume {:branchcond $i13} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i13 == 1));
  goto $bb5;
$bb5:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3426, 7} true;
  assume {:verifier.code 0} true;
  $i18 := $i14;
  goto $bb8;
$bb6:
  assume ($i17 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i17 == 1));
  goto $bb5;
$bb8:
  assume {:verifier.code 0} true;
  // WARNING: %24 = phi i32 [ 31, %22 ], [ %.lcssa3, %21 ], !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6072, metadata !3661), !dbg !6073, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3440, 7} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3421, 18} true;
  assume {:verifier.code 0} true;
  $i18 := 31;
  goto $bb8;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3441, 5} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3436, 13} true;
  assume {:verifier.code 0} true;
  call $i19 := read_reg($p3, 1);
  // WARNING: %26 = call i32 @read_reg(%struct.pi_adapter* %4, i32 1), !dbg !3717, !verifier.code !3662
  call {:cexpr "tmp___2"} boogie_si_record_i32($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 21} true;
  assume {:verifier.code 0} true;
  $p20 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 21} true;
  assume {:verifier.code 0} true;
  $i21 := $load.i32($M.15, $p20);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 18} true;
  assume {:verifier.code 0} true;
  $i22 := $eq.i32($i19, $i21);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 18} true;
  assume {:verifier.code 0} true;
  $i23 := $zext.i1.i32($i22);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 32} true;
  assume {:verifier.code 0} true;
  $i24 := $and.i32($i23, 1);
  // WARNING: %31 = and i32 %30, 1, !dbg !3722, !verifier.code !3662
  call {:cexpr "flg"} boogie_si_record_i32($i24);
  // WARNING: call void @llvm.dbg.value(metadata i32 %31, i64 0, metadata !6072, metadata !3661), !dbg !6073, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3441, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3436, 13} true;
  assume {:verifier.code 0} true;
  call $i45 := read_reg($p3, 2);
  // WARNING: %67 = call i32 @read_reg(%struct.pi_adapter* %4, i32 2), !dbg !3717, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 21} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 21} true;
  assume {:verifier.code 0} true;
  $i47 := $load.i32($M.15, $p46);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 18} true;
  assume {:verifier.code 0} true;
  $i48 := $eq.i32($i45, $i47);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 18} true;
  assume {:verifier.code 0} true;
  $i49 := $zext.i1.i32($i48);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 32} true;
  assume {:verifier.code 0} true;
  $i50 := $and.i32($i49, $i24);
  // WARNING: %72 = and i32 %71, %31, !dbg !3722, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 %31, i64 0, metadata !6072, metadata !3661), !dbg !6073, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3441, 5} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3446, 13} true;
  assume {:verifier.code 0} true;
  $i25 := $M.10;
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3446, 13} true;
  assume {:verifier.code 0} true;
  $i26 := $trunc.i8.i1($i25);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3446, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i26 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3447, 60} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p0, 224);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3447, 43} true;
  assume {:verifier.code 0} true;
  $p28 := $bitcast.ref.ref($p27);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3447, 5} true;
  assume {:verifier.code 0} true;
  call $i29 := printk.ref.ref.i32(.str.8, $p28, $i18);
  // WARNING: %39 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i32 0, i32 0), i8* %38, i32 %24), !dbg !3732, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3455, 9} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i26 == 1));
  assume {:verifier.code 0} true;
  goto $bb23;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3456, 7} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3451, 15} true;
  assume {:verifier.code 0} true;
  call $i30 := read_reg($p3, 1);
  // WARNING: %41 = call i32 @read_reg(%struct.pi_adapter* %4, i32 1), !dbg !3734, !verifier.code !3662
  call {:cexpr "tmp___3"} boogie_si_record_i32($i30);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3452, 5} true;
  assume {:verifier.code 0} true;
  call $i31 := printk.ref.i32(.str.9, $i30);
  // WARNING: %42 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %41), !dbg !3737, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3456, 7} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3451, 15} true;
  assume {:verifier.code 0} true;
  call $i37 := read_reg($p3, 2);
  // WARNING: %55 = call i32 @read_reg(%struct.pi_adapter* %4, i32 2), !dbg !3734, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3452, 5} true;
  assume {:verifier.code 0} true;
  call $i38 := printk.ref.i32(.str.9, $i37);
  // WARNING: %56 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %55), !dbg !3737, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3456, 7} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3461, 13} true;
  assume {:verifier.code 0} true;
  $i32 := $eq.i32($i33, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3461, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i32 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3462, 7} true;
  assume {:verifier.code 0} true;
  call $i34 := printk.ref(.str.10);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3463, 5} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb21:
  assume !(($i32 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3466, 5} true;
  assume {:verifier.code 0} true;
  call $i35 := printk.ref(.str.11);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3467, 3} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3470, 3} true;
  assume {:verifier.code 0} true;
  call pi_disconnect($p3);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3471, 15} true;
  assume {:verifier.code 0} true;
  $i36 := $add.i32($i33, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3471, 3} true;
  assume {:verifier.code 0} true;
  $r := $i36;
  $exn := false;
  return;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3451, 15} true;
  assume {:verifier.code 0} true;
  call $i39 := read_reg($p3, 3);
  // WARNING: %58 = call i32 @read_reg(%struct.pi_adapter* %4, i32 3), !dbg !3734, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3452, 5} true;
  assume {:verifier.code 0} true;
  call $i40 := printk.ref.i32(.str.9, $i39);
  // WARNING: %59 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %58), !dbg !3737, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3456, 7} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3451, 15} true;
  assume {:verifier.code 0} true;
  call $i41 := read_reg($p3, 4);
  // WARNING: %61 = call i32 @read_reg(%struct.pi_adapter* %4, i32 4), !dbg !3734, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3452, 5} true;
  assume {:verifier.code 0} true;
  call $i42 := printk.ref.i32(.str.9, $i41);
  // WARNING: %62 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %61), !dbg !3737, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3456, 7} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb26:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3451, 15} true;
  assume {:verifier.code 0} true;
  call $i43 := read_reg($p3, 5);
  // WARNING: %64 = call i32 @read_reg(%struct.pi_adapter* %4, i32 5), !dbg !3734, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3452, 5} true;
  assume {:verifier.code 0} true;
  call $i44 := printk.ref.i32(.str.9, $i43);
  // WARNING: %65 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %64), !dbg !3737, !verifier.code !3662
  assume {:verifier.code 0} true;
  goto $bb19;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3436, 13} true;
  assume {:verifier.code 0} true;
  call $i51 := read_reg($p3, 3);
  // WARNING: %74 = call i32 @read_reg(%struct.pi_adapter* %4, i32 3), !dbg !3717, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 21} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 21} true;
  assume {:verifier.code 0} true;
  $i53 := $load.i32($M.15, $p52);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 18} true;
  assume {:verifier.code 0} true;
  $i54 := $eq.i32($i51, $i53);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 18} true;
  assume {:verifier.code 0} true;
  $i55 := $zext.i1.i32($i54);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 32} true;
  assume {:verifier.code 0} true;
  $i56 := $and.i32($i55, $i50);
  // WARNING: %79 = and i32 %78, %72, !dbg !3722, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 %31, i64 0, metadata !6072, metadata !3661), !dbg !6073, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3441, 5} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3436, 13} true;
  assume {:verifier.code 0} true;
  call $i57 := read_reg($p3, 4);
  // WARNING: %81 = call i32 @read_reg(%struct.pi_adapter* %4, i32 4), !dbg !3717, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 21} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($p1, 12);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 21} true;
  assume {:verifier.code 0} true;
  $i59 := $load.i32($M.15, $p58);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 18} true;
  assume {:verifier.code 0} true;
  $i60 := $eq.i32($i57, $i59);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 18} true;
  assume {:verifier.code 0} true;
  $i61 := $zext.i1.i32($i60);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 32} true;
  assume {:verifier.code 0} true;
  $i62 := $and.i32($i61, $i56);
  // WARNING: %86 = and i32 %85, %79, !dbg !3722, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 %31, i64 0, metadata !6072, metadata !3661), !dbg !6073, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3441, 5} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb29:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3436, 13} true;
  assume {:verifier.code 0} true;
  call $i63 := read_reg($p3, 5);
  // WARNING: %88 = call i32 @read_reg(%struct.pi_adapter* %4, i32 5), !dbg !3717, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 21} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($p1, 16);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 21} true;
  assume {:verifier.code 0} true;
  $i65 := $load.i32($M.15, $p64);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 18} true;
  assume {:verifier.code 0} true;
  $i66 := $eq.i32($i63, $i65);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 18} true;
  assume {:verifier.code 0} true;
  $i67 := $zext.i1.i32($i66);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3437, 32} true;
  assume {:verifier.code 0} true;
  $i33 := $and.i32($i67, $i62);
  // WARNING: %93 = and i32 %92, %86, !dbg !3722, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 %31, i64 0, metadata !6072, metadata !3661), !dbg !6073, !verifier.code !3663
  assume {:verifier.code 0} true;
  goto $bb13;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i68 := status_reg($p3);
  // WARNING: %96 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i69 := $and.i32($i68, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i70 := $ne.i32($i69, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 3;
  assume {:branchcond $i70} true;
  goto $bb31, $bb32;
$bb31:
  assume ($i70 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb32:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i70 == 1));
  goto $bb5;
$bb33:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i71 := status_reg($p3);
  // WARNING: %101 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i72 := $and.i32($i71, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i73 := $ne.i32($i72, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 4;
  assume {:branchcond $i73} true;
  goto $bb34, $bb35;
$bb34:
  assume ($i73 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb35:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i73 == 1));
  goto $bb5;
$bb36:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i74 := status_reg($p3);
  // WARNING: %106 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i75 := $and.i32($i74, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i76 := $ne.i32($i75, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 5;
  assume {:branchcond $i76} true;
  goto $bb37, $bb38;
$bb37:
  assume ($i76 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb38:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i76 == 1));
  goto $bb5;
$bb39:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i77 := status_reg($p3);
  // WARNING: %111 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i78 := $and.i32($i77, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i79 := $ne.i32($i78, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 6;
  assume {:branchcond $i79} true;
  goto $bb40, $bb41;
$bb40:
  assume ($i79 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb41:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i79 == 1));
  goto $bb5;
$bb42:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i80 := status_reg($p3);
  // WARNING: %116 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i81 := $and.i32($i80, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i82 := $ne.i32($i81, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 7;
  assume {:branchcond $i82} true;
  goto $bb43, $bb44;
$bb43:
  assume ($i82 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb44:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i82 == 1));
  goto $bb5;
$bb45:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i83 := status_reg($p3);
  // WARNING: %121 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i84 := $and.i32($i83, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i85 := $ne.i32($i84, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 8;
  assume {:branchcond $i85} true;
  goto $bb46, $bb47;
$bb46:
  assume ($i85 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb48;
$bb47:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i85 == 1));
  goto $bb5;
$bb48:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i86 := status_reg($p3);
  // WARNING: %126 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i87 := $and.i32($i86, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i88 := $ne.i32($i87, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 9;
  assume {:branchcond $i88} true;
  goto $bb49, $bb50;
$bb49:
  assume ($i88 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb51;
$bb50:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i88 == 1));
  goto $bb5;
$bb51:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i89 := status_reg($p3);
  // WARNING: %131 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i90 := $and.i32($i89, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i91 := $ne.i32($i90, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 10;
  assume {:branchcond $i91} true;
  goto $bb52, $bb53;
$bb52:
  assume ($i91 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb54;
$bb53:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i91 == 1));
  goto $bb5;
$bb54:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i92 := status_reg($p3);
  // WARNING: %136 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i93 := $and.i32($i92, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i94 := $ne.i32($i93, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 11;
  assume {:branchcond $i94} true;
  goto $bb55, $bb56;
$bb55:
  assume ($i94 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb57;
$bb56:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i94 == 1));
  goto $bb5;
$bb57:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i95 := status_reg($p3);
  // WARNING: %141 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i96 := $and.i32($i95, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i97 := $ne.i32($i96, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 12;
  assume {:branchcond $i97} true;
  goto $bb58, $bb59;
$bb58:
  assume ($i97 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb60;
$bb59:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i97 == 1));
  goto $bb5;
$bb60:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i98 := status_reg($p3);
  // WARNING: %146 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i99 := $and.i32($i98, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i100 := $ne.i32($i99, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 13;
  assume {:branchcond $i100} true;
  goto $bb61, $bb62;
$bb61:
  assume ($i100 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb63;
$bb62:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i100 == 1));
  goto $bb5;
$bb63:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i101 := status_reg($p3);
  // WARNING: %151 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i102 := $and.i32($i101, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i103 := $ne.i32($i102, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 14;
  assume {:branchcond $i103} true;
  goto $bb64, $bb65;
$bb64:
  assume ($i103 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb66;
$bb65:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i103 == 1));
  goto $bb5;
$bb66:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i104 := status_reg($p3);
  // WARNING: %156 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i105 := $and.i32($i104, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i106 := $ne.i32($i105, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 15;
  assume {:branchcond $i106} true;
  goto $bb67, $bb68;
$bb67:
  assume ($i106 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb69;
$bb68:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i106 == 1));
  goto $bb5;
$bb69:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i107 := status_reg($p3);
  // WARNING: %161 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i108 := $and.i32($i107, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i109 := $ne.i32($i108, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 16;
  assume {:branchcond $i109} true;
  goto $bb70, $bb71;
$bb70:
  assume ($i109 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb72;
$bb71:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i109 == 1));
  goto $bb5;
$bb72:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i110 := status_reg($p3);
  // WARNING: %166 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i111 := $and.i32($i110, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i112 := $ne.i32($i111, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 17;
  assume {:branchcond $i112} true;
  goto $bb73, $bb74;
$bb73:
  assume ($i112 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb75;
$bb74:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i112 == 1));
  goto $bb5;
$bb75:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i113 := status_reg($p3);
  // WARNING: %171 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i114 := $and.i32($i113, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i115 := $ne.i32($i114, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 18;
  assume {:branchcond $i115} true;
  goto $bb76, $bb77;
$bb76:
  assume ($i115 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb77:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i115 == 1));
  goto $bb5;
$bb78:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i116 := status_reg($p3);
  // WARNING: %176 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i117 := $and.i32($i116, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i118 := $ne.i32($i117, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 19;
  assume {:branchcond $i118} true;
  goto $bb79, $bb80;
$bb79:
  assume ($i118 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb81;
$bb80:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i118 == 1));
  goto $bb5;
$bb81:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i119 := status_reg($p3);
  // WARNING: %181 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i120 := $and.i32($i119, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i121 := $ne.i32($i120, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 20;
  assume {:branchcond $i121} true;
  goto $bb82, $bb83;
$bb82:
  assume ($i121 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb84;
$bb83:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i121 == 1));
  goto $bb5;
$bb84:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i122 := status_reg($p3);
  // WARNING: %186 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i123 := $and.i32($i122, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i124 := $ne.i32($i123, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 21;
  assume {:branchcond $i124} true;
  goto $bb85, $bb86;
$bb85:
  assume ($i124 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb87;
$bb86:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i124 == 1));
  goto $bb5;
$bb87:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i125 := status_reg($p3);
  // WARNING: %191 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i126 := $and.i32($i125, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i127 := $ne.i32($i126, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 22;
  assume {:branchcond $i127} true;
  goto $bb88, $bb89;
$bb88:
  assume ($i127 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb90;
$bb89:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i127 == 1));
  goto $bb5;
$bb90:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i128 := status_reg($p3);
  // WARNING: %196 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i129 := $and.i32($i128, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i130 := $ne.i32($i129, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 23;
  assume {:branchcond $i130} true;
  goto $bb91, $bb92;
$bb91:
  assume ($i130 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb93;
$bb92:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i130 == 1));
  goto $bb5;
$bb93:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i131 := status_reg($p3);
  // WARNING: %201 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i132 := $and.i32($i131, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i133 := $ne.i32($i132, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 24;
  assume {:branchcond $i133} true;
  goto $bb94, $bb95;
$bb94:
  assume ($i133 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb96;
$bb95:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i133 == 1));
  goto $bb5;
$bb96:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i134 := status_reg($p3);
  // WARNING: %206 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i135 := $and.i32($i134, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i136 := $ne.i32($i135, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 25;
  assume {:branchcond $i136} true;
  goto $bb97, $bb98;
$bb97:
  assume ($i136 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb99;
$bb98:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i136 == 1));
  goto $bb5;
$bb99:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i137 := status_reg($p3);
  // WARNING: %211 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i138 := $and.i32($i137, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i139 := $ne.i32($i138, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 26;
  assume {:branchcond $i139} true;
  goto $bb100, $bb101;
$bb100:
  assume ($i139 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb102;
$bb101:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i139 == 1));
  goto $bb5;
$bb102:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i140 := status_reg($p3);
  // WARNING: %216 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i141 := $and.i32($i140, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i142 := $ne.i32($i141, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 27;
  assume {:branchcond $i142} true;
  goto $bb103, $bb104;
$bb103:
  assume ($i142 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb105;
$bb104:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i142 == 1));
  goto $bb5;
$bb105:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i143 := status_reg($p3);
  // WARNING: %221 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i144 := $and.i32($i143, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i145 := $ne.i32($i144, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 28;
  assume {:branchcond $i145} true;
  goto $bb106, $bb107;
$bb106:
  assume ($i145 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb108;
$bb107:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i145 == 1));
  goto $bb5;
$bb108:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i146 := status_reg($p3);
  // WARNING: %226 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i147 := $and.i32($i146, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i148 := $ne.i32($i147, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 29;
  assume {:branchcond $i148} true;
  goto $bb109, $bb110;
$bb109:
  assume ($i148 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb111;
$bb110:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i148 == 1));
  goto $bb5;
$bb111:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3422, 15} true;
  assume {:verifier.code 0} true;
  call $i149 := status_reg($p3);
  // WARNING: %231 = call i32 @status_reg(%struct.pi_adapter* %4), !dbg !3697, !verifier.code !3662
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 18} true;
  assume {:verifier.code 0} true;
  $i150 := $and.i32($i149, 128);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 25} true;
  assume {:verifier.code 0} true;
  $i151 := $ne.i32($i150, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  $i14 := 30;
  assume {:branchcond $i151} true;
  goto $bb112, $bb113;
$bb112:
  assume ($i151 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3424, 7} true;
  assume {:verifier.code 0} true;
  goto $bb114;
$bb113:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3423, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i151 == 1));
  goto $bb5;
$bb114:
  assume {:sourceloc "/proj/SMACK/smac/32_7a_cilled_true-unreach-call_linux-3.8-rc1-32_7a-drivers--block--paride--pt.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-m2FfOw.c", 3417, 3} true;
  assume {:verifier.code 0} true;
  call pt_sleep(25);
  // WARNING: call void @pt_sleep(i32 25), !dbg !3696, !verifier.code !3662
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !6053, metadata !3661), !dbg !6054, !verifier.code !3663
  assume {:verifier.code 0} true;
  goto $bb9;
}
const noop_llseek: ref;
axiom (noop_llseek == $sub.ref(0, 163437));
procedure  noop_llseek($p0: ref, $i1: i64, $i2: i32)
  returns ($r: i64);
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 164469));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !6113, metadata !3661), !dbg !6114, !verifier.code !3663
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 34, 21} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 35, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 165501));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 166533));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 261, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_error: ref;
axiom (__VERIFIER_error == $sub.ref(0, 167565));
procedure  __VERIFIER_error()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 47, 3} true;
  assume {:verifier.code 1} true;
  assert false;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 51, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 168597));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 169629));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 170661));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 171693));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 172725));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 173757));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 174789));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 175821));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 176853));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 120, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
  // WARNING: %1 = call i32 @__SMACK_nondet_int(), !dbg !3660, !verifier.code !3661
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.i32($i0, 2147483647);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i2);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 122, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 177885));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 178917));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 179949));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 180981));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 182013));
procedure  __SMACK_nondet_long()
  returns ($r: i64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 183045));
procedure  __SMACK_nondet_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 184077));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 185109));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 186141));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 187173));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 188205));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 189237));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 190269));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 191301));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 192333));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 193365));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 194397));
function {:inline} $bitcast.ref.ref(i: ref) returns (ref) {i}
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $min.bv128(i1: bv128, i2: bv128) returns (bv128) {if $slt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv96(i1: bv96, i2: bv96) returns (bv96) {if $slt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv88(i1: bv88, i2: bv88) returns (bv88) {if $slt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv64(i1: bv64, i2: bv64) returns (bv64) {if $slt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv56(i1: bv56, i2: bv56) returns (bv56) {if $slt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv48(i1: bv48, i2: bv48) returns (bv48) {if $slt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv40(i1: bv40, i2: bv40) returns (bv40) {if $slt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv32(i1: bv32, i2: bv32) returns (bv32) {if $slt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv24(i1: bv24, i2: bv24) returns (bv24) {if $slt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv16(i1: bv16, i2: bv16) returns (bv16) {if $slt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv8(i1: bv8, i2: bv8) returns (bv8) {if $slt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv128(i1: bv128, i2: bv128) returns (bv128) {if $sgt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv96(i1: bv96, i2: bv96) returns (bv96) {if $sgt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv88(i1: bv88, i2: bv88) returns (bv88) {if $sgt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv64(i1: bv64, i2: bv64) returns (bv64) {if $sgt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv56(i1: bv56, i2: bv56) returns (bv56) {if $sgt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv48(i1: bv48, i2: bv48) returns (bv48) {if $sgt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv40(i1: bv40, i2: bv40) returns (bv40) {if $sgt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv32(i1: bv32, i2: bv32) returns (bv32) {if $sgt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv24(i1: bv24, i2: bv24) returns (bv24) {if $sgt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv16(i1: bv16, i2: bv16) returns (bv16) {if $sgt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv8(i1: bv8, i2: bv8) returns (bv8) {if $sgt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ult.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ult.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ult.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ult.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ult.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ult.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ult.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ult.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ult.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ult.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ult.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ugt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ugt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ugt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ugt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ugt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ugt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ugt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ugt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ugt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ugt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ugt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then i1 else i2}
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) returns (bv128);
function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) returns (bv96);
function {:bvbuiltin "bvnot"} $not.bv88(i: bv88) returns (bv88);
function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) returns (bv64);
function {:bvbuiltin "bvnot"} $not.bv56(i: bv56) returns (bv56);
function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) returns (bv48);
function {:bvbuiltin "bvnot"} $not.bv40(i: bv40) returns (bv40);
function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) returns (bv32);
function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) returns (bv24);
function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) returns (bv16);
function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) returns (bv8);
function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) returns (bv1);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 == i2} function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 == i2} function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 == i2} function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 == i2} function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 == i2} function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 == i2} function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 == i2} function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 == i2} function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 == i2} function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 == i2} function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 == i2} function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 == i2} function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 != i2} function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 != i2} function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 != i2} function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 != i2} function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 != i2} function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 != i2} function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 != i2} function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 != i2} function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 != i2} function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 != i2} function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 != i2} function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 != i2} function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ule.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ule.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ule.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ule.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ule.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ule.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ule.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ule.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ule.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ule.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ule.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ule.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ult.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ult.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ult.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ult.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ult.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ult.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ult.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ult.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ult.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ult.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ult.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $uge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $uge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $uge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $uge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $uge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $uge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $uge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $uge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $uge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $uge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $uge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $uge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ugt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ugt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ugt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ugt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ugt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ugt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ugt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ugt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ugt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ugt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ugt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sle.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sle.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sle.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sle.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sle.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sle.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sle.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sle.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sle.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sle.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sle.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sle.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $slt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $slt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $slt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $slt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $slt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $slt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $slt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $slt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $slt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $slt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $slt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sgt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sgt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sgt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sgt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sgt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sgt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sgt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sgt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sgt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sgt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sgt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:inline} $trunc.bv128.bv96(i: bv128) returns (bv96) {i[96:0]}
function {:inline} $trunc.bv128.bv88(i: bv128) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv128.bv64(i: bv128) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv128.bv56(i: bv128) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv128.bv48(i: bv128) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv128.bv40(i: bv128) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv128.bv32(i: bv128) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv128.bv24(i: bv128) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv128.bv16(i: bv128) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv128.bv8(i: bv128) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv128.bv1(i: bv128) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv96.bv88(i: bv96) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv96.bv64(i: bv96) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv96.bv56(i: bv96) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv96.bv48(i: bv96) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv96.bv40(i: bv96) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv96.bv32(i: bv96) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv96.bv24(i: bv96) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv96.bv16(i: bv96) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv96.bv8(i: bv96) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv96.bv1(i: bv96) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv88.bv64(i: bv88) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv88.bv56(i: bv88) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv88.bv48(i: bv88) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv88.bv40(i: bv88) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv88.bv32(i: bv88) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv88.bv24(i: bv88) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv88.bv16(i: bv88) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv88.bv8(i: bv88) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv88.bv1(i: bv88) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv64.bv56(i: bv64) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv64.bv48(i: bv64) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv64.bv40(i: bv64) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv64.bv32(i: bv64) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv64.bv24(i: bv64) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv64.bv16(i: bv64) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv64.bv8(i: bv64) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv64.bv1(i: bv64) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv56.bv48(i: bv56) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv56.bv40(i: bv56) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv56.bv32(i: bv56) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv56.bv24(i: bv56) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv56.bv16(i: bv56) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv56.bv8(i: bv56) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv56.bv1(i: bv56) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv48.bv32(i: bv48) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv48.bv24(i: bv48) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv48.bv16(i: bv48) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv48.bv8(i: bv48) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv48.bv1(i: bv48) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv40.bv32(i: bv40) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv40.bv24(i: bv40) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv40.bv16(i: bv40) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv40.bv8(i: bv40) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv40.bv1(i: bv40) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv32.bv24(i: bv32) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv32.bv16(i: bv32) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv32.bv8(i: bv32) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv32.bv1(i: bv32) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv24.bv16(i: bv24) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv24.bv8(i: bv24) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv24.bv1(i: bv24) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv16.bv8(i: bv16) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv16.bv1(i: bv16) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv8.bv1(i: bv8) returns (bv1) {i[1:0]}
function {:inline} $zext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 1bv8}
function {:inline} $zext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 1bv16}
function {:inline} $zext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 1bv24}
function {:inline} $zext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 1bv32}
function {:inline} $zext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1bv40}
function {:inline} $zext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 1bv48}
function {:inline} $zext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 1bv56}
function {:inline} $zext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 1bv64}
function {:inline} $zext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 1bv88}
function {:inline} $zext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 1bv96}
function {:inline} $zext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 1bv128}
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $sext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 255bv8}
function {:inline} $sext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 65535bv16}
function {:inline} $sext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 16777215bv24}
function {:inline} $sext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 4294967295bv32}
function {:inline} $sext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1099511627775bv40}
function {:inline} $sext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 281474976710655bv48}
function {:inline} $sext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 72057594037927935bv56}
function {:inline} $sext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 18446744073709551615bv64}
function {:inline} $sext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88}
function {:inline} $sext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96}
function {:inline} $sext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128}
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) {i1 + i2}
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) {i1 + i2}
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) {i1 + i2}
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) {i1 + i2}
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) {i1 + i2}
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) {i1 + i2}
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) {i1 + i2}
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) {i1 + i2}
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) {i1 + i2}
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) {i1 + i2}
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) {i1 + i2}
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) {i1 + i2}
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) {i1 - i2}
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) {i1 - i2}
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) {i1 - i2}
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) {i1 - i2}
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) {i1 - i2}
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) {i1 - i2}
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) {i1 - i2}
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) {i1 - i2}
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) {i1 - i2}
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) {i1 - i2}
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) {i1 - i2}
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) {i1 - i2}
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) {i1 * i2}
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) {i1 * i2}
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) {i1 * i2}
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) {i1 * i2}
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) {i1 * i2}
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) {i1 * i2}
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) {i1 * i2}
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) {i1 * i2}
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) {i1 * i2}
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) {i1 * i2}
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) {i1 * i2}
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) {i1 * i2}
function {:builtin "div"} $div(i1: int, i2: int) returns (int);
function {:builtin "mod"} $mod(i1: int, i2: int) returns (int);
function {:builtin "rem"} $rem(i1: int, i2: int) returns (int);
function {:inline} $min(i1: int, i2: int) returns (int) {if i1 < i2 then i1 else i2}
function {:inline} $max(i1: int, i2: int) returns (int) {if i1 > i2 then i1 else i2}
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $not.i128(i: i128) returns (i128);
function $not.i96(i: i96) returns (i96);
function $not.i88(i: i88) returns (i88);
function $not.i64(i: i64) returns (i64);
function $not.i56(i: i56) returns (i56);
function $not.i48(i: i48) returns (i48);
function $not.i40(i: i40) returns (i40);
function $not.i32(i: i32) returns (i32);
function $not.i24(i: i24) returns (i24);
function $not.i16(i: i16) returns (i16);
function $not.i8(i: i8) returns (i8);
function $not.i1(i: i1) returns (i1);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) {i1 == i2} function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) {i1 == i2} function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) {i1 == i2} function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) {i1 == i2} function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) {i1 == i2} function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) {i1 == i2} function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) {i1 == i2} function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) {i1 == i2} function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) {i1 == i2} function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) {i1 == i2} function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) {i1 == i2} function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) {i1 == i2} function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) {i1 != i2} function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) {i1 != i2} function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) {i1 != i2} function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) {i1 != i2} function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) {i1 != i2} function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) {i1 != i2} function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) {i1 != i2} function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) {i1 != i2} function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) {i1 != i2} function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) {i1 != i2} function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) {i1 != i2} function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) {i1 != i2} function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
axiom $and.i1(0,0) == 0;
axiom $and.i1(0,1) == 0;
axiom $and.i1(1,0) == 0;
axiom $and.i1(1,1) == 1;
axiom $or.i1(0,0) == 0;
axiom $or.i1(0,1) == 1;
axiom $or.i1(1,0) == 1;
axiom $or.i1(1,1) == 1;
axiom $xor.i1(0,0) == 0;
axiom $xor.i1(0,1) == 1;
axiom $xor.i1(1,0) == 1;
axiom $xor.i1(1,1) == 0;
axiom($and.i32(32, 16) == 0);
function {:inline} $trunc.i128.i96(i: i128) returns (i96) {i}
function {:inline} $trunc.i128.i88(i: i128) returns (i88) {i}
function {:inline} $trunc.i128.i64(i: i128) returns (i64) {i}
function {:inline} $trunc.i128.i56(i: i128) returns (i56) {i}
function {:inline} $trunc.i128.i48(i: i128) returns (i48) {i}
function {:inline} $trunc.i128.i40(i: i128) returns (i40) {i}
function {:inline} $trunc.i128.i32(i: i128) returns (i32) {i}
function {:inline} $trunc.i128.i24(i: i128) returns (i24) {i}
function {:inline} $trunc.i128.i16(i: i128) returns (i16) {i}
function {:inline} $trunc.i128.i8(i: i128) returns (i8) {i}
function {:inline} $trunc.i128.i1(i: i128) returns (i1) {i}
function {:inline} $trunc.i96.i64(i: i96) returns (i64) {i}
function {:inline} $trunc.i96.i88(i: i96) returns (i88) {i}
function {:inline} $trunc.i96.i56(i: i96) returns (i56) {i}
function {:inline} $trunc.i96.i48(i: i96) returns (i48) {i}
function {:inline} $trunc.i96.i40(i: i96) returns (i40) {i}
function {:inline} $trunc.i96.i32(i: i96) returns (i32) {i}
function {:inline} $trunc.i96.i24(i: i96) returns (i24) {i}
function {:inline} $trunc.i96.i16(i: i96) returns (i16) {i}
function {:inline} $trunc.i96.i8(i: i96) returns (i8) {i}
function {:inline} $trunc.i96.i1(i: i96) returns (i1) {i}
function {:inline} $trunc.i88.i64(i: i88) returns (i64) {i}
function {:inline} $trunc.i88.i88(i: i88) returns (i88) {i}
function {:inline} $trunc.i88.i56(i: i88) returns (i56) {i}
function {:inline} $trunc.i88.i48(i: i88) returns (i48) {i}
function {:inline} $trunc.i88.i40(i: i88) returns (i40) {i}
function {:inline} $trunc.i88.i32(i: i88) returns (i32) {i}
function {:inline} $trunc.i88.i24(i: i88) returns (i24) {i}
function {:inline} $trunc.i88.i16(i: i88) returns (i16) {i}
function {:inline} $trunc.i88.i8(i: i88) returns (i8) {i}
function {:inline} $trunc.i88.i1(i: i88) returns (i1) {i}
function {:inline} $trunc.i64.i56(i: i64) returns (i56) {i}
function {:inline} $trunc.i64.i48(i: i64) returns (i48) {i}
function {:inline} $trunc.i64.i40(i: i64) returns (i40) {i}
function {:inline} $trunc.i64.i32(i: i64) returns (i32) {i}
function {:inline} $trunc.i64.i24(i: i64) returns (i24) {i}
function {:inline} $trunc.i64.i16(i: i64) returns (i16) {i}
function {:inline} $trunc.i64.i8(i: i64) returns (i8) {i}
function {:inline} $trunc.i64.i1(i: i64) returns (i1) {i}
function {:inline} $trunc.i56.i48(i: i56) returns (i48) {i}
function {:inline} $trunc.i56.i40(i: i56) returns (i40) {i}
function {:inline} $trunc.i56.i32(i: i56) returns (i32) {i}
function {:inline} $trunc.i56.i24(i: i56) returns (i24) {i}
function {:inline} $trunc.i56.i16(i: i56) returns (i16) {i}
function {:inline} $trunc.i56.i8(i: i56) returns (i8) {i}
function {:inline} $trunc.i56.i1(i: i56) returns (i1) {i}
function {:inline} $trunc.i48.i40(i: i48) returns (i40) {i}
function {:inline} $trunc.i48.i32(i: i48) returns (i32) {i}
function {:inline} $trunc.i48.i24(i: i48) returns (i24) {i}
function {:inline} $trunc.i48.i16(i: i48) returns (i16) {i}
function {:inline} $trunc.i48.i8(i: i48) returns (i8) {i}
function {:inline} $trunc.i48.i1(i: i48) returns (i1) {i}
function {:inline} $trunc.i40.i32(i: i40) returns (i32) {i}
function {:inline} $trunc.i40.i24(i: i40) returns (i24) {i}
function {:inline} $trunc.i40.i16(i: i40) returns (i16) {i}
function {:inline} $trunc.i40.i8(i: i40) returns (i8) {i}
function {:inline} $trunc.i40.i1(i: i40) returns (i1) {i}
function {:inline} $trunc.i32.i24(i: i32) returns (i24) {i}
function {:inline} $trunc.i32.i16(i: i32) returns (i16) {i}
function {:inline} $trunc.i32.i8(i: i32) returns (i8) {i}
function {:inline} $trunc.i32.i1(i: i32) returns (i1) {i}
function {:inline} $trunc.i24.i16(i: i24) returns (i16) {i}
function {:inline} $trunc.i24.i8(i: i24) returns (i8) {i}
function {:inline} $trunc.i24.i1(i: i24) returns (i1) {i}
function {:inline} $trunc.i16.i8(i: i16) returns (i8) {i}
function {:inline} $trunc.i16.i1(i: i16) returns (i1) {i}
function {:inline} $trunc.i8.i1(i: i8) returns (i1) {i}
function {:inline} $zext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $zext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $zext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $zext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $zext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $zext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $zext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $zext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $zext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $zext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $zext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $zext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $zext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $zext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $zext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $zext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $zext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $zext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $zext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $zext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $zext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $zext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $zext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $zext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $zext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $zext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $zext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $zext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $zext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $zext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $zext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $zext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $zext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $zext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $zext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $zext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $zext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $zext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $zext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $zext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $zext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $zext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $zext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $zext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $zext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $zext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $zext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $zext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $zext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $zext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $zext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $zext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $zext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $zext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $zext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $zext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $zext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $zext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $zext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $zext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $zext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $zext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $zext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $zext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $zext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $zext.i96.i128(i: i96) returns (i128) {i}
function {:inline} $sext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $sext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $sext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $sext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $sext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $sext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $sext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $sext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $sext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $sext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $sext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $sext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $sext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $sext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $sext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $sext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $sext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $sext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $sext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $sext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $sext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $sext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $sext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $sext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $sext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $sext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $sext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $sext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $sext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $sext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $sext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $sext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $sext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $sext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $sext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $sext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $sext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $sext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $sext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $sext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $sext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $sext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $sext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $sext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $sext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $sext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $sext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $sext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $sext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $sext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $sext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $sext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $sext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $sext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $sext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $sext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $sext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $sext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $sext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $sext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $sext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $sext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $sext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $sext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $sext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $sext.i96.i128(i: i96) returns (i128) {i}
function $fp(ipart:int, fpart:int, epart:int) returns (float);
function $fadd.float(f1:float, f2:float) returns (float);
function $fsub.float(f1:float, f2:float) returns (float);
function $fmul.float(f1:float, f2:float) returns (float);
function $fdiv.float(f1:float, f2:float) returns (float);
function $frem.float(f1:float, f2:float) returns (float);
function $ffalse.float(f1:float, f2:float) returns (i1);
function $ftrue.float(f1:float, f2:float) returns (i1);
function {:inline} $foeq.float(f1:float, f2:float) returns (i1) { if $foeq.bool(f1,f2) then 1 else 0 }
function $foeq.bool(f1:float, f2:float) returns (bool);
function $foge.float(f1:float, f2:float) returns (i1);
function $fogt.float(f1:float, f2:float) returns (i1);
function $fole.float(f1:float, f2:float) returns (i1);
function $folt.float(f1:float, f2:float) returns (i1);
function $fone.float(f1:float, f2:float) returns (i1);
function $ford.float(f1:float, f2:float) returns (i1);
function $fueq.float(f1:float, f2:float) returns (i1);
function $fuge.float(f1:float, f2:float) returns (i1);
function $fugt.float(f1:float, f2:float) returns (i1);
function $fule.float(f1:float, f2:float) returns (i1);
function $fult.float(f1:float, f2:float) returns (i1);
function $fune.float(f1:float, f2:float) returns (i1);
function $funo.float(f1:float, f2:float) returns (i1);
function $fp2si.float.i128(f:float) returns (i128);
function $fp2ui.float.i128(f:float) returns (i128);
function $si2fp.i128.float(i:i128) returns (float);
function $ui2fp.i128.float(i:i128) returns (float);
function $fp2si.float.i96(f:float) returns (i96);
function $fp2ui.float.i96(f:float) returns (i96);
function $si2fp.i96.float(i:i96) returns (float);
function $ui2fp.i96.float(i:i96) returns (float);
function $fp2si.float.i88(f:float) returns (i88);
function $fp2ui.float.i88(f:float) returns (i88);
function $si2fp.i88.float(i:i88) returns (float);
function $ui2fp.i88.float(i:i88) returns (float);
function $fp2si.float.i64(f:float) returns (i64);
function $fp2ui.float.i64(f:float) returns (i64);
function $si2fp.i64.float(i:i64) returns (float);
function $ui2fp.i64.float(i:i64) returns (float);
function $fp2si.float.i56(f:float) returns (i56);
function $fp2ui.float.i56(f:float) returns (i56);
function $si2fp.i56.float(i:i56) returns (float);
function $ui2fp.i56.float(i:i56) returns (float);
function $fp2si.float.i48(f:float) returns (i48);
function $fp2ui.float.i48(f:float) returns (i48);
function $si2fp.i48.float(i:i48) returns (float);
function $ui2fp.i48.float(i:i48) returns (float);
function $fp2si.float.i40(f:float) returns (i40);
function $fp2ui.float.i40(f:float) returns (i40);
function $si2fp.i40.float(i:i40) returns (float);
function $ui2fp.i40.float(i:i40) returns (float);
function $fp2si.float.i32(f:float) returns (i32);
function $fp2ui.float.i32(f:float) returns (i32);
function $si2fp.i32.float(i:i32) returns (float);
function $ui2fp.i32.float(i:i32) returns (float);
function $fp2si.float.i24(f:float) returns (i24);
function $fp2ui.float.i24(f:float) returns (i24);
function $si2fp.i24.float(i:i24) returns (float);
function $ui2fp.i24.float(i:i24) returns (float);
function $fp2si.float.i16(f:float) returns (i16);
function $fp2ui.float.i16(f:float) returns (i16);
function $si2fp.i16.float(i:i16) returns (float);
function $ui2fp.i16.float(i:i16) returns (float);
function $fp2si.float.i8(f:float) returns (i8);
function $fp2ui.float.i8(f:float) returns (i8);
function $si2fp.i8.float(i:i8) returns (float);
function $ui2fp.i8.float(i:i8) returns (float);
function $fptrunc.float.float(f:float) returns (float);
function $fpext.float.float(f:float) returns (float);
function $fp2si.float.bv128(f:float) returns (bv128);
function $fp2ui.float.bv128(f:float) returns (bv128);
function $si2fp.bv128.float(i:bv128) returns (float);
function $ui2fp.bv128.float(i:bv128) returns (float);
function $fp2si.float.bv96(f:float) returns (bv96);
function $fp2ui.float.bv96(f:float) returns (bv96);
function $si2fp.bv96.float(i:bv96) returns (float);
function $ui2fp.bv96.float(i:bv96) returns (float);
function $fp2si.float.bv88(f:float) returns (bv88);
function $fp2ui.float.bv88(f:float) returns (bv88);
function $si2fp.bv88.float(i:bv88) returns (float);
function $ui2fp.bv88.float(i:bv88) returns (float);
function $fp2si.float.bv64(f:float) returns (bv64);
function $fp2ui.float.bv64(f:float) returns (bv64);
function $si2fp.bv64.float(i:bv64) returns (float);
function $ui2fp.bv64.float(i:bv64) returns (float);
function $fp2si.float.bv56(f:float) returns (bv56);
function $fp2ui.float.bv56(f:float) returns (bv56);
function $si2fp.bv56.float(i:bv56) returns (float);
function $ui2fp.bv56.float(i:bv56) returns (float);
function $fp2si.float.bv48(f:float) returns (bv48);
function $fp2ui.float.bv48(f:float) returns (bv48);
function $si2fp.bv48.float(i:bv48) returns (float);
function $ui2fp.bv48.float(i:bv48) returns (float);
function $fp2si.float.bv40(f:float) returns (bv40);
function $fp2ui.float.bv40(f:float) returns (bv40);
function $si2fp.bv40.float(i:bv40) returns (float);
function $ui2fp.bv40.float(i:bv40) returns (float);
function $fp2si.float.bv32(f:float) returns (bv32);
function $fp2ui.float.bv32(f:float) returns (bv32);
function $si2fp.bv32.float(i:bv32) returns (float);
function $ui2fp.bv32.float(i:bv32) returns (float);
function $fp2si.float.bv24(f:float) returns (bv24);
function $fp2ui.float.bv24(f:float) returns (bv24);
function $si2fp.bv24.float(i:bv24) returns (float);
function $ui2fp.bv24.float(i:bv24) returns (float);
function $fp2si.float.bv16(f:float) returns (bv16);
function $fp2ui.float.bv16(f:float) returns (bv16);
function $si2fp.bv16.float(i:bv16) returns (float);
function $ui2fp.bv16.float(i:bv16) returns (float);
function $fp2si.float.bv8(f:float) returns (bv8);
function $fp2ui.float.bv8(f:float) returns (bv8);
function $si2fp.bv8.float(i:bv8) returns (float);
function $ui2fp.bv8.float(i:bv8) returns (float);
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;
function {:inline} $isExternal(p: ref) returns (bool) {$slt.ref.bool(p,$EXTERNS_BOTTOM)}
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) { M[p] }
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) { M[p] }
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) { M[p] }
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) { M[p] }
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) { M[p] }
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) { M[p] }
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) { M[p] }
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) { M[p] }
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) { M[p] }
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) { M[p] }
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128){ $load.bytes.bv64(M, $add.ref(p, $8.ref)) ++ $load.bytes.bv64(M, p) }
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96){ $load.bytes.bv64(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88){ $load.bytes.bv56(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64){ $load.bytes.bv32(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56){ $load.bytes.bv24(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48){ $load.bytes.bv16(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40){ M[$add.ref(p, $4.ref)] ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32){ M[$add.ref(p, $3.ref)] ++ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24){ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16){ M[$add.ref(p, $1.ref)] ++ M[p] }
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, v: i128) returns ([ref] i128) { M[p := v] }
function {:inline} $store.i96(M: [ref] i96, p: ref, v: i96) returns ([ref] i96) { M[p := v] }
function {:inline} $store.i88(M: [ref] i88, p: ref, v: i88) returns ([ref] i88) { M[p := v] }
function {:inline} $store.i64(M: [ref] i64, p: ref, v: i64) returns ([ref] i64) { M[p := v] }
function {:inline} $store.i56(M: [ref] i56, p: ref, v: i56) returns ([ref] i56) { M[p := v] }
function {:inline} $store.i48(M: [ref] i48, p: ref, v: i48) returns ([ref] i48) { M[p := v] }
function {:inline} $store.i40(M: [ref] i40, p: ref, v: i40) returns ([ref] i40) { M[p := v] }
function {:inline} $store.i32(M: [ref] i32, p: ref, v: i32) returns ([ref] i32) { M[p := v] }
function {:inline} $store.i24(M: [ref] i24, p: ref, v: i24) returns ([ref] i24) { M[p := v] }
function {:inline} $store.i16(M: [ref] i16, p: ref, v: i16) returns ([ref] i16) { M[p := v] }
function {:inline} $store.i8(M: [ref] i8, p: ref, v: i8) returns ([ref] i8) { M[p := v] }
function {:inline} $store.bv128(M: [ref] bv128, p: ref, v: bv128) returns ([ref] bv128) { M[p := v] }
function {:inline} $store.bv96(M: [ref] bv96, p: ref, v: bv96) returns ([ref] bv96) { M[p := v] }
function {:inline} $store.bv88(M: [ref] bv88, p: ref, v: bv88) returns ([ref] bv88) { M[p := v] }
function {:inline} $store.bv64(M: [ref] bv64, p: ref, v: bv64) returns ([ref] bv64) { M[p := v] }
function {:inline} $store.bv56(M: [ref] bv56, p: ref, v: bv56) returns ([ref] bv56) { M[p := v] }
function {:inline} $store.bv48(M: [ref] bv48, p: ref, v: bv48) returns ([ref] bv48) { M[p := v] }
function {:inline} $store.bv40(M: [ref] bv40, p: ref, v: bv40) returns ([ref] bv40) { M[p := v] }
function {:inline} $store.bv32(M: [ref] bv32, p: ref, v: bv32) returns ([ref] bv32) { M[p := v] }
function {:inline} $store.bv24(M: [ref] bv24, p: ref, v: bv24) returns ([ref] bv24) { M[p := v] }
function {:inline} $store.bv16(M: [ref] bv16, p: ref, v: bv16) returns ([ref] bv16) { M[p := v] }
function {:inline} $store.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) { M[p := v] }
function {:inline} $store.bytes.bv128(M:[ref]bv8, p:ref, v:bv128) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]][$add.ref(p, $11.ref) := v[104:96]][$add.ref(p, $12.ref) := v[112:104]][$add.ref(p, $13.ref) := v[120:112]][$add.ref(p, $14.ref) := v[128:120]]}
function {:inline} $store.bytes.bv96(M:[ref]bv8, p:ref, v:bv96) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]]}
function {:inline} $store.bytes.bv88(M:[ref]bv8, p:ref, v:bv88) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]]}
function {:inline} $store.bytes.bv64(M:[ref]bv8, p:ref, v:bv64) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]]}
function {:inline} $store.bytes.bv56(M:[ref]bv8, p:ref, v:bv56) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]]}
function {:inline} $store.bytes.bv48(M:[ref]bv8, p:ref, v:bv48) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]]}
function {:inline} $store.bytes.bv40(M:[ref]bv8, p:ref, v:bv40) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]]}
function {:inline} $store.bytes.bv32(M:[ref]bv8, p:ref, v:bv32) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]]}
function {:inline} $store.bytes.bv24(M:[ref]bv8, p:ref, v:bv24) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]]}
function {:inline} $store.bytes.bv16(M:[ref]bv8, p:ref, v:bv16) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]]}
function {:inline} $store.bytes.bv8(M:[ref]bv8, p:ref, v:bv8) returns ([ref]bv8) {M[p := v]}
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, v: ref) returns ([ref] ref) { M[p := v] }
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, v: float) returns ([ref] float) { M[p := v] }
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
procedure  boogie_si_record_bool(i: bool);
procedure  boogie_si_record_i1(i: i1);
procedure  boogie_si_record_i8(i: i8);
procedure  boogie_si_record_i16(i: i16);
procedure  boogie_si_record_i24(i: i24);
procedure  boogie_si_record_i32(i: i32);
procedure  boogie_si_record_i40(i: i40);
procedure  boogie_si_record_i48(i: i48);
procedure  boogie_si_record_i56(i: i56);
procedure  boogie_si_record_i64(i: i64);
procedure  boogie_si_record_i88(i: i88);
procedure  boogie_si_record_i96(i: i96);
procedure  boogie_si_record_i128(i: i128);
procedure  boogie_si_record_bv1(i: bv1);
procedure  boogie_si_record_bv8(i: bv8);
procedure  boogie_si_record_bv16(i: bv16);
procedure  boogie_si_record_bv24(i: bv24);
procedure  boogie_si_record_bv32(i: bv32);
procedure  boogie_si_record_bv40(i: bv40);
procedure  boogie_si_record_bv48(i: bv48);
procedure  boogie_si_record_bv56(i: bv56);
procedure  boogie_si_record_bv64(i: bv64);
procedure  boogie_si_record_bv88(i: bv88);
procedure  boogie_si_record_bv96(i: bv96);
procedure  boogie_si_record_bv128(i: bv128);
procedure  boogie_si_record_ref(i: ref);
procedure  boogie_si_record_float(i: float);
var $exn: bool;
var $exnv: int;
function $extractvalue(p: int, i: int) returns (int);

procedure  $alloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 195429));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 196461));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1782, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1787, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 197493));
procedure  llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 198525));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := 0;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
  $M.8 := $store.i32($M.8, pt_mutex, 1);
  $M.8 := $store.i32($M.8, $add.ref(pt_mutex, 8), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt_mutex, 8), 4), $sub.i32(0, 559067475));
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt_mutex, 8), 8), $sub.i32(0, 1));
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt_mutex, 8), 16), $i2p.i64.ref($sub.i64(0, 1)));
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt_mutex, 8), 24), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(pt_mutex, 8), 24), 8), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref(pt_mutex, 8), 24), 8), 8), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(pt_mutex, 8), 24), 24), .str.32);
  $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(pt_mutex, 8), 24), 32), 0);
  $M.8 := $store.i64($M.8, $add.ref($add.ref($add.ref(pt_mutex, 8), 24), 40), 0);
  $M.8 := $store.ref($M.8, $add.ref(pt_mutex, 80), $add.ref(pt_mutex, 80));
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt_mutex, 80), 8), $add.ref(pt_mutex, 80));
  $M.8 := $store.ref($M.8, $add.ref(pt_mutex, 96), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_mutex, 104), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_mutex, 112), pt_mutex);
  $M.8 := $store.ref($M.8, $add.ref(pt_mutex, 120), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt_mutex, 120), 8), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(pt_mutex, 120), 8), 8), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt_mutex, 120), 24), .str.33);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt_mutex, 120), 32), 0);
  $M.8 := $store.i64($M.8, $add.ref($add.ref(pt_mutex, 120), 40), 0);
  $M.9 := $0.ref;
  $M.8 := $store.ref($M.8, pt, $0.ref);
  $M.8 := $store.i32($M.8, $add.ref(pt, 8), 0);
  $M.8 := $store.i32($M.8, $add.ref(pt, 12), 0);
  $M.8 := $store.i32($M.8, $add.ref(pt, 16), 0);
  $M.8 := $store.i32($M.8, $add.ref(pt, 20), 0);
  $M.8 := $store.ref($M.8, $add.ref(pt, 24), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref(pt, 32), 0);
  $M.8 := $store.i32($M.8, $add.ref(pt, 36), 0);
  $M.8 := $store.i32($M.8, $add.ref(pt, 40), 0);
  $M.8 := $store.i32($M.8, $add.ref(pt, 44), 0);
  $M.8 := $store.i64($M.8, $add.ref(pt, 48), 0);
  $M.8 := $store.i32($M.8, $add.ref(pt, 56), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 56), 4), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 56), 8), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 56), 16), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 56), 24), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(pt, 56), 24), 8), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref(pt, 56), 24), 8), 8), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(pt, 56), 24), 24), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(pt, 56), 24), 32), 0);
  $M.8 := $store.i64($M.8, $add.ref($add.ref($add.ref(pt, 56), 24), 40), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 56), 72), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(pt, 56), 72), 8), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt, 144), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt, 152), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref(pt, 160), 0);
  $M.8 := $store.ref($M.8, $add.ref(pt, 168), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt, 176), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref(pt, 184), 0);
  $M.8 := $store.i32($M.8, $add.ref(pt, 188), 0);
  $M.8 := $store.i32($M.8, $add.ref(pt, 192), 0);
  $M.8 := $store.i32($M.8, $add.ref(pt, 196), 0);
  $M.8 := $store.i32($M.8, $add.ref(pt, 200), 0);
  $M.8 := $store.i32($M.8, $add.ref(pt, 204), 0);
  $M.8 := $store.i32($M.8, $add.ref(pt, 208), 0);
  $M.8 := $store.ref($M.8, $add.ref(pt, 216), $0.ref);
  $M.8 := $store.i8($M.8, $add.ref(pt, 224), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(pt, 224), 1), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(pt, 224), 2), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(pt, 224), 3), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(pt, 224), 4), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(pt, 224), 5), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(pt, 224), 6), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(pt, 224), 7), 0);
  $M.8 := $store.ref($M.8, $add.ref(pt, 232), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 8), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 12), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 16), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 20), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 232), 24), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 32), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 36), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 40), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 44), 0);
  $M.8 := $store.i64($M.8, $add.ref($add.ref(pt, 232), 48), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 56), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(pt, 232), 56), 4), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(pt, 232), 56), 8), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(pt, 232), 56), 16), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(pt, 232), 56), 24), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref(pt, 232), 56), 24), 8), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref(pt, 232), 56), 24), 8), 8), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref(pt, 232), 56), 24), 24), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref($add.ref(pt, 232), 56), 24), 32), 0);
  $M.8 := $store.i64($M.8, $add.ref($add.ref($add.ref($add.ref(pt, 232), 56), 24), 40), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(pt, 232), 56), 72), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref(pt, 232), 56), 72), 8), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 232), 144), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 232), 152), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 160), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 232), 168), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 232), 176), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 184), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 188), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 192), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 196), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 200), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 204), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 232), 208), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 232), 216), $0.ref);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(pt, 232), 224), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 232), 224), 1), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 232), 224), 2), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 232), 224), 3), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 232), 224), 4), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 232), 224), 5), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 232), 224), 6), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 232), 224), 7), 0);
  $M.8 := $store.ref($M.8, $add.ref(pt, 464), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 8), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 12), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 16), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 20), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 464), 24), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 32), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 36), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 40), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 44), 0);
  $M.8 := $store.i64($M.8, $add.ref($add.ref(pt, 464), 48), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 56), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(pt, 464), 56), 4), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(pt, 464), 56), 8), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(pt, 464), 56), 16), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(pt, 464), 56), 24), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref(pt, 464), 56), 24), 8), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref(pt, 464), 56), 24), 8), 8), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref(pt, 464), 56), 24), 24), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref($add.ref(pt, 464), 56), 24), 32), 0);
  $M.8 := $store.i64($M.8, $add.ref($add.ref($add.ref($add.ref(pt, 464), 56), 24), 40), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(pt, 464), 56), 72), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref(pt, 464), 56), 72), 8), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 464), 144), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 464), 152), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 160), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 464), 168), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 464), 176), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 184), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 188), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 192), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 196), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 200), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 204), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 464), 208), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 464), 216), $0.ref);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(pt, 464), 224), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 464), 224), 1), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 464), 224), 2), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 464), 224), 3), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 464), 224), 4), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 464), 224), 5), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 464), 224), 6), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 464), 224), 7), 0);
  $M.8 := $store.ref($M.8, $add.ref(pt, 696), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 8), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 12), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 16), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 20), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 696), 24), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 32), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 36), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 40), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 44), 0);
  $M.8 := $store.i64($M.8, $add.ref($add.ref(pt, 696), 48), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 56), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(pt, 696), 56), 4), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(pt, 696), 56), 8), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(pt, 696), 56), 16), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(pt, 696), 56), 24), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref(pt, 696), 56), 24), 8), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref($add.ref(pt, 696), 56), 24), 8), 8), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref(pt, 696), 56), 24), 24), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref($add.ref(pt, 696), 56), 24), 32), 0);
  $M.8 := $store.i64($M.8, $add.ref($add.ref($add.ref($add.ref(pt, 696), 56), 24), 40), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref(pt, 696), 56), 72), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref($add.ref($add.ref(pt, 696), 56), 72), 8), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 696), 144), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 696), 152), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 160), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 696), 168), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 696), 176), $0.ref);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 184), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 188), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 192), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 196), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 200), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 204), 0);
  $M.8 := $store.i32($M.8, $add.ref($add.ref(pt, 696), 208), 0);
  $M.8 := $store.ref($M.8, $add.ref($add.ref(pt, 696), 216), $0.ref);
  $M.8 := $store.i8($M.8, $add.ref($add.ref(pt, 696), 224), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 696), 224), 1), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 696), 224), 2), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 696), 224), 3), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 696), 224), 4), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 696), 224), 5), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 696), 224), 6), 0);
  $M.8 := $store.i8($M.8, $add.ref($add.ref($add.ref(pt, 696), 224), 7), 0);
  $M.8 := $store.ref($M.8, pt_fops, __this_module);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 8), noop_llseek);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 16), pt_read);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 24), pt_write);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 32), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 40), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 48), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 56), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 64), pt_ioctl);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 72), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 80), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 88), pt_open);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 96), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 104), pt_release);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 112), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 120), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 128), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 136), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 144), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 152), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 160), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 168), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 176), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 184), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 192), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 200), $0.ref);
  $M.8 := $store.ref($M.8, $add.ref(pt_fops, 208), $0.ref);
  $M.7 := .str.1;
  $M.6 := 96;
  call {:cexpr "major"} boogie_si_record_i32(96);
  $M.10 := 0;
  call {:cexpr "verbose"} boogie_si_record_i8(0);
  $M.8 := $store.i8($M.8, pt_scratch, 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 1), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 2), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 3), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 4), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 5), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 6), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 7), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 8), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 9), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 10), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 11), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 12), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 13), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 14), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 15), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 16), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 17), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 18), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 19), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 20), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 21), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 22), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 23), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 24), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 25), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 26), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 27), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 28), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 29), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 30), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 31), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 32), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 33), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 34), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 35), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 36), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 37), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 38), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 39), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 40), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 41), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 42), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 43), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 44), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 45), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 46), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 47), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 48), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 49), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 50), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 51), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 52), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 53), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 54), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 55), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 56), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 57), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 58), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 59), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 60), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 61), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 62), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 63), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 64), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 65), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 66), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 67), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 68), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 69), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 70), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 71), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 72), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 73), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 74), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 75), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 76), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 77), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 78), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 79), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 80), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 81), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 82), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 83), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 84), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 85), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 86), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 87), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 88), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 89), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 90), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 91), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 92), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 93), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 94), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 95), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 96), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 97), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 98), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 99), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 100), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 101), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 102), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 103), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 104), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 105), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 106), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 107), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 108), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 109), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 110), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 111), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 112), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 113), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 114), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 115), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 116), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 117), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 118), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 119), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 120), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 121), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 122), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 123), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 124), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 125), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 126), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 127), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 128), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 129), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 130), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 131), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 132), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 133), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 134), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 135), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 136), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 137), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 138), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 139), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 140), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 141), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 142), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 143), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 144), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 145), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 146), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 147), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 148), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 149), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 150), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 151), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 152), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 153), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 154), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 155), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 156), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 157), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 158), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 159), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 160), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 161), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 162), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 163), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 164), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 165), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 166), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 167), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 168), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 169), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 170), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 171), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 172), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 173), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 174), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 175), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 176), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 177), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 178), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 179), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 180), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 181), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 182), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 183), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 184), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 185), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 186), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 187), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 188), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 189), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 190), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 191), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 192), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 193), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 194), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 195), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 196), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 197), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 198), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 199), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 200), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 201), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 202), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 203), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 204), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 205), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 206), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 207), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 208), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 209), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 210), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 211), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 212), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 213), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 214), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 215), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 216), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 217), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 218), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 219), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 220), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 221), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 222), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 223), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 224), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 225), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 226), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 227), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 228), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 229), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 230), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 231), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 232), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 233), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 234), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 235), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 236), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 237), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 238), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 239), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 240), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 241), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 242), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 243), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 244), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 245), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 246), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 247), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 248), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 249), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 250), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 251), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 252), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 253), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 254), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 255), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 256), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 257), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 258), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 259), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 260), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 261), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 262), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 263), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 264), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 265), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 266), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 267), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 268), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 269), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 270), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 271), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 272), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 273), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 274), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 275), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 276), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 277), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 278), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 279), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 280), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 281), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 282), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 283), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 284), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 285), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 286), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 287), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 288), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 289), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 290), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 291), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 292), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 293), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 294), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 295), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 296), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 297), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 298), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 299), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 300), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 301), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 302), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 303), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 304), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 305), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 306), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 307), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 308), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 309), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 310), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 311), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 312), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 313), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 314), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 315), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 316), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 317), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 318), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 319), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 320), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 321), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 322), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 323), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 324), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 325), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 326), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 327), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 328), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 329), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 330), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 331), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 332), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 333), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 334), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 335), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 336), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 337), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 338), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 339), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 340), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 341), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 342), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 343), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 344), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 345), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 346), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 347), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 348), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 349), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 350), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 351), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 352), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 353), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 354), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 355), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 356), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 357), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 358), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 359), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 360), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 361), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 362), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 363), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 364), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 365), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 366), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 367), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 368), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 369), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 370), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 371), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 372), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 373), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 374), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 375), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 376), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 377), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 378), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 379), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 380), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 381), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 382), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 383), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 384), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 385), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 386), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 387), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 388), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 389), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 390), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 391), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 392), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 393), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 394), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 395), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 396), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 397), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 398), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 399), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 400), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 401), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 402), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 403), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 404), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 405), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 406), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 407), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 408), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 409), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 410), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 411), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 412), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 413), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 414), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 415), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 416), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 417), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 418), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 419), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 420), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 421), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 422), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 423), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 424), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 425), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 426), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 427), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 428), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 429), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 430), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 431), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 432), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 433), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 434), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 435), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 436), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 437), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 438), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 439), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 440), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 441), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 442), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 443), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 444), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 445), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 446), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 447), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 448), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 449), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 450), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 451), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 452), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 453), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 454), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 455), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 456), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 457), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 458), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 459), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 460), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 461), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 462), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 463), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 464), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 465), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 466), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 467), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 468), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 469), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 470), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 471), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 472), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 473), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 474), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 475), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 476), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 477), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 478), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 479), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 480), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 481), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 482), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 483), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 484), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 485), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 486), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 487), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 488), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 489), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 490), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 491), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 492), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 493), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 494), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 495), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 496), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 497), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 498), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 499), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 500), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 501), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 502), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 503), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 504), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 505), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 506), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 507), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 508), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 509), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 510), 0);
  $M.8 := $store.i8($M.8, $add.ref(pt_scratch, 511), 0);
  $M.14 := $store.i32($M.14, drive3, 0);
  $M.14 := $store.i32($M.14, $add.ref(drive3, 4), 0);
  $M.14 := $store.i32($M.14, $add.ref(drive3, 8), 0);
  $M.14 := $store.i32($M.14, $add.ref(drive3, 12), $sub.i32(0, 1));
  $M.14 := $store.i32($M.14, $add.ref(drive3, 16), $sub.i32(0, 1));
  $M.14 := $store.i32($M.14, $add.ref(drive3, 20), $sub.i32(0, 1));
  $M.14 := $store.i32($M.14, drive2, 0);
  $M.14 := $store.i32($M.14, $add.ref(drive2, 4), 0);
  $M.14 := $store.i32($M.14, $add.ref(drive2, 8), 0);
  $M.14 := $store.i32($M.14, $add.ref(drive2, 12), $sub.i32(0, 1));
  $M.14 := $store.i32($M.14, $add.ref(drive2, 16), $sub.i32(0, 1));
  $M.14 := $store.i32($M.14, $add.ref(drive2, 20), $sub.i32(0, 1));
  $M.14 := $store.i32($M.14, drive1, 0);
  $M.14 := $store.i32($M.14, $add.ref(drive1, 4), 0);
  $M.14 := $store.i32($M.14, $add.ref(drive1, 8), 0);
  $M.14 := $store.i32($M.14, $add.ref(drive1, 12), $sub.i32(0, 1));
  $M.14 := $store.i32($M.14, $add.ref(drive1, 16), $sub.i32(0, 1));
  $M.14 := $store.i32($M.14, $add.ref(drive1, 20), $sub.i32(0, 1));
  $M.14 := $store.i32($M.14, drive0, 0);
  $M.14 := $store.i32($M.14, $add.ref(drive0, 4), 0);
  $M.14 := $store.i32($M.14, $add.ref(drive0, 8), 0);
  $M.14 := $store.i32($M.14, $add.ref(drive0, 12), $sub.i32(0, 1));
  $M.14 := $store.i32($M.14, $add.ref(drive0, 16), $sub.i32(0, 1));
  $M.14 := $store.i32($M.14, $add.ref(drive0, 20), $sub.i32(0, 1));
  $M.13 := $store.ref($M.13, drives, drive0);
  $M.13 := $store.ref($M.13, $add.ref(drives, 8), drive1);
  $M.13 := $store.ref($M.13, $add.ref(drives, 16), drive2);
  $M.13 := $store.ref($M.13, $add.ref(drives, 24), drive3);
  $M.5 := 0;
  call {:cexpr "disable"} boogie_si_record_i32(0);
  $M.4 := 0;
  call {:cexpr "ldv_mutex_pt_mutex"} boogie_si_record_i32(0);
  $M.3 := 0;
  call {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(0);
  $M.2 := 0;
  call {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
  $M.1 := 0;
  call {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(0);
  $M.8 := $store.i8($M.8, .str.47, 119);
  $M.8 := $store.i8($M.8, $add.ref(.str.47, 1), 114);
  $M.8 := $store.i8($M.8, $add.ref(.str.47, 2), 105);
  $M.8 := $store.i8($M.8, $add.ref(.str.47, 3), 116);
  $M.8 := $store.i8($M.8, $add.ref(.str.47, 4), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.47, 5), 32);
  $M.8 := $store.i8($M.8, $add.ref(.str.47, 6), 102);
  $M.8 := $store.i8($M.8, $add.ref(.str.47, 7), 105);
  $M.8 := $store.i8($M.8, $add.ref(.str.47, 8), 108);
  $M.8 := $store.i8($M.8, $add.ref(.str.47, 9), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.47, 10), 109);
  $M.8 := $store.i8($M.8, $add.ref(.str.47, 11), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.47, 12), 114);
  $M.8 := $store.i8($M.8, $add.ref(.str.47, 13), 107);
  $M.8 := $store.i8($M.8, $add.ref(.str.47, 14), 0);
  $M.8 := $store.i8($M.8, .str.28, 82);
  $M.8 := $store.i8($M.8, $add.ref(.str.28, 1), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.28, 2), 113);
  $M.8 := $store.i8($M.8, $add.ref(.str.28, 3), 117);
  $M.8 := $store.i8($M.8, $add.ref(.str.28, 4), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.28, 5), 115);
  $M.8 := $store.i8($M.8, $add.ref(.str.28, 6), 116);
  $M.8 := $store.i8($M.8, $add.ref(.str.28, 7), 32);
  $M.8 := $store.i8($M.8, $add.ref(.str.28, 8), 115);
  $M.8 := $store.i8($M.8, $add.ref(.str.28, 9), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.28, 10), 110);
  $M.8 := $store.i8($M.8, $add.ref(.str.28, 11), 115);
  $M.8 := $store.i8($M.8, $add.ref(.str.28, 12), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.28, 13), 0);
  $M.8 := $store.i8($M.8, .str.26, 99);
  $M.8 := $store.i8($M.8, $add.ref(.str.26, 1), 111);
  $M.8 := $store.i8($M.8, $add.ref(.str.26, 2), 109);
  $M.8 := $store.i8($M.8, $add.ref(.str.26, 3), 112);
  $M.8 := $store.i8($M.8, $add.ref(.str.26, 4), 108);
  $M.8 := $store.i8($M.8, $add.ref(.str.26, 5), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.26, 6), 116);
  $M.8 := $store.i8($M.8, $add.ref(.str.26, 7), 105);
  $M.8 := $store.i8($M.8, $add.ref(.str.26, 8), 111);
  $M.8 := $store.i8($M.8, $add.ref(.str.26, 9), 110);
  $M.8 := $store.i8($M.8, $add.ref(.str.26, 10), 0);
  $M.8 := $store.i8($M.8, .str.27, 100);
  $M.8 := $store.i8($M.8, $add.ref(.str.27, 1), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.27, 2), 116);
  $M.8 := $store.i8($M.8, $add.ref(.str.27, 3), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.27, 4), 32);
  $M.8 := $store.i8($M.8, $add.ref(.str.27, 5), 100);
  $M.8 := $store.i8($M.8, $add.ref(.str.27, 6), 111);
  $M.8 := $store.i8($M.8, $add.ref(.str.27, 7), 110);
  $M.8 := $store.i8($M.8, $add.ref(.str.27, 8), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.27, 9), 0);
  $M.8 := $store.i8($M.8, .str.22, 98);
  $M.8 := $store.i8($M.8, $add.ref(.str.22, 1), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.22, 2), 102);
  $M.8 := $store.i8($M.8, $add.ref(.str.22, 3), 111);
  $M.8 := $store.i8($M.8, $add.ref(.str.22, 4), 114);
  $M.8 := $store.i8($M.8, $add.ref(.str.22, 5), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.22, 6), 32);
  $M.8 := $store.i8($M.8, $add.ref(.str.22, 7), 99);
  $M.8 := $store.i8($M.8, $add.ref(.str.22, 8), 111);
  $M.8 := $store.i8($M.8, $add.ref(.str.22, 9), 109);
  $M.8 := $store.i8($M.8, $add.ref(.str.22, 10), 109);
  $M.8 := $store.i8($M.8, $add.ref(.str.22, 11), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.22, 12), 110);
  $M.8 := $store.i8($M.8, $add.ref(.str.22, 13), 100);
  $M.8 := $store.i8($M.8, $add.ref(.str.22, 14), 0);
  $M.8 := $store.i8($M.8, .str.23, 99);
  $M.8 := $store.i8($M.8, $add.ref(.str.23, 1), 111);
  $M.8 := $store.i8($M.8, $add.ref(.str.23, 2), 109);
  $M.8 := $store.i8($M.8, $add.ref(.str.23, 3), 109);
  $M.8 := $store.i8($M.8, $add.ref(.str.23, 4), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.23, 5), 110);
  $M.8 := $store.i8($M.8, $add.ref(.str.23, 6), 100);
  $M.8 := $store.i8($M.8, $add.ref(.str.23, 7), 32);
  $M.8 := $store.i8($M.8, $add.ref(.str.23, 8), 68);
  $M.8 := $store.i8($M.8, $add.ref(.str.23, 9), 82);
  $M.8 := $store.i8($M.8, $add.ref(.str.23, 10), 81);
  $M.8 := $store.i8($M.8, $add.ref(.str.23, 11), 0);
  $M.8 := $store.i8($M.8, .str.48, 114);
  $M.8 := $store.i8($M.8, $add.ref(.str.48, 1), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.48, 2), 119);
  $M.8 := $store.i8($M.8, $add.ref(.str.48, 3), 105);
  $M.8 := $store.i8($M.8, $add.ref(.str.48, 4), 110);
  $M.8 := $store.i8($M.8, $add.ref(.str.48, 5), 100);
  $M.8 := $store.i8($M.8, $add.ref(.str.48, 6), 0);
  $M.8 := $store.i8($M.8, .str.41, 115);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 1), 116);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 2), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 3), 114);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 4), 116);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 5), 32);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 6), 98);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 7), 117);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 8), 102);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 9), 102);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 10), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 11), 114);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 12), 45);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 13), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 14), 118);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 15), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 16), 105);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 17), 108);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 18), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 19), 98);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 20), 108);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 21), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 22), 32);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 23), 109);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 24), 111);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 25), 100);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 26), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.41, 27), 0);
  $M.8 := $store.i8($M.8, .str.42, 119);
  $M.8 := $store.i8($M.8, $add.ref(.str.42, 1), 114);
  $M.8 := $store.i8($M.8, $add.ref(.str.42, 2), 105);
  $M.8 := $store.i8($M.8, $add.ref(.str.42, 3), 116);
  $M.8 := $store.i8($M.8, $add.ref(.str.42, 4), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.42, 5), 0);
  $M.8 := $store.i8($M.8, .str.43, 119);
  $M.8 := $store.i8($M.8, $add.ref(.str.43, 1), 114);
  $M.8 := $store.i8($M.8, $add.ref(.str.43, 2), 105);
  $M.8 := $store.i8($M.8, $add.ref(.str.43, 3), 116);
  $M.8 := $store.i8($M.8, $add.ref(.str.43, 4), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.43, 5), 32);
  $M.8 := $store.i8($M.8, $add.ref(.str.43, 6), 68);
  $M.8 := $store.i8($M.8, $add.ref(.str.43, 7), 82);
  $M.8 := $store.i8($M.8, $add.ref(.str.43, 8), 81);
  $M.8 := $store.i8($M.8, $add.ref(.str.43, 9), 0);
  $M.8 := $store.i8($M.8, .str.34, 115);
  $M.8 := $store.i8($M.8, $add.ref(.str.34, 1), 116);
  $M.8 := $store.i8($M.8, $add.ref(.str.34, 2), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.34, 3), 114);
  $M.8 := $store.i8($M.8, $add.ref(.str.34, 4), 116);
  $M.8 := $store.i8($M.8, $add.ref(.str.34, 5), 32);
  $M.8 := $store.i8($M.8, $add.ref(.str.34, 6), 114);
  $M.8 := $store.i8($M.8, $add.ref(.str.34, 7), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.34, 8), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.34, 9), 100);
  $M.8 := $store.i8($M.8, $add.ref(.str.34, 10), 45);
  $M.8 := $store.i8($M.8, $add.ref(.str.34, 11), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.34, 12), 104);
  $M.8 := $store.i8($M.8, $add.ref(.str.34, 13), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.34, 14), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.34, 15), 100);
  $M.8 := $store.i8($M.8, $add.ref(.str.34, 16), 0);
  $M.8 := $store.i8($M.8, .str.35, 114);
  $M.8 := $store.i8($M.8, $add.ref(.str.35, 1), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.35, 2), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.35, 3), 100);
  $M.8 := $store.i8($M.8, $add.ref(.str.35, 4), 0);
  $M.8 := $store.i8($M.8, .str.36, 114);
  $M.8 := $store.i8($M.8, $add.ref(.str.36, 1), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.36, 2), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.36, 3), 100);
  $M.8 := $store.i8($M.8, $add.ref(.str.36, 4), 32);
  $M.8 := $store.i8($M.8, $add.ref(.str.36, 5), 68);
  $M.8 := $store.i8($M.8, $add.ref(.str.36, 6), 82);
  $M.8 := $store.i8($M.8, $add.ref(.str.36, 7), 81);
  $M.8 := $store.i8($M.8, $add.ref(.str.36, 8), 0);
  $M.8 := $store.i8($M.8, .str.37, 0);
  $M.8 := $store.i8($M.8, .str.12, 109);
  $M.8 := $store.i8($M.8, $add.ref(.str.12, 1), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.12, 2), 115);
  $M.8 := $store.i8($M.8, $add.ref(.str.12, 3), 116);
  $M.8 := $store.i8($M.8, $add.ref(.str.12, 4), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.12, 5), 114);
  $M.8 := $store.i8($M.8, $add.ref(.str.12, 6), 0);
  $M.8 := $store.i8($M.8, .str.13, 115);
  $M.8 := $store.i8($M.8, $add.ref(.str.13, 1), 108);
  $M.8 := $store.i8($M.8, $add.ref(.str.13, 2), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.13, 3), 118);
  $M.8 := $store.i8($M.8, $add.ref(.str.13, 4), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.13, 5), 0);
  $M.8 := $store.i8($M.8, .str.14, 105);
  $M.8 := $store.i8($M.8, $add.ref(.str.14, 1), 100);
  $M.8 := $store.i8($M.8, $add.ref(.str.14, 2), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.14, 3), 110);
  $M.8 := $store.i8($M.8, $add.ref(.str.14, 4), 116);
  $M.8 := $store.i8($M.8, $add.ref(.str.14, 5), 105);
  $M.8 := $store.i8($M.8, $add.ref(.str.14, 6), 102);
  $M.8 := $store.i8($M.8, $add.ref(.str.14, 7), 121);
  $M.8 := $store.i8($M.8, $add.ref(.str.14, 8), 0);
  $M.8 := $store.i8($M.8, .str.16, 109);
  $M.8 := $store.i8($M.8, $add.ref(.str.16, 1), 111);
  $M.8 := $store.i8($M.8, $add.ref(.str.16, 2), 100);
  $M.8 := $store.i8($M.8, $add.ref(.str.16, 3), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.16, 4), 32);
  $M.8 := $store.i8($M.8, $add.ref(.str.16, 5), 115);
  $M.8 := $store.i8($M.8, $add.ref(.str.16, 6), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.16, 7), 110);
  $M.8 := $store.i8($M.8, $add.ref(.str.16, 8), 115);
  $M.8 := $store.i8($M.8, $add.ref(.str.16, 9), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.16, 10), 0);
  $M.8 := $store.i8($M.8, .str.17, 108);
  $M.8 := $store.i8($M.8, $add.ref(.str.17, 1), 111);
  $M.8 := $store.i8($M.8, $add.ref(.str.17, 2), 103);
  $M.8 := $store.i8($M.8, $add.ref(.str.17, 3), 32);
  $M.8 := $store.i8($M.8, $add.ref(.str.17, 4), 115);
  $M.8 := $store.i8($M.8, $add.ref(.str.17, 5), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.17, 6), 110);
  $M.8 := $store.i8($M.8, $add.ref(.str.17, 7), 115);
  $M.8 := $store.i8($M.8, $add.ref(.str.17, 8), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.17, 9), 0);
  $M.8 := $store.i8($M.8, .str.30, 116);
  $M.8 := $store.i8($M.8, $add.ref(.str.30, 1), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.30, 2), 115);
  $M.8 := $store.i8($M.8, $add.ref(.str.30, 3), 116);
  $M.8 := $store.i8($M.8, $add.ref(.str.30, 4), 32);
  $M.8 := $store.i8($M.8, $add.ref(.str.30, 5), 117);
  $M.8 := $store.i8($M.8, $add.ref(.str.30, 6), 110);
  $M.8 := $store.i8($M.8, $add.ref(.str.30, 7), 105);
  $M.8 := $store.i8($M.8, $add.ref(.str.30, 8), 116);
  $M.8 := $store.i8($M.8, $add.ref(.str.30, 9), 32);
  $M.8 := $store.i8($M.8, $add.ref(.str.30, 10), 114);
  $M.8 := $store.i8($M.8, $add.ref(.str.30, 11), 101);
  $M.8 := $store.i8($M.8, $add.ref(.str.30, 12), 97);
  $M.8 := $store.i8($M.8, $add.ref(.str.30, 13), 100);
  $M.8 := $store.i8($M.8, $add.ref(.str.30, 14), 121);
  $M.8 := $store.i8($M.8, $add.ref(.str.30, 15), 0);
  $M.8 := $store.i8($M.8, .str.1, 112);
  $M.8 := $store.i8($M.8, $add.ref(.str.1, 1), 116);
  $M.8 := $store.i8($M.8, $add.ref(.str.1, 2), 0);
  $M.8 := $store.i8($M.8, .str.5, 49);
  $M.8 := $store.i8($M.8, $add.ref(.str.5, 1), 46);
  $M.8 := $store.i8($M.8, $add.ref(.str.5, 2), 48);
  $M.8 := $store.i8($M.8, $add.ref(.str.5, 3), 52);
  $M.8 := $store.i8($M.8, $add.ref(.str.5, 4), 0);
  $M.16 := $store.i8($M.16, .str.6, 37);
  $M.16 := $store.i8($M.16, $add.ref(.str.6, 1), 115);
  $M.16 := $store.i8($M.16, $add.ref(.str.6, 2), 37);
  $M.16 := $store.i8($M.16, $add.ref(.str.6, 3), 100);
  $M.16 := $store.i8($M.16, $add.ref(.str.6, 4), 0);
  $exn := false;
  return;
}
const devirtbounce: ref;
axiom (devirtbounce == $sub.ref(0, 199557));
procedure  devirtbounce(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.1: ref;
axiom (devirtbounce.1 == $sub.ref(0, 200589));
procedure  devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const $u0: ref;
const $u1: ref;
const $u2: ref;
const $u3: i64;
const $u4: ref;
const $u5: i32;
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
