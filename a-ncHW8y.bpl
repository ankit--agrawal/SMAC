// generated by SMACK version 1.9.0 for corral
// via /mnt/local/smack-project/smack/bin/smack -x=svcomp --time-limit 1800 /proj/SMACK/sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c --verifier-options  /bopt:boolControlVC /bopt:z3opt:SMT.MBQI=false /doNotUseLabels /noInitPruning /staticInlining --unroll 16

// Basic types
type i1 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type ref = i64;
type float = i32;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $2.ref: ref;
axiom ($2.ref == 2);
const $3.ref: ref;
axiom ($3.ref == 3);
const $4.ref: ref;
axiom ($4.ref == 4);
const $5.ref: ref;
axiom ($5.ref == 5);
const $6.ref: ref;
axiom ($6.ref == 6);
const $7.ref: ref;
axiom ($7.ref == 7);
const $8.ref: ref;
axiom ($8.ref == 8);
const $9.ref: ref;
axiom ($9.ref == 9);
const $10.ref: ref;
axiom ($10.ref == 10);
const $11.ref: ref;
axiom ($11.ref == 11);
const $12.ref: ref;
axiom ($12.ref == 12);
const $13.ref: ref;
axiom ($13.ref == 13);
const $14.ref: ref;
axiom ($14.ref == 14);
const $1024.ref: ref;
axiom ($1024.ref == 1024);

// Memory maps (10 regions)
var $M.0: [ref] i8;
var $M.1: i32;
var $M.2: [ref] ref;
var $M.3: i32;
var $M.4: i32;
var $M.5: i32;
var $M.6: i32;
var $M.7: i32;
var $M.8: i32;
var $M.9: i32;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 86814));
axiom ($EXTERNS_BOTTOM == $sub.ref(0, 32776));
axiom ($MALLOC_TOP == 9223372036854775807);

// Bitstd::vector-integer conversions
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2int"} $bv2int.64(i: bv64) returns (i64);

// Pointer-number conversions
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { if $eq.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { if $ne.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { if $ugt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { if $uge.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { if $ult.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { if $ule.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { if $sgt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { if $sge.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { if $slt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { if $sle.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

const LDV_IN_INTERRUPT: ref;
axiom (LDV_IN_INTERRUPT == $sub.ref(0, 1028));
const ldv_spin: ref;
axiom (ldv_spin == $sub.ref(0, 2056));
const qlcfg9: ref;
axiom (qlcfg9 == $sub.ref(0, 3084));
const qlcfg5: ref;
axiom (qlcfg5 == $sub.ref(0, 4112));
const qlcfg8: ref;
axiom (qlcfg8 == $sub.ref(0, 5140));
const qlcfg6: ref;
axiom (qlcfg6 == $sub.ref(0, 6168));
const qlcfg7: ref;
axiom (qlcfg7 == $sub.ref(0, 7196));
const qlcfgc: ref;
axiom (qlcfgc == $sub.ref(0, 8224));
const .str: ref;
axiom (.str == $sub.ref(0, 9281));
const {:count 59} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 10364));
const jiffies: ref;
axiom (jiffies == $sub.ref(0, 32776));
const {:count 58} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 11446));
const {:count 28} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 12498));
const {:count 14} .str.1.7: ref;
axiom (.str.1.7 == $sub.ref(0, 13536));
const {:count 14} .str.2.8: ref;
axiom (.str.2.8 == $sub.ref(0, 14574));
const qlogicfas408_ihandl: ref;
axiom (qlogicfas408_ihandl == $sub.ref(0, 15606));
procedure  qlogicfas408_ihandl($i0: i32, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5570, 10} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5571, 3} true;
  assume {:verifier.code 0} true;
  call ldv_spin_lock();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5572, 3} true;
  assume {:verifier.code 0} true;
  call ql_ihandl($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5573, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p2);
  // WARNING: %4 = ptrtoint %struct.Scsi_Host* %3 to i64, !dbg !4725, !verifier.code !4715
  call {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5574, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i64($i3, 216);
  // WARNING: %5 = add i64 %4, 216, !dbg !4728, !verifier.code !4715
  call {:cexpr "__cil_tmp6"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5575, 18} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.i64.ref($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5575, 16} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5576, 3} true;
  assume {:verifier.code 0} true;
  call spin_unlock_irqrestore($p6, $u0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5578, 3} true;
  assume {:verifier.code 0} true;
  $r := 1;
  $exn := false;
  return;
}
const ldv_spin_lock: ref;
axiom (ldv_spin_lock == $sub.ref(0, 16638));
procedure  ldv_spin_lock()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6227, 12} true;
  assume {:verifier.code 0} true;
  $M.1 := 1;
  call {:cexpr "ldv_spin"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6228, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ql_ihandl: ref;
axiom (ql_ihandl == $sub.ref(0, 17670));
procedure  ql_ihandl($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i8;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i8;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i8;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i8;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i8;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i8;
  var $i103: i32;
  var $i104: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5479, 10} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5480, 17} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p1);
  // WARNING: %3 = ptrtoint %struct.Scsi_Host* %2 to i64, !dbg !4719, !verifier.code !4713
  call {:cexpr "__cil_tmp12"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5481, 29} true;
  assume {:verifier.code 0} true;
  $i3 := $add.i64($i2, 3048);
  // WARNING: %4 = add i64 %3, 3048, !dbg !4722, !verifier.code !4713
  call {:cexpr "__cil_tmp13"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5482, 17} true;
  assume {:verifier.code 0} true;
  $p4 := $i2p.i64.ref($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5483, 10} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5484, 11} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5484, 11} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i32($M.0, $p6);
  // WARNING: %8 = load i32, i32* %7, align 4, !dbg !4731, !verifier.code !4713
  call {:cexpr "qbase"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5485, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $add.i32($i7, 13);
  // WARNING: %9 = add nsw i32 %8, 13, !dbg !4734, !verifier.code !4713
  call {:cexpr "__cil_tmp15"} boogie_si_record_i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5486, 9} true;
  assume {:verifier.code 0} true;
  call $i9 := inb($i8);
  // WARNING: %10 = call zeroext i8 @inb(i32 %9), !dbg !4737, !verifier.code !4713
  call {:cexpr "tmp"} boogie_si_record_i8($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5487, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i8.i32($i9);
  // WARNING: %11 = zext i8 %10 to i32, !dbg !4740, !verifier.code !4713
  call {:cexpr "__cil_tmp16"} boogie_si_record_i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5488, 29} true;
  assume {:verifier.code 0} true;
  $i11 := $and.i32($i10, 127);
  // WARNING: %12 = and i32 %11, 127, !dbg !4743, !verifier.code !4713
  call {:cexpr "__cil_tmp17"} boogie_si_record_i32($i11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5489, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $trunc.i32.i8($i11);
  // WARNING: %13 = trunc i32 %12 to i8, !dbg !4746, !verifier.code !4713
  call {:cexpr "__cil_tmp18"} boogie_si_record_i8($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5490, 23} true;
  assume {:verifier.code 0} true;
  $i13 := $add.i32($i7, 13);
  // WARNING: %14 = add nsw i32 %8, 13, !dbg !4749, !verifier.code !4713
  call {:cexpr "__cil_tmp19"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5491, 3} true;
  assume {:verifier.code 0} true;
  call outb($i12, $i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5492, 23} true;
  assume {:verifier.code 0} true;
  $i14 := $add.i32($i7, 13);
  // WARNING: %15 = add nsw i32 %8, 13, !dbg !4753, !verifier.code !4713
  call {:cexpr "__cil_tmp20"} boogie_si_record_i32($i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5493, 3} true;
  assume {:verifier.code 0} true;
  call outb(4, $i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5494, 23} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i32($i7, 4);
  // WARNING: %16 = add nsw i32 %8, 4, !dbg !4757, !verifier.code !4713
  call {:cexpr "__cil_tmp21"} boogie_si_record_i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5495, 13} true;
  assume {:verifier.code 0} true;
  call $i16 := inb($i15);
  // WARNING: %17 = call zeroext i8 @inb(i32 %16), !dbg !4760, !verifier.code !4713
  call {:cexpr "tmp___0"} boogie_si_record_i8($i16);
  // WARNING: call void @llvm.dbg.value(metadata i8 %17, i64 0, metadata !4791, metadata !4713), !dbg !4792, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5499, 17} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.i8.i32($i16);
  // WARNING: %18 = sext i8 %17 to i32, !dbg !4765, !verifier.code !4713
  call {:cexpr "__cil_tmp23"} boogie_si_record_i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5500, 19} true;
  assume {:verifier.code 0} true;
  $i18 := $sge.i32($i17, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5500, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i18 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5501, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i18 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5560, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5508, 17} true;
  assume {:verifier.code 0} true;
  $i19 := $p2i.ref.i64($0.ref);
  // WARNING: %23 = ptrtoint %struct.scsi_cmnd* null to i64, !dbg !4776, !verifier.code !4713
  call {:cexpr "__cil_tmp25"} boogie_si_record_i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5509, 17} true;
  assume {:verifier.code 0} true;
  $i20 := $p2i.ref.i64($p5);
  // WARNING: %24 = ptrtoint %struct.qlogicfas408_priv* %6 to i64, !dbg !4780, !verifier.code !4713
  call {:cexpr "__cil_tmp26"} boogie_si_record_i64($i20);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5510, 29} true;
  assume {:verifier.code 0} true;
  $i21 := $add.i64($i20, 104);
  // WARNING: %25 = add i64 %24, 104, !dbg !4783, !verifier.code !4713
  call {:cexpr "__cil_tmp27"} boogie_si_record_i64($i21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5511, 19} true;
  assume {:verifier.code 0} true;
  $p22 := $i2p.i64.ref($i21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5511, 17} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.0, $p22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5512, 17} true;
  assume {:verifier.code 0} true;
  $i24 := $p2i.ref.i64($p23);
  // WARNING: %28 = ptrtoint %struct.scsi_cmnd* %27 to i64, !dbg !4790, !verifier.code !4713
  call {:cexpr "__cil_tmp29"} boogie_si_record_i64($i24);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5513, 19} true;
  assume {:verifier.code 0} true;
  $i25 := $eq.i64($i24, $i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5513, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i25 == 1);
  // WARNING: call void @llvm.dbg.value(metadata i32 16, i64 0, metadata !4826, metadata !4713), !dbg !4827, !verifier.code !4715
  // WARNING: call void @llvm.dbg.value(metadata i32 16, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5520, 9} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  goto $bb15;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5522, 27} true;
  assume {:verifier.code 0} true;
  $i30 := $add.i32($i7, 5);
  // WARNING: %37 = add nsw i32 %8, 5, !dbg !4802, !verifier.code !4713
  call {:cexpr "__cil_tmp30"} boogie_si_record_i32($i30);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5523, 17} true;
  assume {:verifier.code 0} true;
  call $i31 := inb($i30);
  // WARNING: %38 = call zeroext i8 @inb(i32 %37), !dbg !4808, !verifier.code !4713
  call {:cexpr "tmp___2"} boogie_si_record_i8($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5526, 21} true;
  assume {:verifier.code 0} true;
  $i32 := $zext.i8.i32($i31);
  // WARNING: %39 = zext i8 %38 to i32, !dbg !4811, !verifier.code !4713
  call {:cexpr "__cil_tmp31"} boogie_si_record_i32($i32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 23} true;
  assume {:verifier.code 0} true;
  $i33 := $ne.i32($i32, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i33} true;
  goto $bb12, $bb13;
$bb8:
  // WARNING: call void @llvm.dbg.value(metadata i32 15, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5522, 27} true;
  assume {:verifier.code 0} true;
  $i26 := $add.i32($i7, 5);
  // WARNING: %32 = add nsw i32 %8, 5, !dbg !4802, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5523, 17} true;
  assume {:verifier.code 0} true;
  call $i27 := inb($i26);
  // WARNING: %33 = call zeroext i8 @inb(i32 %32), !dbg !4808, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5526, 21} true;
  assume {:verifier.code 0} true;
  $i28 := $zext.i8.i32($i27);
  // WARNING: %34 = zext i8 %33 to i32, !dbg !4811, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 23} true;
  assume {:verifier.code 0} true;
  $i29 := $ne.i32($i28, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i29 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5528, 9} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i29 == 1));
  goto $bb11;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5530, 9} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb12:
  assume ($i33 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5528, 9} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i33 == 1));
  goto $bb11;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5537, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5543, 17} true;
  assume {:verifier.code 0} true;
  $i34 := $p2i.ref.i64($p5);
  // WARNING: %46 = ptrtoint %struct.qlogicfas408_priv* %6 to i64, !dbg !4823, !verifier.code !4713
  call {:cexpr "__cil_tmp32"} boogie_si_record_i64($i34);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5544, 29} true;
  assume {:verifier.code 0} true;
  $i35 := $add.i64($i34, 104);
  // WARNING: %47 = add i64 %46, 104, !dbg !4827, !verifier.code !4713
  call {:cexpr "__cil_tmp33"} boogie_si_record_i64($i35);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5545, 12} true;
  assume {:verifier.code 0} true;
  $p36 := $i2p.i64.ref($i35);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5545, 10} true;
  assume {:verifier.code 0} true;
  $p37 := $load.ref($M.0, $p36);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5546, 13} true;
  assume {:verifier.code 0} true;
  call $i38 := ql_pcmd($p37);
  // WARNING: %50 = call i32 @ql_pcmd(%struct.scsi_cmnd* %49), !dbg !4834, !verifier.code !4713
  call {:cexpr "tmp___3"} boogie_si_record_i32($i38);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5547, 17} true;
  assume {:verifier.code 0} true;
  $i39 := $p2i.ref.i64($p37);
  // WARNING: %51 = ptrtoint %struct.scsi_cmnd* %49 to i64, !dbg !4837, !verifier.code !4713
  call {:cexpr "__cil_tmp34"} boogie_si_record_i64($i39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5548, 29} true;
  assume {:verifier.code 0} true;
  $i40 := $add.i64($i39, 224);
  // WARNING: %52 = add i64 %51, 224, !dbg !4840, !verifier.code !4713
  call {:cexpr "__cil_tmp35"} boogie_si_record_i64($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5549, 5} true;
  assume {:verifier.code 0} true;
  $p41 := $i2p.i64.ref($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5549, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p41, $i38);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5550, 17} true;
  assume {:verifier.code 0} true;
  $i42 := $p2i.ref.i64($p5);
  // WARNING: %54 = ptrtoint %struct.qlogicfas408_priv* %6 to i64, !dbg !4845, !verifier.code !4713
  call {:cexpr "__cil_tmp36"} boogie_si_record_i64($i42);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5551, 29} true;
  assume {:verifier.code 0} true;
  $i43 := $add.i64($i42, 104);
  // WARNING: %55 = add i64 %54, 104, !dbg !4848, !verifier.code !4713
  call {:cexpr "__cil_tmp37"} boogie_si_record_i64($i43);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5552, 5} true;
  assume {:verifier.code 0} true;
  $p44 := $i2p.i64.ref($i43);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5552, 39} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p44, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5553, 17} true;
  assume {:verifier.code 0} true;
  $i45 := $p2i.ref.i64($p37);
  // WARNING: %57 = ptrtoint %struct.scsi_cmnd* %49 to i64, !dbg !4853, !verifier.code !4713
  call {:cexpr "__cil_tmp38"} boogie_si_record_i64($i45);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5554, 29} true;
  assume {:verifier.code 0} true;
  $i46 := $add.i64($i45, 144);
  // WARNING: %58 = add i64 %57, 144, !dbg !4856, !verifier.code !4713
  call {:cexpr "__cil_tmp39"} boogie_si_record_i64($i46);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5555, 19} true;
  assume {:verifier.code 0} true;
  $p47 := $i2p.i64.ref($i46);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5555, 17} true;
  assume {:verifier.code 0} true;
  $p48 := $load.ref($M.0, $p47);
  call devirtbounce($p48, $p37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5558, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb16:
  // WARNING: call void @llvm.dbg.value(metadata i32 15, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5522, 27} true;
  assume {:verifier.code 0} true;
  $i49 := $add.i32($i7, 5);
  // WARNING: %64 = add nsw i32 %8, 5, !dbg !4802, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5523, 17} true;
  assume {:verifier.code 0} true;
  call $i50 := inb($i49);
  // WARNING: %65 = call zeroext i8 @inb(i32 %64), !dbg !4808, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5526, 21} true;
  assume {:verifier.code 0} true;
  $i51 := $zext.i8.i32($i50);
  // WARNING: %66 = zext i8 %65 to i32, !dbg !4811, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 23} true;
  assume {:verifier.code 0} true;
  $i52 := $ne.i32($i51, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i52} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i52 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5528, 9} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i52 == 1));
  goto $bb11;
$bb19:
  // WARNING: call void @llvm.dbg.value(metadata i32 15, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5522, 27} true;
  assume {:verifier.code 0} true;
  $i53 := $add.i32($i7, 5);
  // WARNING: %70 = add nsw i32 %8, 5, !dbg !4802, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5523, 17} true;
  assume {:verifier.code 0} true;
  call $i54 := inb($i53);
  // WARNING: %71 = call zeroext i8 @inb(i32 %70), !dbg !4808, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5526, 21} true;
  assume {:verifier.code 0} true;
  $i55 := $zext.i8.i32($i54);
  // WARNING: %72 = zext i8 %71 to i32, !dbg !4811, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 23} true;
  assume {:verifier.code 0} true;
  $i56 := $ne.i32($i55, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i56 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5528, 9} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i56 == 1));
  goto $bb11;
$bb22:
  // WARNING: call void @llvm.dbg.value(metadata i32 15, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5522, 27} true;
  assume {:verifier.code 0} true;
  $i57 := $add.i32($i7, 5);
  // WARNING: %76 = add nsw i32 %8, 5, !dbg !4802, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5523, 17} true;
  assume {:verifier.code 0} true;
  call $i58 := inb($i57);
  // WARNING: %77 = call zeroext i8 @inb(i32 %76), !dbg !4808, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5526, 21} true;
  assume {:verifier.code 0} true;
  $i59 := $zext.i8.i32($i58);
  // WARNING: %78 = zext i8 %77 to i32, !dbg !4811, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 23} true;
  assume {:verifier.code 0} true;
  $i60 := $ne.i32($i59, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i60} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i60 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5528, 9} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i60 == 1));
  goto $bb11;
$bb25:
  // WARNING: call void @llvm.dbg.value(metadata i32 15, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5522, 27} true;
  assume {:verifier.code 0} true;
  $i61 := $add.i32($i7, 5);
  // WARNING: %82 = add nsw i32 %8, 5, !dbg !4802, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5523, 17} true;
  assume {:verifier.code 0} true;
  call $i62 := inb($i61);
  // WARNING: %83 = call zeroext i8 @inb(i32 %82), !dbg !4808, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5526, 21} true;
  assume {:verifier.code 0} true;
  $i63 := $zext.i8.i32($i62);
  // WARNING: %84 = zext i8 %83 to i32, !dbg !4811, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 23} true;
  assume {:verifier.code 0} true;
  $i64 := $ne.i32($i63, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i64} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i64 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5528, 9} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i64 == 1));
  goto $bb11;
$bb28:
  // WARNING: call void @llvm.dbg.value(metadata i32 15, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5522, 27} true;
  assume {:verifier.code 0} true;
  $i65 := $add.i32($i7, 5);
  // WARNING: %88 = add nsw i32 %8, 5, !dbg !4802, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5523, 17} true;
  assume {:verifier.code 0} true;
  call $i66 := inb($i65);
  // WARNING: %89 = call zeroext i8 @inb(i32 %88), !dbg !4808, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5526, 21} true;
  assume {:verifier.code 0} true;
  $i67 := $zext.i8.i32($i66);
  // WARNING: %90 = zext i8 %89 to i32, !dbg !4811, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 23} true;
  assume {:verifier.code 0} true;
  $i68 := $ne.i32($i67, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb29, $bb30;
$bb29:
  assume ($i68 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5528, 9} true;
  assume {:verifier.code 0} true;
  goto $bb31;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i68 == 1));
  goto $bb11;
$bb31:
  // WARNING: call void @llvm.dbg.value(metadata i32 15, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5522, 27} true;
  assume {:verifier.code 0} true;
  $i69 := $add.i32($i7, 5);
  // WARNING: %94 = add nsw i32 %8, 5, !dbg !4802, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5523, 17} true;
  assume {:verifier.code 0} true;
  call $i70 := inb($i69);
  // WARNING: %95 = call zeroext i8 @inb(i32 %94), !dbg !4808, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5526, 21} true;
  assume {:verifier.code 0} true;
  $i71 := $zext.i8.i32($i70);
  // WARNING: %96 = zext i8 %95 to i32, !dbg !4811, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 23} true;
  assume {:verifier.code 0} true;
  $i72 := $ne.i32($i71, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i72} true;
  goto $bb32, $bb33;
$bb32:
  assume ($i72 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5528, 9} true;
  assume {:verifier.code 0} true;
  goto $bb34;
$bb33:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i72 == 1));
  goto $bb11;
$bb34:
  // WARNING: call void @llvm.dbg.value(metadata i32 15, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5522, 27} true;
  assume {:verifier.code 0} true;
  $i73 := $add.i32($i7, 5);
  // WARNING: %100 = add nsw i32 %8, 5, !dbg !4802, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5523, 17} true;
  assume {:verifier.code 0} true;
  call $i74 := inb($i73);
  // WARNING: %101 = call zeroext i8 @inb(i32 %100), !dbg !4808, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5526, 21} true;
  assume {:verifier.code 0} true;
  $i75 := $zext.i8.i32($i74);
  // WARNING: %102 = zext i8 %101 to i32, !dbg !4811, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 23} true;
  assume {:verifier.code 0} true;
  $i76 := $ne.i32($i75, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i76} true;
  goto $bb35, $bb36;
$bb35:
  assume ($i76 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5528, 9} true;
  assume {:verifier.code 0} true;
  goto $bb37;
$bb36:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i76 == 1));
  goto $bb11;
$bb37:
  // WARNING: call void @llvm.dbg.value(metadata i32 15, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5522, 27} true;
  assume {:verifier.code 0} true;
  $i77 := $add.i32($i7, 5);
  // WARNING: %106 = add nsw i32 %8, 5, !dbg !4802, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5523, 17} true;
  assume {:verifier.code 0} true;
  call $i78 := inb($i77);
  // WARNING: %107 = call zeroext i8 @inb(i32 %106), !dbg !4808, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5526, 21} true;
  assume {:verifier.code 0} true;
  $i79 := $zext.i8.i32($i78);
  // WARNING: %108 = zext i8 %107 to i32, !dbg !4811, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 23} true;
  assume {:verifier.code 0} true;
  $i80 := $ne.i32($i79, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i80} true;
  goto $bb38, $bb39;
$bb38:
  assume ($i80 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5528, 9} true;
  assume {:verifier.code 0} true;
  goto $bb40;
$bb39:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i80 == 1));
  goto $bb11;
$bb40:
  // WARNING: call void @llvm.dbg.value(metadata i32 15, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5522, 27} true;
  assume {:verifier.code 0} true;
  $i81 := $add.i32($i7, 5);
  // WARNING: %112 = add nsw i32 %8, 5, !dbg !4802, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5523, 17} true;
  assume {:verifier.code 0} true;
  call $i82 := inb($i81);
  // WARNING: %113 = call zeroext i8 @inb(i32 %112), !dbg !4808, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5526, 21} true;
  assume {:verifier.code 0} true;
  $i83 := $zext.i8.i32($i82);
  // WARNING: %114 = zext i8 %113 to i32, !dbg !4811, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 23} true;
  assume {:verifier.code 0} true;
  $i84 := $ne.i32($i83, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i84} true;
  goto $bb41, $bb42;
$bb41:
  assume ($i84 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5528, 9} true;
  assume {:verifier.code 0} true;
  goto $bb43;
$bb42:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i84 == 1));
  goto $bb11;
$bb43:
  // WARNING: call void @llvm.dbg.value(metadata i32 15, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5522, 27} true;
  assume {:verifier.code 0} true;
  $i85 := $add.i32($i7, 5);
  // WARNING: %118 = add nsw i32 %8, 5, !dbg !4802, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5523, 17} true;
  assume {:verifier.code 0} true;
  call $i86 := inb($i85);
  // WARNING: %119 = call zeroext i8 @inb(i32 %118), !dbg !4808, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5526, 21} true;
  assume {:verifier.code 0} true;
  $i87 := $zext.i8.i32($i86);
  // WARNING: %120 = zext i8 %119 to i32, !dbg !4811, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 23} true;
  assume {:verifier.code 0} true;
  $i88 := $ne.i32($i87, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i88} true;
  goto $bb44, $bb45;
$bb44:
  assume ($i88 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5528, 9} true;
  assume {:verifier.code 0} true;
  goto $bb46;
$bb45:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i88 == 1));
  goto $bb11;
$bb46:
  // WARNING: call void @llvm.dbg.value(metadata i32 15, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5522, 27} true;
  assume {:verifier.code 0} true;
  $i89 := $add.i32($i7, 5);
  // WARNING: %124 = add nsw i32 %8, 5, !dbg !4802, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5523, 17} true;
  assume {:verifier.code 0} true;
  call $i90 := inb($i89);
  // WARNING: %125 = call zeroext i8 @inb(i32 %124), !dbg !4808, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5526, 21} true;
  assume {:verifier.code 0} true;
  $i91 := $zext.i8.i32($i90);
  // WARNING: %126 = zext i8 %125 to i32, !dbg !4811, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 23} true;
  assume {:verifier.code 0} true;
  $i92 := $ne.i32($i91, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i92} true;
  goto $bb47, $bb48;
$bb47:
  assume ($i92 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5528, 9} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb48:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i92 == 1));
  goto $bb11;
$bb49:
  // WARNING: call void @llvm.dbg.value(metadata i32 15, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5522, 27} true;
  assume {:verifier.code 0} true;
  $i93 := $add.i32($i7, 5);
  // WARNING: %130 = add nsw i32 %8, 5, !dbg !4802, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5523, 17} true;
  assume {:verifier.code 0} true;
  call $i94 := inb($i93);
  // WARNING: %131 = call zeroext i8 @inb(i32 %130), !dbg !4808, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5526, 21} true;
  assume {:verifier.code 0} true;
  $i95 := $zext.i8.i32($i94);
  // WARNING: %132 = zext i8 %131 to i32, !dbg !4811, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 23} true;
  assume {:verifier.code 0} true;
  $i96 := $ne.i32($i95, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i96} true;
  goto $bb50, $bb51;
$bb50:
  assume ($i96 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5528, 9} true;
  assume {:verifier.code 0} true;
  goto $bb52;
$bb51:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i96 == 1));
  goto $bb11;
$bb52:
  // WARNING: call void @llvm.dbg.value(metadata i32 15, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5522, 27} true;
  assume {:verifier.code 0} true;
  $i97 := $add.i32($i7, 5);
  // WARNING: %136 = add nsw i32 %8, 5, !dbg !4802, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5523, 17} true;
  assume {:verifier.code 0} true;
  call $i98 := inb($i97);
  // WARNING: %137 = call zeroext i8 @inb(i32 %136), !dbg !4808, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5526, 21} true;
  assume {:verifier.code 0} true;
  $i99 := $zext.i8.i32($i98);
  // WARNING: %138 = zext i8 %137 to i32, !dbg !4811, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 23} true;
  assume {:verifier.code 0} true;
  $i100 := $ne.i32($i99, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i100} true;
  goto $bb53, $bb54;
$bb53:
  assume ($i100 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5528, 9} true;
  assume {:verifier.code 0} true;
  goto $bb55;
$bb54:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i100 == 1));
  goto $bb11;
$bb55:
  // WARNING: call void @llvm.dbg.value(metadata i32 15, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5522, 27} true;
  assume {:verifier.code 0} true;
  $i101 := $add.i32($i7, 5);
  // WARNING: %142 = add nsw i32 %8, 5, !dbg !4802, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5523, 17} true;
  assume {:verifier.code 0} true;
  call $i102 := inb($i101);
  // WARNING: %143 = call zeroext i8 @inb(i32 %142), !dbg !4808, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5526, 21} true;
  assume {:verifier.code 0} true;
  $i103 := $zext.i8.i32($i102);
  // WARNING: %144 = zext i8 %143 to i32, !dbg !4811, !verifier.code !4713
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 23} true;
  assume {:verifier.code 0} true;
  $i104 := $ne.i32($i103, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i104} true;
  goto $bb56, $bb57;
$bb56:
  assume ($i104 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5528, 9} true;
  assume {:verifier.code 0} true;
  goto $bb58;
$bb57:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5527, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i104 == 1));
  goto $bb11;
$bb58:
  // WARNING: call void @llvm.dbg.value(metadata i32 15, i64 0, metadata !4828, metadata !4713), !dbg !4829, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5534, 7} true;
  assume {:verifier.code 0} true;
  goto $bb14;
}
const spin_unlock_irqrestore: ref;
axiom (spin_unlock_irqrestore == $sub.ref(0, 18702));
procedure  spin_unlock_irqrestore($p0: ref, $i1: i64)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.spinlock* %0, i64 0, metadata !4900, metadata !4713), !dbg !4901, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6259, 3} true;
  assume {:verifier.code 0} true;
  call ldv_spin_unlock();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6260, 3} true;
  assume {:verifier.code 0} true;
  call ldv_spin_unlock_irqrestore_8($p0, $i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6262, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_spin_unlock: ref;
axiom (ldv_spin_unlock == $sub.ref(0, 19734));
procedure  ldv_spin_unlock()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6235, 12} true;
  assume {:verifier.code 0} true;
  $M.1 := 0;
  call {:cexpr "ldv_spin"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6236, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_spin_unlock_irqrestore_8: ref;
axiom (ldv_spin_unlock_irqrestore_8 == $sub.ref(0, 20766));
procedure  ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64)
{
  var $p2: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.spinlock* %0, i64 0, metadata !4914, metadata !4713), !dbg !4915, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3710, 16} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3711, 3} true;
  assume {:verifier.code 0} true;
  call _raw_spin_unlock_irqrestore($p2, $i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3713, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _raw_spin_unlock_irqrestore: ref;
axiom (_raw_spin_unlock_irqrestore == $sub.ref(0, 21798));
procedure  _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
const inb: ref;
axiom (inb == $sub.ref(0, 22830));
procedure  inb($i0: i32)
  returns ($r: i8)
{
  var $i1: i8;
$bb0:
  call $i1 := devirtbounce.1(0, $i0);
  // WARNING: %2 = call i8 @devirtbounce.1(i8 (i32)* asm sideeffect "inb ${1:w}, ${0:b}", "={ax},N{dx},~{dirflag},~{fpsr},~{flags}", i32 %0)
  call {:cexpr "value"} boogie_si_record_i8($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3731, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const outb: ref;
axiom (outb == $sub.ref(0, 23862));
procedure  outb($i0: i8, $i1: i32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8 %0, i64 0, metadata !4937, metadata !4713), !dbg !4938, !verifier.code !4715
  call devirtbounce.2(0, $i0, $i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3723, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ql_pcmd: ref;
axiom (ql_pcmd == $sub.ref(0, 24894));
procedure  ql_pcmd($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i8;
  var $i51: i32;
  var $i52: i8;
  var $i53: i32;
  var $i54: i8;
  var $i55: i32;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i8;
  var $i60: i32;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i8;
  var $i69: i32;
  var $i70: i8;
  var $i71: i32;
  var $i72: i32;
  var $i73: i8;
  var $i74: i32;
  var $i75: i8;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i8;
  var $i89: i32;
  var $i90: i32;
  var $i91: i8;
  var $i92: i32;
  var $i93: i32;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $i80: i32;
  var $p81: ref;
  var $i111: i32;
  var $i112: i8;
  var $i113: i32;
  var $i114: i32;
  var $i115: i8;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i64;
  var $i120: i1;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i124: i8;
  var $i125: i64;
  var $i126: i64;
  var $i127: i64;
  var $i128: i64;
  var $i129: i1;
  var $i130: i64;
  var $i131: i64;
  var $i132: i1;
  var $i133: i64;
  var $i134: i64;
  var $p135: ref;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i8;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i143: i64;
  var $i144: i64;
  var $i145: i1;
  var $i146: i32;
  var $i147: i8;
  var $i148: i32;
  var $i149: i1;
  var $i150: i8;
  var $i151: i32;
  var $i152: i1;
  var $i153: i64;
  var $i154: i64;
  var $p155: ref;
  var $i156: i32;
  var $i157: i1;
  var $i158: i64;
  var $i159: i64;
  var $p160: ref;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $i164: i32;
  var $i165: i32;
  var $i166: i64;
  var $i167: i1;
  var $i168: i32;
  var $i169: i32;
  var $i170: i32;
  var $i171: i8;
  var $i172: i32;
  var $i173: i32;
  var $i174: i8;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $i178: i8;
  var $i179: i32;
  var $i180: i32;
  var $i181: i8;
  var $i182: i32;
  var $i183: i1;
  var $i184: i1;
  var $i185: i1;
  var $i186: i32;
  var $i188: i1;
  var $i189: i32;
  var $i190: i32;
  var $i187: i32;
  var $i191: i32;
  var $i192: i32;
  var $i193: i32;
  var $i194: i64;
  var $i195: i1;
  var $i196: i32;
  var $i197: i32;
  var $i198: i32;
  var $i199: i8;
  var $i200: i32;
  var $i201: i64;
  var $i202: i64;
  var $p203: ref;
  var $i204: i32;
  var $i205: i1;
  var $i207: i32;
  var $i208: i8;
  var $i209: i32;
  var $i210: i32;
  var $i211: i32;
  var $i212: i1;
  var $i206: i32;
  var $i213: i32;
  var $i214: i1;
  var $i215: i64;
  var $i216: i64;
  var $p217: ref;
  var $i218: i32;
  var $i219: i1;
  var $i220: i64;
  var $i221: i64;
  var $p222: ref;
  var $i223: i32;
  var $i224: i1;
  var $i225: i32;
  var $i226: i32;
  var $i227: i32;
  var $i228: i32;
  var $i229: i32;
  var $i230: i32;
  var $i22: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4998, 17} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4998, 17} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4999, 17} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4999, 17} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.2, $p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5000, 17} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p4);
  // WARNING: %6 = ptrtoint %struct.Scsi_Host* %5 to i64, !dbg !4724, !verifier.code !4715
  call {:cexpr "__cil_tmp52"} boogie_si_record_i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5001, 29} true;
  assume {:verifier.code 0} true;
  $i6 := $add.i64($i5, 3048);
  // WARNING: %7 = add i64 %6, 3048, !dbg !4727, !verifier.code !4715
  call {:cexpr "__cil_tmp53"} boogie_si_record_i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5002, 17} true;
  assume {:verifier.code 0} true;
  $p7 := $i2p.i64.ref($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5003, 10} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5004, 11} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5004, 11} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.0, $p9);
  // WARNING: %11 = load i32, i32* %10, align 4, !dbg !4736, !verifier.code !4715
  call {:cexpr "qbase"} boogie_si_record_i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5005, 17} true;
  assume {:verifier.code 0} true;
  $i11 := $p2i.ref.i64($p8);
  // WARNING: %12 = ptrtoint %struct.qlogicfas408_priv* %9 to i64, !dbg !4739, !verifier.code !4715
  call {:cexpr "__cil_tmp55"} boogie_si_record_i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5006, 29} true;
  assume {:verifier.code 0} true;
  $i12 := $add.i64($i11, 16);
  // WARNING: %13 = add i64 %12, 16, !dbg !4742, !verifier.code !4715
  call {:cexpr "__cil_tmp56"} boogie_si_record_i64($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5007, 16} true;
  assume {:verifier.code 0} true;
  $p13 := $i2p.i64.ref($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5007, 14} true;
  assume {:verifier.code 0} true;
  $i14 := $load.i32($M.0, $p13);
  // WARNING: %15 = load i32, i32* %14, align 4, !dbg !4746, !verifier.code !4715
  call {:cexpr "int_type"} boogie_si_record_i32($i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5008, 23} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i32($i10, 6);
  // WARNING: %16 = add nsw i32 %11, 6, !dbg !4749, !verifier.code !4715
  call {:cexpr "__cil_tmp57"} boogie_si_record_i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5009, 9} true;
  assume {:verifier.code 0} true;
  call $i16 := inb($i15);
  // WARNING: %17 = call zeroext i8 @inb(i32 %16), !dbg !4752, !verifier.code !4715
  call {:cexpr "tmp"} boogie_si_record_i8($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5010, 7} true;
  assume {:verifier.code 0} true;
  $i17 := $zext.i8.i32($i16);
  // WARNING: %18 = zext i8 %17 to i32, !dbg !4755, !verifier.code !4715
  call {:cexpr "j"} boogie_si_record_i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5011, 23} true;
  assume {:verifier.code 0} true;
  $i18 := $add.i32($i10, 5);
  // WARNING: %19 = add nsw i32 %11, 5, !dbg !4758, !verifier.code !4715
  call {:cexpr "__cil_tmp58"} boogie_si_record_i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5012, 13} true;
  assume {:verifier.code 0} true;
  call $i19 := inb($i18);
  // WARNING: %20 = call zeroext i8 @inb(i32 %19), !dbg !4761, !verifier.code !4715
  call {:cexpr "tmp___0"} boogie_si_record_i8($i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5013, 7} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i8.i32($i19);
  // WARNING: %21 = zext i8 %20 to i32, !dbg !4764, !verifier.code !4715
  call {:cexpr "i"} boogie_si_record_i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5015, 9} true;
  assume {:verifier.code 0} true;
  $i21 := $eq.i32($i20, 32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5015, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i21 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5016, 5} true;
  assume {:verifier.code 0} true;
  $i22 := 65536;
  goto $bb3;
$bb2:
  assume !(($i21 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5435, 1} true;
  assume {:verifier.code 0} true;
  $r := $i22;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5021, 23} true;
  assume {:verifier.code 0} true;
  $i23 := $add.i32($i10, 5);
  // WARNING: %26 = add nsw i32 %11, 5, !dbg !4772, !verifier.code !4715
  call {:cexpr "__cil_tmp59"} boogie_si_record_i32($i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5022, 13} true;
  assume {:verifier.code 0} true;
  call $i24 := inb($i23);
  // WARNING: %27 = call zeroext i8 @inb(i32 %26), !dbg !4776, !verifier.code !4715
  call {:cexpr "tmp___1"} boogie_si_record_i8($i24);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5023, 17} true;
  assume {:verifier.code 0} true;
  $i25 := $zext.i8.i32($i24);
  // WARNING: %28 = zext i8 %27 to i32, !dbg !4779, !verifier.code !4715
  call {:cexpr "__cil_tmp60"} boogie_si_record_i32($i25);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5024, 19} true;
  assume {:verifier.code 0} true;
  $i26 := $or.i32($i25, $i20);
  // WARNING: %29 = or i32 %28, %21, !dbg !4782, !verifier.code !4715
  call {:cexpr "i"} boogie_si_record_i32($i26);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5026, 9} true;
  assume {:verifier.code 0} true;
  $i27 := $ne.i32($i26, 24);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5026, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i27 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5028, 5} true;
  assume {:verifier.code 0} true;
  call $i28 := printk.ref.i32(.str, $i26);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5029, 5} true;
  assume {:verifier.code 0} true;
  call ql_zap($p8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5031, 5} true;
  assume {:verifier.code 0} true;
  $i22 := 589824;
  goto $bb3;
$bb6:
  assume !(($i27 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5035, 9} true;
  assume {:verifier.code 0} true;
  $i29 := $and.i32($i17, 7);
  // WARNING: %35 = and i32 %18, 7, !dbg !4791, !verifier.code !4715
  call {:cexpr "j"} boogie_si_record_i32($i29);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5036, 9} true;
  assume {:verifier.code 0} true;
  $i30 := $ne.i32($i29, 3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5036, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i30 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5037, 11} true;
  assume {:verifier.code 0} true;
  $i31 := $ne.i32($i29, 4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5037, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb10, $bb11;
$bb9:
  assume !(($i30 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb10:
  assume ($i31 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5039, 27} true;
  assume {:verifier.code 0} true;
  $i32 := $add.i32($i10, 7);
  // WARNING: %40 = add nsw i32 %11, 7, !dbg !4799, !verifier.code !4715
  call {:cexpr "__cil_tmp61"} boogie_si_record_i32($i32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5040, 17} true;
  assume {:verifier.code 0} true;
  call $i33 := inb($i32);
  // WARNING: %41 = call zeroext i8 @inb(i32 %40), !dbg !4804, !verifier.code !4715
  call {:cexpr "tmp___2"} boogie_si_record_i8($i33);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5041, 21} true;
  assume {:verifier.code 0} true;
  $i34 := $zext.i8.i32($i33);
  // WARNING: %42 = zext i8 %41 to i32, !dbg !4807, !verifier.code !4715
  call {:cexpr "__cil_tmp62"} boogie_si_record_i32($i34);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5042, 33} true;
  assume {:verifier.code 0} true;
  $i35 := $and.i32($i34, 31);
  // WARNING: %43 = and i32 %42, 31, !dbg !4810, !verifier.code !4715
  call {:cexpr "__cil_tmp63"} boogie_si_record_i32($i35);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5043, 7} true;
  assume {:verifier.code 0} true;
  call $i36 := printk.ref.i32.i32.i32(.str.1, $i29, $i26, $i35);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5045, 7} true;
  assume {:verifier.code 0} true;
  call ql_zap($p8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5047, 7} true;
  assume {:verifier.code 0} true;
  $i22 := 458752;
  goto $bb3;
$bb11:
  assume !(($i31 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5051, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5056, 23} true;
  assume {:verifier.code 0} true;
  $i37 := $add.i32($i10, 7);
  // WARNING: %49 = add nsw i32 %11, 7, !dbg !4819, !verifier.code !4715
  call {:cexpr "__cil_tmp64"} boogie_si_record_i32($i37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5057, 13} true;
  assume {:verifier.code 0} true;
  call $i38 := inb($i37);
  // WARNING: %50 = call zeroext i8 @inb(i32 %49), !dbg !4823, !verifier.code !4715
  call {:cexpr "tmp___3"} boogie_si_record_i8($i38);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5060, 17} true;
  assume {:verifier.code 0} true;
  $i39 := $zext.i8.i32($i38);
  // WARNING: %51 = zext i8 %50 to i32, !dbg !4826, !verifier.code !4715
  call {:cexpr "__cil_tmp65"} boogie_si_record_i32($i39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5061, 29} true;
  assume {:verifier.code 0} true;
  $i40 := $and.i32($i39, 31);
  // WARNING: %52 = and i32 %51, 31, !dbg !4830, !verifier.code !4715
  call {:cexpr "__cil_tmp66"} boogie_si_record_i32($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5062, 19} true;
  assume {:verifier.code 0} true;
  $i41 := $ne.i32($i40, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5062, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i41 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5064, 25} true;
  assume {:verifier.code 0} true;
  $i42 := $add.i32($i10, 3);
  // WARNING: %55 = add nsw i32 %11, 3, !dbg !4836, !verifier.code !4715
  call {:cexpr "__cil_tmp67"} boogie_si_record_i32($i42);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5065, 5} true;
  assume {:verifier.code 0} true;
  call outb(1, $i42);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5067, 3} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i41 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5072, 12} true;
  assume {:verifier.code 0} true;
  call $i43 := scsi_bufflen($p0);
  // WARNING: %58 = call i32 @scsi_bufflen(%struct.scsi_cmnd* %0), !dbg !4843, !verifier.code !4715
  call {:cexpr "reqlen"} boogie_si_record_i32($i43);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5074, 14} true;
  assume {:verifier.code 0} true;
  $i44 := $ne.i32($i43, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5074, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i44 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5076, 25} true;
  assume {:verifier.code 0} true;
  $i45 := $add.i32($i10, 4);
  // WARNING: %61 = add nsw i32 %11, 4, !dbg !4850, !verifier.code !4715
  call {:cexpr "__cil_tmp68"} boogie_si_record_i32($i45);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5077, 16} true;
  assume {:verifier.code 0} true;
  call $i46 := inb($i45);
  // WARNING: %62 = call zeroext i8 @inb(i32 %61), !dbg !4855, !verifier.code !4715
  call {:cexpr "tmp___13"} boogie_si_record_i8($i46);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5078, 13} true;
  assume {:verifier.code 0} true;
  $i47 := $zext.i8.i32($i46);
  // WARNING: %63 = zext i8 %62 to i32, !dbg !4858, !verifier.code !4715
  call {:cexpr "phase"} boogie_si_record_i32($i47);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5081, 25} true;
  assume {:verifier.code 0} true;
  $i48 := $and.i32($i47, 6);
  // WARNING: %64 = and i32 %63, 6, !dbg !4861, !verifier.code !4715
  call {:cexpr "__cil_tmp69"} boogie_si_record_i32($i48);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5082, 21} true;
  assume {:verifier.code 0} true;
  $i49 := $eq.i32($i48, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5082, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb19, $bb20;
$bb18:
  assume !(($i44 == 1));
  assume {:verifier.code 0} true;
  goto $bb42;
$bb19:
  assume ($i49 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5084, 21} true;
  assume {:verifier.code 0} true;
  $i50 := $trunc.i32.i8($i43);
  // WARNING: %67 = trunc i32 %58 to i8, !dbg !4868, !verifier.code !4715
  call {:cexpr "__cil_tmp70"} boogie_si_record_i8($i50);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5085, 21} true;
  assume {:verifier.code 0} true;
  $i51 := $zext.i8.i32($i50);
  // WARNING: %68 = zext i8 %67 to i32, !dbg !4873, !verifier.code !4715
  call {:cexpr "__cil_tmp71"} boogie_si_record_i32($i51);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5086, 21} true;
  assume {:verifier.code 0} true;
  $i52 := $trunc.i32.i8($i51);
  // WARNING: %69 = trunc i32 %68 to i8, !dbg !4876, !verifier.code !4715
  call {:cexpr "__cil_tmp72"} boogie_si_record_i8($i52);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5087, 7} true;
  assume {:verifier.code 0} true;
  call outb($i52, $i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5088, 28} true;
  assume {:verifier.code 0} true;
  $i53 := $lshr.i32($i43, 8);
  // WARNING: %70 = lshr i32 %58, 8, !dbg !4880, !verifier.code !4715
  call {:cexpr "__cil_tmp73"} boogie_si_record_i32($i53);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5089, 21} true;
  assume {:verifier.code 0} true;
  $i54 := $trunc.i32.i8($i53);
  // WARNING: %71 = trunc i32 %70 to i8, !dbg !4883, !verifier.code !4715
  call {:cexpr "__cil_tmp74"} boogie_si_record_i8($i54);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5090, 21} true;
  assume {:verifier.code 0} true;
  $i55 := $zext.i8.i32($i54);
  // WARNING: %72 = zext i8 %71 to i32, !dbg !4886, !verifier.code !4715
  call {:cexpr "__cil_tmp75"} boogie_si_record_i32($i55);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5091, 21} true;
  assume {:verifier.code 0} true;
  $i56 := $trunc.i32.i8($i55);
  // WARNING: %73 = trunc i32 %72 to i8, !dbg !4889, !verifier.code !4715
  call {:cexpr "__cil_tmp76"} boogie_si_record_i8($i56);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5092, 27} true;
  assume {:verifier.code 0} true;
  $i57 := $add.i32($i10, 1);
  // WARNING: %74 = add nsw i32 %11, 1, !dbg !4892, !verifier.code !4715
  call {:cexpr "__cil_tmp77"} boogie_si_record_i32($i57);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5093, 7} true;
  assume {:verifier.code 0} true;
  call outb($i56, $i57);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5094, 28} true;
  assume {:verifier.code 0} true;
  $i58 := $lshr.i32($i43, 16);
  // WARNING: %75 = lshr i32 %58, 16, !dbg !4896, !verifier.code !4715
  call {:cexpr "__cil_tmp78"} boogie_si_record_i32($i58);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5095, 21} true;
  assume {:verifier.code 0} true;
  $i59 := $trunc.i32.i8($i58);
  // WARNING: %76 = trunc i32 %75 to i8, !dbg !4899, !verifier.code !4715
  call {:cexpr "__cil_tmp79"} boogie_si_record_i8($i59);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5096, 21} true;
  assume {:verifier.code 0} true;
  $i60 := $zext.i8.i32($i59);
  // WARNING: %77 = zext i8 %76 to i32, !dbg !4902, !verifier.code !4715
  call {:cexpr "__cil_tmp80"} boogie_si_record_i32($i60);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5097, 21} true;
  assume {:verifier.code 0} true;
  $i61 := $trunc.i32.i8($i60);
  // WARNING: %78 = trunc i32 %77 to i8, !dbg !4905, !verifier.code !4715
  call {:cexpr "__cil_tmp81"} boogie_si_record_i8($i61);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5098, 27} true;
  assume {:verifier.code 0} true;
  $i62 := $add.i32($i10, 14);
  // WARNING: %79 = add nsw i32 %11, 14, !dbg !4908, !verifier.code !4715
  call {:cexpr "__cil_tmp82"} boogie_si_record_i32($i62);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5099, 7} true;
  assume {:verifier.code 0} true;
  call outb($i61, $i62);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5100, 27} true;
  assume {:verifier.code 0} true;
  $i63 := $add.i32($i10, 3);
  // WARNING: %80 = add nsw i32 %11, 3, !dbg !4912, !verifier.code !4715
  call {:cexpr "__cil_tmp83"} boogie_si_record_i32($i63);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5101, 7} true;
  assume {:verifier.code 0} true;
  call outb($sub.i8(0, 112), $i63);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5102, 27} true;
  assume {:verifier.code 0} true;
  $i64 := $add.i32($i10, 13);
  // WARNING: %81 = add nsw i32 %11, 13, !dbg !4916, !verifier.code !4715
  call {:cexpr "__cil_tmp84"} boogie_si_record_i32($i64);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5103, 17} true;
  assume {:verifier.code 0} true;
  call $i65 := inb($i64);
  // WARNING: %82 = call zeroext i8 @inb(i32 %81), !dbg !4919, !verifier.code !4715
  call {:cexpr "tmp___4"} boogie_si_record_i8($i65);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5104, 21} true;
  assume {:verifier.code 0} true;
  $i66 := $zext.i8.i32($i65);
  // WARNING: %83 = zext i8 %82 to i32, !dbg !4922, !verifier.code !4715
  call {:cexpr "__cil_tmp85"} boogie_si_record_i32($i66);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5105, 33} true;
  assume {:verifier.code 0} true;
  $i67 := $or.i32($i66, 128);
  // WARNING: %84 = or i32 %83, 128, !dbg !4925, !verifier.code !4715
  call {:cexpr "__cil_tmp86"} boogie_si_record_i32($i67);
  // WARNING: call void @llvm.dbg.value(metadata i32 %84, i64 0, metadata !5158, metadata !4713), !dbg !5159, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5107, 21} true;
  assume {:verifier.code 0} true;
  $i68 := $trunc.i32.i8($i67);
  // WARNING: %85 = trunc i32 %84 to i8, !dbg !4930, !verifier.code !4715
  call {:cexpr "__cil_tmp88"} boogie_si_record_i8($i68);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5108, 27} true;
  assume {:verifier.code 0} true;
  $i69 := $add.i32($i10, 13);
  // WARNING: %86 = add nsw i32 %11, 13, !dbg !4933, !verifier.code !4715
  call {:cexpr "__cil_tmp89"} boogie_si_record_i32($i69);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5109, 7} true;
  assume {:verifier.code 0} true;
  call outb($i68, $i69);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5110, 21} true;
  assume {:verifier.code 0} true;
  $i70 := $trunc.i32.i8($i14);
  // WARNING: %87 = trunc i32 %15 to i8, !dbg !4937, !verifier.code !4715
  call {:cexpr "__cil_tmp90"} boogie_si_record_i8($i70);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5111, 21} true;
  assume {:verifier.code 0} true;
  $i71 := $sext.i8.i32($i70);
  // WARNING: %88 = sext i8 %87 to i32, !dbg !4940, !verifier.code !4715
  call {:cexpr "__cil_tmp91"} boogie_si_record_i32($i71);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5112, 33} true;
  assume {:verifier.code 0} true;
  $i72 := $or.i32($i71, $sub.i32(0, 76));
  // WARNING: %89 = or i32 %88, -76, !dbg !4943, !verifier.code !4715
  call {:cexpr "__cil_tmp92"} boogie_si_record_i32($i72);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5113, 21} true;
  assume {:verifier.code 0} true;
  $i73 := $trunc.i32.i8($i72);
  // WARNING: %90 = trunc i32 %89 to i8, !dbg !4946, !verifier.code !4715
  call {:cexpr "__cil_tmp93"} boogie_si_record_i8($i73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5114, 21} true;
  assume {:verifier.code 0} true;
  $i74 := $zext.i8.i32($i73);
  // WARNING: %91 = zext i8 %90 to i32, !dbg !4949, !verifier.code !4715
  call {:cexpr "__cil_tmp94"} boogie_si_record_i32($i74);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5115, 21} true;
  assume {:verifier.code 0} true;
  $i75 := $trunc.i32.i8($i74);
  // WARNING: %92 = trunc i32 %91 to i8, !dbg !4952, !verifier.code !4715
  call {:cexpr "__cil_tmp95"} boogie_si_record_i8($i75);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5116, 27} true;
  assume {:verifier.code 0} true;
  $i76 := $add.i32($i10, 13);
  // WARNING: %93 = add nsw i32 %11, 13, !dbg !4955, !verifier.code !4715
  call {:cexpr "__cil_tmp96"} boogie_si_record_i32($i76);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5117, 7} true;
  assume {:verifier.code 0} true;
  call outb($i75, $i76);
  // WARNING: call void @outb(i8 zeroext %92, i32 %93), !dbg !4958, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5119, 12} true;
  assume {:verifier.code 0} true;
  call $p77 := scsi_sglist($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5175, 17} true;
  assume {:verifier.code 0} true;
  call $i78 := scsi_sg_count($p0);
  // WARNING: %95 = call i32 @scsi_sg_count(%struct.scsi_cmnd* %0), !dbg !4962, !verifier.code !4715
  call {:cexpr "tmp___9"} boogie_si_record_i32($i78);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5177, 19} true;
  assume {:verifier.code 0} true;
  $i79 := $ugt.i32($i78, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5177, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i79} true;
  goto $bb21, $bb22;
$bb20:
  assume !(($i49 == 1));
  assume {:verifier.code 0} true;
  goto $bb41;
$bb21:
  assume ($i79 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5177, 11} true;
  assume {:verifier.code 0} true;
  $i80, $p81 := 0, $p77;
  goto $bb24;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5177, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i79 == 1));
  goto $bb23;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5180, 9} true;
  assume {:verifier.code 0} true;
  goto $bb34;
$bb24:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5178, 9} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5124, 21} true;
  assume {:verifier.code 0} true;
  $i82 := $p2i.ref.i64($p8);
  // WARNING: %98 = ptrtoint %struct.qlogicfas408_priv* %9 to i64, !dbg !4969, !verifier.code !4715
  call {:cexpr "__cil_tmp97"} boogie_si_record_i64($i82);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5125, 33} true;
  assume {:verifier.code 0} true;
  $i83 := $add.i64($i82, 8);
  // WARNING: %99 = add i64 %98, 8, !dbg !4973, !verifier.code !4715
  call {:cexpr "__cil_tmp98"} boogie_si_record_i64($i83);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5126, 23} true;
  assume {:verifier.code 0} true;
  $p84 := $i2p.i64.ref($i83);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5126, 21} true;
  assume {:verifier.code 0} true;
  $i85 := $load.i32($M.0, $p84);
  // WARNING: %101 = load i32, i32* %100, align 4, !dbg !4977, !verifier.code !4715
  call {:cexpr "__cil_tmp99"} boogie_si_record_i32($i85);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5127, 23} true;
  assume {:verifier.code 0} true;
  $i86 := $ne.i32($i85, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5127, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i86} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i86 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5129, 30} true;
  assume {:verifier.code 0} true;
  $i87 := $add.i32($i10, 13);
  // WARNING: %104 = add nsw i32 %11, 13, !dbg !4983, !verifier.code !4715
  call {:cexpr "__cil_tmp100"} boogie_si_record_i32($i87);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5130, 19} true;
  assume {:verifier.code 0} true;
  call $i88 := inb($i87);
  // WARNING: %105 = call zeroext i8 @inb(i32 %104), !dbg !4988, !verifier.code !4715
  call {:cexpr "tmp___5"} boogie_si_record_i8($i88);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5131, 24} true;
  assume {:verifier.code 0} true;
  $i89 := $zext.i8.i32($i88);
  // WARNING: %106 = zext i8 %105 to i32, !dbg !4991, !verifier.code !4715
  call {:cexpr "__cil_tmp101"} boogie_si_record_i32($i89);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5132, 37} true;
  assume {:verifier.code 0} true;
  $i90 := $and.i32($i89, 127);
  // WARNING: %107 = and i32 %106, 127, !dbg !4994, !verifier.code !4715
  call {:cexpr "__cil_tmp102"} boogie_si_record_i32($i90);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5133, 24} true;
  assume {:verifier.code 0} true;
  $i91 := $trunc.i32.i8($i90);
  // WARNING: %108 = trunc i32 %107 to i8, !dbg !4997, !verifier.code !4715
  call {:cexpr "__cil_tmp103"} boogie_si_record_i8($i91);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5134, 30} true;
  assume {:verifier.code 0} true;
  $i92 := $add.i32($i10, 13);
  // WARNING: %109 = add nsw i32 %11, 13, !dbg !5000, !verifier.code !4715
  call {:cexpr "__cil_tmp104"} boogie_si_record_i32($i92);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5135, 9} true;
  assume {:verifier.code 0} true;
  call outb($i91, $i92);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5136, 30} true;
  assume {:verifier.code 0} true;
  $i93 := $add.i32($i10, 13);
  // WARNING: %110 = add nsw i32 %11, 13, !dbg !5004, !verifier.code !4715
  call {:cexpr "__cil_tmp105"} boogie_si_record_i32($i93);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5137, 9} true;
  assume {:verifier.code 0} true;
  call outb(4, $i93);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5140, 24} true;
  assume {:verifier.code 0} true;
  $i94 := $p2i.ref.i64($p8);
  // WARNING: %111 = ptrtoint %struct.qlogicfas408_priv* %9 to i64, !dbg !5008, !verifier.code !4715
  call {:cexpr "__cil_tmp106"} boogie_si_record_i64($i94);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5141, 37} true;
  assume {:verifier.code 0} true;
  $i95 := $add.i64($i94, 8);
  // WARNING: %112 = add i64 %111, 8, !dbg !5012, !verifier.code !4715
  call {:cexpr "__cil_tmp107"} boogie_si_record_i64($i95);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5142, 26} true;
  assume {:verifier.code 0} true;
  $p96 := $i2p.i64.ref($i95);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5142, 24} true;
  assume {:verifier.code 0} true;
  $i97 := $load.i32($M.0, $p96);
  // WARNING: %114 = load i32, i32* %113, align 4, !dbg !5016, !verifier.code !4715
  call {:cexpr "__cil_tmp108"} boogie_si_record_i32($i97);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5143, 26} true;
  assume {:verifier.code 0} true;
  $i98 := $eq.i32($i97, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5143, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i98} true;
  goto $bb28, $bb29;
$bb27:
  assume !(($i86 == 1));
  assume {:verifier.code 0} true;
  goto $bb31;
$bb28:
  assume ($i98 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5145, 9} true;
  assume {:verifier.code 0} true;
  $i99 := 327680;
  goto $bb30;
$bb29:
  assume !(($i98 == 1));
  assume {:verifier.code 0} true;
  $i99 := 524288;
  goto $bb30;
$bb30:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5149, 9} true;
  assume {:verifier.code 0} true;
  $i22 := $i99;
  goto $bb3;
$bb31:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5155, 17} true;
  assume {:verifier.code 0} true;
  call $p100 := sg_virt($p81);
  // WARNING: call void @llvm.dbg.value(metadata i8* %121, i64 0, metadata !5263, metadata !4713), !dbg !5264, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5158, 22} true;
  assume {:verifier.code 0} true;
  $i101 := $p2i.ref.i64($p81);
  // WARNING: %122 = ptrtoint %struct.scatterlist* %.0715 to i64, !dbg !5035, !verifier.code !4715
  call {:cexpr "__cil_tmp110"} boogie_si_record_i64($i101);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5159, 35} true;
  assume {:verifier.code 0} true;
  $i102 := $add.i64($i101, 20);
  // WARNING: %123 = add i64 %122, 20, !dbg !5038, !verifier.code !4715
  call {:cexpr "__cil_tmp111"} boogie_si_record_i64($i102);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5160, 24} true;
  assume {:verifier.code 0} true;
  $p103 := $i2p.i64.ref($i102);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5160, 22} true;
  assume {:verifier.code 0} true;
  $i104 := $load.i32($M.0, $p103);
  // WARNING: %125 = load i32, i32* %124, align 4, !dbg !5042, !verifier.code !4715
  call {:cexpr "__cil_tmp112"} boogie_si_record_i32($i104);
  // WARNING: call void @llvm.dbg.value(metadata i32 %125, i64 0, metadata !5275, metadata !4713), !dbg !5276, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5162, 17} true;
  assume {:verifier.code 0} true;
  call $i105 := ql_pdma($p8, $i47, $p100, $i104);
  // WARNING: %126 = call i32 @ql_pdma(%struct.qlogicfas408_priv* %9, i32 %63, i8* %121, i32 %125), !dbg !5047, !verifier.code !4715
  call {:cexpr "tmp___8"} boogie_si_record_i32($i105);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5164, 19} true;
  assume {:verifier.code 0} true;
  $i106 := $ne.i32($i105, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5164, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i106} true;
  goto $bb32, $bb33;
$bb32:
  assume ($i106 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5165, 9} true;
  assume {:verifier.code 0} true;
  goto $bb34;
$bb33:
  assume !(($i106 == 1));
  assume {:verifier.code 0} true;
  goto $bb35;
$bb34:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5184, 28} true;
  assume {:verifier.code 0} true;
  $i111 := $add.i32($i10, 13);
  // WARNING: %138 = add nsw i32 %11, 13, !dbg !5062, !verifier.code !4715
  call {:cexpr "__cil_tmp114"} boogie_si_record_i32($i111);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5185, 18} true;
  assume {:verifier.code 0} true;
  call $i112 := inb($i111);
  // WARNING: %139 = call zeroext i8 @inb(i32 %138), !dbg !5066, !verifier.code !4715
  call {:cexpr "tmp___10"} boogie_si_record_i8($i112);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5186, 22} true;
  assume {:verifier.code 0} true;
  $i113 := $zext.i8.i32($i112);
  // WARNING: %140 = zext i8 %139 to i32, !dbg !5069, !verifier.code !4715
  call {:cexpr "__cil_tmp115"} boogie_si_record_i32($i113);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5187, 35} true;
  assume {:verifier.code 0} true;
  $i114 := $and.i32($i113, 127);
  // WARNING: %141 = and i32 %140, 127, !dbg !5072, !verifier.code !4715
  call {:cexpr "__cil_tmp116"} boogie_si_record_i32($i114);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5188, 22} true;
  assume {:verifier.code 0} true;
  $i115 := $trunc.i32.i8($i114);
  // WARNING: %142 = trunc i32 %141 to i8, !dbg !5075, !verifier.code !4715
  call {:cexpr "__cil_tmp117"} boogie_si_record_i8($i115);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5189, 28} true;
  assume {:verifier.code 0} true;
  $i116 := $add.i32($i10, 13);
  // WARNING: %143 = add nsw i32 %11, 13, !dbg !5078, !verifier.code !4715
  call {:cexpr "__cil_tmp118"} boogie_si_record_i32($i116);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5190, 7} true;
  assume {:verifier.code 0} true;
  call outb($i115, $i116);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5191, 28} true;
  assume {:verifier.code 0} true;
  $i117 := $add.i32($i10, 13);
  // WARNING: %144 = add nsw i32 %11, 13, !dbg !5082, !verifier.code !4715
  call {:cexpr "__cil_tmp119"} boogie_si_record_i32($i117);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5192, 7} true;
  assume {:verifier.code 0} true;
  call outb(4, $i117);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5193, 18} true;
  assume {:verifier.code 0} true;
  call $i118 := ql_wai($p8);
  // WARNING: %145 = call i32 @ql_wai(%struct.qlogicfas408_priv* %9), !dbg !5086, !verifier.code !4715
  call {:cexpr "tmp___11"} boogie_si_record_i32($i118);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5194, 11} true;
  assume {:verifier.code 0} true;
  $i119 := $sext.i32.i64($i118);
  // WARNING: %146 = sext i32 %145 to i64, !dbg !5089, !verifier.code !4715
  call {:cexpr "k"} boogie_si_record_i64($i119);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5196, 13} true;
  assume {:verifier.code 0} true;
  $i120 := $ne.i64($i119, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5196, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i120} true;
  goto $bb38, $bb39;
$bb35:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5170, 13} true;
  assume {:verifier.code 0} true;
  $i107 := $add.i32($i80, 1);
  // WARNING: %131 = add i32 %.0216, 1, !dbg !5055, !verifier.code !4715
  call {:cexpr "i"} boogie_si_record_i32($i107);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5171, 12} true;
  assume {:verifier.code 0} true;
  call $p108 := sg_next($p81);
  assume $isExternal($p108);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5175, 17} true;
  assume {:verifier.code 0} true;
  call $i109 := scsi_sg_count($p0);
  // WARNING: %133 = call i32 @scsi_sg_count(%struct.scsi_cmnd* %0), !dbg !4962, !verifier.code !4715
  call {:cexpr "tmp___9"} boogie_si_record_i32($i109);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5177, 19} true;
  assume {:verifier.code 0} true;
  $i110 := $ugt.i32($i109, $i107);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5177, 11} true;
  assume {:verifier.code 0} true;
  $i80, $p81 := $i107, $p108;
  assume {:branchcond $i110} true;
  goto $bb36, $bb37;
$bb36:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5177, 11} true;
  assume {:verifier.code 0} true;
  assume ($i110 == 1);
  goto $bb24;
$bb37:
  assume !(($i110 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5177, 11} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb38:
  assume ($i120 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5198, 24} true;
  assume {:verifier.code 0} true;
  $i121 := $trunc.i64.i32($i119);
  // WARNING: %149 = trunc i64 %146 to i32, !dbg !5095, !verifier.code !4715
  call {:cexpr "__cil_tmp120"} boogie_si_record_i32($i121);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5199, 30} true;
  assume {:verifier.code 0} true;
  $i122 := $shl.i32($i121, 16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5199, 9} true;
  assume {:verifier.code 0} true;
  $i22 := $i122;
  goto $bb3;
$bb39:
  assume !(($i120 == 1));
  assume {:verifier.code 0} true;
  goto $bb40;
$bb40:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5205, 28} true;
  assume {:verifier.code 0} true;
  $i123 := $add.i32($i10, 5);
  // WARNING: %153 = add nsw i32 %11, 5, !dbg !5102, !verifier.code !4715
  call {:cexpr "__cil_tmp121"} boogie_si_record_i32($i123);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5206, 18} true;
  assume {:verifier.code 0} true;
  call $i124 := inb($i123);
  // WARNING: %154 = call zeroext i8 @inb(i32 %153), !dbg !5106, !verifier.code !4715
  call {:cexpr "tmp___12"} boogie_si_record_i8($i124);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5209, 5} true;
  assume {:verifier.code 0} true;
  goto $bb41;
$bb41:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5213, 3} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb42:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5216, 34} true;
  assume {:verifier.code 0} true;
  $i125 := $load.i64($M.0, jiffies);
  // WARNING: %159 = load volatile i64, i64* @jiffies, align 8, !dbg !5111, !verifier.code !4715
  call {:cexpr "__cil_tmp122"} boogie_si_record_i64($i125);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5217, 20} true;
  assume {:verifier.code 0} true;
  $i126 := $add.i64($i125, 5000000);
  // WARNING: %160 = add i64 %159, 5000000, !dbg !5114, !verifier.code !4715
  call {:cexpr "k"} boogie_si_record_i64($i126);
  // WARNING: call void @llvm.dbg.value(metadata i64 %160, i64 0, metadata !5322, metadata !4713), !dbg !5323, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5226, 25} true;
  assume {:verifier.code 0} true;
  $i127 := $load.i64($M.0, jiffies);
  // WARNING: %161 = load volatile i64, i64* @jiffies, align 8, !dbg !5117, !verifier.code !4715
  call {:cexpr "__cil_tmp124"} boogie_si_record_i64($i127);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5227, 31} true;
  assume {:verifier.code 0} true;
  $i128 := $sub.i64($i127, $i126);
  // WARNING: %162 = sub nsw i64 %161, %160, !dbg !5121, !verifier.code !4715
  call {:cexpr "__cil_tmp125"} boogie_si_record_i64($i128);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5228, 20} true;
  assume {:verifier.code 0} true;
  $i129 := $slt.i64($i128, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5228, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i129} true;
  goto $bb43, $bb44;
$bb43:
  assume ($i129 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5228, 7} true;
  assume {:verifier.code 0} true;
  goto $bb46;
$bb44:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5228, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i129 == 1));
  goto $bb45;
$bb45:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5252, 5} true;
  assume {:verifier.code 0} true;
  goto $bb54;
$bb46:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5230, 20} true;
  assume {:verifier.code 0} true;
  $i133 := $p2i.ref.i64($p8);
  // WARNING: %169 = ptrtoint %struct.qlogicfas408_priv* %9 to i64, !dbg !5129, !verifier.code !4715
  call {:cexpr "__cil_tmp126"} boogie_si_record_i64($i133);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5231, 33} true;
  assume {:verifier.code 0} true;
  $i134 := $add.i64($i133, 8);
  // WARNING: %170 = add i64 %169, 8, !dbg !5134, !verifier.code !4715
  call {:cexpr "__cil_tmp127"} boogie_si_record_i64($i134);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5232, 22} true;
  assume {:verifier.code 0} true;
  $p135 := $i2p.i64.ref($i134);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5232, 20} true;
  assume {:verifier.code 0} true;
  $i136 := $load.i32($M.0, $p135);
  // WARNING: %172 = load i32, i32* %171, align 4, !dbg !5138, !verifier.code !4715
  call {:cexpr "__cil_tmp128"} boogie_si_record_i32($i136);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5233, 22} true;
  assume {:verifier.code 0} true;
  $i137 := $eq.i32($i136, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5233, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i137} true;
  goto $bb50, $bb51;
$bb47:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5221, 3} true;
  assume {:verifier.code 0} true;
  call cpu_relax();
  // WARNING: call void @cpu_relax(), !dbg !5127, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5226, 25} true;
  assume {:verifier.code 0} true;
  $i130 := $load.i64($M.0, jiffies);
  // WARNING: %165 = load volatile i64, i64* @jiffies, align 8, !dbg !5117, !verifier.code !4715
  call {:cexpr "__cil_tmp124"} boogie_si_record_i64($i130);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5227, 31} true;
  assume {:verifier.code 0} true;
  $i131 := $sub.i64($i130, $i126);
  // WARNING: %166 = sub nsw i64 %165, %160, !dbg !5121, !verifier.code !4715
  call {:cexpr "__cil_tmp125"} boogie_si_record_i64($i131);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5228, 20} true;
  assume {:verifier.code 0} true;
  $i132 := $slt.i64($i131, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5228, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i132} true;
  goto $bb48, $bb49;
$bb48:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5228, 7} true;
  assume {:verifier.code 0} true;
  assume ($i132 == 1);
  goto $bb46;
$bb49:
  assume !(($i132 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5228, 7} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb50:
  assume ($i137 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5235, 28} true;
  assume {:verifier.code 0} true;
  $i138 := $add.i32($i10, 4);
  // WARNING: %175 = add nsw i32 %11, 4, !dbg !5144, !verifier.code !4715
  call {:cexpr "__cil_tmp129"} boogie_si_record_i32($i138);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5236, 18} true;
  assume {:verifier.code 0} true;
  call $i139 := inb($i138);
  // WARNING: %176 = call zeroext i8 @inb(i32 %175), !dbg !5149, !verifier.code !4715
  call {:cexpr "tmp___14"} boogie_si_record_i8($i139);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5239, 22} true;
  assume {:verifier.code 0} true;
  $i140 := $zext.i8.i32($i139);
  // WARNING: %177 = zext i8 %176 to i32, !dbg !5152, !verifier.code !4715
  call {:cexpr "__cil_tmp130"} boogie_si_record_i32($i140);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5240, 35} true;
  assume {:verifier.code 0} true;
  $i141 := $and.i32($i140, 6);
  // WARNING: %178 = and i32 %177, 6, !dbg !5156, !verifier.code !4715
  call {:cexpr "__cil_tmp131"} boogie_si_record_i32($i141);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5241, 24} true;
  assume {:verifier.code 0} true;
  $i142 := $eq.i32($i141, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5241, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i142} true;
  goto $bb52, $bb53;
$bb51:
  assume !(($i137 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5248, 7} true;
  assume {:verifier.code 0} true;
  goto $bb54;
$bb52:
  assume ($i142 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5242, 9} true;
  assume {:verifier.code 0} true;
  goto $bb47;
$bb53:
  assume !(($i142 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5244, 9} true;
  assume {:verifier.code 0} true;
  goto $bb54;
$bb54:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5258, 25} true;
  assume {:verifier.code 0} true;
  $i143 := $load.i64($M.0, jiffies);
  // WARNING: %185 = load volatile i64, i64* @jiffies, align 8, !dbg !5172, !verifier.code !4715
  call {:cexpr "__cil_tmp133"} boogie_si_record_i64($i143);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5259, 31} true;
  assume {:verifier.code 0} true;
  $i144 := $sub.i64($i143, $i126);
  // WARNING: %186 = sub nsw i64 %185, %160, !dbg !5176, !verifier.code !4715
  call {:cexpr "__cil_tmp134"} boogie_si_record_i64($i144);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5260, 20} true;
  assume {:verifier.code 0} true;
  $i145 := $sge.i64($i144, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5260, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i145} true;
  goto $bb55, $bb56;
$bb55:
  assume ($i145 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5262, 5} true;
  assume {:verifier.code 0} true;
  call ql_zap($p8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5264, 5} true;
  assume {:verifier.code 0} true;
  $i22 := 196608;
  goto $bb3;
$bb56:
  assume !(($i145 == 1));
  assume {:verifier.code 0} true;
  goto $bb57;
$bb57:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5276, 24} true;
  assume {:verifier.code 0} true;
  $i146 := $add.i32($i10, 5);
  // WARNING: %191 = add nsw i32 %11, 5, !dbg !5186, !verifier.code !4715
  call {:cexpr "__cil_tmp135"} boogie_si_record_i32($i146);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5277, 14} true;
  assume {:verifier.code 0} true;
  call $i147 := inb($i146);
  // WARNING: %192 = call zeroext i8 @inb(i32 %191), !dbg !5190, !verifier.code !4715
  call {:cexpr "tmp___15"} boogie_si_record_i8($i147);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5280, 18} true;
  assume {:verifier.code 0} true;
  $i148 := $zext.i8.i32($i147);
  // WARNING: %193 = zext i8 %192 to i32, !dbg !5193, !verifier.code !4715
  call {:cexpr "__cil_tmp136"} boogie_si_record_i32($i148);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5281, 20} true;
  assume {:verifier.code 0} true;
  $i149 := $ne.i32($i148, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5281, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i149} true;
  goto $bb58, $bb59;
$bb58:
  assume ($i149 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5281, 7} true;
  assume {:verifier.code 0} true;
  goto $bb61;
$bb59:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5281, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i149 == 1));
  goto $bb60;
$bb60:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5284, 5} true;
  assume {:verifier.code 0} true;
  goto $bb65;
$bb61:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5282, 5} true;
  assume {:verifier.code 0} true;
  goto $bb62;
$bb62:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5272, 3} true;
  assume {:verifier.code 0} true;
  call cpu_relax();
  // WARNING: call void @cpu_relax(), !dbg !5200, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5277, 14} true;
  assume {:verifier.code 0} true;
  call $i150 := inb($i146);
  // WARNING: %196 = call zeroext i8 @inb(i32 %191), !dbg !5190, !verifier.code !4715
  call {:cexpr "tmp___15"} boogie_si_record_i8($i150);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5280, 18} true;
  assume {:verifier.code 0} true;
  $i151 := $zext.i8.i32($i150);
  // WARNING: %197 = zext i8 %196 to i32, !dbg !5193, !verifier.code !4715
  call {:cexpr "__cil_tmp136"} boogie_si_record_i32($i151);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5281, 20} true;
  assume {:verifier.code 0} true;
  $i152 := $ne.i32($i151, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5281, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i152} true;
  goto $bb63, $bb64;
$bb63:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5281, 7} true;
  assume {:verifier.code 0} true;
  assume ($i152 == 1);
  goto $bb61;
$bb64:
  assume !(($i152 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5281, 7} true;
  assume {:verifier.code 0} true;
  goto $bb60;
$bb65:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5289, 18} true;
  assume {:verifier.code 0} true;
  $i153 := $p2i.ref.i64($p8);
  // WARNING: %202 = ptrtoint %struct.qlogicfas408_priv* %9 to i64, !dbg !5206, !verifier.code !4715
  call {:cexpr "__cil_tmp137"} boogie_si_record_i64($i153);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5290, 31} true;
  assume {:verifier.code 0} true;
  $i154 := $add.i64($i153, 8);
  // WARNING: %203 = add i64 %202, 8, !dbg !5210, !verifier.code !4715
  call {:cexpr "__cil_tmp138"} boogie_si_record_i64($i154);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5291, 20} true;
  assume {:verifier.code 0} true;
  $p155 := $i2p.i64.ref($i154);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5291, 18} true;
  assume {:verifier.code 0} true;
  $i156 := $load.i32($M.0, $p155);
  // WARNING: %205 = load i32, i32* %204, align 4, !dbg !5214, !verifier.code !4715
  call {:cexpr "__cil_tmp139"} boogie_si_record_i32($i156);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5292, 20} true;
  assume {:verifier.code 0} true;
  $i157 := $ne.i32($i156, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5292, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i157} true;
  goto $bb66, $bb67;
$bb66:
  assume ($i157 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5294, 20} true;
  assume {:verifier.code 0} true;
  $i158 := $p2i.ref.i64($p8);
  // WARNING: %208 = ptrtoint %struct.qlogicfas408_priv* %9 to i64, !dbg !5220, !verifier.code !4715
  call {:cexpr "__cil_tmp140"} boogie_si_record_i64($i158);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5295, 33} true;
  assume {:verifier.code 0} true;
  $i159 := $add.i64($i158, 8);
  // WARNING: %209 = add i64 %208, 8, !dbg !5225, !verifier.code !4715
  call {:cexpr "__cil_tmp141"} boogie_si_record_i64($i159);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5296, 22} true;
  assume {:verifier.code 0} true;
  $p160 := $i2p.i64.ref($i159);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5296, 20} true;
  assume {:verifier.code 0} true;
  $i161 := $load.i32($M.0, $p160);
  // WARNING: %211 = load i32, i32* %210, align 4, !dbg !5229, !verifier.code !4715
  call {:cexpr "__cil_tmp142"} boogie_si_record_i32($i161);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5297, 22} true;
  assume {:verifier.code 0} true;
  $i162 := $eq.i32($i161, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5297, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i162} true;
  goto $bb68, $bb69;
$bb67:
  assume !(($i157 == 1));
  assume {:verifier.code 0} true;
  goto $bb71;
$bb68:
  assume ($i162 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5299, 5} true;
  assume {:verifier.code 0} true;
  $i163 := 327680;
  goto $bb70;
$bb69:
  assume !(($i162 == 1));
  assume {:verifier.code 0} true;
  $i163 := 524288;
  goto $bb70;
$bb70:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5303, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $i163;
  goto $bb3;
$bb71:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5309, 24} true;
  assume {:verifier.code 0} true;
  $i164 := $add.i32($i10, 3);
  // WARNING: %218 = add nsw i32 %11, 3, !dbg !5240, !verifier.code !4715
  call {:cexpr "__cil_tmp143"} boogie_si_record_i32($i164);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5310, 3} true;
  assume {:verifier.code 0} true;
  call outb(17, $i164);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5311, 14} true;
  assume {:verifier.code 0} true;
  call $i165 := ql_wai($p8);
  // WARNING: %219 = call i32 @ql_wai(%struct.qlogicfas408_priv* %9), !dbg !5245, !verifier.code !4715
  call {:cexpr "tmp___17"} boogie_si_record_i32($i165);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5312, 7} true;
  assume {:verifier.code 0} true;
  $i166 := $sext.i32.i64($i165);
  // WARNING: %220 = sext i32 %219 to i64, !dbg !5248, !verifier.code !4715
  call {:cexpr "k"} boogie_si_record_i64($i166);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5314, 9} true;
  assume {:verifier.code 0} true;
  $i167 := $ne.i64($i166, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5314, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i167} true;
  goto $bb72, $bb73;
$bb72:
  assume ($i167 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5316, 20} true;
  assume {:verifier.code 0} true;
  $i168 := $trunc.i64.i32($i166);
  // WARNING: %223 = trunc i64 %220 to i32, !dbg !5252, !verifier.code !4715
  call {:cexpr "__cil_tmp144"} boogie_si_record_i32($i168);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5317, 26} true;
  assume {:verifier.code 0} true;
  $i169 := $shl.i32($i168, 16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5317, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $i169;
  goto $bb3;
$bb73:
  assume !(($i167 == 1));
  assume {:verifier.code 0} true;
  goto $bb74;
$bb74:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5323, 24} true;
  assume {:verifier.code 0} true;
  $i170 := $add.i32($i10, 5);
  // WARNING: %227 = add nsw i32 %11, 5, !dbg !5259, !verifier.code !4715
  call {:cexpr "__cil_tmp145"} boogie_si_record_i32($i170);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5324, 14} true;
  assume {:verifier.code 0} true;
  call $i171 := inb($i170);
  // WARNING: %228 = call zeroext i8 @inb(i32 %227), !dbg !5263, !verifier.code !4715
  call {:cexpr "tmp___18"} boogie_si_record_i8($i171);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5325, 7} true;
  assume {:verifier.code 0} true;
  $i172 := $zext.i8.i32($i171);
  // WARNING: %229 = zext i8 %228 to i32, !dbg !5266, !verifier.code !4715
  call {:cexpr "i"} boogie_si_record_i32($i172);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5326, 24} true;
  assume {:verifier.code 0} true;
  $i173 := $add.i32($i10, 7);
  // WARNING: %230 = add nsw i32 %11, 7, !dbg !5267, !verifier.code !4715
  call {:cexpr "__cil_tmp146"} boogie_si_record_i32($i173);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5327, 14} true;
  assume {:verifier.code 0} true;
  call $i174 := inb($i173);
  // WARNING: %231 = call zeroext i8 @inb(i32 %230), !dbg !5270, !verifier.code !4715
  call {:cexpr "tmp___19"} boogie_si_record_i8($i174);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5328, 18} true;
  assume {:verifier.code 0} true;
  $i175 := $zext.i8.i32($i174);
  // WARNING: %232 = zext i8 %231 to i32, !dbg !5273, !verifier.code !4715
  call {:cexpr "__cil_tmp147"} boogie_si_record_i32($i175);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5329, 20} true;
  assume {:verifier.code 0} true;
  $i176 := $and.i32($i175, 31);
  // WARNING: %233 = and i32 %232, 31, !dbg !5276, !verifier.code !4715
  call {:cexpr "j"} boogie_si_record_i32($i176);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5330, 24} true;
  assume {:verifier.code 0} true;
  $i177 := $add.i32($i10, 2);
  // WARNING: %234 = add nsw i32 %11, 2, !dbg !5277, !verifier.code !4715
  call {:cexpr "__cil_tmp148"} boogie_si_record_i32($i177);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5331, 14} true;
  assume {:verifier.code 0} true;
  call $i178 := inb($i177);
  // WARNING: %235 = call zeroext i8 @inb(i32 %234), !dbg !5280, !verifier.code !4715
  call {:cexpr "tmp___20"} boogie_si_record_i8($i178);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5332, 12} true;
  assume {:verifier.code 0} true;
  $i179 := $zext.i8.i32($i178);
  // WARNING: %236 = zext i8 %235 to i32, !dbg !5283, !verifier.code !4715
  call {:cexpr "status"} boogie_si_record_i32($i179);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5333, 24} true;
  assume {:verifier.code 0} true;
  $i180 := $add.i32($i10, 2);
  // WARNING: %237 = add nsw i32 %11, 2, !dbg !5286, !verifier.code !4715
  call {:cexpr "__cil_tmp149"} boogie_si_record_i32($i180);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5334, 14} true;
  assume {:verifier.code 0} true;
  call $i181 := inb($i180);
  // WARNING: %238 = call zeroext i8 @inb(i32 %237), !dbg !5289, !verifier.code !4715
  call {:cexpr "tmp___21"} boogie_si_record_i8($i181);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5335, 13} true;
  assume {:verifier.code 0} true;
  $i182 := $zext.i8.i32($i181);
  // WARNING: %239 = zext i8 %238 to i32, !dbg !5292, !verifier.code !4715
  call {:cexpr "message"} boogie_si_record_i32($i182);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5337, 9} true;
  assume {:verifier.code 0} true;
  $i183 := $ne.i32($i172, 8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5337, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i183} true;
  goto $bb75, $bb76;
$bb75:
  assume ($i183 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5338, 5} true;
  assume {:verifier.code 0} true;
  goto $bb77;
$bb76:
  assume !(($i183 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5340, 9} true;
  assume {:verifier.code 0} true;
  $i184 := $ne.i32($i176, 2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5340, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i184} true;
  goto $bb78, $bb79;
$bb77:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5342, 11} true;
  assume {:verifier.code 0} true;
  $i185 := $ne.i32($i172, 16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5342, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i185} true;
  goto $bb80, $bb81;
$bb78:
  assume ($i184 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5340, 16} true;
  assume {:verifier.code 0} true;
  goto $bb77;
$bb79:
  assume !(($i184 == 1));
  assume {:verifier.code 0} true;
  $i191 := 0;
  goto $bb86;
$bb80:
  assume ($i185 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5344, 7} true;
  assume {:verifier.code 0} true;
  call $i186 := printk.ref.i32.i32(.str.2, $i172, $i176);
  // WARNING: %248 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.2, i32 0, i32 0), i32 %229, i32 %233), !dbg !5309, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5347, 5} true;
  assume {:verifier.code 0} true;
  $i187 := 7;
  goto $bb82;
$bb81:
  assume !(($i185 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5348, 11} true;
  assume {:verifier.code 0} true;
  $i188 := $ne.i32($i176, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5348, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i188} true;
  goto $bb83, $bb84;
$bb82:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5356, 3} true;
  assume {:verifier.code 0} true;
  $i191 := $i187;
  goto $bb86;
$bb83:
  assume ($i188 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5350, 7} true;
  assume {:verifier.code 0} true;
  call $i189 := printk.ref.i32.i32(.str.2, $i172, $i176);
  // WARNING: %252 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.2, i32 0, i32 0), i32 %229, i32 %233), !dbg !5316, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5353, 5} true;
  assume {:verifier.code 0} true;
  $i190 := 7;
  goto $bb85;
$bb84:
  assume !(($i188 == 1));
  assume {:verifier.code 0} true;
  $i190 := 0;
  goto $bb85;
$bb85:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i187 := $i190;
  goto $bb82;
$bb86:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb87;
$bb87:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5360, 24} true;
  assume {:verifier.code 0} true;
  $i192 := $add.i32($i10, 3);
  // WARNING: %259 = add nsw i32 %11, 3, !dbg !5321, !verifier.code !4715
  call {:cexpr "__cil_tmp150"} boogie_si_record_i32($i192);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5361, 3} true;
  assume {:verifier.code 0} true;
  call outb(18, $i192);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5362, 14} true;
  assume {:verifier.code 0} true;
  call $i193 := ql_wai($p8);
  // WARNING: %260 = call i32 @ql_wai(%struct.qlogicfas408_priv* %9), !dbg !5326, !verifier.code !4715
  call {:cexpr "tmp___22"} boogie_si_record_i32($i193);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5363, 7} true;
  assume {:verifier.code 0} true;
  $i194 := $sext.i32.i64($i193);
  // WARNING: %261 = sext i32 %260 to i64, !dbg !5329, !verifier.code !4715
  call {:cexpr "k"} boogie_si_record_i64($i194);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5365, 9} true;
  assume {:verifier.code 0} true;
  $i195 := $ne.i64($i194, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5365, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i195} true;
  goto $bb88, $bb89;
$bb88:
  assume ($i195 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5367, 20} true;
  assume {:verifier.code 0} true;
  $i196 := $trunc.i64.i32($i194);
  // WARNING: %264 = trunc i64 %261 to i32, !dbg !5333, !verifier.code !4715
  call {:cexpr "__cil_tmp151"} boogie_si_record_i32($i196);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5368, 26} true;
  assume {:verifier.code 0} true;
  $i197 := $shl.i32($i196, 16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5368, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $i197;
  goto $bb3;
$bb89:
  assume !(($i195 == 1));
  assume {:verifier.code 0} true;
  goto $bb90;
$bb90:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5374, 24} true;
  assume {:verifier.code 0} true;
  $i198 := $add.i32($i10, 5);
  // WARNING: %268 = add nsw i32 %11, 5, !dbg !5340, !verifier.code !4715
  call {:cexpr "__cil_tmp152"} boogie_si_record_i32($i198);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5375, 14} true;
  assume {:verifier.code 0} true;
  call $i199 := inb($i198);
  // WARNING: %269 = call zeroext i8 @inb(i32 %268), !dbg !5344, !verifier.code !4715
  call {:cexpr "tmp___23"} boogie_si_record_i8($i199);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5376, 7} true;
  assume {:verifier.code 0} true;
  $i200 := $zext.i8.i32($i199);
  // WARNING: %270 = zext i8 %269 to i32, !dbg !5347, !verifier.code !4715
  call {:cexpr "i"} boogie_si_record_i32($i200);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5390, 18} true;
  assume {:verifier.code 0} true;
  $i201 := $p2i.ref.i64($p8);
  // WARNING: %271 = ptrtoint %struct.qlogicfas408_priv* %9 to i64, !dbg !5348, !verifier.code !4715
  call {:cexpr "__cil_tmp155"} boogie_si_record_i64($i201);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5391, 31} true;
  assume {:verifier.code 0} true;
  $i202 := $add.i64($i201, 8);
  // WARNING: %272 = add i64 %271, 8, !dbg !5352, !verifier.code !4715
  call {:cexpr "__cil_tmp156"} boogie_si_record_i64($i202);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5392, 20} true;
  assume {:verifier.code 0} true;
  $p203 := $i2p.i64.ref($i202);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5392, 18} true;
  assume {:verifier.code 0} true;
  $i204 := $load.i32($M.0, $p203);
  // WARNING: %274 = load i32, i32* %273, align 4, !dbg !5356, !verifier.code !4715
  call {:cexpr "__cil_tmp157"} boogie_si_record_i32($i204);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5393, 20} true;
  assume {:verifier.code 0} true;
  $i205 := $eq.i32($i204, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5393, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i205} true;
  goto $bb91, $bb92;
$bb91:
  assume ($i205 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5393, 7} true;
  assume {:verifier.code 0} true;
  $i206 := $i200;
  goto $bb94;
$bb92:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5393, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i205 == 1));
  goto $bb93;
$bb93:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5403, 5} true;
  assume {:verifier.code 0} true;
  goto $bb100;
$bb94:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5395, 22} true;
  assume {:verifier.code 0} true;
  $i213 := $and.i32($i206, 32);
  // WARNING: %284 = and i32 %.18, 32, !dbg !5374, !verifier.code !4715
  call {:cexpr "__cil_tmp158"} boogie_si_record_i32($i213);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5396, 22} true;
  assume {:verifier.code 0} true;
  $i214 := $eq.i32($i213, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5396, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i214} true;
  goto $bb98, $bb99;
$bb95:
  call devirtbounce.3(0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5382, 3} true;
  assume {:verifier.code 0} true;
  call cpu_relax();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5383, 24} true;
  assume {:verifier.code 0} true;
  $i207 := $add.i32($i10, 5);
  // WARNING: %277 = add nsw i32 %11, 5, !dbg !5364, !verifier.code !4715
  call {:cexpr "__cil_tmp153"} boogie_si_record_i32($i207);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5384, 14} true;
  assume {:verifier.code 0} true;
  call $i208 := inb($i207);
  // WARNING: %278 = call zeroext i8 @inb(i32 %277), !dbg !5367, !verifier.code !4715
  call {:cexpr "tmp___24"} boogie_si_record_i8($i208);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5385, 18} true;
  assume {:verifier.code 0} true;
  $i209 := $zext.i8.i32($i208);
  // WARNING: %279 = zext i8 %278 to i32, !dbg !5370, !verifier.code !4715
  call {:cexpr "__cil_tmp154"} boogie_si_record_i32($i209);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5386, 20} true;
  assume {:verifier.code 0} true;
  $i210 := $or.i32($i209, $i206);
  // WARNING: %280 = or i32 %279, %.18, !dbg !5373, !verifier.code !4715
  call {:cexpr "i"} boogie_si_record_i32($i210);
  // WARNING: call void @llvm.dbg.value(metadata i32 %280, i64 0, metadata !4997, metadata !4713), !dbg !4998, !verifier.code !4715
  // WARNING: call void @llvm.dbg.value(metadata i64 %271, i64 0, metadata !5582, metadata !4713), !dbg !5583, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5392, 18} true;
  assume {:verifier.code 0} true;
  $i211 := $load.i32($M.0, $p203);
  // WARNING: %281 = load i32, i32* %273, align 4, !dbg !5356, !verifier.code !4715
  call {:cexpr "__cil_tmp157"} boogie_si_record_i32($i211);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5393, 20} true;
  assume {:verifier.code 0} true;
  $i212 := $eq.i32($i211, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5393, 7} true;
  assume {:verifier.code 0} true;
  $i206 := $i210;
  assume {:branchcond $i212} true;
  goto $bb96, $bb97;
$bb96:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5393, 7} true;
  assume {:verifier.code 0} true;
  assume ($i212 == 1);
  goto $bb94;
$bb97:
  assume !(($i212 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5393, 7} true;
  assume {:verifier.code 0} true;
  goto $bb93;
$bb98:
  assume ($i214 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5397, 7} true;
  assume {:verifier.code 0} true;
  goto $bb95;
$bb99:
  assume !(($i214 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5399, 7} true;
  assume {:verifier.code 0} true;
  goto $bb100;
$bb100:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5408, 18} true;
  assume {:verifier.code 0} true;
  $i215 := $p2i.ref.i64($p8);
  // WARNING: %290 = ptrtoint %struct.qlogicfas408_priv* %9 to i64, !dbg !5388, !verifier.code !4715
  call {:cexpr "__cil_tmp159"} boogie_si_record_i64($i215);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5409, 31} true;
  assume {:verifier.code 0} true;
  $i216 := $add.i64($i215, 8);
  // WARNING: %291 = add i64 %290, 8, !dbg !5392, !verifier.code !4715
  call {:cexpr "__cil_tmp160"} boogie_si_record_i64($i216);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5410, 20} true;
  assume {:verifier.code 0} true;
  $p217 := $i2p.i64.ref($i216);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5410, 18} true;
  assume {:verifier.code 0} true;
  $i218 := $load.i32($M.0, $p217);
  // WARNING: %293 = load i32, i32* %292, align 4, !dbg !5396, !verifier.code !4715
  call {:cexpr "__cil_tmp161"} boogie_si_record_i32($i218);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5411, 20} true;
  assume {:verifier.code 0} true;
  $i219 := $ne.i32($i218, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5411, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i219} true;
  goto $bb101, $bb102;
$bb101:
  assume ($i219 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5413, 20} true;
  assume {:verifier.code 0} true;
  $i220 := $p2i.ref.i64($p8);
  // WARNING: %296 = ptrtoint %struct.qlogicfas408_priv* %9 to i64, !dbg !5402, !verifier.code !4715
  call {:cexpr "__cil_tmp162"} boogie_si_record_i64($i220);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5414, 33} true;
  assume {:verifier.code 0} true;
  $i221 := $add.i64($i220, 8);
  // WARNING: %297 = add i64 %296, 8, !dbg !5407, !verifier.code !4715
  call {:cexpr "__cil_tmp163"} boogie_si_record_i64($i221);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5415, 22} true;
  assume {:verifier.code 0} true;
  $p222 := $i2p.i64.ref($i221);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5415, 20} true;
  assume {:verifier.code 0} true;
  $i223 := $load.i32($M.0, $p222);
  // WARNING: %299 = load i32, i32* %298, align 4, !dbg !5411, !verifier.code !4715
  call {:cexpr "__cil_tmp164"} boogie_si_record_i32($i223);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5416, 22} true;
  assume {:verifier.code 0} true;
  $i224 := $eq.i32($i223, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5416, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i224} true;
  goto $bb103, $bb104;
$bb102:
  assume !(($i219 == 1));
  assume {:verifier.code 0} true;
  goto $bb106;
$bb103:
  assume ($i224 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5418, 5} true;
  assume {:verifier.code 0} true;
  $i225 := 327680;
  goto $bb105;
$bb104:
  assume !(($i224 == 1));
  assume {:verifier.code 0} true;
  $i225 := 524288;
  goto $bb105;
$bb105:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5422, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $i225;
  goto $bb3;
$bb106:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5428, 25} true;
  assume {:verifier.code 0} true;
  $i226 := $and.i32($i179, 254);
  // WARNING: %306 = and i32 %236, 254, !dbg !5422, !verifier.code !4715
  call {:cexpr "__cil_tmp165"} boogie_si_record_i32($i226);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5429, 26} true;
  assume {:verifier.code 0} true;
  $i227 := $shl.i32($i182, 8);
  // WARNING: %307 = shl i32 %239, 8, !dbg !5426, !verifier.code !4715
  call {:cexpr "__cil_tmp166"} boogie_si_record_i32($i227);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5430, 25} true;
  assume {:verifier.code 0} true;
  $i228 := $shl.i32($i191, 16);
  // WARNING: %308 = shl i32 %.2, 16, !dbg !5429, !verifier.code !4715
  call {:cexpr "__cil_tmp167"} boogie_si_record_i32($i228);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5431, 31} true;
  assume {:verifier.code 0} true;
  $i229 := $or.i32($i228, $i227);
  // WARNING: %309 = or i32 %308, %307, !dbg !5432, !verifier.code !4715
  call {:cexpr "__cil_tmp168"} boogie_si_record_i32($i229);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5432, 24} true;
  assume {:verifier.code 0} true;
  $i230 := $or.i32($i229, $i226);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 5432, 3} true;
  assume {:verifier.code 0} true;
  $i22 := $i230;
  goto $bb3;
}
const printk: ref;
axiom (printk == $sub.ref(0, 25926));
procedure  printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32)
  returns ($r: i32);
procedure  printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32)
  returns ($r: i32);
procedure  printk.ref.i32($p0: ref, p.1: i32)
  returns ($r: i32);
const ql_zap: ref;
axiom (ql_zap == $sub.ref(0, 26958));
procedure  ql_zap($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3967, 11} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3967, 11} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i32($M.0, $p1);
  // WARNING: %3 = load i32, i32* %2, align 4, !dbg !4716, !verifier.code !4715
  call {:cexpr "qbase"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3968, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p0);
  // WARNING: %4 = ptrtoint %struct.qlogicfas408_priv* %0 to i64, !dbg !4721, !verifier.code !4715
  call {:cexpr "__cil_tmp8"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3969, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i64($i3, 16);
  // WARNING: %5 = add i64 %4, 16, !dbg !4724, !verifier.code !4715
  call {:cexpr "__cil_tmp9"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3970, 16} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.i64.ref($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3970, 14} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.0, $p5);
  // WARNING: %7 = load i32, i32* %6, align 4, !dbg !4728, !verifier.code !4715
  call {:cexpr "int_type"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3971, 23} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i32($i2, 13);
  // WARNING: %8 = add nsw i32 %3, 13, !dbg !4731, !verifier.code !4715
  call {:cexpr "__cil_tmp10"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3972, 9} true;
  assume {:verifier.code 0} true;
  call $i8 := inb($i7);
  // WARNING: %9 = call zeroext i8 @inb(i32 %8), !dbg !4734, !verifier.code !4715
  call {:cexpr "tmp"} boogie_si_record_i8($i8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3973, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i8.i32($i8);
  // WARNING: %10 = zext i8 %9 to i32, !dbg !4737, !verifier.code !4715
  call {:cexpr "x"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3974, 23} true;
  assume {:verifier.code 0} true;
  $i10 := $add.i32($i2, 13);
  // WARNING: %11 = add nsw i32 %3, 13, !dbg !4740, !verifier.code !4715
  call {:cexpr "__cil_tmp11"} boogie_si_record_i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3975, 13} true;
  assume {:verifier.code 0} true;
  call $i11 := inb($i10);
  // WARNING: %12 = call zeroext i8 @inb(i32 %11), !dbg !4743, !verifier.code !4715
  call {:cexpr "tmp___0"} boogie_si_record_i8($i11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3976, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $zext.i8.i32($i11);
  // WARNING: %13 = zext i8 %12 to i32, !dbg !4746, !verifier.code !4715
  call {:cexpr "__cil_tmp12"} boogie_si_record_i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3977, 29} true;
  assume {:verifier.code 0} true;
  $i13 := $and.i32($i12, 127);
  // WARNING: %14 = and i32 %13, 127, !dbg !4749, !verifier.code !4715
  call {:cexpr "__cil_tmp13"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3978, 17} true;
  assume {:verifier.code 0} true;
  $i14 := $trunc.i32.i8($i13);
  // WARNING: %15 = trunc i32 %14 to i8, !dbg !4752, !verifier.code !4715
  call {:cexpr "__cil_tmp14"} boogie_si_record_i8($i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3979, 23} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i32($i2, 13);
  // WARNING: %16 = add nsw i32 %3, 13, !dbg !4755, !verifier.code !4715
  call {:cexpr "__cil_tmp15"} boogie_si_record_i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3980, 3} true;
  assume {:verifier.code 0} true;
  call outb($i14, $i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3981, 23} true;
  assume {:verifier.code 0} true;
  $i16 := $add.i32($i2, 13);
  // WARNING: %17 = add nsw i32 %3, 13, !dbg !4759, !verifier.code !4715
  call {:cexpr "__cil_tmp16"} boogie_si_record_i32($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3982, 3} true;
  assume {:verifier.code 0} true;
  call outb(4, $i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3983, 23} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i32($i2, 3);
  // WARNING: %18 = add nsw i32 %3, 3, !dbg !4763, !verifier.code !4715
  call {:cexpr "__cil_tmp17"} boogie_si_record_i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3984, 3} true;
  assume {:verifier.code 0} true;
  call outb(3, $i17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3985, 23} true;
  assume {:verifier.code 0} true;
  $i18 := $add.i32($i2, 3);
  // WARNING: %19 = add nsw i32 %3, 3, !dbg !4767, !verifier.code !4715
  call {:cexpr "__cil_tmp18"} boogie_si_record_i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3986, 3} true;
  assume {:verifier.code 0} true;
  call outb(2, $i18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3989, 19} true;
  assume {:verifier.code 0} true;
  $i19 := $and.i32($i9, 128);
  // WARNING: %20 = and i32 %10, 128, !dbg !4771, !verifier.code !4715
  call {:cexpr "__cil_tmp19"} boogie_si_record_i32($i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3990, 19} true;
  assume {:verifier.code 0} true;
  $i20 := $ne.i32($i19, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3990, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i20 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3992, 25} true;
  assume {:verifier.code 0} true;
  $i21 := $add.i32($i2, 13);
  // WARNING: %23 = add nsw i32 %3, 13, !dbg !4778, !verifier.code !4715
  call {:cexpr "__cil_tmp20"} boogie_si_record_i32($i21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3993, 15} true;
  assume {:verifier.code 0} true;
  call $i22 := inb($i21);
  // WARNING: %24 = call zeroext i8 @inb(i32 %23), !dbg !4783, !verifier.code !4715
  call {:cexpr "tmp___1"} boogie_si_record_i8($i22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3994, 19} true;
  assume {:verifier.code 0} true;
  $i23 := $zext.i8.i32($i22);
  // WARNING: %25 = zext i8 %24 to i32, !dbg !4786, !verifier.code !4715
  call {:cexpr "__cil_tmp21"} boogie_si_record_i32($i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3995, 31} true;
  assume {:verifier.code 0} true;
  $i24 := $or.i32($i23, 128);
  // WARNING: %26 = or i32 %25, 128, !dbg !4789, !verifier.code !4715
  call {:cexpr "__cil_tmp22"} boogie_si_record_i32($i24);
  // WARNING: call void @llvm.dbg.value(metadata i32 %26, i64 0, metadata !5749, metadata !4713), !dbg !5750, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3997, 19} true;
  assume {:verifier.code 0} true;
  $i25 := $trunc.i32.i8($i24);
  // WARNING: %27 = trunc i32 %26 to i8, !dbg !4794, !verifier.code !4715
  call {:cexpr "__cil_tmp24"} boogie_si_record_i8($i25);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3998, 25} true;
  assume {:verifier.code 0} true;
  $i26 := $add.i32($i2, 13);
  // WARNING: %28 = add nsw i32 %3, 13, !dbg !4797, !verifier.code !4715
  call {:cexpr "__cil_tmp25"} boogie_si_record_i32($i26);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3999, 5} true;
  assume {:verifier.code 0} true;
  call outb($i25, $i26);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4000, 19} true;
  assume {:verifier.code 0} true;
  $i27 := $trunc.i32.i8($i6);
  // WARNING: %29 = trunc i32 %7 to i8, !dbg !4801, !verifier.code !4715
  call {:cexpr "__cil_tmp26"} boogie_si_record_i8($i27);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4001, 19} true;
  assume {:verifier.code 0} true;
  $i28 := $sext.i8.i32($i27);
  // WARNING: %30 = sext i8 %29 to i32, !dbg !4804, !verifier.code !4715
  call {:cexpr "__cil_tmp27"} boogie_si_record_i32($i28);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4002, 31} true;
  assume {:verifier.code 0} true;
  $i29 := $or.i32($i28, $sub.i32(0, 76));
  // WARNING: %31 = or i32 %30, -76, !dbg !4807, !verifier.code !4715
  call {:cexpr "__cil_tmp28"} boogie_si_record_i32($i29);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4003, 19} true;
  assume {:verifier.code 0} true;
  $i30 := $trunc.i32.i8($i29);
  // WARNING: %32 = trunc i32 %31 to i8, !dbg !4810, !verifier.code !4715
  call {:cexpr "__cil_tmp29"} boogie_si_record_i8($i30);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4004, 19} true;
  assume {:verifier.code 0} true;
  $i31 := $zext.i8.i32($i30);
  // WARNING: %33 = zext i8 %32 to i32, !dbg !4813, !verifier.code !4715
  call {:cexpr "__cil_tmp30"} boogie_si_record_i32($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4005, 19} true;
  assume {:verifier.code 0} true;
  $i32 := $trunc.i32.i8($i31);
  // WARNING: %34 = trunc i32 %33 to i8, !dbg !4816, !verifier.code !4715
  call {:cexpr "__cil_tmp31"} boogie_si_record_i8($i32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4006, 25} true;
  assume {:verifier.code 0} true;
  $i33 := $add.i32($i2, 13);
  // WARNING: %35 = add nsw i32 %3, 13, !dbg !4819, !verifier.code !4715
  call {:cexpr "__cil_tmp32"} boogie_si_record_i32($i33);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4007, 5} true;
  assume {:verifier.code 0} true;
  call outb($i32, $i33);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4009, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i20 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4013, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const scsi_bufflen: ref;
axiom (scsi_bufflen == $sub.ref(0, 27990));
procedure  scsi_bufflen($p0: ref)
  returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.scsi_cmnd* %0, i64 0, metadata !5785, metadata !4713), !dbg !5786, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3896, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  // WARNING: %2 = ptrtoint %struct.scsi_cmnd* %0 to i64, !dbg !4718, !verifier.code !4715
  call {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3897, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $add.i64($i1, 104);
  // WARNING: %3 = add i64 %2, 104, !dbg !4723, !verifier.code !4715
  call {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3898, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.i64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3898, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3898, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const scsi_sglist: ref;
axiom (scsi_sglist == $sub.ref(0, 29022));
procedure  scsi_sglist($p0: ref)
  returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3882, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  // WARNING: %2 = ptrtoint %struct.scsi_cmnd* %0 to i64, !dbg !4716, !verifier.code !4715
  call {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3883, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $add.i64($i1, 88);
  // WARNING: %3 = add i64 %2, 88, !dbg !4721, !verifier.code !4715
  call {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3884, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.i64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3884, 11} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3884, 3} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const sg_virt: ref;
axiom (sg_virt == $sub.ref(0, 30054));
procedure  sg_virt($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3846, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := sg_page($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3848, 13} true;
  assume {:verifier.code 0} true;
  call $p2 := lowmem_page_address($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3851, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p0);
  // WARNING: %4 = ptrtoint %struct.scatterlist* %0 to i64, !dbg !4726, !verifier.code !4715
  call {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3852, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i64($i3, 16);
  // WARNING: %5 = add i64 %4, 16, !dbg !4730, !verifier.code !4715
  call {:cexpr "__cil_tmp6"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3853, 18} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.i64.ref($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3853, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.0, $p5);
  // WARNING: %7 = load i32, i32* %6, align 4, !dbg !4734, !verifier.code !4715
  call {:cexpr "__cil_tmp7"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3854, 16} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i32.i64($i6);
  // WARNING: %8 = zext i32 %7 to i64, !dbg !4737, !verifier.code !4715
  call {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3855, 19} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p2, $mul.ref($i7, 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3855, 3} true;
  assume {:verifier.code 0} true;
  $r := $p8;
  $exn := false;
  return;
}
const ql_pdma: ref;
axiom (ql_pdma == $sub.ref(0, 31086));
procedure  ql_pdma($p0: ref, $i1: i32, $p2: ref, $i3: i32)
  returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $p38: ref;
  var $i39: i32;
  var $p22: ref;
  var $i23: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i63: i32;
  var $i64: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i8;
  var $i73: i32;
  var $i74: i1;
  var $i68: i32;
  var $p69: ref;
  var $i79: i32;
  var $i80: i8;
  var $i78: i32;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i8;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i100: i1;
  var $i101: i32;
  var $i102: i8;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $i119: i32;
  var $i120: i8;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i125: i32;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $i116: i32;
  var $i117: i32;
  var $p118: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i32;
  var $p130: ref;
  var $i131: i32;
  var $p114: ref;
  var $i115: i32;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i8;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var $i145: i32;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $p149: ref;
  var $i150: i32;
  var $i151: i1;
  var $i155: i1;
  var $p161: ref;
  var $i162: i8;
  var $i163: i32;
  var $i164: i8;
  var $i165: i32;
  var $i166: i32;
  var $i167: i1;
  var $i159: i32;
  var $p160: ref;
  var $i172: i32;
  var $i173: i8;
  var $i171: i32;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $p168: ref;
  var $i169: i32;
  var $i170: i32;
  var $p156: ref;
  var $i157: i32;
  var $i158: i32;
  var $p179: ref;
  var $i180: i32;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i8;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $i152: i32;
  var $i153: i32;
  var $p154: ref;
  var $i189: i32;
  var $i190: i1;
  var $i191: i32;
  var $i192: i1;
  var $i193: i32;
  var $i194: i8;
  var $i195: i32;
  var $i196: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.qlogicfas408_priv* %0, i64 0, metadata !5850, metadata !4713), !dbg !5851, !verifier.code !4715
  // WARNING: call void @llvm.dbg.value(metadata i8* %2, i64 0, metadata !5854, metadata !4713), !dbg !5855, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4085, 11} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4085, 11} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.0, $p4);
  // WARNING: %6 = load i32, i32* %5, align 4, !dbg !4722, !verifier.code !4715
  call {:cexpr "qbase"} boogie_si_record_i32($i5);
  // WARNING: call void @llvm.dbg.value(metadata i32 %6, i64 0, metadata !5860, metadata !4713), !dbg !5861, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4087, 13} true;
  assume {:verifier.code 0} true;
  $i6 := $and.i32($i1, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4087, 13} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i32($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4087, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4088, 16} true;
  assume {:verifier.code 0} true;
  $i8 := $sgt.i32($i3, 127);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4088, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i7 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4236, 16} true;
  assume {:verifier.code 0} true;
  $i100 := $sgt.i32($i3, 127);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4236, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i100} true;
  goto $bb54, $bb55;
$bb3:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4090, 27} true;
  assume {:verifier.code 0} true;
  $i9 := $add.i32($i5, 8);
  // WARNING: %12 = add nsw i32 %6, 8, !dbg !4735, !verifier.code !4715
  call {:cexpr "__cil_tmp21"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4091, 13} true;
  assume {:verifier.code 0} true;
  call $i10 := inb($i9);
  // WARNING: %13 = call zeroext i8 @inb(i32 %12), !dbg !4740, !verifier.code !4715
  call {:cexpr "tmp"} boogie_si_record_i8($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4094, 21} true;
  assume {:verifier.code 0} true;
  $i11 := $zext.i8.i32($i10);
  // WARNING: %14 = zext i8 %13 to i32, !dbg !4743, !verifier.code !4715
  call {:cexpr "__cil_tmp22"} boogie_si_record_i32($i11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4095, 33} true;
  assume {:verifier.code 0} true;
  $i12 := $and.i32($i11, 2);
  // WARNING: %15 = and i32 %14, 2, !dbg !4747, !verifier.code !4715
  call {:cexpr "__cil_tmp23"} boogie_si_record_i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4096, 23} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i32($i12, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4096, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb5, $bb6;
$bb4:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  $p19, $i20 := $p2, $i3;
  goto $bb8;
$bb5:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4098, 29} true;
  assume {:verifier.code 0} true;
  $i14 := $add.i32($i5, 4);
  // WARNING: %18 = add nsw i32 %6, 4, !dbg !4753, !verifier.code !4715
  call {:cexpr "__cil_tmp24"} boogie_si_record_i32($i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4100, 9} true;
  assume {:verifier.code 0} true;
  call insl($i14, $p2, 32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4101, 25} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i32($i3, $sub.i32(0, 128));
  // WARNING: %19 = add nsw i32 %3, -128, !dbg !4761, !verifier.code !4715
  call {:cexpr "reqlen"} boogie_si_record_i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4102, 27} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p2, 128);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4104, 7} true;
  assume {:verifier.code 0} true;
  $p17, $i18 := $p16, $i15;
  goto $bb7;
$bb6:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  $p17, $i18 := $p2, $i3;
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4108, 5} true;
  assume {:verifier.code 0} true;
  $p19, $i20 := $p17, $i18;
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4133, 16} true;
  assume {:verifier.code 0} true;
  $i21 := $sgt.i32($i20, 83);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4133, 9} true;
  assume {:verifier.code 0} true;
  $p22, $i23 := $p19, $i20;
  assume {:branchcond $i21} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i21 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4133, 9} true;
  assume {:verifier.code 0} true;
  $i24, $i25, $p26 := 0, $i20, $p19;
  goto $bb12;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4133, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i21 == 1));
  goto $bb11;
$bb11:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4143, 7} true;
  assume {:verifier.code 0} true;
  $p44, $i45 := $p22, $i23;
  goto $bb21;
$bb12:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4135, 23} true;
  assume {:verifier.code 0} true;
  $i40 := $and.i32($i24, 192);
  // WARNING: %40 = and i32 %.059, 192, !dbg !4794, !verifier.code !4715
  call {:cexpr "__cil_tmp30"} boogie_si_record_i32($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4136, 23} true;
  assume {:verifier.code 0} true;
  $i41 := $eq.i32($i40, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4136, 11} true;
  assume {:verifier.code 0} true;
  $p42, $i43 := $p26, $i25;
  assume {:branchcond $i41} true;
  goto $bb19, $bb20;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4114, 25} true;
  assume {:verifier.code 0} true;
  $i27 := $add.i32($i5, 8);
  // WARNING: %27 = add nsw i32 %6, 8, !dbg !4768, !verifier.code !4715
  call {:cexpr "__cil_tmp26"} boogie_si_record_i32($i27);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4115, 15} true;
  assume {:verifier.code 0} true;
  call $i28 := inb($i27);
  // WARNING: %28 = call zeroext i8 @inb(i32 %27), !dbg !4772, !verifier.code !4715
  call {:cexpr "tmp___0"} boogie_si_record_i8($i28);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4116, 9} true;
  assume {:verifier.code 0} true;
  $i29 := $zext.i8.i32($i28);
  // WARNING: %29 = zext i8 %28 to i32, !dbg !4775, !verifier.code !4715
  call {:cexpr "j"} boogie_si_record_i32($i29);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4119, 21} true;
  assume {:verifier.code 0} true;
  $i30 := $and.i32($i29, 4);
  // WARNING: %30 = and i32 %29, 4, !dbg !4776, !verifier.code !4715
  call {:cexpr "__cil_tmp27"} boogie_si_record_i32($i30);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4120, 21} true;
  assume {:verifier.code 0} true;
  $i31 := $ne.i32($i30, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4120, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i31 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4122, 27} true;
  assume {:verifier.code 0} true;
  $i32 := $add.i32($i5, 4);
  // WARNING: %33 = add nsw i32 %6, 4, !dbg !4783, !verifier.code !4715
  call {:cexpr "__cil_tmp28"} boogie_si_record_i32($i32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4124, 7} true;
  assume {:verifier.code 0} true;
  call insl($i32, $p26, 21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4125, 23} true;
  assume {:verifier.code 0} true;
  $i33 := $add.i32($i25, $sub.i32(0, 84));
  // WARNING: %34 = add nsw i32 %.3458, -84, !dbg !4791, !verifier.code !4715
  call {:cexpr "reqlen"} boogie_si_record_i32($i33);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4126, 25} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p26, 84);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4128, 5} true;
  assume {:verifier.code 0} true;
  $p35, $i36 := $p34, $i33;
  goto $bb16;
$bb15:
  assume !(($i31 == 1));
  assume {:verifier.code 0} true;
  $p35, $i36 := $p26, $i25;
  goto $bb16;
$bb16:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4133, 16} true;
  assume {:verifier.code 0} true;
  $i37 := $sgt.i32($i36, 83);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4133, 9} true;
  assume {:verifier.code 0} true;
  $i24, $i25, $p26, $p38, $i39 := $i29, $i36, $p35, $p35, $i36;
  assume {:branchcond $i37} true;
  goto $bb17, $bb18;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4133, 9} true;
  assume {:verifier.code 0} true;
  assume ($i37 == 1);
  goto $bb12;
$bb18:
  assume !(($i37 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4133, 9} true;
  assume {:verifier.code 0} true;
  $p22, $i23 := $p38, $i39;
  goto $bb11;
$bb19:
  assume ($i41 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4137, 9} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb20:
  assume !(($i41 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4139, 9} true;
  assume {:verifier.code 0} true;
  $p44, $i45 := $p42, $i43;
  goto $bb21;
$bb21:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4146, 16} true;
  assume {:verifier.code 0} true;
  $i46 := $sgt.i32($i45, 43);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4146, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb22, $bb23;
$bb22:
  assume ($i46 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4148, 27} true;
  assume {:verifier.code 0} true;
  $i47 := $add.i32($i5, 8);
  // WARNING: %48 = add nsw i32 %6, 8, !dbg !4811, !verifier.code !4715
  call {:cexpr "__cil_tmp31"} boogie_si_record_i32($i47);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4149, 17} true;
  assume {:verifier.code 0} true;
  call $i48 := inb($i47);
  // WARNING: %49 = call zeroext i8 @inb(i32 %48), !dbg !4816, !verifier.code !4715
  call {:cexpr "tmp___1"} boogie_si_record_i8($i48);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4152, 21} true;
  assume {:verifier.code 0} true;
  $i49 := $zext.i8.i32($i48);
  // WARNING: %50 = zext i8 %49 to i32, !dbg !4819, !verifier.code !4715
  call {:cexpr "__cil_tmp32"} boogie_si_record_i32($i49);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4153, 33} true;
  assume {:verifier.code 0} true;
  $i50 := $and.i32($i49, 8);
  // WARNING: %51 = and i32 %50, 8, !dbg !4823, !verifier.code !4715
  call {:cexpr "__cil_tmp33"} boogie_si_record_i32($i50);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4154, 23} true;
  assume {:verifier.code 0} true;
  $i51 := $ne.i32($i50, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4154, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i51} true;
  goto $bb24, $bb25;
$bb23:
  assume !(($i46 == 1));
  assume {:verifier.code 0} true;
  $p57, $i58 := $p44, $i45;
  goto $bb27;
$bb24:
  assume ($i51 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4156, 29} true;
  assume {:verifier.code 0} true;
  $i52 := $add.i32($i5, 4);
  // WARNING: %54 = add nsw i32 %6, 4, !dbg !4829, !verifier.code !4715
  call {:cexpr "__cil_tmp34"} boogie_si_record_i32($i52);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4158, 9} true;
  assume {:verifier.code 0} true;
  call insl($i52, $p44, 11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4159, 25} true;
  assume {:verifier.code 0} true;
  $i53 := $add.i32($i45, $sub.i32(0, 44));
  // WARNING: %55 = add nsw i32 %.3434, -44, !dbg !4837, !verifier.code !4715
  call {:cexpr "reqlen"} boogie_si_record_i32($i53);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4160, 27} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($p44, 44);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4162, 7} true;
  assume {:verifier.code 0} true;
  $p55, $i56 := $p54, $i53;
  goto $bb26;
$bb25:
  assume !(($i51 == 1));
  assume {:verifier.code 0} true;
  $p55, $i56 := $p44, $i45;
  goto $bb26;
$bb26:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4166, 5} true;
  assume {:verifier.code 0} true;
  $p57, $i58 := $p55, $i56;
  goto $bb27;
$bb27:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  // WARNING: %.56 = phi i32 [ %.45, %58 ], [ %.3434, %59 ], !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4215, 16} true;
  assume {:verifier.code 0} true;
  $i59 := $ne.i32($i58, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4215, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i59} true;
  goto $bb28, $bb29;
$bb28:
  assume ($i59 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4215, 9} true;
  assume {:verifier.code 0} true;
  $i60, $i61, $p62 := 0, $i58, $p57;
  goto $bb31;
$bb29:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4215, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i59 == 1));
  goto $bb30;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4232, 7} true;
  assume {:verifier.code 0} true;
  goto $bb52;
$bb31:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4217, 23} true;
  assume {:verifier.code 0} true;
  $i96 := $and.i32($i60, 16);
  // WARNING: %91 = and i32 %.453, 16, !dbg !4899, !verifier.code !4715
  call {:cexpr "__cil_tmp41"} boogie_si_record_i32($i96);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4218, 23} true;
  assume {:verifier.code 0} true;
  $i97 := $eq.i32($i96, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4218, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i97} true;
  goto $bb48, $bb49;
$bb32:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4172, 11} true;
  assume {:verifier.code 0} true;
  $i63 := $and.i32($i60, 192);
  // WARNING: %63 = and i32 %.453, 192, !dbg !4844, !verifier.code !4715
  call {:cexpr "j"} boogie_si_record_i32($i63);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4184, 16} true;
  assume {:verifier.code 0} true;
  $i64 := $ne.i32($i61, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4184, 9} true;
  assume {:verifier.code 0} true;
  $p65, $i66, $i67 := $p62, $i61, $i63;
  assume {:branchcond $i64} true;
  goto $bb33, $bb34;
$bb33:
  assume ($i64 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4184, 9} true;
  assume {:verifier.code 0} true;
  $i68, $p69 := $i61, $p62;
  goto $bb36;
$bb34:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4184, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i64 == 1));
  goto $bb35;
$bb35:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4199, 7} true;
  assume {:verifier.code 0} true;
  $p86, $i87, $i88 := $p65, $i66, $i67;
  goto $bb42;
$bb36:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4186, 27} true;
  assume {:verifier.code 0} true;
  $i79 := $add.i32($i5, 8);
  // WARNING: %72 = add nsw i32 %6, 8, !dbg !4860, !verifier.code !4715
  call {:cexpr "__cil_tmp37"} boogie_si_record_i32($i79);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4187, 17} true;
  assume {:verifier.code 0} true;
  call $i80 := inb($i79);
  // WARNING: %73 = call zeroext i8 @inb(i32 %72), !dbg !4865, !verifier.code !4715
  call {:cexpr "tmp___4"} boogie_si_record_i8($i80);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4188, 11} true;
  assume {:verifier.code 0} true;
  $i78 := $zext.i8.i32($i80);
  // WARNING: %74 = zext i8 %73 to i32, !dbg !4868, !verifier.code !4715
  call {:cexpr "j"} boogie_si_record_i32($i78);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4191, 23} true;
  assume {:verifier.code 0} true;
  $i81 := $and.i32($i78, 16);
  // WARNING: %75 = and i32 %74, 16, !dbg !4869, !verifier.code !4715
  call {:cexpr "__cil_tmp38"} boogie_si_record_i32($i81);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4192, 23} true;
  assume {:verifier.code 0} true;
  $i82 := $eq.i32($i81, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4192, 11} true;
  assume {:verifier.code 0} true;
  $p83, $i84, $i85 := $p69, $i68, $i78;
  assume {:branchcond $i82} true;
  goto $bb40, $bb41;
$bb37:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4177, 23} true;
  assume {:verifier.code 0} true;
  $p70 := $add.ref($p69, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4178, 25} true;
  assume {:verifier.code 0} true;
  $i71 := $add.i32($i5, 4);
  // WARNING: %67 = add nsw i32 %6, 4, !dbg !4852, !verifier.code !4715
  call {:cexpr "__cil_tmp36"} boogie_si_record_i32($i71);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4179, 15} true;
  assume {:verifier.code 0} true;
  call $i72 := inb($i71);
  // WARNING: %68 = call zeroext i8 @inb(i32 %67), !dbg !4855, !verifier.code !4715
  call {:cexpr "tmp___3"} boogie_si_record_i8($i72);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4180, 14} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p69, $i72);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4181, 21} true;
  assume {:verifier.code 0} true;
  $i73 := $sub.i32($i68, 1);
  // WARNING: %69 = sub nsw i32 %.6748, 1, !dbg !4859, !verifier.code !4715
  call {:cexpr "reqlen"} boogie_si_record_i32($i73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4184, 16} true;
  assume {:verifier.code 0} true;
  $i74 := $ne.i32($i73, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4184, 9} true;
  assume {:verifier.code 0} true;
  $i68, $p69, $p75, $i76, $i77 := $i73, $p70, $p70, $i73, $i78;
  assume {:branchcond $i74} true;
  goto $bb38, $bb39;
$bb38:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4184, 9} true;
  assume {:verifier.code 0} true;
  assume ($i74 == 1);
  goto $bb36;
$bb39:
  assume !(($i74 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4184, 9} true;
  assume {:verifier.code 0} true;
  $p65, $i66, $i67 := $p75, $i76, $i77;
  goto $bb35;
$bb40:
  assume ($i82 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4193, 9} true;
  assume {:verifier.code 0} true;
  goto $bb37;
$bb41:
  assume !(($i82 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4195, 9} true;
  assume {:verifier.code 0} true;
  $p86, $i87, $i88 := $p83, $i84, $i85;
  goto $bb42;
$bb42:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4203, 21} true;
  assume {:verifier.code 0} true;
  $i89 := $and.i32($i88, 16);
  // WARNING: %81 = and i32 %.2, 16, !dbg !4882, !verifier.code !4715
  call {:cexpr "__cil_tmp39"} boogie_si_record_i32($i89);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4204, 21} true;
  assume {:verifier.code 0} true;
  $i90 := $ne.i32($i89, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4204, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i90} true;
  goto $bb43, $bb44;
$bb43:
  assume ($i90 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4206, 27} true;
  assume {:verifier.code 0} true;
  $i91 := $add.i32($i5, 8);
  // WARNING: %84 = add nsw i32 %6, 8, !dbg !4889, !verifier.code !4715
  call {:cexpr "__cil_tmp40"} boogie_si_record_i32($i91);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4207, 17} true;
  assume {:verifier.code 0} true;
  call $i92 := inb($i91);
  // WARNING: %85 = call zeroext i8 @inb(i32 %84), !dbg !4894, !verifier.code !4715
  call {:cexpr "tmp___5"} boogie_si_record_i8($i92);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4208, 11} true;
  assume {:verifier.code 0} true;
  $i93 := $zext.i8.i32($i92);
  // WARNING: %86 = zext i8 %85 to i32, !dbg !4897, !verifier.code !4715
  call {:cexpr "j"} boogie_si_record_i32($i93);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4210, 5} true;
  assume {:verifier.code 0} true;
  $i94 := $i93;
  goto $bb45;
$bb44:
  assume !(($i90 == 1));
  assume {:verifier.code 0} true;
  $i94 := $i88;
  goto $bb45;
$bb45:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4215, 16} true;
  assume {:verifier.code 0} true;
  $i95 := $ne.i32($i87, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4215, 9} true;
  assume {:verifier.code 0} true;
  $i60, $i61, $p62 := $i94, $i87, $p86;
  assume {:branchcond $i95} true;
  goto $bb46, $bb47;
$bb46:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4215, 9} true;
  assume {:verifier.code 0} true;
  assume ($i95 == 1);
  goto $bb31;
$bb47:
  assume !(($i95 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4215, 9} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb48:
  assume ($i97 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4219, 9} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb49:
  assume !(($i97 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4222, 25} true;
  assume {:verifier.code 0} true;
  $i98 := $and.i32($i60, 192);
  // WARNING: %95 = and i32 %.453, 192, !dbg !4909, !verifier.code !4715
  call {:cexpr "__cil_tmp42"} boogie_si_record_i32($i98);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4223, 25} true;
  assume {:verifier.code 0} true;
  $i99 := $eq.i32($i98, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4223, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i99} true;
  goto $bb50, $bb51;
$bb50:
  assume ($i99 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4224, 11} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb51:
  assume !(($i99 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4226, 11} true;
  assume {:verifier.code 0} true;
  goto $bb52;
$bb52:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4235, 3} true;
  assume {:verifier.code 0} true;
  goto $bb53;
$bb53:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4387, 23} true;
  assume {:verifier.code 0} true;
  $i193 := $add.i32($i5, 8);
  // WARNING: %195 = add nsw i32 %6, 8, !dbg !5123, !verifier.code !4715
  call {:cexpr "__cil_tmp69"} boogie_si_record_i32($i193);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4388, 14} true;
  assume {:verifier.code 0} true;
  call $i194 := inb($i193);
  // WARNING: %196 = call zeroext i8 @inb(i32 %195), !dbg !5127, !verifier.code !4715
  call {:cexpr "tmp___12"} boogie_si_record_i8($i194);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4391, 17} true;
  assume {:verifier.code 0} true;
  $i195 := $zext.i8.i32($i194);
  // WARNING: %197 = zext i8 %196 to i32, !dbg !5130, !verifier.code !4715
  call {:cexpr "__cil_tmp70"} boogie_si_record_i32($i195);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4392, 23} true;
  assume {:verifier.code 0} true;
  $i196 := $and.i32($i195, 192);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4392, 3} true;
  assume {:verifier.code 0} true;
  $r := $i196;
  $exn := false;
  return;
$bb54:
  assume ($i100 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4238, 27} true;
  assume {:verifier.code 0} true;
  $i101 := $add.i32($i5, 8);
  // WARNING: %104 = add nsw i32 %6, 8, !dbg !4928, !verifier.code !4715
  call {:cexpr "__cil_tmp43"} boogie_si_record_i32($i101);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4239, 17} true;
  assume {:verifier.code 0} true;
  call $i102 := inb($i101);
  // WARNING: %105 = call zeroext i8 @inb(i32 %104), !dbg !4933, !verifier.code !4715
  call {:cexpr "tmp___6"} boogie_si_record_i8($i102);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4242, 21} true;
  assume {:verifier.code 0} true;
  $i103 := $zext.i8.i32($i102);
  // WARNING: %106 = zext i8 %105 to i32, !dbg !4936, !verifier.code !4715
  call {:cexpr "__cil_tmp44"} boogie_si_record_i32($i103);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4243, 33} true;
  assume {:verifier.code 0} true;
  $i104 := $and.i32($i103, 16);
  // WARNING: %107 = and i32 %106, 16, !dbg !4940, !verifier.code !4715
  call {:cexpr "__cil_tmp45"} boogie_si_record_i32($i104);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4244, 23} true;
  assume {:verifier.code 0} true;
  $i105 := $ne.i32($i104, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4244, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i105} true;
  goto $bb56, $bb57;
$bb55:
  assume !(($i100 == 1));
  assume {:verifier.code 0} true;
  $p111, $i112 := $p2, $i3;
  goto $bb59;
$bb56:
  assume ($i105 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4246, 29} true;
  assume {:verifier.code 0} true;
  $i106 := $add.i32($i5, 4);
  // WARNING: %110 = add nsw i32 %6, 4, !dbg !4946, !verifier.code !4715
  call {:cexpr "__cil_tmp46"} boogie_si_record_i32($i106);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4248, 9} true;
  assume {:verifier.code 0} true;
  call outsl($i106, $p2, 32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4249, 25} true;
  assume {:verifier.code 0} true;
  $i107 := $add.i32($i3, $sub.i32(0, 128));
  // WARNING: %111 = add nsw i32 %3, -128, !dbg !4954, !verifier.code !4715
  call {:cexpr "reqlen"} boogie_si_record_i32($i107);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4250, 27} true;
  assume {:verifier.code 0} true;
  $p108 := $add.ref($p2, 128);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4252, 7} true;
  assume {:verifier.code 0} true;
  $p109, $i110 := $p108, $i107;
  goto $bb58;
$bb57:
  assume !(($i105 == 1));
  assume {:verifier.code 0} true;
  $p109, $i110 := $p2, $i3;
  goto $bb58;
$bb58:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4256, 5} true;
  assume {:verifier.code 0} true;
  $p111, $i112 := $p109, $i110;
  goto $bb59;
$bb59:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4281, 16} true;
  assume {:verifier.code 0} true;
  $i113 := $sgt.i32($i112, 83);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4281, 9} true;
  assume {:verifier.code 0} true;
  $p114, $i115 := $p111, $i112;
  assume {:branchcond $i113} true;
  goto $bb60, $bb61;
$bb60:
  assume ($i113 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4281, 9} true;
  assume {:verifier.code 0} true;
  $i116, $i117, $p118 := 0, $i112, $p111;
  goto $bb63;
$bb61:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4281, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i113 == 1));
  goto $bb62;
$bb62:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4291, 7} true;
  assume {:verifier.code 0} true;
  $p136, $i137 := $p114, $i115;
  goto $bb72;
$bb63:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4283, 23} true;
  assume {:verifier.code 0} true;
  $i132 := $and.i32($i116, 192);
  // WARNING: %132 = and i32 %.581, 192, !dbg !4987, !verifier.code !4715
  call {:cexpr "__cil_tmp52"} boogie_si_record_i32($i132);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4284, 23} true;
  assume {:verifier.code 0} true;
  $i133 := $eq.i32($i132, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4284, 11} true;
  assume {:verifier.code 0} true;
  $p134, $i135 := $p118, $i117;
  assume {:branchcond $i133} true;
  goto $bb70, $bb71;
$bb64:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4262, 25} true;
  assume {:verifier.code 0} true;
  $i119 := $add.i32($i5, 8);
  // WARNING: %119 = add nsw i32 %6, 8, !dbg !4961, !verifier.code !4715
  call {:cexpr "__cil_tmp48"} boogie_si_record_i32($i119);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4263, 15} true;
  assume {:verifier.code 0} true;
  call $i120 := inb($i119);
  // WARNING: %120 = call zeroext i8 @inb(i32 %119), !dbg !4965, !verifier.code !4715
  call {:cexpr "tmp___7"} boogie_si_record_i8($i120);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4264, 9} true;
  assume {:verifier.code 0} true;
  $i121 := $zext.i8.i32($i120);
  // WARNING: %121 = zext i8 %120 to i32, !dbg !4968, !verifier.code !4715
  call {:cexpr "j"} boogie_si_record_i32($i121);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4267, 21} true;
  assume {:verifier.code 0} true;
  $i122 := $and.i32($i121, 8);
  // WARNING: %122 = and i32 %121, 8, !dbg !4969, !verifier.code !4715
  call {:cexpr "__cil_tmp49"} boogie_si_record_i32($i122);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4268, 21} true;
  assume {:verifier.code 0} true;
  $i123 := $eq.i32($i122, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4268, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i123} true;
  goto $bb65, $bb66;
$bb65:
  assume ($i123 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4270, 27} true;
  assume {:verifier.code 0} true;
  $i124 := $add.i32($i5, 4);
  // WARNING: %125 = add nsw i32 %6, 4, !dbg !4976, !verifier.code !4715
  call {:cexpr "__cil_tmp50"} boogie_si_record_i32($i124);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4272, 7} true;
  assume {:verifier.code 0} true;
  call outsl($i124, $p118, 21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4273, 23} true;
  assume {:verifier.code 0} true;
  $i125 := $add.i32($i117, $sub.i32(0, 84));
  // WARNING: %126 = add nsw i32 %.1180, -84, !dbg !4984, !verifier.code !4715
  call {:cexpr "reqlen"} boogie_si_record_i32($i125);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4274, 25} true;
  assume {:verifier.code 0} true;
  $p126 := $add.ref($p118, 84);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4276, 5} true;
  assume {:verifier.code 0} true;
  $p127, $i128 := $p126, $i125;
  goto $bb67;
$bb66:
  assume !(($i123 == 1));
  assume {:verifier.code 0} true;
  $p127, $i128 := $p118, $i117;
  goto $bb67;
$bb67:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4281, 16} true;
  assume {:verifier.code 0} true;
  $i129 := $sgt.i32($i128, 83);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4281, 9} true;
  assume {:verifier.code 0} true;
  $i116, $i117, $p118, $p130, $i131 := $i121, $i128, $p127, $p127, $i128;
  assume {:branchcond $i129} true;
  goto $bb68, $bb69;
$bb68:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4281, 9} true;
  assume {:verifier.code 0} true;
  assume ($i129 == 1);
  goto $bb63;
$bb69:
  assume !(($i129 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4281, 9} true;
  assume {:verifier.code 0} true;
  $p114, $i115 := $p130, $i131;
  goto $bb62;
$bb70:
  assume ($i133 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4285, 9} true;
  assume {:verifier.code 0} true;
  goto $bb64;
$bb71:
  assume !(($i133 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4287, 9} true;
  assume {:verifier.code 0} true;
  $p136, $i137 := $p134, $i135;
  goto $bb72;
$bb72:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4294, 16} true;
  assume {:verifier.code 0} true;
  $i138 := $sgt.i32($i137, 39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4294, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i138} true;
  goto $bb73, $bb74;
$bb73:
  assume ($i138 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4296, 27} true;
  assume {:verifier.code 0} true;
  $i139 := $add.i32($i5, 8);
  // WARNING: %140 = add nsw i32 %6, 8, !dbg !5004, !verifier.code !4715
  call {:cexpr "__cil_tmp53"} boogie_si_record_i32($i139);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4297, 17} true;
  assume {:verifier.code 0} true;
  call $i140 := inb($i139);
  // WARNING: %141 = call zeroext i8 @inb(i32 %140), !dbg !5009, !verifier.code !4715
  call {:cexpr "tmp___8"} boogie_si_record_i8($i140);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4300, 21} true;
  assume {:verifier.code 0} true;
  $i141 := $zext.i8.i32($i140);
  // WARNING: %142 = zext i8 %141 to i32, !dbg !5012, !verifier.code !4715
  call {:cexpr "__cil_tmp54"} boogie_si_record_i32($i141);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4301, 33} true;
  assume {:verifier.code 0} true;
  $i142 := $and.i32($i141, 4);
  // WARNING: %143 = and i32 %142, 4, !dbg !5016, !verifier.code !4715
  call {:cexpr "__cil_tmp55"} boogie_si_record_i32($i142);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4302, 23} true;
  assume {:verifier.code 0} true;
  $i143 := $eq.i32($i142, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4302, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i143} true;
  goto $bb75, $bb76;
$bb74:
  assume !(($i138 == 1));
  assume {:verifier.code 0} true;
  $p149, $i150 := $p136, $i137;
  goto $bb78;
$bb75:
  assume ($i143 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4304, 29} true;
  assume {:verifier.code 0} true;
  $i144 := $add.i32($i5, 4);
  // WARNING: %146 = add nsw i32 %6, 4, !dbg !5022, !verifier.code !4715
  call {:cexpr "__cil_tmp56"} boogie_si_record_i32($i144);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4306, 9} true;
  assume {:verifier.code 0} true;
  call outsl($i144, $p136, 10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4307, 25} true;
  assume {:verifier.code 0} true;
  $i145 := $add.i32($i137, $sub.i32(0, 40));
  // WARNING: %147 = add nsw i32 %.1144, -40, !dbg !5030, !verifier.code !4715
  call {:cexpr "reqlen"} boogie_si_record_i32($i145);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4308, 27} true;
  assume {:verifier.code 0} true;
  $p146 := $add.ref($p136, 40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4310, 7} true;
  assume {:verifier.code 0} true;
  $p147, $i148 := $p146, $i145;
  goto $bb77;
$bb76:
  assume !(($i143 == 1));
  assume {:verifier.code 0} true;
  $p147, $i148 := $p136, $i137;
  goto $bb77;
$bb77:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4314, 5} true;
  assume {:verifier.code 0} true;
  $p149, $i150 := $p147, $i148;
  goto $bb78;
$bb78:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  // WARNING: %.13 = phi i32 [ %.1211, %150 ], [ %.1144, %151 ], !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4365, 16} true;
  assume {:verifier.code 0} true;
  $i151 := $ne.i32($i150, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4365, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i151} true;
  goto $bb79, $bb80;
$bb79:
  assume ($i151 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4365, 9} true;
  assume {:verifier.code 0} true;
  $i152, $i153, $p154 := 0, $i150, $p149;
  goto $bb82;
$bb80:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4365, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i151 == 1));
  goto $bb81;
$bb81:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4382, 7} true;
  assume {:verifier.code 0} true;
  goto $bb103;
$bb82:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4367, 23} true;
  assume {:verifier.code 0} true;
  $i189 := $and.i32($i152, 2);
  // WARNING: %184 = and i32 %.975, 2, !dbg !5099, !verifier.code !4715
  call {:cexpr "__cil_tmp67"} boogie_si_record_i32($i189);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4368, 23} true;
  assume {:verifier.code 0} true;
  $i190 := $eq.i32($i189, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4368, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i190} true;
  goto $bb99, $bb100;
$bb83:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4334, 16} true;
  assume {:verifier.code 0} true;
  $i155 := $ne.i32($i153, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4334, 9} true;
  assume {:verifier.code 0} true;
  $p156, $i157, $i158 := $p154, $i153, $i152;
  assume {:branchcond $i155} true;
  goto $bb84, $bb85;
$bb84:
  assume ($i155 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4334, 9} true;
  assume {:verifier.code 0} true;
  $i159, $p160 := $i153, $p154;
  goto $bb87;
$bb85:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4334, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i155 == 1));
  goto $bb86;
$bb86:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4349, 7} true;
  assume {:verifier.code 0} true;
  $p179, $i180, $i181 := $p156, $i157, $i158;
  goto $bb93;
$bb87:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4336, 27} true;
  assume {:verifier.code 0} true;
  $i172 := $add.i32($i5, 8);
  // WARNING: %165 = add nsw i32 %6, 8, !dbg !5060, !verifier.code !4715
  call {:cexpr "__cil_tmp63"} boogie_si_record_i32($i172);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4337, 18} true;
  assume {:verifier.code 0} true;
  call $i173 := inb($i172);
  // WARNING: %166 = call zeroext i8 @inb(i32 %165), !dbg !5065, !verifier.code !4715
  call {:cexpr "tmp___10"} boogie_si_record_i8($i173);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4338, 11} true;
  assume {:verifier.code 0} true;
  $i171 := $zext.i8.i32($i173);
  // WARNING: %167 = zext i8 %166 to i32, !dbg !5068, !verifier.code !4715
  call {:cexpr "j"} boogie_si_record_i32($i171);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4341, 23} true;
  assume {:verifier.code 0} true;
  $i174 := $and.i32($i171, 2);
  // WARNING: %168 = and i32 %167, 2, !dbg !5069, !verifier.code !4715
  call {:cexpr "__cil_tmp64"} boogie_si_record_i32($i174);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4342, 23} true;
  assume {:verifier.code 0} true;
  $i175 := $eq.i32($i174, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4342, 11} true;
  assume {:verifier.code 0} true;
  $p176, $i177, $i178 := $p160, $i159, $i171;
  assume {:branchcond $i175} true;
  goto $bb91, $bb92;
$bb88:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4324, 23} true;
  assume {:verifier.code 0} true;
  $p161 := $add.ref($p160, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4325, 19} true;
  assume {:verifier.code 0} true;
  $i162 := $load.i8($M.0, $p160);
  // WARNING: %158 = load i8, i8* %.142665, align 1, !dbg !5044, !verifier.code !4715
  call {:cexpr "__cil_tmp58"} boogie_si_record_i8($i162);
  // WARNING: call void @llvm.dbg.value(metadata i8 %158, i64 0, metadata !6181, metadata !4713), !dbg !6182, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4327, 19} true;
  assume {:verifier.code 0} true;
  $i163 := $zext.i8.i32($i162);
  // WARNING: %159 = zext i8 %158 to i32, !dbg !5049, !verifier.code !4715
  call {:cexpr "__cil_tmp60"} boogie_si_record_i32($i163);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4328, 19} true;
  assume {:verifier.code 0} true;
  $i164 := $trunc.i32.i8($i163);
  // WARNING: %160 = trunc i32 %159 to i8, !dbg !5052, !verifier.code !4715
  call {:cexpr "__cil_tmp61"} boogie_si_record_i8($i164);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4329, 25} true;
  assume {:verifier.code 0} true;
  $i165 := $add.i32($i5, 4);
  // WARNING: %161 = add nsw i32 %6, 4, !dbg !5055, !verifier.code !4715
  call {:cexpr "__cil_tmp62"} boogie_si_record_i32($i165);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4330, 5} true;
  assume {:verifier.code 0} true;
  call outb($i164, $i165);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4331, 21} true;
  assume {:verifier.code 0} true;
  $i166 := $sub.i32($i159, 1);
  // WARNING: %162 = sub nsw i32 %.1466, 1, !dbg !5059, !verifier.code !4715
  call {:cexpr "reqlen"} boogie_si_record_i32($i166);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4334, 16} true;
  assume {:verifier.code 0} true;
  $i167 := $ne.i32($i166, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4334, 9} true;
  assume {:verifier.code 0} true;
  $i159, $p160, $p168, $i169, $i170 := $i166, $p161, $p161, $i166, $i171;
  assume {:branchcond $i167} true;
  goto $bb89, $bb90;
$bb89:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4334, 9} true;
  assume {:verifier.code 0} true;
  assume ($i167 == 1);
  goto $bb87;
$bb90:
  assume !(($i167 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4334, 9} true;
  assume {:verifier.code 0} true;
  $p156, $i157, $i158 := $p168, $i169, $i170;
  goto $bb86;
$bb91:
  assume ($i175 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4343, 9} true;
  assume {:verifier.code 0} true;
  goto $bb88;
$bb92:
  assume !(($i175 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4345, 9} true;
  assume {:verifier.code 0} true;
  $p179, $i180, $i181 := $p176, $i177, $i178;
  goto $bb93;
$bb93:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4353, 21} true;
  assume {:verifier.code 0} true;
  $i182 := $and.i32($i181, 2);
  // WARNING: %174 = and i32 %.7, 2, !dbg !5082, !verifier.code !4715
  call {:cexpr "__cil_tmp65"} boogie_si_record_i32($i182);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4354, 21} true;
  assume {:verifier.code 0} true;
  $i183 := $ne.i32($i182, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4354, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i183} true;
  goto $bb94, $bb95;
$bb94:
  assume ($i183 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4356, 27} true;
  assume {:verifier.code 0} true;
  $i184 := $add.i32($i5, 8);
  // WARNING: %177 = add nsw i32 %6, 8, !dbg !5089, !verifier.code !4715
  call {:cexpr "__cil_tmp66"} boogie_si_record_i32($i184);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4357, 18} true;
  assume {:verifier.code 0} true;
  call $i185 := inb($i184);
  // WARNING: %178 = call zeroext i8 @inb(i32 %177), !dbg !5094, !verifier.code !4715
  call {:cexpr "tmp___11"} boogie_si_record_i8($i185);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4358, 11} true;
  assume {:verifier.code 0} true;
  $i186 := $zext.i8.i32($i185);
  // WARNING: %179 = zext i8 %178 to i32, !dbg !5097, !verifier.code !4715
  call {:cexpr "j"} boogie_si_record_i32($i186);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4360, 5} true;
  assume {:verifier.code 0} true;
  $i187 := $i186;
  goto $bb96;
$bb95:
  assume !(($i183 == 1));
  assume {:verifier.code 0} true;
  $i187 := $i181;
  goto $bb96;
$bb96:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4365, 16} true;
  assume {:verifier.code 0} true;
  $i188 := $ne.i32($i180, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4365, 9} true;
  assume {:verifier.code 0} true;
  $i152, $i153, $p154 := $i187, $i180, $p179;
  assume {:branchcond $i188} true;
  goto $bb97, $bb98;
$bb97:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4365, 9} true;
  assume {:verifier.code 0} true;
  assume ($i188 == 1);
  goto $bb82;
$bb98:
  assume !(($i188 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4365, 9} true;
  assume {:verifier.code 0} true;
  goto $bb81;
$bb99:
  assume ($i190 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4369, 9} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb100:
  assume !(($i190 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4372, 25} true;
  assume {:verifier.code 0} true;
  $i191 := $and.i32($i152, 192);
  // WARNING: %188 = and i32 %.975, 192, !dbg !5109, !verifier.code !4715
  call {:cexpr "__cil_tmp68"} boogie_si_record_i32($i191);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4373, 25} true;
  assume {:verifier.code 0} true;
  $i192 := $eq.i32($i191, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4373, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i192} true;
  goto $bb101, $bb102;
$bb101:
  assume ($i192 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4374, 11} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb102:
  assume !(($i192 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4376, 11} true;
  assume {:verifier.code 0} true;
  goto $bb103;
$bb103:
  assume {:verifier.code 0} true;
  goto $bb53;
}
const sg_next: ref;
axiom (sg_next == $sub.ref(0, 32118));
procedure  sg_next($p0: ref)
  returns ($r: ref);
const scsi_sg_count: ref;
axiom (scsi_sg_count == $sub.ref(0, 33150));
procedure  scsi_sg_count($p0: ref)
  returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.scsi_cmnd* %0, i64 0, metadata !6273, metadata !4713), !dbg !6274, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3869, 19} true;
  assume {:verifier.code 0} true;
  $i1 := $add.i64(88, 8);
  // WARNING: %2 = add i64 88, 8, !dbg !4718, !verifier.code !4715
  call {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3870, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p0);
  // WARNING: %3 = ptrtoint %struct.scsi_cmnd* %0 to i64, !dbg !4723, !verifier.code !4715
  call {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3871, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $add.i64($i2, $i1);
  // WARNING: %4 = add i64 %3, %2, !dbg !4726, !verifier.code !4715
  call {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3872, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $i2p.i64.ref($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3872, 11} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3872, 3} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const ql_wai: ref;
axiom (ql_wai == $sub.ref(0, 34182));
procedure  ql_wai($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i9: i32;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i21: i32;
  var $i22: i8;
  var $i13: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i20: i32;
  var $i14: i32;
  var $i8: i32;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i30: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4425, 11} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4425, 11} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i32($M.0, $p1);
  // WARNING: %3 = load i32, i32* %2, align 4, !dbg !4716, !verifier.code !4715
  call {:cexpr "qbase"} boogie_si_record_i32($i2);
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !6298, metadata !4713), !dbg !6299, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4427, 33} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i64($M.0, jiffies);
  // WARNING: %4 = load volatile i64, i64* @jiffies, align 8, !dbg !4722, !verifier.code !4715
  call {:cexpr "__cil_tmp15"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4428, 19} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i64($i3, 5000000);
  // WARNING: %5 = add i64 %4, 5000000, !dbg !4725, !verifier.code !4715
  call {:cexpr "i"} boogie_si_record_i64($i4);
  // WARNING: call void @llvm.dbg.value(metadata i64 %5, i64 0, metadata !6306, metadata !4713), !dbg !6307, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4438, 24} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i64($M.0, jiffies);
  // WARNING: %6 = load volatile i64, i64* @jiffies, align 8, !dbg !4730, !verifier.code !4715
  call {:cexpr "__cil_tmp17"} boogie_si_record_i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4439, 29} true;
  assume {:verifier.code 0} true;
  $i6 := $sub.i64($i5, $i4);
  // WARNING: %7 = sub nsw i64 %6, %5, !dbg !4734, !verifier.code !4715
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4440, 19} true;
  assume {:verifier.code 0} true;
  $i7 := $slt.i64($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4440, 7} true;
  assume {:verifier.code 0} true;
  $i8 := 0;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4440, 7} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4440, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i7 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4464, 5} true;
  assume {:verifier.code 0} true;
  $i26 := $i8;
  goto $bb12;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4442, 19} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.i64($p0);
  // WARNING: %14 = ptrtoint %struct.qlogicfas408_priv* %0 to i64, !dbg !4742, !verifier.code !4715
  call {:cexpr "__cil_tmp19"} boogie_si_record_i64($i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4443, 31} true;
  assume {:verifier.code 0} true;
  $i16 := $add.i64($i15, 8);
  // WARNING: %15 = add i64 %14, 8, !dbg !4747, !verifier.code !4715
  call {:cexpr "__cil_tmp20"} boogie_si_record_i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4444, 21} true;
  assume {:verifier.code 0} true;
  $p17 := $i2p.i64.ref($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4444, 19} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i32($M.0, $p17);
  // WARNING: %17 = load i32, i32* %16, align 4, !dbg !4751, !verifier.code !4715
  call {:cexpr "__cil_tmp21"} boogie_si_record_i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4445, 21} true;
  assume {:verifier.code 0} true;
  $i19 := $eq.i32($i18, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4445, 9} true;
  assume {:verifier.code 0} true;
  $i20 := $i9;
  assume {:branchcond $i19} true;
  goto $bb8, $bb9;
$bb5:
  call devirtbounce.3(0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4433, 3} true;
  assume {:verifier.code 0} true;
  call cpu_relax();
  // WARNING: call void @cpu_relax(), !dbg !4740, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4438, 24} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i64($M.0, jiffies);
  // WARNING: %10 = load volatile i64, i64* @jiffies, align 8, !dbg !4730, !verifier.code !4715
  call {:cexpr "__cil_tmp17"} boogie_si_record_i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4439, 29} true;
  assume {:verifier.code 0} true;
  $i11 := $sub.i64($i10, $i4);
  // WARNING: %11 = sub nsw i64 %10, %5, !dbg !4734, !verifier.code !4715
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4440, 19} true;
  assume {:verifier.code 0} true;
  $i12 := $slt.i64($i11, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4440, 7} true;
  assume {:verifier.code 0} true;
  $i9, $i14 := $i13, $i13;
  assume {:branchcond $i12} true;
  goto $bb6, $bb7;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4440, 7} true;
  assume {:verifier.code 0} true;
  assume ($i12 == 1);
  goto $bb4;
$bb7:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4440, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $i14;
  goto $bb3;
$bb8:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4447, 27} true;
  assume {:verifier.code 0} true;
  $i21 := $add.i32($i2, 4);
  // WARNING: %20 = add nsw i32 %3, 4, !dbg !4757, !verifier.code !4715
  call {:cexpr "__cil_tmp22"} boogie_si_record_i32($i21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4448, 13} true;
  assume {:verifier.code 0} true;
  call $i22 := inb($i21);
  // WARNING: %21 = call zeroext i8 @inb(i32 %20), !dbg !4762, !verifier.code !4715
  call {:cexpr "tmp"} boogie_si_record_i8($i22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4449, 11} true;
  assume {:verifier.code 0} true;
  $i13 := $zext.i8.i32($i22);
  // WARNING: %22 = zext i8 %21 to i32, !dbg !4765, !verifier.code !4715
  call {:cexpr "k"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4452, 23} true;
  assume {:verifier.code 0} true;
  $i23 := $and.i32($i13, 224);
  // WARNING: %23 = and i32 %22, 224, !dbg !4766, !verifier.code !4715
  call {:cexpr "__cil_tmp23"} boogie_si_record_i32($i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4453, 23} true;
  assume {:verifier.code 0} true;
  $i24 := $eq.i32($i23, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4453, 11} true;
  assume {:verifier.code 0} true;
  $i25 := $i13;
  assume {:branchcond $i24} true;
  goto $bb10, $bb11;
$bb9:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4460, 7} true;
  assume {:verifier.code 0} true;
  $i26 := $i20;
  goto $bb12;
$bb10:
  assume ($i24 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4454, 9} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb11:
  assume !(($i24 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4456, 9} true;
  assume {:verifier.code 0} true;
  $i26 := $i25;
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  // WARNING: %.1 = phi i32 [ %.lcssa, %26 ], [ %.02.lcssa3, %27 ], [ %.02.lcssa, %28 ], !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4470, 24} true;
  assume {:verifier.code 0} true;
  $i27 := $load.i64($M.0, jiffies);
  // WARNING: %30 = load volatile i64, i64* @jiffies, align 8, !dbg !4783, !verifier.code !4715
  call {:cexpr "__cil_tmp25"} boogie_si_record_i64($i27);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4471, 29} true;
  assume {:verifier.code 0} true;
  $i28 := $sub.i64($i27, $i4);
  // WARNING: %31 = sub nsw i64 %30, %5, !dbg !4787, !verifier.code !4715
  call {:cexpr "__cil_tmp26"} boogie_si_record_i64($i28);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4472, 19} true;
  assume {:verifier.code 0} true;
  $i29 := $sge.i64($i28, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4472, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i29 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4473, 5} true;
  assume {:verifier.code 0} true;
  $i30 := 3;
  goto $bb15;
$bb14:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4526, 1} true;
  assume {:verifier.code 0} true;
  $r := $i30;
  $exn := false;
  return;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4479, 17} true;
  assume {:verifier.code 0} true;
  $i31 := $p2i.ref.i64($p0);
  // WARNING: %36 = ptrtoint %struct.qlogicfas408_priv* %0 to i64, !dbg !4795, !verifier.code !4715
  call {:cexpr "__cil_tmp27"} boogie_si_record_i64($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4480, 29} true;
  assume {:verifier.code 0} true;
  $i32 := $add.i64($i31, 8);
  // WARNING: %37 = add i64 %36, 8, !dbg !4799, !verifier.code !4715
  call {:cexpr "__cil_tmp28"} boogie_si_record_i64($i32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4481, 19} true;
  assume {:verifier.code 0} true;
  $p33 := $i2p.i64.ref($i32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4481, 17} true;
  assume {:verifier.code 0} true;
  $i34 := $load.i32($M.0, $p33);
  // WARNING: %39 = load i32, i32* %38, align 4, !dbg !4803, !verifier.code !4715
  call {:cexpr "__cil_tmp29"} boogie_si_record_i32($i34);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4482, 19} true;
  assume {:verifier.code 0} true;
  $i35 := $ne.i32($i34, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4482, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i35 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4484, 19} true;
  assume {:verifier.code 0} true;
  $i36 := $p2i.ref.i64($p0);
  // WARNING: %42 = ptrtoint %struct.qlogicfas408_priv* %0 to i64, !dbg !4809, !verifier.code !4715
  call {:cexpr "__cil_tmp30"} boogie_si_record_i64($i36);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4485, 31} true;
  assume {:verifier.code 0} true;
  $i37 := $add.i64($i36, 8);
  // WARNING: %43 = add i64 %42, 8, !dbg !4814, !verifier.code !4715
  call {:cexpr "__cil_tmp31"} boogie_si_record_i64($i37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4486, 21} true;
  assume {:verifier.code 0} true;
  $p38 := $i2p.i64.ref($i37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4486, 19} true;
  assume {:verifier.code 0} true;
  $i39 := $load.i32($M.0, $p38);
  // WARNING: %45 = load i32, i32* %44, align 4, !dbg !4818, !verifier.code !4715
  call {:cexpr "__cil_tmp32"} boogie_si_record_i32($i39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4487, 21} true;
  assume {:verifier.code 0} true;
  $i40 := $eq.i32($i39, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4487, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb19, $bb20;
$bb18:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb19:
  assume ($i40 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4489, 5} true;
  assume {:verifier.code 0} true;
  $i41 := 5;
  goto $bb21;
$bb20:
  assume !(($i40 == 1));
  assume {:verifier.code 0} true;
  $i41 := 8;
  goto $bb21;
$bb21:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4493, 5} true;
  assume {:verifier.code 0} true;
  $i30 := $i41;
  goto $bb15;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4499, 19} true;
  assume {:verifier.code 0} true;
  $i42 := $and.i32($i26, 96);
  // WARNING: %52 = and i32 %.1, 96, !dbg !4829, !verifier.code !4715
  call {:cexpr "__cil_tmp33"} boogie_si_record_i32($i42);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4500, 19} true;
  assume {:verifier.code 0} true;
  $i43 := $ne.i32($i42, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4500, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i43} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i43 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4502, 5} true;
  assume {:verifier.code 0} true;
  call ql_zap($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4504, 3} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb24:
  assume !(($i43 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4509, 19} true;
  assume {:verifier.code 0} true;
  $i44 := $and.i32($i26, 32);
  // WARNING: %57 = and i32 %.1, 32, !dbg !4840, !verifier.code !4715
  call {:cexpr "__cil_tmp34"} boogie_si_record_i32($i44);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4510, 19} true;
  assume {:verifier.code 0} true;
  $i45 := $ne.i32($i44, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4510, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i45 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4511, 5} true;
  assume {:verifier.code 0} true;
  $i30 := 6;
  goto $bb15;
$bb27:
  assume !(($i45 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4517, 19} true;
  assume {:verifier.code 0} true;
  $i46 := $and.i32($i26, 64);
  // WARNING: %62 = and i32 %.1, 64, !dbg !4849, !verifier.code !4715
  call {:cexpr "__cil_tmp35"} boogie_si_record_i32($i46);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4518, 19} true;
  assume {:verifier.code 0} true;
  $i47 := $ne.i32($i46, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4518, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i47} true;
  goto $bb29, $bb30;
$bb29:
  assume ($i47 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4519, 5} true;
  assume {:verifier.code 0} true;
  $i30 := 7;
  goto $bb15;
$bb30:
  assume !(($i47 == 1));
  assume {:verifier.code 0} true;
  goto $bb31;
$bb31:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 4524, 3} true;
  assume {:verifier.code 0} true;
  $i30 := 0;
  goto $bb15;
}
const cpu_relax: ref;
axiom (cpu_relax == $sub.ref(0, 35214));
procedure  cpu_relax()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3699, 3} true;
  assume {:verifier.code 0} true;
  call rep_nop();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3701, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const rep_nop: ref;
axiom (rep_nop == $sub.ref(0, 36246));
procedure  rep_nop()
{
$bb0:
  call devirtbounce.3(0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3691, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const insl: ref;
axiom (insl == $sub.ref(0, 37278));
procedure  insl($i0: i32, $p1: ref, $i2: i64)
{
  var $p3: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !6453, metadata !4713), !dbg !6454, !verifier.code !4715
  call $p3 := devirtbounce.4(0, $i0, $p1, $i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3747, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const outsl: ref;
axiom (outsl == $sub.ref(0, 38310));
procedure  outsl($i0: i32, $p1: ref, $i2: i64)
{
  var $p3: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !6464, metadata !4713), !dbg !6465, !verifier.code !4715
  call $p3 := devirtbounce.4(0, $i0, $p1, $i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3739, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const sg_page: ref;
axiom (sg_page == $sub.ref(0, 39342));
procedure  sg_page($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i32;
  var $i17: i64;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3796, 16} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3796, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i64($M.0, $p1);
  // WARNING: %3 = load i64, i64* %2, align 8, !dbg !4716, !verifier.code !4715
  call {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3797, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i64($i2, 2271560481);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3797, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i32($i3);
  // WARNING: %5 = zext i1 %4 to i32, !dbg !4721, !verifier.code !4715
  call {:cexpr "__cil_tmp5"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3798, 16} true;
  assume {:verifier.code 0} true;
  $i5 := $sext.i32.i64($i4);
  // WARNING: %6 = sext i32 %5 to i64, !dbg !4724, !verifier.code !4715
  call {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3799, 9} true;
  assume {:verifier.code 0} true;
  call $i6 := __builtinx_expect.i64.i64($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3799, 9} true;
  assume {:verifier.code 0} true;
  $i7 := $sext.i32.i64($i6);
  // WARNING: %8 = sext i32 %7 to i64, !dbg !4727, !verifier.code !4715
  call {:cexpr "tmp"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3801, 11} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i64($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3801, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  call devirtbounce.5(0, .str.3, 98, 12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3802, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3805, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3810, 16} true;
  assume {:verifier.code 0} true;
  $i9 := $p2i.ref.i64($p0);
  // WARNING: %14 = ptrtoint %struct.scatterlist* %0 to i64, !dbg !4736, !verifier.code !4715
  call {:cexpr "__cil_tmp7"} boogie_si_record_i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3811, 27} true;
  assume {:verifier.code 0} true;
  $i10 := $add.i64($i9, 8);
  // WARNING: %15 = add i64 %14, 8, !dbg !4740, !verifier.code !4715
  call {:cexpr "__cil_tmp8"} boogie_si_record_i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3812, 18} true;
  assume {:verifier.code 0} true;
  $p11 := $i2p.i64.ref($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3812, 16} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i64($M.0, $p11);
  // WARNING: %17 = load i64, i64* %16, align 8, !dbg !4744, !verifier.code !4715
  call {:cexpr "__cil_tmp9"} boogie_si_record_i64($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3813, 17} true;
  assume {:verifier.code 0} true;
  $i13 := $trunc.i64.i32($i12);
  // WARNING: %18 = trunc i64 %17 to i32, !dbg !4747, !verifier.code !4715
  call {:cexpr "__cil_tmp10"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3814, 17} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.i32.i64($i13);
  // WARNING: %19 = sext i32 %18 to i64, !dbg !4750, !verifier.code !4715
  call {:cexpr "__cil_tmp11"} boogie_si_record_i64($i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3815, 29} true;
  assume {:verifier.code 0} true;
  $i15 := $and.i64($i14, 1);
  // WARNING: %20 = and i64 %19, 1, !dbg !4753, !verifier.code !4715
  call {:cexpr "__cil_tmp12"} boogie_si_record_i64($i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3816, 13} true;
  assume {:verifier.code 0} true;
  call $i16 := __builtinx_expect.i64.i64($i15, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3816, 13} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.i32.i64($i16);
  // WARNING: %22 = sext i32 %21 to i64, !dbg !4756, !verifier.code !4715
  call {:cexpr "tmp___0"} boogie_si_record_i64($i17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3818, 15} true;
  assume {:verifier.code 0} true;
  $i18 := $ne.i64($i17, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3818, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i18 == 1);
  call devirtbounce.5(0, .str.3, 99, 12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3819, 5} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i18 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3822, 5} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3827, 17} true;
  assume {:verifier.code 0} true;
  $i19 := $p2i.ref.i64($p0);
  // WARNING: %28 = ptrtoint %struct.scatterlist* %0 to i64, !dbg !4765, !verifier.code !4715
  call {:cexpr "__cil_tmp13"} boogie_si_record_i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3828, 29} true;
  assume {:verifier.code 0} true;
  $i20 := $add.i64($i19, 8);
  // WARNING: %29 = add i64 %28, 8, !dbg !4769, !verifier.code !4715
  call {:cexpr "__cil_tmp14"} boogie_si_record_i64($i20);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3829, 19} true;
  assume {:verifier.code 0} true;
  $p21 := $i2p.i64.ref($i20);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3829, 17} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i64($M.0, $p21);
  // WARNING: %31 = load i64, i64* %30, align 8, !dbg !4773, !verifier.code !4715
  call {:cexpr "__cil_tmp15"} boogie_si_record_i64($i22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3830, 29} true;
  assume {:verifier.code 0} true;
  $i23 := $and.i64($i22, $sub.i64(0, 4));
  // WARNING: %32 = and i64 %31, -4, !dbg !4776, !verifier.code !4715
  call {:cexpr "__cil_tmp16"} boogie_si_record_i64($i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3831, 11} true;
  assume {:verifier.code 0} true;
  $p24 := $i2p.i64.ref($i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3831, 3} true;
  assume {:verifier.code 0} true;
  $r := $p24;
  $exn := false;
  return;
}
const lowmem_page_address: ref;
axiom (lowmem_page_address == $sub.ref(0, 40374));
procedure  lowmem_page_address($p0: ref)
  returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3766, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  // WARNING: %2 = ptrtoint %struct.page* %0 to i64, !dbg !4716, !verifier.code !4715
  call {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3767, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $add.i64($i1, 24189255811072);
  // WARNING: %3 = add nsw i64 %2, 24189255811072, !dbg !4721, !verifier.code !4715
  call {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3768, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $sdiv.i64($i2, 64);
  // WARNING: %4 = sdiv i64 %3, 64, !dbg !4724, !verifier.code !4715
  call {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
  // WARNING: call void @llvm.dbg.value(metadata i64 %4, i64 0, metadata !6554, metadata !4713), !dbg !6555, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3770, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $shl.i64($i3, 12);
  // WARNING: %5 = shl i64 %4, 12, !dbg !4729, !verifier.code !4715
  call {:cexpr "__cil_tmp6"} boogie_si_record_i64($i4);
  // WARNING: call void @llvm.dbg.value(metadata i64 %5, i64 0, metadata !6559, metadata !4713), !dbg !6560, !verifier.code !4715
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3772, 27} true;
  assume {:verifier.code 0} true;
  $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
  // WARNING: %6 = add i64 %5, -131941395333120, !dbg !4734, !verifier.code !4715
  call {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3773, 11} true;
  assume {:verifier.code 0} true;
  $p6 := $i2p.i64.ref($i5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 3773, 3} true;
  assume {:verifier.code 0} true;
  $r := $p6;
  $exn := false;
  return;
}
const __builtinx_expect: ref;
axiom (__builtinx_expect == $sub.ref(0, 41406));
procedure  __builtinx_expect.i64.i64(p.0: i64, p.1: i64)
  returns ($r: i32);
const main: ref;
axiom (main == $sub.ref(0, 42438));
procedure {:entrypoint} main()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
$bb0:
  call $initialize();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6105, 20} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6105, 20} true;
  assume {:verifier.code 0} true;
  $M.3 := 1;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6106, 3} true;
  assume {:verifier.code 0} true;
  call ldv_initialize();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6107, 9} true;
  assume {:verifier.code 0} true;
  call $i0 := qlogicfas408_init();
  // WARNING: %1 = call i32 @qlogicfas408_init(), !dbg !4715, !verifier.code !4713
  call {:cexpr "tmp"} boogie_si_record_i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6109, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6109, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6110, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6155, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_final_state();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6157, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6142, 13} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  // WARNING: %6 = call i32 @__VERIFIER_nondet_int(), !dbg !4724, !verifier.code !4726
  call {:cexpr "tmp___1"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6144, 15} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6144, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6144, 7} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6144, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6147, 5} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6145, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6117, 13} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  // WARNING: %9 = call i32 @__VERIFIER_nondet_int(), !dbg !4732, !verifier.code !4726
  call {:cexpr "tmp___0"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6119, 15} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6119, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6120, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume !(($i5 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6123, 5} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6127, 24} true;
  assume {:verifier.code 0} true;
  $M.3 := 2;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6128, 7} true;
  assume {:verifier.code 0} true;
  call $i6 := qlogicfas408_ihandl($u1, $u2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6129, 24} true;
  assume {:verifier.code 0} true;
  $M.3 := 1;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6131, 7} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6133, 7} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6124, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb15, $bb16;
$bb15:
  assume (0 == 1);
  assume {:verifier.code 0} true;
  assume false;
$bb16:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6134, 12} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6142, 13} true;
  assume {:verifier.code 1} true;
  call $i7 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
  // WARNING: %23 = call i32 @__VERIFIER_nondet_int(), !dbg !4724, !verifier.code !4726
  call {:cexpr "tmp___1"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6144, 15} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6144, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb21, $bb22;
$bb18:
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:verifier.code 0} true;
  goto $bb20;
$bb20:
  assume {:verifier.code 0} true;
  assume false;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6144, 7} true;
  assume {:verifier.code 0} true;
  assume ($i8 == 1);
  goto $bb8;
$bb22:
  assume !(($i8 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6144, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6151, 3} true;
  assume {:verifier.code 0} true;
  call qlogicfas408_exit();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6152, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const ldv_initialize: ref;
axiom (ldv_initialize == $sub.ref(0, 43470));
procedure  ldv_initialize();
const qlogicfas408_init: ref;
axiom (qlogicfas408_init == $sub.ref(0, 44502));
procedure  qlogicfas408_init()
  returns ($r: i32)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6082, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const qlogicfas408_exit: ref;
axiom (qlogicfas408_exit == $sub.ref(0, 45534));
procedure  qlogicfas408_exit()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--scsi--qlogicfas408.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zZ_4Ix.c", 6089, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_check_final_state: ref;
axiom (ldv_check_final_state == $sub.ref(0, 46566));
procedure  ldv_check_final_state();
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 47598));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !6628, metadata !4713), !dbg !6629, !verifier.code !4715
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 34, 21} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 35, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 48630));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 49662));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 261, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 50694));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 51726));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 52758));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 53790));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 54822));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 55854));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 56886));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 57918));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 58950));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 120, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
  // WARNING: %1 = call i32 @__SMACK_nondet_int(), !dbg !4710, !verifier.code !4711
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.i32($i0, 2147483647);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i2);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 122, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 59982));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 61014));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 62046));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 63078));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 64110));
procedure  __SMACK_nondet_long()
  returns ($r: i64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 65142));
procedure  __SMACK_nondet_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 66174));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 67206));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 68238));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 69270));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 70302));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 71334));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 72366));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 73398));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 74430));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 75462));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 76494));
function {:inline} $bitcast.ref.ref(i: ref) returns (ref) {i}
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $min.bv128(i1: bv128, i2: bv128) returns (bv128) {if $slt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv96(i1: bv96, i2: bv96) returns (bv96) {if $slt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv88(i1: bv88, i2: bv88) returns (bv88) {if $slt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv64(i1: bv64, i2: bv64) returns (bv64) {if $slt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv56(i1: bv56, i2: bv56) returns (bv56) {if $slt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv48(i1: bv48, i2: bv48) returns (bv48) {if $slt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv40(i1: bv40, i2: bv40) returns (bv40) {if $slt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv32(i1: bv32, i2: bv32) returns (bv32) {if $slt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv24(i1: bv24, i2: bv24) returns (bv24) {if $slt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv16(i1: bv16, i2: bv16) returns (bv16) {if $slt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv8(i1: bv8, i2: bv8) returns (bv8) {if $slt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv128(i1: bv128, i2: bv128) returns (bv128) {if $sgt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv96(i1: bv96, i2: bv96) returns (bv96) {if $sgt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv88(i1: bv88, i2: bv88) returns (bv88) {if $sgt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv64(i1: bv64, i2: bv64) returns (bv64) {if $sgt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv56(i1: bv56, i2: bv56) returns (bv56) {if $sgt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv48(i1: bv48, i2: bv48) returns (bv48) {if $sgt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv40(i1: bv40, i2: bv40) returns (bv40) {if $sgt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv32(i1: bv32, i2: bv32) returns (bv32) {if $sgt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv24(i1: bv24, i2: bv24) returns (bv24) {if $sgt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv16(i1: bv16, i2: bv16) returns (bv16) {if $sgt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv8(i1: bv8, i2: bv8) returns (bv8) {if $sgt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ult.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ult.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ult.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ult.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ult.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ult.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ult.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ult.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ult.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ult.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ult.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ugt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ugt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ugt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ugt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ugt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ugt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ugt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ugt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ugt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ugt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ugt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then i1 else i2}
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) returns (bv128);
function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) returns (bv96);
function {:bvbuiltin "bvnot"} $not.bv88(i: bv88) returns (bv88);
function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) returns (bv64);
function {:bvbuiltin "bvnot"} $not.bv56(i: bv56) returns (bv56);
function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) returns (bv48);
function {:bvbuiltin "bvnot"} $not.bv40(i: bv40) returns (bv40);
function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) returns (bv32);
function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) returns (bv24);
function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) returns (bv16);
function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) returns (bv8);
function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) returns (bv1);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 == i2} function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 == i2} function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 == i2} function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 == i2} function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 == i2} function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 == i2} function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 == i2} function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 == i2} function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 == i2} function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 == i2} function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 == i2} function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 == i2} function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 != i2} function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 != i2} function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 != i2} function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 != i2} function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 != i2} function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 != i2} function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 != i2} function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 != i2} function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 != i2} function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 != i2} function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 != i2} function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 != i2} function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ule.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ule.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ule.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ule.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ule.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ule.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ule.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ule.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ule.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ule.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ule.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ule.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ult.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ult.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ult.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ult.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ult.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ult.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ult.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ult.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ult.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ult.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ult.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $uge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $uge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $uge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $uge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $uge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $uge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $uge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $uge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $uge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $uge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $uge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $uge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ugt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ugt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ugt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ugt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ugt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ugt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ugt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ugt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ugt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ugt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ugt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sle.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sle.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sle.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sle.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sle.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sle.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sle.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sle.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sle.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sle.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sle.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sle.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $slt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $slt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $slt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $slt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $slt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $slt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $slt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $slt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $slt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $slt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $slt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sgt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sgt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sgt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sgt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sgt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sgt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sgt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sgt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sgt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sgt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sgt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:inline} $trunc.bv128.bv96(i: bv128) returns (bv96) {i[96:0]}
function {:inline} $trunc.bv128.bv88(i: bv128) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv128.bv64(i: bv128) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv128.bv56(i: bv128) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv128.bv48(i: bv128) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv128.bv40(i: bv128) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv128.bv32(i: bv128) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv128.bv24(i: bv128) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv128.bv16(i: bv128) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv128.bv8(i: bv128) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv128.bv1(i: bv128) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv96.bv88(i: bv96) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv96.bv64(i: bv96) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv96.bv56(i: bv96) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv96.bv48(i: bv96) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv96.bv40(i: bv96) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv96.bv32(i: bv96) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv96.bv24(i: bv96) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv96.bv16(i: bv96) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv96.bv8(i: bv96) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv96.bv1(i: bv96) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv88.bv64(i: bv88) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv88.bv56(i: bv88) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv88.bv48(i: bv88) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv88.bv40(i: bv88) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv88.bv32(i: bv88) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv88.bv24(i: bv88) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv88.bv16(i: bv88) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv88.bv8(i: bv88) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv88.bv1(i: bv88) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv64.bv56(i: bv64) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv64.bv48(i: bv64) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv64.bv40(i: bv64) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv64.bv32(i: bv64) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv64.bv24(i: bv64) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv64.bv16(i: bv64) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv64.bv8(i: bv64) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv64.bv1(i: bv64) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv56.bv48(i: bv56) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv56.bv40(i: bv56) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv56.bv32(i: bv56) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv56.bv24(i: bv56) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv56.bv16(i: bv56) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv56.bv8(i: bv56) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv56.bv1(i: bv56) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv48.bv32(i: bv48) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv48.bv24(i: bv48) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv48.bv16(i: bv48) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv48.bv8(i: bv48) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv48.bv1(i: bv48) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv40.bv32(i: bv40) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv40.bv24(i: bv40) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv40.bv16(i: bv40) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv40.bv8(i: bv40) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv40.bv1(i: bv40) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv32.bv24(i: bv32) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv32.bv16(i: bv32) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv32.bv8(i: bv32) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv32.bv1(i: bv32) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv24.bv16(i: bv24) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv24.bv8(i: bv24) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv24.bv1(i: bv24) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv16.bv8(i: bv16) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv16.bv1(i: bv16) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv8.bv1(i: bv8) returns (bv1) {i[1:0]}
function {:inline} $zext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 1bv8}
function {:inline} $zext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 1bv16}
function {:inline} $zext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 1bv24}
function {:inline} $zext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 1bv32}
function {:inline} $zext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1bv40}
function {:inline} $zext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 1bv48}
function {:inline} $zext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 1bv56}
function {:inline} $zext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 1bv64}
function {:inline} $zext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 1bv88}
function {:inline} $zext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 1bv96}
function {:inline} $zext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 1bv128}
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $sext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 255bv8}
function {:inline} $sext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 65535bv16}
function {:inline} $sext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 16777215bv24}
function {:inline} $sext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 4294967295bv32}
function {:inline} $sext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1099511627775bv40}
function {:inline} $sext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 281474976710655bv48}
function {:inline} $sext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 72057594037927935bv56}
function {:inline} $sext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 18446744073709551615bv64}
function {:inline} $sext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88}
function {:inline} $sext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96}
function {:inline} $sext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128}
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) {i1 + i2}
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) {i1 + i2}
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) {i1 + i2}
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) {i1 + i2}
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) {i1 + i2}
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) {i1 + i2}
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) {i1 + i2}
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) {i1 + i2}
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) {i1 + i2}
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) {i1 + i2}
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) {i1 + i2}
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) {i1 + i2}
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) {i1 - i2}
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) {i1 - i2}
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) {i1 - i2}
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) {i1 - i2}
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) {i1 - i2}
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) {i1 - i2}
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) {i1 - i2}
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) {i1 - i2}
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) {i1 - i2}
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) {i1 - i2}
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) {i1 - i2}
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) {i1 - i2}
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) {i1 * i2}
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) {i1 * i2}
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) {i1 * i2}
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) {i1 * i2}
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) {i1 * i2}
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) {i1 * i2}
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) {i1 * i2}
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) {i1 * i2}
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) {i1 * i2}
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) {i1 * i2}
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) {i1 * i2}
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) {i1 * i2}
function {:builtin "div"} $div(i1: int, i2: int) returns (int);
function {:builtin "mod"} $mod(i1: int, i2: int) returns (int);
function {:builtin "rem"} $rem(i1: int, i2: int) returns (int);
function {:inline} $min(i1: int, i2: int) returns (int) {if i1 < i2 then i1 else i2}
function {:inline} $max(i1: int, i2: int) returns (int) {if i1 > i2 then i1 else i2}
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $not.i128(i: i128) returns (i128);
function $not.i96(i: i96) returns (i96);
function $not.i88(i: i88) returns (i88);
function $not.i64(i: i64) returns (i64);
function $not.i56(i: i56) returns (i56);
function $not.i48(i: i48) returns (i48);
function $not.i40(i: i40) returns (i40);
function $not.i32(i: i32) returns (i32);
function $not.i24(i: i24) returns (i24);
function $not.i16(i: i16) returns (i16);
function $not.i8(i: i8) returns (i8);
function $not.i1(i: i1) returns (i1);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) {i1 == i2} function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) {i1 == i2} function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) {i1 == i2} function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) {i1 == i2} function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) {i1 == i2} function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) {i1 == i2} function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) {i1 == i2} function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) {i1 == i2} function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) {i1 == i2} function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) {i1 == i2} function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) {i1 == i2} function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) {i1 == i2} function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) {i1 != i2} function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) {i1 != i2} function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) {i1 != i2} function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) {i1 != i2} function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) {i1 != i2} function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) {i1 != i2} function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) {i1 != i2} function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) {i1 != i2} function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) {i1 != i2} function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) {i1 != i2} function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) {i1 != i2} function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) {i1 != i2} function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
axiom $and.i1(0,0) == 0;
axiom $and.i1(0,1) == 0;
axiom $and.i1(1,0) == 0;
axiom $and.i1(1,1) == 1;
axiom $or.i1(0,0) == 0;
axiom $or.i1(0,1) == 1;
axiom $or.i1(1,0) == 1;
axiom $or.i1(1,1) == 1;
axiom $xor.i1(0,0) == 0;
axiom $xor.i1(0,1) == 1;
axiom $xor.i1(1,0) == 1;
axiom $xor.i1(1,1) == 0;
axiom($and.i32(32, 16) == 0);
function {:inline} $trunc.i128.i96(i: i128) returns (i96) {i}
function {:inline} $trunc.i128.i88(i: i128) returns (i88) {i}
function {:inline} $trunc.i128.i64(i: i128) returns (i64) {i}
function {:inline} $trunc.i128.i56(i: i128) returns (i56) {i}
function {:inline} $trunc.i128.i48(i: i128) returns (i48) {i}
function {:inline} $trunc.i128.i40(i: i128) returns (i40) {i}
function {:inline} $trunc.i128.i32(i: i128) returns (i32) {i}
function {:inline} $trunc.i128.i24(i: i128) returns (i24) {i}
function {:inline} $trunc.i128.i16(i: i128) returns (i16) {i}
function {:inline} $trunc.i128.i8(i: i128) returns (i8) {i}
function {:inline} $trunc.i128.i1(i: i128) returns (i1) {i}
function {:inline} $trunc.i96.i64(i: i96) returns (i64) {i}
function {:inline} $trunc.i96.i88(i: i96) returns (i88) {i}
function {:inline} $trunc.i96.i56(i: i96) returns (i56) {i}
function {:inline} $trunc.i96.i48(i: i96) returns (i48) {i}
function {:inline} $trunc.i96.i40(i: i96) returns (i40) {i}
function {:inline} $trunc.i96.i32(i: i96) returns (i32) {i}
function {:inline} $trunc.i96.i24(i: i96) returns (i24) {i}
function {:inline} $trunc.i96.i16(i: i96) returns (i16) {i}
function {:inline} $trunc.i96.i8(i: i96) returns (i8) {i}
function {:inline} $trunc.i96.i1(i: i96) returns (i1) {i}
function {:inline} $trunc.i88.i64(i: i88) returns (i64) {i}
function {:inline} $trunc.i88.i88(i: i88) returns (i88) {i}
function {:inline} $trunc.i88.i56(i: i88) returns (i56) {i}
function {:inline} $trunc.i88.i48(i: i88) returns (i48) {i}
function {:inline} $trunc.i88.i40(i: i88) returns (i40) {i}
function {:inline} $trunc.i88.i32(i: i88) returns (i32) {i}
function {:inline} $trunc.i88.i24(i: i88) returns (i24) {i}
function {:inline} $trunc.i88.i16(i: i88) returns (i16) {i}
function {:inline} $trunc.i88.i8(i: i88) returns (i8) {i}
function {:inline} $trunc.i88.i1(i: i88) returns (i1) {i}
function {:inline} $trunc.i64.i56(i: i64) returns (i56) {i}
function {:inline} $trunc.i64.i48(i: i64) returns (i48) {i}
function {:inline} $trunc.i64.i40(i: i64) returns (i40) {i}
function {:inline} $trunc.i64.i32(i: i64) returns (i32) {i}
function {:inline} $trunc.i64.i24(i: i64) returns (i24) {i}
function {:inline} $trunc.i64.i16(i: i64) returns (i16) {i}
function {:inline} $trunc.i64.i8(i: i64) returns (i8) {i}
function {:inline} $trunc.i64.i1(i: i64) returns (i1) {i}
function {:inline} $trunc.i56.i48(i: i56) returns (i48) {i}
function {:inline} $trunc.i56.i40(i: i56) returns (i40) {i}
function {:inline} $trunc.i56.i32(i: i56) returns (i32) {i}
function {:inline} $trunc.i56.i24(i: i56) returns (i24) {i}
function {:inline} $trunc.i56.i16(i: i56) returns (i16) {i}
function {:inline} $trunc.i56.i8(i: i56) returns (i8) {i}
function {:inline} $trunc.i56.i1(i: i56) returns (i1) {i}
function {:inline} $trunc.i48.i40(i: i48) returns (i40) {i}
function {:inline} $trunc.i48.i32(i: i48) returns (i32) {i}
function {:inline} $trunc.i48.i24(i: i48) returns (i24) {i}
function {:inline} $trunc.i48.i16(i: i48) returns (i16) {i}
function {:inline} $trunc.i48.i8(i: i48) returns (i8) {i}
function {:inline} $trunc.i48.i1(i: i48) returns (i1) {i}
function {:inline} $trunc.i40.i32(i: i40) returns (i32) {i}
function {:inline} $trunc.i40.i24(i: i40) returns (i24) {i}
function {:inline} $trunc.i40.i16(i: i40) returns (i16) {i}
function {:inline} $trunc.i40.i8(i: i40) returns (i8) {i}
function {:inline} $trunc.i40.i1(i: i40) returns (i1) {i}
function {:inline} $trunc.i32.i24(i: i32) returns (i24) {i}
function {:inline} $trunc.i32.i16(i: i32) returns (i16) {i}
function {:inline} $trunc.i32.i8(i: i32) returns (i8) {i}
function {:inline} $trunc.i32.i1(i: i32) returns (i1) {i}
function {:inline} $trunc.i24.i16(i: i24) returns (i16) {i}
function {:inline} $trunc.i24.i8(i: i24) returns (i8) {i}
function {:inline} $trunc.i24.i1(i: i24) returns (i1) {i}
function {:inline} $trunc.i16.i8(i: i16) returns (i8) {i}
function {:inline} $trunc.i16.i1(i: i16) returns (i1) {i}
function {:inline} $trunc.i8.i1(i: i8) returns (i1) {i}
function {:inline} $zext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $zext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $zext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $zext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $zext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $zext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $zext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $zext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $zext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $zext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $zext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $zext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $zext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $zext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $zext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $zext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $zext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $zext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $zext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $zext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $zext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $zext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $zext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $zext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $zext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $zext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $zext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $zext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $zext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $zext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $zext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $zext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $zext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $zext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $zext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $zext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $zext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $zext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $zext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $zext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $zext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $zext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $zext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $zext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $zext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $zext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $zext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $zext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $zext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $zext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $zext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $zext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $zext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $zext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $zext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $zext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $zext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $zext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $zext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $zext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $zext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $zext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $zext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $zext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $zext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $zext.i96.i128(i: i96) returns (i128) {i}
function {:inline} $sext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $sext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $sext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $sext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $sext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $sext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $sext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $sext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $sext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $sext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $sext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $sext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $sext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $sext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $sext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $sext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $sext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $sext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $sext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $sext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $sext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $sext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $sext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $sext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $sext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $sext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $sext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $sext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $sext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $sext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $sext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $sext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $sext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $sext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $sext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $sext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $sext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $sext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $sext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $sext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $sext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $sext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $sext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $sext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $sext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $sext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $sext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $sext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $sext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $sext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $sext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $sext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $sext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $sext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $sext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $sext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $sext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $sext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $sext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $sext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $sext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $sext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $sext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $sext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $sext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $sext.i96.i128(i: i96) returns (i128) {i}
function $fp(ipart:int, fpart:int, epart:int) returns (float);
function $fadd.float(f1:float, f2:float) returns (float);
function $fsub.float(f1:float, f2:float) returns (float);
function $fmul.float(f1:float, f2:float) returns (float);
function $fdiv.float(f1:float, f2:float) returns (float);
function $frem.float(f1:float, f2:float) returns (float);
function $ffalse.float(f1:float, f2:float) returns (i1);
function $ftrue.float(f1:float, f2:float) returns (i1);
function {:inline} $foeq.float(f1:float, f2:float) returns (i1) { if $foeq.bool(f1,f2) then 1 else 0 }
function $foeq.bool(f1:float, f2:float) returns (bool);
function $foge.float(f1:float, f2:float) returns (i1);
function $fogt.float(f1:float, f2:float) returns (i1);
function $fole.float(f1:float, f2:float) returns (i1);
function $folt.float(f1:float, f2:float) returns (i1);
function $fone.float(f1:float, f2:float) returns (i1);
function $ford.float(f1:float, f2:float) returns (i1);
function $fueq.float(f1:float, f2:float) returns (i1);
function $fuge.float(f1:float, f2:float) returns (i1);
function $fugt.float(f1:float, f2:float) returns (i1);
function $fule.float(f1:float, f2:float) returns (i1);
function $fult.float(f1:float, f2:float) returns (i1);
function $fune.float(f1:float, f2:float) returns (i1);
function $funo.float(f1:float, f2:float) returns (i1);
function $fp2si.float.i128(f:float) returns (i128);
function $fp2ui.float.i128(f:float) returns (i128);
function $si2fp.i128.float(i:i128) returns (float);
function $ui2fp.i128.float(i:i128) returns (float);
function $fp2si.float.i96(f:float) returns (i96);
function $fp2ui.float.i96(f:float) returns (i96);
function $si2fp.i96.float(i:i96) returns (float);
function $ui2fp.i96.float(i:i96) returns (float);
function $fp2si.float.i88(f:float) returns (i88);
function $fp2ui.float.i88(f:float) returns (i88);
function $si2fp.i88.float(i:i88) returns (float);
function $ui2fp.i88.float(i:i88) returns (float);
function $fp2si.float.i64(f:float) returns (i64);
function $fp2ui.float.i64(f:float) returns (i64);
function $si2fp.i64.float(i:i64) returns (float);
function $ui2fp.i64.float(i:i64) returns (float);
function $fp2si.float.i56(f:float) returns (i56);
function $fp2ui.float.i56(f:float) returns (i56);
function $si2fp.i56.float(i:i56) returns (float);
function $ui2fp.i56.float(i:i56) returns (float);
function $fp2si.float.i48(f:float) returns (i48);
function $fp2ui.float.i48(f:float) returns (i48);
function $si2fp.i48.float(i:i48) returns (float);
function $ui2fp.i48.float(i:i48) returns (float);
function $fp2si.float.i40(f:float) returns (i40);
function $fp2ui.float.i40(f:float) returns (i40);
function $si2fp.i40.float(i:i40) returns (float);
function $ui2fp.i40.float(i:i40) returns (float);
function $fp2si.float.i32(f:float) returns (i32);
function $fp2ui.float.i32(f:float) returns (i32);
function $si2fp.i32.float(i:i32) returns (float);
function $ui2fp.i32.float(i:i32) returns (float);
function $fp2si.float.i24(f:float) returns (i24);
function $fp2ui.float.i24(f:float) returns (i24);
function $si2fp.i24.float(i:i24) returns (float);
function $ui2fp.i24.float(i:i24) returns (float);
function $fp2si.float.i16(f:float) returns (i16);
function $fp2ui.float.i16(f:float) returns (i16);
function $si2fp.i16.float(i:i16) returns (float);
function $ui2fp.i16.float(i:i16) returns (float);
function $fp2si.float.i8(f:float) returns (i8);
function $fp2ui.float.i8(f:float) returns (i8);
function $si2fp.i8.float(i:i8) returns (float);
function $ui2fp.i8.float(i:i8) returns (float);
function $fptrunc.float.float(f:float) returns (float);
function $fpext.float.float(f:float) returns (float);
function $fp2si.float.bv128(f:float) returns (bv128);
function $fp2ui.float.bv128(f:float) returns (bv128);
function $si2fp.bv128.float(i:bv128) returns (float);
function $ui2fp.bv128.float(i:bv128) returns (float);
function $fp2si.float.bv96(f:float) returns (bv96);
function $fp2ui.float.bv96(f:float) returns (bv96);
function $si2fp.bv96.float(i:bv96) returns (float);
function $ui2fp.bv96.float(i:bv96) returns (float);
function $fp2si.float.bv88(f:float) returns (bv88);
function $fp2ui.float.bv88(f:float) returns (bv88);
function $si2fp.bv88.float(i:bv88) returns (float);
function $ui2fp.bv88.float(i:bv88) returns (float);
function $fp2si.float.bv64(f:float) returns (bv64);
function $fp2ui.float.bv64(f:float) returns (bv64);
function $si2fp.bv64.float(i:bv64) returns (float);
function $ui2fp.bv64.float(i:bv64) returns (float);
function $fp2si.float.bv56(f:float) returns (bv56);
function $fp2ui.float.bv56(f:float) returns (bv56);
function $si2fp.bv56.float(i:bv56) returns (float);
function $ui2fp.bv56.float(i:bv56) returns (float);
function $fp2si.float.bv48(f:float) returns (bv48);
function $fp2ui.float.bv48(f:float) returns (bv48);
function $si2fp.bv48.float(i:bv48) returns (float);
function $ui2fp.bv48.float(i:bv48) returns (float);
function $fp2si.float.bv40(f:float) returns (bv40);
function $fp2ui.float.bv40(f:float) returns (bv40);
function $si2fp.bv40.float(i:bv40) returns (float);
function $ui2fp.bv40.float(i:bv40) returns (float);
function $fp2si.float.bv32(f:float) returns (bv32);
function $fp2ui.float.bv32(f:float) returns (bv32);
function $si2fp.bv32.float(i:bv32) returns (float);
function $ui2fp.bv32.float(i:bv32) returns (float);
function $fp2si.float.bv24(f:float) returns (bv24);
function $fp2ui.float.bv24(f:float) returns (bv24);
function $si2fp.bv24.float(i:bv24) returns (float);
function $ui2fp.bv24.float(i:bv24) returns (float);
function $fp2si.float.bv16(f:float) returns (bv16);
function $fp2ui.float.bv16(f:float) returns (bv16);
function $si2fp.bv16.float(i:bv16) returns (float);
function $ui2fp.bv16.float(i:bv16) returns (float);
function $fp2si.float.bv8(f:float) returns (bv8);
function $fp2ui.float.bv8(f:float) returns (bv8);
function $si2fp.bv8.float(i:bv8) returns (float);
function $ui2fp.bv8.float(i:bv8) returns (float);
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;
function {:inline} $isExternal(p: ref) returns (bool) {$slt.ref.bool(p,$EXTERNS_BOTTOM)}
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) { M[p] }
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) { M[p] }
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) { M[p] }
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) { M[p] }
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) { M[p] }
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) { M[p] }
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) { M[p] }
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) { M[p] }
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) { M[p] }
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) { M[p] }
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128){ $load.bytes.bv64(M, $add.ref(p, $8.ref)) ++ $load.bytes.bv64(M, p) }
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96){ $load.bytes.bv64(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88){ $load.bytes.bv56(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64){ $load.bytes.bv32(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56){ $load.bytes.bv24(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48){ $load.bytes.bv16(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40){ M[$add.ref(p, $4.ref)] ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32){ M[$add.ref(p, $3.ref)] ++ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24){ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16){ M[$add.ref(p, $1.ref)] ++ M[p] }
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, v: i128) returns ([ref] i128) { M[p := v] }
function {:inline} $store.i96(M: [ref] i96, p: ref, v: i96) returns ([ref] i96) { M[p := v] }
function {:inline} $store.i88(M: [ref] i88, p: ref, v: i88) returns ([ref] i88) { M[p := v] }
function {:inline} $store.i64(M: [ref] i64, p: ref, v: i64) returns ([ref] i64) { M[p := v] }
function {:inline} $store.i56(M: [ref] i56, p: ref, v: i56) returns ([ref] i56) { M[p := v] }
function {:inline} $store.i48(M: [ref] i48, p: ref, v: i48) returns ([ref] i48) { M[p := v] }
function {:inline} $store.i40(M: [ref] i40, p: ref, v: i40) returns ([ref] i40) { M[p := v] }
function {:inline} $store.i32(M: [ref] i32, p: ref, v: i32) returns ([ref] i32) { M[p := v] }
function {:inline} $store.i24(M: [ref] i24, p: ref, v: i24) returns ([ref] i24) { M[p := v] }
function {:inline} $store.i16(M: [ref] i16, p: ref, v: i16) returns ([ref] i16) { M[p := v] }
function {:inline} $store.i8(M: [ref] i8, p: ref, v: i8) returns ([ref] i8) { M[p := v] }
function {:inline} $store.bv128(M: [ref] bv128, p: ref, v: bv128) returns ([ref] bv128) { M[p := v] }
function {:inline} $store.bv96(M: [ref] bv96, p: ref, v: bv96) returns ([ref] bv96) { M[p := v] }
function {:inline} $store.bv88(M: [ref] bv88, p: ref, v: bv88) returns ([ref] bv88) { M[p := v] }
function {:inline} $store.bv64(M: [ref] bv64, p: ref, v: bv64) returns ([ref] bv64) { M[p := v] }
function {:inline} $store.bv56(M: [ref] bv56, p: ref, v: bv56) returns ([ref] bv56) { M[p := v] }
function {:inline} $store.bv48(M: [ref] bv48, p: ref, v: bv48) returns ([ref] bv48) { M[p := v] }
function {:inline} $store.bv40(M: [ref] bv40, p: ref, v: bv40) returns ([ref] bv40) { M[p := v] }
function {:inline} $store.bv32(M: [ref] bv32, p: ref, v: bv32) returns ([ref] bv32) { M[p := v] }
function {:inline} $store.bv24(M: [ref] bv24, p: ref, v: bv24) returns ([ref] bv24) { M[p := v] }
function {:inline} $store.bv16(M: [ref] bv16, p: ref, v: bv16) returns ([ref] bv16) { M[p := v] }
function {:inline} $store.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) { M[p := v] }
function {:inline} $store.bytes.bv128(M:[ref]bv8, p:ref, v:bv128) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]][$add.ref(p, $11.ref) := v[104:96]][$add.ref(p, $12.ref) := v[112:104]][$add.ref(p, $13.ref) := v[120:112]][$add.ref(p, $14.ref) := v[128:120]]}
function {:inline} $store.bytes.bv96(M:[ref]bv8, p:ref, v:bv96) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]]}
function {:inline} $store.bytes.bv88(M:[ref]bv8, p:ref, v:bv88) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]]}
function {:inline} $store.bytes.bv64(M:[ref]bv8, p:ref, v:bv64) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]]}
function {:inline} $store.bytes.bv56(M:[ref]bv8, p:ref, v:bv56) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]]}
function {:inline} $store.bytes.bv48(M:[ref]bv8, p:ref, v:bv48) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]]}
function {:inline} $store.bytes.bv40(M:[ref]bv8, p:ref, v:bv40) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]]}
function {:inline} $store.bytes.bv32(M:[ref]bv8, p:ref, v:bv32) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]]}
function {:inline} $store.bytes.bv24(M:[ref]bv8, p:ref, v:bv24) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]]}
function {:inline} $store.bytes.bv16(M:[ref]bv8, p:ref, v:bv16) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]]}
function {:inline} $store.bytes.bv8(M:[ref]bv8, p:ref, v:bv8) returns ([ref]bv8) {M[p := v]}
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, v: ref) returns ([ref] ref) { M[p := v] }
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, v: float) returns ([ref] float) { M[p := v] }
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
procedure  boogie_si_record_bool(i: bool);
procedure  boogie_si_record_i1(i: i1);
procedure  boogie_si_record_i8(i: i8);
procedure  boogie_si_record_i16(i: i16);
procedure  boogie_si_record_i24(i: i24);
procedure  boogie_si_record_i32(i: i32);
procedure  boogie_si_record_i40(i: i40);
procedure  boogie_si_record_i48(i: i48);
procedure  boogie_si_record_i56(i: i56);
procedure  boogie_si_record_i64(i: i64);
procedure  boogie_si_record_i88(i: i88);
procedure  boogie_si_record_i96(i: i96);
procedure  boogie_si_record_i128(i: i128);
procedure  boogie_si_record_bv1(i: bv1);
procedure  boogie_si_record_bv8(i: bv8);
procedure  boogie_si_record_bv16(i: bv16);
procedure  boogie_si_record_bv24(i: bv24);
procedure  boogie_si_record_bv32(i: bv32);
procedure  boogie_si_record_bv40(i: bv40);
procedure  boogie_si_record_bv48(i: bv48);
procedure  boogie_si_record_bv56(i: bv56);
procedure  boogie_si_record_bv64(i: bv64);
procedure  boogie_si_record_bv88(i: bv88);
procedure  boogie_si_record_bv96(i: bv96);
procedure  boogie_si_record_bv128(i: bv128);
procedure  boogie_si_record_ref(i: ref);
procedure  boogie_si_record_float(i: float);
var $exn: bool;
var $exnv: int;
function $extractvalue(p: int, i: int) returns (int);

procedure  $alloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 77526));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 78558));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1782, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1787, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 79590));
procedure  llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 80622));
procedure  __SMACK_static_init()
{
$bb0:
  $M.3 := 0;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
  $M.1 := 0;
  call {:cexpr "ldv_spin"} boogie_si_record_i32(0);
  $M.4 := 8;
  call {:cexpr "qlcfg9"} boogie_si_record_i32(8);
  $M.5 := 1280;
  call {:cexpr "qlcfg5"} boogie_si_record_i32(1280);
  $M.6 := 144;
  call {:cexpr "qlcfg8"} boogie_si_record_i32(144);
  $M.7 := 5;
  call {:cexpr "qlcfg6"} boogie_si_record_i32(5);
  $M.8 := 0;
  call {:cexpr "qlcfg7"} boogie_si_record_i32(0);
  $M.9 := 0;
  call {:cexpr "qlcfgc"} boogie_si_record_i32(0);
  $exn := false;
  return;
}
const devirtbounce: ref;
axiom (devirtbounce == $sub.ref(0, 81654));
procedure  devirtbounce(funcPtr: ref, arg: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.1: ref;
axiom (devirtbounce.1 == $sub.ref(0, 82686));
procedure  devirtbounce.1(funcPtr: ref, arg: i32)
  returns ($r: i8)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.2: ref;
axiom (devirtbounce.2 == $sub.ref(0, 83718));
procedure  devirtbounce.2(funcPtr: ref, arg: i8, arg1: i32)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.3: ref;
axiom (devirtbounce.3 == $sub.ref(0, 84750));
procedure  devirtbounce.3(funcPtr: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.4: ref;
axiom (devirtbounce.4 == $sub.ref(0, 85782));
procedure  devirtbounce.4(funcPtr: ref, arg: i32, arg1: ref, arg2: i64)
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.5: ref;
axiom (devirtbounce.5 == $sub.ref(0, 86814));
procedure  devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const $u0: i64;
const $u1: i32;
const $u2: ref;
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
