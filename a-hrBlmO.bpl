// generated by SMACK version 1.9.0 for corral
// via /mnt/local/smack-project/smack/bin/smack -x=svcomp --time-limit 1800 /proj/SMACK/sv-benchmarks/c/ldv-linux-3.16-rc1/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out.c --verifier-options  /bopt:z3opt:SMT.MBQI=true /bopt:z3opt:SMT.MBQI.MAX_ITERATIONS=29854 /di /doNotUseLabels /noCallTreeReuse /noInitPruning /trackAllVars /useArrayTheory --unroll 16

// Basic types
type i1 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type ref = i64;
type float = i32;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $2.ref: ref;
axiom ($2.ref == 2);
const $3.ref: ref;
axiom ($3.ref == 3);
const $4.ref: ref;
axiom ($4.ref == 4);
const $5.ref: ref;
axiom ($5.ref == 5);
const $6.ref: ref;
axiom ($6.ref == 6);
const $7.ref: ref;
axiom ($7.ref == 7);
const $8.ref: ref;
axiom ($8.ref == 8);
const $9.ref: ref;
axiom ($9.ref == 9);
const $10.ref: ref;
axiom ($10.ref == 10);
const $11.ref: ref;
axiom ($11.ref == 11);
const $12.ref: ref;
axiom ($12.ref == 12);
const $13.ref: ref;
axiom ($13.ref == 13);
const $14.ref: ref;
axiom ($14.ref == 14);
const $1024.ref: ref;
axiom ($1024.ref == 1024);

// Memory maps (98 regions)
var $M.0: [ref] i8;
var $M.1: [ref] i8;
var $M.2: ref;
var $M.3: i32;
var $M.4: ref;
var $M.5: i32;
var $M.6: ref;
var $M.7: i32;
var $M.8: ref;
var $M.9: i32;
var $M.10: ref;
var $M.11: i32;
var $M.12: [ref] ref;
var $M.13: [ref] ref;
var $M.14: i32;
var $M.15: [ref] i32;
var $M.16: [ref] i32;
var $M.17: i32;
var $M.18: i32;
var $M.19: ref;
var $M.20: i32;
var $M.21: i32;
var $M.22: ref;
var $M.23: i32;
var $M.24: i32;
var $M.25: ref;
var $M.26: i32;
var $M.27: i32;
var $M.28: ref;
var $M.29: i32;
var $M.30: ref;
var $M.31: [ref] i32;
var $M.32: [ref] i8;
var $M.33: ref;
var $M.34: ref;
var $M.35: ref;
var $M.36: ref;
var $M.37: ref;
var $M.38: ref;
var $M.39: ref;
var $M.40: i32;
var $M.41: i32;
var $M.42: i32;
var $M.43: i32;
var $M.44: ref;
var $M.45: i32;
var $M.46: i32;
var $M.47: ref;
var $M.48: i32;
var $M.49: i32;
var $M.50: ref;
var $M.51: i32;
var $M.52: i32;
var $M.53: ref;
var $M.54: ref;
var $M.55: i32;
var $M.56: i32;
var $M.57: ref;
var $M.58: i32;
var $M.59: i32;
var $M.60: ref;
var $M.61: i32;
var $M.62: i32;
var $M.63: ref;
var $M.64: i32;
var $M.65: i32;
var $M.66: ref;
var $M.67: ref;
var $M.68: [ref] i8;
var $M.69: [ref] i8;
var $M.70: [ref] i8;
var $M.71: [ref] i8;
var $M.72: [ref] i8;
var $M.73: i32;
var $M.74: i32;
var $M.75: i32;
var $M.76: i32;
var $M.77: i32;
var $M.78: i32;
var $M.79: i32;
var $M.80: i32;
var $M.81: i32;
var $M.82: i32;
var $M.83: i32;
var $M.84: i32;
var $M.85: i32;
var $M.86: i32;
var $M.87: i32;
var $M.88: i32;
var $M.89: i32;
var $M.90: i32;
var $M.91: i32;
var $M.92: i32;
var $M.93: i32;
var $M.94: i32;
var $M.95: i64;
var $M.96: [ref] i8;
var $M.97: [ref] i8;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 593419));
axiom ($EXTERNS_BOTTOM == $sub.ref(0, 32816));
axiom ($MALLOC_TOP == 9223372036854775807);

// Bitstd::vector-integer conversions
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2int"} $bv2int.64(i: bv64) returns (i64);

// Pointer-number conversions
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { if $eq.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { if $ne.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { if $ugt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { if $uge.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { if $ult.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { if $ule.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { if $sgt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { if $sge.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { if $slt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { if $sle.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

const ldv_irq_3_1: ref;
axiom (ldv_irq_3_1 == $sub.ref(0, 1028));
const ldv_irq_2_0: ref;
axiom (ldv_irq_2_0 == $sub.ref(0, 2056));
const ldv_irq_3_2: ref;
axiom (ldv_irq_3_2 == $sub.ref(0, 3084));
const ldv_irq_2_2: ref;
axiom (ldv_irq_2_2 == $sub.ref(0, 4112));
const ldv_irq_3_0: ref;
axiom (ldv_irq_3_0 == $sub.ref(0, 5140));
const ldv_irq_2_1: ref;
axiom (ldv_irq_2_1 == $sub.ref(0, 6168));
const ldv_irq_1_3: ref;
axiom (ldv_irq_1_3 == $sub.ref(0, 7196));
const ldv_irq_1_0: ref;
axiom (ldv_irq_1_0 == $sub.ref(0, 8224));
const ldv_irq_1_2: ref;
axiom (ldv_irq_1_2 == $sub.ref(0, 9252));
const LDV_IN_INTERRUPT: ref;
axiom (LDV_IN_INTERRUPT == $sub.ref(0, 10280));
const ldv_irq_1_1: ref;
axiom (ldv_irq_1_1 == $sub.ref(0, 11308));
const ldv_irq_2_3: ref;
axiom (ldv_irq_2_3 == $sub.ref(0, 12336));
const ldv_irq_3_3: ref;
axiom (ldv_irq_3_3 == $sub.ref(0, 13364));
const igbvf_ethtool_ops_group1: ref;
axiom (igbvf_ethtool_ops_group1 == $sub.ref(0, 14396));
const igbvf_ethtool_ops_group0: ref;
axiom (igbvf_ethtool_ops_group0 == $sub.ref(0, 15428));
const igbvf_ethtool_ops_group2: ref;
axiom (igbvf_ethtool_ops_group2 == $sub.ref(0, 16460));
const igbvf_ethtool_ops_group4: ref;
axiom (igbvf_ethtool_ops_group4 == $sub.ref(0, 17492));
const igbvf_ethtool_ops_group5: ref;
axiom (igbvf_ethtool_ops_group5 == $sub.ref(0, 18524));
const igbvf_ethtool_ops_group3: ref;
axiom (igbvf_ethtool_ops_group3 == $sub.ref(0, 19556));
const igbvf_ethtool_ops_group6: ref;
axiom (igbvf_ethtool_ops_group6 == $sub.ref(0, 20588));
const ldv_state_variable_10: ref;
axiom (ldv_state_variable_10 == $sub.ref(0, 21616));
const {:count 6} igbvf_driver_name: ref;
axiom (igbvf_driver_name == $sub.ref(0, 22646));
const {:count 8} igbvf_driver_version: ref;
axiom (igbvf_driver_version == $sub.ref(0, 23678));
const ldv_irq_line_2_0: ref;
axiom (ldv_irq_line_2_0 == $sub.ref(0, 24706));
const ldv_irq_data_2_0: ref;
axiom (ldv_irq_data_2_0 == $sub.ref(0, 25738));
const ldv_irq_line_2_1: ref;
axiom (ldv_irq_line_2_1 == $sub.ref(0, 26766));
const ldv_irq_data_2_1: ref;
axiom (ldv_irq_data_2_1 == $sub.ref(0, 27798));
const ldv_irq_line_2_2: ref;
axiom (ldv_irq_line_2_2 == $sub.ref(0, 28826));
const ldv_irq_data_2_2: ref;
axiom (ldv_irq_data_2_2 == $sub.ref(0, 29858));
const ldv_irq_line_2_3: ref;
axiom (ldv_irq_line_2_3 == $sub.ref(0, 30886));
const ldv_irq_data_2_3: ref;
axiom (ldv_irq_data_2_3 == $sub.ref(0, 31918));
const igbvf_driver_group0: ref;
axiom (igbvf_driver_group0 == $sub.ref(0, 32950));
const igbvf_netdev_ops_group1: ref;
axiom (igbvf_netdev_ops_group1 == $sub.ref(0, 33982));
const ldv_irq_line_3_0: ref;
axiom (ldv_irq_line_3_0 == $sub.ref(0, 35010));
const ldv_irq_data_3_0: ref;
axiom (ldv_irq_data_3_0 == $sub.ref(0, 36042));
const ldv_irq_line_3_1: ref;
axiom (ldv_irq_line_3_1 == $sub.ref(0, 37070));
const ldv_irq_data_3_1: ref;
axiom (ldv_irq_data_3_1 == $sub.ref(0, 38102));
const ldv_irq_line_3_2: ref;
axiom (ldv_irq_line_3_2 == $sub.ref(0, 39130));
const ldv_irq_data_3_2: ref;
axiom (ldv_irq_data_3_2 == $sub.ref(0, 40162));
const ldv_irq_line_3_3: ref;
axiom (ldv_irq_line_3_3 == $sub.ref(0, 41190));
const ldv_irq_data_3_3: ref;
axiom (ldv_irq_data_3_3 == $sub.ref(0, 42222));
const ldv_timer_list_4_0: ref;
axiom (ldv_timer_list_4_0 == $sub.ref(0, 43254));
const ldv_timer_4_0: ref;
axiom (ldv_timer_4_0 == $sub.ref(0, 44282));
const ldv_timer_list_4_1: ref;
axiom (ldv_timer_list_4_1 == $sub.ref(0, 45314));
const ldv_timer_4_1: ref;
axiom (ldv_timer_4_1 == $sub.ref(0, 46342));
const ldv_timer_list_4_2: ref;
axiom (ldv_timer_list_4_2 == $sub.ref(0, 47374));
const ldv_timer_4_2: ref;
axiom (ldv_timer_4_2 == $sub.ref(0, 48402));
const ldv_timer_list_4_3: ref;
axiom (ldv_timer_list_4_3 == $sub.ref(0, 49434));
const ldv_timer_4_3: ref;
axiom (ldv_timer_4_3 == $sub.ref(0, 50462));
const ldv_irq_line_1_0: ref;
axiom (ldv_irq_line_1_0 == $sub.ref(0, 51490));
const ldv_irq_data_1_0: ref;
axiom (ldv_irq_data_1_0 == $sub.ref(0, 52522));
const ldv_irq_line_1_1: ref;
axiom (ldv_irq_line_1_1 == $sub.ref(0, 53550));
const ldv_irq_data_1_1: ref;
axiom (ldv_irq_data_1_1 == $sub.ref(0, 54582));
const ldv_irq_line_1_2: ref;
axiom (ldv_irq_line_1_2 == $sub.ref(0, 55610));
const ldv_irq_data_1_2: ref;
axiom (ldv_irq_data_1_2 == $sub.ref(0, 56642));
const ldv_irq_line_1_3: ref;
axiom (ldv_irq_line_1_3 == $sub.ref(0, 57670));
const ldv_irq_data_1_3: ref;
axiom (ldv_irq_data_1_3 == $sub.ref(0, 58702));
const igbvf_err_handler_group0: ref;
axiom (igbvf_err_handler_group0 == $sub.ref(0, 59734));
const ldv_state_variable_6: ref;
axiom (ldv_state_variable_6 == $sub.ref(0, 60762));
const ldv_state_variable_3: ref;
axiom (ldv_state_variable_3 == $sub.ref(0, 61790));
const ldv_state_variable_7: ref;
axiom (ldv_state_variable_7 == $sub.ref(0, 62818));
const ldv_state_variable_9: ref;
axiom (ldv_state_variable_9 == $sub.ref(0, 63846));
const ldv_state_variable_2: ref;
axiom (ldv_state_variable_2 == $sub.ref(0, 64874));
const ldv_state_variable_8: ref;
axiom (ldv_state_variable_8 == $sub.ref(0, 65902));
const ldv_state_variable_1: ref;
axiom (ldv_state_variable_1 == $sub.ref(0, 66930));
const ldv_state_variable_4: ref;
axiom (ldv_state_variable_4 == $sub.ref(0, 67958));
const ref_cnt: ref;
axiom (ref_cnt == $sub.ref(0, 68986));
const ldv_state_variable_0: ref;
axiom (ldv_state_variable_0 == $sub.ref(0, 70014));
const ldv_state_variable_5: ref;
axiom (ldv_state_variable_5 == $sub.ref(0, 71042));
const ldv_retval_1: ref;
axiom (ldv_retval_1 == $sub.ref(0, 72070));
const ldv_retval_0: ref;
axiom (ldv_retval_0 == $sub.ref(0, 73098));
const ldv_retval_2: ref;
axiom (ldv_retval_2 == $sub.ref(0, 74126));
const ldv_retval_5: ref;
axiom (ldv_retval_5 == $sub.ref(0, 75154));
const ldv_retval_4: ref;
axiom (ldv_retval_4 == $sub.ref(0, 76182));
const ldv_retval_3: ref;
axiom (ldv_retval_3 == $sub.ref(0, 77210));
const last_index: ref;
axiom (last_index == $sub.ref(0, 78238));
const LDV_SKBS: ref;
axiom (LDV_SKBS == $sub.ref(0, 79270));
const __mod_pci__igbvf_pci_tbl_device_table: ref;
axiom (__mod_pci__igbvf_pci_tbl_device_table == $sub.ref(0, 80326));
const {:count 15} set_impl: ref;
axiom (set_impl == $sub.ref(0, 81470));
const igbvf_netdev_ops: ref;
axiom (igbvf_netdev_ops == $sub.ref(0, 82974));
const debug: ref;
axiom (debug == $sub.ref(0, 84002));
const igbvf_i350_vf_info: ref;
axiom (igbvf_i350_vf_info == $sub.ref(0, 85058));
const igbvf_vf_info: ref;
axiom (igbvf_vf_info == $sub.ref(0, 86114));
const {:count 2} igbvf_info_tbl: ref;
axiom (igbvf_info_tbl == $sub.ref(0, 87154));
const {:count 45} igbvf_copyright: ref;
axiom (igbvf_copyright == $sub.ref(0, 88223));
const {:count 49} igbvf_driver_string: ref;
axiom (igbvf_driver_string == $sub.ref(0, 89296));
const igbvf_err_handler: ref;
axiom (igbvf_err_handler == $sub.ref(0, 90368));
const {:count 3} igbvf_pci_tbl: ref;
axiom (igbvf_pci_tbl == $sub.ref(0, 91488));
const igbvf_driver: ref;
axiom (igbvf_driver == $sub.ref(0, 92824));
const igbvf_gstrings_test: ref;
axiom (igbvf_gstrings_test == $sub.ref(0, 93880));
const {:count 13} igbvf_gstrings_stats: ref;
axiom (igbvf_gstrings_stats == $sub.ref(0, 95476));
const igbvf_ethtool_ops: ref;
axiom (igbvf_ethtool_ops == $sub.ref(0, 96876));
const jiffies: ref;
axiom (jiffies == $sub.ref(0, 32776));
const {:count 26} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 97926));
const {:count 19} .str.6: ref;
axiom (.str.6 == $sub.ref(0, 98969));
const {:count 41} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 100034));
const dma_ops: ref;
axiom (dma_ops == $sub.ref(0, 32784));
const {:count 26} .str.13: ref;
axiom (.str.13 == $sub.ref(0, 101084));
const {:count 37} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 102145));
const pv_irq_ops: ref;
axiom (pv_irq_ops == $sub.ref(0, 32792));
const {:count 34} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 103203));
const {:count 59} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 104286));
const x86_dma_fallback_dev: ref;
axiom (x86_dma_fallback_dev == $sub.ref(0, 32800));
const .str: ref;
axiom (.str == $sub.ref(0, 105370));
const {:count 20} .str.9: ref;
axiom (.str.9 == $sub.ref(0, 106414));
const {:count 70} .str.8: ref;
axiom (.str.8 == $sub.ref(0, 107508));
const {:count 239} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 108771));
const {:count 39} .str.44: ref;
axiom (.str.44 == $sub.ref(0, 109834));
const {:count 41} .str.14: ref;
axiom (.str.14 == $sub.ref(0, 110899));
const {:count 8} .str.15: ref;
axiom (.str.15 == $sub.ref(0, 111931));
const {:count 8} .str.16: ref;
axiom (.str.16 == $sub.ref(0, 112963));
const {:count 39} .str.24: ref;
axiom (.str.24 == $sub.ref(0, 114026));
const {:count 50} .str.25: ref;
axiom (.str.25 == $sub.ref(0, 115100));
const {:count 28} .str.26: ref;
axiom (.str.26 == $sub.ref(0, 116152));
const {:count 44} .str.27: ref;
axiom (.str.27 == $sub.ref(0, 117220));
const {:count 31} .str.28: ref;
axiom (.str.28 == $sub.ref(0, 118275));
const {:count 23} .str.29: ref;
axiom (.str.29 == $sub.ref(0, 119322));
const {:count 26} .str.30: ref;
axiom (.str.30 == $sub.ref(0, 120372));
const {:count 6} .str.31: ref;
axiom (.str.31 == $sub.ref(0, 121402));
const {:count 32} .str.41: ref;
axiom (.str.41 == $sub.ref(0, 122458));
const {:count 33} .str.42: ref;
axiom (.str.42 == $sub.ref(0, 123515));
const {:count 14} .str.43: ref;
axiom (.str.43 == $sub.ref(0, 124553));
const {:count 14} .str.37: ref;
axiom (.str.37 == $sub.ref(0, 125591));
const system_wq: ref;
axiom (system_wq == $sub.ref(0, 32808));
const {:count 5} .str.39: ref;
axiom (.str.39 == $sub.ref(0, 126620));
const {:count 5} .str.40: ref;
axiom (.str.40 == $sub.ref(0, 127649));
const {:count 30} .str.38: ref;
axiom (.str.38 == $sub.ref(0, 128703));
const {:count 34} .str.32: ref;
axiom (.str.32 == $sub.ref(0, 129761));
const {:count 31} .str.33: ref;
axiom (.str.33 == $sub.ref(0, 130816));
const {:count 48} .str.35: ref;
axiom (.str.35 == $sub.ref(0, 131888));
const {:count 19} .str.36: ref;
axiom (.str.36 == $sub.ref(0, 132931));
const {:count 40} .str.34: ref;
axiom (.str.34 == $sub.ref(0, 133995));
const {:count 40} .str.10: ref;
axiom (.str.10 == $sub.ref(0, 135059));
const {:count 42} .str.11: ref;
axiom (.str.11 == $sub.ref(0, 136125));
const {:count 29} .str.12: ref;
axiom (.str.12 == $sub.ref(0, 137178));
const {:count 27} .str.19: ref;
axiom (.str.19 == $sub.ref(0, 138229));
const {:count 28} .str.20: ref;
axiom (.str.20 == $sub.ref(0, 139281));
const {:count 19} .str.18: ref;
axiom (.str.18 == $sub.ref(0, 140324));
const {:count 30} .str.17: ref;
axiom (.str.17 == $sub.ref(0, 141378));
const {:count 25} .str.21: ref;
axiom (.str.21 == $sub.ref(0, 142427));
const {:count 12} .str.22: ref;
axiom (.str.22 == $sub.ref(0, 143463));
const __this_module: ref;
axiom (__this_module == $sub.ref(0, 32816));
const {:count 6} .str.23: ref;
axiom (.str.23 == $sub.ref(0, 144493));
const {:count 14} .str.2.49: ref;
axiom (.str.2.49 == $sub.ref(0, 145531));
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 146563));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const malloc: ref;
axiom (malloc == $sub.ref(0, 147595));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const igbvf_get_settings: ref;
axiom (igbvf_get_settings == $sub.ref(0, 148627));
procedure  igbvf_get_settings($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7369, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7370, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7371, 19} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p3, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7372, 9} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7372, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p5, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7373, 9} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7373, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p6, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7374, 9} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p1, 15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7374, 14} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p7, $sub.i8(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7375, 9} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p1, 17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7375, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p8, 2);
  $p9 := $add.ref($add.ref($p3, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7376, 47} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7376, 55} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p10, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7376, 12} true;
  assume {:verifier.code 0} true;
  call $i12 := readl($p11);
  // WARNING: %13 = call i32 @readl(i8* %12), !dbg !8355, !verifier.code !8332
  call {:cexpr "status"} boogie_si_record_i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7377, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $and.i32($i12, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7377, 21} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i32($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7377, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7378, 17} true;
  assume {:verifier.code 0} true;
  $i15 := $and.i32($i12, 128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7378, 25} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i32($i15, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7378, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i14 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7392, 5} true;
  assume {:verifier.code 0} true;
  call ethtool_cmd_speed_set($p1, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7393, 11} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p1, 14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7393, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p23, $sub.i8(0, 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb3:
  assume ($i16 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7379, 7} true;
  assume {:verifier.code 0} true;
  call ethtool_cmd_speed_set($p1, 1000);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7380, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i16 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7381, 17} true;
  assume {:verifier.code 0} true;
  $i17 := $and.i32($i12, 64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7381, 24} true;
  assume {:verifier.code 0} true;
  $i18 := $ne.i32($i17, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7381, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb6, $bb7;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7386, 22} true;
  assume {:verifier.code 0} true;
  $i19 := $and.i32($i12, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7386, 22} true;
  assume {:verifier.code 0} true;
  $i20 := $ne.i32($i19, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7386, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb9, $bb10;
$bb6:
  assume ($i18 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7382, 7} true;
  assume {:verifier.code 0} true;
  call ethtool_cmd_speed_set($p1, 100);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7383, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !(($i18 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7384, 7} true;
  assume {:verifier.code 0} true;
  call ethtool_cmd_speed_set($p1, 10);
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  goto $bb5;
$bb9:
  assume ($i20 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7387, 13} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p1, 14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7387, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p21, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7388, 5} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume !(($i20 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7389, 13} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p1, 14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7389, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p22, 0);
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7391, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7395, 9} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p1, 18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7395, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p24, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7396, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const igbvf_set_settings: ref;
axiom (igbvf_set_settings == $sub.ref(0, 149659));
procedure  igbvf_set_settings($p0: ref, $p1: ref)
  returns ($r: i32)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7404, 3} true;
  assume {:verifier.code 0} true;
  $r := $sub.i32(0, 95);
  $exn := false;
  return;
}
const igbvf_get_drvinfo: ref;
axiom (igbvf_get_drvinfo == $sub.ref(0, 150691));
procedure  igbvf_get_drvinfo($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7515, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7516, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7517, 31} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7517, 11} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7517, 3} true;
  assume {:verifier.code 0} true;
  call $i6 := strlcpy($p5, igbvf_driver_name, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7518, 31} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p1, 36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7518, 11} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7518, 3} true;
  assume {:verifier.code 0} true;
  call $i9 := strlcpy($p8, igbvf_driver_version, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7520, 57} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p3, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7520, 57} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7520, 13} true;
  assume {:verifier.code 0} true;
  call $p12 := pci_name($p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7521, 31} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p1, 100);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7521, 11} true;
  assume {:verifier.code 0} true;
  $p14 := $bitcast.ref.ref($p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7521, 3} true;
  assume {:verifier.code 0} true;
  call $i15 := strlcpy($p14, $p12, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7522, 13} true;
  assume {:verifier.code 0} true;
  call $i16 := igbvf_get_regs_len($p0);
  // WARNING: %17 = call i32 @igbvf_get_regs_len(%struct.net_device* %0), !dbg !8355, !verifier.code !8332
  call {:cexpr "tmp___1"} boogie_si_record_i32($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7523, 12} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p1, 192);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7523, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p17, $i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7524, 13} true;
  assume {:verifier.code 0} true;
  call $i18 := igbvf_get_eeprom_len($p0);
  // WARNING: %19 = call i32 @igbvf_get_eeprom_len(%struct.net_device* %0), !dbg !8360, !verifier.code !8332
  call {:cexpr "tmp___2"} boogie_si_record_i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7525, 12} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p1, 188);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7525, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p19, $i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7526, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_get_regs_len: ref;
axiom (igbvf_get_regs_len == $sub.ref(0, 151723));
procedure  igbvf_get_regs_len($p0: ref)
  returns ($r: i32)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7451, 3} true;
  assume {:verifier.code 0} true;
  $r := 32;
  $exn := false;
  return;
}
const igbvf_get_regs: ref;
axiom (igbvf_get_regs == $sub.ref(0, 152755));
procedure  igbvf_get_regs($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7463, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7464, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7465, 19} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p4, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7466, 15} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7467, 3} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p2, 0, 32, $zext.i32.i64(1), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7468, 46} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p4, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7468, 46} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7468, 53} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p8, 72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7468, 53} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i8($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7468, 30} true;
  assume {:verifier.code 0} true;
  $i11 := $zext.i8.i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7468, 62} true;
  assume {:verifier.code 0} true;
  $i12 := $shl.i32($i11, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7468, 69} true;
  assume {:verifier.code 0} true;
  $i13 := $or.i32($i12, 16777216);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7468, 99} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p4, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7468, 99} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7468, 106} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p15, 62);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7468, 106} true;
  assume {:verifier.code 0} true;
  $i17 := $load.i16($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7468, 83} true;
  assume {:verifier.code 0} true;
  $i18 := $zext.i16.i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7468, 81} true;
  assume {:verifier.code 0} true;
  $i19 := $or.i32($i13, $i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7468, 9} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7468, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p20, $i19);
  $p21 := $add.ref($add.ref($p4, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7469, 51} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7469, 16} true;
  assume {:verifier.code 0} true;
  call $i23 := readl($p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7469, 14} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p6, $i23);
  $p24 := $add.ref($add.ref($p4, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7470, 59} true;
  assume {:verifier.code 0} true;
  $p25 := $load.ref($M.0, $p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7470, 67} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p25, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7470, 24} true;
  assume {:verifier.code 0} true;
  call $i27 := readl($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7470, 15} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p6, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7470, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p28, $i27);
  $p29 := $add.ref($add.ref($p4, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7471, 59} true;
  assume {:verifier.code 0} true;
  $p30 := $load.ref($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7471, 67} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p30, 10248);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7471, 24} true;
  assume {:verifier.code 0} true;
  call $i32 := readl($p31);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7471, 15} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p6, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7471, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p33, $i32);
  $p34 := $add.ref($add.ref($p4, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7472, 59} true;
  assume {:verifier.code 0} true;
  $p35 := $load.ref($M.0, $p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7472, 67} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p35, 10256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7472, 24} true;
  assume {:verifier.code 0} true;
  call $i37 := readl($p36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7472, 15} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p6, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7472, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p38, $i37);
  $p39 := $add.ref($add.ref($p4, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7473, 59} true;
  assume {:verifier.code 0} true;
  $p40 := $load.ref($M.0, $p39);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7473, 67} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($p40, 10264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7473, 24} true;
  assume {:verifier.code 0} true;
  call $i42 := readl($p41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7473, 15} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p6, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7473, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p43, $i42);
  $p44 := $add.ref($add.ref($p4, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7474, 59} true;
  assume {:verifier.code 0} true;
  $p45 := $load.ref($M.0, $p44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7474, 67} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p45, 14344);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7474, 24} true;
  assume {:verifier.code 0} true;
  call $i47 := readl($p46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7474, 15} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($p6, 20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7474, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p48, $i47);
  $p49 := $add.ref($add.ref($p4, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7475, 59} true;
  assume {:verifier.code 0} true;
  $p50 := $load.ref($M.0, $p49);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7475, 67} true;
  assume {:verifier.code 0} true;
  $p51 := $add.ref($p50, 14352);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7475, 24} true;
  assume {:verifier.code 0} true;
  call $i52 := readl($p51);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7475, 15} true;
  assume {:verifier.code 0} true;
  $p53 := $add.ref($p6, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7475, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p53, $i52);
  $p54 := $add.ref($add.ref($p4, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7476, 59} true;
  assume {:verifier.code 0} true;
  $p55 := $load.ref($M.0, $p54);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7476, 67} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($p55, 14360);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7476, 24} true;
  assume {:verifier.code 0} true;
  call $i57 := readl($p56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7476, 15} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($p6, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7476, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p58, $i57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7477, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_get_wol: ref;
axiom (igbvf_get_wol == $sub.ref(0, 153787));
procedure  igbvf_get_wol($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7742, 8} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7742, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7743, 8} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7743, 16} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7744, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_set_wol: ref;
axiom (igbvf_set_wol == $sub.ref(0, 154819));
procedure  igbvf_set_wol($p0: ref, $p1: ref)
  returns ($r: i32)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7752, 3} true;
  assume {:verifier.code 0} true;
  $r := $sub.i32(0, 95);
  $exn := false;
  return;
}
const igbvf_get_msglevel: ref;
axiom (igbvf_get_msglevel == $sub.ref(0, 155851));
procedure  igbvf_get_msglevel($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7429, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7430, 13} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7431, 20} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 2540);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7431, 20} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7431, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const igbvf_set_msglevel: ref;
axiom (igbvf_set_msglevel == $sub.ref(0, 156883));
procedure  igbvf_set_msglevel($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !8547, metadata !8330), !dbg !8548, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7440, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7441, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7442, 12} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p3, 2540);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7442, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p4, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7443, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_nway_reset: ref;
axiom (igbvf_nway_reset == $sub.ref(0, 157915));
procedure  igbvf_nway_reset($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7806, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7807, 13} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7808, 13} true;
  assume {:verifier.code 0} true;
  call $i3 := netif_running($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7808, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i8($i3);
  // WARNING: %5 = zext i1 %4 to i8, !dbg !8341, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i8($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7809, 13} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i8.i1($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7809, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7810, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_reinit_locked($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7811, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7814, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const ethtool_op_get_link: ref;
axiom (ethtool_op_get_link == $sub.ref(0, 158947));
procedure  ethtool_op_get_link($p0: ref)
  returns ($r: i32);
const igbvf_get_eeprom_len: ref;
axiom (igbvf_get_eeprom_len == $sub.ref(0, 159979));
procedure  igbvf_get_eeprom_len($p0: ref)
  returns ($r: i32)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7485, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const igbvf_get_eeprom: ref;
axiom (igbvf_get_eeprom == $sub.ref(0, 161011));
procedure  igbvf_get_eeprom($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7494, 3} true;
  assume {:verifier.code 0} true;
  $r := $sub.i32(0, 95);
  $exn := false;
  return;
}
const igbvf_set_eeprom: ref;
axiom (igbvf_set_eeprom == $sub.ref(0, 162043));
procedure  igbvf_set_eeprom($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7503, 3} true;
  assume {:verifier.code 0} true;
  $r := $sub.i32(0, 95);
  $exn := false;
  return;
}
const igbvf_get_coalesce: ref;
axiom (igbvf_get_coalesce == $sub.ref(0, 163075));
procedure  igbvf_get_coalesce($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7761, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7762, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7763, 16} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p3, 1040);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7763, 16} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7763, 30} true;
  assume {:verifier.code 0} true;
  $i6 := $ule.i32($i5, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7763, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7764, 38} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p3, 1040);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7764, 38} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7764, 9} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7764, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p9, $i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7765, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7766, 38} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p3, 1044);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7766, 38} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i32($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7766, 50} true;
  assume {:verifier.code 0} true;
  $i12 := $lshr.i32($i11, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7766, 9} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7766, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p13, $i12);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7768, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const igbvf_set_coalesce: ref;
axiom (igbvf_set_coalesce == $sub.ref(0, 164107));
procedure  igbvf_set_coalesce($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i16;
  var $i48: i64;
  var $p49: ref;
  var $i39: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7778, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7779, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7780, 19} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p3, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7781, 11} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7781, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7781, 29} true;
  assume {:verifier.code 0} true;
  $i7 := $ugt.i32($i6, 9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7781, 34} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7781, 41} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7781, 41} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i32($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7781, 59} true;
  assume {:verifier.code 0} true;
  $i10 := $ule.i32($i9, 10000);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7781, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7781, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i7 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7785, 11} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7785, 11} true;
  assume {:verifier.code 0} true;
  $i21 := $load.i32($M.0, $p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7785, 29} true;
  assume {:verifier.code 0} true;
  $i22 := $eq.i32($i21, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7785, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb7, $bb9;
$bb4:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7782, 32} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7782, 32} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i32($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7782, 50} true;
  assume {:verifier.code 0} true;
  $i13 := $shl.i32($i12, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7782, 14} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p3, 1044);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7782, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p14, $i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7783, 54} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p3, 1044);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7783, 54} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7783, 66} true;
  assume {:verifier.code 0} true;
  $i17 := $mul.i32($i16, 256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7783, 42} true;
  assume {:verifier.code 0} true;
  $i18 := $udiv.i32(1000000000, $i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7783, 14} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p3, 1040);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7783, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p19, $i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7784, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7781, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i10 == 1));
  goto $bb3;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7795, 19} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p3, 1044);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7795, 19} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i32($M.0, $p40);
  $p42 := $add.ref($add.ref($p3, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7795, 55} true;
  assume {:verifier.code 0} true;
  $p43 := $load.ref($M.0, $p42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7795, 91} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($p3, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7795, 91} true;
  assume {:verifier.code 0} true;
  $p45 := $load.ref($M.0, $p44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7795, 101} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p45, 268);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7795, 101} true;
  assume {:verifier.code 0} true;
  $i47 := $load.i16($M.0, $p46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7795, 65} true;
  assume {:verifier.code 0} true;
  $i48 := $zext.i16.i64($i47);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7795, 63} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($p43, $mul.ref($i48, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7795, 3} true;
  assume {:verifier.code 0} true;
  call writel($i41, $p49);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7796, 3} true;
  assume {:verifier.code 0} true;
  $i39 := 0;
  goto $bb16;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7785, 35} true;
  assume {:verifier.code 0} true;
  assume ($i22 == 1);
  goto $bb8;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7786, 14} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p3, 1044);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7786, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p26, 488);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7787, 34} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7787, 34} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i32($M.0, $p27);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7787, 14} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p3, 1040);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7787, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p29, $i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7788, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb9:
  assume !(($i22 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7785, 42} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7785, 42} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i32($M.0, $p23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7785, 60} true;
  assume {:verifier.code 0} true;
  $i25 := $eq.i32($i24, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7785, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb10, $bb11;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7785, 7} true;
  assume {:verifier.code 0} true;
  assume ($i25 == 1);
  goto $bb8;
$bb11:
  assume !(($i25 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7789, 11} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7789, 11} true;
  assume {:verifier.code 0} true;
  $i31 := $load.i32($M.0, $p30);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7789, 29} true;
  assume {:verifier.code 0} true;
  $i32 := $eq.i32($i31, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7789, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb13, $bb14;
$bb12:
  assume {:verifier.code 0} true;
  goto $bb6;
$bb13:
  assume ($i32 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7790, 14} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p3, 1044);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7790, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p33, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7791, 54} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p3, 1044);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7791, 54} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i32($M.0, $p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7791, 66} true;
  assume {:verifier.code 0} true;
  $i36 := $mul.i32($i35, 256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7791, 42} true;
  assume {:verifier.code 0} true;
  $i37 := $udiv.i32(1000000000, $i36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7791, 14} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p3, 1040);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7791, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p38, $i37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7792, 3} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume !(($i32 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7793, 5} true;
  assume {:verifier.code 0} true;
  $i39 := $sub.i32(0, 22);
  goto $bb16;
$bb15:
  assume {:verifier.code 0} true;
  goto $bb12;
$bb16:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7798, 1} true;
  assume {:verifier.code 0} true;
  $r := $i39;
  $exn := false;
  return;
}
const igbvf_get_ringparam: ref;
axiom (igbvf_get_ringparam == $sub.ref(0, 165139));
procedure  igbvf_get_ringparam($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7537, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7538, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7539, 22} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p3, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7539, 22} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7540, 22} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p3, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7540, 22} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7541, 9} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7541, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p8, 4096);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7542, 9} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p1, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7542, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p9, 4096);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7543, 31} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p7, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7543, 31} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i32($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7543, 9} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p1, 20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7543, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p12, $i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7544, 31} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p5, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7544, 31} true;
  assume {:verifier.code 0} true;
  $i14 := $load.i32($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7544, 9} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p1, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7544, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p15, $i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7545, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_set_ringparam: ref;
axiom (igbvf_set_ringparam == $sub.ref(0, 166171));
procedure  igbvf_set_ringparam($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i1;
  var $i45: i8;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p80: ref;
  var $p81: ref;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i79: i32;
  var $i127: i32;
  var $p128: ref;
  var $i55: i32;
  var $p129: ref;
  var $i10: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7578, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7579, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  // WARNING: call void @llvm.dbg.value(metadata %struct.igbvf_adapter* %4, i64 0, metadata !8744, metadata !8330), !dbg !8745, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7581, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p1, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7581, 13} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7581, 29} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7581, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7581, 35} true;
  assume {:verifier.code 0} true;
  assume ($i6 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7582, 5} true;
  assume {:verifier.code 0} true;
  $i10 := $sub.i32(0, 22);
  goto $bb6;
$bb3:
  assume !(($i6 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7581, 44} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p1, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7581, 44} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7581, 61} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i32($i8, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7581, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7581, 7} true;
  assume {:verifier.code 0} true;
  assume ($i9 == 1);
  goto $bb2;
$bb5:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7696, 1} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7586, 17} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p1, 20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7586, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i32($M.0, $p11);
  // WARNING: %16 = load i32, i32* %15, align 4, !dbg !8354, !verifier.code !8332
  call {:cexpr "_max1"} boogie_si_record_i32($i12);
  // WARNING: call void @llvm.dbg.value(metadata i32 %16, i64 0, metadata !8759, metadata !8330), !dbg !8760, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7588, 24} true;
  assume {:verifier.code 0} true;
  $i13 := $ugt.i32($i12, 80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7588, 18} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7588, 18} true;
  assume {:verifier.code 0} true;
  $i14 := $i12;
  goto $bb10;
$bb9:
  assume !(($i13 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7588, 18} true;
  assume {:verifier.code 0} true;
  $i14 := 80;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7588, 18} true;
  assume {:verifier.code 0} true;
  // WARNING: %21 = phi i32 [ %16, %18 ], [ 80, %19 ], !dbg !8365, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %21, i64 0, metadata !8771, metadata !8330), !dbg !8772, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %21, i64 0, metadata !8773, metadata !8330), !dbg !8774, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7591, 24} true;
  assume {:verifier.code 0} true;
  $i15 := $ult.i32($i14, 4096);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7591, 18} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i15 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7591, 18} true;
  assume {:verifier.code 0} true;
  $i16 := $i14;
  goto $bb13;
$bb12:
  assume !(($i15 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7591, 18} true;
  assume {:verifier.code 0} true;
  $i16 := 4096;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7591, 18} true;
  assume {:verifier.code 0} true;
  // WARNING: %26 = phi i32 [ %21, %23 ], [ 4096, %24 ], !dbg !8377, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7592, 32} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i32($i16, 7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7592, 38} true;
  assume {:verifier.code 0} true;
  $i18 := $and.i32($i17, $sub.i32(0, 8));
  // WARNING: %28 = and i32 %27, -8, !dbg !8379, !verifier.code !8332
  call {:cexpr "new_rx_count"} boogie_si_record_i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7593, 21} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p1, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7593, 21} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i32($M.0, $p19);
  // WARNING: %30 = load i32, i32* %29, align 4, !dbg !8380, !verifier.code !8332
  call {:cexpr "_max1___0"} boogie_si_record_i32($i20);
  // WARNING: call void @llvm.dbg.value(metadata i32 %30, i64 0, metadata !8785, metadata !8330), !dbg !8786, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7595, 28} true;
  assume {:verifier.code 0} true;
  $i21 := $ugt.i32($i20, 80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7595, 18} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i21 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7595, 18} true;
  assume {:verifier.code 0} true;
  $i22 := $i20;
  goto $bb16;
$bb15:
  assume !(($i21 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7595, 18} true;
  assume {:verifier.code 0} true;
  $i22 := 80;
  goto $bb16;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7595, 18} true;
  assume {:verifier.code 0} true;
  // WARNING: %35 = phi i32 [ %30, %32 ], [ 80, %33 ], !dbg !8389, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %35, i64 0, metadata !8794, metadata !8330), !dbg !8795, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %35, i64 0, metadata !8796, metadata !8330), !dbg !8797, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7598, 28} true;
  assume {:verifier.code 0} true;
  $i23 := $ult.i32($i22, 4096);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7598, 18} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i23} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i23 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7598, 18} true;
  assume {:verifier.code 0} true;
  $i24 := $i22;
  goto $bb19;
$bb18:
  assume !(($i23 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7598, 18} true;
  assume {:verifier.code 0} true;
  $i24 := 4096;
  goto $bb19;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7598, 18} true;
  assume {:verifier.code 0} true;
  // WARNING: %40 = phi i32 [ %35, %37 ], [ 4096, %38 ], !dbg !8400, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7599, 32} true;
  assume {:verifier.code 0} true;
  $i25 := $add.i32($i24, 7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7599, 38} true;
  assume {:verifier.code 0} true;
  $i26 := $and.i32($i25, $sub.i32(0, 8));
  // WARNING: %42 = and i32 %41, -8, !dbg !8402, !verifier.code !8332
  call {:cexpr "new_tx_count"} boogie_si_record_i32($i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7600, 17} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p3, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7600, 17} true;
  assume {:verifier.code 0} true;
  $p28 := $load.ref($M.0, $p27);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7600, 27} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p28, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7600, 27} true;
  assume {:verifier.code 0} true;
  $i30 := $load.i32($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7600, 33} true;
  assume {:verifier.code 0} true;
  $i31 := $eq.i32($i30, $i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7600, 49} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i31 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7600, 62} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p3, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7600, 62} true;
  assume {:verifier.code 0} true;
  $p33 := $load.ref($M.0, $p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7600, 72} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p33, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7600, 72} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i32($M.0, $p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7600, 78} true;
  assume {:verifier.code 0} true;
  $i36 := $eq.i32($i35, $i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7600, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb23, $bb24;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7600, 49} true;
  assume {:verifier.code 0} true;
  assume !(($i31 == 1));
  goto $bb22;
$bb22:
  assume {:verifier.code 0} true;
  goto $bb25;
$bb23:
  assume ($i36 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7601, 5} true;
  assume {:verifier.code 0} true;
  $i10 := 0;
  goto $bb6;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7600, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i36 == 1));
  goto $bb22;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7609, 74} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p3, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7609, 13} true;
  assume {:verifier.code 0} true;
  call $i38 := test_and_set_bit(1, $p37);
  // WARNING: %58 = call i32 @test_and_set_bit(i64 1, i64* %57), !dbg !8416, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i32($i38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7610, 15} true;
  assume {:verifier.code 0} true;
  $i39 := $ne.i32($i38, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7610, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i39 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7610, 7} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7610, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i39 == 1));
  goto $bb28;
$bb28:
  assume {:verifier.code 0} true;
  goto $bb33;
$bb29:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7611, 5} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7607, 3} true;
  assume {:verifier.code 0} true;
  call msleep(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7609, 13} true;
  assume {:verifier.code 0} true;
  call $i40 := test_and_set_bit(1, $p37);
  // WARNING: %61 = call i32 @test_and_set_bit(i64 1, i64* %57), !dbg !8416, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i32($i40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7610, 15} true;
  assume {:verifier.code 0} true;
  $i41 := $ne.i32($i40, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7610, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb31, $bb32;
$bb31:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7610, 7} true;
  assume {:verifier.code 0} true;
  assume ($i41 == 1);
  goto $bb29;
$bb32:
  assume !(($i41 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7610, 7} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb33:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7615, 65} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($p3, 1176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7615, 65} true;
  assume {:verifier.code 0} true;
  $p43 := $load.ref($M.0, $p42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7615, 13} true;
  assume {:verifier.code 0} true;
  call $i44 := netif_running($p43);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7615, 11} true;
  assume {:verifier.code 0} true;
  $i45 := $zext.i1.i8($i44);
  // WARNING: %69 = zext i1 %68 to i8, !dbg !8427, !verifier.code !8332
  call {:cexpr "tmp___1"} boogie_si_record_i8($i45);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7616, 7} true;
  assume {:verifier.code 0} true;
  $i46 := $trunc.i8.i1($i45);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7616, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb34, $bb35;
$bb34:
  assume ($i46 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7618, 3} true;
  assume {:verifier.code 0} true;
  $i47 := 0;
  goto $bb36;
$bb35:
  assume !(($i46 == 1));
  assume {:verifier.code 0} true;
  $i47 := 1;
  goto $bb36;
$bb36:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7621, 7} true;
  assume {:verifier.code 0} true;
  $i48 := $ne.i32($i47, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7621, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i48} true;
  goto $bb37, $bb38;
$bb37:
  assume ($i48 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7622, 15} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($p3, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7622, 15} true;
  assume {:verifier.code 0} true;
  $p50 := $load.ref($M.0, $p49);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7622, 25} true;
  assume {:verifier.code 0} true;
  $p51 := $add.ref($p50, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7622, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p51, $i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7623, 15} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($p3, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7623, 15} true;
  assume {:verifier.code 0} true;
  $p53 := $load.ref($M.0, $p52);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7623, 25} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($p53, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7623, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p54, $i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7624, 5} true;
  assume {:verifier.code 0} true;
  $i55 := 0;
  goto $bb39;
$bb38:
  assume !(($i48 == 1));
  assume {:verifier.code 0} true;
  goto $bb40;
$bb39:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7693, 57} true;
  assume {:verifier.code 0} true;
  $p129 := $add.ref($p3, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7693, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit(1, $p129);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7694, 3} true;
  assume {:verifier.code 0} true;
  $i10 := $i55;
  goto $bb6;
$bb40:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7628, 13} true;
  assume {:verifier.code 0} true;
  call $p56 := vmalloc(304);
  assume $isExternal($p56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7629, 15} true;
  assume {:verifier.code 0} true;
  $p57 := $bitcast.ref.ref($p56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7630, 7} true;
  assume {:verifier.code 0} true;
  $i58 := $p2i.ref.i64($p57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7630, 33} true;
  assume {:verifier.code 0} true;
  $i59 := $eq.i64($i58, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7630, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i59} true;
  goto $bb41, $bb42;
$bb41:
  assume ($i59 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7632, 5} true;
  assume {:verifier.code 0} true;
  $i55 := $sub.i32(0, 12);
  goto $bb39;
$bb42:
  assume !(($i59 == 1));
  assume {:verifier.code 0} true;
  goto $bb43;
$bb43:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7636, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_down($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7637, 17} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($p3, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7637, 17} true;
  assume {:verifier.code 0} true;
  $p61 := $load.ref($M.0, $p60);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7637, 27} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($p61, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7637, 27} true;
  assume {:verifier.code 0} true;
  $i63 := $load.i32($M.0, $p62);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7637, 33} true;
  assume {:verifier.code 0} true;
  $i64 := $ne.i32($i63, $i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7637, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i64} true;
  goto $bb44, $bb45;
$bb44:
  assume ($i64 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7639, 15} true;
  assume {:verifier.code 0} true;
  $i65 := $ugt.i64(304, 63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7639, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i65} true;
  goto $bb46, $bb47;
$bb45:
  assume !(($i64 == 1));
  assume {:verifier.code 0} true;
  $i93 := 0;
  goto $bb56;
$bb46:
  assume ($i65 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7640, 24} true;
  assume {:verifier.code 0} true;
  $p66 := $bitcast.ref.ref($p57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7640, 68} true;
  assume {:verifier.code 0} true;
  $p67 := $add.ref($p3, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7640, 68} true;
  assume {:verifier.code 0} true;
  $p68 := $load.ref($M.0, $p67);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7640, 43} true;
  assume {:verifier.code 0} true;
  $p69 := $bitcast.ref.ref($p68);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7640, 15} true;
  assume {:verifier.code 0} true;
  call $p70 := __memcpy($p66, $p69, 304);
  assume $isExternal($p70);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7641, 5} true;
  assume {:verifier.code 0} true;
  goto $bb48;
$bb47:
  assume !(($i65 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7642, 32} true;
  assume {:verifier.code 0} true;
  $p71 := $bitcast.ref.ref($p57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7642, 76} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($p3, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7642, 76} true;
  assume {:verifier.code 0} true;
  $p73 := $load.ref($M.0, $p72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7642, 51} true;
  assume {:verifier.code 0} true;
  $p74 := $bitcast.ref.ref($p73);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7642, 15} true;
  assume {:verifier.code 0} true;
  call $i75 := __builtinx_memcpy.ref.ref.i64($p71, $p74, 304);
  assume {:verifier.code 0} true;
  goto $bb48;
$bb48:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7645, 16} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($p57, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7645, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p76, $i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7646, 11} true;
  assume {:verifier.code 0} true;
  call $i77 := igbvf_setup_tx_resources($p3, $p57);
  // WARNING: %112 = call i32 @igbvf_setup_tx_resources(%struct.igbvf_adapter* %4, %struct.igbvf_ring* %85), !dbg !8487, !verifier.code !8332
  call {:cexpr "err"} boogie_si_record_i32($i77);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7647, 13} true;
  assume {:verifier.code 0} true;
  $i78 := $ne.i32($i77, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7647, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i78} true;
  goto $bb49, $bb50;
$bb49:
  assume ($i78 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7648, 7} true;
  assume {:verifier.code 0} true;
  $i79 := $i77;
  goto $bb51;
$bb50:
  assume !(($i78 == 1));
  assume {:verifier.code 0} true;
  goto $bb52;
$bb51:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7690, 3} true;
  assume {:verifier.code 0} true;
  call $i127 := igbvf_up($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7691, 9} true;
  assume {:verifier.code 0} true;
  $p128 := $bitcast.ref.ref($p57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7691, 3} true;
  assume {:verifier.code 0} true;
  call vfree($p128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7691, 3} true;
  assume {:verifier.code 0} true;
  $i55 := $i79;
  goto $bb39;
$bb52:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7652, 38} true;
  assume {:verifier.code 0} true;
  $p80 := $add.ref($p3, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7652, 38} true;
  assume {:verifier.code 0} true;
  $p81 := $load.ref($M.0, $p80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7652, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_free_tx_resources($p81);
  // WARNING: call void @igbvf_free_tx_resources(%struct.igbvf_ring* %118), !dbg !8494, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7654, 19} true;
  assume {:verifier.code 0} true;
  $i82 := $ugt.i64(304, 63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7654, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i82} true;
  goto $bb53, $bb54;
$bb53:
  assume ($i82 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7655, 45} true;
  assume {:verifier.code 0} true;
  $p83 := $add.ref($p3, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7655, 45} true;
  assume {:verifier.code 0} true;
  $p84 := $load.ref($M.0, $p83);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7655, 28} true;
  assume {:verifier.code 0} true;
  $p85 := $bitcast.ref.ref($p84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7655, 54} true;
  assume {:verifier.code 0} true;
  $p86 := $bitcast.ref.ref($p57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7655, 19} true;
  assume {:verifier.code 0} true;
  call $p87 := __memcpy($p85, $p86, 304);
  assume $isExternal($p87);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7656, 5} true;
  assume {:verifier.code 0} true;
  goto $bb55;
$bb54:
  assume !(($i82 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7657, 53} true;
  assume {:verifier.code 0} true;
  $p88 := $add.ref($p3, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7657, 53} true;
  assume {:verifier.code 0} true;
  $p89 := $load.ref($M.0, $p88);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7657, 36} true;
  assume {:verifier.code 0} true;
  $p90 := $bitcast.ref.ref($p89);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7657, 62} true;
  assume {:verifier.code 0} true;
  $p91 := $bitcast.ref.ref($p57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7657, 19} true;
  assume {:verifier.code 0} true;
  call $i92 := __builtinx_memcpy.ref.ref.i64($p90, $p91, 304);
  assume {:verifier.code 0} true;
  goto $bb55;
$bb55:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7660, 3} true;
  assume {:verifier.code 0} true;
  $i93 := $i77;
  goto $bb56;
$bb56:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7663, 17} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($p3, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7663, 17} true;
  assume {:verifier.code 0} true;
  $p95 := $load.ref($M.0, $p94);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7663, 27} true;
  assume {:verifier.code 0} true;
  $p96 := $add.ref($p95, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7663, 27} true;
  assume {:verifier.code 0} true;
  $i97 := $load.i32($M.0, $p96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7663, 33} true;
  assume {:verifier.code 0} true;
  $i98 := $ne.i32($i97, $i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7663, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i98} true;
  goto $bb57, $bb58;
$bb57:
  assume ($i98 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7665, 19} true;
  assume {:verifier.code 0} true;
  $i99 := $ugt.i64(304, 63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7665, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i99} true;
  goto $bb59, $bb60;
$bb58:
  assume !(($i98 == 1));
  assume {:verifier.code 0} true;
  $i126 := $i93;
  goto $bb68;
$bb59:
  assume ($i99 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7666, 28} true;
  assume {:verifier.code 0} true;
  $p100 := $bitcast.ref.ref($p57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7666, 72} true;
  assume {:verifier.code 0} true;
  $p101 := $add.ref($p3, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7666, 72} true;
  assume {:verifier.code 0} true;
  $p102 := $load.ref($M.0, $p101);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7666, 47} true;
  assume {:verifier.code 0} true;
  $p103 := $bitcast.ref.ref($p102);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7666, 19} true;
  assume {:verifier.code 0} true;
  call $p104 := __memcpy($p100, $p103, 304);
  assume $isExternal($p104);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7667, 5} true;
  assume {:verifier.code 0} true;
  goto $bb61;
$bb60:
  assume !(($i99 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7668, 36} true;
  assume {:verifier.code 0} true;
  $p105 := $bitcast.ref.ref($p57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7668, 80} true;
  assume {:verifier.code 0} true;
  $p106 := $add.ref($p3, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7668, 80} true;
  assume {:verifier.code 0} true;
  $p107 := $load.ref($M.0, $p106);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7668, 55} true;
  assume {:verifier.code 0} true;
  $p108 := $bitcast.ref.ref($p107);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7668, 19} true;
  assume {:verifier.code 0} true;
  call $i109 := __builtinx_memcpy.ref.ref.i64($p105, $p108, 304);
  assume {:verifier.code 0} true;
  goto $bb61;
$bb61:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7671, 16} true;
  assume {:verifier.code 0} true;
  $p110 := $add.ref($p57, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7671, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p110, $i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7672, 11} true;
  assume {:verifier.code 0} true;
  call $i111 := igbvf_setup_rx_resources($p3, $p57);
  // WARNING: %156 = call i32 @igbvf_setup_rx_resources(%struct.igbvf_adapter* %4, %struct.igbvf_ring* %85), !dbg !8540, !verifier.code !8332
  call {:cexpr "err"} boogie_si_record_i32($i111);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7673, 13} true;
  assume {:verifier.code 0} true;
  $i112 := $ne.i32($i111, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7673, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i112} true;
  goto $bb62, $bb63;
$bb62:
  assume ($i112 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7674, 7} true;
  assume {:verifier.code 0} true;
  $i79 := $i111;
  goto $bb51;
$bb63:
  assume !(($i112 == 1));
  assume {:verifier.code 0} true;
  goto $bb64;
$bb64:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7678, 38} true;
  assume {:verifier.code 0} true;
  $p113 := $add.ref($p3, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7678, 38} true;
  assume {:verifier.code 0} true;
  $p114 := $load.ref($M.0, $p113);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7678, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_free_rx_resources($p114);
  // WARNING: call void @igbvf_free_rx_resources(%struct.igbvf_ring* %162), !dbg !8547, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7680, 19} true;
  assume {:verifier.code 0} true;
  $i115 := $ugt.i64(304, 63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7680, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i115} true;
  goto $bb65, $bb66;
$bb65:
  assume ($i115 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7681, 45} true;
  assume {:verifier.code 0} true;
  $p116 := $add.ref($p3, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7681, 45} true;
  assume {:verifier.code 0} true;
  $p117 := $load.ref($M.0, $p116);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7681, 28} true;
  assume {:verifier.code 0} true;
  $p118 := $bitcast.ref.ref($p117);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7681, 54} true;
  assume {:verifier.code 0} true;
  $p119 := $bitcast.ref.ref($p57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7681, 19} true;
  assume {:verifier.code 0} true;
  call $p120 := __memcpy($p118, $p119, 304);
  assume $isExternal($p120);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7682, 5} true;
  assume {:verifier.code 0} true;
  goto $bb67;
$bb66:
  assume !(($i115 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7683, 53} true;
  assume {:verifier.code 0} true;
  $p121 := $add.ref($p3, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7683, 53} true;
  assume {:verifier.code 0} true;
  $p122 := $load.ref($M.0, $p121);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7683, 36} true;
  assume {:verifier.code 0} true;
  $p123 := $bitcast.ref.ref($p122);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7683, 62} true;
  assume {:verifier.code 0} true;
  $p124 := $bitcast.ref.ref($p57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7683, 19} true;
  assume {:verifier.code 0} true;
  call $i125 := __builtinx_memcpy.ref.ref.i64($p123, $p124, 304);
  assume {:verifier.code 0} true;
  goto $bb67;
$bb67:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7686, 3} true;
  assume {:verifier.code 0} true;
  $i126 := $i111;
  goto $bb68;
$bb68:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7663, 36} true;
  assume {:verifier.code 0} true;
  $i79 := $i126;
  goto $bb51;
}
const igbvf_get_pauseparam: ref;
axiom (igbvf_get_pauseparam == $sub.ref(0, 167203));
procedure  igbvf_get_pauseparam($p0: ref, $p1: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7412, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_set_pauseparam: ref;
axiom (igbvf_set_pauseparam == $sub.ref(0, 168235));
procedure  igbvf_set_pauseparam($p0: ref, $p1: ref)
  returns ($r: i32)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7420, 3} true;
  assume {:verifier.code 0} true;
  $r := $sub.i32(0, 95);
  $exn := false;
  return;
}
const igbvf_diag_test: ref;
axiom (igbvf_diag_test == $sub.ref(0, 169267));
procedure  igbvf_diag_test($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7723, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7724, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7725, 55} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p4, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7725, 3} true;
  assume {:verifier.code 0} true;
  call set_bit(0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7726, 13} true;
  assume {:verifier.code 0} true;
  call $i6 := igbvf_link_test($p4, $p2);
  // WARNING: %7 = call i32 @igbvf_link_test(%struct.igbvf_adapter* %5, i64* %2), !dbg !8346, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7727, 15} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i32($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7727, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7728, 33} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7728, 33} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i32($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7728, 39} true;
  assume {:verifier.code 0} true;
  $i10 := $or.i32($i9, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7728, 15} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7728, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p11, $i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7729, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7732, 57} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p4, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7732, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit(0, $p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7733, 3} true;
  assume {:verifier.code 0} true;
  call $i13 := msleep_interruptible(4000);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7734, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_get_strings: ref;
axiom (igbvf_get_strings == $sub.ref(0, 170299));
procedure  igbvf_get_strings($p0: ref, $i1: i32, $p2: ref)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !9027, metadata !8330), !dbg !9028, !verifier.code !8332
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  $i3 := $slt.i32($i1, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i3 == 1);
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i1, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb7, $bb8;
$bb3:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  $i4 := $eq.i32($i1, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7898, 7} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb5:
  assume {:verifier.code 0} true;
  assume !(($i4 == 1));
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  goto $bb20;
$bb7:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7876, 13} true;
  assume {:verifier.code 0} true;
  $i6 := $ugt.i64(32, 63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7876, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb9, $bb10;
$bb8:
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb6;
$bb9:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7877, 13} true;
  assume {:verifier.code 0} true;
  call $p7 := __memcpy($p2, igbvf_gstrings_test, 32);
  assume $isExternal($p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7878, 3} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume !(($i6 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7879, 13} true;
  assume {:verifier.code 0} true;
  call $i8 := __builtinx_memcpy.ref.ref.i64($p2, igbvf_gstrings_test, 32);
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7882, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7907, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7899, 5} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7888, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb15, $bb16;
$bb15:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7889, 17} true;
  assume {:verifier.code 0} true;
  call $p9 := __memcpy($p2, igbvf_gstrings_stats, 32);
  assume $isExternal($p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7891, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7892, 17} true;
  assume {:verifier.code 0} true;
  call $i10 := __builtinx_memcpy.ref.ref.i64($p2, igbvf_gstrings_stats, 32);
  assume {:verifier.code 0} true;
  goto $bb17;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7895, 9} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p2, 32);
  // WARNING: call void @llvm.dbg.value(metadata i8* %18, i64 0, metadata !9033, metadata !8330), !dbg !9034, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7899, 5} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7888, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb21, $bb22;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7904, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7905, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb21:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7889, 17} true;
  assume {:verifier.code 0} true;
  call $p13 := __memcpy($p11, $add.ref(igbvf_gstrings_stats, 44), 32);
  assume $isExternal($p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7891, 3} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb22:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7892, 17} true;
  assume {:verifier.code 0} true;
  call $i12 := __builtinx_memcpy.ref.ref.i64($p11, $add.ref(igbvf_gstrings_stats, 44), 32);
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  $i14 := $add.i64(32, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7895, 9} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p2, $mul.ref($i14, 1));
  // WARNING: call void @llvm.dbg.value(metadata i8* %18, i64 0, metadata !9033, metadata !8330), !dbg !9034, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7899, 5} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7888, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb25, $bb26;
$bb25:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7889, 17} true;
  assume {:verifier.code 0} true;
  call $p17 := __memcpy($p15, $add.ref(igbvf_gstrings_stats, 88), 32);
  assume $isExternal($p17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7891, 3} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb26:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7892, 17} true;
  assume {:verifier.code 0} true;
  call $i16 := __builtinx_memcpy.ref.ref.i64($p15, $add.ref(igbvf_gstrings_stats, 88), 32);
  assume {:verifier.code 0} true;
  goto $bb27;
$bb27:
  $i18 := $add.i64($i14, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7895, 9} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p2, $mul.ref($i18, 1));
  // WARNING: call void @llvm.dbg.value(metadata i8* %18, i64 0, metadata !9033, metadata !8330), !dbg !9034, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7899, 5} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7888, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb29, $bb30;
$bb29:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7889, 17} true;
  assume {:verifier.code 0} true;
  call $p21 := __memcpy($p19, $add.ref(igbvf_gstrings_stats, 132), 32);
  assume $isExternal($p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7891, 3} true;
  assume {:verifier.code 0} true;
  goto $bb31;
$bb30:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7892, 17} true;
  assume {:verifier.code 0} true;
  call $i20 := __builtinx_memcpy.ref.ref.i64($p19, $add.ref(igbvf_gstrings_stats, 132), 32);
  assume {:verifier.code 0} true;
  goto $bb31;
$bb31:
  $i22 := $add.i64($i18, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7895, 9} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p2, $mul.ref($i22, 1));
  // WARNING: call void @llvm.dbg.value(metadata i8* %18, i64 0, metadata !9033, metadata !8330), !dbg !9034, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7899, 5} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb32:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7888, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb33, $bb34;
$bb33:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7889, 17} true;
  assume {:verifier.code 0} true;
  call $p25 := __memcpy($p23, $add.ref(igbvf_gstrings_stats, 176), 32);
  assume $isExternal($p25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7891, 3} true;
  assume {:verifier.code 0} true;
  goto $bb35;
$bb34:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7892, 17} true;
  assume {:verifier.code 0} true;
  call $i24 := __builtinx_memcpy.ref.ref.i64($p23, $add.ref(igbvf_gstrings_stats, 176), 32);
  assume {:verifier.code 0} true;
  goto $bb35;
$bb35:
  $i26 := $add.i64($i22, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7895, 9} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p2, $mul.ref($i26, 1));
  // WARNING: call void @llvm.dbg.value(metadata i8* %18, i64 0, metadata !9033, metadata !8330), !dbg !9034, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7899, 5} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb36:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7888, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb37, $bb38;
$bb37:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7889, 17} true;
  assume {:verifier.code 0} true;
  call $p29 := __memcpy($p27, $add.ref(igbvf_gstrings_stats, 220), 32);
  assume $isExternal($p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7891, 3} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb38:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7892, 17} true;
  assume {:verifier.code 0} true;
  call $i28 := __builtinx_memcpy.ref.ref.i64($p27, $add.ref(igbvf_gstrings_stats, 220), 32);
  assume {:verifier.code 0} true;
  goto $bb39;
$bb39:
  $i30 := $add.i64($i26, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7895, 9} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p2, $mul.ref($i30, 1));
  // WARNING: call void @llvm.dbg.value(metadata i8* %18, i64 0, metadata !9033, metadata !8330), !dbg !9034, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7899, 5} true;
  assume {:verifier.code 0} true;
  goto $bb40;
$bb40:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7888, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb41, $bb42;
$bb41:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7889, 17} true;
  assume {:verifier.code 0} true;
  call $p33 := __memcpy($p31, $add.ref(igbvf_gstrings_stats, 264), 32);
  assume $isExternal($p33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7891, 3} true;
  assume {:verifier.code 0} true;
  goto $bb43;
$bb42:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7892, 17} true;
  assume {:verifier.code 0} true;
  call $i32 := __builtinx_memcpy.ref.ref.i64($p31, $add.ref(igbvf_gstrings_stats, 264), 32);
  assume {:verifier.code 0} true;
  goto $bb43;
$bb43:
  $i34 := $add.i64($i30, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7895, 9} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($p2, $mul.ref($i34, 1));
  // WARNING: call void @llvm.dbg.value(metadata i8* %18, i64 0, metadata !9033, metadata !8330), !dbg !9034, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7899, 5} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb44:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7888, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb45, $bb46;
$bb45:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7889, 17} true;
  assume {:verifier.code 0} true;
  call $p37 := __memcpy($p35, $add.ref(igbvf_gstrings_stats, 308), 32);
  assume $isExternal($p37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7891, 3} true;
  assume {:verifier.code 0} true;
  goto $bb47;
$bb46:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7892, 17} true;
  assume {:verifier.code 0} true;
  call $i36 := __builtinx_memcpy.ref.ref.i64($p35, $add.ref(igbvf_gstrings_stats, 308), 32);
  assume {:verifier.code 0} true;
  goto $bb47;
$bb47:
  $i38 := $add.i64($i34, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7895, 9} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p2, $mul.ref($i38, 1));
  // WARNING: call void @llvm.dbg.value(metadata i8* %18, i64 0, metadata !9033, metadata !8330), !dbg !9034, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7899, 5} true;
  assume {:verifier.code 0} true;
  goto $bb48;
$bb48:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7888, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb49, $bb50;
$bb49:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7889, 17} true;
  assume {:verifier.code 0} true;
  call $p41 := __memcpy($p39, $add.ref(igbvf_gstrings_stats, 352), 32);
  assume $isExternal($p41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7891, 3} true;
  assume {:verifier.code 0} true;
  goto $bb51;
$bb50:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7892, 17} true;
  assume {:verifier.code 0} true;
  call $i40 := __builtinx_memcpy.ref.ref.i64($p39, $add.ref(igbvf_gstrings_stats, 352), 32);
  assume {:verifier.code 0} true;
  goto $bb51;
$bb51:
  $i42 := $add.i64($i38, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7895, 9} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p2, $mul.ref($i42, 1));
  // WARNING: call void @llvm.dbg.value(metadata i8* %18, i64 0, metadata !9033, metadata !8330), !dbg !9034, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7899, 5} true;
  assume {:verifier.code 0} true;
  goto $bb52;
$bb52:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7888, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb53, $bb54;
$bb53:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7889, 17} true;
  assume {:verifier.code 0} true;
  call $p45 := __memcpy($p43, $add.ref(igbvf_gstrings_stats, 396), 32);
  assume $isExternal($p45);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7891, 3} true;
  assume {:verifier.code 0} true;
  goto $bb55;
$bb54:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7892, 17} true;
  assume {:verifier.code 0} true;
  call $i44 := __builtinx_memcpy.ref.ref.i64($p43, $add.ref(igbvf_gstrings_stats, 396), 32);
  assume {:verifier.code 0} true;
  goto $bb55;
$bb55:
  $i46 := $add.i64($i42, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7895, 9} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($p2, $mul.ref($i46, 1));
  // WARNING: call void @llvm.dbg.value(metadata i8* %18, i64 0, metadata !9033, metadata !8330), !dbg !9034, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7899, 5} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb56:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7888, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb57, $bb58;
$bb57:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7889, 17} true;
  assume {:verifier.code 0} true;
  call $p49 := __memcpy($p47, $add.ref(igbvf_gstrings_stats, 440), 32);
  assume $isExternal($p49);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7891, 3} true;
  assume {:verifier.code 0} true;
  goto $bb59;
$bb58:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7892, 17} true;
  assume {:verifier.code 0} true;
  call $i48 := __builtinx_memcpy.ref.ref.i64($p47, $add.ref(igbvf_gstrings_stats, 440), 32);
  assume {:verifier.code 0} true;
  goto $bb59;
$bb59:
  $i50 := $add.i64($i46, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7895, 9} true;
  assume {:verifier.code 0} true;
  $p51 := $add.ref($p2, $mul.ref($i50, 1));
  // WARNING: call void @llvm.dbg.value(metadata i8* %18, i64 0, metadata !9033, metadata !8330), !dbg !9034, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7899, 5} true;
  assume {:verifier.code 0} true;
  goto $bb60;
$bb60:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7888, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb61, $bb62;
$bb61:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7889, 17} true;
  assume {:verifier.code 0} true;
  call $p53 := __memcpy($p51, $add.ref(igbvf_gstrings_stats, 484), 32);
  assume $isExternal($p53);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7891, 3} true;
  assume {:verifier.code 0} true;
  goto $bb63;
$bb62:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7892, 17} true;
  assume {:verifier.code 0} true;
  call $i52 := __builtinx_memcpy.ref.ref.i64($p51, $add.ref(igbvf_gstrings_stats, 484), 32);
  assume {:verifier.code 0} true;
  goto $bb63;
$bb63:
  $i54 := $add.i64($i50, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7895, 9} true;
  assume {:verifier.code 0} true;
  $p55 := $add.ref($p2, $mul.ref($i54, 1));
  // WARNING: call void @llvm.dbg.value(metadata i8* %18, i64 0, metadata !9033, metadata !8330), !dbg !9034, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7899, 5} true;
  assume {:verifier.code 0} true;
  goto $bb64;
$bb64:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7888, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb65, $bb66;
$bb65:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7889, 17} true;
  assume {:verifier.code 0} true;
  call $p57 := __memcpy($p55, $add.ref(igbvf_gstrings_stats, 528), 32);
  assume $isExternal($p57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7891, 3} true;
  assume {:verifier.code 0} true;
  goto $bb67;
$bb66:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7892, 17} true;
  assume {:verifier.code 0} true;
  call $i56 := __builtinx_memcpy.ref.ref.i64($p55, $add.ref(igbvf_gstrings_stats, 528), 32);
  assume {:verifier.code 0} true;
  goto $bb67;
$bb67:
  // WARNING: call void @llvm.dbg.value(metadata i8* %18, i64 0, metadata !9033, metadata !8330), !dbg !9034, !verifier.code !8332
  assume {:verifier.code 0} true;
  goto $bb19;
}
const igbvf_get_ethtool_stats: ref;
axiom (igbvf_get_ethtool_stats == $sub.ref(0, 171331));
procedure  igbvf_get_ethtool_stats($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $i14: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i31: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i64;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $i48: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i64;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $i65: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i64;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $i86: i64;
  var $i87: i64;
  var $i82: i64;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i64;
  var $p100: ref;
  var $i101: i64;
  var $p102: ref;
  var $i103: i64;
  var $i104: i64;
  var $i99: i64;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i64;
  var $p117: ref;
  var $i118: i64;
  var $p119: ref;
  var $i120: i64;
  var $i121: i64;
  var $i116: i64;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i64;
  var $p134: ref;
  var $i135: i64;
  var $p136: ref;
  var $i137: i64;
  var $i138: i64;
  var $i133: i64;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $p146: ref;
  var $i147: i32;
  var $i148: i32;
  var $i149: i64;
  var $p151: ref;
  var $i152: i64;
  var $p153: ref;
  var $i154: i64;
  var $i155: i64;
  var $i150: i64;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $p163: ref;
  var $i164: i32;
  var $i165: i32;
  var $i166: i64;
  var $p168: ref;
  var $i169: i64;
  var $p170: ref;
  var $i171: i64;
  var $i172: i64;
  var $i167: i64;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i32;
  var $p180: ref;
  var $i181: i32;
  var $i182: i32;
  var $i183: i64;
  var $p185: ref;
  var $i186: i64;
  var $p187: ref;
  var $i188: i64;
  var $i189: i64;
  var $i184: i64;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i32;
  var $p197: ref;
  var $i198: i32;
  var $i199: i32;
  var $i200: i64;
  var $p202: ref;
  var $i203: i64;
  var $p204: ref;
  var $i205: i64;
  var $i206: i64;
  var $i201: i64;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $i213: i32;
  var $p214: ref;
  var $i215: i32;
  var $i216: i32;
  var $i217: i64;
  var $p219: ref;
  var $i220: i64;
  var $p221: ref;
  var $i222: i64;
  var $i223: i64;
  var $i218: i64;
  var $p224: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7827, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7828, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7829, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_update_stats($p4);
  // WARNING: call void @igbvf_update_stats(%struct.igbvf_adapter* %5), !dbg !8344, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7838, 7} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7839, 5} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 7} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 23} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p5, 1888);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 7} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 23} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p7, 1776);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb3, $bb4;
$bb3:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i64($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i64($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 88} true;
  assume {:verifier.code 0} true;
  $i13 := $sub.i64($i10, $i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i14 := $i13;
  goto $bb5;
$bb4:
  assume !((1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $p15 := $bitcast.ref.ref($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i32($M.0, $p17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 123} true;
  assume {:verifier.code 0} true;
  $i19 := $sub.i32($i16, $i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 104} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i32.i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i14 := $i20;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p2, $i14);
  // WARNING: store i64 %25, i64* %2, align 8, !dbg !8370, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7839, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 7} true;
  assume {:verifier.code 0} true;
  $p21 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 23} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p21, 1896);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 7} true;
  assume {:verifier.code 0} true;
  $p23 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 23} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p23, 1784);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb8, $bb9;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7844, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb8:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $p32 := $bitcast.ref.ref($p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i64($M.0, $p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $p34 := $bitcast.ref.ref($p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i64($M.0, $p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 88} true;
  assume {:verifier.code 0} true;
  $i36 := $sub.i64($i33, $i35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i31 := $i36;
  goto $bb10;
$bb9:
  assume !((1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $p25 := $bitcast.ref.ref($p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i32($M.0, $p25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $p27 := $bitcast.ref.ref($p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i32($M.0, $p27);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 123} true;
  assume {:verifier.code 0} true;
  $i29 := $sub.i32($i26, $i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 104} true;
  assume {:verifier.code 0} true;
  $i30 := $zext.i32.i64($i29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i31 := $i30;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 10} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p2, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p37, $i31);
  // WARNING: store i64 %47, i64* %48, align 8, !dbg !8370, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7839, 5} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 7} true;
  assume {:verifier.code 0} true;
  $p38 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 23} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p38, 1904);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 7} true;
  assume {:verifier.code 0} true;
  $p40 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 23} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($p40, 1792);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb12, $bb13;
$bb12:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $p49 := $bitcast.ref.ref($p39);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $i50 := $load.i64($M.0, $p49);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $p51 := $bitcast.ref.ref($p41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $i52 := $load.i64($M.0, $p51);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 88} true;
  assume {:verifier.code 0} true;
  $i53 := $sub.i64($i50, $i52);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i48 := $i53;
  goto $bb14;
$bb13:
  assume !((1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $p42 := $bitcast.ref.ref($p39);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $i43 := $load.i32($M.0, $p42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $p44 := $bitcast.ref.ref($p41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $i45 := $load.i32($M.0, $p44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 123} true;
  assume {:verifier.code 0} true;
  $i46 := $sub.i32($i43, $i45);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 104} true;
  assume {:verifier.code 0} true;
  $i47 := $zext.i32.i64($i46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i48 := $i47;
  goto $bb14;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 10} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($p2, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p54, $i48);
  // WARNING: store i64 %68, i64* %69, align 8, !dbg !8370, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7839, 5} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 7} true;
  assume {:verifier.code 0} true;
  $p55 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 23} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($p55, 1912);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 7} true;
  assume {:verifier.code 0} true;
  $p57 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 23} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($p57, 1800);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb16, $bb17;
$bb16:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $p66 := $bitcast.ref.ref($p56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $i67 := $load.i64($M.0, $p66);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $p68 := $bitcast.ref.ref($p58);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $i69 := $load.i64($M.0, $p68);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 88} true;
  assume {:verifier.code 0} true;
  $i70 := $sub.i64($i67, $i69);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i65 := $i70;
  goto $bb18;
$bb17:
  assume !((1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $p59 := $bitcast.ref.ref($p56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $i60 := $load.i32($M.0, $p59);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $p61 := $bitcast.ref.ref($p58);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $i62 := $load.i32($M.0, $p61);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 123} true;
  assume {:verifier.code 0} true;
  $i63 := $sub.i32($i60, $i62);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 104} true;
  assume {:verifier.code 0} true;
  $i64 := $zext.i32.i64($i63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i65 := $i64;
  goto $bb18;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 10} true;
  assume {:verifier.code 0} true;
  $p71 := $add.ref($p2, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p71, $i65);
  // WARNING: store i64 %89, i64* %90, align 8, !dbg !8370, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7839, 5} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 7} true;
  assume {:verifier.code 0} true;
  $p72 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 23} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($p72, 1920);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 7} true;
  assume {:verifier.code 0} true;
  $p74 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 23} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($p74, 1808);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb20, $bb21;
$bb20:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $p83 := $bitcast.ref.ref($p73);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $i84 := $load.i64($M.0, $p83);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $p85 := $bitcast.ref.ref($p75);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $i86 := $load.i64($M.0, $p85);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 88} true;
  assume {:verifier.code 0} true;
  $i87 := $sub.i64($i84, $i86);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i82 := $i87;
  goto $bb22;
$bb21:
  assume !((1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $p76 := $bitcast.ref.ref($p73);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $i77 := $load.i32($M.0, $p76);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $p78 := $bitcast.ref.ref($p75);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $i79 := $load.i32($M.0, $p78);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 123} true;
  assume {:verifier.code 0} true;
  $i80 := $sub.i32($i77, $i79);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 104} true;
  assume {:verifier.code 0} true;
  $i81 := $zext.i32.i64($i80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i82 := $i81;
  goto $bb22;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 10} true;
  assume {:verifier.code 0} true;
  $p88 := $add.ref($p2, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p88, $i82);
  // WARNING: store i64 %110, i64* %111, align 8, !dbg !8370, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7839, 5} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 7} true;
  assume {:verifier.code 0} true;
  $p89 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 23} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($p89, 1944);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 7} true;
  assume {:verifier.code 0} true;
  $p91 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 23} true;
  assume {:verifier.code 0} true;
  $p92 := $add.ref($p91, 1832);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb24, $bb25;
$bb24:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $p100 := $bitcast.ref.ref($p90);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $i101 := $load.i64($M.0, $p100);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $p102 := $bitcast.ref.ref($p92);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $i103 := $load.i64($M.0, $p102);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 88} true;
  assume {:verifier.code 0} true;
  $i104 := $sub.i64($i101, $i103);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i99 := $i104;
  goto $bb26;
$bb25:
  assume !((1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $p93 := $bitcast.ref.ref($p90);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $i94 := $load.i32($M.0, $p93);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $p95 := $bitcast.ref.ref($p92);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $i96 := $load.i32($M.0, $p95);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 123} true;
  assume {:verifier.code 0} true;
  $i97 := $sub.i32($i94, $i96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 104} true;
  assume {:verifier.code 0} true;
  $i98 := $zext.i32.i64($i97);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i99 := $i98;
  goto $bb26;
$bb26:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 10} true;
  assume {:verifier.code 0} true;
  $p105 := $add.ref($p2, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p105, $i99);
  // WARNING: store i64 %131, i64* %132, align 8, !dbg !8370, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7839, 5} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 7} true;
  assume {:verifier.code 0} true;
  $p106 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 23} true;
  assume {:verifier.code 0} true;
  $p107 := $add.ref($p106, 1952);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 7} true;
  assume {:verifier.code 0} true;
  $p108 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 23} true;
  assume {:verifier.code 0} true;
  $p109 := $add.ref($p108, 1840);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb28, $bb29;
$bb28:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $p117 := $bitcast.ref.ref($p107);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $i118 := $load.i64($M.0, $p117);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $p119 := $bitcast.ref.ref($p109);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $i120 := $load.i64($M.0, $p119);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 88} true;
  assume {:verifier.code 0} true;
  $i121 := $sub.i64($i118, $i120);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i116 := $i121;
  goto $bb30;
$bb29:
  assume !((1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $p110 := $bitcast.ref.ref($p107);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $i111 := $load.i32($M.0, $p110);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $p112 := $bitcast.ref.ref($p109);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $i113 := $load.i32($M.0, $p112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 123} true;
  assume {:verifier.code 0} true;
  $i114 := $sub.i32($i111, $i113);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 104} true;
  assume {:verifier.code 0} true;
  $i115 := $zext.i32.i64($i114);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i116 := $i115;
  goto $bb30;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 10} true;
  assume {:verifier.code 0} true;
  $p122 := $add.ref($p2, 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p122, $i116);
  // WARNING: store i64 %152, i64* %153, align 8, !dbg !8370, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7839, 5} true;
  assume {:verifier.code 0} true;
  goto $bb31;
$bb31:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 7} true;
  assume {:verifier.code 0} true;
  $p123 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 23} true;
  assume {:verifier.code 0} true;
  $p124 := $add.ref($p123, 1096);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 7} true;
  assume {:verifier.code 0} true;
  $p125 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 23} true;
  assume {:verifier.code 0} true;
  $p126 := $add.ref($p125, 1960);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb32, $bb33;
$bb32:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $p134 := $bitcast.ref.ref($p124);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $i135 := $load.i64($M.0, $p134);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $p136 := $bitcast.ref.ref($p126);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $i137 := $load.i64($M.0, $p136);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 88} true;
  assume {:verifier.code 0} true;
  $i138 := $sub.i64($i135, $i137);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i133 := $i138;
  goto $bb34;
$bb33:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $p127 := $bitcast.ref.ref($p124);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $i128 := $load.i32($M.0, $p127);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $p129 := $bitcast.ref.ref($p126);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $i130 := $load.i32($M.0, $p129);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 123} true;
  assume {:verifier.code 0} true;
  $i131 := $sub.i32($i128, $i130);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 104} true;
  assume {:verifier.code 0} true;
  $i132 := $zext.i32.i64($i131);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i133 := $i132;
  goto $bb34;
$bb34:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 10} true;
  assume {:verifier.code 0} true;
  $p139 := $add.ref($p2, 56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p139, $i133);
  // WARNING: store i64 %173, i64* %174, align 8, !dbg !8370, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7839, 5} true;
  assume {:verifier.code 0} true;
  goto $bb35;
$bb35:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 7} true;
  assume {:verifier.code 0} true;
  $p140 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 23} true;
  assume {:verifier.code 0} true;
  $p141 := $add.ref($p140, 1904);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 7} true;
  assume {:verifier.code 0} true;
  $p142 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 23} true;
  assume {:verifier.code 0} true;
  $p143 := $add.ref($p142, 1792);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb36, $bb37;
$bb36:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $p151 := $bitcast.ref.ref($p141);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $i152 := $load.i64($M.0, $p151);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $p153 := $bitcast.ref.ref($p143);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $i154 := $load.i64($M.0, $p153);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 88} true;
  assume {:verifier.code 0} true;
  $i155 := $sub.i64($i152, $i154);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i150 := $i155;
  goto $bb38;
$bb37:
  assume !((1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $p144 := $bitcast.ref.ref($p141);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $i145 := $load.i32($M.0, $p144);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $p146 := $bitcast.ref.ref($p143);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $i147 := $load.i32($M.0, $p146);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 123} true;
  assume {:verifier.code 0} true;
  $i148 := $sub.i32($i145, $i147);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 104} true;
  assume {:verifier.code 0} true;
  $i149 := $zext.i32.i64($i148);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i150 := $i149;
  goto $bb38;
$bb38:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 10} true;
  assume {:verifier.code 0} true;
  $p156 := $add.ref($p2, 64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p156, $i150);
  // WARNING: store i64 %194, i64* %195, align 8, !dbg !8370, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7839, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb39:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 7} true;
  assume {:verifier.code 0} true;
  $p157 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 23} true;
  assume {:verifier.code 0} true;
  $p158 := $add.ref($p157, 1176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 7} true;
  assume {:verifier.code 0} true;
  $p159 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 23} true;
  assume {:verifier.code 0} true;
  $p160 := $add.ref($p159, 1960);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb40, $bb41;
$bb40:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $p168 := $bitcast.ref.ref($p158);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $i169 := $load.i64($M.0, $p168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $p170 := $bitcast.ref.ref($p160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $i171 := $load.i64($M.0, $p170);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 88} true;
  assume {:verifier.code 0} true;
  $i172 := $sub.i64($i169, $i171);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i167 := $i172;
  goto $bb42;
$bb41:
  assume !((1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $p161 := $bitcast.ref.ref($p158);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $i162 := $load.i32($M.0, $p161);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $p163 := $bitcast.ref.ref($p160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $i164 := $load.i32($M.0, $p163);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 123} true;
  assume {:verifier.code 0} true;
  $i165 := $sub.i32($i162, $i164);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 104} true;
  assume {:verifier.code 0} true;
  $i166 := $zext.i32.i64($i165);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i167 := $i166;
  goto $bb42;
$bb42:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 10} true;
  assume {:verifier.code 0} true;
  $p173 := $add.ref($p2, 72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p173, $i167);
  // WARNING: store i64 %215, i64* %216, align 8, !dbg !8370, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7839, 5} true;
  assume {:verifier.code 0} true;
  goto $bb43;
$bb43:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 7} true;
  assume {:verifier.code 0} true;
  $p174 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 23} true;
  assume {:verifier.code 0} true;
  $p175 := $add.ref($p174, 1168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 7} true;
  assume {:verifier.code 0} true;
  $p176 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 23} true;
  assume {:verifier.code 0} true;
  $p177 := $add.ref($p176, 1960);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb44, $bb45;
$bb44:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $p185 := $bitcast.ref.ref($p175);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $i186 := $load.i64($M.0, $p185);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $p187 := $bitcast.ref.ref($p177);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $i188 := $load.i64($M.0, $p187);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 88} true;
  assume {:verifier.code 0} true;
  $i189 := $sub.i64($i186, $i188);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i184 := $i189;
  goto $bb46;
$bb45:
  assume !((1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $p178 := $bitcast.ref.ref($p175);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $i179 := $load.i32($M.0, $p178);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $p180 := $bitcast.ref.ref($p177);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $i181 := $load.i32($M.0, $p180);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 123} true;
  assume {:verifier.code 0} true;
  $i182 := $sub.i32($i179, $i181);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 104} true;
  assume {:verifier.code 0} true;
  $i183 := $zext.i32.i64($i182);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i184 := $i183;
  goto $bb46;
$bb46:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 10} true;
  assume {:verifier.code 0} true;
  $p190 := $add.ref($p2, 80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p190, $i184);
  // WARNING: store i64 %236, i64* %237, align 8, !dbg !8370, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7839, 5} true;
  assume {:verifier.code 0} true;
  goto $bb47;
$bb47:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 7} true;
  assume {:verifier.code 0} true;
  $p191 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 23} true;
  assume {:verifier.code 0} true;
  $p192 := $add.ref($p191, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 7} true;
  assume {:verifier.code 0} true;
  $p193 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 23} true;
  assume {:verifier.code 0} true;
  $p194 := $add.ref($p193, 1960);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb48, $bb49;
$bb48:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $p202 := $bitcast.ref.ref($p192);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $i203 := $load.i64($M.0, $p202);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $p204 := $bitcast.ref.ref($p194);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $i205 := $load.i64($M.0, $p204);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 88} true;
  assume {:verifier.code 0} true;
  $i206 := $sub.i64($i203, $i205);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i201 := $i206;
  goto $bb50;
$bb49:
  assume !((1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $p195 := $bitcast.ref.ref($p192);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $i196 := $load.i32($M.0, $p195);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $p197 := $bitcast.ref.ref($p194);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $i198 := $load.i32($M.0, $p197);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 123} true;
  assume {:verifier.code 0} true;
  $i199 := $sub.i32($i196, $i198);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 104} true;
  assume {:verifier.code 0} true;
  $i200 := $zext.i32.i64($i199);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i201 := $i200;
  goto $bb50;
$bb50:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 10} true;
  assume {:verifier.code 0} true;
  $p207 := $add.ref($p2, 88);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p207, $i201);
  // WARNING: store i64 %257, i64* %258, align 8, !dbg !8370, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7839, 5} true;
  assume {:verifier.code 0} true;
  goto $bb51;
$bb51:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 7} true;
  assume {:verifier.code 0} true;
  $p208 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7833, 23} true;
  assume {:verifier.code 0} true;
  $p209 := $add.ref($p208, 1192);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 7} true;
  assume {:verifier.code 0} true;
  $p210 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7834, 23} true;
  assume {:verifier.code 0} true;
  $p211 := $add.ref($p210, 1960);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb52, $bb53;
$bb52:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $p219 := $bitcast.ref.ref($p209);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 76} true;
  assume {:verifier.code 0} true;
  $i220 := $load.i64($M.0, $p219);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $p221 := $bitcast.ref.ref($p211);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 90} true;
  assume {:verifier.code 0} true;
  $i222 := $load.i64($M.0, $p221);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 88} true;
  assume {:verifier.code 0} true;
  $i223 := $sub.i64($i220, $i222);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i218 := $i223;
  goto $bb54;
$bb53:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $p212 := $bitcast.ref.ref($p209);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 111} true;
  assume {:verifier.code 0} true;
  $i213 := $load.i32($M.0, $p212);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $p214 := $bitcast.ref.ref($p211);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 125} true;
  assume {:verifier.code 0} true;
  $i215 := $load.i32($M.0, $p214);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 123} true;
  assume {:verifier.code 0} true;
  $i216 := $sub.i32($i213, $i215);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 104} true;
  assume {:verifier.code 0} true;
  $i217 := $zext.i32.i64($i216);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  $i218 := $i217;
  goto $bb54;
$bb54:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 33} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 10} true;
  assume {:verifier.code 0} true;
  $p224 := $add.ref($p2, 96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7835, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p224, $i218);
  // WARNING: store i64 %278, i64* %279, align 8, !dbg !8370, !verifier.code !8332
  assume {:verifier.code 0} true;
  goto $bb7;
}
const igbvf_get_sset_count: ref;
axiom (igbvf_get_sset_count == $sub.ref(0, 172363));
procedure  igbvf_get_sset_count($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !9118, metadata !8330), !dbg !9119, !verifier.code !8332
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  $i2 := $slt.i32($i1, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i2 == 1);
  assume {:verifier.code 0} true;
  $i4 := $eq.i32($i1, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb7, $bb8;
$bb3:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i1, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7856, 3} true;
  assume {:verifier.code 0} true;
  $i5 := 13;
  goto $bb9;
$bb5:
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  goto $bb10;
$bb7:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7854, 3} true;
  assume {:verifier.code 0} true;
  $i5 := 1;
  goto $bb9;
$bb8:
  assume {:verifier.code 0} true;
  assume !(($i4 == 1));
  goto $bb6;
$bb9:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7861, 1} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7858, 3} true;
  assume {:verifier.code 0} true;
  $i5 := $sub.i32(0, 22);
  goto $bb9;
}
const netdev_priv: ref;
axiom (netdev_priv == $sub.ref(0, 173395));
procedure  netdev_priv($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7301, 11} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7301, 23} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p1, 3264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7301, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const igbvf_update_stats: ref;
axiom (igbvf_update_stats == $sub.ref(0, 174427));
procedure  igbvf_update_stats($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i64;
  var $i97: i64;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i64;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $i125: i64;
  var $i126: i64;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $i140: i64;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i64;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i64;
  var $i154: i64;
  var $i155: i64;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $p167: ref;
  var $i168: i64;
  var $i169: i64;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i64;
  var $i177: i64;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i64;
  var $i183: i64;
  var $i184: i64;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i32;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $p196: ref;
  var $i197: i64;
  var $i198: i64;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i64;
  var $i206: i64;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $i211: i64;
  var $i212: i64;
  var $i213: i64;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i32;
  var $p220: ref;
  var $p221: ref;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $p225: ref;
  var $i226: i64;
  var $i227: i64;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $i234: i64;
  var $i235: i64;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $i240: i64;
  var $i241: i64;
  var $i242: i64;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $i248: i32;
  var $p249: ref;
  var $p250: ref;
  var $i251: i32;
  var $i252: i1;
  var $p253: ref;
  var $p254: ref;
  var $i255: i64;
  var $i256: i64;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $i263: i64;
  var $i264: i64;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $i269: i64;
  var $i270: i64;
  var $i271: i64;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $i276: i64;
  var $p277: ref;
  var $p278: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11680, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11681, 19} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11681, 19} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11682, 31} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 950);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11682, 31} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i16($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11682, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i16.i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11682, 42} true;
  assume {:verifier.code 0} true;
  $i7 := $eq.i32($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11682, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11683, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11792, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11687, 77} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11687, 9} true;
  assume {:verifier.code 0} true;
  call $i9 := constant_test_bit(1, $p8);
  // WARNING: %13 = call i32 @constant_test_bit(i64 1, i64* %12), !dbg !8350, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11688, 11} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11688, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11689, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb6:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11693, 13} true;
  assume {:verifier.code 0} true;
  call $i11 := pci_channel_offline($p3);
  // WARNING: %18 = call i32 @pci_channel_offline(%struct.pci_dev* %4), !dbg !8358, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i32($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11694, 15} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i32($i11, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11694, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11695, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb9:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  $p13 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11699, 48} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11699, 56} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p14, 3856);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11699, 13} true;
  assume {:verifier.code 0} true;
  call $i16 := readl($p15);
  // WARNING: %26 = call i32 @readl(i8* %25), !dbg !8368, !verifier.code !8334
  call {:cexpr "tmp___1"} boogie_si_record_i32($i16);
  // WARNING: call void @llvm.dbg.value(metadata i32 %26, i64 0, metadata !9176, metadata !8330), !dbg !9177, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11701, 16} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p0, 1736);
  $p18 := $add.ref($add.ref($p0, 1736), 72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11701, 22} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i32($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11701, 32} true;
  assume {:verifier.code 0} true;
  $i20 := $ugt.i32($i19, $i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11701, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i20 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11702, 36} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p0, 1736);
  $p22 := $add.ref($add.ref($p0, 1736), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11702, 42} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i64($M.0, $p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11702, 47} true;
  assume {:verifier.code 0} true;
  $i24 := $add.i64($i23, 4294967296);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11702, 14} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p0, 1736);
  $p26 := $add.ref($add.ref($p0, 1736), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11702, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p26, $i24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11703, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume !(($i20 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11706, 12} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p0, 1736);
  $p28 := $add.ref($add.ref($p0, 1736), 72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11706, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p28, $i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11707, 34} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p0, 1736);
  $p30 := $add.ref($add.ref($p0, 1736), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11707, 40} true;
  assume {:verifier.code 0} true;
  $i31 := $load.i64($M.0, $p30);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11707, 45} true;
  assume {:verifier.code 0} true;
  $i32 := $and.i64($i31, $sub.i64(0, 4294967296));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11707, 12} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p0, 1736);
  $p34 := $add.ref($add.ref($p0, 1736), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11707, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p34, $i32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11708, 34} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($p0, 1736);
  $p36 := $add.ref($add.ref($p0, 1736), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11708, 40} true;
  assume {:verifier.code 0} true;
  $i37 := $load.i64($M.0, $p36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11708, 47} true;
  assume {:verifier.code 0} true;
  $i38 := $zext.i32.i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11708, 45} true;
  assume {:verifier.code 0} true;
  $i39 := $or.i64($i37, $i38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11708, 12} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p0, 1736);
  $p41 := $add.ref($add.ref($p0, 1736), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11708, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p41, $i39);
  $p42 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11709, 48} true;
  assume {:verifier.code 0} true;
  $p43 := $load.ref($M.0, $p42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11709, 56} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($p43, 3864);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11709, 13} true;
  assume {:verifier.code 0} true;
  call $i45 := readl($p44);
  // WARNING: %58 = call i32 @readl(i8* %57), !dbg !8400, !verifier.code !8334
  call {:cexpr "tmp___2"} boogie_si_record_i32($i45);
  // WARNING: call void @llvm.dbg.value(metadata i32 %58, i64 0, metadata !9208, metadata !8330), !dbg !9209, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11711, 16} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p0, 1736);
  $p47 := $add.ref($add.ref($p0, 1736), 80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11711, 22} true;
  assume {:verifier.code 0} true;
  $i48 := $load.i32($M.0, $p47);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11711, 32} true;
  assume {:verifier.code 0} true;
  $i49 := $ugt.i32($i48, $i45);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11711, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i49 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11712, 36} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($p0, 1736);
  $p51 := $add.ref($add.ref($p0, 1736), 128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11712, 42} true;
  assume {:verifier.code 0} true;
  $i52 := $load.i64($M.0, $p51);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11712, 47} true;
  assume {:verifier.code 0} true;
  $i53 := $add.i64($i52, 4294967296);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11712, 14} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($p0, 1736);
  $p55 := $add.ref($add.ref($p0, 1736), 128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11712, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p55, $i53);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11713, 3} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i49 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11716, 12} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($p0, 1736);
  $p57 := $add.ref($add.ref($p0, 1736), 80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11716, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p57, $i45);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11717, 34} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($p0, 1736);
  $p59 := $add.ref($add.ref($p0, 1736), 128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11717, 40} true;
  assume {:verifier.code 0} true;
  $i60 := $load.i64($M.0, $p59);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11717, 45} true;
  assume {:verifier.code 0} true;
  $i61 := $and.i64($i60, $sub.i64(0, 4294967296));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11717, 12} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($p0, 1736);
  $p63 := $add.ref($add.ref($p0, 1736), 128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11717, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p63, $i61);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11718, 34} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($p0, 1736);
  $p65 := $add.ref($add.ref($p0, 1736), 128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11718, 40} true;
  assume {:verifier.code 0} true;
  $i66 := $load.i64($M.0, $p65);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11718, 47} true;
  assume {:verifier.code 0} true;
  $i67 := $zext.i32.i64($i45);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11718, 45} true;
  assume {:verifier.code 0} true;
  $i68 := $or.i64($i66, $i67);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11718, 12} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($p0, 1736);
  $p70 := $add.ref($add.ref($p0, 1736), 128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11718, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p70, $i68);
  $p71 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11719, 48} true;
  assume {:verifier.code 0} true;
  $p72 := $load.ref($M.0, $p71);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11719, 56} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($p72, 3860);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11719, 13} true;
  assume {:verifier.code 0} true;
  call $i74 := readl($p73);
  // WARNING: %90 = call i32 @readl(i8* %89), !dbg !8432, !verifier.code !8334
  call {:cexpr "tmp___3"} boogie_si_record_i32($i74);
  // WARNING: call void @llvm.dbg.value(metadata i32 %90, i64 0, metadata !9240, metadata !8330), !dbg !9241, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11721, 16} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($p0, 1736);
  $p76 := $add.ref($add.ref($p0, 1736), 76);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11721, 22} true;
  assume {:verifier.code 0} true;
  $i77 := $load.i32($M.0, $p76);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11721, 32} true;
  assume {:verifier.code 0} true;
  $i78 := $ugt.i32($i77, $i74);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11721, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i78} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i78 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11722, 36} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($p0, 1736);
  $p80 := $add.ref($add.ref($p0, 1736), 120);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11722, 42} true;
  assume {:verifier.code 0} true;
  $i81 := $load.i64($M.0, $p80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11722, 47} true;
  assume {:verifier.code 0} true;
  $i82 := $add.i64($i81, 4294967296);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11722, 14} true;
  assume {:verifier.code 0} true;
  $p83 := $add.ref($p0, 1736);
  $p84 := $add.ref($add.ref($p0, 1736), 120);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11722, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p84, $i82);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11723, 3} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb18:
  assume !(($i78 == 1));
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11726, 12} true;
  assume {:verifier.code 0} true;
  $p85 := $add.ref($p0, 1736);
  $p86 := $add.ref($add.ref($p0, 1736), 76);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11726, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p86, $i74);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11727, 34} true;
  assume {:verifier.code 0} true;
  $p87 := $add.ref($p0, 1736);
  $p88 := $add.ref($add.ref($p0, 1736), 120);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11727, 40} true;
  assume {:verifier.code 0} true;
  $i89 := $load.i64($M.0, $p88);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11727, 45} true;
  assume {:verifier.code 0} true;
  $i90 := $and.i64($i89, $sub.i64(0, 4294967296));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11727, 12} true;
  assume {:verifier.code 0} true;
  $p91 := $add.ref($p0, 1736);
  $p92 := $add.ref($add.ref($p0, 1736), 120);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11727, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p92, $i90);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11728, 34} true;
  assume {:verifier.code 0} true;
  $p93 := $add.ref($p0, 1736);
  $p94 := $add.ref($add.ref($p0, 1736), 120);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11728, 40} true;
  assume {:verifier.code 0} true;
  $i95 := $load.i64($M.0, $p94);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11728, 47} true;
  assume {:verifier.code 0} true;
  $i96 := $zext.i32.i64($i74);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11728, 45} true;
  assume {:verifier.code 0} true;
  $i97 := $or.i64($i95, $i96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11728, 12} true;
  assume {:verifier.code 0} true;
  $p98 := $add.ref($p0, 1736);
  $p99 := $add.ref($add.ref($p0, 1736), 120);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11728, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p99, $i97);
  $p100 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11729, 48} true;
  assume {:verifier.code 0} true;
  $p101 := $load.ref($M.0, $p100);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11729, 56} true;
  assume {:verifier.code 0} true;
  $p102 := $add.ref($p101, 3892);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11729, 13} true;
  assume {:verifier.code 0} true;
  call $i103 := readl($p102);
  // WARNING: %122 = call i32 @readl(i8* %121), !dbg !8464, !verifier.code !8334
  call {:cexpr "tmp___4"} boogie_si_record_i32($i103);
  // WARNING: call void @llvm.dbg.value(metadata i32 %122, i64 0, metadata !9272, metadata !8330), !dbg !9273, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11731, 16} true;
  assume {:verifier.code 0} true;
  $p104 := $add.ref($p0, 1736);
  $p105 := $add.ref($add.ref($p0, 1736), 84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11731, 22} true;
  assume {:verifier.code 0} true;
  $i106 := $load.i32($M.0, $p105);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11731, 32} true;
  assume {:verifier.code 0} true;
  $i107 := $ugt.i32($i106, $i103);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11731, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i107} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i107 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11732, 36} true;
  assume {:verifier.code 0} true;
  $p108 := $add.ref($p0, 1736);
  $p109 := $add.ref($add.ref($p0, 1736), 136);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11732, 42} true;
  assume {:verifier.code 0} true;
  $i110 := $load.i64($M.0, $p109);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11732, 47} true;
  assume {:verifier.code 0} true;
  $i111 := $add.i64($i110, 4294967296);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11732, 14} true;
  assume {:verifier.code 0} true;
  $p112 := $add.ref($p0, 1736);
  $p113 := $add.ref($add.ref($p0, 1736), 136);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11732, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p113, $i111);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11733, 3} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb21:
  assume !(($i107 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11736, 12} true;
  assume {:verifier.code 0} true;
  $p114 := $add.ref($p0, 1736);
  $p115 := $add.ref($add.ref($p0, 1736), 84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11736, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p115, $i103);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11737, 34} true;
  assume {:verifier.code 0} true;
  $p116 := $add.ref($p0, 1736);
  $p117 := $add.ref($add.ref($p0, 1736), 136);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11737, 40} true;
  assume {:verifier.code 0} true;
  $i118 := $load.i64($M.0, $p117);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11737, 45} true;
  assume {:verifier.code 0} true;
  $i119 := $and.i64($i118, $sub.i64(0, 4294967296));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11737, 12} true;
  assume {:verifier.code 0} true;
  $p120 := $add.ref($p0, 1736);
  $p121 := $add.ref($add.ref($p0, 1736), 136);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11737, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p121, $i119);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11738, 34} true;
  assume {:verifier.code 0} true;
  $p122 := $add.ref($p0, 1736);
  $p123 := $add.ref($add.ref($p0, 1736), 136);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11738, 40} true;
  assume {:verifier.code 0} true;
  $i124 := $load.i64($M.0, $p123);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11738, 47} true;
  assume {:verifier.code 0} true;
  $i125 := $zext.i32.i64($i103);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11738, 45} true;
  assume {:verifier.code 0} true;
  $i126 := $or.i64($i124, $i125);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11738, 12} true;
  assume {:verifier.code 0} true;
  $p127 := $add.ref($p0, 1736);
  $p128 := $add.ref($add.ref($p0, 1736), 136);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11738, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p128, $i126);
  $p129 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11739, 48} true;
  assume {:verifier.code 0} true;
  $p130 := $load.ref($M.0, $p129);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11739, 56} true;
  assume {:verifier.code 0} true;
  $p131 := $add.ref($p130, 3900);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11739, 13} true;
  assume {:verifier.code 0} true;
  call $i132 := readl($p131);
  // WARNING: %154 = call i32 @readl(i8* %153), !dbg !8496, !verifier.code !8334
  call {:cexpr "tmp___5"} boogie_si_record_i32($i132);
  // WARNING: call void @llvm.dbg.value(metadata i32 %154, i64 0, metadata !9304, metadata !8330), !dbg !9305, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11741, 16} true;
  assume {:verifier.code 0} true;
  $p133 := $add.ref($p0, 1736);
  $p134 := $add.ref($add.ref($p0, 1736), 88);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11741, 22} true;
  assume {:verifier.code 0} true;
  $i135 := $load.i32($M.0, $p134);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11741, 32} true;
  assume {:verifier.code 0} true;
  $i136 := $ugt.i32($i135, $i132);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11741, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i136} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i136 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11742, 36} true;
  assume {:verifier.code 0} true;
  $p137 := $add.ref($p0, 1736);
  $p138 := $add.ref($add.ref($p0, 1736), 144);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11742, 42} true;
  assume {:verifier.code 0} true;
  $i139 := $load.i64($M.0, $p138);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11742, 47} true;
  assume {:verifier.code 0} true;
  $i140 := $add.i64($i139, 4294967296);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11742, 14} true;
  assume {:verifier.code 0} true;
  $p141 := $add.ref($p0, 1736);
  $p142 := $add.ref($add.ref($p0, 1736), 144);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11742, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p142, $i140);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11743, 3} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb24:
  assume !(($i136 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11746, 12} true;
  assume {:verifier.code 0} true;
  $p143 := $add.ref($p0, 1736);
  $p144 := $add.ref($add.ref($p0, 1736), 88);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11746, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p144, $i132);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11747, 34} true;
  assume {:verifier.code 0} true;
  $p145 := $add.ref($p0, 1736);
  $p146 := $add.ref($add.ref($p0, 1736), 144);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11747, 40} true;
  assume {:verifier.code 0} true;
  $i147 := $load.i64($M.0, $p146);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11747, 45} true;
  assume {:verifier.code 0} true;
  $i148 := $and.i64($i147, $sub.i64(0, 4294967296));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11747, 12} true;
  assume {:verifier.code 0} true;
  $p149 := $add.ref($p0, 1736);
  $p150 := $add.ref($add.ref($p0, 1736), 144);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11747, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p150, $i148);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11748, 34} true;
  assume {:verifier.code 0} true;
  $p151 := $add.ref($p0, 1736);
  $p152 := $add.ref($add.ref($p0, 1736), 144);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11748, 40} true;
  assume {:verifier.code 0} true;
  $i153 := $load.i64($M.0, $p152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11748, 47} true;
  assume {:verifier.code 0} true;
  $i154 := $zext.i32.i64($i132);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11748, 45} true;
  assume {:verifier.code 0} true;
  $i155 := $or.i64($i153, $i154);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11748, 12} true;
  assume {:verifier.code 0} true;
  $p156 := $add.ref($p0, 1736);
  $p157 := $add.ref($add.ref($p0, 1736), 144);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11748, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p157, $i155);
  $p158 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11749, 48} true;
  assume {:verifier.code 0} true;
  $p159 := $load.ref($M.0, $p158);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11749, 56} true;
  assume {:verifier.code 0} true;
  $p160 := $add.ref($p159, 3920);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11749, 13} true;
  assume {:verifier.code 0} true;
  call $i161 := readl($p160);
  // WARNING: %186 = call i32 @readl(i8* %185), !dbg !8528, !verifier.code !8334
  call {:cexpr "tmp___6"} boogie_si_record_i32($i161);
  // WARNING: call void @llvm.dbg.value(metadata i32 %186, i64 0, metadata !9336, metadata !8330), !dbg !9337, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11751, 16} true;
  assume {:verifier.code 0} true;
  $p162 := $add.ref($p0, 1736);
  $p163 := $add.ref($add.ref($p0, 1736), 92);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11751, 22} true;
  assume {:verifier.code 0} true;
  $i164 := $load.i32($M.0, $p163);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11751, 34} true;
  assume {:verifier.code 0} true;
  $i165 := $ugt.i32($i164, $i161);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11751, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i165} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i165 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11752, 38} true;
  assume {:verifier.code 0} true;
  $p166 := $add.ref($p0, 1736);
  $p167 := $add.ref($add.ref($p0, 1736), 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11752, 44} true;
  assume {:verifier.code 0} true;
  $i168 := $load.i64($M.0, $p167);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11752, 51} true;
  assume {:verifier.code 0} true;
  $i169 := $add.i64($i168, 4294967296);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11752, 14} true;
  assume {:verifier.code 0} true;
  $p170 := $add.ref($p0, 1736);
  $p171 := $add.ref($add.ref($p0, 1736), 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11752, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p171, $i169);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11753, 3} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume !(($i165 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11756, 12} true;
  assume {:verifier.code 0} true;
  $p172 := $add.ref($p0, 1736);
  $p173 := $add.ref($add.ref($p0, 1736), 92);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11756, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p173, $i161);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11757, 36} true;
  assume {:verifier.code 0} true;
  $p174 := $add.ref($p0, 1736);
  $p175 := $add.ref($add.ref($p0, 1736), 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11757, 42} true;
  assume {:verifier.code 0} true;
  $i176 := $load.i64($M.0, $p175);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11757, 49} true;
  assume {:verifier.code 0} true;
  $i177 := $and.i64($i176, $sub.i64(0, 4294967296));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11757, 12} true;
  assume {:verifier.code 0} true;
  $p178 := $add.ref($p0, 1736);
  $p179 := $add.ref($add.ref($p0, 1736), 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11757, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p179, $i177);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11758, 36} true;
  assume {:verifier.code 0} true;
  $p180 := $add.ref($p0, 1736);
  $p181 := $add.ref($add.ref($p0, 1736), 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11758, 42} true;
  assume {:verifier.code 0} true;
  $i182 := $load.i64($M.0, $p181);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11758, 51} true;
  assume {:verifier.code 0} true;
  $i183 := $zext.i32.i64($i161);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11758, 49} true;
  assume {:verifier.code 0} true;
  $i184 := $or.i64($i182, $i183);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11758, 12} true;
  assume {:verifier.code 0} true;
  $p185 := $add.ref($p0, 1736);
  $p186 := $add.ref($add.ref($p0, 1736), 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11758, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p186, $i184);
  $p187 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11759, 48} true;
  assume {:verifier.code 0} true;
  $p188 := $load.ref($M.0, $p187);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11759, 56} true;
  assume {:verifier.code 0} true;
  $p189 := $add.ref($p188, 3908);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11759, 13} true;
  assume {:verifier.code 0} true;
  call $i190 := readl($p189);
  // WARNING: %218 = call i32 @readl(i8* %217), !dbg !8560, !verifier.code !8334
  call {:cexpr "tmp___7"} boogie_si_record_i32($i190);
  // WARNING: call void @llvm.dbg.value(metadata i32 %218, i64 0, metadata !9368, metadata !8330), !dbg !9369, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11761, 16} true;
  assume {:verifier.code 0} true;
  $p191 := $add.ref($p0, 1736);
  $p192 := $add.ref($add.ref($p0, 1736), 96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11761, 22} true;
  assume {:verifier.code 0} true;
  $i193 := $load.i32($M.0, $p192);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11761, 34} true;
  assume {:verifier.code 0} true;
  $i194 := $ugt.i32($i193, $i190);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i194} true;
  goto $bb29, $bb30;
$bb29:
  assume ($i194 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11762, 38} true;
  assume {:verifier.code 0} true;
  $p195 := $add.ref($p0, 1736);
  $p196 := $add.ref($add.ref($p0, 1736), 160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11762, 44} true;
  assume {:verifier.code 0} true;
  $i197 := $load.i64($M.0, $p196);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11762, 51} true;
  assume {:verifier.code 0} true;
  $i198 := $add.i64($i197, 4294967296);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11762, 14} true;
  assume {:verifier.code 0} true;
  $p199 := $add.ref($p0, 1736);
  $p200 := $add.ref($add.ref($p0, 1736), 160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11762, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p200, $i198);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11763, 3} true;
  assume {:verifier.code 0} true;
  goto $bb31;
$bb30:
  assume !(($i194 == 1));
  assume {:verifier.code 0} true;
  goto $bb31;
$bb31:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11766, 12} true;
  assume {:verifier.code 0} true;
  $p201 := $add.ref($p0, 1736);
  $p202 := $add.ref($add.ref($p0, 1736), 96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11766, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p202, $i190);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11767, 36} true;
  assume {:verifier.code 0} true;
  $p203 := $add.ref($p0, 1736);
  $p204 := $add.ref($add.ref($p0, 1736), 160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11767, 42} true;
  assume {:verifier.code 0} true;
  $i205 := $load.i64($M.0, $p204);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11767, 49} true;
  assume {:verifier.code 0} true;
  $i206 := $and.i64($i205, $sub.i64(0, 4294967296));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11767, 12} true;
  assume {:verifier.code 0} true;
  $p207 := $add.ref($p0, 1736);
  $p208 := $add.ref($add.ref($p0, 1736), 160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11767, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p208, $i206);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11768, 36} true;
  assume {:verifier.code 0} true;
  $p209 := $add.ref($p0, 1736);
  $p210 := $add.ref($add.ref($p0, 1736), 160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11768, 42} true;
  assume {:verifier.code 0} true;
  $i211 := $load.i64($M.0, $p210);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11768, 51} true;
  assume {:verifier.code 0} true;
  $i212 := $zext.i32.i64($i190);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11768, 49} true;
  assume {:verifier.code 0} true;
  $i213 := $or.i64($i211, $i212);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11768, 12} true;
  assume {:verifier.code 0} true;
  $p214 := $add.ref($p0, 1736);
  $p215 := $add.ref($add.ref($p0, 1736), 160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11768, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p215, $i213);
  $p216 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11769, 48} true;
  assume {:verifier.code 0} true;
  $p217 := $load.ref($M.0, $p216);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11769, 56} true;
  assume {:verifier.code 0} true;
  $p218 := $add.ref($p217, 3912);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11769, 13} true;
  assume {:verifier.code 0} true;
  call $i219 := readl($p218);
  // WARNING: %250 = call i32 @readl(i8* %249), !dbg !8592, !verifier.code !8334
  call {:cexpr "tmp___8"} boogie_si_record_i32($i219);
  // WARNING: call void @llvm.dbg.value(metadata i32 %250, i64 0, metadata !9400, metadata !8330), !dbg !9401, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11771, 16} true;
  assume {:verifier.code 0} true;
  $p220 := $add.ref($p0, 1736);
  $p221 := $add.ref($add.ref($p0, 1736), 100);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11771, 22} true;
  assume {:verifier.code 0} true;
  $i222 := $load.i32($M.0, $p221);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11771, 34} true;
  assume {:verifier.code 0} true;
  $i223 := $ugt.i32($i222, $i219);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11771, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i223} true;
  goto $bb32, $bb33;
$bb32:
  assume ($i223 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11772, 38} true;
  assume {:verifier.code 0} true;
  $p224 := $add.ref($p0, 1736);
  $p225 := $add.ref($add.ref($p0, 1736), 168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11772, 44} true;
  assume {:verifier.code 0} true;
  $i226 := $load.i64($M.0, $p225);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11772, 51} true;
  assume {:verifier.code 0} true;
  $i227 := $add.i64($i226, 4294967296);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11772, 14} true;
  assume {:verifier.code 0} true;
  $p228 := $add.ref($p0, 1736);
  $p229 := $add.ref($add.ref($p0, 1736), 168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11772, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p229, $i227);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11773, 3} true;
  assume {:verifier.code 0} true;
  goto $bb34;
$bb33:
  assume !(($i223 == 1));
  assume {:verifier.code 0} true;
  goto $bb34;
$bb34:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11776, 12} true;
  assume {:verifier.code 0} true;
  $p230 := $add.ref($p0, 1736);
  $p231 := $add.ref($add.ref($p0, 1736), 100);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11776, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p231, $i219);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11777, 36} true;
  assume {:verifier.code 0} true;
  $p232 := $add.ref($p0, 1736);
  $p233 := $add.ref($add.ref($p0, 1736), 168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11777, 42} true;
  assume {:verifier.code 0} true;
  $i234 := $load.i64($M.0, $p233);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11777, 49} true;
  assume {:verifier.code 0} true;
  $i235 := $and.i64($i234, $sub.i64(0, 4294967296));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11777, 12} true;
  assume {:verifier.code 0} true;
  $p236 := $add.ref($p0, 1736);
  $p237 := $add.ref($add.ref($p0, 1736), 168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11777, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p237, $i235);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11778, 36} true;
  assume {:verifier.code 0} true;
  $p238 := $add.ref($p0, 1736);
  $p239 := $add.ref($add.ref($p0, 1736), 168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11778, 42} true;
  assume {:verifier.code 0} true;
  $i240 := $load.i64($M.0, $p239);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11778, 51} true;
  assume {:verifier.code 0} true;
  $i241 := $zext.i32.i64($i219);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11778, 49} true;
  assume {:verifier.code 0} true;
  $i242 := $or.i64($i240, $i241);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11778, 12} true;
  assume {:verifier.code 0} true;
  $p243 := $add.ref($p0, 1736);
  $p244 := $add.ref($add.ref($p0, 1736), 168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11778, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p244, $i242);
  $p245 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11779, 48} true;
  assume {:verifier.code 0} true;
  $p246 := $load.ref($M.0, $p245);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11779, 56} true;
  assume {:verifier.code 0} true;
  $p247 := $add.ref($p246, 3904);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11779, 13} true;
  assume {:verifier.code 0} true;
  call $i248 := readl($p247);
  // WARNING: %282 = call i32 @readl(i8* %281), !dbg !8624, !verifier.code !8334
  call {:cexpr "tmp___9"} boogie_si_record_i32($i248);
  // WARNING: call void @llvm.dbg.value(metadata i32 %282, i64 0, metadata !9432, metadata !8330), !dbg !9433, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11781, 16} true;
  assume {:verifier.code 0} true;
  $p249 := $add.ref($p0, 1736);
  $p250 := $add.ref($add.ref($p0, 1736), 104);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11781, 22} true;
  assume {:verifier.code 0} true;
  $i251 := $load.i32($M.0, $p250);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11781, 34} true;
  assume {:verifier.code 0} true;
  $i252 := $ugt.i32($i251, $i248);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11781, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i252} true;
  goto $bb35, $bb36;
$bb35:
  assume ($i252 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11782, 38} true;
  assume {:verifier.code 0} true;
  $p253 := $add.ref($p0, 1736);
  $p254 := $add.ref($add.ref($p0, 1736), 176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11782, 44} true;
  assume {:verifier.code 0} true;
  $i255 := $load.i64($M.0, $p254);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11782, 51} true;
  assume {:verifier.code 0} true;
  $i256 := $add.i64($i255, 4294967296);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11782, 14} true;
  assume {:verifier.code 0} true;
  $p257 := $add.ref($p0, 1736);
  $p258 := $add.ref($add.ref($p0, 1736), 176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11782, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p258, $i256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11783, 3} true;
  assume {:verifier.code 0} true;
  goto $bb37;
$bb36:
  assume !(($i252 == 1));
  assume {:verifier.code 0} true;
  goto $bb37;
$bb37:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11786, 12} true;
  assume {:verifier.code 0} true;
  $p259 := $add.ref($p0, 1736);
  $p260 := $add.ref($add.ref($p0, 1736), 104);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11786, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p260, $i248);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11787, 36} true;
  assume {:verifier.code 0} true;
  $p261 := $add.ref($p0, 1736);
  $p262 := $add.ref($add.ref($p0, 1736), 176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11787, 42} true;
  assume {:verifier.code 0} true;
  $i263 := $load.i64($M.0, $p262);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11787, 49} true;
  assume {:verifier.code 0} true;
  $i264 := $and.i64($i263, $sub.i64(0, 4294967296));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11787, 12} true;
  assume {:verifier.code 0} true;
  $p265 := $add.ref($p0, 1736);
  $p266 := $add.ref($add.ref($p0, 1736), 176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11787, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p266, $i264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11788, 36} true;
  assume {:verifier.code 0} true;
  $p267 := $add.ref($p0, 1736);
  $p268 := $add.ref($add.ref($p0, 1736), 176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11788, 42} true;
  assume {:verifier.code 0} true;
  $i269 := $load.i64($M.0, $p268);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11788, 51} true;
  assume {:verifier.code 0} true;
  $i270 := $zext.i32.i64($i248);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11788, 49} true;
  assume {:verifier.code 0} true;
  $i271 := $or.i64($i269, $i270);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11788, 12} true;
  assume {:verifier.code 0} true;
  $p272 := $add.ref($p0, 1736);
  $p273 := $add.ref($add.ref($p0, 1736), 176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11788, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p273, $i271);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11789, 59} true;
  assume {:verifier.code 0} true;
  $p274 := $add.ref($p0, 1736);
  $p275 := $add.ref($add.ref($p0, 1736), 144);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11789, 65} true;
  assume {:verifier.code 0} true;
  $i276 := $load.i64($M.0, $p275);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11789, 12} true;
  assume {:verifier.code 0} true;
  $p277 := $add.ref($p0, 1192);
  $p278 := $add.ref($add.ref($p0, 1192), 64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11789, 32} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p278, $i276);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11790, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const constant_test_bit: ref;
axiom (constant_test_bit == $sub.ref(0, 175459));
procedure  constant_test_bit($i0: i64, $p1: ref)
  returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7232, 63} true;
  assume {:verifier.code 0} true;
  $i2 := $ashr.i64($i0, 6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7232, 41} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p1, $mul.ref($i2, 8));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7232, 34} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i64($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7232, 74} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i64.i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7232, 83} true;
  assume {:verifier.code 0} true;
  $i6 := $and.i32($i5, 63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7232, 70} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i32.i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7232, 70} true;
  assume {:verifier.code 0} true;
  $i8 := $lshr.i64($i4, $i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7232, 11} true;
  assume {:verifier.code 0} true;
  $i9 := $trunc.i64.i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7232, 90} true;
  assume {:verifier.code 0} true;
  $i10 := $and.i32($i9, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7232, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const pci_channel_offline: ref;
axiom (pci_channel_offline == $sub.ref(0, 176491));
procedure  pci_channel_offline($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9298, 17} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 144);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9298, 17} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i32($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9298, 29} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9298, 29} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9298, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const readl: ref;
axiom (readl == $sub.ref(0, 177523));
procedure  readl($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6343, 57} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  call $i2 := devirtbounce(0, $p1);
  // WARNING: %3 = call i32 @devirtbounce(i32 (i32*)* asm sideeffect "movl $1,$0", "=r,*m,~{memory},~{dirflag},~{fpsr},~{flags}", i32* %2)
  call {:cexpr "ret"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6344, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const __memcpy: ref;
axiom (__memcpy == $sub.ref(0, 178555));
procedure  __memcpy($p0: ref, $p1: ref, $i2: i64)
  returns ($r: ref);
const __builtinx_memcpy: ref;
axiom (__builtinx_memcpy == $sub.ref(0, 179587));
procedure  __builtinx_memcpy()
  returns ($r: i32);
procedure  __builtinx_memcpy.ref.ref.i64(p.0: ref, p.1: ref, p.2: i64)
  returns ($r: i32);
const set_bit: ref;
axiom (set_bit == $sub.ref(0, 180619));
procedure  set_bit($i0: i64, $p1: ref)
{
$bb0:
  call devirtbounce.1(0, $p1, $i0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7205, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_link_test: ref;
axiom (igbvf_link_test == $sub.ref(0, 181651));
procedure  igbvf_link_test($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $i15: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7703, 19} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7704, 9} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p1, 0);
  $p3 := $add.ref($add.ref($p0, 1448), 32);
  $p4 := $add.ref($add.ref($p0, 1448), 32);
  $p5 := $add.ref($add.ref($add.ref($p0, 1448), 32), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7705, 18} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  call $i7 := devirtbounce.2($p6, $p2);
  $p8 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7706, 44} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7706, 52} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p9, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7706, 9} true;
  assume {:verifier.code 0} true;
  call $i11 := readl($p10);
  // WARNING: %12 = call i32 @readl(i8* %11), !dbg !8345, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7707, 12} true;
  assume {:verifier.code 0} true;
  $i12 := $and.i32($i11, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7707, 18} true;
  assume {:verifier.code 0} true;
  $i13 := $eq.i32($i12, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7707, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7708, 11} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p1, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7709, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7712, 17} true;
  assume {:verifier.code 0} true;
  $i14 := $load.i64($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7712, 11} true;
  assume {:verifier.code 0} true;
  $i15 := $trunc.i64.i32($i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7712, 3} true;
  assume {:verifier.code 0} true;
  $r := $i15;
  $exn := false;
  return;
}
const clear_bit: ref;
axiom (clear_bit == $sub.ref(0, 182683));
procedure  clear_bit($i0: i64, $p1: ref)
{
$bb0:
  call devirtbounce.1(0, $p1, $i0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7214, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const msleep_interruptible: ref;
axiom (msleep_interruptible == $sub.ref(0, 183715));
procedure  msleep_interruptible($i0: i32)
  returns ($r: i64);
const msleep: ref;
axiom (msleep == $sub.ref(0, 184747));
procedure  msleep($i0: i32);
const test_and_set_bit: ref;
axiom (test_and_set_bit == $sub.ref(0, 185779));
procedure  test_and_set_bit($i0: i64, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
  // WARNING: %3 = alloca i8, align 1, !verifier.code !8331
  // WARNING: ignoring llvm.debug call.
  assume true;
  call devirtbounce.3(0, $p1, $p2, $i0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7224, 32} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i8($M.1, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7224, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i8.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7224, 35} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7224, 35} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7224, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const netif_running: ref;
axiom (netif_running == $sub.ref(0, 186811));
procedure  netif_running($p0: ref)
  returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7309, 73} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7309, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := constant_test_bit(0, $p1);
  // WARNING: %3 = call i32 @constant_test_bit(i64 0, i64* %2), !dbg !8337, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7310, 15} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7310, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const vmalloc: ref;
axiom (vmalloc == $sub.ref(0, 187843));
procedure  vmalloc($i0: i64)
  returns ($r: ref);
const igbvf_down: ref;
axiom (igbvf_down == $sub.ref(0, 188875));
procedure  igbvf_down($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11379, 21} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11379, 21} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11380, 19} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11381, 55} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11381, 3} true;
  assume {:verifier.code 0} true;
  call set_bit(2, $p4);
  $p5 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11382, 47} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11382, 55} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p6, 10280);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11382, 12} true;
  assume {:verifier.code 0} true;
  call $i8 := readl($p7);
  // WARNING: %9 = call i32 @readl(i8* %8), !dbg !8346, !verifier.code !8334
  call {:cexpr "rxdctl"} boogie_si_record_i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11383, 17} true;
  assume {:verifier.code 0} true;
  $i9 := $and.i32($i8, $sub.i32(0, 33554433));
  $p10 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11383, 55} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11383, 63} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p11, 10280);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11383, 3} true;
  assume {:verifier.code 0} true;
  call writel($i9, $p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11384, 3} true;
  assume {:verifier.code 0} true;
  call netif_stop_queue($p2);
  $p13 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11385, 47} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11385, 55} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p14, 14376);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11385, 12} true;
  assume {:verifier.code 0} true;
  call $i16 := readl($p15);
  // WARNING: %17 = call i32 @readl(i8* %16), !dbg !8356, !verifier.code !8334
  call {:cexpr "txdctl"} boogie_si_record_i32($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11386, 17} true;
  assume {:verifier.code 0} true;
  $i17 := $and.i32($i16, $sub.i32(0, 33554433));
  $p18 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11386, 55} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11386, 63} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p19, 14376);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11386, 3} true;
  assume {:verifier.code 0} true;
  call writel($i17, $p20);
  $p21 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11387, 38} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11387, 46} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p22, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11387, 3} true;
  assume {:verifier.code 0} true;
  call $i24 := readl($p23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11388, 3} true;
  assume {:verifier.code 0} true;
  call msleep(10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11389, 28} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11389, 28} true;
  assume {:verifier.code 0} true;
  $p26 := $load.ref($M.0, $p25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11389, 38} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p26, 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11389, 3} true;
  assume {:verifier.code 0} true;
  call napi_disable($p27);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11390, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_irq_disable($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11391, 36} true;
  assume {:verifier.code 0} true;
  $p28 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11391, 3} true;
  assume {:verifier.code 0} true;
  call $i29 := ldv_del_timer_sync_51($p28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11392, 3} true;
  assume {:verifier.code 0} true;
  call netif_carrier_off($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11393, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_update_stats($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11394, 12} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p0, 950);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11394, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p30, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11395, 12} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p0, 952);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11395, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p31, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11396, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_reset($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11397, 32} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11397, 32} true;
  assume {:verifier.code 0} true;
  $p33 := $load.ref($M.0, $p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11397, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_clean_tx_ring($p33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11398, 32} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11398, 32} true;
  assume {:verifier.code 0} true;
  $p35 := $load.ref($M.0, $p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11398, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_clean_rx_ring($p35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11399, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_setup_tx_resources: ref;
axiom (igbvf_setup_tx_resources == $sub.ref(0, 189907));
procedure  igbvf_setup_tx_resources($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i39: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10138, 19} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10138, 19} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10139, 26} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p1, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10139, 26} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10139, 32} true;
  assume {:verifier.code 0} true;
  $i6 := $mul.i32($i5, 40);
  // WARNING: %7 = mul i32 %6, 40, !dbg !8342, !verifier.code !8334
  call {:cexpr "size"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10140, 17} true;
  assume {:verifier.code 0} true;
  $i7 := $sext.i32.i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10140, 9} true;
  assume {:verifier.code 0} true;
  call $p8 := vzalloc($i7);
  assume $isExternal($p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10141, 26} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10141, 12} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p1, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10141, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p10, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10142, 32} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p1, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10142, 32} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10142, 7} true;
  assume {:verifier.code 0} true;
  $i13 := $p2i.ref.i64($p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10142, 44} true;
  assume {:verifier.code 0} true;
  $i14 := $eq.i64($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10142, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10143, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10162, 34} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p1, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10162, 34} true;
  assume {:verifier.code 0} true;
  $p41 := $load.ref($M.0, $p40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10162, 9} true;
  assume {:verifier.code 0} true;
  $p42 := $bitcast.ref.ref($p41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10162, 3} true;
  assume {:verifier.code 0} true;
  call vfree($p42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10163, 49} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10163, 49} true;
  assume {:verifier.code 0} true;
  $p44 := $load.ref($M.0, $p43);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10163, 56} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($p44, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10163, 3} true;
  assume {:verifier.code 0} true;
  call $i46 := dev_err.ref.ref($p45, .str);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10164, 3} true;
  assume {:verifier.code 0} true;
  $i39 := $sub.i32(0, 12);
  goto $bb8;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10147, 28} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p1, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10147, 28} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10147, 34} true;
  assume {:verifier.code 0} true;
  $i17 := $mul.i32($i16, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10147, 12} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p1, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10147, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p18, $i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10148, 29} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p1, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10148, 29} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i32($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10148, 34} true;
  assume {:verifier.code 0} true;
  $i21 := $add.i32($i20, 4095);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10148, 43} true;
  assume {:verifier.code 0} true;
  $i22 := $and.i32($i21, $sub.i32(0, 4096));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10148, 12} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p1, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10148, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p23, $i22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10149, 37} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p3, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10149, 60} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p1, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10149, 60} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i32($M.0, $p25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10149, 42} true;
  assume {:verifier.code 0} true;
  $i27 := $zext.i32.i64($i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10149, 77} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p1, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10149, 13} true;
  assume {:verifier.code 0} true;
  call $p29 := dma_alloc_attrs($p24, $i27, $p28, 208, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10151, 19} true;
  assume {:verifier.code 0} true;
  $p30 := $bitcast.ref.ref($p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10151, 12} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10151, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p31, $p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10152, 32} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10152, 32} true;
  assume {:verifier.code 0} true;
  $p33 := $load.ref($M.0, $p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10152, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $p2i.ref.i64($p33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10152, 37} true;
  assume {:verifier.code 0} true;
  $i35 := $eq.i64($i34, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10152, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i35 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10153, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb6:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10157, 12} true;
  assume {:verifier.code 0} true;
  $p36 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10157, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p36, $p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10158, 12} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p1, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10158, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p37, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10159, 12} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p1, 34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10159, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p38, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10160, 3} true;
  assume {:verifier.code 0} true;
  $i39 := 0;
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10166, 1} true;
  assume {:verifier.code 0} true;
  $r := $i39;
  $exn := false;
  return;
}
const igbvf_free_tx_resources: ref;
axiom (igbvf_free_tx_resources == $sub.ref(0, 190939));
procedure  igbvf_free_tx_resources($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10248, 20} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10248, 20} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10248, 30} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10248, 30} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10249, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_clean_tx_ring($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10250, 34} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10250, 34} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10250, 9} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10250, 3} true;
  assume {:verifier.code 0} true;
  call vfree($p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10251, 12} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10251, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p8, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10252, 26} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p4, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10252, 49} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p0, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10252, 49} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i32($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10252, 31} true;
  assume {:verifier.code 0} true;
  $i12 := $zext.i32.i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10252, 72} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10252, 72} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10252, 55} true;
  assume {:verifier.code 0} true;
  $p15 := $bitcast.ref.ref($p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10252, 87} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10252, 87} true;
  assume {:verifier.code 0} true;
  $i17 := $load.i64($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10252, 3} true;
  assume {:verifier.code 0} true;
  call dma_free_attrs($p9, $i12, $p15, $i17, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10254, 12} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10254, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p18, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10255, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_setup_rx_resources: ref;
axiom (igbvf_setup_rx_resources == $sub.ref(0, 191971));
procedure  igbvf_setup_rx_resources($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i39: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10176, 19} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10176, 19} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10177, 26} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p1, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10177, 26} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10177, 32} true;
  assume {:verifier.code 0} true;
  $i6 := $mul.i32($i5, 40);
  // WARNING: %7 = mul i32 %6, 40, !dbg !8342, !verifier.code !8334
  call {:cexpr "size"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10178, 17} true;
  assume {:verifier.code 0} true;
  $i7 := $sext.i32.i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10178, 9} true;
  assume {:verifier.code 0} true;
  call $p8 := vzalloc($i7);
  assume $isExternal($p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10179, 26} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10179, 12} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p1, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10179, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p10, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10180, 32} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p1, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10180, 32} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10180, 7} true;
  assume {:verifier.code 0} true;
  $i13 := $p2i.ref.i64($p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10180, 44} true;
  assume {:verifier.code 0} true;
  $i14 := $eq.i64($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10180, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10181, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10201, 34} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p1, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10201, 34} true;
  assume {:verifier.code 0} true;
  $p41 := $load.ref($M.0, $p40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10201, 9} true;
  assume {:verifier.code 0} true;
  $p42 := $bitcast.ref.ref($p41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10201, 3} true;
  assume {:verifier.code 0} true;
  call vfree($p42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10202, 12} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p1, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10202, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p43, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10203, 49} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10203, 49} true;
  assume {:verifier.code 0} true;
  $p45 := $load.ref($M.0, $p44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10203, 56} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p45, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10203, 3} true;
  assume {:verifier.code 0} true;
  call $i47 := dev_err.ref.ref($p46, .str.1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10204, 3} true;
  assume {:verifier.code 0} true;
  $i39 := $sub.i32(0, 12);
  goto $bb8;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10186, 28} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p1, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10186, 28} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10186, 34} true;
  assume {:verifier.code 0} true;
  $i17 := $mul.i32($i16, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10186, 12} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p1, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10186, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p18, $i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10187, 29} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p1, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10187, 29} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i32($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10187, 34} true;
  assume {:verifier.code 0} true;
  $i21 := $add.i32($i20, 4095);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10187, 43} true;
  assume {:verifier.code 0} true;
  $i22 := $and.i32($i21, $sub.i32(0, 4096));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10187, 12} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p1, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10187, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p23, $i22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10188, 37} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p3, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10188, 60} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p1, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10188, 60} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i32($M.0, $p25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10188, 42} true;
  assume {:verifier.code 0} true;
  $i27 := $zext.i32.i64($i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10188, 77} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p1, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10188, 13} true;
  assume {:verifier.code 0} true;
  call $p29 := dma_alloc_attrs($p24, $i27, $p28, 208, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10190, 19} true;
  assume {:verifier.code 0} true;
  $p30 := $bitcast.ref.ref($p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10190, 12} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10190, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p31, $p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10191, 32} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10191, 32} true;
  assume {:verifier.code 0} true;
  $p33 := $load.ref($M.0, $p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10191, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $p2i.ref.i64($p33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10191, 37} true;
  assume {:verifier.code 0} true;
  $i35 := $eq.i64($i34, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10191, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i35 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10192, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb6:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10196, 12} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p1, 34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10196, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p36, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10197, 12} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p1, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10197, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p37, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10198, 12} true;
  assume {:verifier.code 0} true;
  $p38 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10198, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p38, $p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10199, 3} true;
  assume {:verifier.code 0} true;
  $i39 := 0;
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10206, 1} true;
  assume {:verifier.code 0} true;
  $r := $i39;
  $exn := false;
  return;
}
const igbvf_free_rx_resources: ref;
axiom (igbvf_free_rx_resources == $sub.ref(0, 193003));
procedure  igbvf_free_rx_resources($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10332, 20} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10332, 20} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10332, 30} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10332, 30} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10333, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_clean_rx_ring($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10334, 34} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10334, 34} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10334, 9} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10334, 3} true;
  assume {:verifier.code 0} true;
  call vfree($p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10335, 12} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10335, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p8, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10336, 26} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p4, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10336, 49} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p0, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10336, 49} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i32($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10336, 31} true;
  assume {:verifier.code 0} true;
  $i12 := $zext.i32.i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10336, 72} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10336, 72} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10336, 55} true;
  assume {:verifier.code 0} true;
  $p15 := $bitcast.ref.ref($p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10336, 87} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10336, 87} true;
  assume {:verifier.code 0} true;
  $i17 := $load.i64($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10336, 3} true;
  assume {:verifier.code 0} true;
  call dma_free_attrs($p9, $i12, $p15, $i17, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10338, 12} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10338, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p18, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10339, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_up: ref;
axiom (igbvf_up == $sub.ref(0, 194035));
procedure  igbvf_up($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11355, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11356, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_configure($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11357, 57} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11357, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit(2, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11358, 27} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11358, 27} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11358, 37} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p4, 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11358, 3} true;
  assume {:verifier.code 0} true;
  call napi_enable($p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11359, 32} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11359, 32} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11359, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $p2i.ref.i64($p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11359, 45} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i64($i8, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11359, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11360, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_configure_msix($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11361, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  $p10 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11364, 38} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11364, 46} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p11, 5504);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11364, 3} true;
  assume {:verifier.code 0} true;
  call $i13 := readl($p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11365, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_irq_enable($p0);
  $p14 := $add.ref($add.ref($p0, 1448), 32);
  $p15 := $add.ref($add.ref($add.ref($p0, 1448), 32), 132);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11366, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p15, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11367, 31} true;
  assume {:verifier.code 0} true;
  $p16 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11367, 63} true;
  assume {:verifier.code 0} true;
  $i17 := $load.i64($M.0, jiffies);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11367, 71} true;
  assume {:verifier.code 0} true;
  $i18 := $add.i64($i17, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11367, 3} true;
  assume {:verifier.code 0} true;
  call $i19 := ldv_mod_timer_50($p16, $i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11368, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const vfree: ref;
axiom (vfree == $sub.ref(0, 195067));
procedure  vfree($p0: ref);
const igbvf_configure: ref;
axiom (igbvf_configure == $sub.ref(0, 196099));
procedure  igbvf_configure($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11302, 28} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11302, 28} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11302, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_set_multi($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11303, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_restore_vlan($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11304, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_configure_tx($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11305, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_setup_srrctl($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11306, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_configure_rx($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11307, 36} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11307, 36} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11307, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := igbvf_desc_unused($p4);
  // WARNING: %6 = call i32 @igbvf_desc_unused(%struct.igbvf_ring* %5), !dbg !8343, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11308, 35} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11308, 35} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11308, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_alloc_rx_buffers($p7, $i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11309, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const napi_enable: ref;
axiom (napi_enable == $sub.ref(0, 197131));
procedure  napi_enable($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9425, 71} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9425, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := constant_test_bit(0, $p1);
  // WARNING: %3 = call i32 @constant_test_bit(i64 0, i64* %2), !dbg !8337, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9426, 37} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9426, 37} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9426, 33} true;
  assume {:verifier.code 0} true;
  $i5 := $sext.i32.i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9426, 13} true;
  assume {:verifier.code 0} true;
  call $i6 := ldv__builtin_expect($i5, 0);
  // WARNING: %7 = call i64 @ldv__builtin_expect(i64 %6, i64 0), !dbg !8342, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9427, 15} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i64($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9427, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  call devirtbounce.4(0, .str.7, 492, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9428, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9431, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb4:
  call devirtbounce.5(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9436, 51} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9436, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit(0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9437, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_configure_msix: ref;
axiom (igbvf_configure_msix == $sub.ref(0, 198163));
procedure  igbvf_configure_msix($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i16;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10778, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10779, 22} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10779, 22} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10780, 22} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10780, 22} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.0, $p4);
  // WARNING: call void @llvm.dbg.value(metadata %struct.igbvf_ring* %6, i64 0, metadata !9901, metadata !8330), !dbg !9902, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10782, 12} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p0, 2556);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10782, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p6, 0);
  // WARNING: store i32 0, i32* %7, align 4, !dbg !8348, !verifier.code !8334
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10784, 19} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i32(0, 1);
  // WARNING: %8 = add nsw i32 0, 1, !dbg !8351, !verifier.code !8334
  call {:cexpr "vector"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10785, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_assign_vector($p0, $sub.i32(0, 1), 0, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10786, 40} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 2556);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10786, 40} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i32($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10786, 68} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p3, 256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10786, 68} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i32($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10786, 57} true;
  assume {:verifier.code 0} true;
  $i12 := $or.i32($i9, $i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10786, 12} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p0, 2556);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10786, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p13, $i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10787, 19} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p3, 260);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10787, 19} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i32($M.0, $p14);
  $p16 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10787, 51} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10787, 86} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p3, 268);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10787, 86} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i16($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10787, 61} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i16.i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10787, 59} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p17, $mul.ref($i20, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10787, 3} true;
  assume {:verifier.code 0} true;
  call writel($i15, $p21);
  // WARNING: call void @writel(i32 %16, i8* %22), !dbg !8363, !verifier.code !8334
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10789, 19} true;
  assume {:verifier.code 0} true;
  $i22 := $add.i32($i7, 1);
  // WARNING: %23 = add nsw i32 %8, 1, !dbg !8366, !verifier.code !8334
  call {:cexpr "vector"} boogie_si_record_i32($i22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10790, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_assign_vector($p0, 0, $sub.i32(0, 1), $i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10791, 40} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p0, 2556);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10791, 40} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i32($M.0, $p23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10791, 68} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p5, 256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10791, 68} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i32($M.0, $p25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10791, 57} true;
  assume {:verifier.code 0} true;
  $i27 := $or.i32($i24, $i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10791, 12} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p0, 2556);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10791, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p28, $i27);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10792, 19} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p5, 260);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10792, 19} true;
  assume {:verifier.code 0} true;
  $i30 := $load.i32($M.0, $p29);
  $p31 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10792, 51} true;
  assume {:verifier.code 0} true;
  $p32 := $load.ref($M.0, $p31);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10792, 86} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p5, 268);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10792, 86} true;
  assume {:verifier.code 0} true;
  $i34 := $load.i16($M.0, $p33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10792, 61} true;
  assume {:verifier.code 0} true;
  $i35 := $zext.i16.i64($i34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10792, 59} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p32, $mul.ref($i35, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10792, 3} true;
  assume {:verifier.code 0} true;
  call writel($i30, $p36);
  // WARNING: call void @writel(i32 %31, i8* %37), !dbg !8378, !verifier.code !8334
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10794, 19} true;
  assume {:verifier.code 0} true;
  $i37 := $add.i32($i22, 1);
  // WARNING: %38 = add nsw i32 %23, 1, !dbg !8381, !verifier.code !8334
  call {:cexpr "vector"} boogie_si_record_i32($i37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10795, 24} true;
  assume {:verifier.code 0} true;
  $i38 := $or.i32($i22, 128);
  // WARNING: %39 = or i32 %23, 128, !dbg !8382, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i38);
  $p39 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10796, 38} true;
  assume {:verifier.code 0} true;
  $p40 := $load.ref($M.0, $p39);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10796, 46} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($p40, 5952);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10796, 3} true;
  assume {:verifier.code 0} true;
  call writel($i38, $p41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10797, 41} true;
  assume {:verifier.code 0} true;
  $i42 := $shl.i32(1, $i37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10797, 52} true;
  assume {:verifier.code 0} true;
  $i43 := $add.i32($i42, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10797, 12} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($p0, 2556);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10797, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p44, $i43);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10798, 45} true;
  assume {:verifier.code 0} true;
  $i45 := $add.i32($i37, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10798, 34} true;
  assume {:verifier.code 0} true;
  $i46 := $shl.i32(1, $i45);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10798, 12} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($p0, 2560);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10798, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p47, $i46);
  $p48 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10799, 38} true;
  assume {:verifier.code 0} true;
  $p49 := $load.ref($M.0, $p48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10799, 46} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($p49, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10799, 3} true;
  assume {:verifier.code 0} true;
  call $i51 := readl($p50);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10800, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_irq_enable: ref;
axiom (igbvf_irq_enable == $sub.ref(0, 199195));
procedure  igbvf_irq_enable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11020, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11021, 19} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 2556);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11021, 19} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i32($M.0, $p2);
  $p4 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11021, 60} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11021, 68} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p5, 5420);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11021, 3} true;
  assume {:verifier.code 0} true;
  call writel($i3, $p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11022, 19} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, 2556);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11022, 19} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.0, $p7);
  $p9 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11022, 60} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11022, 68} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p10, 5424);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11022, 3} true;
  assume {:verifier.code 0} true;
  call writel($i8, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11023, 19} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p0, 2556);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11023, 19} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.0, $p12);
  $p14 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11023, 60} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11023, 68} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p15, 5412);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11023, 3} true;
  assume {:verifier.code 0} true;
  call writel($i13, $p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11024, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_mod_timer_50: ref;
axiom (ldv_mod_timer_50 == $sub.ref(0, 200227));
procedure  ldv_mod_timer_50($p0: ref, $i1: i64)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.timer_list* %0, i64 0, metadata !9981, metadata !8330), !dbg !9982, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14541, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := mod_timer($p0, $i1);
  // WARNING: %3 = call i32 @mod_timer(%struct.timer_list* %0, i64 %1), !dbg !8337, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !9987, metadata !8330), !dbg !9988, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14543, 3} true;
  assume {:verifier.code 0} true;
  call activate_pending_timer_4($p0, $i1, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14544, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const mod_timer: ref;
axiom (mod_timer == $sub.ref(0, 201259));
procedure  mod_timer($p0: ref, $i1: i64)
  returns ($r: i32);
const activate_pending_timer_4: ref;
axiom (activate_pending_timer_4 == $sub.ref(0, 202291));
procedure  activate_pending_timer_4($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.timer_list* %0, i64 0, metadata !9997, metadata !8330), !dbg !9998, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i64 %1, i64 0, metadata !9999, metadata !8330), !dbg !10000, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13282, 23} true;
  assume {:verifier.code 0} true;
  $p3 := $M.2;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13282, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $p2i.ref.i64($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13282, 45} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13282, 42} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i64($i4, $i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13282, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13283, 9} true;
  assume {:verifier.code 0} true;
  $i7 := $M.3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13283, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i7, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13283, 28} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb3, $bb5;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13283, 28} true;
  assume {:verifier.code 0} true;
  assume ($i8 == 1);
  goto $bb4;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13284, 26} true;
  assume {:verifier.code 0} true;
  $M.2 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13285, 7} true;
  assume {:verifier.code 0} true;
  $p10 := $M.2;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13285, 27} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p10, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13285, 32} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p11, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13286, 21} true;
  assume {:verifier.code 0} true;
  $M.3 := 1;
  call {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13287, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb5:
  assume !(($i8 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13283, 44} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13283, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb6, $bb7;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13283, 9} true;
  assume {:verifier.code 0} true;
  assume ($i9 == 1);
  goto $bb4;
$bb7:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13290, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13333, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13294, 23} true;
  assume {:verifier.code 0} true;
  $p12 := $M.4;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13294, 7} true;
  assume {:verifier.code 0} true;
  $i13 := $p2i.ref.i64($p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13294, 45} true;
  assume {:verifier.code 0} true;
  $i14 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13294, 42} true;
  assume {:verifier.code 0} true;
  $i15 := $eq.i64($i13, $i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13294, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i15 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13295, 9} true;
  assume {:verifier.code 0} true;
  $i16 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13295, 23} true;
  assume {:verifier.code 0} true;
  $i17 := $eq.i32($i16, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13295, 28} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb13, $bb15;
$bb12:
  assume !(($i15 == 1));
  assume {:verifier.code 0} true;
  goto $bb19;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13295, 28} true;
  assume {:verifier.code 0} true;
  assume ($i17 == 1);
  goto $bb14;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13296, 26} true;
  assume {:verifier.code 0} true;
  $M.4 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13297, 7} true;
  assume {:verifier.code 0} true;
  $p19 := $M.4;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13297, 27} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p19, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13297, 32} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p20, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13298, 21} true;
  assume {:verifier.code 0} true;
  $M.5 := 1;
  call {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13299, 5} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb15:
  assume !(($i17 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13295, 44} true;
  assume {:verifier.code 0} true;
  $i18 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13295, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb16, $bb17;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13295, 9} true;
  assume {:verifier.code 0} true;
  assume ($i18 == 1);
  goto $bb14;
$bb17:
  assume !(($i18 == 1));
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13302, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13306, 23} true;
  assume {:verifier.code 0} true;
  $p21 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13306, 7} true;
  assume {:verifier.code 0} true;
  $i22 := $p2i.ref.i64($p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13306, 45} true;
  assume {:verifier.code 0} true;
  $i23 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13306, 42} true;
  assume {:verifier.code 0} true;
  $i24 := $eq.i64($i22, $i23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13306, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i24 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13307, 9} true;
  assume {:verifier.code 0} true;
  $i25 := $M.7;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13307, 23} true;
  assume {:verifier.code 0} true;
  $i26 := $eq.i32($i25, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13307, 28} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb22, $bb24;
$bb21:
  assume !(($i24 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13307, 28} true;
  assume {:verifier.code 0} true;
  assume ($i26 == 1);
  goto $bb23;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13308, 26} true;
  assume {:verifier.code 0} true;
  $M.6 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13309, 7} true;
  assume {:verifier.code 0} true;
  $p28 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13309, 27} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p28, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13309, 32} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p29, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13310, 21} true;
  assume {:verifier.code 0} true;
  $M.7 := 1;
  call {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13311, 5} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb24:
  assume !(($i26 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13307, 44} true;
  assume {:verifier.code 0} true;
  $i27 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13307, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb25, $bb26;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13307, 9} true;
  assume {:verifier.code 0} true;
  assume ($i27 == 1);
  goto $bb23;
$bb26:
  assume !(($i27 == 1));
  assume {:verifier.code 0} true;
  goto $bb27;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13314, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13318, 23} true;
  assume {:verifier.code 0} true;
  $p30 := $M.8;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13318, 7} true;
  assume {:verifier.code 0} true;
  $i31 := $p2i.ref.i64($p30);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13318, 45} true;
  assume {:verifier.code 0} true;
  $i32 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13318, 42} true;
  assume {:verifier.code 0} true;
  $i33 := $eq.i64($i31, $i32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13318, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i33} true;
  goto $bb29, $bb30;
$bb29:
  assume ($i33 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13319, 9} true;
  assume {:verifier.code 0} true;
  $i34 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13319, 23} true;
  assume {:verifier.code 0} true;
  $i35 := $eq.i32($i34, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13319, 28} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb31, $bb33;
$bb30:
  assume !(($i33 == 1));
  assume {:verifier.code 0} true;
  goto $bb37;
$bb31:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13319, 28} true;
  assume {:verifier.code 0} true;
  assume ($i35 == 1);
  goto $bb32;
$bb32:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13320, 26} true;
  assume {:verifier.code 0} true;
  $M.8 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13321, 7} true;
  assume {:verifier.code 0} true;
  $p37 := $M.8;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13321, 27} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p37, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13321, 32} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p38, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13322, 21} true;
  assume {:verifier.code 0} true;
  $M.9 := 1;
  call {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13323, 5} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb33:
  assume !(($i35 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13319, 44} true;
  assume {:verifier.code 0} true;
  $i36 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13319, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb34, $bb35;
$bb34:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13319, 9} true;
  assume {:verifier.code 0} true;
  assume ($i36 == 1);
  goto $bb32;
$bb35:
  assume !(($i36 == 1));
  assume {:verifier.code 0} true;
  goto $bb36;
$bb36:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13326, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb37:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13330, 3} true;
  assume {:verifier.code 0} true;
  call activate_suitable_timer_4($p0, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13331, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
}
const activate_suitable_timer_4: ref;
axiom (activate_suitable_timer_4 == $sub.ref(0, 203323));
procedure  activate_suitable_timer_4($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.timer_list* %0, i64 0, metadata !10098, metadata !8330), !dbg !10099, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13716, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $M.3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13716, 21} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13716, 26} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13716, 26} true;
  assume {:verifier.code 0} true;
  assume ($i3 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13717, 24} true;
  assume {:verifier.code 0} true;
  $M.2 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13718, 5} true;
  assume {:verifier.code 0} true;
  $p6 := $M.2;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13718, 25} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p6, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13718, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p7, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13719, 19} true;
  assume {:verifier.code 0} true;
  $M.3 := 1;
  call {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13720, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume !(($i3 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13716, 29} true;
  assume {:verifier.code 0} true;
  $i4 := $M.3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13716, 43} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i4, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13716, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13716, 7} true;
  assume {:verifier.code 0} true;
  assume ($i5 == 1);
  goto $bb2;
$bb5:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13750, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13724, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13724, 21} true;
  assume {:verifier.code 0} true;
  $i9 := $eq.i32($i8, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13724, 26} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb8, $bb10;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13724, 26} true;
  assume {:verifier.code 0} true;
  assume ($i9 == 1);
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13725, 24} true;
  assume {:verifier.code 0} true;
  $M.4 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13726, 5} true;
  assume {:verifier.code 0} true;
  $p12 := $M.4;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13726, 25} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p12, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13726, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p13, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13727, 19} true;
  assume {:verifier.code 0} true;
  $M.5 := 1;
  call {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13728, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb10:
  assume !(($i9 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13724, 29} true;
  assume {:verifier.code 0} true;
  $i10 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13724, 43} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i32($i10, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13724, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb11, $bb12;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13724, 7} true;
  assume {:verifier.code 0} true;
  assume ($i11 == 1);
  goto $bb9;
$bb12:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13732, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $M.7;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13732, 21} true;
  assume {:verifier.code 0} true;
  $i15 := $eq.i32($i14, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13732, 26} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb14, $bb16;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13732, 26} true;
  assume {:verifier.code 0} true;
  assume ($i15 == 1);
  goto $bb15;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13733, 24} true;
  assume {:verifier.code 0} true;
  $M.6 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13734, 5} true;
  assume {:verifier.code 0} true;
  $p18 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13734, 25} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p18, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13734, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p19, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13735, 19} true;
  assume {:verifier.code 0} true;
  $M.7 := 1;
  call {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13736, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb16:
  assume !(($i15 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13732, 29} true;
  assume {:verifier.code 0} true;
  $i16 := $M.7;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13732, 43} true;
  assume {:verifier.code 0} true;
  $i17 := $eq.i32($i16, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13732, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb17, $bb18;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13732, 7} true;
  assume {:verifier.code 0} true;
  assume ($i17 == 1);
  goto $bb15;
$bb18:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13740, 7} true;
  assume {:verifier.code 0} true;
  $i20 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13740, 21} true;
  assume {:verifier.code 0} true;
  $i21 := $eq.i32($i20, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13740, 26} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb20, $bb22;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13740, 26} true;
  assume {:verifier.code 0} true;
  assume ($i21 == 1);
  goto $bb21;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13741, 24} true;
  assume {:verifier.code 0} true;
  $M.8 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13742, 5} true;
  assume {:verifier.code 0} true;
  $p24 := $M.8;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13742, 25} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p24, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13742, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p25, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13743, 19} true;
  assume {:verifier.code 0} true;
  $M.9 := 1;
  call {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13744, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb22:
  assume !(($i21 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13740, 29} true;
  assume {:verifier.code 0} true;
  $i22 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13740, 43} true;
  assume {:verifier.code 0} true;
  $i23 := $eq.i32($i22, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13740, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i23} true;
  goto $bb23, $bb24;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13740, 7} true;
  assume {:verifier.code 0} true;
  assume ($i23 == 1);
  goto $bb21;
$bb24:
  assume !(($i23 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13748, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
}
const writel: ref;
axiom (writel == $sub.ref(0, 204355));
procedure  writel($i0: i32, $p1: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6352, 58} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  call devirtbounce.6(0, $i0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6353, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_assign_vector: ref;
axiom (igbvf_assign_vector == $sub.ref(0, 205387));
procedure  igbvf_assign_vector($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i20: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i1;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i51: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.igbvf_adapter* %0, i64 0, metadata !10178, metadata !8330), !dbg !10179, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !10180, metadata !8330), !dbg !10181, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %2, i64 0, metadata !10182, metadata !8330), !dbg !10183, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10732, 19} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10733, 16} true;
  assume {:verifier.code 0} true;
  $i5 := $sge.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10733, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10734, 29} true;
  assume {:verifier.code 0} true;
  $i6 := $ashr.i32($i1, 1);
  // WARNING: %8 = ashr i32 %1, 1, !dbg !8348, !verifier.code !8334
  call {:cexpr "index"} boogie_si_record_i32($i6);
  $p7 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10735, 48} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10735, 82} true;
  assume {:verifier.code 0} true;
  $i9 := $shl.i32($i6, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10735, 59} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i32.i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10735, 88} true;
  assume {:verifier.code 0} true;
  $i11 := $add.i64($i10, 5888);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10735, 56} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p8, $mul.ref($i11, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10735, 12} true;
  assume {:verifier.code 0} true;
  call $i13 := readl($p12);
  // WARNING: %15 = call i32 @readl(i8* %14), !dbg !8357, !verifier.code !8334
  call {:cexpr "ivar"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10736, 18} true;
  assume {:verifier.code 0} true;
  $i14 := $and.i32($i1, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10736, 18} true;
  assume {:verifier.code 0} true;
  $i15 := $ne.i32($i14, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10736, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume ($i15 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10737, 19} true;
  assume {:verifier.code 0} true;
  $i16 := $and.i32($i13, $sub.i32(0, 16711681));
  // WARNING: %19 = and i32 %15, -16711681, !dbg !8363, !verifier.code !8334
  call {:cexpr "ivar"} boogie_si_record_i32($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10738, 34} true;
  assume {:verifier.code 0} true;
  $i17 := $or.i32($i3, 128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10738, 41} true;
  assume {:verifier.code 0} true;
  $i18 := $shl.i32($i17, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10738, 48} true;
  assume {:verifier.code 0} true;
  $i19 := $or.i32($i18, $i16);
  // WARNING: %22 = or i32 %21, %19, !dbg !8367, !verifier.code !8334
  call {:cexpr "ivar"} boogie_si_record_i32($i19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10739, 5} true;
  assume {:verifier.code 0} true;
  $i20 := $i19;
  goto $bb5;
$bb4:
  assume !(($i15 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10740, 19} true;
  assume {:verifier.code 0} true;
  $i21 := $and.i32($i13, $sub.i32(0, 256));
  // WARNING: %24 = and i32 %15, -256, !dbg !8369, !verifier.code !8334
  call {:cexpr "ivar"} boogie_si_record_i32($i21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10741, 33} true;
  assume {:verifier.code 0} true;
  $i22 := $or.i32($i3, $i21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10741, 41} true;
  assume {:verifier.code 0} true;
  $i23 := $or.i32($i22, 128);
  // WARNING: %26 = or i32 %25, 128, !dbg !8372, !verifier.code !8334
  call {:cexpr "ivar"} boogie_si_record_i32($i23);
  assume {:verifier.code 0} true;
  $i20 := $i23;
  goto $bb5;
$bb5:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10743, 74} true;
  assume {:verifier.code 0} true;
  $i24 := $shl.i32(1, $i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10743, 15} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10743, 15} true;
  assume {:verifier.code 0} true;
  $p26 := $load.ref($M.0, $p25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10743, 25} true;
  assume {:verifier.code 0} true;
  $i27 := $sext.i32.i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10743, 23} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p26, $mul.ref($i27, 304));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10743, 52} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($add.ref($p26, $mul.ref($i27, 304)), 256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10743, 63} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p29, $i24);
  $p30 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10744, 42} true;
  assume {:verifier.code 0} true;
  $p31 := $load.ref($M.0, $p30);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10744, 76} true;
  assume {:verifier.code 0} true;
  $i32 := $shl.i32($i6, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10744, 53} true;
  assume {:verifier.code 0} true;
  $i33 := $zext.i32.i64($i32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10744, 82} true;
  assume {:verifier.code 0} true;
  $i34 := $add.i64($i33, 5888);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10744, 50} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($p31, $mul.ref($i34, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10744, 5} true;
  assume {:verifier.code 0} true;
  call writel($i20, $p35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10745, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10748, 16} true;
  assume {:verifier.code 0} true;
  $i36 := $sge.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10748, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i36 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10749, 29} true;
  assume {:verifier.code 0} true;
  $i37 := $ashr.i32($i2, 1);
  // WARNING: %44 = ashr i32 %2, 1, !dbg !8389, !verifier.code !8334
  call {:cexpr "index"} boogie_si_record_i32($i37);
  $p38 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10750, 48} true;
  assume {:verifier.code 0} true;
  $p39 := $load.ref($M.0, $p38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10750, 82} true;
  assume {:verifier.code 0} true;
  $i40 := $shl.i32($i37, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10750, 59} true;
  assume {:verifier.code 0} true;
  $i41 := $zext.i32.i64($i40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10750, 88} true;
  assume {:verifier.code 0} true;
  $i42 := $add.i64($i41, 5888);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10750, 56} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p39, $mul.ref($i42, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10750, 12} true;
  assume {:verifier.code 0} true;
  call $i44 := readl($p43);
  // WARNING: %51 = call i32 @readl(i8* %50), !dbg !8396, !verifier.code !8334
  call {:cexpr "ivar"} boogie_si_record_i32($i44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10751, 18} true;
  assume {:verifier.code 0} true;
  $i45 := $and.i32($i2, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10751, 18} true;
  assume {:verifier.code 0} true;
  $i46 := $ne.i32($i45, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10751, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb9, $bb10;
$bb8:
  assume !(($i36 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb9:
  assume ($i46 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10752, 19} true;
  assume {:verifier.code 0} true;
  $i47 := $and.i32($i44, 16777215);
  // WARNING: %55 = and i32 %51, 16777215, !dbg !8400, !verifier.code !8334
  call {:cexpr "ivar"} boogie_si_record_i32($i47);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10753, 34} true;
  assume {:verifier.code 0} true;
  $i48 := $or.i32($i3, 128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10753, 41} true;
  assume {:verifier.code 0} true;
  $i49 := $shl.i32($i48, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10753, 48} true;
  assume {:verifier.code 0} true;
  $i50 := $or.i32($i49, $i47);
  // WARNING: %58 = or i32 %57, %55, !dbg !8404, !verifier.code !8334
  call {:cexpr "ivar"} boogie_si_record_i32($i50);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10754, 5} true;
  assume {:verifier.code 0} true;
  $i51 := $i50;
  goto $bb11;
$bb10:
  assume !(($i46 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10755, 19} true;
  assume {:verifier.code 0} true;
  $i52 := $and.i32($i44, $sub.i32(0, 65281));
  // WARNING: %60 = and i32 %51, -65281, !dbg !8406, !verifier.code !8334
  call {:cexpr "ivar"} boogie_si_record_i32($i52);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10756, 34} true;
  assume {:verifier.code 0} true;
  $i53 := $or.i32($i3, 128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10756, 41} true;
  assume {:verifier.code 0} true;
  $i54 := $shl.i32($i53, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10756, 47} true;
  assume {:verifier.code 0} true;
  $i55 := $or.i32($i54, $i52);
  // WARNING: %63 = or i32 %62, %60, !dbg !8410, !verifier.code !8334
  call {:cexpr "ivar"} boogie_si_record_i32($i55);
  assume {:verifier.code 0} true;
  $i51 := $i55;
  goto $bb11;
$bb11:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10758, 74} true;
  assume {:verifier.code 0} true;
  $i56 := $shl.i32(1, $i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10758, 15} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10758, 15} true;
  assume {:verifier.code 0} true;
  $p58 := $load.ref($M.0, $p57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10758, 25} true;
  assume {:verifier.code 0} true;
  $i59 := $sext.i32.i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10758, 23} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($p58, $mul.ref($i59, 304));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10758, 52} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($add.ref($p58, $mul.ref($i59, 304)), 256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10758, 63} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p61, $i56);
  $p62 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10759, 42} true;
  assume {:verifier.code 0} true;
  $p63 := $load.ref($M.0, $p62);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10759, 76} true;
  assume {:verifier.code 0} true;
  $i64 := $shl.i32($i37, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10759, 53} true;
  assume {:verifier.code 0} true;
  $i65 := $zext.i32.i64($i64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10759, 82} true;
  assume {:verifier.code 0} true;
  $i66 := $add.i64($i65, 5888);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10759, 50} true;
  assume {:verifier.code 0} true;
  $p67 := $add.ref($p63, $mul.ref($i66, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10759, 5} true;
  assume {:verifier.code 0} true;
  call writel($i51, $p67);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10760, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10763, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv__builtin_expect: ref;
axiom (ldv__builtin_expect == $sub.ref(0, 206419));
procedure  ldv__builtin_expect($i0: i64, $i1: i64)
  returns ($r: i64)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !10273, metadata !8330), !dbg !10274, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6444, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const igbvf_set_multi: ref;
axiom (igbvf_set_multi == $sub.ref(0, 207451));
procedure  igbvf_set_multi($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i38: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $i28: i32;
  var $p29: ref;
  var $i53: i32;
  var $i27: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11252, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11253, 13} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11254, 19} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11256, 15} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 688);
  $p5 := $add.ref($add.ref($p0, 688), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11256, 18} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11256, 24} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i32($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11256, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11257, 46} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 688);
  $p9 := $add.ref($add.ref($p0, 688), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11257, 49} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11257, 29} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i32.i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11257, 15} true;
  assume {:verifier.code 0} true;
  call $p12 := kmalloc_array($i11, 6, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11259, 9} true;
  assume {:verifier.code 0} true;
  $i13 := $p2i.ref.i64($p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11259, 34} true;
  assume {:verifier.code 0} true;
  $i14 := $eq.i64($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11259, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  $p15 := $0.ref;
  goto $bb7;
$bb3:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11260, 7} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11296, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11264, 3} true;
  assume {:verifier.code 0} true;
  $p15 := $p12;
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  // WARNING: %.01 = phi i8* [ %14, %19 ], [ null, %20 ], !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11268, 48} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p0, 688);
  $p17 := $add.ref($p0, 688);
  $p18 := $add.ref($p0, 688);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11268, 56} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11269, 8} true;
  assume {:verifier.code 0} true;
  $p20 := $bitcast.ref.ref($p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11287, 30} true;
  assume {:verifier.code 0} true;
  $p21 := $p20;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11287, 7} true;
  assume {:verifier.code 0} true;
  $i22 := $p2i.ref.i64($p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11287, 66} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p0, 688);
  $p24 := $add.ref($p0, 688);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11287, 39} true;
  assume {:verifier.code 0} true;
  $i25 := $p2i.ref.i64($p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11287, 36} true;
  assume {:verifier.code 0} true;
  $i26 := $ne.i64($i22, $i25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11287, 7} true;
  assume {:verifier.code 0} true;
  $i27 := 0;
  assume {:branchcond $i26} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i26 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11287, 7} true;
  assume {:verifier.code 0} true;
  $i28, $p29 := 0, $p19;
  goto $bb11;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11287, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i26 == 1));
  goto $bb10;
$bb10:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb11:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11288, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11273, 13} true;
  assume {:verifier.code 0} true;
  $i30 := $ugt.i64(6, 63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11273, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i30 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11275, 11} true;
  assume {:verifier.code 0} true;
  $i31 := $add.i32($i28, 1);
  // WARNING: %36 = add nsw i32 %.14, 1, !dbg !8387, !verifier.code !8332
  call {:cexpr "i"} boogie_si_record_i32($i31);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11276, 66} true;
  assume {:verifier.code 0} true;
  $i32 := $mul.i32($i28, 6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11276, 41} true;
  assume {:verifier.code 0} true;
  $i33 := $sext.i32.i64($i32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11276, 39} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p15, $mul.ref($i33, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11276, 95} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($p29, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11276, 72} true;
  assume {:verifier.code 0} true;
  $p36 := $bitcast.ref.ref($p35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11276, 13} true;
  assume {:verifier.code 0} true;
  call $p37 := __memcpy($p34, $p36, 6);
  assume $isExternal($p37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11278, 3} true;
  assume {:verifier.code 0} true;
  $i38 := $i31;
  goto $bb15;
$bb14:
  assume !(($i30 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11280, 11} true;
  assume {:verifier.code 0} true;
  $i39 := $add.i32($i28, 1);
  // WARNING: %44 = add nsw i32 %.14, 1, !dbg !8400, !verifier.code !8332
  call {:cexpr "i"} boogie_si_record_i32($i39);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11281, 74} true;
  assume {:verifier.code 0} true;
  $i40 := $mul.i32($i28, 6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11281, 49} true;
  assume {:verifier.code 0} true;
  $i41 := $sext.i32.i64($i40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11281, 47} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($p15, $mul.ref($i41, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11281, 103} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p29, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11281, 80} true;
  assume {:verifier.code 0} true;
  $p44 := $bitcast.ref.ref($p43);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11281, 13} true;
  assume {:verifier.code 0} true;
  call $i45 := __builtinx_memcpy.ref.ref.i64($p42, $p44, 6);
  assume {:verifier.code 0} true;
  $i38 := $i39;
  goto $bb15;
$bb15:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11284, 48} true;
  assume {:verifier.code 0} true;
  $p46 := $p29;
  $p47 := $p29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11284, 53} true;
  assume {:verifier.code 0} true;
  $p48 := $load.ref($M.0, $p47);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11285, 8} true;
  assume {:verifier.code 0} true;
  $p49 := $bitcast.ref.ref($p48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11287, 30} true;
  assume {:verifier.code 0} true;
  $p50 := $p49;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11287, 7} true;
  assume {:verifier.code 0} true;
  $i51 := $p2i.ref.i64($p50);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11287, 36} true;
  assume {:verifier.code 0} true;
  $i52 := $ne.i64($i51, $i25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11287, 7} true;
  assume {:verifier.code 0} true;
  $i28, $p29, $i53 := $i38, $p48, $i38;
  assume {:branchcond $i52} true;
  goto $bb16, $bb17;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11287, 7} true;
  assume {:verifier.code 0} true;
  assume ($i52 == 1);
  goto $bb11;
$bb17:
  assume !(($i52 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11287, 7} true;
  assume {:verifier.code 0} true;
  $i27 := $i53;
  goto $bb10;
$bb18:
  $p54 := $add.ref($add.ref($p2, 1448), 32);
  $p55 := $add.ref($add.ref($p2, 1448), 32);
  $p56 := $add.ref($add.ref($add.ref($p2, 1448), 32), 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11292, 18} true;
  assume {:verifier.code 0} true;
  $p57 := $load.ref($M.0, $p56);
  call devirtbounce.7($p57, $p3, $p15, $i27, 0, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11293, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11294, 3} true;
  assume {:verifier.code 0} true;
  goto $bb5;
}
const igbvf_restore_vlan: ref;
axiom (igbvf_restore_vlan == $sub.ref(0, 208483));
procedure  igbvf_restore_vlan($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $i7: i16;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11127, 61} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 424);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11127, 24} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11127, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := find_first_bit($p2, 4096);
  // WARNING: %4 = call i64 @find_first_bit(i64* %3, i64 4096), !dbg !8338, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11128, 9} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.i64.i16($i3);
  // WARNING: %5 = trunc i64 %4 to i16, !dbg !8341, !verifier.code !8334
  call {:cexpr "vid"} boogie_si_record_i16($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11136, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i16.i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11136, 26} true;
  assume {:verifier.code 0} true;
  $i6 := $ule.i32($i5, 4095);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11136, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11136, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $i4;
  goto $bb4;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11136, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i6 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb8;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11137, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11131, 34} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 1176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11131, 34} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11131, 47} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i16.i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11131, 47} true;
  assume {:verifier.code 0} true;
  $i11 := $trunc.i32.i16($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11131, 3} true;
  assume {:verifier.code 0} true;
  call $i12 := igbvf_vlan_rx_add_vid($p9, 129, $i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11132, 64} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p0, 424);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11132, 27} true;
  assume {:verifier.code 0} true;
  $p14 := $bitcast.ref.ref($p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11133, 44} true;
  assume {:verifier.code 0} true;
  $i15 := $zext.i16.i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11133, 54} true;
  assume {:verifier.code 0} true;
  $i16 := $add.i32($i15, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11133, 27} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.i32.i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11132, 13} true;
  assume {:verifier.code 0} true;
  call $i18 := find_next_bit($p14, 4096, $i17);
  // WARNING: %19 = call i64 @find_next_bit(i64* %15, i64 4096, i64 %18), !dbg !8356, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i64($i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11134, 9} true;
  assume {:verifier.code 0} true;
  $i19 := $trunc.i64.i16($i18);
  // WARNING: %20 = trunc i64 %19 to i16, !dbg !8359, !verifier.code !8334
  call {:cexpr "vid"} boogie_si_record_i16($i19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11136, 7} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i16.i32($i19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11136, 26} true;
  assume {:verifier.code 0} true;
  $i21 := $ule.i32($i20, 4095);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11136, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $i19;
  assume {:branchcond $i21} true;
  goto $bb6, $bb7;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11136, 7} true;
  assume {:verifier.code 0} true;
  assume ($i21 == 1);
  goto $bb4;
$bb7:
  assume !(($i21 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11136, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11142, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_configure_tx: ref;
axiom (igbvf_configure_tx == $sub.ref(0, 209515));
procedure  igbvf_configure_tx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11154, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11155, 22} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11155, 22} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  $p4 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11156, 47} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11156, 55} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p5, 14376);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11156, 12} true;
  assume {:verifier.code 0} true;
  call $i7 := readl($p6);
  // WARNING: %8 = call i32 @readl(i8* %7), !dbg !8344, !verifier.code !8334
  call {:cexpr "txdctl"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11157, 17} true;
  assume {:verifier.code 0} true;
  $i8 := $and.i32($i7, $sub.i32(0, 33554433));
  $p9 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11157, 55} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11157, 63} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p10, 14376);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11157, 3} true;
  assume {:verifier.code 0} true;
  call writel($i8, $p11);
  $p12 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11158, 38} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.0, $p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11158, 46} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p13, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11158, 3} true;
  assume {:verifier.code 0} true;
  call $i15 := readl($p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11159, 3} true;
  assume {:verifier.code 0} true;
  call msleep(10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11160, 19} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p3, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11160, 19} true;
  assume {:verifier.code 0} true;
  $i17 := $load.i32($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11160, 25} true;
  assume {:verifier.code 0} true;
  $i18 := $mul.i32($i17, 16);
  $p19 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11160, 55} true;
  assume {:verifier.code 0} true;
  $p20 := $load.ref($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11160, 63} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p20, 14344);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11160, 3} true;
  assume {:verifier.code 0} true;
  call writel($i18, $p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11161, 19} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p3, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11161, 19} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i64($M.0, $p22);
  // WARNING: %24 = load i64, i64* %23, align 8, !dbg !8360, !verifier.code !8334
  call {:cexpr "tdba"} boogie_si_record_i64($i23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11162, 10} true;
  assume {:verifier.code 0} true;
  $i24 := $trunc.i64.i32($i23);
  $p25 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11162, 54} true;
  assume {:verifier.code 0} true;
  $p26 := $load.ref($M.0, $p25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11162, 62} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p26, 14336);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11162, 3} true;
  assume {:verifier.code 0} true;
  call writel($i24, $p27);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11163, 31} true;
  assume {:verifier.code 0} true;
  $i28 := $lshr.i64($i23, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11163, 10} true;
  assume {:verifier.code 0} true;
  $i29 := $trunc.i64.i32($i28);
  $p30 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11163, 62} true;
  assume {:verifier.code 0} true;
  $p31 := $load.ref($M.0, $p30);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11163, 70} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p31, 14340);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11163, 3} true;
  assume {:verifier.code 0} true;
  call writel($i29, $p32);
  $p33 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11164, 37} true;
  assume {:verifier.code 0} true;
  $p34 := $load.ref($M.0, $p33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11164, 45} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($p34, 14352);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11164, 3} true;
  assume {:verifier.code 0} true;
  call writel(0, $p35);
  $p36 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11165, 37} true;
  assume {:verifier.code 0} true;
  $p37 := $load.ref($M.0, $p36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11165, 45} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p37, 14360);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11165, 3} true;
  assume {:verifier.code 0} true;
  call writel(0, $p38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11166, 12} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p3, 36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11166, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p39, 14352);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11167, 12} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p3, 38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11167, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p40, 14360);
  $p41 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11168, 51} true;
  assume {:verifier.code 0} true;
  $p42 := $load.ref($M.0, $p41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11168, 59} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p42, 14356);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11168, 16} true;
  assume {:verifier.code 0} true;
  call $i44 := readl($p43);
  // WARNING: %45 = call i32 @readl(i8* %44), !dbg !8384, !verifier.code !8334
  call {:cexpr "dca_txctrl"} boogie_si_record_i32($i44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11169, 27} true;
  assume {:verifier.code 0} true;
  $i45 := $and.i32($i44, $sub.i32(0, 2049));
  // WARNING: %46 = and i32 %45, -2049, !dbg !8387, !verifier.code !8334
  call {:cexpr "dca_txctrl"} boogie_si_record_i32($i45);
  $p46 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11170, 45} true;
  assume {:verifier.code 0} true;
  $p47 := $load.ref($M.0, $p46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11170, 53} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($p47, 14356);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11170, 3} true;
  assume {:verifier.code 0} true;
  call writel($i45, $p48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11171, 19} true;
  assume {:verifier.code 0} true;
  $i49 := $or.i32($i7, 33554432);
  // WARNING: %50 = or i32 %8, 33554432, !dbg !8391, !verifier.code !8334
  call {:cexpr "txdctl"} boogie_si_record_i32($i49);
  $p50 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11172, 41} true;
  assume {:verifier.code 0} true;
  $p51 := $load.ref($M.0, $p50);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11172, 49} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($p51, 14376);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11172, 3} true;
  assume {:verifier.code 0} true;
  call writel($i49, $p52);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11173, 12} true;
  assume {:verifier.code 0} true;
  $p53 := $add.ref($p0, 1060);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11173, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p53, 50331648);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11174, 31} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($p0, 1060);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11174, 31} true;
  assume {:verifier.code 0} true;
  $i55 := $load.i32($M.0, $p54);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11174, 39} true;
  assume {:verifier.code 0} true;
  $i56 := $or.i32($i55, 134217728);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11174, 12} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($p0, 1060);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11174, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p57, $i56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11175, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_setup_srrctl: ref;
axiom (igbvf_setup_srrctl == $sub.ref(0, 210547));
procedure  igbvf_setup_srrctl($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i14: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11184, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1448);
  // WARNING: call void @llvm.dbg.value(metadata %struct.e1000_hw* %2, i64 0, metadata !10474, metadata !8330), !dbg !10475, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11186, 19} true;
  assume {:verifier.code 0} true;
  $i2 := $and.i32(0, $sub.i32(0, 234897280));
  // WARNING: %3 = and i32 0, -234897280, !dbg !8341, !verifier.code !8334
  call {:cexpr "srrctl"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11187, 19} true;
  assume {:verifier.code 0} true;
  $i3 := $or.i32($i2, $sub.i32(0, 2147483648));
  // WARNING: %4 = or i32 %3, -2147483648, !dbg !8342, !verifier.code !8334
  call {:cexpr "srrctl"} boogie_si_record_i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11188, 23} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 940);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11188, 23} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11188, 37} true;
  assume {:verifier.code 0} true;
  $i6 := $add.i32($i5, 1023);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11188, 46} true;
  assume {:verifier.code 0} true;
  $i7 := $lshr.i32($i6, 10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11188, 53} true;
  assume {:verifier.code 0} true;
  $i8 := $or.i32($i7, $i3);
  // WARNING: %9 = or i32 %8, %4, !dbg !8346, !verifier.code !8334
  call {:cexpr "srrctl"} boogie_si_record_i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11189, 16} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p0, 940);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11189, 16} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11189, 30} true;
  assume {:verifier.code 0} true;
  $i11 := $ule.i32($i10, 2047);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11189, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i11 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11190, 14} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p0, 1160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11190, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p12, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11191, 21} true;
  assume {:verifier.code 0} true;
  $i13 := $or.i32($i8, 33554432);
  // WARNING: %15 = or i32 %9, 33554432, !dbg !8354, !verifier.code !8334
  call {:cexpr "srrctl"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11192, 3} true;
  assume {:verifier.code 0} true;
  $i14 := $i13;
  goto $bb3;
$bb2:
  assume !(($i11 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11193, 14} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p0, 1160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11193, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p15, 128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11194, 24} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p0, 1160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11194, 24} true;
  assume {:verifier.code 0} true;
  $i17 := $load.i32($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11194, 39} true;
  assume {:verifier.code 0} true;
  $i18 := $shl.i32($i17, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11194, 45} true;
  assume {:verifier.code 0} true;
  $i19 := $or.i32($i18, $i8);
  // WARNING: %21 = or i32 %20, %9, !dbg !8361, !verifier.code !8334
  call {:cexpr "srrctl"} boogie_si_record_i32($i19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11195, 21} true;
  assume {:verifier.code 0} true;
  $i20 := $or.i32($i19, 167772160);
  // WARNING: %22 = or i32 %21, 167772160, !dbg !8362, !verifier.code !8334
  call {:cexpr "srrctl"} boogie_si_record_i32($i20);
  assume {:verifier.code 0} true;
  $i14 := $i20;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11197, 41} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11197, 49} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p22, 10252);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11197, 3} true;
  assume {:verifier.code 0} true;
  call writel($i14, $p23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11198, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_configure_rx: ref;
axiom (igbvf_configure_rx == $sub.ref(0, 211579));
procedure  igbvf_configure_rx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11210, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11211, 22} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11211, 22} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  $p4 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11212, 47} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11212, 55} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p5, 10280);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11212, 12} true;
  assume {:verifier.code 0} true;
  call $i7 := readl($p6);
  // WARNING: %8 = call i32 @readl(i8* %7), !dbg !8344, !verifier.code !8334
  call {:cexpr "rxdctl"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11213, 17} true;
  assume {:verifier.code 0} true;
  $i8 := $and.i32($i7, $sub.i32(0, 33554433));
  $p9 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11213, 55} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11213, 63} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p10, 10280);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11213, 3} true;
  assume {:verifier.code 0} true;
  call writel($i8, $p11);
  $p12 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11214, 38} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.0, $p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11214, 46} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p13, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11214, 3} true;
  assume {:verifier.code 0} true;
  call $i15 := readl($p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11215, 3} true;
  assume {:verifier.code 0} true;
  call msleep(10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11217, 19} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p3, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11217, 19} true;
  assume {:verifier.code 0} true;
  $i17 := $load.i64($M.0, $p16);
  // WARNING: %18 = load i64, i64* %17, align 8, !dbg !8355, !verifier.code !8334
  call {:cexpr "rdba"} boogie_si_record_i64($i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11218, 10} true;
  assume {:verifier.code 0} true;
  $i18 := $trunc.i64.i32($i17);
  $p19 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11218, 54} true;
  assume {:verifier.code 0} true;
  $p20 := $load.ref($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11218, 62} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p20, 10240);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11218, 3} true;
  assume {:verifier.code 0} true;
  call writel($i18, $p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11219, 31} true;
  assume {:verifier.code 0} true;
  $i22 := $lshr.i64($i17, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11219, 10} true;
  assume {:verifier.code 0} true;
  $i23 := $trunc.i64.i32($i22);
  $p24 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11219, 62} true;
  assume {:verifier.code 0} true;
  $p25 := $load.ref($M.0, $p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11219, 70} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p25, 10244);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11219, 3} true;
  assume {:verifier.code 0} true;
  call writel($i23, $p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11220, 19} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p3, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11220, 19} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i32($M.0, $p27);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11220, 25} true;
  assume {:verifier.code 0} true;
  $i29 := $mul.i32($i28, 16);
  $p30 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11220, 55} true;
  assume {:verifier.code 0} true;
  $p31 := $load.ref($M.0, $p30);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11220, 63} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p31, 10248);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11220, 3} true;
  assume {:verifier.code 0} true;
  call writel($i29, $p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11221, 12} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p3, 36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11221, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p33, 10256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11222, 12} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p3, 38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11222, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p34, 10264);
  $p35 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11223, 37} true;
  assume {:verifier.code 0} true;
  $p36 := $load.ref($M.0, $p35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11223, 45} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p36, 10256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11223, 3} true;
  assume {:verifier.code 0} true;
  call writel(0, $p37);
  $p38 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11224, 37} true;
  assume {:verifier.code 0} true;
  $p39 := $load.ref($M.0, $p38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11224, 45} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p39, 10264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11224, 3} true;
  assume {:verifier.code 0} true;
  call writel(0, $p40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11225, 19} true;
  assume {:verifier.code 0} true;
  $i41 := $or.i32($i7, 33554432);
  // WARNING: %42 = or i32 %8, 33554432, !dbg !8382, !verifier.code !8334
  call {:cexpr "rxdctl"} boogie_si_record_i32($i41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11226, 19} true;
  assume {:verifier.code 0} true;
  $i42 := $and.i32($i41, $sub.i32(0, 1048576));
  // WARNING: %43 = and i32 %42, -1048576, !dbg !8383, !verifier.code !8334
  call {:cexpr "rxdctl"} boogie_si_record_i32($i42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11227, 19} true;
  assume {:verifier.code 0} true;
  $i43 := $or.i32($i42, 16);
  // WARNING: %44 = or i32 %43, 16, !dbg !8384, !verifier.code !8334
  call {:cexpr "rxdctl"} boogie_si_record_i32($i43);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11228, 19} true;
  assume {:verifier.code 0} true;
  $i44 := $or.i32($i43, 2048);
  // WARNING: %45 = or i32 %44, 2048, !dbg !8385, !verifier.code !8334
  call {:cexpr "rxdctl"} boogie_si_record_i32($i44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11229, 19} true;
  assume {:verifier.code 0} true;
  $i45 := $or.i32($i44, 65536);
  // WARNING: %46 = or i32 %45, 65536, !dbg !8386, !verifier.code !8334
  call {:cexpr "rxdctl"} boogie_si_record_i32($i45);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11230, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_set_rlpml($p0);
  $p46 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11231, 41} true;
  assume {:verifier.code 0} true;
  $p47 := $load.ref($M.0, $p46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11231, 49} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($p47, 10280);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11231, 3} true;
  assume {:verifier.code 0} true;
  call writel($i45, $p48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11232, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_desc_unused: ref;
axiom (igbvf_desc_unused == $sub.ref(0, 212611));
procedure  igbvf_desc_unused($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i16: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9765, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9765, 19} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i16($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9765, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i16.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9765, 47} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9765, 47} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i16($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9765, 35} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i16.i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9765, 33} true;
  assume {:verifier.code 0} true;
  $i7 := $sgt.i32($i3, $i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9765, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9766, 26} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9766, 26} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i16($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9766, 14} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i16.i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9766, 54} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p0, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9766, 54} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i16($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9766, 42} true;
  assume {:verifier.code 0} true;
  $i13 := $zext.i16.i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9766, 40} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32($i10, $i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9766, 67} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i32($i14, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9766, 5} true;
  assume {:verifier.code 0} true;
  $i16 := $i15;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9772, 1} true;
  assume {:verifier.code 0} true;
  $r := $i16;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9770, 26} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p0, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9770, 26} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i32($M.0, $p17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9770, 55} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p0, 34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9770, 55} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i16($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9770, 34} true;
  assume {:verifier.code 0} true;
  $i21 := $zext.i16.i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9770, 32} true;
  assume {:verifier.code 0} true;
  $i22 := $add.i32($i18, $i21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9770, 93} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p0, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9770, 93} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i16($M.0, $p23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9770, 72} true;
  assume {:verifier.code 0} true;
  $i25 := $zext.i16.i32($i24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9770, 70} true;
  assume {:verifier.code 0} true;
  $i26 := $sub.i32($i22, $i25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9770, 106} true;
  assume {:verifier.code 0} true;
  $i27 := $sub.i32($i26, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9770, 3} true;
  assume {:verifier.code 0} true;
  $i16 := $i27;
  goto $bb3;
}
const igbvf_alloc_rx_buffers: ref;
axiom (igbvf_alloc_rx_buffers == $sub.ref(0, 213643));
procedure  igbvf_alloc_rx_buffers($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $i20: i32;
  var $i23: i32;
  var $i24: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i64;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $i115: i32;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i64;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i64;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $p160: ref;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $p164: ref;
  var $p165: ref;
  var $i166: i64;
  var $p167: ref;
  var $i168: i32;
  var $i169: i1;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i170: i32;
  var $i25: i32;
  var $i107: i32;
  var $i63: i32;
  var $p171: ref;
  var $i172: i16;
  var $i173: i32;
  var $i174: i1;
  var $i175: i16;
  var $p176: ref;
  var $i177: i1;
  var $p178: ref;
  var $i179: i32;
  var $i180: i32;
  var $i182: i32;
  var $i181: i32;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i16;
  var $i188: i64;
  var $p189: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.igbvf_ring* %0, i64 0, metadata !10598, metadata !8330), !dbg !10599, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9843, 22} true;
  assume {:verifier.code 0} true;
  $p2 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9843, 22} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9844, 21} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p3, 1176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9844, 21} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9845, 19} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p3, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9845, 19} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9846, 31} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9846, 31} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i16($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9846, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i16.i32($i9);
  // WARNING: %11 = zext i16 %10 to i32, !dbg !8348, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9847, 26} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p0, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9847, 26} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9847, 40} true;
  assume {:verifier.code 0} true;
  $i13 := $zext.i32.i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9847, 38} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p12, $mul.ref($i13, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9848, 16} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p3, 1160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9848, 16} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9848, 31} true;
  assume {:verifier.code 0} true;
  $i17 := $ne.i32($i16, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9848, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i17 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9849, 28} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p3, 1160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9849, 28} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i32($M.0, $p18);
  // WARNING: %21 = load i32, i32* %20, align 8, !dbg !8360, !verifier.code !8334
  call {:cexpr "bufsz"} boogie_si_record_i32($i19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9850, 3} true;
  assume {:verifier.code 0} true;
  $i20 := $i19;
  goto $bb3;
$bb2:
  assume !(($i17 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9851, 28} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p3, 940);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9851, 28} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i32($M.0, $p21);
  // WARNING: %24 = load i32, i32* %23, align 4, !dbg !8365, !verifier.code !8334
  call {:cexpr "bufsz"} boogie_si_record_i32($i22);
  assume {:verifier.code 0} true;
  $i20 := $i22;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  // WARNING: %.0 = phi i32 [ %21, %19 ], [ %24, %22 ], !verifier.code !8334
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9923, 33} true;
  assume {:verifier.code 0} true;
  $i23 := $sub.i32($i1, 1);
  // WARNING: %26 = sub nsw i32 %1, 1, !dbg !8369, !verifier.code !8334
  call {:cexpr "cleaned_count"} boogie_si_record_i32($i23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9924, 15} true;
  assume {:verifier.code 0} true;
  $i24 := $ne.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9924, 7} true;
  assume {:verifier.code 0} true;
  $i25 := $i10;
  assume {:branchcond $i24} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i24 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9924, 7} true;
  assume {:verifier.code 0} true;
  $i26, $i27, $p28 := $i23, $i10, $p14;
  goto $bb7;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9924, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i24 == 1));
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb43;
$bb7:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9925, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9855, 25} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9855, 25} true;
  assume {:verifier.code 0} true;
  $p30 := $load.ref($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9855, 32} true;
  assume {:verifier.code 0} true;
  $i31 := $zext.i32.i64($i27);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9855, 30} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p30, $mul.ref($i31, 16));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9855, 52} true;
  assume {:verifier.code 0} true;
  $p33 := $bitcast.ref.ref($p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9856, 16} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p3, 1160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9856, 16} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i32($M.0, $p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9856, 31} true;
  assume {:verifier.code 0} true;
  $i36 := $ne.i32($i35, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9856, 37} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i36 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9856, 53} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p28, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9856, 63} true;
  assume {:verifier.code 0} true;
  $p38 := $bitcast.ref.ref($p37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9856, 73} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p38, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9856, 73} true;
  assume {:verifier.code 0} true;
  $i40 := $load.i64($M.0, $p39);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9856, 82} true;
  assume {:verifier.code 0} true;
  $i41 := $eq.i64($i40, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9856, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb12, $bb13;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9856, 37} true;
  assume {:verifier.code 0} true;
  assume !(($i36 == 1));
  goto $bb11;
$bb11:
  assume {:verifier.code 0} true;
  goto $bb25;
$bb12:
  assume ($i41 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9857, 38} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($p28, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9857, 48} true;
  assume {:verifier.code 0} true;
  $p43 := $bitcast.ref.ref($p42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9857, 58} true;
  assume {:verifier.code 0} true;
  $p44 := $p43;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9857, 58} true;
  assume {:verifier.code 0} true;
  $p45 := $load.ref($M.0, $p44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9857, 9} true;
  assume {:verifier.code 0} true;
  $i46 := $p2i.ref.i64($p45);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9857, 63} true;
  assume {:verifier.code 0} true;
  $i47 := $eq.i64($i46, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9857, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i47} true;
  goto $bb14, $bb15;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9856, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i41 == 1));
  goto $bb11;
$bb14:
  assume ($i47 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9858, 47} true;
  assume {:verifier.code 0} true;
  call $p48 := alloc_pages(32, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9858, 20} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($p28, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9858, 30} true;
  assume {:verifier.code 0} true;
  $p50 := $bitcast.ref.ref($p49);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9858, 40} true;
  assume {:verifier.code 0} true;
  $p51 := $p50;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9858, 45} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p51, $p48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9859, 40} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($p28, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9859, 50} true;
  assume {:verifier.code 0} true;
  $p53 := $bitcast.ref.ref($p52);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9859, 60} true;
  assume {:verifier.code 0} true;
  $p54 := $p53;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9859, 60} true;
  assume {:verifier.code 0} true;
  $p55 := $load.ref($M.0, $p54);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9859, 11} true;
  assume {:verifier.code 0} true;
  $i56 := $p2i.ref.i64($p55);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9859, 65} true;
  assume {:verifier.code 0} true;
  $i57 := $eq.i64($i56, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9859, 11} true;
  assume {:verifier.code 0} true;
  $i58 := $i27;
  assume {:branchcond $i57} true;
  goto $bb16, $bb17;
$bb15:
  assume !(($i47 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9867, 67} true;
  assume {:verifier.code 0} true;
  $p67 := $add.ref($p28, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9867, 77} true;
  assume {:verifier.code 0} true;
  $p68 := $bitcast.ref.ref($p67);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9867, 87} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($p68, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9867, 87} true;
  assume {:verifier.code 0} true;
  $i70 := $load.i32($M.0, $p69);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9867, 99} true;
  assume {:verifier.code 0} true;
  $i71 := $xor.i32($i70, 2048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9867, 20} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($p28, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9867, 30} true;
  assume {:verifier.code 0} true;
  $p73 := $bitcast.ref.ref($p72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9867, 40} true;
  assume {:verifier.code 0} true;
  $p74 := $add.ref($p73, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9867, 52} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p74, $i71);
  assume {:verifier.code 0} true;
  goto $bb20;
$bb16:
  assume ($i57 == 1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9860, 50} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($p3, 1152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9860, 50} true;
  assume {:verifier.code 0} true;
  $i60 := $load.i32($M.0, $p59);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9860, 71} true;
  assume {:verifier.code 0} true;
  $i61 := $add.i32($i60, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9860, 18} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($p3, 1152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9860, 39} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p62, $i61);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9861, 9} true;
  assume {:verifier.code 0} true;
  $i63 := $i58;
  goto $bb18;
$bb17:
  assume !(($i57 == 1));
  assume {:verifier.code 0} true;
  goto $bb19;
$bb18:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9931, 31} true;
  assume {:verifier.code 0} true;
  $p171 := $add.ref($p0, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9931, 31} true;
  assume {:verifier.code 0} true;
  $i172 := $load.i16($M.0, $p171);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9931, 7} true;
  assume {:verifier.code 0} true;
  $i173 := $zext.i16.i32($i172);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9931, 43} true;
  assume {:verifier.code 0} true;
  $i174 := $ne.i32($i173, $i63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9931, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i174} true;
  goto $bb44, $bb45;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9865, 20} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($p28, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9865, 30} true;
  assume {:verifier.code 0} true;
  $p65 := $bitcast.ref.ref($p64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9865, 40} true;
  assume {:verifier.code 0} true;
  $p66 := $add.ref($p65, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9865, 52} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p66, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9866, 5} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9869, 70} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($p7, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9869, 88} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($p28, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9869, 98} true;
  assume {:verifier.code 0} true;
  $p77 := $bitcast.ref.ref($p76);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9869, 108} true;
  assume {:verifier.code 0} true;
  $p78 := $p77;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9869, 108} true;
  assume {:verifier.code 0} true;
  $p79 := $load.ref($M.0, $p78);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9870, 84} true;
  assume {:verifier.code 0} true;
  $p80 := $add.ref($p28, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9870, 94} true;
  assume {:verifier.code 0} true;
  $p81 := $bitcast.ref.ref($p80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9870, 104} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($p81, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9870, 104} true;
  assume {:verifier.code 0} true;
  $i83 := $load.i32($M.0, $p82);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9870, 62} true;
  assume {:verifier.code 0} true;
  $i84 := $zext.i32.i64($i83);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9869, 49} true;
  assume {:verifier.code 0} true;
  call $i85 := dma_map_page($p75, $p79, $i84, 2048, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9869, 18} true;
  assume {:verifier.code 0} true;
  $p86 := $add.ref($p28, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9869, 28} true;
  assume {:verifier.code 0} true;
  $p87 := $bitcast.ref.ref($p86);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9869, 38} true;
  assume {:verifier.code 0} true;
  $p88 := $add.ref($p87, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9869, 47} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p88, $i85);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9872, 37} true;
  assume {:verifier.code 0} true;
  $p89 := $add.ref($p7, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9872, 55} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($p28, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9872, 65} true;
  assume {:verifier.code 0} true;
  $p91 := $bitcast.ref.ref($p90);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9872, 75} true;
  assume {:verifier.code 0} true;
  $p92 := $add.ref($p91, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9872, 75} true;
  assume {:verifier.code 0} true;
  $i93 := $load.i64($M.0, $p92);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9872, 11} true;
  assume {:verifier.code 0} true;
  call $i94 := dma_mapping_error($p89, $i93);
  // WARNING: %100 = call i32 @dma_mapping_error(%struct.device* %95, i64 %99), !dbg !8448, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i94);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9873, 13} true;
  assume {:verifier.code 0} true;
  $i95 := $ne.i32($i94, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9873, 9} true;
  assume {:verifier.code 0} true;
  $p96, $i97 := $p28, $i27;
  assume {:branchcond $i95} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i95 == 1);
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9874, 33} true;
  assume {:verifier.code 0} true;
  $p98 := $add.ref($p96, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9874, 43} true;
  assume {:verifier.code 0} true;
  $p99 := $bitcast.ref.ref($p98);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9874, 53} true;
  assume {:verifier.code 0} true;
  $p100 := $p99;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9874, 53} true;
  assume {:verifier.code 0} true;
  $p101 := $load.ref($M.0, $p100);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9874, 7} true;
  assume {:verifier.code 0} true;
  call __free_pages($p101, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9875, 20} true;
  assume {:verifier.code 0} true;
  $p102 := $add.ref($p96, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9875, 30} true;
  assume {:verifier.code 0} true;
  $p103 := $bitcast.ref.ref($p102);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9875, 40} true;
  assume {:verifier.code 0} true;
  $p104 := $p103;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9875, 45} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p104, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9876, 49} true;
  assume {:verifier.code 0} true;
  $p105 := $add.ref($p7, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9876, 7} true;
  assume {:verifier.code 0} true;
  call $i106 := dev_err.ref.ref($p105, .str.6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9877, 7} true;
  assume {:verifier.code 0} true;
  $i107 := $i97;
  goto $bb23;
$bb22:
  assume !(($i95 == 1));
  assume {:verifier.code 0} true;
  goto $bb24;
$bb23:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9924, 18} true;
  assume {:verifier.code 0} true;
  $i63 := $i107;
  goto $bb18;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9881, 3} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9884, 36} true;
  assume {:verifier.code 0} true;
  $p108 := $add.ref($p28, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9884, 36} true;
  assume {:verifier.code 0} true;
  $p109 := $load.ref($M.0, $p108);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9884, 7} true;
  assume {:verifier.code 0} true;
  $i110 := $p2i.ref.i64($p109);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9884, 40} true;
  assume {:verifier.code 0} true;
  $i111 := $eq.i64($i110, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9884, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i111} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i111 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9885, 11} true;
  assume {:verifier.code 0} true;
  call $p112 := netdev_alloc_skb_ip_align($p5, $i20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9886, 9} true;
  assume {:verifier.code 0} true;
  $i113 := $p2i.ref.i64($p112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9886, 29} true;
  assume {:verifier.code 0} true;
  $i114 := $eq.i64($i113, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9886, 9} true;
  assume {:verifier.code 0} true;
  $i115 := $i27;
  assume {:branchcond $i114} true;
  goto $bb28, $bb29;
$bb27:
  assume !(($i111 == 1));
  assume {:verifier.code 0} true;
  goto $bb34;
$bb28:
  assume ($i114 == 1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9887, 48} true;
  assume {:verifier.code 0} true;
  $p116 := $add.ref($p3, 1152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9887, 48} true;
  assume {:verifier.code 0} true;
  $i117 := $load.i32($M.0, $p116);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9887, 69} true;
  assume {:verifier.code 0} true;
  $i118 := $add.i32($i117, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9887, 16} true;
  assume {:verifier.code 0} true;
  $p119 := $add.ref($p3, 1152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9887, 37} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p119, $i118);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9888, 7} true;
  assume {:verifier.code 0} true;
  $i63 := $i115;
  goto $bb18;
$bb29:
  assume !(($i114 == 1));
  assume {:verifier.code 0} true;
  goto $bb30;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9892, 18} true;
  assume {:verifier.code 0} true;
  $p120 := $add.ref($p28, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9892, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p120, $p112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9893, 53} true;
  assume {:verifier.code 0} true;
  $p121 := $add.ref($p7, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9893, 71} true;
  assume {:verifier.code 0} true;
  $p122 := $add.ref($p112, 216);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9893, 71} true;
  assume {:verifier.code 0} true;
  $p123 := $load.ref($M.0, $p122);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9893, 77} true;
  assume {:verifier.code 0} true;
  $i124 := $sext.i32.i64($i20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9893, 24} true;
  assume {:verifier.code 0} true;
  call $i125 := dma_map_single_attrs($p121, $p123, $i124, 2, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9893, 18} true;
  assume {:verifier.code 0} true;
  $p126 := $p28;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9893, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p126, $i125);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9895, 41} true;
  assume {:verifier.code 0} true;
  $p127 := $add.ref($p7, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9895, 59} true;
  assume {:verifier.code 0} true;
  $p128 := $p28;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9895, 59} true;
  assume {:verifier.code 0} true;
  $i129 := $load.i64($M.0, $p128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9895, 15} true;
  assume {:verifier.code 0} true;
  call $i130 := dma_mapping_error($p127, $i129);
  // WARNING: %141 = call i32 @dma_mapping_error(%struct.device* %138, i64 %140), !dbg !8496, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i32($i130);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9896, 17} true;
  assume {:verifier.code 0} true;
  $i131 := $ne.i32($i130, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9896, 9} true;
  assume {:verifier.code 0} true;
  $p132, $i133 := $p28, $i27;
  assume {:branchcond $i131} true;
  goto $bb31, $bb32;
$bb31:
  assume ($i131 == 1);
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9897, 33} true;
  assume {:verifier.code 0} true;
  $p134 := $add.ref($p132, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9897, 33} true;
  assume {:verifier.code 0} true;
  $p135 := $load.ref($M.0, $p134);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9897, 20} true;
  assume {:verifier.code 0} true;
  $p136 := $bitcast.ref.ref($p135);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9897, 7} true;
  assume {:verifier.code 0} true;
  call ldv_skb_free($p136);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9898, 20} true;
  assume {:verifier.code 0} true;
  $p137 := $add.ref($p132, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9898, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p137, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9899, 49} true;
  assume {:verifier.code 0} true;
  $p138 := $add.ref($p7, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9899, 7} true;
  assume {:verifier.code 0} true;
  call $i139 := dev_err.ref.ref($p138, .str.6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9900, 7} true;
  assume {:verifier.code 0} true;
  $i63 := $i133;
  goto $bb18;
$bb32:
  assume !(($i131 == 1));
  assume {:verifier.code 0} true;
  goto $bb33;
$bb33:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9904, 3} true;
  assume {:verifier.code 0} true;
  goto $bb34;
$bb34:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9907, 16} true;
  assume {:verifier.code 0} true;
  $p140 := $add.ref($p3, 1160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9907, 16} true;
  assume {:verifier.code 0} true;
  $i141 := $load.i32($M.0, $p140);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9907, 31} true;
  assume {:verifier.code 0} true;
  $i142 := $ne.i32($i141, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9907, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i142} true;
  goto $bb35, $bb36;
$bb35:
  assume ($i142 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9908, 43} true;
  assume {:verifier.code 0} true;
  $p143 := $add.ref($p28, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9908, 53} true;
  assume {:verifier.code 0} true;
  $p144 := $bitcast.ref.ref($p143);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9908, 63} true;
  assume {:verifier.code 0} true;
  $p145 := $add.ref($p144, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9908, 63} true;
  assume {:verifier.code 0} true;
  $i146 := $load.i64($M.0, $p145);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9908, 14} true;
  assume {:verifier.code 0} true;
  $p147 := $bitcast.ref.ref($p33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9908, 19} true;
  assume {:verifier.code 0} true;
  $p148 := $p147;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9908, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p148, $i146);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9909, 43} true;
  assume {:verifier.code 0} true;
  $p149 := $p28;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9909, 43} true;
  assume {:verifier.code 0} true;
  $i150 := $load.i64($M.0, $p149);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9909, 14} true;
  assume {:verifier.code 0} true;
  $p151 := $bitcast.ref.ref($p33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9909, 19} true;
  assume {:verifier.code 0} true;
  $p152 := $add.ref($p151, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9909, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p152, $i150);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9910, 3} true;
  assume {:verifier.code 0} true;
  goto $bb37;
$bb36:
  assume !(($i142 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9911, 43} true;
  assume {:verifier.code 0} true;
  $p153 := $p28;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9911, 43} true;
  assume {:verifier.code 0} true;
  $i154 := $load.i64($M.0, $p153);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9911, 14} true;
  assume {:verifier.code 0} true;
  $p155 := $bitcast.ref.ref($p33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9911, 19} true;
  assume {:verifier.code 0} true;
  $p156 := $p155;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9911, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p156, $i154);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9912, 14} true;
  assume {:verifier.code 0} true;
  $p157 := $bitcast.ref.ref($p33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9912, 19} true;
  assume {:verifier.code 0} true;
  $p158 := $add.ref($p157, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9912, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p158, 0);
  assume {:verifier.code 0} true;
  goto $bb37;
$bb37:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9914, 9} true;
  assume {:verifier.code 0} true;
  $i159 := $add.i32($i27, 1);
  // WARNING: %176 = add i32 %.115, 1, !dbg !8536, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i159);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9915, 16} true;
  assume {:verifier.code 0} true;
  $p160 := $add.ref($p0, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9915, 16} true;
  assume {:verifier.code 0} true;
  $i161 := $load.i32($M.0, $p160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9915, 22} true;
  assume {:verifier.code 0} true;
  $i162 := $eq.i32($i161, $i159);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9915, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i162} true;
  goto $bb38, $bb39;
$bb38:
  assume ($i162 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9917, 3} true;
  assume {:verifier.code 0} true;
  $i163 := 0;
  goto $bb40;
$bb39:
  assume !(($i162 == 1));
  assume {:verifier.code 0} true;
  $i163 := $i159;
  goto $bb40;
$bb40:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9920, 26} true;
  assume {:verifier.code 0} true;
  $p164 := $add.ref($p0, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9920, 26} true;
  assume {:verifier.code 0} true;
  $p165 := $load.ref($M.0, $p164);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9920, 40} true;
  assume {:verifier.code 0} true;
  $i166 := $zext.i32.i64($i163);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9920, 38} true;
  assume {:verifier.code 0} true;
  $p167 := $add.ref($p165, $mul.ref($i166, 40));
  // WARNING: call void @llvm.dbg.value(metadata %struct.igbvf_buffer* %186, i64 0, metadata !10619, metadata !8330), !dbg !10620, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9923, 33} true;
  assume {:verifier.code 0} true;
  $i168 := $sub.i32($i26, 1);
  // WARNING: %187 = sub nsw i32 %190, 1, !dbg !8369, !verifier.code !8334
  call {:cexpr "cleaned_count"} boogie_si_record_i32($i168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9924, 15} true;
  assume {:verifier.code 0} true;
  $i169 := $ne.i32($i26, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9924, 7} true;
  assume {:verifier.code 0} true;
  $i26, $i27, $p28, $i170 := $i168, $i163, $p167, $i163;
  assume {:branchcond $i169} true;
  goto $bb41, $bb42;
$bb41:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9924, 7} true;
  assume {:verifier.code 0} true;
  assume ($i169 == 1);
  goto $bb7;
$bb42:
  assume !(($i169 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9924, 7} true;
  assume {:verifier.code 0} true;
  $i25 := $i170;
  goto $bb6;
$bb43:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9924, 18} true;
  assume {:verifier.code 0} true;
  $i107 := $i25;
  goto $bb23;
$bb44:
  assume ($i174 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9932, 28} true;
  assume {:verifier.code 0} true;
  $i175 := $trunc.i32.i16($i63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9932, 14} true;
  assume {:verifier.code 0} true;
  $p176 := $add.ref($p0, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9932, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p176, $i175);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9933, 11} true;
  assume {:verifier.code 0} true;
  $i177 := $eq.i32($i63, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9933, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i177} true;
  goto $bb46, $bb47;
$bb45:
  assume !(($i174 == 1));
  assume {:verifier.code 0} true;
  goto $bb49;
$bb46:
  assume ($i177 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9934, 20} true;
  assume {:verifier.code 0} true;
  $p178 := $add.ref($p0, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9934, 20} true;
  assume {:verifier.code 0} true;
  $i179 := $load.i32($M.0, $p178);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9934, 26} true;
  assume {:verifier.code 0} true;
  $i180 := $sub.i32($i179, 1);
  // WARNING: %206 = sub i32 %205, 1, !dbg !8566, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i180);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9935, 5} true;
  assume {:verifier.code 0} true;
  $i181 := $i180;
  goto $bb48;
$bb47:
  assume !(($i177 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9936, 13} true;
  assume {:verifier.code 0} true;
  $i182 := $sub.i32($i63, 1);
  // WARNING: %208 = sub i32 %.18, 1, !dbg !8568, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i182);
  assume {:verifier.code 0} true;
  $i181 := $i182;
  goto $bb48;
$bb48:
  assume {:verifier.code 0} true;
  call devirtbounce.5(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9939, 43} true;
  assume {:verifier.code 0} true;
  $p183 := $add.ref($p3, 1448);
  $p184 := $add.ref($add.ref($p3, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9939, 46} true;
  assume {:verifier.code 0} true;
  $p185 := $load.ref($M.0, $p184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9939, 81} true;
  assume {:verifier.code 0} true;
  $p186 := $add.ref($p0, 38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9939, 81} true;
  assume {:verifier.code 0} true;
  $i187 := $load.i16($M.0, $p186);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9939, 56} true;
  assume {:verifier.code 0} true;
  $i188 := $zext.i16.i64($i187);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9939, 54} true;
  assume {:verifier.code 0} true;
  $p189 := $add.ref($p185, $mul.ref($i188, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9939, 5} true;
  assume {:verifier.code 0} true;
  call writel($i181, $p189);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9940, 3} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb49:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9943, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const alloc_pages: ref;
axiom (alloc_pages == $sub.ref(0, 214675));
procedure  alloc_pages($i0: i32, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !10846, metadata !8330), !dbg !10847, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8438, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := alloc_pages_current($i0, $i1);
  assume $isExternal($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8439, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const dma_map_page: ref;
axiom (dma_map_page == $sub.ref(0, 215707));
procedure  dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32)
  returns ($r: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.page* %1, i64 0, metadata !10860, metadata !8330), !dbg !10861, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i64 %2, i64 0, metadata !10862, metadata !8330), !dbg !10863, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i64 %3, i64 0, metadata !10864, metadata !8330), !dbg !10865, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8762, 9} true;
  assume {:verifier.code 0} true;
  call $p5 := get_dma_ops($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8764, 13} true;
  assume {:verifier.code 0} true;
  call $p6 := lowmem_page_address($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8765, 38} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p6, $mul.ref($i2, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8765, 48} true;
  assume {:verifier.code 0} true;
  $i8 := $trunc.i64.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8765, 3} true;
  assume {:verifier.code 0} true;
  call kmemcheck_mark_initialized($p7, $i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8766, 13} true;
  assume {:verifier.code 0} true;
  call $i9 := valid_dma_direction($i4);
  // WARNING: %10 = call i32 @valid_dma_direction(i32 %4), !dbg !8355, !verifier.code !8334
  call {:cexpr "tmp___1"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8767, 41} true;
  assume {:verifier.code 0} true;
  $i10 := $eq.i32($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8767, 41} true;
  assume {:verifier.code 0} true;
  $i11 := $zext.i1.i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8767, 33} true;
  assume {:verifier.code 0} true;
  $i12 := $sext.i32.i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8767, 13} true;
  assume {:verifier.code 0} true;
  call $i13 := ldv__builtin_expect($i12, 0);
  // WARNING: %14 = call i64 @ldv__builtin_expect(i64 %13, i64 0), !dbg !8360, !verifier.code !8334
  call {:cexpr "tmp___2"} boogie_si_record_i64($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8768, 15} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i64($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8768, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i14 == 1);
  call devirtbounce.4(0, .str.3, 79, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8769, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8772, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8776, 18} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p5, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8776, 18} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.0, $p15);
  call $i17 := devirtbounce.8($p16, $p0, $p1, $i2, $i3, $i4, $0.ref);
  // WARNING: %22 = call i64 @devirtbounce.8(i64 (%struct.device*, %struct.page*, i64, i64, i32, %struct.__anonstruct_sigset_t_155*)* %21, %struct.device* %0, %struct.page* %1, i64 %2, i64 %3, i32 %4, %struct.__anonstruct_sigset_t_155* null)
  call {:cexpr "addr"} boogie_si_record_i64($i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8777, 3} true;
  assume {:verifier.code 0} true;
  call debug_dma_map_page($p0, $p1, $i2, $i3, $i4, $i17, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8778, 3} true;
  assume {:verifier.code 0} true;
  $r := $i17;
  $exn := false;
  return;
}
const dma_mapping_error: ref;
axiom (dma_mapping_error == $sub.ref(0, 216739));
procedure  dma_mapping_error($p0: ref, $i1: i64)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i11: i1;
  var $i12: i32;
  var $i10: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.device* %0, i64 0, metadata !10900, metadata !8330), !dbg !10901, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8821, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := get_dma_ops($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8823, 3} true;
  assume {:verifier.code 0} true;
  call debug_dma_mapping_error($p0, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8824, 28} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8824, 28} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8824, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8824, 42} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i64($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8824, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8826, 23} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p2, 96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8826, 23} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.0, $p7);
  call $i9 := devirtbounce.9($p8, $p0, $i1);
  // WARNING: %11 = call i32 @devirtbounce.9(i32 (%struct.device*, i64)* %10, %struct.device* %0, i64 %1)
  call {:cexpr "tmp___0"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8827, 5} true;
  assume {:verifier.code 0} true;
  $i10 := $i9;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8833, 1} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8831, 20} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i64($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8831, 20} true;
  assume {:verifier.code 0} true;
  $i12 := $zext.i1.i32($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8831, 3} true;
  assume {:verifier.code 0} true;
  $i10 := $i12;
  goto $bb3;
}
const __free_pages: ref;
axiom (__free_pages == $sub.ref(0, 217771));
procedure  __free_pages($p0: ref, $i1: i32);
const dev_err: ref;
axiom (dev_err == $sub.ref(0, 218803));
procedure  dev_err.ref.ref($p0: ref, $p1: ref)
  returns ($r: i32);
procedure  dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
  returns ($r: i32);
const netdev_alloc_skb_ip_align: ref;
axiom (netdev_alloc_skb_ip_align == $sub.ref(0, 219835));
procedure  netdev_alloc_skb_ip_align($p0: ref, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !10927, metadata !8330), !dbg !10928, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9118, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := __netdev_alloc_skb_ip_align($p0, $i1, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9119, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const dma_map_single_attrs: ref;
axiom (dma_map_single_attrs == $sub.ref(0, 220867));
procedure  dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref)
  returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !10941, metadata !8330), !dbg !10942, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i64 %2, i64 0, metadata !10943, metadata !8330), !dbg !10944, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8695, 9} true;
  assume {:verifier.code 0} true;
  call $p5 := get_dma_ops($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8697, 35} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.i64.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8697, 3} true;
  assume {:verifier.code 0} true;
  call kmemcheck_mark_initialized($p1, $i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8698, 13} true;
  assume {:verifier.code 0} true;
  call $i7 := valid_dma_direction($i3);
  // WARNING: %8 = call i32 @valid_dma_direction(i32 %3), !dbg !8351, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8699, 41} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8699, 41} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i1.i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8699, 33} true;
  assume {:verifier.code 0} true;
  $i10 := $sext.i32.i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8699, 13} true;
  assume {:verifier.code 0} true;
  call $i11 := ldv__builtin_expect($i10, 0);
  // WARNING: %12 = call i64 @ldv__builtin_expect(i64 %11, i64 0), !dbg !8356, !verifier.code !8334
  call {:cexpr "tmp___1"} boogie_si_record_i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8700, 15} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i64($i11, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8700, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i12 == 1);
  call devirtbounce.4(0, .str.3, 19, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8701, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8704, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8708, 25} true;
  assume {:verifier.code 0} true;
  $i13 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8708, 13} true;
  assume {:verifier.code 0} true;
  call $i14 := __phys_addr($i13);
  // WARNING: %19 = call i64 @__phys_addr(i64 %18), !dbg !8366, !verifier.code !8334
  call {:cexpr "tmp___2"} boogie_si_record_i64($i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8709, 18} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p5, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8709, 18} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8709, 77} true;
  assume {:verifier.code 0} true;
  $i17 := $lshr.i64($i14, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8709, 66} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8710, 29} true;
  assume {:verifier.code 0} true;
  $i19 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8710, 49} true;
  assume {:verifier.code 0} true;
  $i20 := $and.i64($i19, 4095);
  call $i21 := devirtbounce.8($p16, $p0, $p18, $i20, $i2, $i3, $p4);
  // WARNING: %26 = call i64 @devirtbounce.8(i64 (%struct.device*, %struct.page*, i64, i64, i32, %struct.__anonstruct_sigset_t_155*)* %21, %struct.device* %0, %struct.page* %23, i64 %25, i64 %2, i32 %3, %struct.__anonstruct_sigset_t_155* %4)
  call {:cexpr "addr"} boogie_si_record_i64($i21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8711, 25} true;
  assume {:verifier.code 0} true;
  $i22 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8711, 13} true;
  assume {:verifier.code 0} true;
  call $i23 := __phys_addr($i22);
  // WARNING: %28 = call i64 @__phys_addr(i64 %27), !dbg !8377, !verifier.code !8334
  call {:cexpr "tmp___3"} boogie_si_record_i64($i23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8712, 70} true;
  assume {:verifier.code 0} true;
  $i24 := $lshr.i64($i23, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8712, 59} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8712, 78} true;
  assume {:verifier.code 0} true;
  $i26 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8712, 98} true;
  assume {:verifier.code 0} true;
  $i27 := $and.i64($i26, 4095);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8712, 3} true;
  assume {:verifier.code 0} true;
  call debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8714, 3} true;
  assume {:verifier.code 0} true;
  $r := $i21;
  $exn := false;
  return;
}
const ldv_skb_free: ref;
axiom (ldv_skb_free == $sub.ref(0, 221899));
procedure  ldv_skb_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14828, 18} true;
  assume {:verifier.code 0} true;
  $p1 := $M.10;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14828, 28} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14828, 3} true;
  assume {:verifier.code 0} true;
  call ldv_set_remove($p1, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14829, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_set_remove: ref;
axiom (ldv_set_remove == $sub.ref(0, 222931));
procedure  ldv_set_remove($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !11005, metadata !8330), !dbg !11006, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 -1, i64 0, metadata !11007, metadata !8330), !dbg !11008, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14691, 13} true;
  assume {:verifier.code 0} true;
  $i2 := $M.11;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14691, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.i32(0, $i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14691, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14691, 9} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14691, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14694, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $sub.i32(0, 1);
  goto $bb7;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14693, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14696, 25} true;
  assume {:verifier.code 0} true;
  $i6 := $sext.i32.i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14696, 25} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref(set_impl, $mul.ref($i6, 8));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14696, 25} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.12, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14696, 9} true;
  assume {:verifier.code 0} true;
  $i9 := $p2i.ref.i64($p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14696, 40} true;
  assume {:verifier.code 0} true;
  $i10 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14696, 37} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i64($i9, $i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14696, 9} true;
  assume {:verifier.code 0} true;
  $i12 := $i4;
  assume {:branchcond $i11} true;
  goto $bb8, $bb9;
$bb6:
  assume !(($i15 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14691, 9} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb7:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14704, 21} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i32($i5, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14704, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb12, $bb13;
$bb8:
  assume ($i11 == 1);
  assume {:verifier.code 0} true;
  // WARNING: %.01.lcssa2 = phi i32 [ %.014, %7 ], !verifier.code !8334
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14698, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $i12;
  goto $bb7;
$bb9:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14702, 11} true;
  assume {:verifier.code 0} true;
  $i13 := $add.i32($i4, 1);
  // WARNING: %17 = add nsw i32 %.014, 1, !dbg !8359, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14691, 13} true;
  assume {:verifier.code 0} true;
  $i14 := $M.11;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14691, 11} true;
  assume {:verifier.code 0} true;
  $i15 := $slt.i32($i13, $i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14691, 9} true;
  assume {:verifier.code 0} true;
  $i4 := $i13;
  assume {:branchcond $i15} true;
  goto $bb11, $bb6;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14691, 9} true;
  assume {:verifier.code 0} true;
  assume ($i15 == 1);
  goto $bb4;
$bb12:
  assume ($i16 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14705, 23} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i32($i5, 1);
  // WARNING: %23 = add nsw i32 %.0, 1, !dbg !8365, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14707, 15} true;
  assume {:verifier.code 0} true;
  $i18 := $M.11;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14707, 13} true;
  assume {:verifier.code 0} true;
  $i19 := $slt.i32($i17, $i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14707, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb14, $bb15;
$bb13:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb14:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14707, 11} true;
  assume {:verifier.code 0} true;
  $i20 := $i17;
  goto $bb17;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14707, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i19 == 1));
  goto $bb16;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14710, 9} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb17:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14709, 7} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14712, 25} true;
  assume {:verifier.code 0} true;
  $i21 := $sext.i32.i64($i20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14712, 25} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref(set_impl, $mul.ref($i21, 8));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14712, 25} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.12, $p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14712, 18} true;
  assume {:verifier.code 0} true;
  $i24 := $sub.i32($i20, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14712, 7} true;
  assume {:verifier.code 0} true;
  $i25 := $sext.i32.i64($i24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14712, 7} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref(set_impl, $mul.ref($i25, 8));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14712, 23} true;
  assume {:verifier.code 0} true;
  $M.12 := $store.ref($M.12, $p26, $p23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14713, 13} true;
  assume {:verifier.code 0} true;
  $i27 := $add.i32($i20, 1);
  // WARNING: %35 = add nsw i32 %.13, 1, !dbg !8380, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i27);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14707, 15} true;
  assume {:verifier.code 0} true;
  $i28 := $M.11;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14707, 13} true;
  assume {:verifier.code 0} true;
  $i29 := $slt.i32($i27, $i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14707, 11} true;
  assume {:verifier.code 0} true;
  $i20 := $i27;
  assume {:branchcond $i29} true;
  goto $bb21, $bb19;
$bb19:
  assume !(($i29 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14707, 11} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14715, 18} true;
  assume {:verifier.code 0} true;
  $i30 := $M.11;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14715, 29} true;
  assume {:verifier.code 0} true;
  $i31 := $sub.i32($i30, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14715, 16} true;
  assume {:verifier.code 0} true;
  $M.11 := $i31;
  call {:cexpr "last_index"} boogie_si_record_i32($i31);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14716, 3} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14707, 11} true;
  assume {:verifier.code 0} true;
  assume ($i29 == 1);
  goto $bb17;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14719, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const get_dma_ops: ref;
axiom (get_dma_ops == $sub.ref(0, 223963));
procedure  get_dma_ops($p0: ref)
  returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8674, 29} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8674, 49} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i64($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8674, 49} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8674, 29} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8674, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := ldv__builtin_expect($i4, 0);
  // WARNING: %6 = call i64 @ldv__builtin_expect(i64 %5, i64 0), !dbg !8338, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8676, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i64($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8676, 17} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8676, 17} true;
  assume {:verifier.code 0} true;
  assume ($i6 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8677, 13} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.0, dma_ops);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8677, 5} true;
  assume {:verifier.code 0} true;
  $p13 := $p12;
  goto $bb6;
$bb3:
  assume !(($i6 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8676, 41} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, 1224);
  $p8 := $add.ref($p0, 1224);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8676, 50} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8676, 20} true;
  assume {:verifier.code 0} true;
  $i10 := $p2i.ref.i64($p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8676, 58} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i64($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8676, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8676, 7} true;
  assume {:verifier.code 0} true;
  assume ($i11 == 1);
  goto $bb2;
$bb5:
  assume !(($i11 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8679, 18} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p0, 1224);
  $p15 := $add.ref($p0, 1224);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8679, 27} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8679, 5} true;
  assume {:verifier.code 0} true;
  $p13 := $p16;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8682, 1} true;
  assume {:verifier.code 0} true;
  $r := $p13;
  $exn := false;
  return;
}
const kmemcheck_mark_initialized: ref;
axiom (kmemcheck_mark_initialized == $sub.ref(0, 224995));
procedure  kmemcheck_mark_initialized($p0: ref, $i1: i32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %0, i64 0, metadata !11089, metadata !8330), !dbg !11090, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8428, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const valid_dma_direction: ref;
axiom (valid_dma_direction == $sub.ref(0, 226027));
procedure  valid_dma_direction($i0: i32)
  returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8649, 26} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8649, 31} true;
  assume {:verifier.code 0} true;
  $i2 := 1;
  assume {:branchcond $i1} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8649, 31} true;
  assume {:verifier.code 0} true;
  assume ($i1 == 1);
  goto $bb2;
$bb2:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8649, 54} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i1.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8649, 3} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
$bb3:
  assume !(($i1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8649, 48} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i0, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8649, 54} true;
  assume {:verifier.code 0} true;
  $i2 := 1;
  assume {:branchcond $i3} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8649, 54} true;
  assume {:verifier.code 0} true;
  assume ($i3 == 1);
  goto $bb2;
$bb5:
  assume !(($i3 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8649, 71} true;
  assume {:verifier.code 0} true;
  $i4 := $eq.i32($i0, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8649, 54} true;
  assume {:verifier.code 0} true;
  $i2 := $i4;
  goto $bb2;
}
const __phys_addr: ref;
axiom (__phys_addr == $sub.ref(0, 227059));
procedure  __phys_addr($i0: i64)
  returns ($r: i64);
const debug_dma_map_page: ref;
axiom (debug_dma_map_page == $sub.ref(0, 228091));
procedure  debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
const __netdev_alloc_skb_ip_align: ref;
axiom (__netdev_alloc_skb_ip_align == $sub.ref(0, 229123));
procedure  __netdev_alloc_skb_ip_align($p0: ref, $i1: i32, $i2: i32)
  returns ($r: ref)
{
  var $p3: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !11113, metadata !8330), !dbg !11114, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !11115, metadata !8330), !dbg !11116, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9107, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := __netdev_alloc_skb($p0, $i1, $i2);
  assume $isExternal($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9109, 3} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const __netdev_alloc_skb: ref;
axiom (__netdev_alloc_skb == $sub.ref(0, 230155));
procedure  __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32)
  returns ($r: ref);
const debug_dma_mapping_error: ref;
axiom (debug_dma_mapping_error == $sub.ref(0, 231187));
procedure  debug_dma_mapping_error($p0: ref, $i1: i64);
const lowmem_page_address: ref;
axiom (lowmem_page_address == $sub.ref(0, 232219));
procedure  lowmem_page_address($p0: ref)
  returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8641, 60} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8641, 72} true;
  assume {:verifier.code 0} true;
  $i2 := $add.i64($i1, 24189255811072);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8641, 91} true;
  assume {:verifier.code 0} true;
  $i3 := $sdiv.i64($i2, 64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8641, 98} true;
  assume {:verifier.code 0} true;
  $i4 := $shl.i64($i3, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8641, 105} true;
  assume {:verifier.code 0} true;
  $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8641, 11} true;
  assume {:verifier.code 0} true;
  $p6 := $i2p.i64.ref($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8641, 3} true;
  assume {:verifier.code 0} true;
  $r := $p6;
  $exn := false;
  return;
}
const alloc_pages_current: ref;
axiom (alloc_pages_current == $sub.ref(0, 233251));
procedure  alloc_pages_current($i0: i32, $i1: i32)
  returns ($r: ref);
const igbvf_set_rlpml: ref;
axiom (igbvf_set_rlpml == $sub.ref(0, 234283));
procedure  igbvf_set_rlpml($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11068, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11069, 36} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 1164);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11069, 36} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i32($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11069, 51} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i32($i3, 4);
  // WARNING: %5 = add i32 %4, 4, !dbg !8340, !verifier.code !8334
  call {:cexpr "max_frame_size"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11070, 33} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i32.i16($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11070, 26} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i16.i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11070, 26} true;
  assume {:verifier.code 0} true;
  $i7 := $trunc.i32.i16($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11070, 3} true;
  assume {:verifier.code 0} true;
  call e1000_rlpml_set_vf($p1, $i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11071, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const e1000_rlpml_set_vf: ref;
axiom (e1000_rlpml_set_vf == $sub.ref(0, 235315));
procedure  e1000_rlpml_set_vf($p0: ref, $i1: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata %struct.e1000_hw* %0, i64 0, metadata !11157, metadata !8330), !dbg !11158, !verifier.code !8332
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6694, 15} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6695, 3} true;
  assume {:verifier.code 0} true;
  $p4 := $p2;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6695, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p4, 5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6696, 15} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i16.i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6696, 3} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p2, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6696, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p6, $i5);
  $p7 := $add.ref($p0, 168);
  $p8 := $add.ref($add.ref($p0, 168), 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6697, 15} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6697, 34} true;
  assume {:verifier.code 0} true;
  $p10 := $bitcast.ref.ref($p2);
  call $i11 := devirtbounce.10($p9, $p0, $p10, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6698, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const find_first_bit: ref;
axiom (find_first_bit == $sub.ref(0, 236347));
procedure  find_first_bit($p0: ref, $i1: i64)
  returns ($r: i64);
const igbvf_vlan_rx_add_vid: ref;
axiom (igbvf_vlan_rx_add_vid == $sub.ref(0, 237379));
procedure  igbvf_vlan_rx_add_vid($p0: ref, $i1: i16, $i2: i16)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i19: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !11178, metadata !8330), !dbg !11179, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i16 %1, i64 0, metadata !11180, metadata !8330), !dbg !11181, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11082, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11083, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11084, 19} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p4, 1448);
  $p6 := $add.ref($add.ref($p4, 1448), 32);
  $p7 := $add.ref($add.ref($p4, 1448), 32);
  $p8 := $add.ref($add.ref($add.ref($p4, 1448), 32), 104);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11085, 28} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11085, 43} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i16.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11085, 43} true;
  assume {:verifier.code 0} true;
  $i11 := $trunc.i32.i16($i10);
  call $i12 := devirtbounce.11($p9, $p5, $i11, 1);
  // WARNING: %13 = call i32 @devirtbounce.11(i32 (%struct.e1000_hw*, i16, i1)* %10, %struct.e1000_hw* %6, i16 %12, i1 true)
  call {:cexpr "tmp___0"} boogie_si_record_i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11086, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i32($i12, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11086, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11087, 51} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p4, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11087, 51} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11087, 58} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p15, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11088, 13} true;
  assume {:verifier.code 0} true;
  $i17 := $zext.i16.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11087, 5} true;
  assume {:verifier.code 0} true;
  call $i18 := dev_err.ref.ref.i32($p16, .str.13, $i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11089, 5} true;
  assume {:verifier.code 0} true;
  $i19 := $sub.i32(0, 22);
  goto $bb3;
$bb2:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11096, 1} true;
  assume {:verifier.code 0} true;
  $r := $i19;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11093, 11} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i16.i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11093, 63} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p4, 424);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11093, 23} true;
  assume {:verifier.code 0} true;
  $p22 := $bitcast.ref.ref($p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11093, 3} true;
  assume {:verifier.code 0} true;
  call set_bit($i20, $p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11094, 3} true;
  assume {:verifier.code 0} true;
  $i19 := 0;
  goto $bb3;
}
const find_next_bit: ref;
axiom (find_next_bit == $sub.ref(0, 238411));
procedure  find_next_bit($p0: ref, $i1: i64, $i2: i64)
  returns ($r: i64);
const kmalloc_array: ref;
axiom (kmalloc_array == $sub.ref(0, 239443));
procedure  kmalloc_array($i0: i64, $i1: i64, $i2: i32)
  returns ($r: ref)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p6: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !11216, metadata !8330), !dbg !11217, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i64 %1, i64 0, metadata !11218, metadata !8330), !dbg !11219, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8459, 12} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i64($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8459, 19} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8459, 43} true;
  assume {:verifier.code 0} true;
  $i4 := $udiv.i64($sub.i64(0, 1), $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8459, 50} true;
  assume {:verifier.code 0} true;
  $i5 := $ult.i64($i4, $i0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8459, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8459, 19} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb7;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8460, 5} true;
  assume {:verifier.code 0} true;
  $p6 := $0.ref;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8459, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8467, 1} true;
  assume {:verifier.code 0} true;
  $r := $p6;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8464, 21} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.i64($i0, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8464, 9} true;
  assume {:verifier.code 0} true;
  call $p8 := __kmalloc($i7, $i2);
  assume $isExternal($p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8465, 3} true;
  assume {:verifier.code 0} true;
  $p6 := $p8;
  goto $bb6;
}
const kfree: ref;
axiom (kfree == $sub.ref(0, 240475));
procedure  kfree($p0: ref);
const __kmalloc: ref;
axiom (__kmalloc == $sub.ref(0, 241507));
procedure  __kmalloc($i0: i64, $i1: i32)
  returns ($r: ref);
const igbvf_clean_rx_ring: ref;
axiom (igbvf_clean_rx_ring == $sub.ref(0, 242539));
procedure  igbvf_clean_rx_ring($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i12: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i16;
  var $i96: i64;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i16;
  var $i103: i64;
  var $p104: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10267, 22} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10267, 22} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10268, 19} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10268, 19} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10269, 32} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10269, 32} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10269, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10269, 44} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i64($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10269, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10270, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10326, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10312, 16} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p0, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10312, 16} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10312, 22} true;
  assume {:verifier.code 0} true;
  $i11 := $ugt.i32($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10312, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i11 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10312, 7} true;
  assume {:verifier.code 0} true;
  $i12 := 0;
  goto $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10312, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i11 == 1));
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  goto $bb27;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10313, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10277, 26} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p0, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10277, 26} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10277, 40} true;
  assume {:verifier.code 0} true;
  $i15 := $zext.i32.i64($i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10277, 38} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p14, $mul.ref($i15, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10278, 20} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p14, $mul.ref($i15, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10278, 20} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i64($M.0, $p17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10278, 24} true;
  assume {:verifier.code 0} true;
  $i19 := $ne.i64($i18, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10278, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10279, 18} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p2, 1160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10279, 18} true;
  assume {:verifier.code 0} true;
  $i21 := $load.i32($M.0, $p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10279, 33} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.i32($i21, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10279, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb12, $bb13;
$bb11:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  goto $bb15;
$bb12:
  assume ($i22 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10280, 38} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p4, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10280, 56} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p14, $mul.ref($i15, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10280, 56} true;
  assume {:verifier.code 0} true;
  $i25 := $load.i64($M.0, $p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10280, 79} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p2, 1160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10280, 79} true;
  assume {:verifier.code 0} true;
  $i27 := $load.i32($M.0, $p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10280, 61} true;
  assume {:verifier.code 0} true;
  $i28 := $zext.i32.i64($i27);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10280, 7} true;
  assume {:verifier.code 0} true;
  call dma_unmap_single_attrs($p23, $i25, $i28, 2, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10282, 5} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb13:
  assume !(($i22 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10283, 38} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p4, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10283, 56} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p14, $mul.ref($i15, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10283, 56} true;
  assume {:verifier.code 0} true;
  $i31 := $load.i64($M.0, $p30);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10283, 79} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p2, 940);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10283, 79} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i32($M.0, $p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10283, 61} true;
  assume {:verifier.code 0} true;
  $i34 := $zext.i32.i64($i33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10283, 7} true;
  assume {:verifier.code 0} true;
  call dma_unmap_single_attrs($p29, $i31, $i34, 2, $0.ref);
  assume {:verifier.code 0} true;
  goto $bb14;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10286, 18} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($p14, $mul.ref($i15, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10286, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p35, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10287, 3} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10290, 36} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10290, 36} true;
  assume {:verifier.code 0} true;
  $p37 := $load.ref($M.0, $p36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10290, 7} true;
  assume {:verifier.code 0} true;
  $i38 := $p2i.ref.i64($p37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10290, 40} true;
  assume {:verifier.code 0} true;
  $i39 := $ne.i64($i38, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10290, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb16, $bb17;
$bb16:
  assume ($i39 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10291, 31} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10291, 31} true;
  assume {:verifier.code 0} true;
  $p41 := $load.ref($M.0, $p40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10291, 18} true;
  assume {:verifier.code 0} true;
  $p42 := $bitcast.ref.ref($p41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10291, 5} true;
  assume {:verifier.code 0} true;
  call ldv_skb_free($p42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10292, 18} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10292, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p43, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10293, 3} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb17:
  assume !(($i39 == 1));
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10296, 36} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10296, 46} true;
  assume {:verifier.code 0} true;
  $p45 := $bitcast.ref.ref($p44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10296, 56} true;
  assume {:verifier.code 0} true;
  $p46 := $p45;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10296, 56} true;
  assume {:verifier.code 0} true;
  $p47 := $load.ref($M.0, $p46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10296, 7} true;
  assume {:verifier.code 0} true;
  $i48 := $p2i.ref.i64($p47);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10296, 61} true;
  assume {:verifier.code 0} true;
  $i49 := $ne.i64($i48, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10296, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i49 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10297, 22} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10297, 32} true;
  assume {:verifier.code 0} true;
  $p51 := $bitcast.ref.ref($p50);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10297, 42} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($p51, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10297, 42} true;
  assume {:verifier.code 0} true;
  $i53 := $load.i64($M.0, $p52);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10297, 51} true;
  assume {:verifier.code 0} true;
  $i54 := $ne.i64($i53, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10297, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i54} true;
  goto $bb21, $bb22;
$bb20:
  assume !(($i49 == 1));
  assume {:verifier.code 0} true;
  goto $bb24;
$bb21:
  assume ($i54 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10298, 30} true;
  assume {:verifier.code 0} true;
  $p55 := $add.ref($p4, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10298, 48} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10298, 58} true;
  assume {:verifier.code 0} true;
  $p57 := $bitcast.ref.ref($p56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10298, 68} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($p57, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10298, 68} true;
  assume {:verifier.code 0} true;
  $i59 := $load.i64($M.0, $p58);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10298, 7} true;
  assume {:verifier.code 0} true;
  call dma_unmap_page($p55, $i59, 2048, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10300, 5} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb22:
  assume !(($i54 == 1));
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10303, 27} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10303, 37} true;
  assume {:verifier.code 0} true;
  $p61 := $bitcast.ref.ref($p60);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10303, 47} true;
  assume {:verifier.code 0} true;
  $p62 := $p61;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10303, 47} true;
  assume {:verifier.code 0} true;
  $p63 := $load.ref($M.0, $p62);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10303, 5} true;
  assume {:verifier.code 0} true;
  call put_page($p63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10304, 18} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10304, 28} true;
  assume {:verifier.code 0} true;
  $p65 := $bitcast.ref.ref($p64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10304, 38} true;
  assume {:verifier.code 0} true;
  $p66 := $p65;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10304, 43} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p66, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10305, 18} true;
  assume {:verifier.code 0} true;
  $p67 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10305, 28} true;
  assume {:verifier.code 0} true;
  $p68 := $bitcast.ref.ref($p67);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10305, 38} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($p68, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10305, 47} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p69, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10306, 18} true;
  assume {:verifier.code 0} true;
  $p70 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10306, 28} true;
  assume {:verifier.code 0} true;
  $p71 := $bitcast.ref.ref($p70);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10306, 38} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($p71, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10306, 50} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p72, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10307, 3} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10310, 9} true;
  assume {:verifier.code 0} true;
  $i73 := $add.i32($i12, 1);
  // WARNING: %92 = add i32 %.01, 1, !dbg !8435, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i73);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10312, 16} true;
  assume {:verifier.code 0} true;
  $i74 := $load.i32($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10312, 22} true;
  assume {:verifier.code 0} true;
  $i75 := $ugt.i32($i74, $i73);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10312, 7} true;
  assume {:verifier.code 0} true;
  $i12 := $i73;
  assume {:branchcond $i75} true;
  goto $bb25, $bb26;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10312, 7} true;
  assume {:verifier.code 0} true;
  assume ($i75 == 1);
  goto $bb8;
$bb26:
  assume !(($i75 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10312, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10317, 35} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($p0, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10317, 35} true;
  assume {:verifier.code 0} true;
  $i77 := $load.i32($M.0, $p76);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10317, 10} true;
  assume {:verifier.code 0} true;
  $i78 := $zext.i32.i64($i77);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10317, 41} true;
  assume {:verifier.code 0} true;
  $i79 := $mul.i64($i78, 40);
  // WARNING: %101 = mul i64 %100, 40, !dbg !8440, !verifier.code !8334
  call {:cexpr "size"} boogie_si_record_i64($i79);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10318, 27} true;
  assume {:verifier.code 0} true;
  $p80 := $add.ref($p0, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10318, 27} true;
  assume {:verifier.code 0} true;
  $p81 := $load.ref($M.0, $p80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10318, 3} true;
  assume {:verifier.code 0} true;
  $p82 := $bitcast.ref.ref($p81);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10318, 3} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p82, 0, $i79, $zext.i32.i64(1), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10319, 27} true;
  assume {:verifier.code 0} true;
  $p83 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10319, 27} true;
  assume {:verifier.code 0} true;
  $p84 := $load.ref($M.0, $p83);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10319, 3} true;
  assume {:verifier.code 0} true;
  $p85 := $bitcast.ref.ref($p84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10319, 54} true;
  assume {:verifier.code 0} true;
  $p86 := $add.ref($p0, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10319, 54} true;
  assume {:verifier.code 0} true;
  $i87 := $load.i32($M.0, $p86);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10319, 36} true;
  assume {:verifier.code 0} true;
  $i88 := $zext.i32.i64($i87);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10319, 3} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p85, 0, $i88, $zext.i32.i64(1), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10320, 12} true;
  assume {:verifier.code 0} true;
  $p89 := $add.ref($p0, 34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10320, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p89, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10321, 12} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($p0, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10321, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p90, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10322, 42} true;
  assume {:verifier.code 0} true;
  $p91 := $add.ref($p2, 1448);
  $p92 := $add.ref($add.ref($p2, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10322, 45} true;
  assume {:verifier.code 0} true;
  $p93 := $load.ref($M.0, $p92);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10322, 80} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($p0, 36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10322, 80} true;
  assume {:verifier.code 0} true;
  $i95 := $load.i16($M.0, $p94);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10322, 55} true;
  assume {:verifier.code 0} true;
  $i96 := $zext.i16.i64($i95);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10322, 53} true;
  assume {:verifier.code 0} true;
  $p97 := $add.ref($p93, $mul.ref($i96, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10322, 3} true;
  assume {:verifier.code 0} true;
  call writel(0, $p97);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10323, 42} true;
  assume {:verifier.code 0} true;
  $p98 := $add.ref($p2, 1448);
  $p99 := $add.ref($add.ref($p2, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10323, 45} true;
  assume {:verifier.code 0} true;
  $p100 := $load.ref($M.0, $p99);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10323, 80} true;
  assume {:verifier.code 0} true;
  $p101 := $add.ref($p0, 38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10323, 80} true;
  assume {:verifier.code 0} true;
  $i102 := $load.i16($M.0, $p101);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10323, 55} true;
  assume {:verifier.code 0} true;
  $i103 := $zext.i16.i64($i102);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10323, 53} true;
  assume {:verifier.code 0} true;
  $p104 := $add.ref($p100, $mul.ref($i103, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10323, 3} true;
  assume {:verifier.code 0} true;
  call writel(0, $p104);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10324, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const dma_free_attrs: ref;
axiom (dma_free_attrs == $sub.ref(0, 243571));
procedure  dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.device* %0, i64 0, metadata !11374, metadata !8330), !dbg !11375, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i8* %2, i64 0, metadata !11378, metadata !8330), !dbg !11379, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8920, 9} true;
  assume {:verifier.code 0} true;
  call $p5 := get_dma_ops($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8922, 12} true;
  assume {:verifier.code 0} true;
  call $i6 := arch_local_save_flags();
  // WARNING: %7 = call i64 @arch_local_save_flags(), !dbg !8347, !verifier.code !8332
  call {:cexpr "_flags"} boogie_si_record_i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8923, 13} true;
  assume {:verifier.code 0} true;
  call $i7 := arch_irqs_disabled_flags($i6);
  // WARNING: %8 = call i32 @arch_irqs_disabled_flags(i64 %7), !dbg !8350, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8924, 27} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8924, 27} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i1.i32($i8);
  // WARNING: %10 = zext i1 %9 to i32, !dbg !8353, !verifier.code !8332
  call {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8925, 47} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8925, 47} true;
  assume {:verifier.code 0} true;
  $i11 := $zext.i1.i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8925, 33} true;
  assume {:verifier.code 0} true;
  $i12 := $sext.i32.i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8925, 13} true;
  assume {:verifier.code 0} true;
  call $i13 := ldv__builtin_expect($i12, 0);
  // WARNING: %14 = call i64 @ldv__builtin_expect(i64 %13, i64 0), !dbg !8358, !verifier.code !8332
  call {:cexpr "tmp___1"} boogie_si_record_i64($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8926, 15} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i64($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8926, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8927, 5} true;
  assume {:verifier.code 0} true;
  call warn_slowpath_null(.str.4, 166);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8928, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8931, 37} true;
  assume {:verifier.code 0} true;
  $i15 := $ne.i32($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8931, 37} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i1.i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8931, 23} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.i32.i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8931, 3} true;
  assume {:verifier.code 0} true;
  call $i18 := ldv__builtin_expect($i17, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8932, 3} true;
  assume {:verifier.code 0} true;
  call debug_dma_free_coherent($p0, $i1, $p2, $i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8933, 28} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p5, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8933, 28} true;
  assume {:verifier.code 0} true;
  $p20 := $load.ref($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8933, 7} true;
  assume {:verifier.code 0} true;
  $i21 := $p2i.ref.i64($p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8933, 33} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.i64($i21, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8933, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i22 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8936, 13} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p5, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8936, 13} true;
  assume {:verifier.code 0} true;
  $p24 := $load.ref($M.0, $p23);
  call devirtbounce.12($p24, $p0, $i1, $p2, $i3, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8937, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8940, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const arch_local_save_flags: ref;
axiom (arch_local_save_flags == $sub.ref(0, 244603));
procedure  arch_local_save_flags()
  returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 undef, i64 0, metadata !11426, metadata !8330), !dbg !11427, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i64 undef, i64 0, metadata !11428, metadata !8330), !dbg !11429, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i64 undef, i64 0, metadata !11430, metadata !8330), !dbg !11431, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i64 undef, i64 0, metadata !11432, metadata !8330), !dbg !11433, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8325, 64} true;
  assume {:verifier.code 0} true;
  $p0 := $load.ref($M.0, pv_irq_ops);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8325, 29} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8325, 69} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i64($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8325, 69} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8325, 29} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8325, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := ldv__builtin_expect($i4, 0);
  // WARNING: %6 = call i64 @ldv__builtin_expect(i64 %5, i64 0), !dbg !8347, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8327, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i64($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8327, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  call devirtbounce.4(0, .str.5, 804, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8328, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8331, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb4:
  call $i7 := devirtbounce.13(0, 44, pv_irq_ops, 1);
  // WARNING: %12 = call i64 @devirtbounce.13(i64 (i64, i8**, i32)* asm sideeffect "771:\0A\09call *${2:c};\0A772:\0A.pushsection .parainstructions,\22a\22\0A .balign 8 \0A .quad  771b\0A  .byte ${1:c}\0A  .byte 772b-771b\0A  .short ${3:c}\0A.popsection\0A", "={ax},i,i,i,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}", i64 44, i8** getelementptr inbounds (%struct.pv_irq_ops, %struct.pv_irq_ops* @pv_irq_ops, i32 0, i32 0, i32 0), i32 1)
  call {:cexpr "__eax"} boogie_si_record_i64($i7);
  // WARNING: call void @llvm.dbg.value(metadata i64 %12, i64 0, metadata !11434, metadata !8330), !dbg !11435, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8339, 3} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
}
const arch_irqs_disabled_flags: ref;
axiom (arch_irqs_disabled_flags == $sub.ref(0, 245635));
procedure  arch_irqs_disabled_flags($i0: i64)
  returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8347, 18} true;
  assume {:verifier.code 0} true;
  $i1 := $and.i64($i0, 512);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8347, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i64($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8347, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8347, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const warn_slowpath_null: ref;
axiom (warn_slowpath_null == $sub.ref(0, 246667));
procedure  warn_slowpath_null($p0: ref, $i1: i32);
const debug_dma_free_coherent: ref;
axiom (debug_dma_free_coherent == $sub.ref(0, 247699));
procedure  debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
const dma_unmap_single_attrs: ref;
axiom (dma_unmap_single_attrs == $sub.ref(0, 248731));
procedure  dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.device* %0, i64 0, metadata !11462, metadata !8330), !dbg !11463, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i64 %1, i64 0, metadata !11464, metadata !8330), !dbg !11465, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i64 %2, i64 0, metadata !11466, metadata !8330), !dbg !11467, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8727, 9} true;
  assume {:verifier.code 0} true;
  call $p5 := get_dma_ops($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8729, 13} true;
  assume {:verifier.code 0} true;
  call $i6 := valid_dma_direction($i3);
  // WARNING: %7 = call i32 @valid_dma_direction(i32 %3), !dbg !8347, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8730, 41} true;
  assume {:verifier.code 0} true;
  $i7 := $eq.i32($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8730, 41} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.i1.i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8730, 33} true;
  assume {:verifier.code 0} true;
  $i9 := $sext.i32.i64($i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8730, 13} true;
  assume {:verifier.code 0} true;
  call $i10 := ldv__builtin_expect($i9, 0);
  // WARNING: %11 = call i64 @ldv__builtin_expect(i64 %10, i64 0), !dbg !8352, !verifier.code !8332
  call {:cexpr "tmp___1"} boogie_si_record_i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8731, 15} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.i64($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8731, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i11 == 1);
  call devirtbounce.4(0, .str.3, 36, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8732, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8735, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8739, 28} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p5, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8739, 28} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.0, $p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8739, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $p2i.ref.i64($p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8739, 39} true;
  assume {:verifier.code 0} true;
  $i15 := $ne.i64($i14, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8739, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i15 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8743, 13} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p5, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8743, 13} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.0, $p16);
  call devirtbounce.14($p17, $p0, $i1, $i2, $i3, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8744, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i15 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8747, 3} true;
  assume {:verifier.code 0} true;
  call debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8748, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const dma_unmap_page: ref;
axiom (dma_unmap_page == $sub.ref(0, 249763));
procedure  dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.device* %0, i64 0, metadata !11503, metadata !8330), !dbg !11504, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i64 %1, i64 0, metadata !11505, metadata !8330), !dbg !11506, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i64 %2, i64 0, metadata !11507, metadata !8330), !dbg !11508, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8790, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := get_dma_ops($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8792, 13} true;
  assume {:verifier.code 0} true;
  call $i5 := valid_dma_direction($i3);
  // WARNING: %6 = call i32 @valid_dma_direction(i32 %3), !dbg !8345, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8793, 41} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8793, 41} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8793, 33} true;
  assume {:verifier.code 0} true;
  $i8 := $sext.i32.i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8793, 13} true;
  assume {:verifier.code 0} true;
  call $i9 := ldv__builtin_expect($i8, 0);
  // WARNING: %10 = call i64 @ldv__builtin_expect(i64 %9, i64 0), !dbg !8350, !verifier.code !8332
  call {:cexpr "tmp___1"} boogie_si_record_i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8794, 15} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i64($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8794, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1);
  call devirtbounce.4(0, .str.3, 91, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8795, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8798, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8802, 28} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p4, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8802, 28} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8802, 7} true;
  assume {:verifier.code 0} true;
  $i13 := $p2i.ref.i64($p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8802, 39} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i64($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8802, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8806, 13} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p4, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8806, 13} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.0, $p15);
  call devirtbounce.14($p16, $p0, $i1, $i2, $i3, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8807, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8810, 3} true;
  assume {:verifier.code 0} true;
  call debug_dma_unmap_page($p0, $i1, $i2, $i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8811, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const put_page: ref;
axiom (put_page == $sub.ref(0, 250795));
procedure  put_page($p0: ref);
const llvm.memset.p0i8.i64: ref;
axiom (llvm.memset.p0i8.i64 == $sub.ref(0, 251827));
procedure  llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);
const debug_dma_unmap_page: ref;
axiom (debug_dma_unmap_page == $sub.ref(0, 252859));
procedure  debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
const vzalloc: ref;
axiom (vzalloc == $sub.ref(0, 253891));
procedure  vzalloc($i0: i64)
  returns ($r: ref);
const dma_alloc_attrs: ref;
axiom (dma_alloc_attrs == $sub.ref(0, 254923));
procedure  dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref)
  returns ($r: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p12: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.device* %0, i64 0, metadata !11542, metadata !8330), !dbg !11543, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i64* %2, i64 0, metadata !11546, metadata !8330), !dbg !11547, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8882, 9} true;
  assume {:verifier.code 0} true;
  call $p5 := get_dma_ops($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8884, 13} true;
  assume {:verifier.code 0} true;
  $i6 := $and.i32($i3, $sub.i32(0, 8));
  // WARNING: %7 = and i32 %3, -8, !dbg !8347, !verifier.code !8332
  call {:cexpr "gfp"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8885, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8885, 27} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i64($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8885, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8887, 3} true;
  assume {:verifier.code 0} true;
  $p9 := x86_dma_fallback_dev;
  goto $bb3;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  $p9 := $p0;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8890, 13} true;
  assume {:verifier.code 0} true;
  call $i10 := is_device_dma_capable($p9);
  // WARNING: %13 = call i32 @is_device_dma_capable(%struct.device* %.01), !dbg !8354, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8891, 15} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i32($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8891, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i11 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8892, 5} true;
  assume {:verifier.code 0} true;
  $p12 := $0.ref;
  goto $bb6;
$bb5:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8908, 1} true;
  assume {:verifier.code 0} true;
  $r := $p12;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8896, 28} true;
  assume {:verifier.code 0} true;
  $p13 := $p5;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8896, 28} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8896, 7} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.i64($p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8896, 34} true;
  assume {:verifier.code 0} true;
  $i16 := $eq.i64($i15, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8896, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i16 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8899, 5} true;
  assume {:verifier.code 0} true;
  $p12 := $0.ref;
  goto $bb6;
$bb9:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8903, 13} true;
  assume {:verifier.code 0} true;
  call $i17 := dma_alloc_coherent_gfp_flags($p9, $i6);
  // WARNING: %25 = call i32 @dma_alloc_coherent_gfp_flags(%struct.device* %.01, i32 %7), !dbg !8369, !verifier.code !8332
  call {:cexpr "tmp___1"} boogie_si_record_i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8904, 20} true;
  assume {:verifier.code 0} true;
  $p18 := $p5;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8904, 20} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.0, $p18);
  call $p20 := devirtbounce.15($p19, $p9, $i1, $p2, $i17, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8905, 39} true;
  assume {:verifier.code 0} true;
  $i21 := $load.i64($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8905, 3} true;
  assume {:verifier.code 0} true;
  call debug_dma_alloc_coherent($p9, $i1, $i21, $p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8906, 3} true;
  assume {:verifier.code 0} true;
  $p12 := $p20;
  goto $bb6;
}
const is_device_dma_capable: ref;
axiom (is_device_dma_capable == $sub.ref(0, 255955));
procedure  is_device_dma_capable($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8657, 32} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8657, 32} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8657, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8657, 41} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i64($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8657, 74} true;
  assume {:verifier.code 0} true;
  $i5 := 0;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8657, 84} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p0, 1160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8657, 84} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8657, 77} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i64($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8657, 94} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i64($i8, 0);
  assume {:verifier.code 0} true;
  $i5 := $i9;
  goto $bb3;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8657, 74} true;
  assume {:verifier.code 0} true;
  assume !(($i4 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8657, 74} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i1.i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8657, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const dma_alloc_coherent_gfp_flags: ref;
axiom (dma_alloc_coherent_gfp_flags == $sub.ref(0, 256987));
procedure  dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.device* %0, i64 0, metadata !11608, metadata !8330), !dbg !11609, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8857, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := dma_alloc_coherent_mask($p0, $i1);
  // WARNING: %3 = call i64 @dma_alloc_coherent_mask(%struct.device* %0, i32 %1), !dbg !8337, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i64($i2);
  // WARNING: call void @llvm.dbg.value(metadata i64 %3, i64 0, metadata !11614, metadata !8330), !dbg !11615, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8859, 37} true;
  assume {:verifier.code 0} true;
  $i3 := $ule.i64($i2, 16777215);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8859, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8860, 15} true;
  assume {:verifier.code 0} true;
  $i4 := $or.i32($i1, 1);
  // WARNING: %6 = or i32 %1, 1, !dbg !8346, !verifier.code !8334
  call {:cexpr "gfp"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8861, 3} true;
  assume {:verifier.code 0} true;
  $i5 := $i4;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  $i5 := $i1;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8864, 37} true;
  assume {:verifier.code 0} true;
  $i6 := $ule.i64($i2, 4294967295);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8864, 54} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8864, 62} true;
  assume {:verifier.code 0} true;
  $i7 := $and.i32($i5, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8864, 68} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8864, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb7, $bb8;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8864, 54} true;
  assume {:verifier.code 0} true;
  assume !(($i6 == 1));
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  $i10 := $i5;
  goto $bb9;
$bb7:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8865, 15} true;
  assume {:verifier.code 0} true;
  $i9 := $or.i32($i5, 4);
  // WARNING: %14 = or i32 %.0, 4, !dbg !8356, !verifier.code !8334
  call {:cexpr "gfp"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8866, 3} true;
  assume {:verifier.code 0} true;
  $i10 := $i9;
  goto $bb9;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8864, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb6;
$bb9:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8869, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const debug_dma_alloc_coherent: ref;
axiom (debug_dma_alloc_coherent == $sub.ref(0, 258019));
procedure  debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);
const dma_alloc_coherent_mask: ref;
axiom (dma_alloc_coherent_mask == $sub.ref(0, 259051));
procedure  dma_alloc_coherent_mask($p0: ref, $i1: i32)
  returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.device* %0, i64 0, metadata !11638, metadata !8330), !dbg !11639, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !11640, metadata !8330), !dbg !11641, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8842, 35} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 1168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8842, 35} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i64($M.0, $p2);
  // WARNING: %4 = load i64, i64* %3, align 8, !dbg !8339, !verifier.code !8334
  call {:cexpr "dma_mask"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8843, 16} true;
  assume {:verifier.code 0} true;
  $i4 := $eq.i64($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8843, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8844, 26} true;
  assume {:verifier.code 0} true;
  $i5 := $and.i32($i1, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8844, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8844, 16} true;
  assume {:verifier.code 0} true;
  havoc $i7;
  assume ((($i6 == 1) ==> ($i7 == 16777215)) && (($i6 != 1) ==> ($i7 == 4294967295)));
  // WARNING: %9 = select i1 %8, i64 16777215, i64 4294967295, !dbg !8346, !verifier.code !8334
  call {:cexpr "dma_mask"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8845, 3} true;
  assume {:verifier.code 0} true;
  $i8 := $i7;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  $i8 := $i3;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8848, 3} true;
  assume {:verifier.code 0} true;
  $r := $i8;
  $exn := false;
  return;
}
const igbvf_clean_tx_ring: ref;
axiom (igbvf_clean_tx_ring == $sub.ref(0, 260083));
procedure  igbvf_clean_tx_ring($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i10: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i16;
  var $i45: i64;
  var $p46: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10215, 22} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10215, 22} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10216, 32} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10216, 32} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10216, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10216, 44} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i64($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10216, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10217, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10242, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10228, 16} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10228, 16} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10228, 22} true;
  assume {:verifier.code 0} true;
  $i9 := $ugt.i32($i8, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10228, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10228, 7} true;
  assume {:verifier.code 0} true;
  $i10 := 0;
  goto $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10228, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i9 == 1));
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  goto $bb12;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10229, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10224, 26} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p0, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10224, 26} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10224, 40} true;
  assume {:verifier.code 0} true;
  $i13 := $zext.i32.i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10224, 38} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p12, $mul.ref($i13, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10225, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_put_txbuf($p2, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10226, 9} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i32($i10, 1);
  // WARNING: %19 = add i32 %.01, 1, !dbg !8358, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10228, 16} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10228, 22} true;
  assume {:verifier.code 0} true;
  $i17 := $ugt.i32($i16, $i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10228, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $i15;
  assume {:branchcond $i17} true;
  goto $bb10, $bb11;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10228, 7} true;
  assume {:verifier.code 0} true;
  assume ($i17 == 1);
  goto $bb8;
$bb11:
  assume !(($i17 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10228, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10233, 35} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p0, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10233, 35} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i32($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10233, 10} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i32.i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10233, 41} true;
  assume {:verifier.code 0} true;
  $i21 := $mul.i64($i20, 40);
  // WARNING: %28 = mul i64 %27, 40, !dbg !8363, !verifier.code !8334
  call {:cexpr "size"} boogie_si_record_i64($i21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10234, 27} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p0, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10234, 27} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.0, $p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10234, 3} true;
  assume {:verifier.code 0} true;
  $p24 := $bitcast.ref.ref($p23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10234, 3} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p24, 0, $i21, $zext.i32.i64(1), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10235, 27} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10235, 27} true;
  assume {:verifier.code 0} true;
  $p26 := $load.ref($M.0, $p25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10235, 3} true;
  assume {:verifier.code 0} true;
  $p27 := $bitcast.ref.ref($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10235, 54} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p0, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10235, 54} true;
  assume {:verifier.code 0} true;
  $i29 := $load.i32($M.0, $p28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10235, 36} true;
  assume {:verifier.code 0} true;
  $i30 := $zext.i32.i64($i29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10235, 3} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p27, 0, $i30, $zext.i32.i64(1), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10236, 12} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p0, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10236, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p31, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10237, 12} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p0, 34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10237, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p32, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10238, 42} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p2, 1448);
  $p34 := $add.ref($add.ref($p2, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10238, 45} true;
  assume {:verifier.code 0} true;
  $p35 := $load.ref($M.0, $p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10238, 80} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p0, 36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10238, 80} true;
  assume {:verifier.code 0} true;
  $i37 := $load.i16($M.0, $p36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10238, 55} true;
  assume {:verifier.code 0} true;
  $i38 := $zext.i16.i64($i37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10238, 53} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p35, $mul.ref($i38, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10238, 3} true;
  assume {:verifier.code 0} true;
  call writel(0, $p39);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10239, 42} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p2, 1448);
  $p41 := $add.ref($add.ref($p2, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10239, 45} true;
  assume {:verifier.code 0} true;
  $p42 := $load.ref($M.0, $p41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10239, 80} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p0, 38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10239, 80} true;
  assume {:verifier.code 0} true;
  $i44 := $load.i16($M.0, $p43);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10239, 55} true;
  assume {:verifier.code 0} true;
  $i45 := $zext.i16.i64($i44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10239, 53} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p42, $mul.ref($i45, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10239, 3} true;
  assume {:verifier.code 0} true;
  call writel(0, $p46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10240, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const igbvf_put_txbuf: ref;
axiom (igbvf_put_txbuf == $sub.ref(0, 261115));
procedure  igbvf_put_txbuf($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i16;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10108, 20} true;
  assume {:verifier.code 0} true;
  $p2 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10108, 20} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i64($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10108, 24} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i64($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10108, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10109, 37} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p1, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10109, 47} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10109, 57} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p6, 18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10109, 57} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i16($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10109, 9} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i16.i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10109, 72} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10109, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10110, 34} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10110, 34} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10110, 41} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p12, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10110, 59} true;
  assume {:verifier.code 0} true;
  $p14 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10110, 59} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i64($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10110, 86} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p1, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10110, 96} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10110, 106} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p17, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10110, 106} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i16($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10110, 64} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i16.i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10110, 7} true;
  assume {:verifier.code 0} true;
  call dma_unmap_page($p13, $i15, $i20, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10112, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i10 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10113, 42} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10113, 42} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10113, 49} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p22, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10113, 67} true;
  assume {:verifier.code 0} true;
  $p24 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10113, 67} true;
  assume {:verifier.code 0} true;
  $i25 := $load.i64($M.0, $p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10113, 94} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p1, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10113, 104} true;
  assume {:verifier.code 0} true;
  $p27 := $bitcast.ref.ref($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10113, 114} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p27, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10113, 114} true;
  assume {:verifier.code 0} true;
  $i29 := $load.i16($M.0, $p28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10113, 72} true;
  assume {:verifier.code 0} true;
  $i30 := $zext.i16.i64($i29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10113, 7} true;
  assume {:verifier.code 0} true;
  call dma_unmap_single_attrs($p23, $i25, $i30, 1, $0.ref);
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10116, 18} true;
  assume {:verifier.code 0} true;
  $p31 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10116, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p31, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10117, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10120, 36} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10120, 36} true;
  assume {:verifier.code 0} true;
  $p33 := $load.ref($M.0, $p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10120, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $p2i.ref.i64($p33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10120, 40} true;
  assume {:verifier.code 0} true;
  $i35 := $ne.i64($i34, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10120, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i35 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10121, 36} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10121, 36} true;
  assume {:verifier.code 0} true;
  $p37 := $load.ref($M.0, $p36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10121, 5} true;
  assume {:verifier.code 0} true;
  call dev_kfree_skb_any($p37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10122, 18} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10122, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p38, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10123, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10126, 16} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p1, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10126, 26} true;
  assume {:verifier.code 0} true;
  $p40 := $bitcast.ref.ref($p39);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10126, 36} true;
  assume {:verifier.code 0} true;
  $p41 := $p40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10126, 47} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p41, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10127, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const dev_kfree_skb_any: ref;
axiom (dev_kfree_skb_any == $sub.ref(0, 262147));
procedure  dev_kfree_skb_any($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9552, 3} true;
  assume {:verifier.code 0} true;
  call __dev_kfree_skb_any($p0, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9553, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __dev_kfree_skb_any: ref;
axiom (__dev_kfree_skb_any == $sub.ref(0, 263179));
procedure  __dev_kfree_skb_any($p0: ref, $i1: i32);
const netif_stop_queue: ref;
axiom (netif_stop_queue == $sub.ref(0, 264211));
procedure  netif_stop_queue($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9511, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_get_tx_queue($p0, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9512, 3} true;
  assume {:verifier.code 0} true;
  call netif_tx_stop_queue($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9513, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const napi_disable: ref;
axiom (napi_disable == $sub.ref(0, 265243));
procedure  napi_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9403, 3} true;
  assume {:verifier.code 0} true;
  call __might_sleep(.str.7, 476, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9404, 49} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9404, 3} true;
  assume {:verifier.code 0} true;
  call set_bit(1, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9409, 64} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9409, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := test_and_set_bit(0, $p2);
  // WARNING: %4 = call i32 @test_and_set_bit(i64 0, i64* %3), !dbg !8340, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9410, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9410, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9410, 7} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9410, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i4 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb8;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9411, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9407, 3} true;
  assume {:verifier.code 0} true;
  call msleep(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9409, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := test_and_set_bit(0, $p2);
  // WARNING: %7 = call i32 @test_and_set_bit(i64 0, i64* %3), !dbg !8340, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9410, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9410, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb6, $bb7;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9410, 7} true;
  assume {:verifier.code 0} true;
  assume ($i6 == 1);
  goto $bb4;
$bb7:
  assume !(($i6 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9410, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9415, 51} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9415, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit(1, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9416, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_irq_disable: ref;
axiom (igbvf_irq_disable == $sub.ref(0, 266275));
procedure  igbvf_irq_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11005, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1448);
  $p2 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11006, 46} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11006, 54} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p3, 5416);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11006, 3} true;
  assume {:verifier.code 0} true;
  call writel($sub.i32(0, 1), $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11007, 32} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11007, 32} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11007, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11007, 45} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i64($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11007, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  $p9 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11008, 39} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11008, 47} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p10, 5420);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11008, 5} true;
  assume {:verifier.code 0} true;
  call writel(0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11009, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11012, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_del_timer_sync_51: ref;
axiom (ldv_del_timer_sync_51 == $sub.ref(0, 267307));
procedure  ldv_del_timer_sync_51($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14553, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := del_timer_sync($p0);
  // WARNING: %2 = call i32 @del_timer_sync(%struct.timer_list* %0), !dbg !8335, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  // WARNING: call void @llvm.dbg.value(metadata i32 %2, i64 0, metadata !11833, metadata !8330), !dbg !11834, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14555, 3} true;
  assume {:verifier.code 0} true;
  call disable_suitable_timer_4($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14556, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const netif_carrier_off: ref;
axiom (netif_carrier_off == $sub.ref(0, 268339));
procedure  netif_carrier_off($p0: ref);
const igbvf_reset: ref;
axiom (igbvf_reset == $sub.ref(0, 269371));
procedure  igbvf_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $p47: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11325, 20} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1448);
  $p2 := $add.ref($add.ref($p0, 1448), 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11326, 21} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 1176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11326, 21} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11327, 19} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 1448);
  $p6 := $add.ref($add.ref($p0, 1448), 32);
  $p7 := $add.ref($add.ref($add.ref($p0, 1448), 32), 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11328, 21} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.0, $p7);
  call $i9 := devirtbounce.2($p8, $p5);
  // WARNING: %10 = call i32 @devirtbounce.2(i32 (%struct.e1000_hw*)* %9, %struct.e1000_hw* %6)
  call {:cexpr "tmp"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11329, 11} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11329, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11330, 51} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11330, 51} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11330, 58} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p12, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11330, 5} true;
  assume {:verifier.code 0} true;
  call $i14 := dev_err.ref.ref($p13, .str.9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11331, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  $p15 := $add.ref($add.ref($p0, 1448), 32);
  $p16 := $add.ref($add.ref($add.ref($p0, 1448), 32), 56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11334, 15} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.0, $p16);
  call $i18 := devirtbounce.2($p17, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11335, 59} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p0, 1448);
  $p20 := $add.ref($add.ref($p0, 1448), 32);
  $p21 := $add.ref($add.ref($add.ref($p0, 1448), 32), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11335, 33} true;
  assume {:verifier.code 0} true;
  $p22 := $bitcast.ref.ref($p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11335, 13} true;
  assume {:verifier.code 0} true;
  call $i23 := is_valid_ether_addr($p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11335, 11} true;
  assume {:verifier.code 0} true;
  $i24 := $zext.i1.i8($i23);
  // WARNING: %28 = zext i1 %27 to i8, !dbg !8361, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i8($i24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11336, 13} true;
  assume {:verifier.code 0} true;
  $i25 := $trunc.i8.i1($i24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11336, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i25 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11337, 30} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p4, 581);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11337, 30} true;
  assume {:verifier.code 0} true;
  $i27 := $load.i8($M.0, $p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11337, 13} true;
  assume {:verifier.code 0} true;
  $i28 := $zext.i8.i64($i27);
  // WARNING: %33 = zext i8 %32 to i64, !dbg !8369, !verifier.code !8334
  call {:cexpr "__len"} boogie_si_record_i64($i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11338, 46} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p4, 840);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11338, 46} true;
  assume {:verifier.code 0} true;
  $p30 := $load.ref($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11338, 84} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p0, 1448);
  $p32 := $add.ref($add.ref($p0, 1448), 32);
  $p33 := $add.ref($add.ref($add.ref($p0, 1448), 32), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11338, 56} true;
  assume {:verifier.code 0} true;
  $p34 := $bitcast.ref.ref($p33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11338, 13} true;
  assume {:verifier.code 0} true;
  call $i35 := __builtinx_memcpy.ref.ref.i64($p30, $p34, $i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11340, 34} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p4, 581);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11340, 34} true;
  assume {:verifier.code 0} true;
  $i37 := $load.i8($M.0, $p36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11340, 17} true;
  assume {:verifier.code 0} true;
  $i38 := $zext.i8.i64($i37);
  // WARNING: %43 = zext i8 %42 to i64, !dbg !8377, !verifier.code !8334
  call {:cexpr "__len___0"} boogie_si_record_i64($i38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11341, 53} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p4, 548);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11341, 34} true;
  assume {:verifier.code 0} true;
  $p40 := $bitcast.ref.ref($p39);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11341, 93} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($p0, 1448);
  $p42 := $add.ref($add.ref($p0, 1448), 32);
  $p43 := $add.ref($add.ref($add.ref($p0, 1448), 32), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11341, 65} true;
  assume {:verifier.code 0} true;
  $p44 := $bitcast.ref.ref($p43);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11341, 17} true;
  assume {:verifier.code 0} true;
  call $i45 := __builtinx_memcpy.ref.ref.i64($p40, $p44, $i38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11343, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11346, 25} true;
  assume {:verifier.code 0} true;
  $i46 := $load.i64($M.0, jiffies);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11346, 12} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($p0, 2608);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11346, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p47, $i46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11347, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const is_valid_ether_addr: ref;
axiom (is_valid_ether_addr == $sub.ref(0, 270403));
procedure  is_valid_ether_addr($p0: ref)
  returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9655, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := is_multicast_ether_addr($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9655, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i8($i1);
  // WARNING: %3 = zext i1 %2 to i8, !dbg !8337, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i8($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9656, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i8.i1($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9656, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9658, 3} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  $i4 := 1;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9661, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9661, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9662, 15} true;
  assume {:verifier.code 0} true;
  call $i6 := is_zero_ether_addr($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9662, 13} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i1.i8($i6);
  // WARNING: %11 = zext i1 %10 to i8, !dbg !8352, !verifier.code !8334
  call {:cexpr "tmp___1"} boogie_si_record_i8($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9663, 9} true;
  assume {:verifier.code 0} true;
  $i8 := $trunc.i8.i1($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9663, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb5:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  $i12 := 0;
  goto $bb12;
$bb6:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9665, 5} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  goto $bb8;
$bb7:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  $i9 := 1;
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9668, 9} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9668, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9670, 5} true;
  assume {:verifier.code 0} true;
  $i11 := 1;
  goto $bb11;
$bb10:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  $i11 := 0;
  goto $bb11;
$bb11:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9673, 3} true;
  assume {:verifier.code 0} true;
  $i12 := $i11;
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9676, 11} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i32($i12, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9676, 3} true;
  assume {:verifier.code 0} true;
  $r := $i13;
  $exn := false;
  return;
}
const is_multicast_ether_addr: ref;
axiom (is_multicast_ether_addr == $sub.ref(0, 271435));
procedure  is_multicast_ether_addr($p0: ref)
  returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9643, 18} true;
  assume {:verifier.code 0} true;
  $i1 := $load.i8($M.0, $p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9643, 12} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i8.i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9643, 24} true;
  assume {:verifier.code 0} true;
  $i3 := $and.i32($i2, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9643, 29} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9643, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const is_zero_ether_addr: ref;
axiom (is_zero_ether_addr == $sub.ref(0, 272467));
procedure  is_zero_ether_addr($p0: ref)
  returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9635, 27} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9635, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i32($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9635, 69} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9635, 89} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p3, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9635, 67} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i16($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9635, 52} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i16.i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9635, 50} true;
  assume {:verifier.code 0} true;
  $i7 := $or.i32($i2, $i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9635, 96} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9635, 3} true;
  assume {:verifier.code 0} true;
  $r := $i8;
  $exn := false;
  return;
}
const del_timer_sync: ref;
axiom (del_timer_sync == $sub.ref(0, 273499));
procedure  del_timer_sync($p0: ref)
  returns ($r: i32);
const disable_suitable_timer_4: ref;
axiom (disable_suitable_timer_4 == $sub.ref(0, 274531));
procedure  disable_suitable_timer_4($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13481, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $M.3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13481, 21} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13481, 26} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13481, 29} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13481, 70} true;
  assume {:verifier.code 0} true;
  $p4 := $M.2;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13481, 54} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13481, 51} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i64($i3, $i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13481, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13481, 26} true;
  assume {:verifier.code 0} true;
  assume !(($i2 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb7;
$bb4:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13482, 19} true;
  assume {:verifier.code 0} true;
  $M.3 := 0;
  call {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13483, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13481, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i6 == 1));
  goto $bb3;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13507, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13487, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13487, 21} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13487, 26} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13487, 29} true;
  assume {:verifier.code 0} true;
  $i9 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13487, 70} true;
  assume {:verifier.code 0} true;
  $p10 := $M.4;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13487, 54} true;
  assume {:verifier.code 0} true;
  $i11 := $p2i.ref.i64($p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13487, 51} true;
  assume {:verifier.code 0} true;
  $i12 := $eq.i64($i9, $i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13487, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb11, $bb12;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13487, 26} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb10;
$bb10:
  assume {:verifier.code 0} true;
  goto $bb13;
$bb11:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13488, 19} true;
  assume {:verifier.code 0} true;
  $M.5 := 0;
  call {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13489, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13487, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i12 == 1));
  goto $bb10;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13493, 7} true;
  assume {:verifier.code 0} true;
  $i13 := $M.7;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13493, 21} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i32($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13493, 26} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13493, 29} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13493, 70} true;
  assume {:verifier.code 0} true;
  $p16 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13493, 54} true;
  assume {:verifier.code 0} true;
  $i17 := $p2i.ref.i64($p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13493, 51} true;
  assume {:verifier.code 0} true;
  $i18 := $eq.i64($i15, $i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13493, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb17, $bb18;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13493, 26} true;
  assume {:verifier.code 0} true;
  assume !(($i14 == 1));
  goto $bb16;
$bb16:
  assume {:verifier.code 0} true;
  goto $bb19;
$bb17:
  assume ($i18 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13494, 19} true;
  assume {:verifier.code 0} true;
  $M.7 := 0;
  call {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13495, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13493, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i18 == 1));
  goto $bb16;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13499, 7} true;
  assume {:verifier.code 0} true;
  $i19 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13499, 21} true;
  assume {:verifier.code 0} true;
  $i20 := $ne.i32($i19, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13499, 26} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i20 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13499, 29} true;
  assume {:verifier.code 0} true;
  $i21 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13499, 70} true;
  assume {:verifier.code 0} true;
  $p22 := $M.8;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13499, 54} true;
  assume {:verifier.code 0} true;
  $i23 := $p2i.ref.i64($p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13499, 51} true;
  assume {:verifier.code 0} true;
  $i24 := $eq.i64($i21, $i23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13499, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb23, $bb24;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13499, 26} true;
  assume {:verifier.code 0} true;
  assume !(($i20 == 1));
  goto $bb22;
$bb22:
  assume {:verifier.code 0} true;
  goto $bb25;
$bb23:
  assume ($i24 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13500, 19} true;
  assume {:verifier.code 0} true;
  $M.9 := 0;
  call {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13501, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13499, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i24 == 1));
  goto $bb22;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13505, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
}
const __might_sleep: ref;
axiom (__might_sleep == $sub.ref(0, 275563));
procedure  __might_sleep($p0: ref, $i1: i32, $i2: i32);
const netdev_get_tx_queue: ref;
axiom (netdev_get_tx_queue == $sub.ref(0, 276595));
procedure  netdev_get_tx_queue($p0: ref, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !12024, metadata !8330), !dbg !12025, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9446, 39} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 920);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9446, 39} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9446, 45} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i32.i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9446, 43} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p3, $mul.ref($i4, 496));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9446, 3} true;
  assume {:verifier.code 0} true;
  $r := $p5;
  $exn := false;
  return;
}
const netif_tx_stop_queue: ref;
axiom (netif_tx_stop_queue == $sub.ref(0, 277627));
procedure  netif_tx_stop_queue($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9488, 19} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9488, 45} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i64($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9488, 45} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  // WARNING: %4 = zext i1 %3 to i32, !dbg !8337, !verifier.code !8334
  call {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9489, 43} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9489, 43} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i1.i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9489, 29} true;
  assume {:verifier.code 0} true;
  $i6 := $sext.i32.i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9489, 9} true;
  assume {:verifier.code 0} true;
  call $i7 := ldv__builtin_expect($i6, 0);
  // WARNING: %8 = call i64 @ldv__builtin_expect(i64 %7, i64 0), !dbg !8342, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9490, 11} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i64($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9490, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9491, 5} true;
  assume {:verifier.code 0} true;
  call warn_slowpath_null(.str.7, 2212);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9492, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9495, 47} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i32($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9495, 47} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i1.i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9495, 33} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i32.i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9495, 13} true;
  assume {:verifier.code 0} true;
  call $i12 := ldv__builtin_expect($i11, 0);
  // WARNING: %16 = call i64 @ldv__builtin_expect(i64 %15, i64 0), !dbg !8353, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i64($i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9496, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i64($i12, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9496, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9497, 5} true;
  assume {:verifier.code 0} true;
  call $i14 := printk.ref(.str.8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9498, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9505, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9502, 57} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p0, 424);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9502, 3} true;
  assume {:verifier.code 0} true;
  call set_bit(0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9503, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
}
const printk: ref;
axiom (printk == $sub.ref(0, 278659));
procedure  printk.ref.ref($p0: ref, p.1: ref)
  returns ($r: i32);
procedure  printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref)
  returns ($r: i32);
procedure  printk.ref($p0: ref)
  returns ($r: i32);
const igbvf_reinit_locked: ref;
axiom (igbvf_reinit_locked == $sub.ref(0, 279691));
procedure  igbvf_reinit_locked($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11407, 3} true;
  assume {:verifier.code 0} true;
  call __might_sleep(.str.2, 1666, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11413, 70} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11413, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := test_and_set_bit(1, $p1);
  // WARNING: %3 = call i32 @test_and_set_bit(i64 1, i64* %2), !dbg !8338, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11414, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11414, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11414, 7} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11414, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb8;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11415, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11411, 3} true;
  assume {:verifier.code 0} true;
  call msleep(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11413, 9} true;
  assume {:verifier.code 0} true;
  call $i4 := test_and_set_bit(1, $p1);
  // WARNING: %6 = call i32 @test_and_set_bit(i64 1, i64* %2), !dbg !8338, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11414, 11} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11414, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb6, $bb7;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11414, 7} true;
  assume {:verifier.code 0} true;
  assume ($i5 == 1);
  goto $bb4;
$bb7:
  assume !(($i5 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11414, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11419, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_down($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11420, 3} true;
  assume {:verifier.code 0} true;
  call $i6 := igbvf_up($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11421, 57} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11421, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit(1, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11422, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const strlcpy: ref;
axiom (strlcpy == $sub.ref(0, 280723));
procedure  strlcpy($p0: ref, $p1: ref, $i2: i64)
  returns ($r: i64);
const pci_name: ref;
axiom (pci_name == $sub.ref(0, 281755));
procedure  pci_name($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7318, 26} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7318, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := dev_name($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7319, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const dev_name: ref;
axiom (dev_name == $sub.ref(0, 282787));
procedure  dev_name($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7251, 28} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 312);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7251, 28} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7251, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7251, 38} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i64($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7251, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7252, 34} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 312);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7252, 34} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7252, 5} true;
  assume {:verifier.code 0} true;
  $p7 := $p6;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7259, 1} true;
  assume {:verifier.code 0} true;
  $r := $p7;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7256, 29} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7256, 9} true;
  assume {:verifier.code 0} true;
  call $p9 := kobject_name($p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7257, 3} true;
  assume {:verifier.code 0} true;
  $p7 := $p9;
  goto $bb3;
}
const kobject_name: ref;
axiom (kobject_name == $sub.ref(0, 283819));
procedure  kobject_name($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7243, 33} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7243, 33} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7243, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const ethtool_cmd_speed_set: ref;
axiom (ethtool_cmd_speed_set == $sub.ref(0, 284851));
procedure  ethtool_cmd_speed_set($p0: ref, $i1: i32)
{
  var $i2: i16;
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.ethtool_cmd* %0, i64 0, metadata !12133, metadata !8330), !dbg !12134, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7290, 15} true;
  assume {:verifier.code 0} true;
  $i2 := $trunc.i32.i16($i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7290, 7} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7290, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p3, $i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7291, 42} true;
  assume {:verifier.code 0} true;
  $i4 := $lshr.i32($i1, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7291, 18} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i32.i16($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7291, 7} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p0, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7291, 16} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p6, $i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7292, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_probe: ref;
axiom (igbvf_probe == $sub.ref(0, 285883));
procedure  igbvf_probe($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i16: i32;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i16;
  var $p59: ref;
  var $p60: ref;
  var $i61: i16;
  var $p62: ref;
  var $p63: ref;
  var $i64: i16;
  var $p65: ref;
  var $p66: ref;
  var $i67: i16;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $i119: i32;
  var $i120: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $i132: i64;
  var $p133: ref;
  var $i134: i1;
  var $p135: ref;
  var $i136: i64;
  var $i137: i64;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i64;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i64;
  var $p146: ref;
  var $p147: ref;
  var $i148: i64;
  var $i149: i64;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $i153: i64;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i64;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $i174: i32;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i1;
  var $i180: i8;
  var $i181: i1;
  var $p182: ref;
  var $i183: i32;
  var $p184: ref;
  var $i185: i8;
  var $i186: i64;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $p194: ref;
  var $p195: ref;
  var $i196: i1;
  var $i197: i8;
  var $i198: i1;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i202: i32;
  var $p203: ref;
  var $i204: i8;
  var $i205: i64;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i32;
  var $p213: ref;
  var $i214: i64;
  var $i215: i32;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $i252: i32;
  var $i253: i32;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $i258: i32;
  var $i259: i1;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $i121: i32;
  var $i118: i32;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $i109: i32;
  var $i29: i32;
  var $i25: i32;
  var $i22: i32;
  var $i12: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12829, 28} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p1, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12829, 28} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i64($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12829, 8} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref(igbvf_info_tbl, $mul.ref($i7, 8));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12829, 8} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.13, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12830, 9} true;
  assume {:verifier.code 0} true;
  call $i10 := pci_enable_device_mem($p0);
  // WARNING: %11 = call i32 @pci_enable_device_mem(%struct.pci_dev* %0), !dbg !8348, !verifier.code !8329
  call {:cexpr "err"} boogie_si_record_i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12831, 11} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.i32($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12831, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i11 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12832, 5} true;
  assume {:verifier.code 0} true;
  $i12 := $i10;
  goto $bb3;
$bb2:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13010, 1} true;
  assume {:verifier.code 0} true;
  $r := $i12;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12837, 43} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p0, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12837, 9} true;
  assume {:verifier.code 0} true;
  call $i14 := dma_set_mask_and_coherent($p13, $sub.i64(0, 1));
  // WARNING: %17 = call i32 @dma_set_mask_and_coherent(%struct.device* %16, i64 -1), !dbg !8359, !verifier.code !8329
  call {:cexpr "err"} boogie_si_record_i32($i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12838, 11} true;
  assume {:verifier.code 0} true;
  $i15 := $eq.i32($i14, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12838, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i15 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12840, 3} true;
  assume {:verifier.code 0} true;
  $i16 := 1;
  goto $bb7;
$bb6:
  assume !(($i15 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12841, 45} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p0, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12841, 11} true;
  assume {:verifier.code 0} true;
  call $i18 := dma_set_mask_and_coherent($p17, 4294967295);
  // WARNING: %22 = call i32 @dma_set_mask_and_coherent(%struct.device* %21, i64 4294967295), !dbg !8367, !verifier.code !8329
  call {:cexpr "err"} boogie_si_record_i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12842, 13} true;
  assume {:verifier.code 0} true;
  $i19 := $ne.i32($i18, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12842, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb8, $bb9;
$bb7:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12849, 9} true;
  assume {:verifier.code 0} true;
  call $i23 := pci_request_regions($p0, igbvf_driver_name);
  // WARNING: %30 = call i32 @pci_request_regions(%struct.pci_dev* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @igbvf_driver_name, i32 0, i32 0)), !dbg !8375, !verifier.code !8329
  call {:cexpr "err"} boogie_si_record_i32($i23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12850, 11} true;
  assume {:verifier.code 0} true;
  $i24 := $ne.i32($i23, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12850, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb12, $bb13;
$bb8:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12843, 49} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p0, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12843, 7} true;
  assume {:verifier.code 0} true;
  call $i21 := dev_err.ref.ref($p20, .str.24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12844, 7} true;
  assume {:verifier.code 0} true;
  $i22 := $i18;
  goto $bb10;
$bb9:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13007, 3} true;
  assume {:verifier.code 0} true;
  call pci_disable_device($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13008, 3} true;
  assume {:verifier.code 0} true;
  $i12 := $i22;
  goto $bb3;
$bb11:
  assume {:verifier.code 0} true;
  $i16 := 0;
  goto $bb7;
$bb12:
  assume ($i24 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12851, 5} true;
  assume {:verifier.code 0} true;
  $i25 := $i23;
  goto $bb14;
$bb13:
  assume !(($i24 == 1));
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13004, 3} true;
  assume {:verifier.code 0} true;
  $i22 := $i25;
  goto $bb10;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12855, 3} true;
  assume {:verifier.code 0} true;
  call pci_set_master($p0);
  // WARNING: call void @pci_set_master(%struct.pci_dev* %0), !dbg !8381, !verifier.code !8329
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12857, 12} true;
  assume {:verifier.code 0} true;
  call $p26 := alloc_etherdev_mqs(2688, 1, 1);
  assume $isExternal($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12858, 7} true;
  assume {:verifier.code 0} true;
  $i27 := $p2i.ref.i64($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12858, 30} true;
  assume {:verifier.code 0} true;
  $i28 := $eq.i64($i27, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12858, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb16, $bb17;
$bb16:
  assume ($i28 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12859, 5} true;
  assume {:verifier.code 0} true;
  $i29 := $sub.i32(0, 12);
  goto $bb18;
$bb17:
  assume !(($i28 == 1));
  assume {:verifier.code 0} true;
  goto $bb19;
$bb18:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13004, 3} true;
  assume {:verifier.code 0} true;
  call pci_release_regions($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13004, 3} true;
  assume {:verifier.code 0} true;
  $i25 := $i29;
  goto $bb14;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12863, 32} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p0, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12863, 11} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p26, 1296);
  $p32 := $add.ref($p26, 1296);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12863, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p32, $p30);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12864, 25} true;
  assume {:verifier.code 0} true;
  $p33 := $bitcast.ref.ref($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12864, 3} true;
  assume {:verifier.code 0} true;
  call pci_set_drvdata($p0, $p33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12865, 9} true;
  assume {:verifier.code 0} true;
  call $p34 := netdev_priv($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12866, 13} true;
  assume {:verifier.code 0} true;
  $p35 := $bitcast.ref.ref($p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12867, 19} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p35, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12868, 12} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p35, 1176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12868, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p37, $p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12869, 12} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p35, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12869, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p38, $p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12870, 12} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p35, 416);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12870, 15} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p39, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12871, 22} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p9, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12871, 22} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i32($M.0, $p40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12871, 12} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($p35, 2580);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12871, 16} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p42, $i41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12872, 24} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p9, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12872, 24} true;
  assume {:verifier.code 0} true;
  $i44 := $load.i32($M.0, $p43);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12872, 12} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($p35, 2600);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12872, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p45, $i44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12873, 22} true;
  assume {:verifier.code 0} true;
  $p46 := $bitcast.ref.ref($p35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12873, 12} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($p35, 1448);
  $p48 := $add.ref($p35, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12873, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p48, $p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12874, 30} true;
  assume {:verifier.code 0} true;
  $p49 := $p9;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12874, 30} true;
  assume {:verifier.code 0} true;
  $i50 := $load.i32($M.0, $p49);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12874, 12} true;
  assume {:verifier.code 0} true;
  $p51 := $add.ref($p35, 1448);
  $p52 := $add.ref($add.ref($p35, 1448), 32);
  $p53 := $add.ref($add.ref($add.ref($p35, 1448), 32), 124);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12874, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p53, $i50);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12875, 40} true;
  assume {:verifier.code 0} true;
  $i54 := $M.14;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12875, 25} true;
  assume {:verifier.code 0} true;
  call $i55 := netif_msg_init($i54, 7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12875, 12} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($p35, 2540);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12875, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p56, $i55);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12876, 25} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($p0, 60);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12876, 25} true;
  assume {:verifier.code 0} true;
  $i58 := $load.i16($M.0, $p57);
  $p59 := $add.ref($add.ref($p35, 1448), 278);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12876, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p59, $i58);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12877, 25} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($p0, 62);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12877, 25} true;
  assume {:verifier.code 0} true;
  $i61 := $load.i16($M.0, $p60);
  $p62 := $add.ref($add.ref($p35, 1448), 272);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12877, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p62, $i61);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12878, 35} true;
  assume {:verifier.code 0} true;
  $p63 := $add.ref($p0, 64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12878, 35} true;
  assume {:verifier.code 0} true;
  $i64 := $load.i16($M.0, $p63);
  $p65 := $add.ref($add.ref($p35, 1448), 274);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12878, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p65, $i64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12879, 35} true;
  assume {:verifier.code 0} true;
  $p66 := $add.ref($p0, 66);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12879, 35} true;
  assume {:verifier.code 0} true;
  $i67 := $load.i16($M.0, $p66);
  $p68 := $add.ref($add.ref($p35, 1448), 276);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12879, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p68, $i67);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12880, 27} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($p0, 72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12880, 27} true;
  assume {:verifier.code 0} true;
  $i70 := $load.i8($M.0, $p69);
  $p71 := $add.ref($add.ref($p35, 1448), 280);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12880, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p71, $i70);
  // WARNING: store i8 %81, i8* %82, align 8, !dbg !8436, !verifier.code !8329
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 27} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($p0, 1584);
  $p73 := $add.ref($p0, 1584);
  $p74 := $add.ref($p0, 1584);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 39} true;
  assume {:verifier.code 0} true;
  $i75 := $load.i64($M.0, $p74);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 52} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($p0, 1584);
  $p77 := $add.ref($p0, 1584);
  $p78 := $add.ref($p0, 1584);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 64} true;
  assume {:verifier.code 0} true;
  $i79 := $load.i64($M.0, $p78);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 70} true;
  assume {:verifier.code 0} true;
  $i80 := $ne.i64($i79, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 78} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i80} true;
  goto $bb20, $bb22;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 78} true;
  assume {:verifier.code 0} true;
  assume ($i80 == 1);
  goto $bb21;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 156} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($p0, 1584);
  $p91 := $add.ref($p0, 1584);
  $p92 := $add.ref($add.ref($p0, 1584), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 168} true;
  assume {:verifier.code 0} true;
  $i93 := $load.i64($M.0, $p92);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 180} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($p0, 1584);
  $p95 := $add.ref($p0, 1584);
  $p96 := $add.ref($p0, 1584);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 192} true;
  assume {:verifier.code 0} true;
  $i97 := $load.i64($M.0, $p96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 172} true;
  assume {:verifier.code 0} true;
  $i98 := $sub.i64($i93, $i97);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 199} true;
  assume {:verifier.code 0} true;
  $i99 := $add.i64($i98, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 46} true;
  assume {:verifier.code 0} true;
  $i100 := $i99;
  goto $bb25;
$bb22:
  assume !(($i80 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 87} true;
  assume {:verifier.code 0} true;
  $p81 := $add.ref($p0, 1584);
  $p82 := $add.ref($p0, 1584);
  $p83 := $add.ref($add.ref($p0, 1584), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 99} true;
  assume {:verifier.code 0} true;
  $i84 := $load.i64($M.0, $p83);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 112} true;
  assume {:verifier.code 0} true;
  $p85 := $add.ref($p0, 1584);
  $p86 := $add.ref($p0, 1584);
  $p87 := $add.ref($p0, 1584);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 124} true;
  assume {:verifier.code 0} true;
  $i88 := $load.i64($M.0, $p87);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 103} true;
  assume {:verifier.code 0} true;
  $i89 := $ne.i64($i84, $i88);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 46} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i89} true;
  goto $bb23, $bb24;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 46} true;
  assume {:verifier.code 0} true;
  assume ($i89 == 1);
  goto $bb21;
$bb24:
  assume !(($i89 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 46} true;
  assume {:verifier.code 0} true;
  $i100 := 0;
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 46} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12882, 13} true;
  assume {:verifier.code 0} true;
  call $p101 := ioremap($i75, $i100);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12883, 12} true;
  assume {:verifier.code 0} true;
  $p102 := $add.ref($p35, 1448);
  $p103 := $add.ref($add.ref($p35, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12883, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p103, $p101);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12884, 32} true;
  assume {:verifier.code 0} true;
  $p104 := $add.ref($p35, 1448);
  $p105 := $add.ref($add.ref($p35, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12884, 35} true;
  assume {:verifier.code 0} true;
  $p106 := $load.ref($M.0, $p105);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12884, 7} true;
  assume {:verifier.code 0} true;
  $i107 := $p2i.ref.i64($p106);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12884, 43} true;
  assume {:verifier.code 0} true;
  $i108 := $eq.i64($i107, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12884, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i108} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i108 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12885, 5} true;
  assume {:verifier.code 0} true;
  $i109 := $sub.i32(0, 5);
  goto $bb28;
$bb27:
  assume !(($i108 == 1));
  assume {:verifier.code 0} true;
  goto $bb29;
$bb28:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13002, 3} true;
  assume {:verifier.code 0} true;
  call ldv_free_netdev_55($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13002, 3} true;
  assume {:verifier.code 0} true;
  $i29 := $i109;
  goto $bb18;
$bb29:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12889, 27} true;
  assume {:verifier.code 0} true;
  $p110 := $add.ref($p9, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12889, 27} true;
  assume {:verifier.code 0} true;
  $p111 := $load.ref($M.0, $p110);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12889, 7} true;
  assume {:verifier.code 0} true;
  $i112 := $p2i.ref.i64($p111);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12889, 40} true;
  assume {:verifier.code 0} true;
  $i113 := $ne.i64($i112, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12889, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i113} true;
  goto $bb30, $bb31;
$bb30:
  assume ($i113 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12890, 18} true;
  assume {:verifier.code 0} true;
  $p114 := $add.ref($p9, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12890, 18} true;
  assume {:verifier.code 0} true;
  $p115 := $load.ref($M.0, $p114);
  call $i116 := devirtbounce.16($p115, $p35);
  // WARNING: %134 = call i32 @devirtbounce.16(i32 (%struct.igbvf_adapter*)* %133, %struct.igbvf_adapter* %46)
  call {:cexpr "err"} boogie_si_record_i32($i116);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12891, 13} true;
  assume {:verifier.code 0} true;
  $i117 := $ne.i32($i116, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12891, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i117} true;
  goto $bb32, $bb33;
$bb31:
  assume !(($i113 == 1));
  assume {:verifier.code 0} true;
  goto $bb36;
$bb32:
  assume ($i117 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12892, 7} true;
  assume {:verifier.code 0} true;
  $i118 := $i116;
  goto $bb34;
$bb33:
  assume !(($i117 == 1));
  assume {:verifier.code 0} true;
  goto $bb35;
$bb34:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13000, 39} true;
  assume {:verifier.code 0} true;
  $p266 := $add.ref($p35, 1448);
  $p267 := $add.ref($add.ref($p35, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13000, 42} true;
  assume {:verifier.code 0} true;
  $p268 := $load.ref($M.0, $p267);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13000, 3} true;
  assume {:verifier.code 0} true;
  call iounmap($p268);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13000, 3} true;
  assume {:verifier.code 0} true;
  $i109 := $i118;
  goto $bb28;
$bb35:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12896, 3} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb36:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12899, 9} true;
  assume {:verifier.code 0} true;
  call $i119 := igbvf_sw_init($p35);
  // WARNING: %141 = call i32 @igbvf_sw_init(%struct.igbvf_adapter* %46), !dbg !8488, !verifier.code !8329
  call {:cexpr "err"} boogie_si_record_i32($i119);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12900, 11} true;
  assume {:verifier.code 0} true;
  $i120 := $ne.i32($i119, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12900, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i120} true;
  goto $bb37, $bb38;
$bb37:
  assume ($i120 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12901, 5} true;
  assume {:verifier.code 0} true;
  $i121 := $i119;
  goto $bb39;
$bb38:
  assume !(($i120 == 1));
  assume {:verifier.code 0} true;
  goto $bb40;
$bb39:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12998, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_reset_interrupt_capability($p35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12998, 3} true;
  assume {:verifier.code 0} true;
  $i118 := $i121;
  goto $bb34;
$bb40:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12905, 11} true;
  assume {:verifier.code 0} true;
  $p122 := $add.ref($p26, 488);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12905, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p122, igbvf_netdev_ops);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12906, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_set_ethtool_ops($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12907, 11} true;
  assume {:verifier.code 0} true;
  $p123 := $add.ref($p26, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12907, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p123, 1250);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12908, 13} true;
  assume {:verifier.code 0} true;
  call $p124 := pci_name($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12909, 30} true;
  assume {:verifier.code 0} true;
  $p125 := $p26;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12909, 11} true;
  assume {:verifier.code 0} true;
  $p126 := $bitcast.ref.ref($p125);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12909, 3} true;
  assume {:verifier.code 0} true;
  call $p127 := strncpy($p126, $p124, 15);
  assume $isExternal($p127);
  // WARNING: %151 = call i8* @strncpy(i8* %150, i8* %148, i64 15), !dbg !8504, !verifier.code !8329
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12912, 12} true;
  assume {:verifier.code 0} true;
  $p128 := $add.ref($p35, 936);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12912, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p128, $u0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12913, 11} true;
  assume {:verifier.code 0} true;
  $p129 := $add.ref($p26, 216);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12913, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p129, 17180983315);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12914, 30} true;
  assume {:verifier.code 0} true;
  $p130 := $add.ref($p26, 216);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12914, 30} true;
  assume {:verifier.code 0} true;
  $i131 := $load.i64($M.0, $p130);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12914, 42} true;
  assume {:verifier.code 0} true;
  $i132 := $or.i64($i131, 896);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12914, 11} true;
  assume {:verifier.code 0} true;
  $p133 := $add.ref($p26, 208);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12914, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p133, $i132);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12915, 21} true;
  assume {:verifier.code 0} true;
  $i134 := $ne.i32($i16, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12915, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i134} true;
  goto $bb41, $bb42;
$bb41:
  assume ($i134 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12916, 32} true;
  assume {:verifier.code 0} true;
  $p135 := $add.ref($p26, 208);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12916, 32} true;
  assume {:verifier.code 0} true;
  $i136 := $load.i64($M.0, $p135);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12916, 41} true;
  assume {:verifier.code 0} true;
  $i137 := $or.i64($i136, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12916, 13} true;
  assume {:verifier.code 0} true;
  $p138 := $add.ref($p26, 208);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12916, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p138, $i137);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12917, 3} true;
  assume {:verifier.code 0} true;
  goto $bb43;
$bb42:
  assume !(($i134 == 1));
  assume {:verifier.code 0} true;
  goto $bb43;
$bb43:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12920, 35} true;
  assume {:verifier.code 0} true;
  $p139 := $add.ref($p26, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12920, 35} true;
  assume {:verifier.code 0} true;
  $i140 := $load.i64($M.0, $p139);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12920, 49} true;
  assume {:verifier.code 0} true;
  $i141 := $or.i64($i140, 65536);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12920, 11} true;
  assume {:verifier.code 0} true;
  $p142 := $add.ref($p26, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12920, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p142, $i141);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12921, 35} true;
  assume {:verifier.code 0} true;
  $p143 := $add.ref($p26, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12921, 35} true;
  assume {:verifier.code 0} true;
  $i144 := $load.i64($M.0, $p143);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12921, 49} true;
  assume {:verifier.code 0} true;
  $i145 := $or.i64($i144, 1048576);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12921, 11} true;
  assume {:verifier.code 0} true;
  $p146 := $add.ref($p26, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12921, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p146, $i145);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12922, 35} true;
  assume {:verifier.code 0} true;
  $p147 := $add.ref($p26, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12922, 35} true;
  assume {:verifier.code 0} true;
  $i148 := $load.i64($M.0, $p147);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12922, 49} true;
  assume {:verifier.code 0} true;
  $i149 := $or.i64($i148, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12922, 11} true;
  assume {:verifier.code 0} true;
  $p150 := $add.ref($p26, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12922, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p150, $i149);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12923, 35} true;
  assume {:verifier.code 0} true;
  $p151 := $add.ref($p26, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12923, 35} true;
  assume {:verifier.code 0} true;
  $i152 := $load.i64($M.0, $p151);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12923, 49} true;
  assume {:verifier.code 0} true;
  $i153 := $or.i64($i152, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12923, 11} true;
  assume {:verifier.code 0} true;
  $p154 := $add.ref($p26, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12923, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p154, $i153);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12924, 35} true;
  assume {:verifier.code 0} true;
  $p155 := $add.ref($p26, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12924, 35} true;
  assume {:verifier.code 0} true;
  $i156 := $load.i64($M.0, $p155);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12924, 49} true;
  assume {:verifier.code 0} true;
  $i157 := $or.i64($i156, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12924, 11} true;
  assume {:verifier.code 0} true;
  $p158 := $add.ref($p26, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12924, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p158, $i157);
  $p159 := $add.ref($add.ref($p35, 1448), 32);
  $p160 := $add.ref($add.ref($p35, 1448), 32);
  $p161 := $add.ref($add.ref($add.ref($p35, 1448), 32), 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12925, 24} true;
  assume {:verifier.code 0} true;
  $p162 := $load.ref($M.0, $p161);
  call $i163 := devirtbounce.2($p162, $p36);
  // WARNING: %190 = call i32 @devirtbounce.2(i32 (%struct.e1000_hw*)* %189, %struct.e1000_hw* %47)
  call {:cexpr "err"} boogie_si_record_i32($i163);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12926, 11} true;
  assume {:verifier.code 0} true;
  $i164 := $ne.i32($i163, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12926, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i164} true;
  goto $bb44, $bb45;
$bb44:
  assume ($i164 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12927, 49} true;
  assume {:verifier.code 0} true;
  $p165 := $add.ref($p0, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12927, 5} true;
  assume {:verifier.code 0} true;
  call $i166 := _dev_info.ref.ref($p165, .str.25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12928, 3} true;
  assume {:verifier.code 0} true;
  goto $bb46;
$bb45:
  assume !(($i164 == 1));
  $p167 := $add.ref($add.ref($p35, 1448), 32);
  $p168 := $add.ref($add.ref($p35, 1448), 32);
  $p169 := $add.ref($add.ref($add.ref($p35, 1448), 32), 96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12929, 26} true;
  assume {:verifier.code 0} true;
  $p170 := $load.ref($M.0, $p169);
  call $i171 := devirtbounce.2($p170, $p36);
  // WARNING: %200 = call i32 @devirtbounce.2(i32 (%struct.e1000_hw*)* %199, %struct.e1000_hw* %47)
  call {:cexpr "err"} boogie_si_record_i32($i171);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12930, 13} true;
  assume {:verifier.code 0} true;
  $i172 := $ne.i32($i171, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12930, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i172} true;
  goto $bb47, $bb48;
$bb46:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12944, 55} true;
  assume {:verifier.code 0} true;
  $p194 := $add.ref($p26, 840);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12944, 55} true;
  assume {:verifier.code 0} true;
  $p195 := $load.ref($M.0, $p194);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12944, 13} true;
  assume {:verifier.code 0} true;
  call $i196 := is_valid_ether_addr($p195);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12944, 11} true;
  assume {:verifier.code 0} true;
  $i197 := $zext.i1.i8($i196);
  // WARNING: %233 = zext i1 %232 to i8, !dbg !8585, !verifier.code !8329
  call {:cexpr "tmp___4"} boogie_si_record_i8($i197);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12945, 7} true;
  assume {:verifier.code 0} true;
  $i198 := $trunc.i8.i1($i197);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12945, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i198} true;
  goto $bb53, $bb54;
$bb47:
  assume ($i172 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12931, 51} true;
  assume {:verifier.code 0} true;
  $p173 := $add.ref($p0, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12931, 7} true;
  assume {:verifier.code 0} true;
  call $i174 := _dev_info.ref.ref($p173, .str.26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12932, 5} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb48:
  assume !(($i172 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12933, 62} true;
  assume {:verifier.code 0} true;
  $p175 := $add.ref($p35, 1448);
  $p176 := $add.ref($add.ref($p35, 1448), 32);
  $p177 := $add.ref($add.ref($add.ref($p35, 1448), 32), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12933, 36} true;
  assume {:verifier.code 0} true;
  $p178 := $bitcast.ref.ref($p177);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12933, 17} true;
  assume {:verifier.code 0} true;
  call $i179 := is_zero_ether_addr($p178);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12933, 15} true;
  assume {:verifier.code 0} true;
  $i180 := $zext.i1.i8($i179);
  // WARNING: %211 = zext i1 %210 to i8, !dbg !8565, !verifier.code !8329
  call {:cexpr "tmp___3"} boogie_si_record_i8($i180);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12934, 17} true;
  assume {:verifier.code 0} true;
  $i181 := $trunc.i8.i1($i180);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12934, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i181} true;
  goto $bb50, $bb51;
$bb49:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12940, 30} true;
  assume {:verifier.code 0} true;
  $p184 := $add.ref($p26, 581);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12940, 30} true;
  assume {:verifier.code 0} true;
  $i185 := $load.i8($M.0, $p184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12940, 13} true;
  assume {:verifier.code 0} true;
  $i186 := $zext.i8.i64($i185);
  // WARNING: %221 = zext i8 %220 to i64, !dbg !8576, !verifier.code !8329
  call {:cexpr "__len"} boogie_si_record_i64($i186);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12941, 46} true;
  assume {:verifier.code 0} true;
  $p187 := $add.ref($p26, 840);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12941, 46} true;
  assume {:verifier.code 0} true;
  $p188 := $load.ref($M.0, $p187);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12941, 84} true;
  assume {:verifier.code 0} true;
  $p189 := $add.ref($p35, 1448);
  $p190 := $add.ref($add.ref($p35, 1448), 32);
  $p191 := $add.ref($add.ref($add.ref($p35, 1448), 32), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12941, 56} true;
  assume {:verifier.code 0} true;
  $p192 := $bitcast.ref.ref($p191);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12941, 13} true;
  assume {:verifier.code 0} true;
  call $i193 := __builtinx_memcpy.ref.ref.i64($p188, $p192, $i186);
  assume {:verifier.code 0} true;
  goto $bb46;
$bb50:
  assume ($i181 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12935, 53} true;
  assume {:verifier.code 0} true;
  $p182 := $add.ref($p0, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12935, 9} true;
  assume {:verifier.code 0} true;
  call $i183 := _dev_info.ref.ref($p182, .str.27);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12936, 7} true;
  assume {:verifier.code 0} true;
  goto $bb52;
$bb51:
  assume !(($i181 == 1));
  assume {:verifier.code 0} true;
  goto $bb52;
$bb52:
  assume {:verifier.code 0} true;
  goto $bb49;
$bb53:
  assume ($i198 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12947, 3} true;
  assume {:verifier.code 0} true;
  $i199 := 0;
  goto $bb55;
$bb54:
  assume !(($i198 == 1));
  assume {:verifier.code 0} true;
  $i199 := 1;
  goto $bb55;
$bb55:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12950, 7} true;
  assume {:verifier.code 0} true;
  $i200 := $ne.i32($i199, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12950, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i200} true;
  goto $bb56, $bb57;
$bb56:
  assume ($i200 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12951, 49} true;
  assume {:verifier.code 0} true;
  $p201 := $add.ref($p0, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12951, 5} true;
  assume {:verifier.code 0} true;
  call $i202 := _dev_info.ref.ref($p201, .str.28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12952, 5} true;
  assume {:verifier.code 0} true;
  call eth_hw_addr_random($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12953, 34} true;
  assume {:verifier.code 0} true;
  $p203 := $add.ref($p26, 581);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12953, 34} true;
  assume {:verifier.code 0} true;
  $i204 := $load.i8($M.0, $p203);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12953, 17} true;
  assume {:verifier.code 0} true;
  $i205 := $zext.i8.i64($i204);
  // WARNING: %244 = zext i8 %243 to i64, !dbg !8603, !verifier.code !8329
  call {:cexpr "__len___0"} boogie_si_record_i64($i205);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12954, 54} true;
  assume {:verifier.code 0} true;
  $p206 := $add.ref($p35, 1448);
  $p207 := $add.ref($add.ref($p35, 1448), 32);
  $p208 := $add.ref($add.ref($add.ref($p35, 1448), 32), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12954, 34} true;
  assume {:verifier.code 0} true;
  $p209 := $bitcast.ref.ref($p208);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12954, 92} true;
  assume {:verifier.code 0} true;
  $p210 := $add.ref($p26, 840);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12954, 92} true;
  assume {:verifier.code 0} true;
  $p211 := $load.ref($M.0, $p210);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12954, 17} true;
  assume {:verifier.code 0} true;
  call $i212 := __builtinx_memcpy.ref.ref.i64($p209, $p211, $i205);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12956, 3} true;
  assume {:verifier.code 0} true;
  goto $bb58;
$bb57:
  assume !(($i200 == 1));
  assume {:verifier.code 0} true;
  goto $bb58;
$bb58:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12959, 26} true;
  assume {:verifier.code 0} true;
  $p213 := $p35;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12959, 60} true;
  assume {:verifier.code 0} true;
  $i214 := $p2i.ref.i64($p35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12959, 3} true;
  assume {:verifier.code 0} true;
  call $i215 := reg_timer_4($p213, igbvf_watchdog, $i214);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12960, 26} true;
  assume {:verifier.code 0} true;
  $p216 := $add.ref($p35, 256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12960, 3} true;
  assume {:verifier.code 0} true;
  call __init_work($p216, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12961, 19} true;
  assume {:verifier.code 0} true;
  $p217 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12961, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p217, 137438953408);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12962, 12} true;
  assume {:verifier.code 0} true;
  $p218 := $add.ref($p35, 256);
  $p219 := $add.ref($p35, 256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12962, 30} true;
  assume {:verifier.code 0} true;
  $p220 := $bitcast.ref.ref($p219);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12962, 30} true;
  assume {:verifier.code 0} true;
  $p221 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12962, 30} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memcpy.i8($M.0, $M.0, $p220, $p221, 8, $zext.i32.i64(8), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12963, 31} true;
  assume {:verifier.code 0} true;
  $p222 := $add.ref($p35, 256);
  $p223 := $add.ref($add.ref($p35, 256), 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12963, 3} true;
  assume {:verifier.code 0} true;
  call lockdep_init_map($p223, .str.29, $p2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12965, 29} true;
  assume {:verifier.code 0} true;
  $p224 := $add.ref($p35, 256);
  $p225 := $add.ref($add.ref($p35, 256), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12965, 3} true;
  assume {:verifier.code 0} true;
  call INIT_LIST_HEAD($p225);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12966, 12} true;
  assume {:verifier.code 0} true;
  $p226 := $add.ref($p35, 256);
  $p227 := $add.ref($add.ref($p35, 256), 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12966, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p227, igbvf_reset_task);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12967, 26} true;
  assume {:verifier.code 0} true;
  $p228 := $add.ref($p35, 336);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12967, 3} true;
  assume {:verifier.code 0} true;
  call __init_work($p228, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12968, 19} true;
  assume {:verifier.code 0} true;
  $p229 := $p5;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12968, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p229, 137438953408);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12969, 12} true;
  assume {:verifier.code 0} true;
  $p230 := $add.ref($p35, 336);
  $p231 := $add.ref($p35, 336);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12969, 33} true;
  assume {:verifier.code 0} true;
  $p232 := $bitcast.ref.ref($p231);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12969, 33} true;
  assume {:verifier.code 0} true;
  $p233 := $bitcast.ref.ref($p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12969, 33} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memcpy.i8($M.0, $M.0, $p232, $p233, 8, $zext.i32.i64(8), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12970, 31} true;
  assume {:verifier.code 0} true;
  $p234 := $add.ref($p35, 336);
  $p235 := $add.ref($add.ref($p35, 336), 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12970, 3} true;
  assume {:verifier.code 0} true;
  call lockdep_init_map($p235, .str.30, $p4, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12972, 29} true;
  assume {:verifier.code 0} true;
  $p236 := $add.ref($p35, 336);
  $p237 := $add.ref($add.ref($p35, 336), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12972, 3} true;
  assume {:verifier.code 0} true;
  call INIT_LIST_HEAD($p237);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12973, 12} true;
  assume {:verifier.code 0} true;
  $p238 := $add.ref($p35, 336);
  $p239 := $add.ref($add.ref($p35, 336), 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12973, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p239, igbvf_watchdog_task);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12974, 13} true;
  assume {:verifier.code 0} true;
  $p240 := $add.ref($p35, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12974, 13} true;
  assume {:verifier.code 0} true;
  $p241 := $load.ref($M.0, $p240);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12974, 23} true;
  assume {:verifier.code 0} true;
  $p242 := $add.ref($p241, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12974, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p242, 1024);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12975, 13} true;
  assume {:verifier.code 0} true;
  $p243 := $add.ref($p35, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12975, 13} true;
  assume {:verifier.code 0} true;
  $p244 := $load.ref($M.0, $p243);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12975, 23} true;
  assume {:verifier.code 0} true;
  $p245 := $add.ref($p244, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12975, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p245, 1024);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12976, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_reset($p35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12977, 31} true;
  assume {:verifier.code 0} true;
  $p246 := $add.ref($p35, 1448);
  $p247 := $add.ref($add.ref($p35, 1448), 32);
  $p248 := $add.ref($add.ref($add.ref($p35, 1448), 32), 124);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12977, 38} true;
  assume {:verifier.code 0} true;
  $i249 := $load.i32($M.0, $p248);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12977, 43} true;
  assume {:verifier.code 0} true;
  $i250 := $eq.i32($i249, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12977, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i250} true;
  goto $bb59, $bb60;
$bb59:
  assume ($i250 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12978, 31} true;
  assume {:verifier.code 0} true;
  $p251 := $add.ref($p35, 2600);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12978, 31} true;
  assume {:verifier.code 0} true;
  $i252 := $load.i32($M.0, $p251);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12978, 37} true;
  assume {:verifier.code 0} true;
  $i253 := $or.i32($i252, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12978, 14} true;
  assume {:verifier.code 0} true;
  $p254 := $add.ref($p35, 2600);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12978, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p254, $i253);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12979, 3} true;
  assume {:verifier.code 0} true;
  goto $bb61;
$bb60:
  assume !(($i250 == 1));
  assume {:verifier.code 0} true;
  goto $bb61;
$bb61:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12982, 29} true;
  assume {:verifier.code 0} true;
  $p255 := $p26;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12982, 10} true;
  assume {:verifier.code 0} true;
  $p256 := $bitcast.ref.ref($p255);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12982, 3} true;
  assume {:verifier.code 0} true;
  call $p257 := strcpy($p256, .str.31);
  assume $isExternal($p257);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12983, 9} true;
  assume {:verifier.code 0} true;
  call $i258 := ldv_register_netdev_54($p26);
  // WARNING: %302 = call i32 @ldv_register_netdev_54(%struct.net_device* %35), !dbg !8659, !verifier.code !8329
  call {:cexpr "err"} boogie_si_record_i32($i258);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12984, 11} true;
  assume {:verifier.code 0} true;
  $i259 := $ne.i32($i258, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12984, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i259} true;
  goto $bb62, $bb63;
$bb62:
  assume ($i259 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12985, 5} true;
  assume {:verifier.code 0} true;
  goto $bb64;
$bb63:
  assume !(($i259 == 1));
  assume {:verifier.code 0} true;
  goto $bb65;
$bb64:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12995, 34} true;
  assume {:verifier.code 0} true;
  $p260 := $add.ref($p35, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12995, 34} true;
  assume {:verifier.code 0} true;
  $p261 := $load.ref($M.0, $p260);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12995, 9} true;
  assume {:verifier.code 0} true;
  $p262 := $bitcast.ref.ref($p261);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12995, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p262);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12996, 34} true;
  assume {:verifier.code 0} true;
  $p263 := $add.ref($p35, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12996, 34} true;
  assume {:verifier.code 0} true;
  $p264 := $load.ref($M.0, $p263);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12996, 9} true;
  assume {:verifier.code 0} true;
  $p265 := $bitcast.ref.ref($p264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12996, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p265);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12996, 3} true;
  assume {:verifier.code 0} true;
  $i121 := $i258;
  goto $bb39;
$bb65:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12989, 3} true;
  assume {:verifier.code 0} true;
  call netif_carrier_off($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12990, 3} true;
  assume {:verifier.code 0} true;
  call netif_stop_queue($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12991, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_print_device_info($p35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12992, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_initialize_last_counter_stats($p35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12993, 3} true;
  assume {:verifier.code 0} true;
  $i12 := 0;
  goto $bb3;
}
const igbvf_remove: ref;
axiom (igbvf_remove == $sub.ref(0, 286915));
procedure  igbvf_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i1;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13020, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := pci_get_drvdata($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13021, 12} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13022, 13} true;
  assume {:verifier.code 0} true;
  call $p3 := netdev_priv($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13023, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13024, 19} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p4, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13025, 55} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p4, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13025, 3} true;
  assume {:verifier.code 0} true;
  call set_bit(2, $p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13026, 36} true;
  assume {:verifier.code 0} true;
  $p7 := $p4;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13026, 3} true;
  assume {:verifier.code 0} true;
  call $i8 := ldv_del_timer_sync_56($p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13027, 31} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p4, 256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13027, 3} true;
  assume {:verifier.code 0} true;
  call $i10 := cancel_work_sync($p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13028, 31} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p4, 336);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13028, 3} true;
  assume {:verifier.code 0} true;
  call $i12 := cancel_work_sync($p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13029, 3} true;
  assume {:verifier.code 0} true;
  call ldv_unregister_netdev_57($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13030, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_reset_interrupt_capability($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13031, 30} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p4, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13031, 30} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13031, 40} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p14, 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13031, 3} true;
  assume {:verifier.code 0} true;
  call netif_napi_del($p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13032, 34} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p4, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13032, 34} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13032, 9} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13032, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13033, 34} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p4, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13033, 34} true;
  assume {:verifier.code 0} true;
  $p20 := $load.ref($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13033, 9} true;
  assume {:verifier.code 0} true;
  $p21 := $bitcast.ref.ref($p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13033, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p21);
  $p22 := $add.ref($add.ref($p4, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13034, 34} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.0, $p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13034, 3} true;
  assume {:verifier.code 0} true;
  call iounmap($p23);
  $p24 := $add.ref($add.ref($p4, 1448), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13035, 27} true;
  assume {:verifier.code 0} true;
  $p25 := $load.ref($M.0, $p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13035, 7} true;
  assume {:verifier.code 0} true;
  $i26 := $p2i.ref.i64($p25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13035, 41} true;
  assume {:verifier.code 0} true;
  $i27 := $ne.i64($i26, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13035, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i27 == 1);
  $p28 := $add.ref($add.ref($p4, 1448), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13036, 36} true;
  assume {:verifier.code 0} true;
  $p29 := $load.ref($M.0, $p28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13036, 5} true;
  assume {:verifier.code 0} true;
  call iounmap($p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13037, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i27 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13040, 3} true;
  assume {:verifier.code 0} true;
  call pci_release_regions($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13041, 3} true;
  assume {:verifier.code 0} true;
  call ldv_free_netdev_58($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13042, 3} true;
  assume {:verifier.code 0} true;
  call pci_disable_device($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13043, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_suspend: ref;
axiom (igbvf_suspend == $sub.ref(0, 287947));
procedure  igbvf_suspend($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $p3 := $p2;
  assume {:verifier.code 0} true;
  $M.15 := $store.i32($M.15, $p3, $i1);
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12571, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := pci_get_drvdata($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12572, 12} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12573, 13} true;
  assume {:verifier.code 0} true;
  call $p6 := netdev_priv($p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12574, 13} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p6);
  // WARNING: call void @llvm.dbg.value(metadata %struct.igbvf_adapter* %8, i64 0, metadata !12571, metadata !8330), !dbg !12572, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12576, 3} true;
  assume {:verifier.code 0} true;
  call netif_device_detach($p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12577, 13} true;
  assume {:verifier.code 0} true;
  call $i8 := netif_running($p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12577, 11} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i1.i8($i8);
  // WARNING: %10 = zext i1 %9 to i8, !dbg !8352, !verifier.code !8329
  call {:cexpr "tmp___3"} boogie_si_record_i8($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12578, 13} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.i8.i1($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12578, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12579, 83} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p7, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12579, 15} true;
  assume {:verifier.code 0} true;
  call $i12 := constant_test_bit(1, $p11);
  // WARNING: %14 = call i32 @constant_test_bit(i64 1, i64* %13), !dbg !8360, !verifier.code !8329
  call {:cexpr "tmp___1"} boogie_si_record_i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12580, 29} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i32($i12, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12580, 29} true;
  assume {:verifier.code 0} true;
  $i14 := $zext.i1.i32($i13);
  // WARNING: %16 = zext i1 %15 to i32, !dbg !8363, !verifier.code !8329
  call {:cexpr "__ret_warn_on"} boogie_si_record_i32($i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12581, 49} true;
  assume {:verifier.code 0} true;
  $i15 := $ne.i32($i14, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12581, 49} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i1.i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12581, 35} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.i32.i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12581, 15} true;
  assume {:verifier.code 0} true;
  call $i18 := ldv__builtin_expect($i17, 0);
  // WARNING: %20 = call i64 @ldv__builtin_expect(i64 %19, i64 0), !dbg !8368, !verifier.code !8329
  call {:cexpr "tmp___2"} boogie_si_record_i64($i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12582, 17} true;
  assume {:verifier.code 0} true;
  $i19 := $ne.i64($i18, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12582, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12583, 7} true;
  assume {:verifier.code 0} true;
  call warn_slowpath_null(.str.2, 2539);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12585, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12588, 39} true;
  assume {:verifier.code 0} true;
  $i20 := $ne.i32($i14, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12588, 39} true;
  assume {:verifier.code 0} true;
  $i21 := $zext.i1.i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12588, 25} true;
  assume {:verifier.code 0} true;
  $i22 := $sext.i32.i64($i21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12588, 5} true;
  assume {:verifier.code 0} true;
  call $i23 := ldv__builtin_expect($i22, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12589, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_down($p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12590, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_free_irq($p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12591, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12594, 12} true;
  assume {:verifier.code 0} true;
  call $i24 := pci_save_state($p0);
  // WARNING: %31 = call i32 @pci_save_state(%struct.pci_dev* %0), !dbg !8383, !verifier.code !8329
  call {:cexpr "retval"} boogie_si_record_i32($i24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12595, 14} true;
  assume {:verifier.code 0} true;
  $i25 := $ne.i32($i24, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12595, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i25 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12596, 5} true;
  assume {:verifier.code 0} true;
  $i26 := $i24;
  goto $bb9;
$bb8:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12603, 1} true;
  assume {:verifier.code 0} true;
  $r := $i26;
  $exn := false;
  return;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12600, 3} true;
  assume {:verifier.code 0} true;
  call pci_disable_device($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12601, 3} true;
  assume {:verifier.code 0} true;
  $i26 := 0;
  goto $bb9;
}
const igbvf_resume: ref;
axiom (igbvf_resume == $sub.ref(0, 288979));
procedure  igbvf_resume($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $i18: i32;
  var $i9: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12617, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := pci_get_drvdata($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12618, 12} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12619, 13} true;
  assume {:verifier.code 0} true;
  call $p3 := netdev_priv($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12620, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12621, 3} true;
  assume {:verifier.code 0} true;
  call pci_restore_state($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12622, 13} true;
  assume {:verifier.code 0} true;
  call $i5 := pci_enable_device_mem($p0);
  // WARNING: %6 = call i32 @pci_enable_device_mem(%struct.pci_dev* %0), !dbg !8347, !verifier.code !8332
  call {:cexpr "tmp___1"} boogie_si_record_i32($i5);
  // WARNING: call void @llvm.dbg.value(metadata i32 %6, i64 0, metadata !12635, metadata !8330), !dbg !12636, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12624, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12624, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12625, 47} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12625, 5} true;
  assume {:verifier.code 0} true;
  call $i8 := dev_err.ref.ref($p7, .str.44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12626, 5} true;
  assume {:verifier.code 0} true;
  $i9 := $i5;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12653, 1} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12630, 3} true;
  assume {:verifier.code 0} true;
  call pci_set_master($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12631, 13} true;
  assume {:verifier.code 0} true;
  call $i10 := netif_running($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12631, 11} true;
  assume {:verifier.code 0} true;
  $i11 := $zext.i1.i8($i10);
  // WARNING: %14 = zext i1 %13 to i8, !dbg !8361, !verifier.code !8332
  call {:cexpr "tmp___3"} boogie_si_record_i8($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12632, 13} true;
  assume {:verifier.code 0} true;
  $i12 := $trunc.i8.i1($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12632, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12633, 15} true;
  assume {:verifier.code 0} true;
  call $i13 := igbvf_request_irq($p4);
  // WARNING: %17 = call i32 @igbvf_request_irq(%struct.igbvf_adapter* %5), !dbg !8367, !verifier.code !8332
  call {:cexpr "tmp___2"} boogie_si_record_i32($i13);
  // WARNING: call void @llvm.dbg.value(metadata i32 %17, i64 0, metadata !12656, metadata !8330), !dbg !12657, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12635, 13} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i32($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12635, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb7, $bb8;
$bb6:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb7:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12636, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $i13;
  goto $bb3;
$bb8:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12640, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12643, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_reset($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12644, 13} true;
  assume {:verifier.code 0} true;
  call $i15 := netif_running($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12644, 11} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i1.i8($i15);
  // WARNING: %25 = zext i1 %24 to i8, !dbg !8379, !verifier.code !8332
  call {:cexpr "tmp___4"} boogie_si_record_i8($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12645, 13} true;
  assume {:verifier.code 0} true;
  $i17 := $trunc.i8.i1($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12645, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i17 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12646, 5} true;
  assume {:verifier.code 0} true;
  call $i18 := igbvf_up($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12647, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12650, 3} true;
  assume {:verifier.code 0} true;
  call netif_device_attach($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12651, 3} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  goto $bb3;
}
const igbvf_shutdown: ref;
axiom (igbvf_shutdown == $sub.ref(0, 290011));
procedure  igbvf_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12659, 19} true;
  assume {:verifier.code 0} true;
  $p2 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12659, 25} true;
  assume {:verifier.code 0} true;
  $M.16 := $store.i32($M.16, $p2, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12660, 3} true;
  assume {:verifier.code 0} true;
  $p3 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12660, 3} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.16, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12660, 3} true;
  assume {:verifier.code 0} true;
  call $i5 := igbvf_suspend($p0, $i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12661, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const pci_get_drvdata: ref;
axiom (pci_get_drvdata == $sub.ref(0, 291043));
procedure  pci_get_drvdata($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9317, 59} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9317, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := dev_get_drvdata($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9318, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const pci_restore_state: ref;
axiom (pci_restore_state == $sub.ref(0, 292075));
procedure  pci_restore_state($p0: ref);
const pci_enable_device_mem: ref;
axiom (pci_enable_device_mem == $sub.ref(0, 293107));
procedure  pci_enable_device_mem($p0: ref)
  returns ($r: i32);
const pci_set_master: ref;
axiom (pci_set_master == $sub.ref(0, 294139));
procedure  pci_set_master($p0: ref);
const igbvf_request_irq: ref;
axiom (igbvf_request_irq == $sub.ref(0, 295171));
procedure  igbvf_request_irq($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.igbvf_adapter* %0, i64 0, metadata !12700, metadata !8330), !dbg !12701, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10959, 32} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10959, 32} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10959, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10959, 45} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i64($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10959, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10960, 11} true;
  assume {:verifier.code 0} true;
  call $i5 := igbvf_request_msix($p0);
  // WARNING: %7 = call i32 @igbvf_request_msix(%struct.igbvf_adapter* %0), !dbg !8343, !verifier.code !8334
  call {:cexpr "err"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10961, 3} true;
  assume {:verifier.code 0} true;
  $i6 := $i5;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  $i6 := $sub.i32(0, 1);
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10964, 11} true;
  assume {:verifier.code 0} true;
  $i7 := $eq.i32($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10964, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10965, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10973, 1} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10969, 49} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10969, 49} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10969, 56} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p9, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10969, 3} true;
  assume {:verifier.code 0} true;
  call $i11 := dev_err.ref.ref.i32($p10, .str.14, $i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10971, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
}
const netif_device_attach: ref;
axiom (netif_device_attach == $sub.ref(0, 296203));
procedure  netif_device_attach($p0: ref);
const igbvf_request_msix: ref;
axiom (igbvf_request_msix == $sub.ref(0, 297235));
procedure  igbvf_request_msix($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i16;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i16;
  var $i94: i32;
  var $i95: i32;
  var $i96: i16;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $i64: i32;
  var $i117: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10865, 21} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10865, 21} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %3, i64 0, metadata !12728, metadata !8330), !dbg !12729, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !12730, metadata !8330), !dbg !12731, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10868, 43} true;
  assume {:verifier.code 0} true;
  $p3 := $p2;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10868, 16} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10868, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := strlen($p4);
  // WARNING: %6 = call i64 @strlen(i8* %5), !dbg !8345, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10869, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $ule.i64($i5, 10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10869, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10870, 34} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10870, 34} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10870, 44} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p8, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10870, 13} true;
  assume {:verifier.code 0} true;
  $p10 := $bitcast.ref.ref($p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10870, 81} true;
  assume {:verifier.code 0} true;
  $p11 := $p2;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10870, 62} true;
  assume {:verifier.code 0} true;
  $p12 := $bitcast.ref.ref($p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10870, 5} true;
  assume {:verifier.code 0} true;
  call $i13 := sprintf.ref.ref.ref($p10, .str.15, $p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10871, 34} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10871, 34} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10871, 44} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p15, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10871, 13} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10871, 81} true;
  assume {:verifier.code 0} true;
  $p18 := $p2;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10871, 62} true;
  assume {:verifier.code 0} true;
  $p19 := $bitcast.ref.ref($p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10871, 5} true;
  assume {:verifier.code 0} true;
  call $i20 := sprintf.ref.ref.ref($p17, .str.16, $p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10872, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10874, 15} true;
  assume {:verifier.code 0} true;
  $i21 := $ugt.i64(16, 63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10874, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb4, $bb5;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10890, 38} true;
  assume {:verifier.code 0} true;
  $p51 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10890, 38} true;
  assume {:verifier.code 0} true;
  $p52 := $load.ref($M.0, $p51);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10890, 53} true;
  assume {:verifier.code 0} true;
  $i53 := $sext.i32.i64(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10890, 51} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($p52, $mul.ref($i53, 8));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10890, 78} true;
  assume {:verifier.code 0} true;
  $p55 := $add.ref($p52, $mul.ref($i53, 8));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10890, 78} true;
  assume {:verifier.code 0} true;
  $i56 := $load.i32($M.0, $p55);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10891, 84} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10891, 84} true;
  assume {:verifier.code 0} true;
  $p58 := $load.ref($M.0, $p57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10891, 94} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($p58, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10891, 55} true;
  assume {:verifier.code 0} true;
  $p60 := $bitcast.ref.ref($p59);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10892, 28} true;
  assume {:verifier.code 0} true;
  $p61 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10890, 9} true;
  assume {:verifier.code 0} true;
  call $i62 := ldv_request_irq_46($i56, igbvf_intr_msix_tx, 0, $p60, $p61);
  // WARNING: %72 = call i32 @ldv_request_irq_46(i32 %66, i32 (i32, i8*)* @igbvf_intr_msix_tx, i64 0, i8* %70, i8* %71), !dbg !8418, !verifier.code !8334
  call {:cexpr "err"} boogie_si_record_i32($i62);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10893, 11} true;
  assume {:verifier.code 0} true;
  $i63 := $ne.i32($i62, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10893, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i63} true;
  goto $bb10, $bb11;
$bb4:
  assume ($i21 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10875, 45} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10875, 45} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.0, $p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10875, 55} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p23, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10875, 24} true;
  assume {:verifier.code 0} true;
  $p25 := $bitcast.ref.ref($p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10875, 89} true;
  assume {:verifier.code 0} true;
  $p26 := $p2;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10875, 62} true;
  assume {:verifier.code 0} true;
  $p27 := $bitcast.ref.ref($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10875, 15} true;
  assume {:verifier.code 0} true;
  call $p28 := __memcpy($p25, $p27, 16);
  assume $isExternal($p28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10877, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i21 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10878, 53} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10878, 53} true;
  assume {:verifier.code 0} true;
  $p30 := $load.ref($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10878, 63} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p30, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10878, 32} true;
  assume {:verifier.code 0} true;
  $p32 := $bitcast.ref.ref($p31);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10878, 97} true;
  assume {:verifier.code 0} true;
  $p33 := $p2;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10878, 70} true;
  assume {:verifier.code 0} true;
  $p34 := $bitcast.ref.ref($p33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10878, 15} true;
  assume {:verifier.code 0} true;
  call $i35 := __builtinx_memcpy.ref.ref.i64($p32, $p34, 16);
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10882, 19} true;
  assume {:verifier.code 0} true;
  $i36 := $ugt.i64(16, 63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10882, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i36 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10883, 49} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10883, 49} true;
  assume {:verifier.code 0} true;
  $p38 := $load.ref($M.0, $p37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10883, 59} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p38, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10883, 28} true;
  assume {:verifier.code 0} true;
  $p40 := $bitcast.ref.ref($p39);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10883, 93} true;
  assume {:verifier.code 0} true;
  $p41 := $p2;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10883, 66} true;
  assume {:verifier.code 0} true;
  $p42 := $bitcast.ref.ref($p41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10883, 19} true;
  assume {:verifier.code 0} true;
  call $p43 := __memcpy($p40, $p42, 16);
  assume $isExternal($p43);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10885, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i36 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10886, 57} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10886, 57} true;
  assume {:verifier.code 0} true;
  $p45 := $load.ref($M.0, $p44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10886, 67} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p45, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10886, 36} true;
  assume {:verifier.code 0} true;
  $p47 := $bitcast.ref.ref($p46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10886, 101} true;
  assume {:verifier.code 0} true;
  $p48 := $p2;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10886, 74} true;
  assume {:verifier.code 0} true;
  $p49 := $bitcast.ref.ref($p48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10886, 19} true;
  assume {:verifier.code 0} true;
  call $i50 := __builtinx_memcpy.ref.ref.i64($p47, $p49, 16);
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:verifier.code 0} true;
  goto $bb3;
$bb10:
  assume ($i63 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10894, 5} true;
  assume {:verifier.code 0} true;
  $i64 := $i62;
  goto $bb12;
$bb11:
  assume !(($i63 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10923, 3} true;
  assume {:verifier.code 0} true;
  $i117 := $i64;
  goto $bb20;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10898, 68} true;
  assume {:verifier.code 0} true;
  $i65 := $add.i32(0, 1440);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10898, 54} true;
  assume {:verifier.code 0} true;
  $i66 := $trunc.i32.i16($i65);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10898, 38} true;
  assume {:verifier.code 0} true;
  $i67 := $zext.i16.i32($i66);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10898, 77} true;
  assume {:verifier.code 0} true;
  $i68 := $mul.i32($i67, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10898, 38} true;
  assume {:verifier.code 0} true;
  $i69 := $trunc.i32.i16($i68);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10898, 13} true;
  assume {:verifier.code 0} true;
  $p70 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10898, 13} true;
  assume {:verifier.code 0} true;
  $p71 := $load.ref($M.0, $p70);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10898, 23} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($p71, 268);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10898, 36} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p72, $i69);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10899, 42} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($p0, 1044);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10899, 42} true;
  assume {:verifier.code 0} true;
  $i74 := $load.i32($M.0, $p73);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10899, 13} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10899, 13} true;
  assume {:verifier.code 0} true;
  $p76 := $load.ref($M.0, $p75);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10899, 23} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($p76, 260);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10899, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p77, $i74);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10900, 19} true;
  assume {:verifier.code 0} true;
  $i78 := $add.i32(0, 1);
  // WARNING: %90 = add nsw i32 0, 1, !dbg !8435, !verifier.code !8334
  call {:cexpr "vector"} boogie_si_record_i32($i78);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10901, 38} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10901, 38} true;
  assume {:verifier.code 0} true;
  $p80 := $load.ref($M.0, $p79);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10901, 53} true;
  assume {:verifier.code 0} true;
  $i81 := $sext.i32.i64($i78);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10901, 51} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($p80, $mul.ref($i81, 8));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10901, 78} true;
  assume {:verifier.code 0} true;
  $p83 := $add.ref($p80, $mul.ref($i81, 8));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10901, 78} true;
  assume {:verifier.code 0} true;
  $i84 := $load.i32($M.0, $p83);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10902, 84} true;
  assume {:verifier.code 0} true;
  $p85 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10902, 84} true;
  assume {:verifier.code 0} true;
  $p86 := $load.ref($M.0, $p85);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10902, 94} true;
  assume {:verifier.code 0} true;
  $p87 := $add.ref($p86, 232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10902, 55} true;
  assume {:verifier.code 0} true;
  $p88 := $bitcast.ref.ref($p87);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10903, 28} true;
  assume {:verifier.code 0} true;
  $p89 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10901, 9} true;
  assume {:verifier.code 0} true;
  call $i90 := ldv_request_irq_47($i84, igbvf_intr_msix_rx, 0, $p88, $p89);
  // WARNING: %102 = call i32 @ldv_request_irq_47(i32 %96, i32 (i32, i8*)* @igbvf_intr_msix_rx, i64 0, i8* %100, i8* %101), !dbg !8444, !verifier.code !8334
  call {:cexpr "err"} boogie_si_record_i32($i90);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10904, 11} true;
  assume {:verifier.code 0} true;
  $i91 := $ne.i32($i90, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10904, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i91} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i91 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10905, 5} true;
  assume {:verifier.code 0} true;
  $i64 := $i90;
  goto $bb12;
$bb15:
  assume !(($i91 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10909, 68} true;
  assume {:verifier.code 0} true;
  $i92 := $add.i32($i78, 1440);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10909, 54} true;
  assume {:verifier.code 0} true;
  $i93 := $trunc.i32.i16($i92);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10909, 38} true;
  assume {:verifier.code 0} true;
  $i94 := $zext.i16.i32($i93);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10909, 77} true;
  assume {:verifier.code 0} true;
  $i95 := $mul.i32($i94, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10909, 38} true;
  assume {:verifier.code 0} true;
  $i96 := $trunc.i32.i16($i95);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10909, 13} true;
  assume {:verifier.code 0} true;
  $p97 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10909, 13} true;
  assume {:verifier.code 0} true;
  $p98 := $load.ref($M.0, $p97);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10909, 23} true;
  assume {:verifier.code 0} true;
  $p99 := $add.ref($p98, 268);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10909, 36} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p99, $i96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10910, 42} true;
  assume {:verifier.code 0} true;
  $p100 := $add.ref($p0, 1044);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10910, 42} true;
  assume {:verifier.code 0} true;
  $i101 := $load.i32($M.0, $p100);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10910, 13} true;
  assume {:verifier.code 0} true;
  $p102 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10910, 13} true;
  assume {:verifier.code 0} true;
  $p103 := $load.ref($M.0, $p102);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10910, 23} true;
  assume {:verifier.code 0} true;
  $p104 := $add.ref($p103, 260);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10910, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p104, $i101);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10911, 19} true;
  assume {:verifier.code 0} true;
  $i105 := $add.i32($i78, 1);
  // WARNING: %120 = add nsw i32 %90, 1, !dbg !8461, !verifier.code !8334
  call {:cexpr "vector"} boogie_si_record_i32($i105);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10912, 38} true;
  assume {:verifier.code 0} true;
  $p106 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10912, 38} true;
  assume {:verifier.code 0} true;
  $p107 := $load.ref($M.0, $p106);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10912, 53} true;
  assume {:verifier.code 0} true;
  $i108 := $sext.i32.i64($i105);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10912, 51} true;
  assume {:verifier.code 0} true;
  $p109 := $add.ref($p107, $mul.ref($i108, 8));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10912, 78} true;
  assume {:verifier.code 0} true;
  $p110 := $add.ref($p107, $mul.ref($i108, 8));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10912, 78} true;
  assume {:verifier.code 0} true;
  $i111 := $load.i32($M.0, $p110);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10913, 80} true;
  assume {:verifier.code 0} true;
  $p112 := $p2;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10913, 53} true;
  assume {:verifier.code 0} true;
  $p113 := $bitcast.ref.ref($p112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10914, 28} true;
  assume {:verifier.code 0} true;
  $p114 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10912, 9} true;
  assume {:verifier.code 0} true;
  call $i115 := ldv_request_irq_48($i111, igbvf_msix_other, 0, $p113, $p114);
  // WARNING: %130 = call i32 @ldv_request_irq_48(i32 %126, i32 (i32, i8*)* @igbvf_msix_other, i64 0, i8* %128, i8* %129), !dbg !8469, !verifier.code !8334
  call {:cexpr "err"} boogie_si_record_i32($i115);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10915, 11} true;
  assume {:verifier.code 0} true;
  $i116 := $ne.i32($i115, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10915, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i116} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i116 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10916, 5} true;
  assume {:verifier.code 0} true;
  $i64 := $i115;
  goto $bb12;
$bb18:
  assume !(($i116 == 1));
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10920, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_configure_msix($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10921, 3} true;
  assume {:verifier.code 0} true;
  $i117 := 0;
  goto $bb20;
$bb20:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10925, 1} true;
  assume {:verifier.code 0} true;
  $r := $i117;
  $exn := false;
  return;
}
const strlen: ref;
axiom (strlen == $sub.ref(0, 298267));
procedure  strlen($p0: ref)
  returns ($r: i64);
const sprintf: ref;
axiom (sprintf == $sub.ref(0, 299299));
procedure  sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
  returns ($r: i32);
const igbvf_intr_msix_tx: ref;
axiom (igbvf_intr_msix_tx == $sub.ref(0, 300331));
procedure  igbvf_intr_msix_tx($i0: i32, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $i26: i8;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10668, 12} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10669, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := netdev_priv($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10670, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10671, 19} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p4, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10672, 22} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p4, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10672, 22} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10673, 16} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p7, 272);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10673, 16} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i32($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10673, 24} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10673, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10674, 21} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p7, 260);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10674, 21} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i32($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10674, 58} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p4, 1448);
  $p14 := $add.ref($add.ref($p4, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10674, 61} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10674, 96} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p7, 268);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10674, 96} true;
  assume {:verifier.code 0} true;
  $i17 := $load.i16($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10674, 71} true;
  assume {:verifier.code 0} true;
  $i18 := $zext.i16.i64($i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10674, 69} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p15, $mul.ref($i18, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10674, 5} true;
  assume {:verifier.code 0} true;
  call writel($i12, $p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10675, 15} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p4, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10675, 15} true;
  assume {:verifier.code 0} true;
  $p21 := $load.ref($M.0, $p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10675, 25} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p21, 272);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10675, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p22, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10676, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10679, 12} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p4, 1072);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10679, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p23, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10680, 12} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p4, 1076);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10680, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p24, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10681, 13} true;
  assume {:verifier.code 0} true;
  call $i25 := igbvf_clean_tx_irq($p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10681, 11} true;
  assume {:verifier.code 0} true;
  $i26 := $zext.i1.i8($i25);
  // WARNING: %30 = zext i1 %29 to i8, !dbg !8372, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i8($i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10682, 7} true;
  assume {:verifier.code 0} true;
  $i27 := $trunc.i8.i1($i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10682, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i27 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10684, 3} true;
  assume {:verifier.code 0} true;
  $i28 := 0;
  goto $bb6;
$bb5:
  assume !(($i27 == 1));
  assume {:verifier.code 0} true;
  $i28 := 1;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10687, 7} true;
  assume {:verifier.code 0} true;
  $i29 := $ne.i32($i28, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10687, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i29 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10688, 21} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p7, 256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10688, 21} true;
  assume {:verifier.code 0} true;
  $i31 := $load.i32($M.0, $p30);
  $p32 := $add.ref($add.ref($p4, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10688, 56} true;
  assume {:verifier.code 0} true;
  $p33 := $load.ref($M.0, $p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10688, 64} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p33, 5408);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10688, 5} true;
  assume {:verifier.code 0} true;
  call writel($i31, $p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10689, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i29 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10690, 21} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($p7, 256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10690, 21} true;
  assume {:verifier.code 0} true;
  $i36 := $load.i32($M.0, $p35);
  $p37 := $add.ref($add.ref($p4, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10690, 56} true;
  assume {:verifier.code 0} true;
  $p38 := $load.ref($M.0, $p37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10690, 64} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p38, 5412);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10690, 5} true;
  assume {:verifier.code 0} true;
  call writel($i36, $p39);
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10692, 3} true;
  assume {:verifier.code 0} true;
  $r := 1;
  $exn := false;
  return;
}
const ldv_request_irq_46: ref;
axiom (ldv_request_irq_46 == $sub.ref(0, 301363));
procedure  ldv_request_irq_46($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref)
  returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 (i32, i8*)* %1, i64 0, metadata !12942, metadata !8330), !dbg !12943, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14472, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
  // WARNING: %6 = call i32 @request_irq(i32 %0, i32 (i32, i8*)* %1, i64 %2, i8* %3, i8* %4), !dbg !8343, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i5);
  // WARNING: call void @llvm.dbg.value(metadata i32 %6, i64 0, metadata !12952, metadata !8330), !dbg !12953, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14474, 13} true;
  assume {:verifier.code 0} true;
  call $i6 := reg_check_3($p1);
  // WARNING: %7 = call i32 @reg_check_3(i32 (i32, i8*)* %1), !dbg !8350, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14475, 15} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i32($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14475, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14475, 36} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14475, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14475, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i7 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb6;
$bb4:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14476, 5} true;
  assume {:verifier.code 0} true;
  call activate_suitable_irq_3($i0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14477, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14475, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb3;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14480, 3} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const igbvf_intr_msix_rx: ref;
axiom (igbvf_intr_msix_rx == $sub.ref(0, 302395));
procedure  igbvf_intr_msix_rx($i0: i32, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10703, 12} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10704, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := netdev_priv($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10705, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10706, 36} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p4, 2564);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10706, 36} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10706, 49} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i32($i6, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10706, 12} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p4, 2564);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10706, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p8, $i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10707, 17} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p4, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10707, 17} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10707, 27} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p10, 272);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10707, 27} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i32($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10707, 35} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i32($i12, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10707, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10708, 22} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p4, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10708, 22} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10708, 32} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p15, 260);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10708, 32} true;
  assume {:verifier.code 0} true;
  $i17 := $load.i32($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10708, 69} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p4, 1448);
  $p19 := $add.ref($add.ref($p4, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10708, 72} true;
  assume {:verifier.code 0} true;
  $p20 := $load.ref($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10708, 108} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p4, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10708, 108} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10708, 118} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p22, 268);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10708, 118} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i16($M.0, $p23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10708, 82} true;
  assume {:verifier.code 0} true;
  $i25 := $zext.i16.i64($i24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10708, 80} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p20, $mul.ref($i25, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10708, 5} true;
  assume {:verifier.code 0} true;
  call writel($i17, $p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10709, 15} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p4, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10709, 15} true;
  assume {:verifier.code 0} true;
  $p28 := $load.ref($M.0, $p27);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10709, 25} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p28, 272);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10709, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p29, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10710, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10713, 44} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p4, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10713, 44} true;
  assume {:verifier.code 0} true;
  $p31 := $load.ref($M.0, $p30);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10713, 54} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p31, 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10713, 13} true;
  assume {:verifier.code 0} true;
  call $i33 := napi_schedule_prep($p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10713, 11} true;
  assume {:verifier.code 0} true;
  $i34 := $zext.i1.i8($i33);
  // WARNING: %38 = zext i1 %37 to i8, !dbg !8371, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i8($i34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10714, 13} true;
  assume {:verifier.code 0} true;
  $i35 := $trunc.i8.i1($i34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10714, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i35 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10715, 14} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p4, 1080);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10715, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p36, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10716, 14} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p4, 1084);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10716, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p37, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10717, 33} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p4, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10717, 33} true;
  assume {:verifier.code 0} true;
  $p39 := $load.ref($M.0, $p38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10717, 43} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p39, 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10717, 5} true;
  assume {:verifier.code 0} true;
  call __napi_schedule($p40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10718, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10721, 3} true;
  assume {:verifier.code 0} true;
  $r := 1;
  $exn := false;
  return;
}
const ldv_request_irq_47: ref;
axiom (ldv_request_irq_47 == $sub.ref(0, 303427));
procedure  ldv_request_irq_47($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref)
  returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 (i32, i8*)* %1, i64 0, metadata !13030, metadata !8330), !dbg !13031, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14493, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
  // WARNING: %6 = call i32 @request_irq(i32 %0, i32 (i32, i8*)* %1, i64 %2, i8* %3, i8* %4), !dbg !8343, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i5);
  // WARNING: call void @llvm.dbg.value(metadata i32 %6, i64 0, metadata !13040, metadata !8330), !dbg !13041, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14495, 13} true;
  assume {:verifier.code 0} true;
  call $i6 := reg_check_3($p1);
  // WARNING: %7 = call i32 @reg_check_3(i32 (i32, i8*)* %1), !dbg !8350, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14496, 15} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i32($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14496, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14496, 36} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14496, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14496, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i7 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb6;
$bb4:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14497, 5} true;
  assume {:verifier.code 0} true;
  call activate_suitable_irq_3($i0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14498, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14496, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb3;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14501, 3} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const igbvf_msix_other: ref;
axiom (igbvf_msix_other == $sub.ref(0, 304459));
procedure  igbvf_msix_other($i0: i32, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10640, 12} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10641, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := netdev_priv($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10642, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10643, 19} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p4, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10644, 36} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p4, 2568);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10644, 36} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i32($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10644, 49} true;
  assume {:verifier.code 0} true;
  $i8 := $add.i32($i7, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10644, 12} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p4, 2568);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10644, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p9, $i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10645, 3} true;
  assume {:verifier.code 0} true;
  call netif_carrier_off($p2);
  $p10 := $add.ref($add.ref($p4, 1448), 32);
  $p11 := $add.ref($add.ref($add.ref($p4, 1448), 32), 132);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10646, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p11, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10647, 81} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p4, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10647, 13} true;
  assume {:verifier.code 0} true;
  call $i13 := constant_test_bit(2, $p12);
  // WARNING: %14 = call i32 @constant_test_bit(i64 2, i64* %13), !dbg !8355, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10648, 15} true;
  assume {:verifier.code 0} true;
  $i14 := $eq.i32($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10648, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10649, 33} true;
  assume {:verifier.code 0} true;
  $p15 := $p4;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10649, 65} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i64($M.0, jiffies);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10649, 73} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i64($i16, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10649, 5} true;
  assume {:verifier.code 0} true;
  call $i18 := ldv_mod_timer_45($p15, $i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10650, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10653, 19} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p4, 2560);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10653, 19} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i32($M.0, $p19);
  $p21 := $add.ref($add.ref($p4, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10653, 54} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10653, 62} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p22, 5412);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10653, 3} true;
  assume {:verifier.code 0} true;
  call writel($i20, $p23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10654, 3} true;
  assume {:verifier.code 0} true;
  $r := 1;
  $exn := false;
  return;
}
const ldv_request_irq_48: ref;
axiom (ldv_request_irq_48 == $sub.ref(0, 305491));
procedure  ldv_request_irq_48($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref)
  returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 (i32, i8*)* %1, i64 0, metadata !13103, metadata !8330), !dbg !13104, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14514, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
  // WARNING: %6 = call i32 @request_irq(i32 %0, i32 (i32, i8*)* %1, i64 %2, i8* %3, i8* %4), !dbg !8343, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i5);
  // WARNING: call void @llvm.dbg.value(metadata i32 %6, i64 0, metadata !13113, metadata !8330), !dbg !13114, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14516, 13} true;
  assume {:verifier.code 0} true;
  call $i6 := reg_check_3($p1);
  // WARNING: %7 = call i32 @reg_check_3(i32 (i32, i8*)* %1), !dbg !8350, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14517, 15} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i32($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14517, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14517, 36} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14517, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14517, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i7 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb6;
$bb4:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14518, 5} true;
  assume {:verifier.code 0} true;
  call activate_suitable_irq_3($i0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14519, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14517, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb3;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14522, 3} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const request_irq: ref;
axiom (request_irq == $sub.ref(0, 306523));
procedure  request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref)
  returns ($r: i32)
{
  var $i5: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 (i32, i8*)* %1, i64 0, metadata !13134, metadata !8330), !dbg !13135, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9339, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
  // WARNING: %6 = call i32 @request_threaded_irq(i32 %0, i32 (i32, i8*)* %1, i32 (i32, i8*)* null, i64 %2, i8* %3, i8* %4), !dbg !8343, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9341, 3} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const reg_check_3: ref;
axiom (reg_check_3 == $sub.ref(0, 307555));
procedure  reg_check_3($p0: ref)
  returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13513, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13513, 31} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i64($i1, $p2i.ref.i64(igbvf_msix_other));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13513, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13514, 5} true;
  assume {:verifier.code 0} true;
  $i3 := 1;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13520, 1} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13518, 3} true;
  assume {:verifier.code 0} true;
  $i3 := 0;
  goto $bb3;
}
const activate_suitable_irq_3: ref;
axiom (activate_suitable_irq_3 == $sub.ref(0, 308587));
procedure  activate_suitable_irq_3($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13202, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $M.17;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13202, 19} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13202, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13203, 22} true;
  assume {:verifier.code 0} true;
  $M.18 := $i0;
  call {:cexpr "ldv_irq_line_3_0"} boogie_si_record_i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13204, 22} true;
  assume {:verifier.code 0} true;
  $M.19 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13205, 17} true;
  assume {:verifier.code 0} true;
  $M.17 := 1;
  call {:cexpr "ldv_irq_3_0"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13206, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13236, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13210, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $M.20;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13210, 19} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13210, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13211, 22} true;
  assume {:verifier.code 0} true;
  $M.21 := $i0;
  call {:cexpr "ldv_irq_line_3_1"} boogie_si_record_i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13212, 22} true;
  assume {:verifier.code 0} true;
  $M.22 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13213, 17} true;
  assume {:verifier.code 0} true;
  $M.20 := 1;
  call {:cexpr "ldv_irq_3_1"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13214, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb6:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13218, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $M.23;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13218, 19} true;
  assume {:verifier.code 0} true;
  $i7 := $eq.i32($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13218, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13219, 22} true;
  assume {:verifier.code 0} true;
  $M.24 := $i0;
  call {:cexpr "ldv_irq_line_3_2"} boogie_si_record_i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13220, 22} true;
  assume {:verifier.code 0} true;
  $M.25 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13221, 17} true;
  assume {:verifier.code 0} true;
  $M.23 := 1;
  call {:cexpr "ldv_irq_3_2"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13222, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb9:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13226, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $M.26;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13226, 19} true;
  assume {:verifier.code 0} true;
  $i9 := $eq.i32($i8, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13226, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13227, 22} true;
  assume {:verifier.code 0} true;
  $M.27 := $i0;
  call {:cexpr "ldv_irq_line_3_3"} boogie_si_record_i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13228, 22} true;
  assume {:verifier.code 0} true;
  $M.28 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13229, 17} true;
  assume {:verifier.code 0} true;
  $M.26 := 1;
  call {:cexpr "ldv_irq_3_3"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13230, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb12:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13234, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const request_threaded_irq: ref;
axiom (request_threaded_irq == $sub.ref(0, 309619));
procedure  request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref)
  returns ($r: i32);
const ldv_mod_timer_45: ref;
axiom (ldv_mod_timer_45 == $sub.ref(0, 310651));
procedure  ldv_mod_timer_45($p0: ref, $i1: i64)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.timer_list* %0, i64 0, metadata !13208, metadata !8330), !dbg !13209, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14456, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := mod_timer($p0, $i1);
  // WARNING: %3 = call i32 @mod_timer(%struct.timer_list* %0, i64 %1), !dbg !8337, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !13214, metadata !8330), !dbg !13215, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14458, 3} true;
  assume {:verifier.code 0} true;
  call activate_pending_timer_4($p0, $i1, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14459, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const napi_schedule_prep: ref;
axiom (napi_schedule_prep == $sub.ref(0, 311683));
procedure  napi_schedule_prep($p0: ref)
  returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9378, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := napi_disable_pending($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9378, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i8($i1);
  // WARNING: %3 = zext i1 %2 to i8, !dbg !8337, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i8($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9379, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i8.i1($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9379, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9381, 3} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  $i4 := 1;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9384, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9384, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9385, 70} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9385, 15} true;
  assume {:verifier.code 0} true;
  call $i7 := test_and_set_bit(0, $p6);
  // WARNING: %11 = call i32 @test_and_set_bit(i64 0, i64* %10), !dbg !8352, !verifier.code !8334
  call {:cexpr "tmp___1"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9386, 17} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9386, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb5:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  $i10 := 0;
  goto $bb9;
$bb6:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9388, 5} true;
  assume {:verifier.code 0} true;
  $i9 := 1;
  goto $bb8;
$bb7:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  $i9 := 0;
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9391, 3} true;
  assume {:verifier.code 0} true;
  $i10 := $i9;
  goto $bb9;
$bb9:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9394, 11} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.i32($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9394, 3} true;
  assume {:verifier.code 0} true;
  $r := $i11;
  $exn := false;
  return;
}
const __napi_schedule: ref;
axiom (__napi_schedule == $sub.ref(0, 312715));
procedure  __napi_schedule($p0: ref);
const napi_disable_pending: ref;
axiom (napi_disable_pending == $sub.ref(0, 313747));
procedure  napi_disable_pending($p0: ref)
  returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9366, 71} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9366, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := constant_test_bit(1, $p1);
  // WARNING: %3 = call i32 @constant_test_bit(i64 1, i64* %2), !dbg !8337, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9367, 15} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9367, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const igbvf_clean_tx_irq: ref;
axiom (igbvf_clean_tx_irq == $sub.ref(0, 314779));
procedure  igbvf_clean_tx_irq($p0: ref)
  returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $i69: i8;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i16;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i124: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i125: i16;
  var $p126: ref;
  var $i127: i1;
  var $i128: i32;
  var $i129: i64;
  var $i130: i64;
  var $i131: i1;
  var $i132: i1;
  var $i133: i8;
  var $i134: i1;
  var $i135: i64;
  var $i136: i64;
  var $i137: i1;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i64;
  var $i145: i64;
  var $i146: i1;
  var $i147: i1;
  var $i148: i8;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $i154: i32;
  var $i155: i32;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i64;
  var $i160: i64;
  var $i161: i64;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i64;
  var $i167: i64;
  var $i168: i64;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $i173: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10525, 22} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10525, 22} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10526, 21} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 1176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10526, 21} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %5, i64 0, metadata !13276, metadata !8330), !dbg !13277, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !13278, metadata !8330), !dbg !13279, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !13280, metadata !8330), !dbg !13281, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !13282, metadata !8330), !dbg !13283, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10531, 31} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10531, 31} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i16($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10531, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i16.i32($i6);
  // WARNING: %8 = zext i16 %7 to i32, !dbg !8351, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10532, 26} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10532, 26} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10532, 40} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i32.i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10532, 38} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p9, $mul.ref($i10, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10533, 27} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p9, $mul.ref($i10, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10533, 37} true;
  assume {:verifier.code 0} true;
  $p13 := $bitcast.ref.ref($p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10533, 47} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p13, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10533, 47} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10535, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $p2i.ref.i64($p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10535, 32} true;
  assume {:verifier.code 0} true;
  $i17 := $eq.i64($i16, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10535, 7} true;
  assume {:verifier.code 0} true;
  $i18, $i19, $i20, $i21 := 0, 0, $i7, 0;
  assume {:branchcond $i17} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10535, 7} true;
  assume {:verifier.code 0} true;
  assume ($i17 == 1);
  goto $bb2;
$bb2:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10536, 5} true;
  assume {:verifier.code 0} true;
  $i40, $i41, $i42, $i43 := $i18, $i19, $i20, $i21;
  goto $bb8;
$bb3:
  assume !(($i17 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10535, 7} true;
  assume {:verifier.code 0} true;
  $p22, $i23, $i24, $p25, $i26, $i27 := $p11, 0, $i7, $p15, 0, 0;
  goto $bb4;
$bb4:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb5:
  assume ($i120 == 1);
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10535, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $p2i.ref.i64($p30);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10535, 32} true;
  assume {:verifier.code 0} true;
  $i35 := $eq.i64($i34, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10535, 7} true;
  assume {:verifier.code 0} true;
  $i36, $i37, $i38, $i39, $p22, $i23, $i24, $p25, $i26, $i27 := $i28, $i29, $i31, $i32, $p33, $i32, $i31, $p30, $i29, $i28;
  assume {:branchcond $i35} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i35 == 1);
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10535, 7} true;
  assume {:verifier.code 0} true;
  $i18, $i19, $i20, $i21 := $i36, $i37, $i38, $i39;
  goto $bb2;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10535, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i35 == 1));
  goto $bb4;
$bb8:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10590, 28} true;
  assume {:verifier.code 0} true;
  $i125 := $trunc.i32.i16($i42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10590, 12} true;
  assume {:verifier.code 0} true;
  $p126 := $add.ref($p0, 34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10590, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p126, $i125);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10591, 39} true;
  assume {:verifier.code 0} true;
  $i127 := $ne.i32($i43, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10591, 39} true;
  assume {:verifier.code 0} true;
  $i128 := $zext.i1.i32($i127);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10591, 33} true;
  assume {:verifier.code 0} true;
  $i129 := $sext.i32.i64($i128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10591, 13} true;
  assume {:verifier.code 0} true;
  call $i130 := ldv__builtin_expect($i129, 0);
  // WARNING: %108 = call i64 @ldv__builtin_expect(i64 %107, i64 0), !dbg !8463, !verifier.code !8334
  call {:cexpr "tmp___5"} boogie_si_record_i64($i130);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10592, 15} true;
  assume {:verifier.code 0} true;
  $i131 := $ne.i64($i130, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10592, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i131} true;
  goto $bb29, $bb30;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10540, 18} true;
  assume {:verifier.code 0} true;
  $p44 := $bitcast.ref.ref($p25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10540, 21} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($p44, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10540, 21} true;
  assume {:verifier.code 0} true;
  $i46 := $load.i32($M.0, $p45);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10540, 28} true;
  assume {:verifier.code 0} true;
  $i47 := $and.i32($i46, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10540, 34} true;
  assume {:verifier.code 0} true;
  $i48 := $eq.i32($i47, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10540, 7} true;
  assume {:verifier.code 0} true;
  $i49, $i50, $i51, $i52 := $i27, $i26, $i24, $i23;
  assume {:branchcond $i48} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i48 == 1);
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10541, 5} true;
  assume {:verifier.code 0} true;
  $i40, $i41, $i42, $i43 := $i49, $i50, $i51, $i52;
  goto $bb8;
$bb11:
  assume !(($i48 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10545, 16} true;
  assume {:verifier.code 0} true;
  $p53 := $add.ref($p22, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10545, 26} true;
  assume {:verifier.code 0} true;
  $p54 := $bitcast.ref.ref($p53);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10545, 36} true;
  assume {:verifier.code 0} true;
  $p55 := $add.ref($p54, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10545, 50} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p55, $0.ref);
  // WARNING: store %union.e1000_adv_tx_desc* null, %union.e1000_adv_tx_desc** %35, align 8, !dbg !8381, !verifier.code !8334
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10578, 7} true;
  assume {:verifier.code 0} true;
  $p56, $i57, $i58, $i59, $i60 := $p22, $i23, $i24, $i26, $i27;
  goto $bb13;
$bb13:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10579, 5} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10549, 25} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10549, 25} true;
  assume {:verifier.code 0} true;
  $p62 := $load.ref($M.0, $p61);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10549, 32} true;
  assume {:verifier.code 0} true;
  $i63 := $zext.i32.i64($i58);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10549, 30} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($p62, $mul.ref($i63, 16));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10549, 52} true;
  assume {:verifier.code 0} true;
  $p65 := $bitcast.ref.ref($p64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10550, 13} true;
  assume {:verifier.code 0} true;
  $i66 := $p2i.ref.i64($p65);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10550, 40} true;
  assume {:verifier.code 0} true;
  $i67 := $p2i.ref.i64($p25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10550, 37} true;
  assume {:verifier.code 0} true;
  $i68 := $eq.i64($i66, $i67);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10550, 11} true;
  assume {:verifier.code 0} true;
  $i69 := $zext.i1.i8($i68);
  // WARNING: %45 = zext i1 %44 to i8, !dbg !8392, !verifier.code !8334
  call {:cexpr "cleaned"} boogie_si_record_i8($i69);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10551, 22} true;
  assume {:verifier.code 0} true;
  $p70 := $add.ref($p56, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10551, 22} true;
  assume {:verifier.code 0} true;
  $p71 := $load.ref($M.0, $p70);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10552, 7} true;
  assume {:verifier.code 0} true;
  $i72 := $p2i.ref.i64($p71);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10552, 27} true;
  assume {:verifier.code 0} true;
  $i73 := $ne.i64($i72, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10552, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i73} true;
  goto $bb15, $bb16;
$bb15:
  assume ($i73 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10553, 15} true;
  assume {:verifier.code 0} true;
  call $p74 := skb_end_pointer($p71);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10554, 52} true;
  assume {:verifier.code 0} true;
  $p75 := $bitcast.ref.ref($p74);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10554, 52} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($p75, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10554, 52} true;
  assume {:verifier.code 0} true;
  $i77 := $load.i16($M.0, $p76);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10554, 9} true;
  assume {:verifier.code 0} true;
  $i78 := $zext.i16.i32($i77);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10554, 61} true;
  assume {:verifier.code 0} true;
  $i79 := $ne.i32($i78, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10554, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i79} true;
  goto $bb17, $bb18;
$bb16:
  assume !(($i73 == 1));
  assume {:verifier.code 0} true;
  $i94, $i95 := $i60, $i59;
  goto $bb20;
$bb17:
  assume ($i79 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10555, 17} true;
  assume {:verifier.code 0} true;
  call $p80 := skb_end_pointer($p71);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10556, 73} true;
  assume {:verifier.code 0} true;
  $p81 := $bitcast.ref.ref($p80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10556, 73} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($p81, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10556, 73} true;
  assume {:verifier.code 0} true;
  $i83 := $load.i16($M.0, $p82);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10556, 30} true;
  assume {:verifier.code 0} true;
  $i84 := $zext.i16.i32($i83);
  // WARNING: %62 = zext i16 %61 to i32, !dbg !8414, !verifier.code !8334
  call {:cexpr "segs"} boogie_si_record_i32($i84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10557, 5} true;
  assume {:verifier.code 0} true;
  $i85 := $i84;
  goto $bb19;
$bb18:
  assume !(($i79 == 1));
  assume {:verifier.code 0} true;
  $i85 := 1;
  goto $bb19;
$bb19:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10560, 15} true;
  assume {:verifier.code 0} true;
  call $i86 := skb_headlen($p71);
  // WARNING: %65 = call i32 @skb_headlen(%struct.sk_buff* %47), !dbg !8418, !verifier.code !8334
  call {:cexpr "tmp___2"} boogie_si_record_i32($i86);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10561, 23} true;
  assume {:verifier.code 0} true;
  $i87 := $sub.i32($i85, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10561, 29} true;
  assume {:verifier.code 0} true;
  $i88 := $mul.i32($i87, $i86);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10561, 46} true;
  assume {:verifier.code 0} true;
  $p89 := $add.ref($p71, 104);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10561, 46} true;
  assume {:verifier.code 0} true;
  $i90 := $load.i32($M.0, $p89);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10561, 39} true;
  assume {:verifier.code 0} true;
  $i91 := $add.i32($i88, $i90);
  // WARNING: %70 = add i32 %67, %69, !dbg !8424, !verifier.code !8334
  call {:cexpr "bytecount"} boogie_si_record_i32($i91);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10562, 35} true;
  assume {:verifier.code 0} true;
  $i92 := $add.i32($i60, $i85);
  // WARNING: %71 = add i32 %.21727, %.01, !dbg !8427, !verifier.code !8334
  call {:cexpr "total_packets"} boogie_si_record_i32($i92);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10563, 31} true;
  assume {:verifier.code 0} true;
  $i93 := $add.i32($i59, $i91);
  // WARNING: %72 = add i32 %.21328, %70, !dbg !8428, !verifier.code !8334
  call {:cexpr "total_bytes"} boogie_si_record_i32($i93);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10564, 3} true;
  assume {:verifier.code 0} true;
  $i94, $i95 := $i92, $i93;
  goto $bb20;
$bb20:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10567, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_put_txbuf($p2, $p56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10568, 12} true;
  assume {:verifier.code 0} true;
  $p96 := $bitcast.ref.ref($p65);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10568, 15} true;
  assume {:verifier.code 0} true;
  $p97 := $add.ref($p96, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10568, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p97, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10569, 9} true;
  assume {:verifier.code 0} true;
  $i98 := $add.i32($i58, 1);
  // WARNING: %77 = add i32 %.2929, 1, !dbg !8434, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i98);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10570, 16} true;
  assume {:verifier.code 0} true;
  $p99 := $add.ref($p0, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10570, 16} true;
  assume {:verifier.code 0} true;
  $i100 := $load.i32($M.0, $p99);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10570, 22} true;
  assume {:verifier.code 0} true;
  $i101 := $eq.i32($i100, $i98);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10570, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i101} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i101 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10572, 3} true;
  assume {:verifier.code 0} true;
  $i102 := 0;
  goto $bb23;
$bb22:
  assume !(($i101 == 1));
  assume {:verifier.code 0} true;
  $i102 := $i98;
  goto $bb23;
$bb23:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10575, 26} true;
  assume {:verifier.code 0} true;
  $p103 := $add.ref($p0, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10575, 26} true;
  assume {:verifier.code 0} true;
  $p104 := $load.ref($M.0, $p103);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10575, 40} true;
  assume {:verifier.code 0} true;
  $i105 := $zext.i32.i64($i102);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10575, 38} true;
  assume {:verifier.code 0} true;
  $p106 := $add.ref($p104, $mul.ref($i105, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10576, 17} true;
  assume {:verifier.code 0} true;
  $i107 := $add.i32($i57, 1);
  // WARNING: %88 = add i32 %.1630, 1, !dbg !8444, !verifier.code !8334
  call {:cexpr "count"} boogie_si_record_i32($i107);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10578, 9} true;
  assume {:verifier.code 0} true;
  $i108 := $trunc.i8.i1($i69);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10578, 7} true;
  assume {:verifier.code 0} true;
  $i109, $i110, $i111, $i112, $p113, $p56, $i57, $i58, $i59, $i60 := $i94, $i95, $i102, $i107, $p106, $p106, $i107, $i102, $i95, $i94;
  assume {:branchcond $i108} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i108 == 1);
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10578, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i108 == 1));
  goto $bb13;
$bb26:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10583, 27} true;
  assume {:verifier.code 0} true;
  $p114 := $add.ref($p113, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10583, 37} true;
  assume {:verifier.code 0} true;
  $p115 := $bitcast.ref.ref($p114);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10583, 47} true;
  assume {:verifier.code 0} true;
  $p116 := $add.ref($p115, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10583, 47} true;
  assume {:verifier.code 0} true;
  $p117 := $load.ref($M.0, $p116);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10584, 16} true;
  assume {:verifier.code 0} true;
  $p118 := $add.ref($p0, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10584, 16} true;
  assume {:verifier.code 0} true;
  $i119 := $load.i32($M.0, $p118);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10584, 22} true;
  assume {:verifier.code 0} true;
  $i120 := $ugt.i32($i119, $i112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10584, 7} true;
  assume {:verifier.code 0} true;
  $i28, $i29, $p30, $i31, $i32, $p33, $i121, $i122, $i123, $i124 := $i109, $i110, $p117, $i111, $i112, $p113, $i109, $i110, $i111, $i112;
  assume {:branchcond $i120} true;
  goto $bb5, $bb27;
$bb27:
  assume !(($i120 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10584, 24} true;
  assume {:verifier.code 0} true;
  $i40, $i41, $i42, $i43 := $i121, $i122, $i123, $i124;
  goto $bb8;
$bb29:
  assume ($i131 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10593, 15} true;
  assume {:verifier.code 0} true;
  call $i132 := netif_carrier_ok($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10593, 13} true;
  assume {:verifier.code 0} true;
  $i133 := $zext.i1.i8($i132);
  // WARNING: %112 = zext i1 %111 to i8, !dbg !8471, !verifier.code !8334
  call {:cexpr "tmp___6"} boogie_si_record_i8($i133);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10594, 42} true;
  assume {:verifier.code 0} true;
  $i134 := $trunc.i8.i1($i133);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10594, 35} true;
  assume {:verifier.code 0} true;
  $i135 := $zext.i1.i64($i134);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10594, 15} true;
  assume {:verifier.code 0} true;
  call $i136 := ldv__builtin_expect($i135, 0);
  // WARNING: %115 = call i64 @ldv__builtin_expect(i64 %114, i64 0), !dbg !8476, !verifier.code !8334
  call {:cexpr "tmp___7"} boogie_si_record_i64($i136);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10595, 17} true;
  assume {:verifier.code 0} true;
  $i137 := $ne.i64($i136, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10595, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i137} true;
  goto $bb31, $bb32;
$bb30:
  assume !(($i131 == 1));
  assume {:verifier.code 0} true;
  $i139 := 0;
  goto $bb34;
$bb31:
  assume ($i137 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10597, 5} true;
  assume {:verifier.code 0} true;
  $i138 := 1;
  goto $bb33;
$bb32:
  assume !(($i137 == 1));
  assume {:verifier.code 0} true;
  $i138 := 0;
  goto $bb33;
$bb33:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10600, 3} true;
  assume {:verifier.code 0} true;
  $i139 := $i138;
  goto $bb34;
$bb34:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10603, 15} true;
  assume {:verifier.code 0} true;
  $i140 := $ne.i32($i139, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10603, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i140} true;
  goto $bb35, $bb36;
$bb35:
  assume ($i140 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10604, 15} true;
  assume {:verifier.code 0} true;
  call $i141 := igbvf_desc_unused($p0);
  // WARNING: %124 = call i32 @igbvf_desc_unused(%struct.igbvf_ring* %0), !dbg !8490, !verifier.code !8334
  call {:cexpr "tmp___9"} boogie_si_record_i32($i141);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10605, 44} true;
  assume {:verifier.code 0} true;
  $i142 := $sgt.i32($i141, 31);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10605, 44} true;
  assume {:verifier.code 0} true;
  $i143 := $zext.i1.i32($i142);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10605, 36} true;
  assume {:verifier.code 0} true;
  $i144 := $sext.i32.i64($i143);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10605, 16} true;
  assume {:verifier.code 0} true;
  call $i145 := ldv__builtin_expect($i144, 0);
  // WARNING: %128 = call i64 @ldv__builtin_expect(i64 %127, i64 0), !dbg !8496, !verifier.code !8334
  call {:cexpr "tmp___10"} boogie_si_record_i64($i145);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10606, 18} true;
  assume {:verifier.code 0} true;
  $i146 := $ne.i64($i145, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10606, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i146} true;
  goto $bb37, $bb38;
$bb36:
  assume !(($i140 == 1));
  assume {:verifier.code 0} true;
  goto $bb46;
$bb37:
  assume ($i146 == 1);
  call devirtbounce.5(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10608, 17} true;
  assume {:verifier.code 0} true;
  call $i147 := netif_queue_stopped($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10608, 15} true;
  assume {:verifier.code 0} true;
  $i148 := $zext.i1.i8($i147);
  // WARNING: %132 = zext i1 %131 to i8, !dbg !8504, !verifier.code !8334
  call {:cexpr "tmp___3"} boogie_si_record_i8($i148);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10609, 17} true;
  assume {:verifier.code 0} true;
  $i149 := $trunc.i8.i1($i148);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10609, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i149} true;
  goto $bb39, $bb40;
$bb38:
  assume !(($i146 == 1));
  assume {:verifier.code 0} true;
  goto $bb45;
$bb39:
  assume ($i149 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10610, 87} true;
  assume {:verifier.code 0} true;
  $p150 := $add.ref($p2, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10610, 19} true;
  assume {:verifier.code 0} true;
  call $i151 := constant_test_bit(2, $p150);
  // WARNING: %136 = call i32 @constant_test_bit(i64 2, i64* %135), !dbg !8512, !verifier.code !8334
  call {:cexpr "tmp___4"} boogie_si_record_i32($i151);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10611, 21} true;
  assume {:verifier.code 0} true;
  $i152 := $eq.i32($i151, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10611, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i152} true;
  goto $bb41, $bb42;
$bb40:
  assume !(($i149 == 1));
  assume {:verifier.code 0} true;
  goto $bb44;
$bb41:
  assume ($i152 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10612, 11} true;
  assume {:verifier.code 0} true;
  call netif_wake_queue($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10613, 45} true;
  assume {:verifier.code 0} true;
  $p153 := $add.ref($p2, 1056);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10613, 45} true;
  assume {:verifier.code 0} true;
  $i154 := $load.i32($M.0, $p153);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10613, 59} true;
  assume {:verifier.code 0} true;
  $i155 := $add.i32($i154, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10613, 20} true;
  assume {:verifier.code 0} true;
  $p156 := $add.ref($p2, 1056);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10613, 34} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p156, $i155);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10614, 9} true;
  assume {:verifier.code 0} true;
  goto $bb43;
$bb42:
  assume !(($i152 == 1));
  assume {:verifier.code 0} true;
  goto $bb43;
$bb43:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10617, 7} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb44:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10620, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb45:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10623, 3} true;
  assume {:verifier.code 0} true;
  goto $bb46;
$bb46:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10626, 42} true;
  assume {:verifier.code 0} true;
  $p157 := $add.ref($p2, 1192);
  $p158 := $add.ref($add.ref($p2, 1192), 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10626, 52} true;
  assume {:verifier.code 0} true;
  $i159 := $load.i64($M.0, $p158);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10626, 63} true;
  assume {:verifier.code 0} true;
  $i160 := $zext.i32.i64($i41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10626, 61} true;
  assume {:verifier.code 0} true;
  $i161 := $add.i64($i159, $i160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10626, 12} true;
  assume {:verifier.code 0} true;
  $p162 := $add.ref($p2, 1192);
  $p163 := $add.ref($add.ref($p2, 1192), 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10626, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p163, $i161);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10627, 44} true;
  assume {:verifier.code 0} true;
  $p164 := $add.ref($p2, 1192);
  $p165 := $add.ref($add.ref($p2, 1192), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10627, 54} true;
  assume {:verifier.code 0} true;
  $i166 := $load.i64($M.0, $p165);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10627, 67} true;
  assume {:verifier.code 0} true;
  $i167 := $zext.i32.i64($i40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10627, 65} true;
  assume {:verifier.code 0} true;
  $i168 := $add.i64($i166, $i167);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10627, 12} true;
  assume {:verifier.code 0} true;
  $p169 := $add.ref($p2, 1192);
  $p170 := $add.ref($add.ref($p2, 1192), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10627, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p170, $i168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10628, 20} true;
  assume {:verifier.code 0} true;
  $p171 := $add.ref($p0, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10628, 20} true;
  assume {:verifier.code 0} true;
  $i172 := $load.i32($M.0, $p171);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10628, 26} true;
  assume {:verifier.code 0} true;
  $i173 := $ugt.i32($i172, $i43);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10628, 3} true;
  assume {:verifier.code 0} true;
  $r := $i173;
  $exn := false;
  return;
}
const skb_end_pointer: ref;
axiom (skb_end_pointer == $sub.ref(0, 315811));
procedure  skb_end_pointer($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9003, 33} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 208);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9003, 33} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9003, 61} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 204);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9003, 61} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9003, 40} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i32.i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9003, 38} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p2, $mul.ref($i5, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9003, 3} true;
  assume {:verifier.code 0} true;
  $r := $p6;
  $exn := false;
  return;
}
const skb_headlen: ref;
axiom (skb_headlen == $sub.ref(0, 316843));
procedure  skb_headlen($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9028, 31} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 104);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9028, 31} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i32($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9028, 57} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 108);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9028, 57} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9028, 35} true;
  assume {:verifier.code 0} true;
  $i5 := $sub.i32($i2, $i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9028, 3} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const netif_carrier_ok: ref;
axiom (netif_carrier_ok == $sub.ref(0, 317875));
procedure  netif_carrier_ok($p0: ref)
  returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9562, 73} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9562, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := constant_test_bit(2, $p1);
  // WARNING: %3 = call i32 @constant_test_bit(i64 2, i64* %2), !dbg !8337, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9563, 15} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9563, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const netif_queue_stopped: ref;
axiom (netif_queue_stopped == $sub.ref(0, 318907));
procedure  netif_queue_stopped($p0: ref)
  returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9531, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_get_tx_queue($p0, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9532, 13} true;
  assume {:verifier.code 0} true;
  call $i2 := netif_tx_queue_stopped($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9532, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i8($i2);
  // WARNING: %4 = zext i1 %3 to i8, !dbg !8340, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i8($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9533, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.i8.i1($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9533, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const netif_wake_queue: ref;
axiom (netif_wake_queue == $sub.ref(0, 319939));
procedure  netif_wake_queue($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9476, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_get_tx_queue($p0, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9477, 3} true;
  assume {:verifier.code 0} true;
  call netif_tx_wake_queue($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9478, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const netif_tx_wake_queue: ref;
axiom (netif_tx_wake_queue == $sub.ref(0, 320971));
procedure  netif_tx_wake_queue($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9462, 74} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 424);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9462, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := test_and_clear_bit(0, $p1);
  // WARNING: %3 = call i32 @test_and_clear_bit(i64 0, i64* %2), !dbg !8337, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9463, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9463, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9464, 33} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9464, 33} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9464, 5} true;
  assume {:verifier.code 0} true;
  call __netif_schedule($p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9465, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9468, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const test_and_clear_bit: ref;
axiom (test_and_clear_bit == $sub.ref(0, 322003));
procedure  test_and_clear_bit($i0: i64, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
  // WARNING: %3 = alloca i8, align 1, !verifier.code !8331
  // WARNING: ignoring llvm.debug call.
  assume true;
  call devirtbounce.3(0, $p1, $p2, $i0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8268, 32} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i8($M.1, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8268, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i8.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8268, 35} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8268, 35} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8268, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const __netif_schedule: ref;
axiom (__netif_schedule == $sub.ref(0, 323035));
procedure  __netif_schedule($p0: ref);
const netif_tx_queue_stopped: ref;
axiom (netif_tx_queue_stopped == $sub.ref(0, 324067));
procedure  netif_tx_queue_stopped($p0: ref)
  returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9521, 79} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 424);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9521, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := constant_test_bit(0, $p1);
  // WARNING: %3 = call i32 @constant_test_bit(i64 0, i64* %2), !dbg !8337, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9522, 15} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9522, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const dev_get_drvdata: ref;
axiom (dev_get_drvdata == $sub.ref(0, 325099));
procedure  dev_get_drvdata($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8525, 24} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 520);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8525, 24} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8525, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const netif_device_detach: ref;
axiom (netif_device_detach == $sub.ref(0, 326131));
procedure  netif_device_detach($p0: ref);
const igbvf_free_irq: ref;
axiom (igbvf_free_irq == $sub.ref(0, 327163));
procedure  igbvf_free_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i7: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10980, 21} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10980, 21} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10981, 32} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10981, 32} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10981, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10981, 45} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i64($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10981, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10988, 9} true;
  assume {:verifier.code 0} true;
  $i7 := 0;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10989, 7} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10985, 31} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10985, 31} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10985, 46} true;
  assume {:verifier.code 0} true;
  $i10 := $sext.i32.i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10985, 44} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p9, $mul.ref($i10, 8));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10985, 71} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p9, $mul.ref($i10, 8));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10985, 71} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.0, $p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10985, 79} true;
  assume {:verifier.code 0} true;
  $p14 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10985, 5} true;
  assume {:verifier.code 0} true;
  call ldv_free_irq_49($i13, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10986, 21} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i32($i7, 1);
  // WARNING: %17 = add nsw i32 %.01, 1, !dbg !8354, !verifier.code !8334
  call {:cexpr "vector"} boogie_si_record_i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10988, 16} true;
  assume {:verifier.code 0} true;
  $i16 := $sle.i32($i15, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10988, 9} true;
  assume {:verifier.code 0} true;
  $i7 := $i15;
  assume {:branchcond $i16} true;
  goto $bb5, $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10988, 9} true;
  assume {:verifier.code 0} true;
  assume ($i16 == 1);
  goto $bb3;
$bb6:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10994, 3} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10997, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const pci_save_state: ref;
axiom (pci_save_state == $sub.ref(0, 328195));
procedure  pci_save_state($p0: ref)
  returns ($r: i32);
const pci_disable_device: ref;
axiom (pci_disable_device == $sub.ref(0, 329227));
procedure  pci_disable_device($p0: ref);
const ldv_free_irq_49: ref;
axiom (ldv_free_irq_49 == $sub.ref(0, 330259));
procedure  ldv_free_irq_49($i0: i32, $p1: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14530, 3} true;
  assume {:verifier.code 0} true;
  call free_irq($i0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14531, 3} true;
  assume {:verifier.code 0} true;
  call disable_suitable_irq_3($i0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14532, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const free_irq: ref;
axiom (free_irq == $sub.ref(0, 331291));
procedure  free_irq($i0: i32, $p1: ref);
const disable_suitable_irq_3: ref;
axiom (disable_suitable_irq_3 == $sub.ref(0, 332323));
procedure  disable_suitable_irq_3($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13449, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $M.17;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13449, 19} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13449, 24} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13449, 35} true;
  assume {:verifier.code 0} true;
  $i4 := $M.18;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13449, 32} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i0, $i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13449, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13449, 24} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb7;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13450, 17} true;
  assume {:verifier.code 0} true;
  $M.17 := 0;
  call {:cexpr "ldv_irq_3_0"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13451, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13449, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13475, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13455, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $M.20;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13455, 19} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i32($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13455, 24} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13455, 35} true;
  assume {:verifier.code 0} true;
  $i8 := $M.21;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13455, 32} true;
  assume {:verifier.code 0} true;
  $i9 := $eq.i32($i0, $i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13455, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb11, $bb12;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13455, 24} true;
  assume {:verifier.code 0} true;
  assume !(($i7 == 1));
  goto $bb10;
$bb10:
  assume {:verifier.code 0} true;
  goto $bb13;
$bb11:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13456, 17} true;
  assume {:verifier.code 0} true;
  $M.20 := 0;
  call {:cexpr "ldv_irq_3_1"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13457, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13455, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i9 == 1));
  goto $bb10;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13461, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $M.23;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13461, 19} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.i32($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13461, 24} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i11 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13461, 35} true;
  assume {:verifier.code 0} true;
  $i12 := $M.24;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13461, 32} true;
  assume {:verifier.code 0} true;
  $i13 := $eq.i32($i0, $i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13461, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb17, $bb18;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13461, 24} true;
  assume {:verifier.code 0} true;
  assume !(($i11 == 1));
  goto $bb16;
$bb16:
  assume {:verifier.code 0} true;
  goto $bb19;
$bb17:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13462, 17} true;
  assume {:verifier.code 0} true;
  $M.23 := 0;
  call {:cexpr "ldv_irq_3_2"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13463, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13461, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i13 == 1));
  goto $bb16;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13467, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $M.26;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13467, 19} true;
  assume {:verifier.code 0} true;
  $i15 := $ne.i32($i14, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13467, 24} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i15 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13467, 35} true;
  assume {:verifier.code 0} true;
  $i16 := $M.27;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13467, 32} true;
  assume {:verifier.code 0} true;
  $i17 := $eq.i32($i0, $i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13467, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb23, $bb24;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13467, 24} true;
  assume {:verifier.code 0} true;
  assume !(($i15 == 1));
  goto $bb22;
$bb22:
  assume {:verifier.code 0} true;
  goto $bb25;
$bb23:
  assume ($i17 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13468, 17} true;
  assume {:verifier.code 0} true;
  $M.26 := 0;
  call {:cexpr "ldv_irq_3_3"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13469, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13467, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i17 == 1));
  goto $bb22;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13473, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
}
const ldv_del_timer_sync_56: ref;
axiom (ldv_del_timer_sync_56 == $sub.ref(0, 333355));
procedure  ldv_del_timer_sync_56($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14612, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := del_timer_sync($p0);
  // WARNING: %2 = call i32 @del_timer_sync(%struct.timer_list* %0), !dbg !8335, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  // WARNING: call void @llvm.dbg.value(metadata i32 %2, i64 0, metadata !13677, metadata !8330), !dbg !13678, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14614, 3} true;
  assume {:verifier.code 0} true;
  call disable_suitable_timer_4($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14615, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const cancel_work_sync: ref;
axiom (cancel_work_sync == $sub.ref(0, 334387));
procedure  cancel_work_sync($p0: ref)
  returns ($r: i1);
const ldv_unregister_netdev_57: ref;
axiom (ldv_unregister_netdev_57 == $sub.ref(0, 335419));
procedure  ldv_unregister_netdev_57($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14623, 3} true;
  assume {:verifier.code 0} true;
  call unregister_netdev($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14624, 24} true;
  assume {:verifier.code 0} true;
  $M.29 := 0;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14625, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_reset_interrupt_capability: ref;
axiom (igbvf_reset_interrupt_capability == $sub.ref(0, 336451));
procedure  igbvf_reset_interrupt_capability($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10808, 32} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10808, 32} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10808, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10808, 45} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i64($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10808, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10809, 31} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10809, 31} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10809, 5} true;
  assume {:verifier.code 0} true;
  call pci_disable_msix($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10810, 36} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10810, 36} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10810, 11} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10810, 5} true;
  assume {:verifier.code 0} true;
  call kfree($p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10811, 14} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10811, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p10, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10812, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10815, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const netif_napi_del: ref;
axiom (netif_napi_del == $sub.ref(0, 337483));
procedure  netif_napi_del($p0: ref);
const iounmap: ref;
axiom (iounmap == $sub.ref(0, 338515));
procedure  iounmap($p0: ref);
const pci_release_regions: ref;
axiom (pci_release_regions == $sub.ref(0, 339547));
procedure  pci_release_regions($p0: ref);
const ldv_free_netdev_58: ref;
axiom (ldv_free_netdev_58 == $sub.ref(0, 340579));
procedure  ldv_free_netdev_58($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14633, 3} true;
  assume {:verifier.code 0} true;
  call free_netdev($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14634, 24} true;
  assume {:verifier.code 0} true;
  $M.29 := 0;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14635, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const free_netdev: ref;
axiom (free_netdev == $sub.ref(0, 341611));
procedure  free_netdev($p0: ref);
const pci_disable_msix: ref;
axiom (pci_disable_msix == $sub.ref(0, 342643));
procedure  pci_disable_msix($p0: ref);
const unregister_netdev: ref;
axiom (unregister_netdev == $sub.ref(0, 343675));
procedure  unregister_netdev($p0: ref);
const dma_set_mask_and_coherent: ref;
axiom (dma_set_mask_and_coherent == $sub.ref(0, 344707));
procedure  dma_set_mask_and_coherent($p0: ref, $i1: i64)
  returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.device* %0, i64 0, metadata !13718, metadata !8330), !dbg !13719, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8964, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := dma_set_mask($p0, $i1);
  // WARNING: %3 = call i32 @dma_set_mask(%struct.device* %0, i64 %1), !dbg !8335, !verifier.code !8332
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !13724, metadata !8330), !dbg !13725, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8966, 10} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8966, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8967, 5} true;
  assume {:verifier.code 0} true;
  call $i4 := dma_set_coherent_mask($p0, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8968, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8971, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const pci_request_regions: ref;
axiom (pci_request_regions == $sub.ref(0, 345739));
procedure  pci_request_regions($p0: ref, $p1: ref)
  returns ($r: i32);
const alloc_etherdev_mqs: ref;
axiom (alloc_etherdev_mqs == $sub.ref(0, 346771));
procedure  alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32)
  returns ($r: ref);
const pci_set_drvdata: ref;
axiom (pci_set_drvdata == $sub.ref(0, 347803));
procedure  pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9326, 27} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9326, 3} true;
  assume {:verifier.code 0} true;
  call dev_set_drvdata($p2, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9327, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const netif_msg_init: ref;
axiom (netif_msg_init == $sub.ref(0, 348835));
procedure  netif_msg_init($i0: i32, $i1: i32)
  returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i4: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !13749, metadata !8330), !dbg !13750, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9575, 19} true;
  assume {:verifier.code 0} true;
  $i2 := $slt.i32($i0, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9575, 23} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9575, 23} true;
  assume {:verifier.code 0} true;
  assume ($i2 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9576, 5} true;
  assume {:verifier.code 0} true;
  $i4 := $i1;
  goto $bb6;
$bb3:
  assume !(($i2 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9575, 53} true;
  assume {:verifier.code 0} true;
  $i3 := $ugt.i32($i0, 31);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9575, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9575, 7} true;
  assume {:verifier.code 0} true;
  assume ($i3 == 1);
  goto $bb2;
$bb5:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9587, 1} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9580, 19} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i0, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9580, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9581, 5} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb6;
$bb9:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9585, 21} true;
  assume {:verifier.code 0} true;
  $i6 := $shl.i32(1, $i0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9585, 37} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i32($i6, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9585, 3} true;
  assume {:verifier.code 0} true;
  $i4 := $i7;
  goto $bb6;
}
const ioremap: ref;
axiom (ioremap == $sub.ref(0, 349867));
procedure  ioremap($i0: i64, $i1: i64)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !13774, metadata !8330), !dbg !13775, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8417, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ioremap_nocache($i0, $i1);
  assume $isExternal($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8418, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const igbvf_sw_init: ref;
axiom (igbvf_sw_init == $sub.ref(0, 350899));
procedure  igbvf_sw_init($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i31: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11434, 21} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 1176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11434, 21} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11435, 12} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 940);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11435, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p5, 1522);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11436, 12} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p0, 1160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11436, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p6, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11437, 37} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p4, 536);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11437, 37} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11437, 41} true;
  assume {:verifier.code 0} true;
  $i9 := $add.i32($i8, 18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11437, 12} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p0, 1164);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11437, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p10, $i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11438, 12} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p0, 1168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11438, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p11, 64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11439, 12} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p0, 1064);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11439, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p12, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11440, 12} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p0, 1068);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11440, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p13, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11441, 12} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p0, 1120);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11441, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p14, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11442, 12} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p0, 1124);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11442, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p15, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11443, 12} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p0, 1040);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11443, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p16, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11444, 12} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p0, 1044);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11444, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p17, 488);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11445, 16} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p0, 416);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11445, 16} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11445, 21} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p19, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11445, 21} true;
  assume {:verifier.code 0} true;
  $p21 := $load.ref($M.0, $p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11445, 43} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p0, 1448);
  call devirtbounce.17($p21, $p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11446, 20} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p0, 1448);
  $p24 := $add.ref($add.ref($p0, 1448), 32);
  $p25 := $add.ref($add.ref($p0, 1448), 32);
  $p26 := $add.ref($add.ref($p0, 1448), 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11446, 31} true;
  assume {:verifier.code 0} true;
  $p27 := $load.ref($M.0, $p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11446, 56} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p0, 1448);
  call $i29 := devirtbounce.2($p27, $p28);
  // WARNING: %30 = call i32 @devirtbounce.2(i32 (%struct.e1000_hw*)* %28, %struct.e1000_hw* %29)
  call {:cexpr "rc"} boogie_si_record_i32($i29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11447, 10} true;
  assume {:verifier.code 0} true;
  $i30 := $ne.i32($i29, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11447, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i30 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11448, 5} true;
  assume {:verifier.code 0} true;
  $i31 := $i29;
  goto $bb3;
$bb2:
  assume !(($i30 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11475, 1} true;
  assume {:verifier.code 0} true;
  $r := $i31;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11452, 20} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p0, 1448);
  $p33 := $add.ref($add.ref($p0, 1448), 168);
  $p34 := $add.ref($add.ref($p0, 1448), 168);
  $p35 := $add.ref($add.ref($p0, 1448), 168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11452, 31} true;
  assume {:verifier.code 0} true;
  $p36 := $load.ref($M.0, $p35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11452, 56} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p0, 1448);
  call $i38 := devirtbounce.2($p36, $p37);
  // WARNING: %41 = call i32 @devirtbounce.2(i32 (%struct.e1000_hw*)* %39, %struct.e1000_hw* %40)
  call {:cexpr "rc"} boogie_si_record_i32($i38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11453, 10} true;
  assume {:verifier.code 0} true;
  $i39 := $ne.i32($i38, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11453, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i39 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11454, 5} true;
  assume {:verifier.code 0} true;
  $i31 := $i38;
  goto $bb3;
$bb6:
  assume !(($i39 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11458, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_set_interrupt_capability($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11459, 9} true;
  assume {:verifier.code 0} true;
  call $i40 := igbvf_alloc_queues($p0);
  // WARNING: %46 = call i32 @igbvf_alloc_queues(%struct.igbvf_adapter* %0), !dbg !8387, !verifier.code !8331
  call {:cexpr "tmp"} boogie_si_record_i32($i40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11460, 11} true;
  assume {:verifier.code 0} true;
  $i41 := $ne.i32($i40, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11460, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i41 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11461, 5} true;
  assume {:verifier.code 0} true;
  $i31 := $sub.i32(0, 12);
  goto $bb3;
$bb9:
  assume !(($i41 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11465, 29} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($p0, 960);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11465, 3} true;
  assume {:verifier.code 0} true;
  call $p43 := spinlock_check($p42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11466, 35} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($p0, 960);
  $p45 := $add.ref($p0, 960);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11466, 58} true;
  assume {:verifier.code 0} true;
  $p46 := $bitcast.ref.ref($p45);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11466, 3} true;
  assume {:verifier.code 0} true;
  call __raw_spin_lock_init($p46, .str.32, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11468, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_irq_disable($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11469, 29} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($p0, 1376);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11469, 3} true;
  assume {:verifier.code 0} true;
  call $p48 := spinlock_check($p47);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11470, 35} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($p0, 1376);
  $p50 := $add.ref($p0, 1376);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11470, 55} true;
  assume {:verifier.code 0} true;
  $p51 := $bitcast.ref.ref($p50);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11470, 3} true;
  assume {:verifier.code 0} true;
  call __raw_spin_lock_init($p51, .str.33, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11472, 55} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($p0, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11472, 3} true;
  assume {:verifier.code 0} true;
  call set_bit(2, $p52);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11473, 3} true;
  assume {:verifier.code 0} true;
  $i31 := 0;
  goto $bb3;
}
const igbvf_set_ethtool_ops: ref;
axiom (igbvf_set_ethtool_ops == $sub.ref(0, 351931));
procedure  igbvf_set_ethtool_ops($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7923, 11} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 496);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7923, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p1, igbvf_ethtool_ops);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7924, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const strncpy: ref;
axiom (strncpy == $sub.ref(0, 352963));
procedure  strncpy($p0: ref, $p1: ref, $i2: i64)
  returns ($r: ref);
const _dev_info: ref;
axiom (_dev_info == $sub.ref(0, 353995));
procedure  _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
  returns ($r: i32);
procedure  _dev_info.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref)
  returns ($r: i32);
procedure  _dev_info.ref.ref($p0: ref, $p1: ref)
  returns ($r: i32);
procedure  _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
  returns ($r: i32);
const eth_hw_addr_random: ref;
axiom (eth_hw_addr_random == $sub.ref(0, 355027));
procedure  eth_hw_addr_random($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9695, 8} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 580);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9695, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p1, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9696, 24} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 840);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9696, 24} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9696, 3} true;
  assume {:verifier.code 0} true;
  call eth_random_addr($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9697, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_watchdog: ref;
axiom (igbvf_watchdog == $sub.ref(0, 356059));
procedure  igbvf_watchdog($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11834, 13} true;
  assume {:verifier.code 0} true;
  $p1 := $i2p.i64.ref($i0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11835, 28} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p1, 336);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11835, 3} true;
  assume {:verifier.code 0} true;
  call $i3 := schedule_work($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11836, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const reg_timer_4: ref;
axiom (reg_timer_4 == $sub.ref(0, 357091));
procedure  reg_timer_4($p0: ref, $p1: ref, $i2: i64)
  returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata void (i64)* %1, i64 0, metadata !13892, metadata !8330), !dbg !13893, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13536, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13536, 32} true;
  assume {:verifier.code 0} true;
  $i4 := $eq.i64($i3, $p2i.ref.i64(igbvf_watchdog));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13536, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13537, 5} true;
  assume {:verifier.code 0} true;
  call activate_suitable_timer_4($p0, $i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13538, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13541, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const __init_work: ref;
axiom (__init_work == $sub.ref(0, 358123));
procedure  __init_work($p0: ref, $i1: i32);
const llvm.memcpy.p0i8.p0i8.i64: ref;
axiom (llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 359155));
procedure  llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);
const lockdep_init_map: ref;
axiom (lockdep_init_map == $sub.ref(0, 360187));
procedure  lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
const INIT_LIST_HEAD: ref;
axiom (INIT_LIST_HEAD == $sub.ref(0, 361219));
procedure  INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8299, 9} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8299, 14} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p1, $p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8300, 9} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8300, 14} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p2, $p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8301, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_reset_task: ref;
axiom (igbvf_reset_task == $sub.ref(0, 362251));
procedure  igbvf_reset_task($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12464, 13} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12464, 44} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 256), 2616));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12465, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_reinit_locked($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12466, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_watchdog_task: ref;
axiom (igbvf_watchdog_task == $sub.ref(0, 363283));
procedure  igbvf_watchdog_task($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i8;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i66: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11860, 13} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11860, 44} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 336), 2616));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11861, 21} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 1176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11861, 21} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11862, 20} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 1448);
  $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 1448), 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11863, 22} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11863, 22} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11864, 19} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 1448);
  // WARNING: call void @llvm.dbg.value(metadata %struct.e1000_hw* %10, i64 0, metadata !13948, metadata !8330), !dbg !13949, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11866, 9} true;
  assume {:verifier.code 0} true;
  call $i10 := igbvf_has_link($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11866, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $zext.i1.i8($i10);
  // WARNING: %12 = zext i1 %11 to i8, !dbg !8356, !verifier.code !8332
  call {:cexpr "tmp"} boogie_si_record_i8($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11867, 16} true;
  assume {:verifier.code 0} true;
  $i12 := $trunc.i8.i1($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11867, 10} true;
  assume {:verifier.code 0} true;
  $i13 := $zext.i1.i32($i12);
  // WARNING: %14 = zext i1 %13 to i32, !dbg !8360, !verifier.code !8332
  call {:cexpr "link"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11868, 12} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i32($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11868, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11869, 15} true;
  assume {:verifier.code 0} true;
  call $i15 := netif_carrier_ok($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11869, 13} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i1.i8($i15);
  // WARNING: %18 = zext i1 %17 to i8, !dbg !8368, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i8($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11870, 9} true;
  assume {:verifier.code 0} true;
  $i17 := $trunc.i8.i1($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11870, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i14 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11884, 15} true;
  assume {:verifier.code 0} true;
  call $i27 := netif_carrier_ok($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11884, 13} true;
  assume {:verifier.code 0} true;
  $i28 := $zext.i1.i8($i27);
  // WARNING: %36 = zext i1 %35 to i8, !dbg !8393, !verifier.code !8332
  call {:cexpr "tmp___2"} boogie_si_record_i8($i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11885, 15} true;
  assume {:verifier.code 0} true;
  $i29 := $trunc.i8.i1($i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11885, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb10, $bb11;
$bb3:
  assume ($i17 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11872, 5} true;
  assume {:verifier.code 0} true;
  $i18 := 0;
  goto $bb5;
$bb4:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  $i18 := 1;
  goto $bb5;
$bb5:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11875, 9} true;
  assume {:verifier.code 0} true;
  $i19 := $ne.i32($i18, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11875, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i19 == 1);
  $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 1448), 32);
  $p21 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 1448), 32), 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11876, 19} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11876, 49} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11876, 64} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 950);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11876, 87} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 952);
  call $i26 := devirtbounce.18($p22, $p23, $p24, $p25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11877, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_print_link_info($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11878, 7} true;
  assume {:verifier.code 0} true;
  call netif_carrier_on($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11879, 7} true;
  assume {:verifier.code 0} true;
  call netif_wake_queue($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11880, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11883, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11895, 13} true;
  assume {:verifier.code 0} true;
  call $i36 := netif_carrier_ok($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11895, 11} true;
  assume {:verifier.code 0} true;
  $i37 := $zext.i1.i8($i36);
  // WARNING: %49 = zext i1 %48 to i8, !dbg !8411, !verifier.code !8332
  call {:cexpr "tmp___4"} boogie_si_record_i8($i37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11896, 13} true;
  assume {:verifier.code 0} true;
  $i38 := $trunc.i8.i1($i37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11896, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb13, $bb14;
$bb10:
  assume ($i29 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11886, 16} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 950);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11886, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p30, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11887, 16} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 952);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11887, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p31, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11888, 55} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11888, 55} true;
  assume {:verifier.code 0} true;
  $p33 := $load.ref($M.0, $p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11888, 62} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p33, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11888, 7} true;
  assume {:verifier.code 0} true;
  call $i35 := _dev_info.ref.ref($p34, .str.37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11889, 7} true;
  assume {:verifier.code 0} true;
  call netif_carrier_off($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11890, 7} true;
  assume {:verifier.code 0} true;
  call netif_stop_queue($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11891, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  goto $bb9;
$bb13:
  assume ($i38 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11897, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_update_stats($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11898, 3} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume !(($i38 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11899, 15} true;
  assume {:verifier.code 0} true;
  call $i39 := igbvf_desc_unused($p8);
  // WARNING: %53 = call i32 @igbvf_desc_unused(%struct.igbvf_ring* %9), !dbg !8420, !verifier.code !8332
  call {:cexpr "tmp___3"} boogie_si_record_i32($i39);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11900, 42} true;
  assume {:verifier.code 0} true;
  $i40 := $add.i32($i39, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11900, 58} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($p8, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11900, 58} true;
  assume {:verifier.code 0} true;
  $i42 := $load.i32($M.0, $p41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11900, 47} true;
  assume {:verifier.code 0} true;
  $i43 := $ult.i32($i40, $i42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11900, 47} true;
  assume {:verifier.code 0} true;
  $i44 := $zext.i1.i32($i43);
  // WARNING: %58 = zext i1 %57 to i32, !dbg !8426, !verifier.code !8332
  call {:cexpr "tx_pending"} boogie_si_record_i32($i44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11901, 20} true;
  assume {:verifier.code 0} true;
  $i45 := $ne.i32($i44, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11901, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb16, $bb17;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11908, 20} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11908, 20} true;
  assume {:verifier.code 0} true;
  $p53 := $load.ref($M.0, $p52);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11908, 30} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($p53, 256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11908, 30} true;
  assume {:verifier.code 0} true;
  $i55 := $load.i32($M.0, $p54);
  $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11908, 65} true;
  assume {:verifier.code 0} true;
  $p57 := $load.ref($M.0, $p56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11908, 73} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($p57, 5408);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11908, 3} true;
  assume {:verifier.code 0} true;
  call writel($i55, $p58);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11909, 81} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11909, 13} true;
  assume {:verifier.code 0} true;
  call $i60 := constant_test_bit(2, $p59);
  // WARNING: %78 = call i32 @constant_test_bit(i64 2, i64* %77), !dbg !8444, !verifier.code !8332
  call {:cexpr "tmp___6"} boogie_si_record_i32($i60);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11910, 15} true;
  assume {:verifier.code 0} true;
  $i61 := $eq.i32($i60, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11910, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i61} true;
  goto $bb19, $bb20;
$bb16:
  assume ($i45 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11902, 44} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 1088);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11902, 44} true;
  assume {:verifier.code 0} true;
  $i47 := $load.i32($M.0, $p46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11902, 61} true;
  assume {:verifier.code 0} true;
  $i48 := $add.i32($i47, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11902, 16} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 1088);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11902, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p49, $i48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11903, 32} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), 256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11903, 7} true;
  assume {:verifier.code 0} true;
  call $i51 := schedule_work($p50);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11904, 5} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb17:
  assume !(($i45 == 1));
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:verifier.code 0} true;
  goto $bb15;
$bb19:
  assume ($i61 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11911, 45} true;
  assume {:verifier.code 0} true;
  $i62 := $load.i64($M.0, jiffies);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11911, 53} true;
  assume {:verifier.code 0} true;
  $i63 := $add.i64($i62, 500);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11911, 15} true;
  assume {:verifier.code 0} true;
  call $i64 := round_jiffies($i63);
  // WARNING: %83 = call i64 @round_jiffies(i64 %82), !dbg !8453, !verifier.code !8332
  call {:cexpr "tmp___5"} boogie_si_record_i64($i64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11912, 33} true;
  assume {:verifier.code 0} true;
  $p65 := $add.ref($p1, $mul.ref($sub.ref(0, 336), 2616));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11912, 5} true;
  assume {:verifier.code 0} true;
  call $i66 := ldv_mod_timer_53($p65, $i64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11913, 3} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume !(($i61 == 1));
  assume {:verifier.code 0} true;
  goto $bb21;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11916, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const strcpy: ref;
axiom (strcpy == $sub.ref(0, 364315));
procedure  strcpy($p0: ref, $p1: ref)
  returns ($r: ref);
const ldv_register_netdev_54: ref;
axiom (ldv_register_netdev_54 == $sub.ref(0, 365347));
procedure  ldv_register_netdev_54($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14589, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := register_netdev($p0);
  // WARNING: %2 = call i32 @register_netdev(%struct.net_device* %0), !dbg !8333, !verifier.code !8332
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  // WARNING: call void @llvm.dbg.value(metadata i32 %2, i64 0, metadata !14062, metadata !8330), !dbg !14063, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14591, 24} true;
  assume {:verifier.code 0} true;
  $M.29 := 1;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14592, 3} true;
  assume {:verifier.code 0} true;
  call ldv_net_device_ops_7();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14593, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const igbvf_print_device_info: ref;
axiom (igbvf_print_device_info == $sub.ref(0, 366379));
procedure  igbvf_print_device_info($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12769, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12770, 21} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 1176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12770, 21} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12771, 19} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12771, 19} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.0, $p4);
  $p6 := $add.ref($add.ref($p0, 1448), 32);
  $p7 := $add.ref($add.ref($add.ref($p0, 1448), 32), 124);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12772, 30} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12772, 35} true;
  assume {:verifier.code 0} true;
  $i9 := $eq.i32($i8, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12772, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12773, 49} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p5, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12773, 5} true;
  assume {:verifier.code 0} true;
  call $i11 := _dev_info.ref.ref($p10, .str.41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12774, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i9 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12775, 49} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p5, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12775, 5} true;
  assume {:verifier.code 0} true;
  call $i13 := _dev_info.ref.ref($p12, .str.42);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12777, 47} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p5, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12777, 79} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p3, 840);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12777, 79} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12777, 3} true;
  assume {:verifier.code 0} true;
  call $i17 := _dev_info.ref.ref.ref($p14, .str.43, $p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12778, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_initialize_last_counter_stats: ref;
axiom (igbvf_initialize_last_counter_stats == $sub.ref(0, 367411));
procedure  igbvf_initialize_last_counter_stats($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i64;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11490, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1448);
  $p2 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11491, 65} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11491, 73} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p3, 3856);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11491, 30} true;
  assume {:verifier.code 0} true;
  call $i5 := readl($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11491, 12} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p0, 1736);
  $p7 := $add.ref($add.ref($p0, 1736), 72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11491, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p7, $i5);
  $p8 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11492, 65} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11492, 73} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p9, 3864);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11492, 30} true;
  assume {:verifier.code 0} true;
  call $i11 := readl($p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11492, 12} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p0, 1736);
  $p13 := $add.ref($add.ref($p0, 1736), 80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11492, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p13, $i11);
  $p14 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11493, 65} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11493, 73} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p15, 3860);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11493, 30} true;
  assume {:verifier.code 0} true;
  call $i17 := readl($p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11493, 12} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p0, 1736);
  $p19 := $add.ref($add.ref($p0, 1736), 76);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11493, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p19, $i17);
  $p20 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11494, 65} true;
  assume {:verifier.code 0} true;
  $p21 := $load.ref($M.0, $p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11494, 73} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p21, 3892);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11494, 30} true;
  assume {:verifier.code 0} true;
  call $i23 := readl($p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11494, 12} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p0, 1736);
  $p25 := $add.ref($add.ref($p0, 1736), 84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11494, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p25, $i23);
  $p26 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11495, 65} true;
  assume {:verifier.code 0} true;
  $p27 := $load.ref($M.0, $p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11495, 73} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p27, 3900);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11495, 30} true;
  assume {:verifier.code 0} true;
  call $i29 := readl($p28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11495, 12} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p0, 1736);
  $p31 := $add.ref($add.ref($p0, 1736), 88);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11495, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p31, $i29);
  $p32 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11496, 67} true;
  assume {:verifier.code 0} true;
  $p33 := $load.ref($M.0, $p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11496, 75} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p33, 3920);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11496, 32} true;
  assume {:verifier.code 0} true;
  call $i35 := readl($p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11496, 12} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p0, 1736);
  $p37 := $add.ref($add.ref($p0, 1736), 92);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11496, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p37, $i35);
  $p38 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11497, 67} true;
  assume {:verifier.code 0} true;
  $p39 := $load.ref($M.0, $p38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11497, 75} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p39, 3908);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11497, 32} true;
  assume {:verifier.code 0} true;
  call $i41 := readl($p40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11497, 12} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($p0, 1736);
  $p43 := $add.ref($add.ref($p0, 1736), 96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11497, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p43, $i41);
  $p44 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11498, 67} true;
  assume {:verifier.code 0} true;
  $p45 := $load.ref($M.0, $p44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11498, 75} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p45, 3912);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11498, 32} true;
  assume {:verifier.code 0} true;
  call $i47 := readl($p46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11498, 12} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($p0, 1736);
  $p49 := $add.ref($add.ref($p0, 1736), 100);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11498, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p49, $i47);
  $p50 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11499, 67} true;
  assume {:verifier.code 0} true;
  $p51 := $load.ref($M.0, $p50);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11499, 75} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($p51, 3904);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11499, 32} true;
  assume {:verifier.code 0} true;
  call $i53 := readl($p52);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11499, 12} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($p0, 1736);
  $p55 := $add.ref($add.ref($p0, 1736), 104);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11499, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p55, $i53);
  $p56 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11500, 44} true;
  assume {:verifier.code 0} true;
  $p57 := $load.ref($M.0, $p56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11500, 52} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($p57, 3856);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11500, 9} true;
  assume {:verifier.code 0} true;
  call $i59 := readl($p58);
  // WARNING: %60 = call i32 @readl(i8* %59), !dbg !8386, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i59);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11501, 30} true;
  assume {:verifier.code 0} true;
  $i60 := $zext.i32.i64($i59);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11501, 12} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($p0, 1736);
  $p62 := $add.ref($p0, 1736);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11501, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p62, $i60);
  $p63 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11502, 48} true;
  assume {:verifier.code 0} true;
  $p64 := $load.ref($M.0, $p63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11502, 56} true;
  assume {:verifier.code 0} true;
  $p65 := $add.ref($p64, 3864);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11502, 13} true;
  assume {:verifier.code 0} true;
  call $i66 := readl($p65);
  // WARNING: %67 = call i32 @readl(i8* %66), !dbg !8394, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i32($i66);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11503, 30} true;
  assume {:verifier.code 0} true;
  $i67 := $zext.i32.i64($i66);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11503, 12} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($p0, 1736);
  $p69 := $add.ref($add.ref($p0, 1736), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11503, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p69, $i67);
  $p70 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11504, 48} true;
  assume {:verifier.code 0} true;
  $p71 := $load.ref($M.0, $p70);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11504, 56} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($p71, 3860);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11504, 13} true;
  assume {:verifier.code 0} true;
  call $i73 := readl($p72);
  // WARNING: %74 = call i32 @readl(i8* %73), !dbg !8402, !verifier.code !8334
  call {:cexpr "tmp___1"} boogie_si_record_i32($i73);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11505, 30} true;
  assume {:verifier.code 0} true;
  $i74 := $zext.i32.i64($i73);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11505, 12} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($p0, 1736);
  $p76 := $add.ref($add.ref($p0, 1736), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11505, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p76, $i74);
  $p77 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11506, 48} true;
  assume {:verifier.code 0} true;
  $p78 := $load.ref($M.0, $p77);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11506, 56} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($p78, 3892);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11506, 13} true;
  assume {:verifier.code 0} true;
  call $i80 := readl($p79);
  // WARNING: %81 = call i32 @readl(i8* %80), !dbg !8410, !verifier.code !8334
  call {:cexpr "tmp___2"} boogie_si_record_i32($i80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11507, 30} true;
  assume {:verifier.code 0} true;
  $i81 := $zext.i32.i64($i80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11507, 12} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($p0, 1736);
  $p83 := $add.ref($add.ref($p0, 1736), 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11507, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p83, $i81);
  $p84 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11508, 48} true;
  assume {:verifier.code 0} true;
  $p85 := $load.ref($M.0, $p84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11508, 56} true;
  assume {:verifier.code 0} true;
  $p86 := $add.ref($p85, 3900);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11508, 13} true;
  assume {:verifier.code 0} true;
  call $i87 := readl($p86);
  // WARNING: %88 = call i32 @readl(i8* %87), !dbg !8418, !verifier.code !8334
  call {:cexpr "tmp___3"} boogie_si_record_i32($i87);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11509, 30} true;
  assume {:verifier.code 0} true;
  $i88 := $zext.i32.i64($i87);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11509, 12} true;
  assume {:verifier.code 0} true;
  $p89 := $add.ref($p0, 1736);
  $p90 := $add.ref($add.ref($p0, 1736), 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11509, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p90, $i88);
  $p91 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11510, 48} true;
  assume {:verifier.code 0} true;
  $p92 := $load.ref($M.0, $p91);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11510, 56} true;
  assume {:verifier.code 0} true;
  $p93 := $add.ref($p92, 3920);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11510, 13} true;
  assume {:verifier.code 0} true;
  call $i94 := readl($p93);
  // WARNING: %95 = call i32 @readl(i8* %94), !dbg !8426, !verifier.code !8334
  call {:cexpr "tmp___4"} boogie_si_record_i32($i94);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11511, 32} true;
  assume {:verifier.code 0} true;
  $i95 := $zext.i32.i64($i94);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11511, 12} true;
  assume {:verifier.code 0} true;
  $p96 := $add.ref($p0, 1736);
  $p97 := $add.ref($add.ref($p0, 1736), 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11511, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p97, $i95);
  $p98 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11512, 48} true;
  assume {:verifier.code 0} true;
  $p99 := $load.ref($M.0, $p98);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11512, 56} true;
  assume {:verifier.code 0} true;
  $p100 := $add.ref($p99, 3908);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11512, 13} true;
  assume {:verifier.code 0} true;
  call $i101 := readl($p100);
  // WARNING: %102 = call i32 @readl(i8* %101), !dbg !8434, !verifier.code !8334
  call {:cexpr "tmp___5"} boogie_si_record_i32($i101);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11513, 32} true;
  assume {:verifier.code 0} true;
  $i102 := $zext.i32.i64($i101);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11513, 12} true;
  assume {:verifier.code 0} true;
  $p103 := $add.ref($p0, 1736);
  $p104 := $add.ref($add.ref($p0, 1736), 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11513, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p104, $i102);
  $p105 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11514, 48} true;
  assume {:verifier.code 0} true;
  $p106 := $load.ref($M.0, $p105);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11514, 56} true;
  assume {:verifier.code 0} true;
  $p107 := $add.ref($p106, 3912);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11514, 13} true;
  assume {:verifier.code 0} true;
  call $i108 := readl($p107);
  // WARNING: %109 = call i32 @readl(i8* %108), !dbg !8442, !verifier.code !8334
  call {:cexpr "tmp___6"} boogie_si_record_i32($i108);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11515, 32} true;
  assume {:verifier.code 0} true;
  $i109 := $zext.i32.i64($i108);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11515, 12} true;
  assume {:verifier.code 0} true;
  $p110 := $add.ref($p0, 1736);
  $p111 := $add.ref($add.ref($p0, 1736), 56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11515, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p111, $i109);
  $p112 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11516, 48} true;
  assume {:verifier.code 0} true;
  $p113 := $load.ref($M.0, $p112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11516, 56} true;
  assume {:verifier.code 0} true;
  $p114 := $add.ref($p113, 3904);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11516, 13} true;
  assume {:verifier.code 0} true;
  call $i115 := readl($p114);
  // WARNING: %116 = call i32 @readl(i8* %115), !dbg !8450, !verifier.code !8334
  call {:cexpr "tmp___7"} boogie_si_record_i32($i115);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11517, 32} true;
  assume {:verifier.code 0} true;
  $i116 := $zext.i32.i64($i115);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11517, 12} true;
  assume {:verifier.code 0} true;
  $p117 := $add.ref($p0, 1736);
  $p118 := $add.ref($add.ref($p0, 1736), 64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11517, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p118, $i116);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11518, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_free_netdev_55: ref;
axiom (ldv_free_netdev_55 == $sub.ref(0, 368443));
procedure  ldv_free_netdev_55($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14601, 3} true;
  assume {:verifier.code 0} true;
  call free_netdev($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14602, 24} true;
  assume {:verifier.code 0} true;
  $M.29 := 0;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14603, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const register_netdev: ref;
axiom (register_netdev == $sub.ref(0, 369475));
procedure  register_netdev($p0: ref)
  returns ($r: i32);
const ldv_net_device_ops_7: ref;
axiom (ldv_net_device_ops_7 == $sub.ref(0, 370507));
procedure  ldv_net_device_ops_7()
{
  var $p0: ref;
  var $p1: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13192, 9} true;
  assume {:verifier.code 0} true;
  call $p0 := ldv_zalloc(3264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13193, 29} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13193, 27} true;
  assume {:verifier.code 0} true;
  $M.30 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13194, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_zalloc: ref;
axiom (ldv_zalloc == $sub.ref(0, 371539));
procedure  ldv_zalloc($i0: i64)
  returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6392, 13} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
  // WARNING: %2 = call i32 @__VERIFIER_nondet_int(), !dbg !8335, !verifier.code !8337
  call {:cexpr "tmp___0"} boogie_si_record_i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6393, 15} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6393, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6394, 5} true;
  assume {:verifier.code 0} true;
  $p3 := $0.ref;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6396, 11} true;
  assume {:verifier.code 0} true;
  call $p4 := calloc(1, $i0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6398, 23} true;
  assume {:verifier.code 1} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6398, 41} true;
  assume {:verifier.code 1} true;
  $i6 := $ne.i64($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6398, 41} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6398, 5} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6399, 5} true;
  assume {:verifier.code 0} true;
  $p3 := $p4;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6402, 1} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const igbvf_has_link: ref;
axiom (igbvf_has_link == $sub.ref(0, 372571));
procedure  igbvf_has_link($p0: ref)
  returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i1;
  var $i28: i1;
  var $i5: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11811, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1448);
  // WARNING: call void @llvm.dbg.value(metadata %struct.e1000_hw* %2, i64 0, metadata !14271, metadata !8330), !dbg !14272, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11813, 77} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11813, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := constant_test_bit(2, $p2);
  // WARNING: %4 = call i32 @constant_test_bit(i64 2, i64* %3), !dbg !8342, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11814, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11814, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11815, 5} true;
  assume {:verifier.code 0} true;
  $i5 := 0;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11828, 1} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
$bb4:
  $p6 := $add.ref($add.ref($p0, 1448), 32);
  $p7 := $add.ref($add.ref($p0, 1448), 32);
  $p8 := $add.ref($add.ref($add.ref($p0, 1448), 32), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11819, 28} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.0, $p8);
  call $i10 := devirtbounce.2($p9, $p1);
  // WARNING: %13 = call i32 @devirtbounce.2(i32 (%struct.e1000_hw*)* %12, %struct.e1000_hw* %2)
  call {:cexpr "ret_val"} boogie_si_record_i32($i10);
  $p11 := $add.ref($add.ref($p0, 1448), 32);
  $p12 := $add.ref($add.ref($add.ref($p0, 1448), 32), 132);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11820, 42} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i8($M.0, $p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11820, 42} true;
  assume {:verifier.code 0} true;
  $i14 := $trunc.i8.i1($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11820, 28} true;
  assume {:verifier.code 0} true;
  $i15 := $zext.i1.i32($i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11820, 58} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i32($i15, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11820, 25} true;
  assume {:verifier.code 0} true;
  $i17 := $xor.i1($i16, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11820, 15} true;
  assume {:verifier.code 0} true;
  $i18 := $zext.i1.i8($i17);
  // WARNING: %21 = zext i1 %20 to i8, !dbg !8355, !verifier.code !8334
  call {:cexpr "link_active"} boogie_si_record_i8($i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11821, 15} true;
  assume {:verifier.code 0} true;
  $i19 := $ne.i32($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11821, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11821, 41} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p0, 2608);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11821, 41} true;
  assume {:verifier.code 0} true;
  $i21 := $load.i64($M.0, $p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11821, 70} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i64($M.0, jiffies);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11821, 52} true;
  assume {:verifier.code 0} true;
  $i23 := $sub.i64($i21, $i22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11821, 79} true;
  assume {:verifier.code 0} true;
  $i24 := $add.i64($i23, 2500);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11821, 89} true;
  assume {:verifier.code 0} true;
  $i25 := $slt.i64($i24, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11821, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb8, $bb9;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11821, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i19 == 1));
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  goto $bb10;
$bb8:
  assume ($i25 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11822, 30} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p0, 256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11822, 5} true;
  assume {:verifier.code 0} true;
  call $i27 := schedule_work($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11823, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11821, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i25 == 1));
  goto $bb7;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11826, 11} true;
  assume {:verifier.code 0} true;
  $i28 := $trunc.i8.i1($i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11826, 3} true;
  assume {:verifier.code 0} true;
  $i5 := $i28;
  goto $bb3;
}
const igbvf_print_link_info: ref;
axiom (igbvf_print_link_info == $sub.ref(0, 373603));
procedure  igbvf_print_link_info($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11798, 51} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11798, 51} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11798, 58} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11799, 28} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 950);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11799, 28} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i16($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11799, 13} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i16.i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11799, 64} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, 952);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11799, 64} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i16($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11799, 40} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i16.i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11799, 76} true;
  assume {:verifier.code 0} true;
  $i10 := $eq.i32($i9, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11799, 40} true;
  assume {:verifier.code 0} true;
  havoc $p11;
  assume ((($i10 == 1) ==> ($p11 == .str.39)) && (($i10 != 1) ==> ($p11 == .str.40)));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11798, 3} true;
  assume {:verifier.code 0} true;
  call $i12 := _dev_info.ref.ref.i32.ref($p3, .str.38, $i6, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11800, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const netif_carrier_on: ref;
axiom (netif_carrier_on == $sub.ref(0, 374635));
procedure  netif_carrier_on($p0: ref);
const schedule_work: ref;
axiom (schedule_work == $sub.ref(0, 375667));
procedure  schedule_work($p0: ref)
  returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8407, 20} true;
  assume {:verifier.code 0} true;
  $p1 := $load.ref($M.0, system_wq);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8407, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := queue_work($p1, $p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8407, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i8($i2);
  // WARNING: %4 = zext i1 %3 to i8, !dbg !8338, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i8($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8408, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.i8.i1($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8408, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const round_jiffies: ref;
axiom (round_jiffies == $sub.ref(0, 376699));
procedure  round_jiffies($i0: i64)
  returns ($r: i64);
const ldv_mod_timer_53: ref;
axiom (ldv_mod_timer_53 == $sub.ref(0, 377731));
procedure  ldv_mod_timer_53($p0: ref, $i1: i64)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.timer_list* %0, i64 0, metadata !14336, metadata !8330), !dbg !14337, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14577, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := mod_timer($p0, $i1);
  // WARNING: %3 = call i32 @mod_timer(%struct.timer_list* %0, i64 %1), !dbg !8337, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !14342, metadata !8330), !dbg !14343, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14579, 3} true;
  assume {:verifier.code 0} true;
  call activate_pending_timer_4($p0, $i1, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14580, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const queue_work: ref;
axiom (queue_work == $sub.ref(0, 378763));
procedure  queue_work($p0: ref, $p1: ref)
  returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8398, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := queue_work_on(8192, $p0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8398, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i8($i2);
  // WARNING: %4 = zext i1 %3 to i8, !dbg !8339, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i8($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8399, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.i8.i1($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8399, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const queue_work_on: ref;
axiom (queue_work_on == $sub.ref(0, 379795));
procedure  queue_work_on($i0: i32, $p1: ref, $p2: ref)
  returns ($r: i1);
const eth_random_addr: ref;
axiom (eth_random_addr == $sub.ref(0, 380827));
procedure  eth_random_addr($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9684, 3} true;
  assume {:verifier.code 0} true;
  call get_random_bytes($p0, 6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9685, 26} true;
  assume {:verifier.code 0} true;
  $i1 := $load.i8($M.0, $p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9685, 11} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i8.i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9685, 32} true;
  assume {:verifier.code 0} true;
  $i3 := $and.i32($i2, 254);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9685, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.i32.i8($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9685, 9} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p0, $i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9686, 32} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i8($M.0, $p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9686, 17} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i8.i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9686, 38} true;
  assume {:verifier.code 0} true;
  $i7 := $or.i32($i6, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9686, 11} true;
  assume {:verifier.code 0} true;
  $i8 := $trunc.i32.i8($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9686, 9} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p0, $i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9687, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const get_random_bytes: ref;
axiom (get_random_bytes == $sub.ref(0, 381859));
procedure  get_random_bytes($p0: ref, $i1: i32);
const igbvf_set_interrupt_capability: ref;
axiom (igbvf_set_interrupt_capability == $sub.ref(0, 382891));
procedure  igbvf_set_interrupt_capability($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.igbvf_adapter* %0, i64 0, metadata !14381, metadata !8330), !dbg !14382, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10826, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := kcalloc(3, 8, 208);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10827, 27} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10827, 12} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10827, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p3, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10828, 32} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10828, 32} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10828, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10828, 45} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i64($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10828, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10835, 9} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  $i16 := $sub.i32(0, 12);
  goto $bb7;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10836, 7} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10832, 15} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10832, 15} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10832, 50} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p9, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10832, 56} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p10, 0);
  // WARNING: store i16 0, i16* %13, align 4, !dbg !8355, !verifier.code !8334
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10836, 7} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10832, 15} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10832, 15} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.0, $p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10832, 28} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p23, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10832, 50} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($add.ref($p23, 8), 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10832, 56} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p25, 1);
  // WARNING: store i16 1, i16* %35, align 4, !dbg !8355, !verifier.code !8334
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10836, 7} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10840, 42} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10840, 42} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10840, 57} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10840, 57} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10840, 11} true;
  assume {:verifier.code 0} true;
  call $i15 := pci_enable_msix_range($p12, $p14, 3, 3);
  // WARNING: %20 = call i32 @pci_enable_msix_range(%struct.pci_dev* %17, %struct.msix_entry* %19, i32 3, i32 3), !dbg !8361, !verifier.code !8334
  call {:cexpr "err"} boogie_si_record_i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10841, 3} true;
  assume {:verifier.code 0} true;
  $i16 := $i15;
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10844, 11} true;
  assume {:verifier.code 0} true;
  $i17 := $slt.i32($i16, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10844, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i17 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10845, 51} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10845, 51} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10845, 58} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p19, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10845, 5} true;
  assume {:verifier.code 0} true;
  call $i21 := dev_err.ref.ref($p20, .str.34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10846, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_reset_interrupt_capability($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10847, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10850, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10832, 15} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p0, 2544);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10832, 15} true;
  assume {:verifier.code 0} true;
  $p27 := $load.ref($M.0, $p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10832, 28} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p27, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10832, 50} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($add.ref($p27, 16), 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10832, 56} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p29, 2);
  // WARNING: store i16 2, i16* %40, align 4, !dbg !8355, !verifier.code !8334
  assume {:verifier.code 0} true;
  goto $bb6;
}
const igbvf_alloc_queues: ref;
axiom (igbvf_alloc_queues == $sub.ref(0, 383923));
procedure  igbvf_alloc_queues($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i10: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10933, 21} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10933, 21} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10934, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := kzalloc(304, 208);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10935, 22} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10935, 12} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10935, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p5, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10936, 32} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10936, 32} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10936, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $p2i.ref.i64($p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10936, 40} true;
  assume {:verifier.code 0} true;
  $i9 := $eq.i64($i8, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10936, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10937, 5} true;
  assume {:verifier.code 0} true;
  $i10 := $sub.i32(0, 12);
  goto $bb3;
$bb2:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10952, 1} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10941, 13} true;
  assume {:verifier.code 0} true;
  call $p11 := kzalloc(304, 208);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10942, 22} true;
  assume {:verifier.code 0} true;
  $p12 := $bitcast.ref.ref($p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10942, 12} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10942, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p13, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10943, 32} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10943, 32} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10943, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $p2i.ref.i64($p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10943, 40} true;
  assume {:verifier.code 0} true;
  $i17 := $eq.i64($i16, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10943, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i17 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10944, 36} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10944, 36} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10944, 11} true;
  assume {:verifier.code 0} true;
  $p20 := $bitcast.ref.ref($p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10944, 5} true;
  assume {:verifier.code 0} true;
  call kfree($p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10945, 5} true;
  assume {:verifier.code 0} true;
  $i10 := $sub.i32(0, 12);
  goto $bb3;
$bb6:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10949, 38} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10949, 38} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10949, 48} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p22, 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10949, 3} true;
  assume {:verifier.code 0} true;
  call netif_napi_add($p2, $p23, igbvf_poll, 64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10950, 3} true;
  assume {:verifier.code 0} true;
  $i10 := 0;
  goto $bb3;
}
const spinlock_check: ref;
axiom (spinlock_check == $sub.ref(0, 384955));
procedure  spinlock_check($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8375, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8375, 28} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8375, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const __raw_spin_lock_init: ref;
axiom (__raw_spin_lock_init == $sub.ref(0, 385987));
procedure  __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
const kzalloc: ref;
axiom (kzalloc == $sub.ref(0, 387019));
procedure  kzalloc($i0: i64, $i1: i32)
  returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !14476, metadata !8330), !dbg !14477, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8482, 29} true;
  assume {:verifier.code 0} true;
  $i2 := $or.i32($i1, 32768);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8482, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := kmalloc($i0, $i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8483, 3} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const igbvf_poll: ref;
axiom (igbvf_poll == $sub.ref(0, 388051));
procedure  igbvf_poll($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata %struct.napi_struct* %0, i64 0, metadata !14487, metadata !8330), !dbg !14488, !verifier.code !8332
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11038, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11038, 41} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 48), 304));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11039, 22} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p3, $mul.ref($sub.ref(0, 48), 304));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11039, 22} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11040, 19} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p6, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11041, 13} true;
  assume {:verifier.code 0} true;
  $M.31 := $store.i32($M.31, $p2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11042, 3} true;
  assume {:verifier.code 0} true;
  call $i8 := igbvf_clean_rx_irq($p6, $p2, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11043, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i32($M.31, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11043, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $slt.i32($i9, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11043, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11044, 5} true;
  assume {:verifier.code 0} true;
  call napi_complete($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11045, 19} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p6, 1040);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11045, 19} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i32($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11045, 33} true;
  assume {:verifier.code 0} true;
  $i13 := $and.i32($i12, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11045, 39} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i32($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11045, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb3:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11046, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_set_itr($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11047, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11050, 79} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p6, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11050, 11} true;
  assume {:verifier.code 0} true;
  call $i16 := constant_test_bit(2, $p15);
  // WARNING: %21 = call i32 @constant_test_bit(i64 2, i64* %20), !dbg !8367, !verifier.code !8329
  call {:cexpr "tmp"} boogie_si_record_i32($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11051, 13} true;
  assume {:verifier.code 0} true;
  $i17 := $eq.i32($i16, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11051, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i17 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11052, 24} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p6, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11052, 24} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11052, 34} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p19, 256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11052, 34} true;
  assume {:verifier.code 0} true;
  $i21 := $load.i32($M.0, $p20);
  $p22 := $add.ref($add.ref($p6, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11052, 69} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.0, $p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11052, 77} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p23, 5412);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11052, 7} true;
  assume {:verifier.code 0} true;
  call writel($i21, $p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11053, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11056, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11059, 11} true;
  assume {:verifier.code 0} true;
  $i25 := $load.i32($M.31, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11059, 3} true;
  assume {:verifier.code 0} true;
  $r := $i25;
  $exn := false;
  return;
}
const netif_napi_add: ref;
axiom (netif_napi_add == $sub.ref(0, 389083));
procedure  netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32);
const igbvf_clean_rx_irq: ref;
axiom (igbvf_clean_rx_irq == $sub.ref(0, 390115));
procedure  igbvf_clean_rx_irq($p0: ref, $p1: ref, $i2: i32)
  returns ($r: i1)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i16;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $i83: i32;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $p96: ref;
  var $i97: i32;
  var $i98: i64;
  var $p99: ref;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i32;
  var $p152: ref;
  var $i153: i32;
  var $p154: ref;
  var $i155: i32;
  var $i156: i1;
  var $i157: i32;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i64;
  var $p167: ref;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i64;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $i183: i32;
  var $i184: i32;
  var $i185: i32;
  var $i186: i16;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i16;
  var $i192: i32;
  var $i193: i16;
  var $i178: i32;
  var $i179: i32;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $i197: i1;
  var $i198: i32;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i32;
  var $i203: i32;
  var $i204: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i8;
  var $i205: i8;
  var $i206: i32;
  var $i207: i32;
  var $i208: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i209: i16;
  var $p210: ref;
  var $i211: i32;
  var $i212: i1;
  var $p213: ref;
  var $i214: i32;
  var $i215: i32;
  var $p216: ref;
  var $p217: ref;
  var $i218: i32;
  var $i219: i32;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $i223: i64;
  var $i224: i64;
  var $i225: i64;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $i230: i64;
  var $i231: i64;
  var $i232: i64;
  var $p233: ref;
  var $p234: ref;
  var $i235: i1;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32* %1, i64 0, metadata !14544, metadata !8330), !dbg !14545, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9969, 22} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9969, 22} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9970, 21} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 1176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9970, 21} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9971, 19} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9971, 19} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.0, $p7);
  // WARNING: call void @llvm.dbg.value(metadata %struct.pci_dev* %9, i64 0, metadata !14556, metadata !8330), !dbg !14557, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i8 0, i64 0, metadata !14558, metadata !8330), !dbg !14559, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14560, metadata !8330), !dbg !14561, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14562, metadata !8330), !dbg !14563, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9976, 31} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p4, 34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9976, 31} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i16($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9976, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $zext.i16.i32($i10);
  // WARNING: %12 = zext i16 %11 to i32, !dbg !8358, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9977, 25} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p4, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9977, 25} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.0, $p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9977, 32} true;
  assume {:verifier.code 0} true;
  $i14 := $zext.i32.i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9977, 30} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p13, $mul.ref($i14, 16));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9977, 52} true;
  assume {:verifier.code 0} true;
  $p16 := $bitcast.ref.ref($p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9978, 22} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9978, 25} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p17, 8);
  $p19 := $add.ref($p17, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9978, 31} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i32($M.0, $p19);
  // WARNING: %21 = load i32, i32* %20, align 8, !dbg !8370, !verifier.code !8334
  call {:cexpr "staterr"} boogie_si_record_i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10083, 21} true;
  assume {:verifier.code 0} true;
  $i21 := $and.i32($i20, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10083, 21} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.i32($i21, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10083, 7} true;
  assume {:verifier.code 0} true;
  $i23, $i24, $i25, $i26 := 0, 0, 0, $i11;
  assume {:branchcond $i22} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i22 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10083, 7} true;
  assume {:verifier.code 0} true;
  $i27, $i28, $i29, $i30, $i31, $p32, $i33 := $i20, $i11, 0, 0, 0, $p15, 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10083, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i22 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb4:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10084, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9981, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $load.i32($M.31, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9981, 18} true;
  assume {:verifier.code 0} true;
  $i35 := $sge.i32($i34, $i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9981, 7} true;
  assume {:verifier.code 0} true;
  $i36, $i37, $i38, $i39 := $i33, $i30, $i29, $i28;
  assume {:branchcond $i35} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i35 == 1);
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9982, 5} true;
  assume {:verifier.code 0} true;
  $i40, $i41, $i42, $i43 := $i36, $i37, $i38, $i39;
  goto $bb8;
$bb7:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10089, 28} true;
  assume {:verifier.code 0} true;
  $i209 := $trunc.i32.i16($i43);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10089, 12} true;
  assume {:verifier.code 0} true;
  $p210 := $add.ref($p4, 34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10089, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p210, $i209);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10090, 19} true;
  assume {:verifier.code 0} true;
  call $i211 := igbvf_desc_unused($p4);
  // WARNING: %224 = call i32 @igbvf_desc_unused(%struct.igbvf_ring* %5), !dbg !8595, !verifier.code !8334
  call {:cexpr "cleaned_count"} boogie_si_record_i32($i211);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10091, 21} true;
  assume {:verifier.code 0} true;
  $i212 := $ne.i32($i211, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10091, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i212} true;
  goto $bb45, $bb46;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9986, 16} true;
  assume {:verifier.code 0} true;
  $i44 := $load.i32($M.31, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9986, 27} true;
  assume {:verifier.code 0} true;
  $i45 := $add.i32($i44, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9986, 14} true;
  assume {:verifier.code 0} true;
  $M.31 := $store.i32($M.31, $p1, $i45);
  call devirtbounce.5(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9988, 26} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p4, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9988, 26} true;
  assume {:verifier.code 0} true;
  $p47 := $load.ref($M.0, $p46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9988, 40} true;
  assume {:verifier.code 0} true;
  $i48 := $zext.i32.i64($i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9988, 38} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($p47, $mul.ref($i48, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9989, 33} true;
  assume {:verifier.code 0} true;
  $p50 := $bitcast.ref.ref($p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9989, 36} true;
  assume {:verifier.code 0} true;
  $p51 := $p50;
  $p52 := $p50;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9989, 51} true;
  assume {:verifier.code 0} true;
  $p53 := $bitcast.ref.ref($p52);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9989, 58} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($p53, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9989, 58} true;
  assume {:verifier.code 0} true;
  $i55 := $load.i16($M.0, $p54);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9989, 18} true;
  assume {:verifier.code 0} true;
  $i56 := $zext.i16.i32($i55);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9989, 67} true;
  assume {:verifier.code 0} true;
  $i57 := $and.i32($i56, 32736);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9989, 76} true;
  assume {:verifier.code 0} true;
  $i58 := $ashr.i32($i57, 5);
  // WARNING: %44 = ashr i32 %43, 5, !dbg !8396, !verifier.code !8334
  call {:cexpr "hlen"} boogie_si_record_i32($i58);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9990, 16} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($p0, 1160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9990, 16} true;
  assume {:verifier.code 0} true;
  $i60 := $load.i32($M.0, $p59);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9990, 31} true;
  assume {:verifier.code 0} true;
  $i61 := $ult.i32($i60, $i58);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9990, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i61} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i61 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9991, 21} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($p0, 1160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9991, 21} true;
  assume {:verifier.code 0} true;
  $i63 := $load.i32($M.0, $p62);
  // WARNING: %50 = load i32, i32* %49, align 8, !dbg !8403, !verifier.code !8334
  call {:cexpr "hlen"} boogie_si_record_i32($i63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9992, 3} true;
  assume {:verifier.code 0} true;
  $i64 := $i63;
  goto $bb12;
$bb11:
  assume !(($i61 == 1));
  assume {:verifier.code 0} true;
  $i64 := $i58;
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9995, 27} true;
  assume {:verifier.code 0} true;
  $p65 := $bitcast.ref.ref($p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9995, 30} true;
  assume {:verifier.code 0} true;
  $p66 := $add.ref($p65, 8);
  $p67 := $add.ref($add.ref($p65, 8), 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9995, 36} true;
  assume {:verifier.code 0} true;
  $i68 := $load.i16($M.0, $p67);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9995, 12} true;
  assume {:verifier.code 0} true;
  $i69 := $zext.i16.i32($i68);
  // WARNING: %57 = zext i16 %56 to i32, !dbg !8409, !verifier.code !8334
  call {:cexpr "length"} boogie_si_record_i32($i69);
  // WARNING: call void @llvm.dbg.value(metadata i32 %57, i64 0, metadata !14618, metadata !8330), !dbg !14619, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9997, 33} true;
  assume {:verifier.code 0} true;
  $i70 := $add.i32($i31, 1);
  // WARNING: %58 = add nsw i32 %.1821, 1, !dbg !8412, !verifier.code !8334
  call {:cexpr "cleaned_count"} boogie_si_record_i32($i70);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9998, 22} true;
  assume {:verifier.code 0} true;
  $p71 := $add.ref($add.ref($p47, $mul.ref($i48, 40)), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9998, 22} true;
  assume {:verifier.code 0} true;
  $p72 := $load.ref($M.0, $p71);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9999, 43} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($p72, 216);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9999, 43} true;
  assume {:verifier.code 0} true;
  $p74 := $load.ref($M.0, $p73);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9999, 3} true;
  assume {:verifier.code 0} true;
  call llvm.prefetch($p74, 0, 3, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10000, 16} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($add.ref($p47, $mul.ref($i48, 40)), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10000, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p75, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10001, 16} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($p0, 1160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10001, 16} true;
  assume {:verifier.code 0} true;
  $i77 := $load.i32($M.0, $p76);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10001, 31} true;
  assume {:verifier.code 0} true;
  $i78 := $eq.i32($i77, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10001, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i78} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i78 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10002, 36} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($p8, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10002, 54} true;
  assume {:verifier.code 0} true;
  $p80 := $add.ref($p47, $mul.ref($i48, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10002, 54} true;
  assume {:verifier.code 0} true;
  $i81 := $load.i64($M.0, $p80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10002, 77} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($p0, 940);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10002, 77} true;
  assume {:verifier.code 0} true;
  $i83 := $load.i32($M.0, $p82);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10002, 59} true;
  assume {:verifier.code 0} true;
  $i84 := $zext.i32.i64($i83);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10002, 5} true;
  assume {:verifier.code 0} true;
  call dma_unmap_single_attrs($p79, $i81, $i84, 2, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10004, 18} true;
  assume {:verifier.code 0} true;
  $p85 := $add.ref($p47, $mul.ref($i48, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10004, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p85, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10005, 5} true;
  assume {:verifier.code 0} true;
  call $p86 := skb_put($p72, $i69);
  assume $isExternal($p86);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10006, 5} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume !(($i78 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10042, 9} true;
  assume {:verifier.code 0} true;
  $i153 := $add.i32($i28, 1);
  // WARNING: %157 = add i32 %.124, 1, !dbg !8521, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i153);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10043, 16} true;
  assume {:verifier.code 0} true;
  $p154 := $add.ref($p4, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10043, 16} true;
  assume {:verifier.code 0} true;
  $i155 := $load.i32($M.0, $p154);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10043, 22} true;
  assume {:verifier.code 0} true;
  $i156 := $eq.i32($i155, $i153);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10043, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i156} true;
  goto $bb29, $bb30;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10010, 9} true;
  assume {:verifier.code 0} true;
  call $p87 := skb_end_pointer($p72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10011, 55} true;
  assume {:verifier.code 0} true;
  $p88 := $bitcast.ref.ref($p87);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10011, 55} true;
  assume {:verifier.code 0} true;
  $p89 := $p88;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10011, 55} true;
  assume {:verifier.code 0} true;
  $i90 := $load.i8($M.0, $p89);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10011, 7} true;
  assume {:verifier.code 0} true;
  $i91 := $zext.i8.i32($i90);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10011, 64} true;
  assume {:verifier.code 0} true;
  $i92 := $eq.i32($i91, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10011, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i92} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i92 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10012, 36} true;
  assume {:verifier.code 0} true;
  $p93 := $add.ref($p8, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10012, 54} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($p47, $mul.ref($i48, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10012, 54} true;
  assume {:verifier.code 0} true;
  $i95 := $load.i64($M.0, $p94);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10012, 77} true;
  assume {:verifier.code 0} true;
  $p96 := $add.ref($p0, 1160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10012, 77} true;
  assume {:verifier.code 0} true;
  $i97 := $load.i32($M.0, $p96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10012, 59} true;
  assume {:verifier.code 0} true;
  $i98 := $zext.i32.i64($i97);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10012, 5} true;
  assume {:verifier.code 0} true;
  call dma_unmap_single_attrs($p93, $i95, $i98, 2, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10014, 5} true;
  assume {:verifier.code 0} true;
  call $p99 := skb_put($p72, $i64);
  assume $isExternal($p99);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10015, 3} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb18:
  assume !(($i92 == 1));
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10018, 14} true;
  assume {:verifier.code 0} true;
  $i100 := $ne.i32($i69, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10018, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i100} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i100 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10019, 28} true;
  assume {:verifier.code 0} true;
  $p101 := $add.ref($p8, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10019, 46} true;
  assume {:verifier.code 0} true;
  $p102 := $add.ref($add.ref($p47, $mul.ref($i48, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10019, 56} true;
  assume {:verifier.code 0} true;
  $p103 := $bitcast.ref.ref($p102);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10019, 66} true;
  assume {:verifier.code 0} true;
  $p104 := $add.ref($p103, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10019, 66} true;
  assume {:verifier.code 0} true;
  $i105 := $load.i64($M.0, $p104);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10019, 5} true;
  assume {:verifier.code 0} true;
  call dma_unmap_page($p101, $i105, 2048, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10021, 18} true;
  assume {:verifier.code 0} true;
  $p106 := $add.ref($add.ref($p47, $mul.ref($i48, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10021, 28} true;
  assume {:verifier.code 0} true;
  $p107 := $bitcast.ref.ref($p106);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10021, 38} true;
  assume {:verifier.code 0} true;
  $p108 := $add.ref($p107, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10021, 47} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p108, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10022, 15} true;
  assume {:verifier.code 0} true;
  call $p109 := skb_end_pointer($p72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10023, 72} true;
  assume {:verifier.code 0} true;
  $p110 := $bitcast.ref.ref($p109);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10023, 72} true;
  assume {:verifier.code 0} true;
  $p111 := $p110;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10023, 72} true;
  assume {:verifier.code 0} true;
  $i112 := $load.i8($M.0, $p111);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10023, 29} true;
  assume {:verifier.code 0} true;
  $i113 := $zext.i8.i32($i112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10023, 95} true;
  assume {:verifier.code 0} true;
  $p114 := $add.ref($add.ref($p47, $mul.ref($i48, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10023, 105} true;
  assume {:verifier.code 0} true;
  $p115 := $bitcast.ref.ref($p114);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10023, 115} true;
  assume {:verifier.code 0} true;
  $p116 := $p115;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10023, 115} true;
  assume {:verifier.code 0} true;
  $p117 := $load.ref($M.0, $p116);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10024, 43} true;
  assume {:verifier.code 0} true;
  $p118 := $add.ref($add.ref($p47, $mul.ref($i48, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10024, 53} true;
  assume {:verifier.code 0} true;
  $p119 := $bitcast.ref.ref($p118);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10024, 63} true;
  assume {:verifier.code 0} true;
  $p120 := $add.ref($p119, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10024, 63} true;
  assume {:verifier.code 0} true;
  $i121 := $load.i32($M.0, $p120);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10023, 5} true;
  assume {:verifier.code 0} true;
  call skb_fill_page_desc($p72, $i113, $p117, $i121, $i69);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10025, 18} true;
  assume {:verifier.code 0} true;
  $p122 := $add.ref($p0, 940);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10025, 18} true;
  assume {:verifier.code 0} true;
  $i123 := $load.i32($M.0, $p122);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10025, 32} true;
  assume {:verifier.code 0} true;
  $i124 := $ugt.i32($i123, 2048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10025, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i124} true;
  goto $bb22, $bb23;
$bb21:
  assume !(($i100 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb22:
  assume ($i124 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10026, 20} true;
  assume {:verifier.code 0} true;
  $p125 := $add.ref($add.ref($p47, $mul.ref($i48, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10026, 30} true;
  assume {:verifier.code 0} true;
  $p126 := $bitcast.ref.ref($p125);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10026, 40} true;
  assume {:verifier.code 0} true;
  $p127 := $p126;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10026, 45} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p127, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10027, 5} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb23:
  assume !(($i124 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10028, 41} true;
  assume {:verifier.code 0} true;
  $p128 := $add.ref($add.ref($p47, $mul.ref($i48, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10028, 51} true;
  assume {:verifier.code 0} true;
  $p129 := $bitcast.ref.ref($p128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10028, 61} true;
  assume {:verifier.code 0} true;
  $p130 := $p129;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10028, 61} true;
  assume {:verifier.code 0} true;
  $p131 := $load.ref($M.0, $p130);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10028, 17} true;
  assume {:verifier.code 0} true;
  call $i132 := page_count($p131);
  // WARNING: %129 = call i32 @page_count(%struct.page* %128), !dbg !8489, !verifier.code !8334
  call {:cexpr "tmp___1"} boogie_si_record_i32($i132);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10029, 19} true;
  assume {:verifier.code 0} true;
  $i133 := $ne.i32($i132, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10029, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i133} true;
  goto $bb25, $bb26;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10035, 21} true;
  assume {:verifier.code 0} true;
  $p141 := $add.ref($p72, 104);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10035, 21} true;
  assume {:verifier.code 0} true;
  $i142 := $load.i32($M.0, $p141);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10035, 25} true;
  assume {:verifier.code 0} true;
  $i143 := $add.i32($i142, $i69);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10035, 10} true;
  assume {:verifier.code 0} true;
  $p144 := $add.ref($p72, 104);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10035, 14} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p144, $i143);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10036, 26} true;
  assume {:verifier.code 0} true;
  $p145 := $add.ref($p72, 108);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10036, 26} true;
  assume {:verifier.code 0} true;
  $i146 := $load.i32($M.0, $p145);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10036, 35} true;
  assume {:verifier.code 0} true;
  $i147 := $add.i32($i146, $i69);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10036, 10} true;
  assume {:verifier.code 0} true;
  $p148 := $add.ref($p72, 108);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10036, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p148, $i147);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10037, 26} true;
  assume {:verifier.code 0} true;
  $p149 := $add.ref($p72, 224);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10037, 26} true;
  assume {:verifier.code 0} true;
  $i150 := $load.i32($M.0, $p149);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10037, 35} true;
  assume {:verifier.code 0} true;
  $i151 := $add.i32($i150, 2048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10037, 10} true;
  assume {:verifier.code 0} true;
  $p152 := $add.ref($p72, 224);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10037, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p152, $i151);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10038, 3} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb25:
  assume ($i133 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10030, 22} true;
  assume {:verifier.code 0} true;
  $p134 := $add.ref($add.ref($p47, $mul.ref($i48, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10030, 32} true;
  assume {:verifier.code 0} true;
  $p135 := $bitcast.ref.ref($p134);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10030, 42} true;
  assume {:verifier.code 0} true;
  $p136 := $p135;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10030, 47} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p136, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10031, 7} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb26:
  assume !(($i133 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10032, 31} true;
  assume {:verifier.code 0} true;
  $p137 := $add.ref($add.ref($p47, $mul.ref($i48, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10032, 41} true;
  assume {:verifier.code 0} true;
  $p138 := $bitcast.ref.ref($p137);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10032, 51} true;
  assume {:verifier.code 0} true;
  $p139 := $p138;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10032, 51} true;
  assume {:verifier.code 0} true;
  $p140 := $load.ref($M.0, $p139);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10032, 9} true;
  assume {:verifier.code 0} true;
  call get_page($p140);
  assume {:verifier.code 0} true;
  goto $bb27;
$bb27:
  assume {:verifier.code 0} true;
  goto $bb24;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10018, 17} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb29:
  assume ($i156 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10045, 3} true;
  assume {:verifier.code 0} true;
  $i157 := 0;
  goto $bb31;
$bb30:
  assume !(($i156 == 1));
  assume {:verifier.code 0} true;
  $i157 := $i153;
  goto $bb31;
$bb31:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10048, 26} true;
  assume {:verifier.code 0} true;
  $p158 := $add.ref($p4, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10048, 26} true;
  assume {:verifier.code 0} true;
  $p159 := $load.ref($M.0, $p158);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10048, 33} true;
  assume {:verifier.code 0} true;
  $i160 := $zext.i32.i64($i157);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10048, 31} true;
  assume {:verifier.code 0} true;
  $p161 := $add.ref($p159, $mul.ref($i160, 16));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10048, 53} true;
  assume {:verifier.code 0} true;
  $p162 := $bitcast.ref.ref($p161);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10049, 22} true;
  assume {:verifier.code 0} true;
  $p163 := $bitcast.ref.ref($p162);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10049, 3} true;
  assume {:verifier.code 0} true;
  call llvm.prefetch($p163, 0, 3, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10050, 26} true;
  assume {:verifier.code 0} true;
  $p164 := $add.ref($p4, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10050, 26} true;
  assume {:verifier.code 0} true;
  $p165 := $load.ref($M.0, $p164);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10050, 40} true;
  assume {:verifier.code 0} true;
  $i166 := $zext.i32.i64($i157);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10050, 38} true;
  assume {:verifier.code 0} true;
  $p167 := $add.ref($p165, $mul.ref($i166, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10051, 16} true;
  assume {:verifier.code 0} true;
  $i168 := $and.i32($i27, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10051, 22} true;
  assume {:verifier.code 0} true;
  $i169 := $eq.i32($i168, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10051, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i169} true;
  goto $bb32, $bb33;
$bb32:
  assume ($i169 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10052, 37} true;
  assume {:verifier.code 0} true;
  $p170 := $add.ref($add.ref($p165, $mul.ref($i166, 40)), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10052, 37} true;
  assume {:verifier.code 0} true;
  $p171 := $load.ref($M.0, $p170);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10052, 18} true;
  assume {:verifier.code 0} true;
  $p172 := $add.ref($add.ref($p47, $mul.ref($i48, 40)), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10052, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p172, $p171);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10053, 37} true;
  assume {:verifier.code 0} true;
  $p173 := $add.ref($p165, $mul.ref($i166, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10053, 37} true;
  assume {:verifier.code 0} true;
  $i174 := $load.i64($M.0, $p173);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10053, 18} true;
  assume {:verifier.code 0} true;
  $p175 := $add.ref($p47, $mul.ref($i48, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10053, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p175, $i174);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10054, 18} true;
  assume {:verifier.code 0} true;
  $p176 := $add.ref($add.ref($p165, $mul.ref($i166, 40)), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10054, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p176, $p72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10055, 18} true;
  assume {:verifier.code 0} true;
  $p177 := $add.ref($p165, $mul.ref($i166, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10055, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p177, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10056, 5} true;
  assume {:verifier.code 0} true;
  $i178, $i179 := $i30, $i29;
  goto $bb34;
$bb33:
  assume !(($i169 == 1));
  assume {:verifier.code 0} true;
  goto $bb35;
$bb34:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10072, 12} true;
  assume {:verifier.code 0} true;
  $p194 := $bitcast.ref.ref($p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10072, 15} true;
  assume {:verifier.code 0} true;
  $p195 := $add.ref($p194, 8);
  $p196 := $add.ref($p194, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10072, 34} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p196, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10073, 21} true;
  assume {:verifier.code 0} true;
  $i197 := $sgt.i32($i70, 15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10073, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i197} true;
  goto $bb39, $bb40;
$bb35:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10060, 16} true;
  assume {:verifier.code 0} true;
  $i180 := $and.i32($i27, $sub.i32(0, 1761607680));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10060, 31} true;
  assume {:verifier.code 0} true;
  $i181 := $ne.i32($i180, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10060, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i181} true;
  goto $bb36, $bb37;
$bb36:
  assume ($i181 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10061, 5} true;
  assume {:verifier.code 0} true;
  call dev_kfree_skb_irq($p72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10062, 5} true;
  assume {:verifier.code 0} true;
  $i178, $i179 := $i30, $i29;
  goto $bb34;
$bb37:
  assume !(($i181 == 1));
  assume {:verifier.code 0} true;
  goto $bb38;
$bb38:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10066, 22} true;
  assume {:verifier.code 0} true;
  $p182 := $add.ref($p72, 104);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10066, 22} true;
  assume {:verifier.code 0} true;
  $i183 := $load.i32($M.0, $p182);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10066, 26} true;
  assume {:verifier.code 0} true;
  $i184 := $add.i32($i183, $i30);
  // WARNING: %194 = add i32 %193, %.1622, !dbg !8565, !verifier.code !8334
  call {:cexpr "total_bytes"} boogie_si_record_i32($i184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10067, 33} true;
  assume {:verifier.code 0} true;
  $i185 := $add.i32($i29, 1);
  // WARNING: %195 = add i32 %.1423, 1, !dbg !8566, !verifier.code !8334
  call {:cexpr "total_packets"} boogie_si_record_i32($i185);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10068, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_rx_checksum_adv($p0, $i27, $p72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10069, 19} true;
  assume {:verifier.code 0} true;
  call $i186 := eth_type_trans($p72, $p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10069, 8} true;
  assume {:verifier.code 0} true;
  $p187 := $add.ref($p72, 126);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10069, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p187, $i186);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10070, 67} true;
  assume {:verifier.code 0} true;
  $p188 := $bitcast.ref.ref($p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10070, 70} true;
  assume {:verifier.code 0} true;
  $p189 := $add.ref($p188, 8);
  $p190 := $add.ref($add.ref($p188, 8), 6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10070, 76} true;
  assume {:verifier.code 0} true;
  $i191 := $load.i16($M.0, $p190);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10070, 52} true;
  assume {:verifier.code 0} true;
  $i192 := $zext.i16.i32($i191);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10070, 52} true;
  assume {:verifier.code 0} true;
  $i193 := $trunc.i32.i16($i192);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10070, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_receive_skb($p0, $p6, $p72, $i27, $i193);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10070, 3} true;
  assume {:verifier.code 0} true;
  $i178, $i179 := $i184, $i185;
  goto $bb34;
$bb39:
  assume ($i197 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10074, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_alloc_rx_buffers($p4, $i70);
  // WARNING: call void @igbvf_alloc_rx_buffers(%struct.igbvf_ring* %5, i32 %58), !dbg !8582, !verifier.code !8334
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10076, 3} true;
  assume {:verifier.code 0} true;
  $i198 := 0;
  goto $bb41;
$bb40:
  assume !(($i197 == 1));
  assume {:verifier.code 0} true;
  $i198 := $i70;
  goto $bb41;
$bb41:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10081, 22} true;
  assume {:verifier.code 0} true;
  $p199 := $bitcast.ref.ref($p162);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10081, 25} true;
  assume {:verifier.code 0} true;
  $p200 := $add.ref($p199, 8);
  $p201 := $add.ref($p199, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10081, 31} true;
  assume {:verifier.code 0} true;
  $i202 := $load.i32($M.0, $p201);
  // WARNING: %215 = load i32, i32* %214, align 8, !dbg !8587, !verifier.code !8334
  call {:cexpr "staterr"} boogie_si_record_i32($i202);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10083, 21} true;
  assume {:verifier.code 0} true;
  $i203 := $and.i32($i202, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10083, 21} true;
  assume {:verifier.code 0} true;
  $i204 := $ne.i32($i203, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10083, 7} true;
  assume {:verifier.code 0} true;
  $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i205, $i206, $i207, $i208 := $i202, $i157, $i179, $i178, $i198, $p161, 1, 1, $i178, $i179, $i157;
  assume {:branchcond $i204} true;
  goto $bb42, $bb43;
$bb42:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10083, 7} true;
  assume {:verifier.code 0} true;
  assume ($i204 == 1);
  goto $bb4;
$bb43:
  assume !(($i204 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10083, 7} true;
  assume {:verifier.code 0} true;
  $i23, $i24, $i25, $i26 := $i205, $i206, $i207, $i208;
  goto $bb3;
$bb44:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10083, 23} true;
  assume {:verifier.code 0} true;
  $i40, $i41, $i42, $i43 := $i23, $i24, $i25, $i26;
  goto $bb8;
$bb45:
  assume ($i212 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10092, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_alloc_rx_buffers($p4, $i211);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10093, 3} true;
  assume {:verifier.code 0} true;
  goto $bb47;
$bb46:
  assume !(($i212 == 1));
  assume {:verifier.code 0} true;
  goto $bb47;
$bb47:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10096, 40} true;
  assume {:verifier.code 0} true;
  $p213 := $add.ref($p0, 1084);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10096, 40} true;
  assume {:verifier.code 0} true;
  $i214 := $load.i32($M.0, $p213);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10096, 57} true;
  assume {:verifier.code 0} true;
  $i215 := $add.i32($i214, $i42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10096, 12} true;
  assume {:verifier.code 0} true;
  $p216 := $add.ref($p0, 1084);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10096, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p216, $i215);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10097, 38} true;
  assume {:verifier.code 0} true;
  $p217 := $add.ref($p0, 1080);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10097, 38} true;
  assume {:verifier.code 0} true;
  $i218 := $load.i32($M.0, $p217);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10097, 53} true;
  assume {:verifier.code 0} true;
  $i219 := $add.i32($i218, $i41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10097, 12} true;
  assume {:verifier.code 0} true;
  $p220 := $add.ref($p0, 1080);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10097, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p220, $i219);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10098, 42} true;
  assume {:verifier.code 0} true;
  $p221 := $add.ref($p0, 1192);
  $p222 := $add.ref($add.ref($p0, 1192), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10098, 52} true;
  assume {:verifier.code 0} true;
  $i223 := $load.i64($M.0, $p222);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10098, 63} true;
  assume {:verifier.code 0} true;
  $i224 := $zext.i32.i64($i41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10098, 61} true;
  assume {:verifier.code 0} true;
  $i225 := $add.i64($i223, $i224);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10098, 12} true;
  assume {:verifier.code 0} true;
  $p226 := $add.ref($p0, 1192);
  $p227 := $add.ref($add.ref($p0, 1192), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10098, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p227, $i225);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10099, 44} true;
  assume {:verifier.code 0} true;
  $p228 := $add.ref($p0, 1192);
  $p229 := $add.ref($p0, 1192);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10099, 54} true;
  assume {:verifier.code 0} true;
  $i230 := $load.i64($M.0, $p229);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10099, 67} true;
  assume {:verifier.code 0} true;
  $i231 := $zext.i32.i64($i42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10099, 65} true;
  assume {:verifier.code 0} true;
  $i232 := $add.i64($i230, $i231);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10099, 12} true;
  assume {:verifier.code 0} true;
  $p233 := $add.ref($p0, 1192);
  $p234 := $add.ref($p0, 1192);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10099, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p234, $i232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10100, 11} true;
  assume {:verifier.code 0} true;
  $i235 := $trunc.i8.i1($i40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10100, 3} true;
  assume {:verifier.code 0} true;
  $r := $i235;
  $exn := false;
  return;
}
const napi_complete: ref;
axiom (napi_complete == $sub.ref(0, 391147));
procedure  napi_complete($p0: ref);
const igbvf_set_itr: ref;
axiom (igbvf_set_itr == $sub.ref(0, 392179));
procedure  igbvf_set_itr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10446, 92} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10446, 92} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10446, 102} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 260);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10446, 102} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10447, 67} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 1076);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10447, 67} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10448, 67} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, 1072);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10448, 67} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10446, 35} true;
  assume {:verifier.code 0} true;
  call $i9 := igbvf_update_itr($p0, $i4, $i6, $i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10446, 13} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10446, 13} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10446, 23} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p11, 264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10446, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p12, $i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10449, 16} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p0, 1040);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10449, 16} true;
  assume {:verifier.code 0} true;
  $i14 := $load.i32($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10449, 30} true;
  assume {:verifier.code 0} true;
  $i15 := $eq.i32($i14, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10449, 36} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i15 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10449, 64} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10449, 64} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10449, 74} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p17, 264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10449, 74} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i32($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10449, 84} true;
  assume {:verifier.code 0} true;
  $i20 := $eq.i32($i19, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10449, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10449, 36} true;
  assume {:verifier.code 0} true;
  assume !(($i15 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb6;
$bb4:
  assume ($i20 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10450, 15} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10450, 15} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10450, 25} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p22, 264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10450, 35} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p23, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10451, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10449, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i20 == 1));
  goto $bb3;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10454, 38} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10454, 38} true;
  assume {:verifier.code 0} true;
  $p25 := $load.ref($M.0, $p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10454, 48} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p25, 264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10454, 48} true;
  assume {:verifier.code 0} true;
  $i27 := $load.i32($M.0, $p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10454, 9} true;
  assume {:verifier.code 0} true;
  call $i28 := igbvf_range_to_itr($i27);
  // WARNING: %33 = call i32 @igbvf_range_to_itr(i32 %32), !dbg !8360, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i28);
  // WARNING: call void @llvm.dbg.value(metadata i32 %33, i64 0, metadata !14861, metadata !8330), !dbg !14862, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10456, 17} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10456, 17} true;
  assume {:verifier.code 0} true;
  $p30 := $load.ref($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10456, 27} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p30, 260);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10456, 27} true;
  assume {:verifier.code 0} true;
  $i32 := $load.i32($M.0, $p31);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10456, 35} true;
  assume {:verifier.code 0} true;
  $i33 := $ne.i32($i32, $i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10456, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i33} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i33 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10457, 29} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10457, 29} true;
  assume {:verifier.code 0} true;
  $p35 := $load.ref($M.0, $p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10457, 39} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p35, 260);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10457, 39} true;
  assume {:verifier.code 0} true;
  $i37 := $load.i32($M.0, $p36);
  // WARNING: %43 = load i32, i32* %42, align 4, !dbg !8372, !verifier.code !8334
  call {:cexpr "current_itr"} boogie_si_record_i32($i37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10458, 17} true;
  assume {:verifier.code 0} true;
  $i38 := $ugt.i32($i28, $i37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10458, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb9, $bb10;
$bb8:
  assume !(($i33 == 1));
  assume {:verifier.code 0} true;
  goto $bb15;
$bb9:
  assume ($i38 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10459, 24} true;
  assume {:verifier.code 0} true;
  $i39 := $lshr.i32($i28, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10459, 30} true;
  assume {:verifier.code 0} true;
  $i40 := $add.i32($i39, $i37);
  // WARNING: %47 = add i32 %46, %43, !dbg !8380, !verifier.code !8334
  call {:cexpr "_min1"} boogie_si_record_i32($i40);
  // WARNING: call void @llvm.dbg.value(metadata i32 %47, i64 0, metadata !14881, metadata !8330), !dbg !14882, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10461, 23} true;
  assume {:verifier.code 0} true;
  $i41 := $ult.i32($i40, $i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10461, 17} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb11, $bb12;
$bb10:
  assume !(($i38 == 1));
  assume {:verifier.code 0} true;
  $i43 := $i28;
  goto $bb14;
$bb11:
  assume ($i41 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10461, 17} true;
  assume {:verifier.code 0} true;
  $i42 := $i40;
  goto $bb13;
$bb12:
  assume !(($i41 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10461, 17} true;
  assume {:verifier.code 0} true;
  $i42 := $i28;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10461, 17} true;
  assume {:verifier.code 0} true;
  // WARNING: %52 = phi i32 [ %47, %49 ], [ %33, %50 ], !dbg !8391, !verifier.code !8334
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10462, 5} true;
  assume {:verifier.code 0} true;
  $i43 := $i42;
  goto $bb14;
$bb14:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10465, 15} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10465, 15} true;
  assume {:verifier.code 0} true;
  $p45 := $load.ref($M.0, $p44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10465, 25} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p45, 260);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10465, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p46, $i43);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10466, 15} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($p0, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10466, 15} true;
  assume {:verifier.code 0} true;
  $p48 := $load.ref($M.0, $p47);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10466, 25} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($p48, 272);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10466, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p49, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10467, 3} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10470, 92} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10470, 92} true;
  assume {:verifier.code 0} true;
  $p51 := $load.ref($M.0, $p50);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10470, 102} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($p51, 260);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10470, 102} true;
  assume {:verifier.code 0} true;
  $i53 := $load.i32($M.0, $p52);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10471, 67} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($p0, 1084);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10471, 67} true;
  assume {:verifier.code 0} true;
  $i55 := $load.i32($M.0, $p54);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10472, 67} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($p0, 1080);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10472, 67} true;
  assume {:verifier.code 0} true;
  $i57 := $load.i32($M.0, $p56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10470, 35} true;
  assume {:verifier.code 0} true;
  call $i58 := igbvf_update_itr($p0, $i53, $i55, $i57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10470, 13} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10470, 13} true;
  assume {:verifier.code 0} true;
  $p60 := $load.ref($M.0, $p59);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10470, 23} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($p60, 264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10470, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p61, $i58);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10473, 16} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($p0, 1040);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10473, 16} true;
  assume {:verifier.code 0} true;
  $i63 := $load.i32($M.0, $p62);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10473, 30} true;
  assume {:verifier.code 0} true;
  $i64 := $eq.i32($i63, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10473, 36} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i64} true;
  goto $bb16, $bb17;
$bb16:
  assume ($i64 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10473, 64} true;
  assume {:verifier.code 0} true;
  $p65 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10473, 64} true;
  assume {:verifier.code 0} true;
  $p66 := $load.ref($M.0, $p65);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10473, 74} true;
  assume {:verifier.code 0} true;
  $p67 := $add.ref($p66, 264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10473, 74} true;
  assume {:verifier.code 0} true;
  $i68 := $load.i32($M.0, $p67);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10473, 84} true;
  assume {:verifier.code 0} true;
  $i69 := $eq.i32($i68, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10473, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i69} true;
  goto $bb19, $bb20;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10473, 36} true;
  assume {:verifier.code 0} true;
  assume !(($i64 == 1));
  goto $bb18;
$bb18:
  assume {:verifier.code 0} true;
  goto $bb21;
$bb19:
  assume ($i69 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10474, 15} true;
  assume {:verifier.code 0} true;
  $p70 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10474, 15} true;
  assume {:verifier.code 0} true;
  $p71 := $load.ref($M.0, $p70);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10474, 25} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($p71, 264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10474, 35} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p72, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10475, 3} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10473, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i69 == 1));
  goto $bb18;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10478, 42} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10478, 42} true;
  assume {:verifier.code 0} true;
  $p74 := $load.ref($M.0, $p73);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10478, 52} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($p74, 264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10478, 52} true;
  assume {:verifier.code 0} true;
  $i76 := $load.i32($M.0, $p75);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10478, 13} true;
  assume {:verifier.code 0} true;
  call $i77 := igbvf_range_to_itr($i76);
  // WARNING: %94 = call i32 @igbvf_range_to_itr(i32 %93), !dbg !8425, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i32($i77);
  // WARNING: call void @llvm.dbg.value(metadata i32 %94, i64 0, metadata !14926, metadata !8330), !dbg !14927, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10480, 17} true;
  assume {:verifier.code 0} true;
  $p78 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10480, 17} true;
  assume {:verifier.code 0} true;
  $p79 := $load.ref($M.0, $p78);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10480, 27} true;
  assume {:verifier.code 0} true;
  $p80 := $add.ref($p79, 260);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10480, 27} true;
  assume {:verifier.code 0} true;
  $i81 := $load.i32($M.0, $p80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10480, 35} true;
  assume {:verifier.code 0} true;
  $i82 := $ne.i32($i81, $i77);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10480, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i82} true;
  goto $bb22, $bb23;
$bb22:
  assume ($i82 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10481, 33} true;
  assume {:verifier.code 0} true;
  $p83 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10481, 33} true;
  assume {:verifier.code 0} true;
  $p84 := $load.ref($M.0, $p83);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10481, 43} true;
  assume {:verifier.code 0} true;
  $p85 := $add.ref($p84, 260);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10481, 43} true;
  assume {:verifier.code 0} true;
  $i86 := $load.i32($M.0, $p85);
  // WARNING: %104 = load i32, i32* %103, align 4, !dbg !8435, !verifier.code !8334
  call {:cexpr "current_itr___0"} boogie_si_record_i32($i86);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10482, 17} true;
  assume {:verifier.code 0} true;
  $i87 := $ugt.i32($i77, $i86);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10482, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i87} true;
  goto $bb24, $bb25;
$bb23:
  assume !(($i82 == 1));
  assume {:verifier.code 0} true;
  goto $bb30;
$bb24:
  assume ($i87 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10483, 28} true;
  assume {:verifier.code 0} true;
  $i88 := $lshr.i32($i77, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10483, 34} true;
  assume {:verifier.code 0} true;
  $i89 := $add.i32($i88, $i86);
  // WARNING: %108 = add i32 %107, %104, !dbg !8443, !verifier.code !8334
  call {:cexpr "_min1___0"} boogie_si_record_i32($i89);
  // WARNING: call void @llvm.dbg.value(metadata i32 %108, i64 0, metadata !14944, metadata !8330), !dbg !14945, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10485, 27} true;
  assume {:verifier.code 0} true;
  $i90 := $ult.i32($i89, $i77);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10485, 17} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i90} true;
  goto $bb26, $bb27;
$bb25:
  assume !(($i87 == 1));
  assume {:verifier.code 0} true;
  $i92 := $i77;
  goto $bb29;
$bb26:
  assume ($i90 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10485, 17} true;
  assume {:verifier.code 0} true;
  $i91 := $i89;
  goto $bb28;
$bb27:
  assume !(($i90 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10485, 17} true;
  assume {:verifier.code 0} true;
  $i91 := $i77;
  goto $bb28;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10485, 17} true;
  assume {:verifier.code 0} true;
  // WARNING: %113 = phi i32 [ %108, %110 ], [ %94, %111 ], !dbg !8454, !verifier.code !8334
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10486, 5} true;
  assume {:verifier.code 0} true;
  $i92 := $i91;
  goto $bb29;
$bb29:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10489, 15} true;
  assume {:verifier.code 0} true;
  $p93 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10489, 15} true;
  assume {:verifier.code 0} true;
  $p94 := $load.ref($M.0, $p93);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10489, 25} true;
  assume {:verifier.code 0} true;
  $p95 := $add.ref($p94, 260);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10489, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p95, $i92);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10490, 15} true;
  assume {:verifier.code 0} true;
  $p96 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10490, 15} true;
  assume {:verifier.code 0} true;
  $p97 := $load.ref($M.0, $p96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10490, 25} true;
  assume {:verifier.code 0} true;
  $p98 := $add.ref($p97, 272);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10490, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p98, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10491, 3} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10494, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_update_itr: ref;
axiom (igbvf_update_itr == $sub.ref(0, 393211));
procedure  igbvf_update_itr($p0: ref, $i1: i32, $i2: i32, $i3: i32)
  returns ($r: i32)
{
  var $i4: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i12: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i25: i1;
  var $i26: i32;
  var $i24: i32;
  var $i20: i32;
  var $i28: i32;
  var $i29: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i30: i32;
  var $i27: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i38: i1;
  var $i39: i32;
  var $i37: i32;
  var $i16: i32;
  var $i5: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.igbvf_adapter* %0, i64 0, metadata !14968, metadata !8330), !dbg !14969, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !14970, metadata !8330), !dbg !14971, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %2, i64 0, metadata !14972, metadata !8330), !dbg !14973, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !14974, metadata !8330), !dbg !14975, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10349, 15} true;
  assume {:verifier.code 0} true;
  $i4 := $eq.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10349, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10350, 5} true;
  assume {:verifier.code 0} true;
  $i5 := $i1;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10407, 3} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
$bb4:
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:verifier.code 0} true;
  $i6 := $slt.i32($i1, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i6 == 1);
  assume {:verifier.code 0} true;
  $i9 := $eq.i32($i1, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb13, $bb14;
$bb7:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  $i7 := $slt.i32($i1, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10366, 13} true;
  assume {:verifier.code 0} true;
  $i17 := $sgt.i32($i3, 10000);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10366, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb25, $bb26;
$bb9:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i1, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10389, 13} true;
  assume {:verifier.code 0} true;
  $i34 := $sgt.i32($i3, 25000);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10389, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb49, $bb50;
$bb11:
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  goto $bb58;
$bb13:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10356, 13} true;
  assume {:verifier.code 0} true;
  $i10 := $sdiv.i32($i3, $i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10356, 23} true;
  assume {:verifier.code 0} true;
  $i11 := $sgt.i32($i10, 8000);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10356, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb15, $bb16;
$bb14:
  assume {:verifier.code 0} true;
  assume !(($i9 == 1));
  goto $bb12;
$bb15:
  assume ($i11 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10358, 3} true;
  assume {:verifier.code 0} true;
  $i12 := 2;
  goto $bb17;
$bb16:
  assume !(($i11 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10359, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $sle.i32($i2, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10359, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb18, $bb19;
$bb17:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10364, 3} true;
  assume {:verifier.code 0} true;
  $i16 := $i12;
  goto $bb24;
$bb18:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10359, 29} true;
  assume {:verifier.code 0} true;
  $i14 := $sgt.i32($i3, 512);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10359, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb21, $bb22;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10359, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i13 == 1));
  goto $bb20;
$bb20:
  assume {:verifier.code 0} true;
  $i15 := $i1;
  goto $bb23;
$bb21:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10361, 3} true;
  assume {:verifier.code 0} true;
  $i15 := 1;
  goto $bb23;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10359, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i14 == 1));
  goto $bb20;
$bb23:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i12 := $i15;
  goto $bb17;
$bb24:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10404, 3} true;
  assume {:verifier.code 0} true;
  $i5 := $i16;
  goto $bb3;
$bb25:
  assume ($i17 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10367, 15} true;
  assume {:verifier.code 0} true;
  $i18 := $sdiv.i32($i3, $i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10367, 25} true;
  assume {:verifier.code 0} true;
  $i19 := $sgt.i32($i18, 8000);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10367, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb27, $bb28;
$bb26:
  assume !(($i17 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10379, 13} true;
  assume {:verifier.code 0} true;
  $i28 := $sdiv.i32($i3, $i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10379, 23} true;
  assume {:verifier.code 0} true;
  $i29 := $sgt.i32($i28, 2000);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10379, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb40, $bb41;
$bb27:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10369, 5} true;
  assume {:verifier.code 0} true;
  $i20 := 2;
  goto $bb29;
$bb28:
  assume !(($i19 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10370, 17} true;
  assume {:verifier.code 0} true;
  $i21 := $sle.i32($i2, 9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10370, 22} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb30, $bb32;
$bb29:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10378, 3} true;
  assume {:verifier.code 0} true;
  $i27 := $i20;
  goto $bb39;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10370, 22} true;
  assume {:verifier.code 0} true;
  assume ($i21 == 1);
  goto $bb31;
$bb31:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10372, 5} true;
  assume {:verifier.code 0} true;
  $i24 := 2;
  goto $bb35;
$bb32:
  assume !(($i21 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10370, 31} true;
  assume {:verifier.code 0} true;
  $i22 := $sdiv.i32($i3, $i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10370, 41} true;
  assume {:verifier.code 0} true;
  $i23 := $sgt.i32($i22, 1200);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10370, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i23} true;
  goto $bb33, $bb34;
$bb33:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10370, 9} true;
  assume {:verifier.code 0} true;
  assume ($i23 == 1);
  goto $bb31;
$bb34:
  assume !(($i23 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10373, 17} true;
  assume {:verifier.code 0} true;
  $i25 := $sgt.i32($i2, 35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10373, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb36, $bb37;
$bb35:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i20 := $i24;
  goto $bb29;
$bb36:
  assume ($i25 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10375, 5} true;
  assume {:verifier.code 0} true;
  $i26 := 0;
  goto $bb38;
$bb37:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  $i26 := $i1;
  goto $bb38;
$bb38:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i24 := $i26;
  goto $bb35;
$bb39:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10387, 3} true;
  assume {:verifier.code 0} true;
  $i16 := $i27;
  goto $bb24;
$bb40:
  assume ($i29 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10381, 3} true;
  assume {:verifier.code 0} true;
  $i30 := 2;
  goto $bb42;
$bb41:
  assume !(($i29 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10382, 15} true;
  assume {:verifier.code 0} true;
  $i31 := $sle.i32($i2, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10382, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb43, $bb44;
$bb42:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i27 := $i30;
  goto $bb39;
$bb43:
  assume ($i31 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10382, 29} true;
  assume {:verifier.code 0} true;
  $i32 := $sle.i32($i3, 511);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10382, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb46, $bb47;
$bb44:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10382, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i31 == 1));
  goto $bb45;
$bb45:
  assume {:verifier.code 0} true;
  $i33 := $i1;
  goto $bb48;
$bb46:
  assume ($i32 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10384, 3} true;
  assume {:verifier.code 0} true;
  $i33 := 0;
  goto $bb48;
$bb47:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10382, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i32 == 1));
  goto $bb45;
$bb48:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i30 := $i33;
  goto $bb42;
$bb49:
  assume ($i34 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10390, 17} true;
  assume {:verifier.code 0} true;
  $i35 := $sgt.i32($i2, 35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10390, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb51, $bb52;
$bb50:
  assume !(($i34 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10396, 13} true;
  assume {:verifier.code 0} true;
  $i38 := $sle.i32($i3, 5999);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10396, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb55, $bb56;
$bb51:
  assume ($i35 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10392, 5} true;
  assume {:verifier.code 0} true;
  $i36 := 1;
  goto $bb53;
$bb52:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  $i36 := $i1;
  goto $bb53;
$bb53:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10395, 3} true;
  assume {:verifier.code 0} true;
  $i37 := $i36;
  goto $bb54;
$bb54:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10401, 3} true;
  assume {:verifier.code 0} true;
  $i16 := $i37;
  goto $bb24;
$bb55:
  assume ($i38 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10398, 3} true;
  assume {:verifier.code 0} true;
  $i39 := 1;
  goto $bb57;
$bb56:
  assume !(($i38 == 1));
  assume {:verifier.code 0} true;
  $i39 := $i1;
  goto $bb57;
$bb57:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i37 := $i39;
  goto $bb54;
$bb58:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10403, 3} true;
  assume {:verifier.code 0} true;
  $i16 := $i1;
  goto $bb24;
}
const igbvf_range_to_itr: ref;
axiom (igbvf_range_to_itr == $sub.ref(0, 394243));
procedure  igbvf_range_to_itr($i0: i32)
  returns ($r: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
$bb0:
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  $i1 := $slt.i32($i0, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  $i4 := $eq.i32($i0, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb9, $bb10;
$bb3:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  $i2 := $slt.i32($i0, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10421, 3} true;
  assume {:verifier.code 0} true;
  $i5 := 196;
  goto $bb11;
$bb5:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i0, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10424, 3} true;
  assume {:verifier.code 0} true;
  $i5 := 980;
  goto $bb11;
$bb7:
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  goto $bb12;
$bb9:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10418, 3} true;
  assume {:verifier.code 0} true;
  $i5 := 56;
  goto $bb11;
$bb10:
  assume {:verifier.code 0} true;
  assume !(($i4 == 1));
  goto $bb8;
$bb11:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10430, 3} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 10427, 3} true;
  assume {:verifier.code 0} true;
  $i5 := 488;
  goto $bb11;
}
const llvm.prefetch: ref;
axiom (llvm.prefetch == $sub.ref(0, 395275));
procedure  llvm.prefetch($p0: ref, $i1: i32, $i2: i32, $i3: i32);
const skb_put: ref;
axiom (skb_put == $sub.ref(0, 396307));
procedure  skb_put($p0: ref, $i1: i32)
  returns ($r: ref);
const skb_fill_page_desc: ref;
axiom (skb_fill_page_desc == $sub.ref(0, 397339));
procedure  skb_fill_page_desc($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32)
{
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.sk_buff* %0, i64 0, metadata !15076, metadata !8330), !dbg !15077, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata %struct.page* %2, i64 0, metadata !15080, metadata !8330), !dbg !15081, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !15082, metadata !8330), !dbg !15083, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9058, 3} true;
  assume {:verifier.code 0} true;
  call __skb_fill_page_desc($p0, $i1, $p2, $i3, $i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9059, 9} true;
  assume {:verifier.code 0} true;
  call $p5 := skb_end_pointer($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9060, 63} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.i32.i8($i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9060, 47} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i8.i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9060, 82} true;
  assume {:verifier.code 0} true;
  $i8 := $add.i32($i7, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9060, 47} true;
  assume {:verifier.code 0} true;
  $i9 := $trunc.i32.i8($i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9060, 36} true;
  assume {:verifier.code 0} true;
  $p10 := $bitcast.ref.ref($p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9060, 36} true;
  assume {:verifier.code 0} true;
  $p11 := $p10;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9060, 45} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p11, $i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9061, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const page_count: ref;
axiom (page_count == $sub.ref(0, 398371));
procedure  page_count($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8591, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := compound_head($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8592, 53} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p1, 16);
  $p3 := $add.ref($add.ref($p1, 16), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8592, 73} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8592, 83} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p4, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8592, 13} true;
  assume {:verifier.code 0} true;
  call $i6 := atomic_read($p5);
  // WARNING: %7 = call i32 @atomic_read(%struct.__anonstruct_atomic_t_6* %6), !dbg !8340, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8593, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const get_page: ref;
axiom (get_page == $sub.ref(0, 399403));
procedure  get_page($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8607, 13} true;
  assume {:verifier.code 0} true;
  call $i1 := PageTail($p0);
  // WARNING: %2 = call i32 @PageTail(%struct.page* %0), !dbg !8333, !verifier.code !8332
  call {:cexpr "tmp___1"} boogie_si_record_i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8608, 41} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8608, 41} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8608, 33} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8608, 13} true;
  assume {:verifier.code 0} true;
  call $i5 := ldv__builtin_expect($i4, 0);
  // WARNING: %6 = call i64 @ldv__builtin_expect(i64 %5, i64 0), !dbg !8339, !verifier.code !8332
  call {:cexpr "tmp___2"} boogie_si_record_i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8609, 15} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i64($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8609, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8610, 11} true;
  assume {:verifier.code 0} true;
  call $i7 := __get_page_tail($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8610, 9} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.i1.i8($i7);
  // WARNING: %10 = zext i1 %9 to i8, !dbg !8347, !verifier.code !8332
  call {:cexpr "tmp"} boogie_si_record_i8($i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8611, 42} true;
  assume {:verifier.code 0} true;
  $i9 := $trunc.i8.i1($i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8611, 35} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i1.i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8611, 15} true;
  assume {:verifier.code 0} true;
  call $i11 := ldv__builtin_expect($i10, 1);
  // WARNING: %13 = call i64 @ldv__builtin_expect(i64 %12, i64 1), !dbg !8352, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8612, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i64($i11, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8612, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb3:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8613, 7} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8634, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8617, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8620, 54} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p0, 16);
  $p14 := $add.ref($add.ref($p0, 16), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8620, 74} true;
  assume {:verifier.code 0} true;
  $p15 := $bitcast.ref.ref($p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8620, 84} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p15, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8620, 13} true;
  assume {:verifier.code 0} true;
  call $i17 := atomic_read($p16);
  // WARNING: %24 = call i32 @atomic_read(%struct.__anonstruct_atomic_t_6* %23), !dbg !8364, !verifier.code !8332
  call {:cexpr "tmp___3"} boogie_si_record_i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8621, 41} true;
  assume {:verifier.code 0} true;
  $i18 := $sle.i32($i17, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8621, 41} true;
  assume {:verifier.code 0} true;
  $i19 := $zext.i1.i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8621, 33} true;
  assume {:verifier.code 0} true;
  $i20 := $sext.i32.i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8621, 13} true;
  assume {:verifier.code 0} true;
  call $i21 := ldv__builtin_expect($i20, 0);
  // WARNING: %28 = call i64 @ldv__builtin_expect(i64 %27, i64 0), !dbg !8369, !verifier.code !8332
  call {:cexpr "tmp___4"} boogie_si_record_i64($i21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8622, 15} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.i64($i21, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8622, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i22 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8623, 5} true;
  assume {:verifier.code 0} true;
  call dump_page($p0, .str.35);
  call devirtbounce.4(0, .str.36, 509, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8624, 5} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8627, 5} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8631, 22} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p0, 16);
  $p24 := $add.ref($add.ref($p0, 16), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8631, 42} true;
  assume {:verifier.code 0} true;
  $p25 := $bitcast.ref.ref($p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8631, 52} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p25, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8631, 3} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8632, 3} true;
  assume {:verifier.code 0} true;
  goto $bb5;
}
const dev_kfree_skb_irq: ref;
axiom (dev_kfree_skb_irq == $sub.ref(0, 400435));
procedure  dev_kfree_skb_irq($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9543, 3} true;
  assume {:verifier.code 0} true;
  call __dev_kfree_skb_irq($p0, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9544, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_rx_checksum_adv: ref;
axiom (igbvf_rx_checksum_adv == $sub.ref(0, 401467));
procedure  igbvf_rx_checksum_adv($p0: ref, $i1: i32, $p2: ref)
{
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i16;
  var $i19: i16;
  var $i20: i16;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.igbvf_adapter* %0, i64 0, metadata !15175, metadata !8330), !dbg !15176, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9807, 3} true;
  assume {:verifier.code 0} true;
  call skb_checksum_none_assert($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9808, 19} true;
  assume {:verifier.code 0} true;
  $i3 := $and.i32($i1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9808, 25} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9808, 31} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9808, 31} true;
  assume {:verifier.code 0} true;
  assume ($i4 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9809, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume !(($i4 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9808, 49} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 2600);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9808, 49} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9808, 55} true;
  assume {:verifier.code 0} true;
  $i7 := $and.i32($i6, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9808, 55} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9808, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9808, 7} true;
  assume {:verifier.code 0} true;
  assume ($i8 == 1);
  goto $bb2;
$bb5:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9827, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9813, 19} true;
  assume {:verifier.code 0} true;
  $i9 := $and.i32($i1, 1610612736);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9813, 34} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9813, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9814, 37} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p0, 1128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9814, 37} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i64($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9814, 49} true;
  assume {:verifier.code 0} true;
  $i13 := $add.i64($i12, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9814, 14} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p0, 1128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9814, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p14, $i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9815, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb9:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9819, 19} true;
  assume {:verifier.code 0} true;
  $i15 := $and.i32($i1, 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9819, 26} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i32($i15, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9819, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i16 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9820, 10} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p2, 124);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9820, 20} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i16($M.0, $p17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9820, 20} true;
  assume {:verifier.code 0} true;
  $i19 := $and.i16($i18, $sub.i16(0, 13));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9820, 20} true;
  assume {:verifier.code 0} true;
  $i20 := $or.i16($i19, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9820, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p17, $i20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9821, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9824, 36} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p0, 1136);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9824, 36} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i64($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9824, 49} true;
  assume {:verifier.code 0} true;
  $i23 := $add.i64($i22, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9824, 12} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p0, 1136);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9824, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p24, $i23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9825, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
}
const eth_type_trans: ref;
axiom (eth_type_trans == $sub.ref(0, 402499));
procedure  eth_type_trans($p0: ref, $p1: ref)
  returns ($r: i16);
const igbvf_receive_skb: ref;
axiom (igbvf_receive_skb == $sub.ref(0, 403531));
procedure  igbvf_receive_skb($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i16)
{
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i16;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i16;
  var $i19: i16;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i16;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.sk_buff* %2, i64 0, metadata !15224, metadata !8330), !dbg !15225, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !15226, metadata !8330), !dbg !15227, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9781, 15} true;
  assume {:verifier.code 0} true;
  $i5 := $and.i32($i3, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9781, 21} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9781, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9782, 19} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, 2600);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9782, 19} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9782, 25} true;
  assume {:verifier.code 0} true;
  $i9 := $and.i32($i8, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9782, 31} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9782, 37} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb3:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9782, 48} true;
  assume {:verifier.code 0} true;
  $i11 := $and.i32($i3, 262144);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9782, 59} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i32($i11, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9782, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb6, $bb7;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9782, 37} true;
  assume {:verifier.code 0} true;
  assume !(($i10 == 1));
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9786, 13} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i16.i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9786, 33} true;
  assume {:verifier.code 0} true;
  $i21 := $and.i32($i20, 4095);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9786, 13} true;
  assume {:verifier.code 0} true;
  $i22 := $trunc.i32.i16($i21);
  // WARNING: %26 = trunc i32 %25 to i16, !dbg !8368, !verifier.code !8334
  call {:cexpr "vid"} boogie_si_record_i16($i22);
  assume {:verifier.code 0} true;
  $i19 := $i22;
  goto $bb8;
$bb6:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9783, 23} true;
  assume {:verifier.code 0} true;
  $i13 := $zext.i16.i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9783, 23} true;
  assume {:verifier.code 0} true;
  $i14 := $trunc.i32.i16($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9783, 13} true;
  assume {:verifier.code 0} true;
  call $i15 := __fswab16($i14);
  // WARNING: %19 = call zeroext i16 @__fswab16(i16 zeroext %18), !dbg !8360, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i16($i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9784, 13} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i16.i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9784, 32} true;
  assume {:verifier.code 0} true;
  $i17 := $and.i32($i16, 4095);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9784, 13} true;
  assume {:verifier.code 0} true;
  $i18 := $trunc.i32.i16($i17);
  // WARNING: %22 = trunc i32 %21 to i16, !dbg !8363, !verifier.code !8334
  call {:cexpr "vid"} boogie_si_record_i16($i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9785, 5} true;
  assume {:verifier.code 0} true;
  $i19 := $i18;
  goto $bb8;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9782, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i12 == 1));
  goto $bb5;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9788, 33} true;
  assume {:verifier.code 0} true;
  $i23 := $zext.i16.i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9788, 91} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p0, 424);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9788, 45} true;
  assume {:verifier.code 0} true;
  $p25 := $bitcast.ref.ref($p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9788, 15} true;
  assume {:verifier.code 0} true;
  call $i26 := variable_test_bit($i23, $p25);
  // WARNING: %31 = call i32 @variable_test_bit(i64 %28, i64* %30), !dbg !8374, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i32($i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9789, 17} true;
  assume {:verifier.code 0} true;
  $i27 := $ne.i32($i26, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9789, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i27 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9790, 40} true;
  assume {:verifier.code 0} true;
  $i28 := $zext.i16.i32($i19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9790, 40} true;
  assume {:verifier.code 0} true;
  $i29 := $trunc.i32.i16($i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9790, 7} true;
  assume {:verifier.code 0} true;
  call $p30 := __vlan_hwaccel_put_tag($p2, 129, $i29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9791, 5} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume !(($i27 == 1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9794, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9797, 32} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p0, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9797, 32} true;
  assume {:verifier.code 0} true;
  $p32 := $load.ref($M.0, $p31);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9797, 42} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p32, 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9797, 3} true;
  assume {:verifier.code 0} true;
  call $i34 := napi_gro_receive($p33, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9798, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __fswab16: ref;
axiom (__fswab16 == $sub.ref(0, 404563));
procedure  __fswab16($i0: i16)
  returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8288, 36} true;
  assume {:verifier.code 0} true;
  $i1 := $zext.i16.i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8288, 46} true;
  assume {:verifier.code 0} true;
  $i2 := $shl.i32($i1, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8288, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i32.i16($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8288, 20} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i16.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8288, 71} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i16.i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8288, 81} true;
  assume {:verifier.code 0} true;
  $i6 := $ashr.i32($i5, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8288, 62} true;
  assume {:verifier.code 0} true;
  $i7 := $trunc.i32.i16($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8288, 55} true;
  assume {:verifier.code 0} true;
  $i8 := $sext.i16.i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8288, 53} true;
  assume {:verifier.code 0} true;
  $i9 := $or.i32($i4, $i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8288, 11} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.i32.i16($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8288, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const variable_test_bit: ref;
axiom (variable_test_bit == $sub.ref(0, 405595));
procedure  variable_test_bit($i0: i64, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  call $i2 := devirtbounce.19(0, $p1, $i0);
  // WARNING: %3 = call i32 @devirtbounce.19(i32 (i64*, i64)* asm sideeffect "bt $2,$1\0A\09sbb $0,$0", "=r,*m,Ir,~{dirflag},~{fpsr},~{flags}", i64* %1, i64 %0)
  call {:cexpr "oldbit"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8278, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const __vlan_hwaccel_put_tag: ref;
axiom (__vlan_hwaccel_put_tag == $sub.ref(0, 406627));
procedure  __vlan_hwaccel_put_tag($p0: ref, $i1: i16, $i2: i16)
  returns ($r: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $p7: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.sk_buff* %0, i64 0, metadata !15305, metadata !8330), !dbg !15306, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i16 %1, i64 0, metadata !15307, metadata !8330), !dbg !15308, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9715, 8} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9715, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p3, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9716, 28} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i16.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9716, 52} true;
  assume {:verifier.code 0} true;
  $i5 := $or.i32($i4, 4096);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9716, 19} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.i32.i16($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9716, 8} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, 162);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9716, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p7, $i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9717, 3} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const napi_gro_receive: ref;
axiom (napi_gro_receive == $sub.ref(0, 407659));
procedure  napi_gro_receive($p0: ref, $p1: ref)
  returns ($r: i32);
const skb_checksum_none_assert: ref;
axiom (skb_checksum_none_assert == $sub.ref(0, 408691));
procedure  skb_checksum_none_assert($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9210, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __dev_kfree_skb_irq: ref;
axiom (__dev_kfree_skb_irq == $sub.ref(0, 409723));
procedure  __dev_kfree_skb_irq($p0: ref, $i1: i32);
const PageTail: ref;
axiom (PageTail == $sub.ref(0, 410755));
procedure  PageTail($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8544, 75} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8544, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := constant_test_bit(15, $p1);
  // WARNING: %3 = call i32 @constant_test_bit(i64 15, i64* %2), !dbg !8337, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8545, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const __get_page_tail: ref;
axiom (__get_page_tail == $sub.ref(0, 411787));
procedure  __get_page_tail($p0: ref)
  returns ($r: i1);
const atomic_read: ref;
axiom (atomic_read == $sub.ref(0, 412819));
procedure  atomic_read($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8355, 43} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8355, 17} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i32($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8355, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const dump_page: ref;
axiom (dump_page == $sub.ref(0, 413851));
procedure  dump_page($p0: ref, $p1: ref);
const atomic_inc: ref;
axiom (atomic_inc == $sub.ref(0, 414883));
procedure  atomic_inc($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8363, 129} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  call devirtbounce.20(0, $p1, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8364, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const compound_head: ref;
axiom (compound_head == $sub.ref(0, 415915));
procedure  compound_head($p0: ref)
  returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8574, 13} true;
  assume {:verifier.code 0} true;
  call $i1 := PageTail($p0);
  // WARNING: %2 = call i32 @PageTail(%struct.page* %0), !dbg !8335, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8575, 41} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8575, 41} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8575, 33} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8575, 13} true;
  assume {:verifier.code 0} true;
  call $i5 := ldv__builtin_expect($i4, 0);
  // WARNING: %6 = call i64 @ldv__builtin_expect(i64 %5, i64 0), !dbg !8341, !verifier.code !8334
  call {:cexpr "tmp___1"} boogie_si_record_i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8576, 15} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i64($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8576, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8577, 11} true;
  assume {:verifier.code 0} true;
  call $p7 := compound_head_by_tail($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8578, 5} true;
  assume {:verifier.code 0} true;
  $p8 := $p7;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8584, 1} true;
  assume {:verifier.code 0} true;
  $r := $p8;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8582, 3} true;
  assume {:verifier.code 0} true;
  $p8 := $p0;
  goto $bb3;
}
const compound_head_by_tail: ref;
axiom (compound_head_by_tail == $sub.ref(0, 416947));
procedure  compound_head_by_tail($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8555, 16} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8555, 26} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8555, 26} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  call devirtbounce.5(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8557, 9} true;
  assume {:verifier.code 0} true;
  call $i4 := PageTail($p0);
  // WARNING: %5 = call i32 @PageTail(%struct.page* %0), !dbg !8340, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8558, 37} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8558, 37} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8558, 33} true;
  assume {:verifier.code 0} true;
  $i7 := $sext.i32.i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8558, 13} true;
  assume {:verifier.code 0} true;
  call $i8 := ldv__builtin_expect($i7, 1);
  // WARNING: %9 = call i64 @ldv__builtin_expect(i64 %8, i64 1), !dbg !8345, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i64($i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8559, 15} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i64($i8, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8559, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8560, 5} true;
  assume {:verifier.code 0} true;
  $p10 := $p3;
  goto $bb3;
$bb2:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8566, 1} true;
  assume {:verifier.code 0} true;
  $r := $p10;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8564, 3} true;
  assume {:verifier.code 0} true;
  $p10 := $p0;
  goto $bb3;
}
const __skb_fill_page_desc: ref;
axiom (__skb_fill_page_desc == $sub.ref(0, 417979));
procedure  __skb_fill_page_desc($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i16;
  var $i27: i16;
  var $i28: i16;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.sk_buff* %0, i64 0, metadata !15404, metadata !8330), !dbg !15405, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata %struct.page* %2, i64 0, metadata !15408, metadata !8330), !dbg !15409, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !15410, metadata !8330), !dbg !15411, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9038, 9} true;
  assume {:verifier.code 0} true;
  call $p5 := skb_end_pointer($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9039, 60} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9039, 60} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p6, 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9039, 10} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9039, 69} true;
  assume {:verifier.code 0} true;
  $i9 := $sext.i32.i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9039, 67} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p8, $mul.ref($i9, 16));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9040, 9} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p8, $mul.ref($i9, 16));
  $p12 := $add.ref($p8, $mul.ref($i9, 16));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9040, 16} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p12, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9041, 9} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p8, $mul.ref($i9, 16)), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9041, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p13, $i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9042, 3} true;
  assume {:verifier.code 0} true;
  call skb_frag_size_set($p10, $i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9043, 10} true;
  assume {:verifier.code 0} true;
  call $p14 := compound_head($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9044, 19} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p14, 16);
  $p16 := $add.ref($p14, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9044, 39} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9044, 39} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i8($M.0, $p17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9044, 39} true;
  assume {:verifier.code 0} true;
  $i19 := $trunc.i8.i1($i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9044, 50} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9044, 75} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p14, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9044, 85} true;
  assume {:verifier.code 0} true;
  $p21 := $bitcast.ref.ref($p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9044, 85} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9044, 53} true;
  assume {:verifier.code 0} true;
  $i23 := $p2i.ref.i64($p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9044, 93} true;
  assume {:verifier.code 0} true;
  $i24 := $eq.i64($i23, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9044, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9044, 50} true;
  assume {:verifier.code 0} true;
  assume !(($i19 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb6;
$bb4:
  assume ($i24 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9045, 10} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p0, 170);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9045, 21} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i16($M.0, $p25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9045, 21} true;
  assume {:verifier.code 0} true;
  $i27 := $and.i16($i26, $sub.i16(0, 5));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9045, 21} true;
  assume {:verifier.code 0} true;
  $i28 := $or.i16($i27, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9045, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p25, $i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9046, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9044, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i24 == 1));
  goto $bb3;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9049, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const skb_frag_size_set: ref;
axiom (skb_frag_size_set == $sub.ref(0, 419011));
procedure  skb_frag_size_set($p0: ref, $i1: i32)
{
  var $p2: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.skb_frag_struct* %0, i64 0, metadata !15448, metadata !8330), !dbg !15449, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8987, 9} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8987, 14} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p2, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8988, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const kmalloc: ref;
axiom (kmalloc == $sub.ref(0, 420043));
procedure  kmalloc($i0: i64, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !15457, metadata !8330), !dbg !15458, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8450, 13} true;
  assume {:verifier.code 0} true;
  call $p2 := __kmalloc($i0, $i1);
  assume $isExternal($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8451, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const kcalloc: ref;
axiom (kcalloc == $sub.ref(0, 421075));
procedure  kcalloc($i0: i64, $i1: i64, $i2: i32)
  returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !15467, metadata !8330), !dbg !15468, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i64 %1, i64 0, metadata !15469, metadata !8330), !dbg !15470, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8473, 38} true;
  assume {:verifier.code 0} true;
  $i3 := $or.i32($i2, 32768);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8473, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := kmalloc_array($i0, $i1, $i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8474, 3} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const pci_enable_msix_range: ref;
axiom (pci_enable_msix_range == $sub.ref(0, 422107));
procedure  pci_enable_msix_range($p0: ref, $p1: ref, $i2: i32, $i3: i32)
  returns ($r: i32);
const ioremap_nocache: ref;
axiom (ioremap_nocache == $sub.ref(0, 423139));
procedure  ioremap_nocache($i0: i64, $i1: i64)
  returns ($r: ref);
const dev_set_drvdata: ref;
axiom (dev_set_drvdata == $sub.ref(0, 424171));
procedure  dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8533, 8} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 520);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8533, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p2, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8534, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const dma_set_mask: ref;
axiom (dma_set_mask == $sub.ref(0, 425203));
procedure  dma_set_mask($p0: ref, $i1: i64)
  returns ($r: i32);
const dma_set_coherent_mask: ref;
axiom (dma_set_coherent_mask == $sub.ref(0, 426235));
procedure  dma_set_coherent_mask($p0: ref, $i1: i64)
  returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i4: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.device* %0, i64 0, metadata !15491, metadata !8330), !dbg !15492, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8948, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := dma_supported($p0, $i1);
  // WARNING: %3 = call i32 @dma_supported(%struct.device* %0, i64 %1), !dbg !8335, !verifier.code !8332
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8949, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8949, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8950, 5} true;
  assume {:verifier.code 0} true;
  $i4 := $sub.i32(0, 5);
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8957, 1} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8954, 8} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 1168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8954, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p5, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8955, 3} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb3;
}
const dma_supported: ref;
axiom (dma_supported == $sub.ref(0, 427267));
procedure  dma_supported($p0: ref, $i1: i64)
  returns ($r: i32);
const igbvf_io_error_detected: ref;
axiom (igbvf_io_error_detected == $sub.ref(0, 428299));
procedure  igbvf_io_error_detected($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i7: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.pci_dev* %0, i64 0, metadata !15511, metadata !8330), !dbg !15512, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12687, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := pci_get_drvdata($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12688, 12} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12689, 13} true;
  assume {:verifier.code 0} true;
  call $p4 := netdev_priv($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12690, 13} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12691, 3} true;
  assume {:verifier.code 0} true;
  call netif_device_detach($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12692, 13} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i32($i1, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12692, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12693, 5} true;
  assume {:verifier.code 0} true;
  $i7 := 4;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12706, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12697, 13} true;
  assume {:verifier.code 0} true;
  call $i8 := netif_running($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12697, 11} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i1.i8($i8);
  // WARNING: %12 = zext i1 %11 to i8, !dbg !8357, !verifier.code !8334
  call {:cexpr "tmp___1"} boogie_si_record_i8($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12698, 13} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.i8.i1($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12698, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12699, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_down($p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12700, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12703, 3} true;
  assume {:verifier.code 0} true;
  call pci_disable_device($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12704, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 3;
  goto $bb3;
}
const igbvf_io_slot_reset: ref;
axiom (igbvf_io_slot_reset == $sub.ref(0, 429331));
procedure  igbvf_io_slot_reset($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12716, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := pci_get_drvdata($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12717, 12} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12718, 13} true;
  assume {:verifier.code 0} true;
  call $p3 := netdev_priv($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12719, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12720, 13} true;
  assume {:verifier.code 0} true;
  call $i5 := pci_enable_device_mem($p0);
  // WARNING: %6 = call i32 @pci_enable_device_mem(%struct.pci_dev* %0), !dbg !8346, !verifier.code !8332
  call {:cexpr "tmp___1"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12721, 15} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12721, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12722, 47} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12722, 5} true;
  assume {:verifier.code 0} true;
  call $i8 := dev_err.ref.ref($p7, .str.11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12723, 5} true;
  assume {:verifier.code 0} true;
  $i9 := 4;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12731, 1} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12727, 3} true;
  assume {:verifier.code 0} true;
  call pci_set_master($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12728, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_reset($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12729, 3} true;
  assume {:verifier.code 0} true;
  $i9 := 5;
  goto $bb3;
}
const igbvf_io_resume: ref;
axiom (igbvf_io_resume == $sub.ref(0, 430363));
procedure  igbvf_io_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12742, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := pci_get_drvdata($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12743, 12} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12744, 13} true;
  assume {:verifier.code 0} true;
  call $p3 := netdev_priv($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12745, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12746, 13} true;
  assume {:verifier.code 0} true;
  call $i5 := netif_running($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12746, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i8($i5);
  // WARNING: %7 = zext i1 %6 to i8, !dbg !8347, !verifier.code !8332
  call {:cexpr "tmp___2"} boogie_si_record_i8($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12747, 13} true;
  assume {:verifier.code 0} true;
  $i7 := $trunc.i8.i1($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12747, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12748, 15} true;
  assume {:verifier.code 0} true;
  call $i8 := igbvf_up($p4);
  // WARNING: %10 = call i32 @igbvf_up(%struct.igbvf_adapter* %5), !dbg !8353, !verifier.code !8332
  call {:cexpr "tmp___1"} boogie_si_record_i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12749, 17} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i32($i8, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12749, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb3:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12750, 49} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p0, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12750, 7} true;
  assume {:verifier.code 0} true;
  call $i11 := dev_err.ref.ref($p10, .str.10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12751, 7} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12761, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12755, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12758, 3} true;
  assume {:verifier.code 0} true;
  call netif_device_attach($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12759, 3} true;
  assume {:verifier.code 0} true;
  goto $bb5;
}
const e1000_init_function_pointers_vf: ref;
axiom (e1000_init_function_pointers_vf == $sub.ref(0, 431395));
procedure  e1000_init_function_pointers_vf($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6508, 7} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 32);
  $p2 := $add.ref($p0, 32);
  $p3 := $add.ref($p0, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6508, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p3, e1000_init_mac_params_vf);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6509, 7} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 168);
  $p5 := $add.ref($p0, 168);
  $p6 := $add.ref($p0, 168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6509, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p6, e1000_init_mbx_params_vf);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6510, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const e1000_init_mac_params_vf: ref;
axiom (e1000_init_mac_params_vf == $sub.ref(0, 432427));
procedure  e1000_init_mac_params_vf($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6489, 15} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 32);
  $p2 := $add.ref($add.ref($p0, 32), 128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6490, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p2, 128);
  $p3 := $add.ref($add.ref($p0, 32), 130);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6491, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p3, 1);
  $p4 := $add.ref($p0, 32);
  $p5 := $add.ref($add.ref($p0, 32), 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6492, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p5, e1000_reset_hw_vf);
  $p6 := $add.ref($p0, 32);
  $p7 := $add.ref($add.ref($p0, 32), 56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6493, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p7, e1000_init_hw_vf);
  $p8 := $add.ref($p0, 32);
  $p9 := $add.ref($add.ref($p0, 32), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6494, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p9, e1000_check_for_link_vf);
  $p10 := $add.ref($p0, 32);
  $p11 := $add.ref($add.ref($p0, 32), 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6495, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p11, e1000_get_link_up_info_vf);
  $p12 := $add.ref($p0, 32);
  $p13 := $add.ref($add.ref($p0, 32), 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6496, 32} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p13, e1000_update_mc_addr_list_vf);
  $p14 := $add.ref($p0, 32);
  $p15 := $add.ref($add.ref($p0, 32), 88);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6497, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p15, e1000_rar_set_vf);
  $p16 := $add.ref($p0, 32);
  $p17 := $add.ref($add.ref($p0, 32), 96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6498, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p17, e1000_read_mac_addr_vf);
  $p18 := $add.ref($p0, 32);
  $p19 := $add.ref($add.ref($p0, 32), 104);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6499, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p19, e1000_set_vfta_vf);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6500, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const e1000_init_mbx_params_vf: ref;
axiom (e1000_init_mbx_params_vf == $sub.ref(0, 433459));
procedure  e1000_init_mbx_params_vf($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7144, 15} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 168);
  $p2 := $add.ref($add.ref($p0, 168), 84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7145, 16} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p2, 0);
  $p3 := $add.ref($add.ref($p0, 168), 88);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7146, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p3, 500);
  $p4 := $add.ref($add.ref($p0, 168), 92);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7147, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p4, 16);
  $p5 := $add.ref($p0, 168);
  $p6 := $add.ref($add.ref($p0, 168), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7148, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p6, e1000_read_mbx_vf);
  $p7 := $add.ref($p0, 168);
  $p8 := $add.ref($add.ref($p0, 168), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7149, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p8, e1000_write_mbx_vf);
  $p9 := $add.ref($p0, 168);
  $p10 := $add.ref($add.ref($p0, 168), 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7150, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p10, e1000_read_posted_mbx);
  $p11 := $add.ref($p0, 168);
  $p12 := $add.ref($add.ref($p0, 168), 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7151, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p12, e1000_write_posted_mbx);
  $p13 := $add.ref($p0, 168);
  $p14 := $add.ref($add.ref($p0, 168), 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7152, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p14, e1000_check_for_msg_vf);
  $p15 := $add.ref($p0, 168);
  $p16 := $add.ref($add.ref($p0, 168), 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7153, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p16, e1000_check_for_ack_vf);
  $p17 := $add.ref($p0, 168);
  $p18 := $add.ref($add.ref($p0, 168), 56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7154, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p18, e1000_check_for_rst_vf);
  $p19 := $add.ref($add.ref($p0, 168), 64);
  $p20 := $add.ref($add.ref($p0, 168), 64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7155, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p20, 0);
  $p21 := $add.ref($add.ref($p0, 168), 64);
  $p22 := $add.ref($add.ref($add.ref($p0, 168), 64), 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7156, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p22, 0);
  $p23 := $add.ref($add.ref($p0, 168), 64);
  $p24 := $add.ref($add.ref($add.ref($p0, 168), 64), 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7157, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p24, 0);
  $p25 := $add.ref($add.ref($p0, 168), 64);
  $p26 := $add.ref($add.ref($add.ref($p0, 168), 64), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7158, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p26, 0);
  $p27 := $add.ref($add.ref($p0, 168), 64);
  $p28 := $add.ref($add.ref($add.ref($p0, 168), 64), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7159, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p28, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7160, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const e1000_read_mbx_vf: ref;
axiom (e1000_read_mbx_vf == $sub.ref(0, 434491));
procedure  e1000_read_mbx_vf($p0: ref, $p1: ref, $i2: i16)
  returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;
  var $i22: i1;
  var $i7: i16;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32* %1, i64 0, metadata !15668, metadata !8330), !dbg !15669, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7116, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := e1000_obtain_mbx_lock_vf($p0);
  // WARNING: %4 = call i32 @e1000_obtain_mbx_lock_vf(%struct.e1000_hw* %0), !dbg !8337, !verifier.code !8332
  call {:cexpr "err"} boogie_si_record_i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7117, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7117, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7118, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7136, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7128, 17} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i16.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7128, 15} true;
  assume {:verifier.code 0} true;
  $i6 := $slt.i32(0, $i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7128, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7128, 7} true;
  assume {:verifier.code 0} true;
  $i7 := 0;
  goto $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7128, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i6 == 1));
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  goto $bb12;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7129, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7125, 68} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7125, 68} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7125, 96} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i16.i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7125, 104} true;
  assume {:verifier.code 0} true;
  $i11 := $shl.i32($i10, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7125, 79} true;
  assume {:verifier.code 0} true;
  $i12 := $sext.i32.i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7125, 110} true;
  assume {:verifier.code 0} true;
  $i13 := $add.i64($i12, 2048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7125, 76} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p9, $mul.ref($i13, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7125, 32} true;
  assume {:verifier.code 0} true;
  call $i15 := readl($p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7125, 11} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i16.i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7125, 9} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p1, $mul.ref($i16, 4));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7125, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p17, $i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7126, 14} true;
  assume {:verifier.code 0} true;
  $i18 := $zext.i16.i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7126, 22} true;
  assume {:verifier.code 0} true;
  $i19 := $add.i32($i18, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7126, 7} true;
  assume {:verifier.code 0} true;
  $i20 := $trunc.i32.i16($i19);
  // WARNING: %24 = trunc i32 %23 to i16, !dbg !8364, !verifier.code !8332
  call {:cexpr "i"} boogie_si_record_i16($i20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7128, 7} true;
  assume {:verifier.code 0} true;
  $i21 := $zext.i16.i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7128, 15} true;
  assume {:verifier.code 0} true;
  $i22 := $slt.i32($i21, $i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7128, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $i20;
  assume {:branchcond $i22} true;
  goto $bb10, $bb11;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7128, 7} true;
  assume {:verifier.code 0} true;
  assume ($i22 == 1);
  goto $bb8;
$bb11:
  assume !(($i22 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7128, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7133, 37} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7133, 37} true;
  assume {:verifier.code 0} true;
  $p24 := $load.ref($M.0, $p23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7133, 45} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p24, 3136);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7133, 3} true;
  assume {:verifier.code 0} true;
  call writel(2, $p25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7134, 31} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p0, 168);
  $p27 := $add.ref($add.ref($p0, 168), 64);
  $p28 := $add.ref($add.ref($add.ref($p0, 168), 64), 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7134, 41} true;
  assume {:verifier.code 0} true;
  $i29 := $load.i32($M.0, $p28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7134, 49} true;
  assume {:verifier.code 0} true;
  $i30 := $add.i32($i29, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7134, 7} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p0, 168);
  $p32 := $add.ref($add.ref($p0, 168), 64);
  $p33 := $add.ref($add.ref($add.ref($p0, 168), 64), 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7134, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p33, $i30);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7134, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const e1000_write_mbx_vf: ref;
axiom (e1000_write_mbx_vf == $sub.ref(0, 435523));
procedure  e1000_write_mbx_vf($p0: ref, $p1: ref, $i2: i16)
  returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $i9: i16;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32* %1, i64 0, metadata !15716, metadata !8330), !dbg !15717, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7085, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := e1000_obtain_mbx_lock_vf($p0);
  // WARNING: %4 = call i32 @e1000_obtain_mbx_lock_vf(%struct.e1000_hw* %0), !dbg !8337, !verifier.code !8332
  call {:cexpr "err"} boogie_si_record_i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7086, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7086, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7087, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7107, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7091, 3} true;
  assume {:verifier.code 0} true;
  call $i5 := e1000_check_for_ack_vf($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7092, 3} true;
  assume {:verifier.code 0} true;
  call $i6 := e1000_check_for_msg_vf($p0);
  // WARNING: %10 = call i32 @e1000_check_for_msg_vf(%struct.e1000_hw* %0), !dbg !8347, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7099, 17} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i16.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7099, 15} true;
  assume {:verifier.code 0} true;
  $i8 := $slt.i32(0, $i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7099, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7099, 7} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  goto $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7099, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  goto $bb12;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7100, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7096, 18} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i16.i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7096, 16} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p1, $mul.ref($i10, 4));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7096, 10} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i32($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7096, 62} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7096, 62} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7096, 90} true;
  assume {:verifier.code 0} true;
  $i15 := $zext.i16.i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7096, 98} true;
  assume {:verifier.code 0} true;
  $i16 := $shl.i32($i15, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7096, 73} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.i32.i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7096, 104} true;
  assume {:verifier.code 0} true;
  $i18 := $add.i64($i17, 2048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7096, 70} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p14, $mul.ref($i18, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7096, 3} true;
  assume {:verifier.code 0} true;
  call writel($i12, $p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7097, 14} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i16.i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7097, 22} true;
  assume {:verifier.code 0} true;
  $i21 := $add.i32($i20, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7097, 7} true;
  assume {:verifier.code 0} true;
  $i22 := $trunc.i32.i16($i21);
  // WARNING: %26 = trunc i32 %25 to i16, !dbg !8366, !verifier.code !8332
  call {:cexpr "i"} boogie_si_record_i16($i22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7099, 7} true;
  assume {:verifier.code 0} true;
  $i23 := $zext.i16.i32($i22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7099, 15} true;
  assume {:verifier.code 0} true;
  $i24 := $slt.i32($i23, $i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7099, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $i22;
  assume {:branchcond $i24} true;
  goto $bb10, $bb11;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7099, 7} true;
  assume {:verifier.code 0} true;
  assume ($i24 == 1);
  goto $bb8;
$bb11:
  assume !(($i24 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7099, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7104, 31} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p0, 168);
  $p26 := $add.ref($add.ref($p0, 168), 64);
  $p27 := $add.ref($add.ref($p0, 168), 64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7104, 41} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i32($M.0, $p27);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7104, 49} true;
  assume {:verifier.code 0} true;
  $i29 := $add.i32($i28, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7104, 7} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p0, 168);
  $p31 := $add.ref($add.ref($p0, 168), 64);
  $p32 := $add.ref($add.ref($p0, 168), 64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7104, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p32, $i29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7105, 37} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7105, 37} true;
  assume {:verifier.code 0} true;
  $p34 := $load.ref($M.0, $p33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7105, 45} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($p34, 3136);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7105, 3} true;
  assume {:verifier.code 0} true;
  call writel(1, $p35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7105, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const e1000_read_posted_mbx: ref;
axiom (e1000_read_posted_mbx == $sub.ref(0, 436555));
procedure  e1000_read_posted_mbx($p0: ref, $p1: ref, $i2: i16)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i9: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32* %1, i64 0, metadata !15765, metadata !8330), !dbg !15766, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6937, 15} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 168);
  // WARNING: call void @llvm.dbg.value(metadata %struct.e1000_mbx_info* %4, i64 0, metadata !15771, metadata !8330), !dbg !15772, !verifier.code !8332
  $p4 := $add.ref($p0, 168);
  $p5 := $add.ref($add.ref($p0, 168), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6939, 32} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6939, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6939, 37} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i64($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6939, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6941, 5} true;
  assume {:verifier.code 0} true;
  $i9 := $sub.i32(0, 15);
  goto $bb3;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6952, 3} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6945, 13} true;
  assume {:verifier.code 0} true;
  call $i10 := e1000_poll_for_msg($p0);
  // WARNING: %13 = call i32 @e1000_poll_for_msg(%struct.e1000_hw* %0), !dbg !8351, !verifier.code !8332
  call {:cexpr "ret_val"} boogie_si_record_i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6946, 15} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i32($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6946, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i11 == 1);
  $p12 := $add.ref($p0, 168);
  $p13 := $add.ref($add.ref($p0, 168), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6947, 27} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6947, 43} true;
  assume {:verifier.code 0} true;
  $i15 := $zext.i16.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6947, 43} true;
  assume {:verifier.code 0} true;
  $i16 := $trunc.i32.i16($i15);
  call $i17 := devirtbounce.10($p14, $p0, $p1, $i16);
  // WARNING: %21 = call i32 @devirtbounce.10(i32 (%struct.e1000_hw*, i32*, i16)* %18, %struct.e1000_hw* %0, i32* %1, i16 %20)
  call {:cexpr "ret_val"} boogie_si_record_i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6948, 3} true;
  assume {:verifier.code 0} true;
  $i18 := $i17;
  goto $bb7;
$bb6:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  $i18 := $i10;
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6946, 18} true;
  assume {:verifier.code 0} true;
  $i9 := $i18;
  goto $bb3;
}
const e1000_write_posted_mbx: ref;
axiom (e1000_write_posted_mbx == $sub.ref(0, 437587));
procedure  e1000_write_posted_mbx($p0: ref, $p1: ref, $i2: i16)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i12: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32* %1, i64 0, metadata !15796, metadata !8330), !dbg !15797, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6961, 15} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 168);
  // WARNING: call void @llvm.dbg.value(metadata %struct.e1000_mbx_info* %4, i64 0, metadata !15802, metadata !8330), !dbg !15803, !verifier.code !8332
  $p4 := $add.ref($p0, 168);
  $p5 := $add.ref($add.ref($p0, 168), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6963, 32} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6963, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6963, 38} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i64($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6964, 85} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6964, 85} true;
  assume {:verifier.code 0} true;
  assume ($i8 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6965, 5} true;
  assume {:verifier.code 0} true;
  $i12 := $sub.i32(0, 15);
  goto $bb6;
$bb3:
  assume !(($i8 == 1));
  $p9 := $add.ref($add.ref($p0, 168), 84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6964, 93} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6964, 101} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i32($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6963, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6963, 7} true;
  assume {:verifier.code 0} true;
  assume ($i11 == 1);
  goto $bb2;
$bb5:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6976, 3} true;
  assume {:verifier.code 0} true;
  $r := $i12;
  $exn := false;
  return;
$bb7:
  $p13 := $add.ref($p0, 168);
  $p14 := $add.ref($add.ref($p0, 168), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6969, 25} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6969, 42} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i16.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6969, 42} true;
  assume {:verifier.code 0} true;
  $i17 := $trunc.i32.i16($i16);
  call $i18 := devirtbounce.10($p15, $p0, $p1, $i17);
  // WARNING: %22 = call i32 @devirtbounce.10(i32 (%struct.e1000_hw*, i32*, i16)* %19, %struct.e1000_hw* %0, i32* %1, i16 %21)
  call {:cexpr "ret_val"} boogie_si_record_i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6970, 15} true;
  assume {:verifier.code 0} true;
  $i19 := $eq.i32($i18, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6970, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6971, 15} true;
  assume {:verifier.code 0} true;
  call $i20 := e1000_poll_for_ack($p0);
  // WARNING: %25 = call i32 @e1000_poll_for_ack(%struct.e1000_hw* %0), !dbg !8361, !verifier.code !8332
  call {:cexpr "ret_val"} boogie_si_record_i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6972, 3} true;
  assume {:verifier.code 0} true;
  $i21 := $i20;
  goto $bb10;
$bb9:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  $i21 := $i18;
  goto $bb10;
$bb10:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6970, 18} true;
  assume {:verifier.code 0} true;
  $i12 := $i21;
  goto $bb6;
}
const e1000_check_for_msg_vf: ref;
axiom (e1000_check_for_msg_vf == $sub.ref(0, 438619));
procedure  e1000_check_for_msg_vf($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.e1000_hw* %0, i64 0, metadata !15830, metadata !8330), !dbg !15831, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7018, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := e1000_check_for_bit_vf($p0, 16);
  // WARNING: %2 = call i32 @e1000_check_for_bit_vf(%struct.e1000_hw* %0, i32 16), !dbg !8335, !verifier.code !8332
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7019, 11} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7019, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7021, 30} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 168);
  $p4 := $add.ref($add.ref($p0, 168), 64);
  $p5 := $add.ref($add.ref($add.ref($p0, 168), 64), 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7021, 40} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7021, 45} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i32($i6, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7021, 9} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 168);
  $p9 := $add.ref($add.ref($p0, 168), 64);
  $p10 := $add.ref($add.ref($add.ref($p0, 168), 64), 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7021, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p10, $i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7022, 3} true;
  assume {:verifier.code 0} true;
  $i11 := 0;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  $i11 := $sub.i32(0, 15);
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7025, 3} true;
  assume {:verifier.code 0} true;
  $r := $i11;
  $exn := false;
  return;
}
const e1000_check_for_ack_vf: ref;
axiom (e1000_check_for_ack_vf == $sub.ref(0, 439651));
procedure  e1000_check_for_ack_vf($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.e1000_hw* %0, i64 0, metadata !15850, metadata !8330), !dbg !15851, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7035, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := e1000_check_for_bit_vf($p0, 32);
  // WARNING: %2 = call i32 @e1000_check_for_bit_vf(%struct.e1000_hw* %0, i32 32), !dbg !8335, !verifier.code !8332
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7036, 11} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7036, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7038, 30} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 168);
  $p4 := $add.ref($add.ref($p0, 168), 64);
  $p5 := $add.ref($add.ref($add.ref($p0, 168), 64), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7038, 40} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7038, 45} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i32($i6, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7038, 9} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 168);
  $p9 := $add.ref($add.ref($p0, 168), 64);
  $p10 := $add.ref($add.ref($add.ref($p0, 168), 64), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7038, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p10, $i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7039, 3} true;
  assume {:verifier.code 0} true;
  $i11 := 0;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  $i11 := $sub.i32(0, 15);
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7042, 3} true;
  assume {:verifier.code 0} true;
  $r := $i11;
  $exn := false;
  return;
}
const e1000_check_for_rst_vf: ref;
axiom (e1000_check_for_rst_vf == $sub.ref(0, 440683));
procedure  e1000_check_for_rst_vf($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.e1000_hw* %0, i64 0, metadata !15870, metadata !8330), !dbg !15871, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7052, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := e1000_check_for_bit_vf($p0, 192);
  // WARNING: %2 = call i32 @e1000_check_for_bit_vf(%struct.e1000_hw* %0, i32 192), !dbg !8335, !verifier.code !8332
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7053, 11} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7053, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7055, 30} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 168);
  $p4 := $add.ref($add.ref($p0, 168), 64);
  $p5 := $add.ref($add.ref($add.ref($p0, 168), 64), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7055, 40} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7055, 45} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i32($i6, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7055, 9} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 168);
  $p9 := $add.ref($add.ref($p0, 168), 64);
  $p10 := $add.ref($add.ref($add.ref($p0, 168), 64), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7055, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p10, $i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7056, 3} true;
  assume {:verifier.code 0} true;
  $i11 := 0;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  $i11 := $sub.i32(0, 15);
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7059, 3} true;
  assume {:verifier.code 0} true;
  $r := $i11;
  $exn := false;
  return;
}
const e1000_check_for_bit_vf: ref;
axiom (e1000_check_for_bit_vf == $sub.ref(0, 441715));
procedure  e1000_check_for_bit_vf($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.e1000_hw* %0, i64 0, metadata !15892, metadata !8330), !dbg !15893, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6999, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := e1000_read_v2p_mailbox($p0);
  // WARNING: %3 = call i32 @e1000_read_v2p_mailbox(%struct.e1000_hw* %0), !dbg !8337, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !15898, metadata !8330), !dbg !15899, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !15900, metadata !8330), !dbg !15901, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7002, 20} true;
  assume {:verifier.code 0} true;
  $i3 := $and.i32($i2, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7002, 28} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7002, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7004, 3} true;
  assume {:verifier.code 0} true;
  $i5 := 0;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  $i5 := $sub.i32(0, 15);
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7007, 37} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p0, 264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7007, 46} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7007, 49} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p7, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7007, 49} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i32($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7007, 63} true;
  assume {:verifier.code 0} true;
  $i10 := $xor.i32($i1, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7007, 61} true;
  assume {:verifier.code 0} true;
  $i11 := $and.i32($i9, $i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7007, 7} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p0, 264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7007, 16} true;
  assume {:verifier.code 0} true;
  $p13 := $bitcast.ref.ref($p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7007, 19} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p13, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7007, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p14, $i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7008, 3} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const e1000_read_v2p_mailbox: ref;
axiom (e1000_read_v2p_mailbox == $sub.ref(0, 442747));
procedure  e1000_read_v2p_mailbox($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6985, 44} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6985, 44} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6985, 52} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 3136);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6985, 9} true;
  assume {:verifier.code 0} true;
  call $i4 := readl($p3);
  // WARNING: %5 = call i32 @readl(i8* %4), !dbg !8338, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i4);
  // WARNING: call void @llvm.dbg.value(metadata i32 %5, i64 0, metadata !15929, metadata !8330), !dbg !15930, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6987, 21} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6987, 30} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6987, 33} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p6, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6987, 33} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6987, 45} true;
  assume {:verifier.code 0} true;
  $i9 := $or.i32($i8, $i4);
  // WARNING: %10 = or i32 %9, %5, !dbg !8346, !verifier.code !8334
  call {:cexpr "v2p_mailbox"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6988, 37} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p0, 264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6988, 46} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6988, 49} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p11, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6988, 49} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.0, $p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6988, 76} true;
  assume {:verifier.code 0} true;
  $i14 := $and.i32($i9, 176);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6988, 61} true;
  assume {:verifier.code 0} true;
  $i15 := $or.i32($i13, $i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6988, 7} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p0, 264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6988, 16} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6988, 19} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p17, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6988, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p18, $i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6989, 3} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
}
const e1000_poll_for_ack: ref;
axiom (e1000_poll_for_ack == $sub.ref(0, 443779));
procedure  e1000_poll_for_ack($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i1;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i1;
  var $i12: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i18: i32;
  var $i11: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i9: i32;
  var $i28: i1;
  var $i29: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6899, 15} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 168);
  $p2 := $add.ref($add.ref($p0, 168), 84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6900, 26} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i32($M.0, $p2);
  // WARNING: %4 = load i32, i32* %3, align 4, !dbg !8338, !verifier.code !8332
  call {:cexpr "countdown"} boogie_si_record_i32($i3);
  $p4 := $add.ref($p0, 168);
  $p5 := $add.ref($add.ref($p0, 168), 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6901, 32} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6901, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6901, 46} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i64($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6901, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6902, 5} true;
  assume {:verifier.code 0} true;
  $i9 := $i3;
  goto $bb3;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6928, 21} true;
  assume {:verifier.code 0} true;
  $i28 := $ne.i32($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6928, 11} true;
  assume {:verifier.code 0} true;
  havoc $i29;
  assume ((($i28 == 1) ==> ($i29 == 0)) && (($i28 != 1) ==> ($i29 == $sub.i32(0, 15))));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6928, 3} true;
  assume {:verifier.code 0} true;
  $r := $i29;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6911, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6911, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $i3;
  assume {:branchcond $i10} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6911, 7} true;
  assume {:verifier.code 0} true;
  $i12 := $i3;
  goto $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6911, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i10 == 1));
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb8:
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p0, 168);
  $p20 := $add.ref($add.ref($p0, 168), 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6912, 23} true;
  assume {:verifier.code 0} true;
  $p21 := $load.ref($M.0, $p20);
  call $i22 := devirtbounce.2($p21, $p0);
  // WARNING: %24 = call i32 @devirtbounce.2(i32 (%struct.e1000_hw*)* %23, %struct.e1000_hw* %0)
  call {:cexpr "tmp"} boogie_si_record_i32($i22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6913, 13} true;
  assume {:verifier.code 0} true;
  $i23 := $ne.i32($i22, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6913, 9} true;
  assume {:verifier.code 0} true;
  $i24 := $i12;
  assume {:branchcond $i23} true;
  goto $bb12, $bb13;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6908, 25} true;
  assume {:verifier.code 0} true;
  $i13 := $sub.i32($i12, 1);
  // WARNING: %15 = sub nsw i32 %.03, 1, !dbg !8351, !verifier.code !8332
  call {:cexpr "countdown"} boogie_si_record_i32($i13);
  $p14 := $add.ref($add.ref($p0, 168), 88);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6909, 33} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i32($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6909, 12} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i32.i64($i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6909, 3} true;
  assume {:verifier.code 0} true;
  call __udelay($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6911, 17} true;
  assume {:verifier.code 0} true;
  $i17 := $ne.i32($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6911, 7} true;
  assume {:verifier.code 0} true;
  $i12, $i18 := $i13, $i13;
  assume {:branchcond $i17} true;
  goto $bb10, $bb11;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6911, 7} true;
  assume {:verifier.code 0} true;
  assume ($i17 == 1);
  goto $bb8;
$bb11:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6911, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $i18;
  goto $bb7;
$bb12:
  assume ($i23 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6914, 7} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb13:
  assume !(($i23 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6916, 7} true;
  assume {:verifier.code 0} true;
  $i25 := $i24;
  goto $bb14;
$bb14:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6922, 17} true;
  assume {:verifier.code 0} true;
  $i26 := $eq.i32($i25, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6922, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb16, $bb17;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6911, 20} true;
  assume {:verifier.code 0} true;
  $i25 := $i11;
  goto $bb14;
$bb16:
  assume ($i26 == 1);
  $p27 := $add.ref($add.ref($p0, 168), 84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6923, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p27, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6924, 3} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb17:
  assume !(($i26 == 1));
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6922, 20} true;
  assume {:verifier.code 0} true;
  $i9 := $i25;
  goto $bb3;
}
const __udelay: ref;
axiom (__udelay == $sub.ref(0, 444811));
procedure  __udelay($i0: i64);
const e1000_poll_for_msg: ref;
axiom (e1000_poll_for_msg == $sub.ref(0, 445843));
procedure  e1000_poll_for_msg($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i1;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i1;
  var $i12: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i18: i32;
  var $i11: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i9: i32;
  var $i28: i1;
  var $i29: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6860, 15} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 168);
  $p2 := $add.ref($add.ref($p0, 168), 84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6861, 26} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i32($M.0, $p2);
  // WARNING: %4 = load i32, i32* %3, align 4, !dbg !8338, !verifier.code !8332
  call {:cexpr "countdown"} boogie_si_record_i32($i3);
  $p4 := $add.ref($p0, 168);
  $p5 := $add.ref($add.ref($p0, 168), 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6862, 32} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6862, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6862, 46} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i64($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6862, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6863, 5} true;
  assume {:verifier.code 0} true;
  $i9 := $i3;
  goto $bb3;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6889, 21} true;
  assume {:verifier.code 0} true;
  $i28 := $ne.i32($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6889, 11} true;
  assume {:verifier.code 0} true;
  havoc $i29;
  assume ((($i28 == 1) ==> ($i29 == 0)) && (($i28 != 1) ==> ($i29 == $sub.i32(0, 15))));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6889, 3} true;
  assume {:verifier.code 0} true;
  $r := $i29;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6872, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6872, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $i3;
  assume {:branchcond $i10} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6872, 7} true;
  assume {:verifier.code 0} true;
  $i12 := $i3;
  goto $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6872, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i10 == 1));
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb8:
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p0, 168);
  $p20 := $add.ref($add.ref($p0, 168), 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6873, 23} true;
  assume {:verifier.code 0} true;
  $p21 := $load.ref($M.0, $p20);
  call $i22 := devirtbounce.2($p21, $p0);
  // WARNING: %24 = call i32 @devirtbounce.2(i32 (%struct.e1000_hw*)* %23, %struct.e1000_hw* %0)
  call {:cexpr "tmp"} boogie_si_record_i32($i22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6874, 13} true;
  assume {:verifier.code 0} true;
  $i23 := $ne.i32($i22, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6874, 9} true;
  assume {:verifier.code 0} true;
  $i24 := $i12;
  assume {:branchcond $i23} true;
  goto $bb12, $bb13;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6869, 25} true;
  assume {:verifier.code 0} true;
  $i13 := $sub.i32($i12, 1);
  // WARNING: %15 = sub nsw i32 %.03, 1, !dbg !8351, !verifier.code !8332
  call {:cexpr "countdown"} boogie_si_record_i32($i13);
  $p14 := $add.ref($add.ref($p0, 168), 88);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6870, 33} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i32($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6870, 12} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i32.i64($i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6870, 3} true;
  assume {:verifier.code 0} true;
  call __udelay($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6872, 17} true;
  assume {:verifier.code 0} true;
  $i17 := $ne.i32($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6872, 7} true;
  assume {:verifier.code 0} true;
  $i12, $i18 := $i13, $i13;
  assume {:branchcond $i17} true;
  goto $bb10, $bb11;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6872, 7} true;
  assume {:verifier.code 0} true;
  assume ($i17 == 1);
  goto $bb8;
$bb11:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6872, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $i18;
  goto $bb7;
$bb12:
  assume ($i23 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6875, 7} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb13:
  assume !(($i23 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6877, 7} true;
  assume {:verifier.code 0} true;
  $i25 := $i24;
  goto $bb14;
$bb14:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6883, 17} true;
  assume {:verifier.code 0} true;
  $i26 := $eq.i32($i25, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6883, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb16, $bb17;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6872, 20} true;
  assume {:verifier.code 0} true;
  $i25 := $i11;
  goto $bb14;
$bb16:
  assume ($i26 == 1);
  $p27 := $add.ref($add.ref($p0, 168), 84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6884, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p27, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6885, 3} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb17:
  assume !(($i26 == 1));
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6883, 20} true;
  assume {:verifier.code 0} true;
  $i9 := $i25;
  goto $bb3;
}
const e1000_obtain_mbx_lock_vf: ref;
axiom (e1000_obtain_mbx_lock_vf == $sub.ref(0, 446875));
procedure  e1000_obtain_mbx_lock_vf($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.e1000_hw* %0, i64 0, metadata !16044, metadata !8330), !dbg !16045, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7069, 37} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7069, 37} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7069, 45} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 3136);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7069, 3} true;
  assume {:verifier.code 0} true;
  call writel(4, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7070, 9} true;
  assume {:verifier.code 0} true;
  call $i4 := e1000_read_v2p_mailbox($p0);
  // WARNING: %5 = call i32 @e1000_read_v2p_mailbox(%struct.e1000_hw* %0), !dbg !8339, !verifier.code !8332
  call {:cexpr "tmp"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7071, 12} true;
  assume {:verifier.code 0} true;
  $i5 := $and.i32($i4, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7071, 18} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7071, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7073, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 0;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  $i7 := $sub.i32(0, 15);
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7076, 3} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
}
const e1000_reset_hw_vf: ref;
axiom (e1000_reset_hw_vf == $sub.ref(0, 447907));
procedure  e1000_reset_hw_vf($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i17: i32;
  var $i24: i32;
  var $i16: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6551, 15} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 168);
  // WARNING: call void @llvm.dbg.value(metadata %struct.e1000_mbx_info* %3, i64 0, metadata !16070, metadata !8330), !dbg !16071, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 200, i64 0, metadata !16072, metadata !8330), !dbg !16073, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6554, 10} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6554, 27} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6555, 45} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6555, 45} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6555, 10} true;
  assume {:verifier.code 0} true;
  call $i7 := readl($p6);
  // WARNING: %8 = call i32 @readl(i8* %7), !dbg !8350, !verifier.code !8329
  call {:cexpr "ctrl"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6556, 15} true;
  assume {:verifier.code 0} true;
  $i8 := $or.i32($i7, 67108864);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6556, 51} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6556, 51} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6556, 3} true;
  assume {:verifier.code 0} true;
  call writel($i8, $p10);
  $p11 := $add.ref($p0, 168);
  $p12 := $add.ref($add.ref($p0, 168), 56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6562, 21} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.0, $p12);
  call $i14 := devirtbounce.2($p13, $p0);
  // WARNING: %15 = call i32 @devirtbounce.2(i32 (%struct.e1000_hw*)* %14, %struct.e1000_hw* %0)
  call {:cexpr "tmp"} boogie_si_record_i32($i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6563, 11} true;
  assume {:verifier.code 0} true;
  $i15 := $eq.i32($i14, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6563, 16} true;
  assume {:verifier.code 0} true;
  $i16 := 200;
  assume {:branchcond $i15} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i15 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6563, 16} true;
  assume {:verifier.code 0} true;
  $i17 := 200;
  goto $bb4;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6563, 16} true;
  assume {:verifier.code 0} true;
  assume !(($i15 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6564, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6559, 21} true;
  assume {:verifier.code 0} true;
  $i18 := $sub.i32($i17, 1);
  // WARNING: %18 = sub i32 %.012, 1, !dbg !8362, !verifier.code !8329
  call {:cexpr "timeout"} boogie_si_record_i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6560, 3} true;
  assume {:verifier.code 0} true;
  call __const_udelay(21475);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6562, 21} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.0, $p12);
  call $i20 := devirtbounce.2($p19, $p0);
  // WARNING: %20 = call i32 @devirtbounce.2(i32 (%struct.e1000_hw*)* %19, %struct.e1000_hw* %0)
  call {:cexpr "tmp"} boogie_si_record_i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6563, 11} true;
  assume {:verifier.code 0} true;
  $i21 := $eq.i32($i20, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6563, 27} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.i32($i18, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6563, 16} true;
  assume {:verifier.code 0} true;
  $i23 := $and.i1($i21, $i22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6563, 16} true;
  assume {:verifier.code 0} true;
  $i17, $i24 := $i18, $i18;
  assume {:branchcond $i23} true;
  goto $bb6, $bb7;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6563, 16} true;
  assume {:verifier.code 0} true;
  assume ($i23 == 1);
  goto $bb4;
$bb7:
  assume !(($i23 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6563, 16} true;
  assume {:verifier.code 0} true;
  $i16 := $i24;
  goto $bb3;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6569, 15} true;
  assume {:verifier.code 0} true;
  $i25 := $ne.i32($i16, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6569, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i25 == 1);
  $p26 := $add.ref($add.ref($p0, 168), 84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6570, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p26, 2000);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6571, 5} true;
  assume {:verifier.code 0} true;
  $p27 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6571, 15} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p27, 1);
  $p28 := $add.ref($p0, 168);
  $p29 := $add.ref($add.ref($p0, 168), 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6572, 17} true;
  assume {:verifier.code 0} true;
  $p30 := $load.ref($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6572, 36} true;
  assume {:verifier.code 0} true;
  $p31 := $bitcast.ref.ref($p1);
  call $i32 := devirtbounce.10($p30, $p0, $p31, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6573, 5} true;
  assume {:verifier.code 0} true;
  call msleep(10);
  $p33 := $add.ref($p0, 168);
  $p34 := $add.ref($add.ref($p0, 168), 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6574, 27} true;
  assume {:verifier.code 0} true;
  $p35 := $load.ref($M.0, $p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6574, 45} true;
  assume {:verifier.code 0} true;
  $p36 := $bitcast.ref.ref($p1);
  call $i37 := devirtbounce.10($p35, $p0, $p36, 3);
  // WARNING: %39 = call i32 @devirtbounce.10(i32 (%struct.e1000_hw*, i32*, i16)* %37, %struct.e1000_hw* %0, i32* %38, i16 3)
  call {:cexpr "tmp___0"} boogie_si_record_i32($i37);
  // WARNING: call void @llvm.dbg.value(metadata i32 %39, i64 0, metadata !16111, metadata !8330), !dbg !16112, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6576, 17} true;
  assume {:verifier.code 0} true;
  $i38 := $eq.i32($i37, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6576, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb11, $bb12;
$bb10:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  $i53 := $sub.i32(0, 5);
  goto $bb20;
$bb11:
  assume ($i38 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6577, 11} true;
  assume {:verifier.code 0} true;
  $p39 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6577, 11} true;
  assume {:verifier.code 0} true;
  $i40 := $load.i32($M.0, $p39);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6577, 21} true;
  assume {:verifier.code 0} true;
  $i41 := $eq.i32($i40, $sub.i32(0, 2147483647));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6577, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb13, $bb14;
$bb12:
  assume !(($i38 == 1));
  assume {:verifier.code 0} true;
  $i52 := $i37;
  goto $bb19;
$bb13:
  assume ($i41 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6579, 19} true;
  assume {:verifier.code 0} true;
  $i42 := $ugt.i64(6, 63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6579, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i42} true;
  goto $bb15, $bb16;
$bb14:
  assume !(($i41 == 1));
  assume {:verifier.code 0} true;
  $i51 := $sub.i32(0, 5);
  goto $bb18;
$bb15:
  assume ($i42 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6580, 43} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p0, 32);
  $p44 := $add.ref($add.ref($p0, 32), 118);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6580, 28} true;
  assume {:verifier.code 0} true;
  $p45 := $bitcast.ref.ref($p44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6580, 19} true;
  assume {:verifier.code 0} true;
  call $p46 := __memcpy($p45, $p4, 6);
  assume $isExternal($p46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6581, 9} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume !(($i42 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6582, 51} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($p0, 32);
  $p48 := $add.ref($add.ref($p0, 32), 118);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6582, 36} true;
  assume {:verifier.code 0} true;
  $p49 := $bitcast.ref.ref($p48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6582, 19} true;
  assume {:verifier.code 0} true;
  call $i50 := __builtinx_memcpy.ref.ref.i64($p49, $p4, 6);
  assume {:verifier.code 0} true;
  goto $bb17;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6585, 7} true;
  assume {:verifier.code 0} true;
  $i51 := $i37;
  goto $bb18;
$bb18:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6588, 5} true;
  assume {:verifier.code 0} true;
  $i52 := $i51;
  goto $bb19;
$bb19:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6591, 3} true;
  assume {:verifier.code 0} true;
  $i53 := $i52;
  goto $bb20;
$bb20:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6594, 3} true;
  assume {:verifier.code 0} true;
  $r := $i53;
  $exn := false;
  return;
}
const e1000_init_hw_vf: ref;
axiom (e1000_init_hw_vf == $sub.ref(0, 448939));
procedure  e1000_init_hw_vf($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6602, 37} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 32);
  $p2 := $add.ref($add.ref($p0, 32), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6602, 24} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6602, 3} true;
  assume {:verifier.code 0} true;
  call e1000_rar_set_vf($p0, $p3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6603, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const e1000_check_for_link_vf: ref;
axiom (e1000_check_for_link_vf == $sub.ref(0, 449971));
procedure  e1000_check_for_link_vf($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i16: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6764, 15} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6765, 15} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 32);
  // WARNING: call void @llvm.dbg.value(metadata %struct.e1000_mac_info* %4, i64 0, metadata !16160, metadata !8330), !dbg !16161, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6767, 10} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p1, 0);
  $p4 := $add.ref($p0, 168);
  $p5 := $add.ref($add.ref($p0, 168), 56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6768, 21} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  call $i7 := devirtbounce.2($p6, $p0);
  // WARNING: %8 = call i32 @devirtbounce.2(i32 (%struct.e1000_hw*)* %7, %struct.e1000_hw* %0)
  call {:cexpr "tmp"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6769, 11} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6769, 16} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6769, 16} true;
  assume {:verifier.code 0} true;
  assume ($i8 == 1);
  goto $bb2;
$bb2:
  $p12 := $add.ref($add.ref($p0, 32), 132);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6770, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p12, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6771, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume !(($i8 == 1));
  $p9 := $add.ref($add.ref($p0, 168), 84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6769, 24} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6769, 32} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i32($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume ($i11 == 1);
  goto $bb2;
$bb5:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  $p13 := $add.ref($add.ref($p0, 32), 132);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6774, 14} true;
  assume {:verifier.code 0} true;
  $i14 := $load.i8($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6774, 14} true;
  assume {:verifier.code 0} true;
  $i15 := $trunc.i8.i1($i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6774, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i15 == 1);
  assume {:verifier.code 0} true;
  goto $bb10;
$bb8:
  assume !(($i15 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6775, 5} true;
  assume {:verifier.code 0} true;
  $i16 := 0;
  goto $bb9;
$bb9:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6809, 3} true;
  assume {:verifier.code 0} true;
  $r := $i16;
  $exn := false;
  return;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6779, 48} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6779, 48} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.0, $p17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6779, 56} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p18, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6779, 13} true;
  assume {:verifier.code 0} true;
  call $i20 := readl($p19);
  // WARNING: %27 = call i32 @readl(i8* %26), !dbg !8367, !verifier.code !8329
  call {:cexpr "tmp___0"} boogie_si_record_i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6780, 16} true;
  assume {:verifier.code 0} true;
  $i21 := $and.i32($i20, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6780, 22} true;
  assume {:verifier.code 0} true;
  $i22 := $eq.i32($i21, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6780, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i22 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6781, 5} true;
  assume {:verifier.code 0} true;
  $i16 := 0;
  goto $bb9;
$bb12:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  $p23 := $add.ref($p0, 168);
  $p24 := $add.ref($add.ref($p0, 168), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6785, 25} true;
  assume {:verifier.code 0} true;
  $p25 := $load.ref($M.0, $p24);
  call $i26 := devirtbounce.10($p25, $p0, $p1, 1);
  // WARNING: %36 = call i32 @devirtbounce.10(i32 (%struct.e1000_hw*, i32*, i16)* %35, %struct.e1000_hw* %0, i32* %2, i16 1)
  call {:cexpr "tmp___1"} boogie_si_record_i32($i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6786, 15} true;
  assume {:verifier.code 0} true;
  $i27 := $ne.i32($i26, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6786, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i27 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6787, 5} true;
  assume {:verifier.code 0} true;
  $i16 := 0;
  goto $bb9;
$bb15:
  assume !(($i27 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6791, 8} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i32($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6791, 15} true;
  assume {:verifier.code 0} true;
  $i29 := $and.i32($i28, 536870912);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6791, 29} true;
  assume {:verifier.code 0} true;
  $i30 := $eq.i32($i29, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6791, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i30 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6792, 10} true;
  assume {:verifier.code 0} true;
  $i31 := $load.i32($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6792, 17} true;
  assume {:verifier.code 0} true;
  $i32 := $and.i32($i31, 1073741824);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6792, 32} true;
  assume {:verifier.code 0} true;
  $i33 := $ne.i32($i32, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6792, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i33} true;
  goto $bb19, $bb20;
$bb18:
  assume !(($i30 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb19:
  assume ($i33 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6794, 5} true;
  assume {:verifier.code 0} true;
  $i34 := $sub.i32(0, 5);
  goto $bb21;
$bb20:
  assume !(($i33 == 1));
  assume {:verifier.code 0} true;
  $i34 := 0;
  goto $bb21;
$bb21:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6797, 5} true;
  assume {:verifier.code 0} true;
  $i16 := $i34;
  goto $bb9;
$bb22:
  $p35 := $add.ref($add.ref($p0, 168), 84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6801, 12} true;
  assume {:verifier.code 0} true;
  $i36 := $load.i32($M.0, $p35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6801, 20} true;
  assume {:verifier.code 0} true;
  $i37 := $eq.i32($i36, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6801, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i37 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6803, 5} true;
  assume {:verifier.code 0} true;
  $i16 := $sub.i32(0, 5);
  goto $bb9;
$bb24:
  assume !(($i37 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  $p38 := $add.ref($add.ref($p0, 32), 132);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6807, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p38, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6807, 3} true;
  assume {:verifier.code 0} true;
  $i16 := 0;
  goto $bb9;
}
const e1000_get_link_up_info_vf: ref;
axiom (e1000_get_link_up_info_vf == $sub.ref(0, 451003));
procedure  e1000_get_link_up_info_vf($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6519, 44} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6519, 44} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6519, 52} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p4, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6519, 9} true;
  assume {:verifier.code 0} true;
  call $i6 := readl($p5);
  // WARNING: %7 = call i32 @readl(i8* %6), !dbg !8340, !verifier.code !8332
  call {:cexpr "tmp"} boogie_si_record_i32($i6);
  // WARNING: call void @llvm.dbg.value(metadata i32 %7, i64 0, metadata !16236, metadata !8330), !dbg !16237, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6521, 15} true;
  assume {:verifier.code 0} true;
  $i7 := $and.i32($i6, 128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6521, 22} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6521, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6522, 12} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p1, 1000);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6523, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i8 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6524, 15} true;
  assume {:verifier.code 0} true;
  $i9 := $and.i32($i6, 64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6524, 21} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6524, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb4, $bb5;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6529, 14} true;
  assume {:verifier.code 0} true;
  $i11 := $and.i32($i6, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6529, 14} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i32($i11, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6529, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb7, $bb8;
$bb4:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6525, 12} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p1, 100);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6526, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i10 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6527, 12} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p1, 10);
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  goto $bb3;
$bb7:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6530, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p2, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6531, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i12 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6532, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p2, 1);
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6534, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const e1000_update_mc_addr_list_vf: ref;
axiom (e1000_update_mc_addr_list_vf == $sub.ref(0, 452035));
procedure  e1000_update_mc_addr_list_vf($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i1;
  var $i20: i32;
  var $i21: i16;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i18: i32;
  var $p19: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(64, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !16268, metadata !8330), !dbg !16269, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %2, i64 0, metadata !16270, metadata !8330), !dbg !16271, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !16272, metadata !8330), !dbg !16273, !verifier.code !8332
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6640, 15} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p0, 168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6641, 15} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6641, 33} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p7, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6642, 13} true;
  assume {:verifier.code 0} true;
  $i9 := $ult.i32(30, $i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6642, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6642, 9} true;
  assume {:verifier.code 0} true;
  $i10 := 30;
  goto $bb3;
$bb2:
  assume !(($i9 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6642, 9} true;
  assume {:verifier.code 0} true;
  $i10 := $i2;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6642, 9} true;
  assume {:verifier.code 0} true;
  // WARNING: %14 = phi i32 [ 30, %11 ], [ %2, %12 ], !dbg !8358, !verifier.code !8329
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6643, 3} true;
  assume {:verifier.code 0} true;
  $p11 := $p5;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6643, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p11, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6644, 15} true;
  assume {:verifier.code 0} true;
  $p12 := $p5;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6644, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.0, $p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6644, 32} true;
  assume {:verifier.code 0} true;
  $i14 := $shl.i32($i10, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6644, 25} true;
  assume {:verifier.code 0} true;
  $i15 := $or.i32($i13, $i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6644, 3} true;
  assume {:verifier.code 0} true;
  $p16 := $p5;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6644, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p16, $i15);
  // WARNING: store i32 %19, i32* %20, align 16, !dbg !8368, !verifier.code !8329
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6653, 9} true;
  assume {:verifier.code 0} true;
  $i17 := $ult.i32(0, $i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6653, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i17 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6653, 7} true;
  assume {:verifier.code 0} true;
  $i18, $p19 := 0, $p1;
  goto $bb7;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6653, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i17 == 1));
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  goto $bb11;
$bb7:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6654, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6648, 16} true;
  assume {:verifier.code 0} true;
  call $i20 := e1000_hash_mc_addr_vf($p0, $p19);
  // WARNING: %23 = call i32 @e1000_hash_mc_addr_vf(%struct.e1000_hw* %0, i8* %.012), !dbg !8374, !verifier.code !8329
  call {:cexpr "hash_value"} boogie_si_record_i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6649, 38} true;
  assume {:verifier.code 0} true;
  $i21 := $trunc.i32.i16($i20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6649, 17} true;
  assume {:verifier.code 0} true;
  $i22 := $zext.i32.i64($i18);
  $i23 := $add.i64(1, $i22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6649, 15} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p7, $mul.ref($i23, 2));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6649, 36} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p24, $i21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6650, 31} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p19, 6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6651, 9} true;
  assume {:verifier.code 0} true;
  $i26 := $add.i32($i18, 1);
  // WARNING: %28 = add i32 %.03, 1, !dbg !8382, !verifier.code !8329
  call {:cexpr "i"} boogie_si_record_i32($i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6653, 9} true;
  assume {:verifier.code 0} true;
  $i27 := $ult.i32($i26, $i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6653, 7} true;
  assume {:verifier.code 0} true;
  $i18, $p19 := $i26, $p25;
  assume {:branchcond $i27} true;
  goto $bb9, $bb10;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6653, 7} true;
  assume {:verifier.code 0} true;
  assume ($i27 == 1);
  goto $bb7;
$bb10:
  assume !(($i27 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6653, 7} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb11:
  $p28 := $add.ref($p0, 168);
  $p29 := $add.ref($add.ref($p0, 168), 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6658, 15} true;
  assume {:verifier.code 0} true;
  $p30 := $load.ref($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6658, 34} true;
  assume {:verifier.code 0} true;
  $p31 := $bitcast.ref.ref($p5);
  call $i32 := devirtbounce.10($p30, $p0, $p31, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6659, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const e1000_rar_set_vf: ref;
axiom (e1000_rar_set_vf == $sub.ref(0, 453067));
procedure  e1000_rar_set_vf($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(12, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !16325, metadata !8330), !dbg !16326, !verifier.code !8332
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6711, 15} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6712, 14} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6712, 31} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p5, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6713, 3} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6713, 3} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p7, 0, 12, $zext.i32.i64(4), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6714, 3} true;
  assume {:verifier.code 0} true;
  $p8 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6714, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p8, 2);
  // WARNING: store i32 2, i32* %9, align 4, !dbg !8351, !verifier.code !8329
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6716, 13} true;
  assume {:verifier.code 0} true;
  $i9 := $ugt.i64(6, 63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6716, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6717, 13} true;
  assume {:verifier.code 0} true;
  call $p10 := __memcpy($p6, $p1, 6);
  assume $isExternal($p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6718, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i9 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6719, 13} true;
  assume {:verifier.code 0} true;
  call $i11 := __builtinx_memcpy.ref.ref.i64($p6, $p1, 6);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  $p12 := $add.ref($p0, 168);
  $p13 := $add.ref($add.ref($p0, 168), 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6721, 25} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6721, 44} true;
  assume {:verifier.code 0} true;
  $p15 := $bitcast.ref.ref($p3);
  call $i16 := devirtbounce.10($p14, $p0, $p15, 3);
  // WARNING: %20 = call i32 @devirtbounce.10(i32 (%struct.e1000_hw*, i32*, i16)* %18, %struct.e1000_hw* %0, i32* %19, i16 3)
  call {:cexpr "ret_val"} boogie_si_record_i32($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6722, 15} true;
  assume {:verifier.code 0} true;
  $i17 := $eq.i32($i16, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6722, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i17 == 1);
  $p18 := $add.ref($p0, 168);
  $p19 := $add.ref($add.ref($p0, 168), 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6723, 27} true;
  assume {:verifier.code 0} true;
  $p20 := $load.ref($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6723, 45} true;
  assume {:verifier.code 0} true;
  $p21 := $bitcast.ref.ref($p3);
  call $i22 := devirtbounce.10($p20, $p0, $p21, 3);
  // WARNING: %27 = call i32 @devirtbounce.10(i32 (%struct.e1000_hw*, i32*, i16)* %25, %struct.e1000_hw* %0, i32* %26, i16 3)
  call {:cexpr "ret_val"} boogie_si_record_i32($i22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6724, 3} true;
  assume {:verifier.code 0} true;
  $i23 := $i22;
  goto $bb6;
$bb5:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  $i23 := $i16;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6727, 15} true;
  assume {:verifier.code 0} true;
  $p24 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6727, 15} true;
  assume {:verifier.code 0} true;
  $i25 := $load.i32($M.0, $p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6727, 25} true;
  assume {:verifier.code 0} true;
  $i26 := $and.i32($i25, $sub.i32(0, 536870913));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6727, 3} true;
  assume {:verifier.code 0} true;
  $p27 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6727, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p27, $i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6728, 15} true;
  assume {:verifier.code 0} true;
  $i28 := $eq.i32($i23, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6728, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i28 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6728, 23} true;
  assume {:verifier.code 0} true;
  $p29 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6728, 23} true;
  assume {:verifier.code 0} true;
  $i30 := $load.i32($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6728, 33} true;
  assume {:verifier.code 0} true;
  $i31 := $eq.i32($i30, 1073741826);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6728, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb10, $bb11;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6728, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i28 == 1));
  goto $bb9;
$bb9:
  assume {:verifier.code 0} true;
  goto $bb12;
$bb10:
  assume ($i31 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6729, 5} true;
  assume {:verifier.code 0} true;
  call $i32 := e1000_read_mac_addr_vf($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6730, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6728, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i31 == 1));
  goto $bb9;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6733, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const e1000_read_mac_addr_vf: ref;
axiom (e1000_read_mac_addr_vf == $sub.ref(0, 454099));
procedure  e1000_read_mac_addr_vf($p0: ref)
  returns ($r: i32)
{
  var $i1: i1;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.e1000_hw* %0, i64 0, metadata !16381, metadata !8330), !dbg !16382, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6743, 13} true;
  assume {:verifier.code 0} true;
  $i1 := $ugt.i64(6, 63);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6743, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6744, 37} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 32);
  $p3 := $add.ref($add.ref($p0, 32), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6744, 22} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6744, 71} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 32);
  $p6 := $add.ref($add.ref($p0, 32), 118);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6744, 48} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6744, 13} true;
  assume {:verifier.code 0} true;
  call $p8 := __memcpy($p4, $p7, 6);
  assume $isExternal($p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6746, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6747, 45} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p0, 32);
  $p10 := $add.ref($add.ref($p0, 32), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6747, 30} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6747, 79} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p0, 32);
  $p13 := $add.ref($add.ref($p0, 32), 118);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6747, 56} true;
  assume {:verifier.code 0} true;
  $p14 := $bitcast.ref.ref($p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6747, 13} true;
  assume {:verifier.code 0} true;
  call $i15 := __builtinx_memcpy.ref.ref.i64($p11, $p14, 6);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6750, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const e1000_set_vfta_vf: ref;
axiom (e1000_set_vfta_vf == $sub.ref(0, 455131));
procedure  e1000_set_vfta_vf($p0: ref, $i1: i16, $i2: i1)
  returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata %struct.e1000_hw* %0, i64 0, metadata !16406, metadata !8330), !dbg !16407, !verifier.code !8332
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i8($i2);
  // WARNING: %5 = zext i1 %2 to i8, !verifier.code !8329
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6669, 15} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6670, 3} true;
  assume {:verifier.code 0} true;
  $p6 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6670, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p6, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6671, 15} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i16.i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6671, 3} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p3, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6671, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p8, $i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6672, 13} true;
  assume {:verifier.code 0} true;
  $i9 := $trunc.i8.i1($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6672, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6673, 17} true;
  assume {:verifier.code 0} true;
  $p10 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6673, 17} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i32($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6673, 27} true;
  assume {:verifier.code 0} true;
  $i12 := $or.i32($i11, 65536);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6673, 5} true;
  assume {:verifier.code 0} true;
  $p13 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6673, 15} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p13, $i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6674, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  $p14 := $add.ref($p0, 168);
  $p15 := $add.ref($add.ref($p0, 168), 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6677, 15} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6677, 34} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p3);
  call $i18 := devirtbounce.10($p16, $p0, $p17, 2);
  $p19 := $add.ref($p0, 168);
  $p20 := $add.ref($add.ref($p0, 168), 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6678, 21} true;
  assume {:verifier.code 0} true;
  $p21 := $load.ref($M.0, $p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6678, 39} true;
  assume {:verifier.code 0} true;
  $p22 := $bitcast.ref.ref($p3);
  call $i23 := devirtbounce.10($p21, $p0, $p22, 2);
  // WARNING: %27 = call i32 @devirtbounce.10(i32 (%struct.e1000_hw*, i32*, i16)* %25, %struct.e1000_hw* %0, i32* %26, i16 2)
  call {:cexpr "err"} boogie_si_record_i32($i23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6679, 15} true;
  assume {:verifier.code 0} true;
  $p24 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6679, 15} true;
  assume {:verifier.code 0} true;
  $i25 := $load.i32($M.0, $p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6679, 25} true;
  assume {:verifier.code 0} true;
  $i26 := $and.i32($i25, $sub.i32(0, 536870913));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6679, 3} true;
  assume {:verifier.code 0} true;
  $p27 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6679, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p27, $i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6680, 11} true;
  assume {:verifier.code 0} true;
  $i28 := $eq.i32($i23, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6680, 16} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i28 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6680, 19} true;
  assume {:verifier.code 0} true;
  $p29 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6680, 19} true;
  assume {:verifier.code 0} true;
  $i30 := $load.i32($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6680, 29} true;
  assume {:verifier.code 0} true;
  $i31 := $eq.i32($i30, 1073741828);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6680, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb7, $bb8;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6680, 16} true;
  assume {:verifier.code 0} true;
  assume !(($i28 == 1));
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  $i32 := $i23;
  goto $bb9;
$bb7:
  assume ($i31 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6682, 3} true;
  assume {:verifier.code 0} true;
  $i32 := $sub.i32(0, 5);
  goto $bb9;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6680, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i31 == 1));
  goto $bb6;
$bb9:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6685, 3} true;
  assume {:verifier.code 0} true;
  $r := $i32;
  $exn := false;
  return;
}
const e1000_hash_mc_addr_vf: ref;
axiom (e1000_hash_mc_addr_vf == $sub.ref(0, 456163));
procedure  e1000_hash_mc_addr_vf($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i10: i8;
  var $i17: i8;
  var $i9: i8;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !16458, metadata !8330), !dbg !16459, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6614, 32} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 32);
  $p3 := $add.ref($add.ref($p0, 32), 128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6614, 36} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i16($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6614, 22} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i16.i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6614, 50} true;
  assume {:verifier.code 0} true;
  $i6 := $mul.i32($i5, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6614, 55} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i32($i6, $sub.i32(0, 1));
  // WARNING: %8 = add nsw i32 %7, -1, !dbg !8344, !verifier.code !8334
  call {:cexpr "hash_mask"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6619, 36} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 255);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6619, 7} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6619, 7} true;
  assume {:verifier.code 0} true;
  $i10 := 0;
  goto $bb4;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6619, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6620, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6617, 21} true;
  assume {:verifier.code 0} true;
  $i11 := $zext.i8.i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6617, 37} true;
  assume {:verifier.code 0} true;
  $i12 := $add.i32($i11, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6617, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $trunc.i32.i8($i12);
  // WARNING: %13 = trunc i32 %12 to i8, !dbg !8352, !verifier.code !8334
  call {:cexpr "bit_shift"} boogie_si_record_i8($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6619, 20} true;
  assume {:verifier.code 0} true;
  $i14 := $zext.i8.i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6619, 17} true;
  assume {:verifier.code 0} true;
  $i15 := $lshr.i32($i7, $i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6619, 36} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i32($i15, 255);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6619, 7} true;
  assume {:verifier.code 0} true;
  $i10, $i17 := $i13, $i13;
  assume {:branchcond $i16} true;
  goto $bb6, $bb7;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6619, 7} true;
  assume {:verifier.code 0} true;
  assume ($i16 == 1);
  goto $bb4;
$bb7:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6619, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $i17;
  goto $bb3;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6624, 40} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p1, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6624, 30} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i8($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6624, 24} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i8.i32($i19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6624, 55} true;
  assume {:verifier.code 0} true;
  $i21 := $zext.i8.i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6624, 53} true;
  assume {:verifier.code 0} true;
  $i22 := $sub.i32(8, $i21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6624, 47} true;
  assume {:verifier.code 0} true;
  $i23 := $ashr.i32($i20, $i22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6624, 92} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p1, 5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6624, 82} true;
  assume {:verifier.code 0} true;
  $i25 := $load.i8($M.0, $p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6624, 76} true;
  assume {:verifier.code 0} true;
  $i26 := $zext.i8.i32($i25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6624, 102} true;
  assume {:verifier.code 0} true;
  $i27 := $zext.i8.i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6624, 99} true;
  assume {:verifier.code 0} true;
  $i28 := $shl.i32($i26, $i27);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6624, 73} true;
  assume {:verifier.code 0} true;
  $i29 := $or.i32($i23, $i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6624, 120} true;
  assume {:verifier.code 0} true;
  $i30 := $and.i32($i29, $i7);
  // WARNING: %32 = and i32 %31, %8, !dbg !8369, !verifier.code !8334
  call {:cexpr "hash_value"} boogie_si_record_i32($i30);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6625, 3} true;
  assume {:verifier.code 0} true;
  $r := $i30;
  $exn := false;
  return;
}
const __const_udelay: ref;
axiom (__const_udelay == $sub.ref(0, 457195));
procedure  __const_udelay($i0: i64);
const igbvf_open: ref;
axiom (igbvf_open == $sub.ref(0, 458227));
procedure  igbvf_open($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i17: i32;
  var $p36: ref;
  var $p37: ref;
  var $i12: i32;
  var $i7: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11530, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11531, 13} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11532, 19} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11533, 81} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p2, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11533, 13} true;
  assume {:verifier.code 0} true;
  call $i5 := constant_test_bit(0, $p4);
  // WARNING: %6 = call i32 @constant_test_bit(i64 0, i64* %5), !dbg !8344, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11534, 15} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11534, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11535, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.i32(0, 16);
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11573, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11539, 52} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p2, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11539, 52} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11539, 9} true;
  assume {:verifier.code 0} true;
  call $i10 := igbvf_setup_tx_resources($p2, $p9);
  // WARNING: %13 = call i32 @igbvf_setup_tx_resources(%struct.igbvf_adapter* %3, %struct.igbvf_ring* %12), !dbg !8353, !verifier.code !8332
  call {:cexpr "err"} boogie_si_record_i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11540, 11} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.i32($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11540, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i11 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11541, 5} true;
  assume {:verifier.code 0} true;
  $i12 := $i10;
  goto $bb7;
$bb6:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11570, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_reset($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11571, 3} true;
  assume {:verifier.code 0} true;
  $i7 := $i12;
  goto $bb3;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11545, 52} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p2, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11545, 52} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11545, 9} true;
  assume {:verifier.code 0} true;
  call $i15 := igbvf_setup_rx_resources($p2, $p14);
  // WARNING: %20 = call i32 @igbvf_setup_rx_resources(%struct.igbvf_adapter* %3, %struct.igbvf_ring* %19), !dbg !8362, !verifier.code !8332
  call {:cexpr "err"} boogie_si_record_i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11546, 11} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i32($i15, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11546, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i16 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11547, 5} true;
  assume {:verifier.code 0} true;
  $i17 := $i15;
  goto $bb11;
$bb10:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11568, 36} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p2, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11568, 36} true;
  assume {:verifier.code 0} true;
  $p37 := $load.ref($M.0, $p36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11568, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_free_tx_resources($p37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11568, 3} true;
  assume {:verifier.code 0} true;
  $i12 := $i17;
  goto $bb7;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11551, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_configure($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11552, 9} true;
  assume {:verifier.code 0} true;
  call $i18 := igbvf_request_irq($p2);
  // WARNING: %25 = call i32 @igbvf_request_irq(%struct.igbvf_adapter* %3), !dbg !8369, !verifier.code !8332
  call {:cexpr "err"} boogie_si_record_i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11553, 11} true;
  assume {:verifier.code 0} true;
  $i19 := $ne.i32($i18, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11553, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11554, 5} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11566, 36} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p2, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11566, 36} true;
  assume {:verifier.code 0} true;
  $p35 := $load.ref($M.0, $p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11566, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_free_rx_resources($p35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11566, 3} true;
  assume {:verifier.code 0} true;
  $i17 := $i18;
  goto $bb11;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11558, 57} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p2, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11558, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit(2, $p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11559, 27} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p2, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11559, 27} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11559, 37} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p22, 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11559, 3} true;
  assume {:verifier.code 0} true;
  call napi_enable($p23);
  $p24 := $add.ref($add.ref($p2, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11560, 38} true;
  assume {:verifier.code 0} true;
  $p25 := $load.ref($M.0, $p24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11560, 46} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p25, 5504);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11560, 3} true;
  assume {:verifier.code 0} true;
  call $i27 := readl($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11561, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_irq_enable($p2);
  $p28 := $add.ref($add.ref($p2, 1448), 32);
  $p29 := $add.ref($add.ref($add.ref($p2, 1448), 32), 132);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11562, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p29, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11563, 31} true;
  assume {:verifier.code 0} true;
  $p30 := $p2;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11563, 63} true;
  assume {:verifier.code 0} true;
  $i31 := $load.i64($M.0, jiffies);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11563, 71} true;
  assume {:verifier.code 0} true;
  $i32 := $add.i64($i31, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11563, 3} true;
  assume {:verifier.code 0} true;
  call $i33 := ldv_mod_timer_52($p30, $i32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11564, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 0;
  goto $bb3;
}
const igbvf_close: ref;
axiom (igbvf_close == $sub.ref(0, 459259));
procedure  igbvf_close($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11583, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11584, 13} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11585, 81} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11585, 13} true;
  assume {:verifier.code 0} true;
  call $i4 := constant_test_bit(1, $p3);
  // WARNING: %5 = call i32 @constant_test_bit(i64 1, i64* %4), !dbg !8341, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11586, 27} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11586, 27} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  // WARNING: %7 = zext i1 %6 to i32, !dbg !8344, !verifier.code !8332
  call {:cexpr "__ret_warn_on"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11587, 47} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i32($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11587, 47} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.i1.i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11587, 33} true;
  assume {:verifier.code 0} true;
  $i9 := $sext.i32.i64($i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11587, 13} true;
  assume {:verifier.code 0} true;
  call $i10 := ldv__builtin_expect($i9, 0);
  // WARNING: %11 = call i64 @ldv__builtin_expect(i64 %10, i64 0), !dbg !8349, !verifier.code !8332
  call {:cexpr "tmp___1"} boogie_si_record_i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11588, 15} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.i64($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11588, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i11 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11589, 5} true;
  assume {:verifier.code 0} true;
  call warn_slowpath_null(.str.2, 1836);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11591, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11594, 37} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i32($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11594, 37} true;
  assume {:verifier.code 0} true;
  $i13 := $zext.i1.i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11594, 23} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.i32.i64($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11594, 3} true;
  assume {:verifier.code 0} true;
  call $i15 := ldv__builtin_expect($i14, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11595, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_down($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11596, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_free_irq($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11597, 36} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p2, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11597, 36} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11597, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_free_tx_resources($p17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11598, 36} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p2, 1112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11598, 36} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11598, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_free_rx_resources($p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11599, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const igbvf_xmit_frame: ref;
axiom (igbvf_xmit_frame == $sub.ref(0, 460291));
procedure  igbvf_xmit_frame($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i7: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12430, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := netdev_priv($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12431, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12432, 81} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p3, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12432, 13} true;
  assume {:verifier.code 0} true;
  call $i5 := constant_test_bit(2, $p4);
  // WARNING: %6 = call i32 @constant_test_bit(i64 2, i64* %5), !dbg !8343, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12433, 15} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12433, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12434, 5} true;
  assume {:verifier.code 0} true;
  call dev_kfree_skb_any($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12435, 5} true;
  assume {:verifier.code 0} true;
  $i7 := 0;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12443, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12439, 22} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p3, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12439, 22} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12440, 13} true;
  assume {:verifier.code 0} true;
  call $i10 := igbvf_xmit_frame_ring_adv($p0, $p1, $p9);
  // WARNING: %13 = call i32 @igbvf_xmit_frame_ring_adv(%struct.sk_buff* %0, %struct.net_device* %1, %struct.igbvf_ring* %12), !dbg !8355, !verifier.code !8332
  call {:cexpr "tmp___1"} boogie_si_record_i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12441, 3} true;
  assume {:verifier.code 0} true;
  $i7 := $i10;
  goto $bb3;
}
const igbvf_set_mac: ref;
axiom (igbvf_set_mac == $sub.ref(0, 461323));
procedure  igbvf_set_mac($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $i36: i8;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i13: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11618, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11619, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11620, 19} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p3, 1448);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11621, 10} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11622, 56} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p5, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11622, 33} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11622, 13} true;
  assume {:verifier.code 0} true;
  call $i8 := is_valid_ether_addr($p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11622, 11} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i1.i8($i8);
  // WARNING: %10 = zext i1 %9 to i8, !dbg !8351, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i8($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11623, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.i8.i1($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11623, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11625, 3} true;
  assume {:verifier.code 0} true;
  $i11 := 0;
  goto $bb3;
$bb2:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  $i11 := 1;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11628, 7} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i32($i11, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11628, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11629, 5} true;
  assume {:verifier.code 0} true;
  $i13 := $sub.i32(0, 99);
  goto $bb6;
$bb5:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11653, 1} true;
  assume {:verifier.code 0} true;
  $r := $i13;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11633, 28} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p0, 581);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11633, 28} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i8($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11633, 11} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i8.i64($i15);
  // WARNING: %21 = zext i8 %20 to i64, !dbg !8367, !verifier.code !8332
  call {:cexpr "__len"} boogie_si_record_i64($i16);
  $p17 := $add.ref($add.ref($p3, 1448), 32);
  $p18 := $add.ref($add.ref($add.ref($p3, 1448), 32), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11634, 28} true;
  assume {:verifier.code 0} true;
  $p19 := $bitcast.ref.ref($p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11634, 79} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p5, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11634, 54} true;
  assume {:verifier.code 0} true;
  $p21 := $bitcast.ref.ref($p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11634, 11} true;
  assume {:verifier.code 0} true;
  call $i22 := __builtinx_memcpy.ref.ref.i64($p19, $p21, $i16);
  $p23 := $add.ref($add.ref($p3, 1448), 32);
  $p24 := $add.ref($add.ref($p3, 1448), 32);
  $p25 := $add.ref($add.ref($add.ref($p3, 1448), 32), 88);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11636, 18} true;
  assume {:verifier.code 0} true;
  $p26 := $load.ref($M.0, $p25);
  $p27 := $add.ref($add.ref($p3, 1448), 32);
  $p28 := $add.ref($add.ref($add.ref($p3, 1448), 32), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11636, 32} true;
  assume {:verifier.code 0} true;
  $p29 := $bitcast.ref.ref($p28);
  call devirtbounce.21($p26, $p4, $p29, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11637, 53} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p5, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11637, 30} true;
  assume {:verifier.code 0} true;
  $p31 := $bitcast.ref.ref($p30);
  $p32 := $add.ref($add.ref($p3, 1448), 32);
  $p33 := $add.ref($add.ref($add.ref($p3, 1448), 32), 112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11637, 63} true;
  assume {:verifier.code 0} true;
  $p34 := $bitcast.ref.ref($p33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11637, 13} true;
  assume {:verifier.code 0} true;
  call $i35 := ether_addr_equal($p31, $p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11637, 11} true;
  assume {:verifier.code 0} true;
  $i36 := $zext.i1.i8($i35);
  // WARNING: %41 = zext i1 %40 to i8, !dbg !8380, !verifier.code !8332
  call {:cexpr "tmp___2"} boogie_si_record_i8($i36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11638, 7} true;
  assume {:verifier.code 0} true;
  $i37 := $trunc.i8.i1($i36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11638, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i37 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11640, 3} true;
  assume {:verifier.code 0} true;
  $i38 := 0;
  goto $bb10;
$bb9:
  assume !(($i37 == 1));
  assume {:verifier.code 0} true;
  $i38 := 1;
  goto $bb10;
$bb10:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11643, 7} true;
  assume {:verifier.code 0} true;
  $i39 := $ne.i32($i38, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11643, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i39 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11644, 5} true;
  assume {:verifier.code 0} true;
  $i13 := $sub.i32(0, 99);
  goto $bb6;
$bb12:
  assume !(($i39 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11648, 32} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p0, 581);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11648, 32} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i8($M.0, $p40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11648, 15} true;
  assume {:verifier.code 0} true;
  $i42 := $zext.i8.i64($i41);
  // WARNING: %52 = zext i8 %51 to i64, !dbg !8396, !verifier.code !8332
  call {:cexpr "__len___0"} boogie_si_record_i64($i42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11649, 48} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p0, 840);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11649, 48} true;
  assume {:verifier.code 0} true;
  $p44 := $load.ref($M.0, $p43);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11649, 83} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($p5, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11649, 58} true;
  assume {:verifier.code 0} true;
  $p46 := $bitcast.ref.ref($p45);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11649, 15} true;
  assume {:verifier.code 0} true;
  call $i47 := __builtinx_memcpy.ref.ref.i64($p44, $p46, $i42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11651, 3} true;
  assume {:verifier.code 0} true;
  $i13 := 0;
  goto $bb6;
}
const igbvf_ioctl: ref;
axiom (igbvf_ioctl == $sub.ref(0, 462355));
procedure  igbvf_ioctl($p0: ref, $p1: ref, $i2: i32)
  returns ($r: i32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.ifreq* %1, i64 0, metadata !16709, metadata !8330), !dbg !16710, !verifier.code !8332
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12554, 3} true;
  assume {:verifier.code 0} true;
  $r := $sub.i32(0, 95);
  $exn := false;
  return;
}
const igbvf_change_mtu: ref;
axiom (igbvf_change_mtu == $sub.ref(0, 463387));
procedure  igbvf_change_mtu($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i1;
  var $i21: i8;
  var $i22: i1;
  var $i23: i1;
  var $p24: ref;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $i41: i32;
  var $p42: ref;
  var $i8: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !16717, metadata !8330), !dbg !16718, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12490, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12491, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12492, 23} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i32($i1, 18);
  // WARNING: %5 = add nsw i32 %1, 18, !dbg !8342, !verifier.code !8332
  call {:cexpr "max_frame"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12493, 16} true;
  assume {:verifier.code 0} true;
  $i5 := $sle.i32($i1, 67);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12493, 22} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12493, 22} true;
  assume {:verifier.code 0} true;
  assume ($i5 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12494, 5} true;
  assume {:verifier.code 0} true;
  $i8 := $sub.i32(0, 22);
  goto $bb8;
$bb3:
  assume !(($i5 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12493, 33} true;
  assume {:verifier.code 0} true;
  $i6 := $sgt.i32($i1, 2147483629);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12493, 47} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12493, 47} true;
  assume {:verifier.code 0} true;
  assume ($i6 == 1);
  goto $bb2;
$bb5:
  assume !(($i6 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12493, 60} true;
  assume {:verifier.code 0} true;
  $i7 := $sgt.i32($i4, 16128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12493, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb6, $bb7;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12493, 7} true;
  assume {:verifier.code 0} true;
  assume ($i7 == 1);
  goto $bb2;
$bb7:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12546, 1} true;
  assume {:verifier.code 0} true;
  $r := $i8;
  $exn := false;
  return;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12498, 17} true;
  assume {:verifier.code 0} true;
  $i9 := $sgt.i32($i4, 9234);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12498, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12499, 51} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p3, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12499, 51} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12499, 58} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p11, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12499, 5} true;
  assume {:verifier.code 0} true;
  call $i13 := dev_err.ref.ref($p12, .str.19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12500, 5} true;
  assume {:verifier.code 0} true;
  $i8 := $sub.i32(0, 22);
  goto $bb8;
$bb11:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12508, 74} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p3, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12508, 13} true;
  assume {:verifier.code 0} true;
  call $i15 := test_and_set_bit(1, $p14);
  // WARNING: %23 = call i32 @test_and_set_bit(i64 1, i64* %22), !dbg !8365, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12509, 15} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i32($i15, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12509, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i16 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12509, 7} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12509, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i16 == 1));
  goto $bb15;
$bb15:
  assume {:verifier.code 0} true;
  goto $bb20;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12510, 5} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12506, 3} true;
  assume {:verifier.code 0} true;
  call msleep(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12508, 13} true;
  assume {:verifier.code 0} true;
  call $i17 := test_and_set_bit(1, $p14);
  // WARNING: %26 = call i32 @test_and_set_bit(i64 1, i64* %22), !dbg !8365, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12509, 15} true;
  assume {:verifier.code 0} true;
  $i18 := $ne.i32($i17, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12509, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb18, $bb19;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12509, 7} true;
  assume {:verifier.code 0} true;
  assume ($i18 == 1);
  goto $bb16;
$bb19:
  assume !(($i18 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12509, 7} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12514, 12} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p3, 1164);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12514, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p19, $i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12515, 13} true;
  assume {:verifier.code 0} true;
  call $i20 := netif_running($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12515, 11} true;
  assume {:verifier.code 0} true;
  $i21 := $zext.i1.i8($i20);
  // WARNING: %33 = zext i1 %32 to i8, !dbg !8377, !verifier.code !8332
  call {:cexpr "tmp___1"} boogie_si_record_i8($i21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12516, 13} true;
  assume {:verifier.code 0} true;
  $i22 := $trunc.i8.i1($i21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12516, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i22 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12517, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_down($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12518, 3} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb22:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12521, 17} true;
  assume {:verifier.code 0} true;
  $i23 := $sle.i32($i4, 1024);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12521, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i23} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i23 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12522, 14} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p3, 940);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12522, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p24, 1024);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12523, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb25:
  assume !(($i23 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12524, 17} true;
  assume {:verifier.code 0} true;
  $i25 := $sle.i32($i4, 2048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12524, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb27, $bb28;
$bb26:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12529, 17} true;
  assume {:verifier.code 0} true;
  $i28 := $eq.i32($i4, 1518);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12529, 25} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb30, $bb32;
$bb27:
  assume ($i25 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12525, 14} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p3, 940);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12525, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p26, 2048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12526, 3} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb28:
  assume !(($i25 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12527, 14} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p3, 940);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12527, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p27, 2048);
  assume {:verifier.code 0} true;
  goto $bb29;
$bb29:
  assume {:verifier.code 0} true;
  goto $bb26;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12529, 25} true;
  assume {:verifier.code 0} true;
  assume ($i28 == 1);
  goto $bb31;
$bb31:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12530, 14} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p3, 940);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12530, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p30, 1522);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12531, 3} true;
  assume {:verifier.code 0} true;
  goto $bb35;
$bb32:
  assume !(($i28 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12529, 38} true;
  assume {:verifier.code 0} true;
  $i29 := $eq.i32($i4, 1522);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12529, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb33, $bb34;
$bb33:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12529, 7} true;
  assume {:verifier.code 0} true;
  assume ($i29 == 1);
  goto $bb31;
$bb34:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  goto $bb35;
$bb35:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12534, 51} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p3, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12534, 51} true;
  assume {:verifier.code 0} true;
  $p32 := $load.ref($M.0, $p31);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12534, 58} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p32, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12535, 21} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p0, 536);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12535, 21} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i32($M.0, $p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12534, 3} true;
  assume {:verifier.code 0} true;
  call $i36 := _dev_info.ref.ref.i32.i32($p33, .str.20, $i35, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12536, 11} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p0, 536);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12536, 15} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p37, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12537, 13} true;
  assume {:verifier.code 0} true;
  call $i38 := netif_running($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12537, 11} true;
  assume {:verifier.code 0} true;
  $i39 := $zext.i1.i8($i38);
  // WARNING: %64 = zext i1 %63 to i8, !dbg !8420, !verifier.code !8332
  call {:cexpr "tmp___2"} boogie_si_record_i8($i39);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12538, 13} true;
  assume {:verifier.code 0} true;
  $i40 := $trunc.i8.i1($i39);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12538, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb36, $bb37;
$bb36:
  assume ($i40 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12539, 5} true;
  assume {:verifier.code 0} true;
  call $i41 := igbvf_up($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12540, 3} true;
  assume {:verifier.code 0} true;
  goto $bb38;
$bb37:
  assume !(($i40 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12541, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_reset($p3);
  assume {:verifier.code 0} true;
  goto $bb38;
$bb38:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12543, 57} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($p3, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12543, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit(1, $p42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12544, 3} true;
  assume {:verifier.code 0} true;
  $i8 := 0;
  goto $bb8;
}
const igbvf_tx_timeout: ref;
axiom (igbvf_tx_timeout == $sub.ref(0, 464419));
procedure  igbvf_tx_timeout($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12450, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12451, 13} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12452, 40} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 1088);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12452, 40} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12452, 57} true;
  assume {:verifier.code 0} true;
  $i5 := $add.i32($i4, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12452, 12} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p2, 1088);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12452, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p6, $i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12453, 28} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p2, 256);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12453, 3} true;
  assume {:verifier.code 0} true;
  call $i8 := schedule_work($p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12454, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_get_stats: ref;
axiom (igbvf_get_stats == $sub.ref(0, 465451));
procedure  igbvf_get_stats($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12475, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12476, 13} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12477, 22} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 1192);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12477, 3} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const igbvf_vlan_rx_kill_vid: ref;
axiom (igbvf_vlan_rx_kill_vid == $sub.ref(0, 466483));
procedure  igbvf_vlan_rx_kill_vid($p0: ref, $i1: i16, $i2: i16)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i19: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !16851, metadata !8330), !dbg !16852, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i16 %1, i64 0, metadata !16853, metadata !8330), !dbg !16854, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11105, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11106, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11107, 19} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p4, 1448);
  $p6 := $add.ref($add.ref($p4, 1448), 32);
  $p7 := $add.ref($add.ref($p4, 1448), 32);
  $p8 := $add.ref($add.ref($add.ref($p4, 1448), 32), 104);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11108, 28} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11108, 43} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i16.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11108, 43} true;
  assume {:verifier.code 0} true;
  $i11 := $trunc.i32.i16($i10);
  call $i12 := devirtbounce.11($p9, $p5, $i11, 0);
  // WARNING: %13 = call i32 @devirtbounce.11(i32 (%struct.e1000_hw*, i16, i1)* %10, %struct.e1000_hw* %6, i16 %12, i1 false)
  call {:cexpr "tmp___0"} boogie_si_record_i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11109, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i32($i12, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11109, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11110, 51} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p4, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11110, 51} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11110, 58} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p15, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11111, 13} true;
  assume {:verifier.code 0} true;
  $i17 := $zext.i16.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11110, 5} true;
  assume {:verifier.code 0} true;
  call $i18 := dev_err.ref.ref.i32($p16, .str.12, $i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11112, 5} true;
  assume {:verifier.code 0} true;
  $i19 := $sub.i32(0, 22);
  goto $bb3;
$bb2:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11119, 1} true;
  assume {:verifier.code 0} true;
  $r := $i19;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11116, 13} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i16.i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11116, 65} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p4, 424);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11116, 25} true;
  assume {:verifier.code 0} true;
  $p22 := $bitcast.ref.ref($p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11116, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit($i20, $p22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11117, 3} true;
  assume {:verifier.code 0} true;
  $i19 := 0;
  goto $bb3;
}
const igbvf_netpoll: ref;
axiom (igbvf_netpoll == $sub.ref(0, 467515));
procedure  igbvf_netpoll($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12670, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12671, 13} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12672, 25} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12672, 25} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12672, 32} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p4, 1580);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12672, 32} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12672, 3} true;
  assume {:verifier.code 0} true;
  call disable_irq($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12673, 31} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p2, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12673, 31} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12673, 3} true;
  assume {:verifier.code 0} true;
  call $i9 := igbvf_clean_tx_irq($p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12674, 24} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p2, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12674, 24} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12674, 31} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p11, 1580);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12674, 31} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.0, $p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12674, 3} true;
  assume {:verifier.code 0} true;
  call enable_irq($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12675, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_set_features: ref;
axiom (igbvf_set_features == $sub.ref(0, 468547));
procedure  igbvf_set_features($p0: ref, $i1: i64)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !16906, metadata !8330), !dbg !16907, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12787, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12788, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12789, 17} true;
  assume {:verifier.code 0} true;
  $i4 := $and.i64($i1, 17179869184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12789, 35} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i64($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12789, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12790, 31} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p3, 2600);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12790, 31} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i32($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12790, 37} true;
  assume {:verifier.code 0} true;
  $i8 := $and.i32($i7, $sub.i32(0, 2));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12790, 14} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p3, 2600);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12790, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p9, $i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12791, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i5 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12792, 31} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p3, 2600);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12792, 31} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i32($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12792, 37} true;
  assume {:verifier.code 0} true;
  $i12 := $or.i32($i11, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12792, 14} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p3, 2600);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12792, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p13, $i12);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12794, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const disable_irq: ref;
axiom (disable_irq == $sub.ref(0, 469579));
procedure  disable_irq($i0: i32);
const enable_irq: ref;
axiom (enable_irq == $sub.ref(0, 470611));
procedure  enable_irq($i0: i32);
const ether_addr_equal: ref;
axiom (ether_addr_equal == $sub.ref(0, 471643));
procedure  ether_addr_equal($p0: ref, $p1: ref)
  returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9705, 26} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9705, 26} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i32($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9705, 67} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9705, 67} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9705, 50} true;
  assume {:verifier.code 0} true;
  $i6 := $xor.i32($i3, $i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9705, 136} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9705, 157} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p7, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9705, 134} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i16($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9705, 110} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i16.i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9705, 192} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9705, 213} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p11, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9705, 190} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i16($M.0, $p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9705, 166} true;
  assume {:verifier.code 0} true;
  $i14 := $zext.i16.i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9705, 164} true;
  assume {:verifier.code 0} true;
  $i15 := $xor.i32($i10, $i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9705, 92} true;
  assume {:verifier.code 0} true;
  $i16 := $or.i32($i6, $i15);
  // WARNING: %17 = or i32 %7, %16, !dbg !8350, !verifier.code !8334
  call {:cexpr "fold"} boogie_si_record_i32($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9706, 16} true;
  assume {:verifier.code 0} true;
  $i17 := $eq.i32($i16, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9706, 3} true;
  assume {:verifier.code 0} true;
  $r := $i17;
  $exn := false;
  return;
}
const igbvf_xmit_frame_ring_adv: ref;
axiom (igbvf_xmit_frame_ring_adv == $sub.ref(0, 472675));
procedure  igbvf_xmit_frame_ring_adv($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i1;
  var $i44: i8;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $i53: i1;
  var $i54: i32;
  var $i56: i1;
  var $i57: i8;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i32;
  var $i55: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i8;
  var $i71: i32;
  var $i72: i8;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i16;
  var $p82: ref;
  var $i9: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12347, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := netdev_priv($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12348, 13} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  // WARNING: call void @llvm.dbg.value(metadata %struct.igbvf_adapter* %6, i64 0, metadata !16974, metadata !8330), !dbg !16975, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12350, 11} true;
  assume {:verifier.code 0} true;
  $M.32 := $store.i8($M.32, $p3, 0);
  // WARNING: store i8 0, i8* %4, align 1, !dbg !8350, !verifier.code !8331
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !16979, metadata !8330), !dbg !16980, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12353, 81} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p5, 1032);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12353, 13} true;
  assume {:verifier.code 0} true;
  call $i7 := constant_test_bit(2, $p6);
  // WARNING: %8 = call i32 @constant_test_bit(i64 2, i64* %7), !dbg !8356, !verifier.code !8331
  call {:cexpr "tmp___0"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12354, 15} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12354, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12355, 5} true;
  assume {:verifier.code 0} true;
  call dev_kfree_skb_any($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12356, 5} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  goto $bb3;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12420, 1} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12360, 12} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p0, 104);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12360, 12} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i32($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12360, 16} true;
  assume {:verifier.code 0} true;
  $i12 := $eq.i32($i11, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12360, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12361, 5} true;
  assume {:verifier.code 0} true;
  call dev_kfree_skb_any($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12362, 5} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  goto $bb3;
$bb6:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12366, 13} true;
  assume {:verifier.code 0} true;
  call $p13 := skb_end_pointer($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12367, 84} true;
  assume {:verifier.code 0} true;
  $p14 := $bitcast.ref.ref($p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12367, 84} true;
  assume {:verifier.code 0} true;
  $p15 := $p14;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12367, 84} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i8($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12367, 41} true;
  assume {:verifier.code 0} true;
  $i17 := $zext.i8.i32($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12367, 93} true;
  assume {:verifier.code 0} true;
  $i18 := $add.i32($i17, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12367, 13} true;
  assume {:verifier.code 0} true;
  call $i19 := igbvf_maybe_stop_tx($p1, $i18);
  // WARNING: %25 = call i32 @igbvf_maybe_stop_tx(%struct.net_device* %1, i32 %24), !dbg !8378, !verifier.code !8331
  call {:cexpr "tmp___2"} boogie_si_record_i32($i19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12368, 15} true;
  assume {:verifier.code 0} true;
  $i20 := $ne.i32($i19, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12368, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i20 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12369, 5} true;
  assume {:verifier.code 0} true;
  $i9 := 16;
  goto $bb3;
$bb9:
  assume !(($i20 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12373, 19} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p0, 162);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12373, 19} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i16($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12373, 8} true;
  assume {:verifier.code 0} true;
  $i23 := $zext.i16.i32($i22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12373, 28} true;
  assume {:verifier.code 0} true;
  $i24 := $and.i32($i23, 4096);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12373, 36} true;
  assume {:verifier.code 0} true;
  $i25 := $ne.i32($i24, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12373, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i25 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12374, 25} true;
  assume {:verifier.code 0} true;
  $i26 := $or.i32(0, 2);
  // WARNING: %36 = or i32 0, 2, !dbg !8392, !verifier.code !8331
  call {:cexpr "tx_flags"} boogie_si_record_i32($i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12375, 44} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p0, 162);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12375, 44} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i16($M.0, $p27);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12375, 33} true;
  assume {:verifier.code 0} true;
  $i29 := $zext.i16.i32($i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12375, 53} true;
  assume {:verifier.code 0} true;
  $i30 := $and.i32($i29, $sub.i32(0, 4097));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12375, 62} true;
  assume {:verifier.code 0} true;
  $i31 := $shl.i32($i30, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12375, 69} true;
  assume {:verifier.code 0} true;
  $i32 := $or.i32($i31, $i26);
  // WARNING: %42 = or i32 %41, %36, !dbg !8398, !verifier.code !8331
  call {:cexpr "tx_flags"} boogie_si_record_i32($i32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12376, 3} true;
  assume {:verifier.code 0} true;
  $i33 := $i32;
  goto $bb13;
$bb12:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  $i33 := 0;
  goto $bb13;
$bb13:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12379, 27} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p0, 126);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12379, 27} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i16($M.0, $p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12379, 7} true;
  assume {:verifier.code 0} true;
  $i36 := $zext.i16.i32($i35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12379, 36} true;
  assume {:verifier.code 0} true;
  $i37 := $eq.i32($i36, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12379, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i37 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12380, 25} true;
  assume {:verifier.code 0} true;
  $i38 := $or.i32($i33, 8);
  // WARNING: %50 = or i32 %.02, 8, !dbg !8405, !verifier.code !8331
  call {:cexpr "tx_flags"} boogie_si_record_i32($i38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12381, 3} true;
  assume {:verifier.code 0} true;
  $i39 := $i38;
  goto $bb16;
$bb15:
  assume !(($i37 == 1));
  assume {:verifier.code 0} true;
  $i39 := $i33;
  goto $bb16;
$bb16:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12384, 35} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p2, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12384, 35} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i16($M.0, $p40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12384, 11} true;
  assume {:verifier.code 0} true;
  $i42 := $zext.i16.i32($i41);
  // WARNING: %55 = zext i16 %54 to i32, !dbg !8409, !verifier.code !8331
  call {:cexpr "first"} boogie_si_record_i32($i42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12385, 13} true;
  assume {:verifier.code 0} true;
  call $i43 := skb_is_gso($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12385, 11} true;
  assume {:verifier.code 0} true;
  $i44 := $zext.i1.i8($i43);
  // WARNING: %57 = zext i1 %56 to i8, !dbg !8413, !verifier.code !8331
  call {:cexpr "tmp___5"} boogie_si_record_i8($i44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12386, 13} true;
  assume {:verifier.code 0} true;
  $i45 := $trunc.i8.i1($i44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12386, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i45 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12387, 15} true;
  assume {:verifier.code 0} true;
  call $i46 := igbvf_tso($p5, $p2, $p0, $i39, $p3);
  // WARNING: %60 = call i32 @igbvf_tso(%struct.igbvf_adapter* %6, %struct.igbvf_ring* %2, %struct.sk_buff* %0, i32 %.1, i8* %4), !dbg !8419, !verifier.code !8331
  call {:cexpr "tmp___4"} boogie_si_record_i32($i46);
  // WARNING: call void @llvm.dbg.value(metadata i32 %60, i64 0, metadata !17049, metadata !8330), !dbg !17050, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12389, 3} true;
  assume {:verifier.code 0} true;
  $i47 := $i46;
  goto $bb19;
$bb18:
  assume !(($i45 == 1));
  assume {:verifier.code 0} true;
  $i47 := 0;
  goto $bb19;
$bb19:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12392, 37} true;
  assume {:verifier.code 0} true;
  $i48 := $slt.i32($i47, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12392, 37} true;
  assume {:verifier.code 0} true;
  $i49 := $zext.i1.i32($i48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12392, 33} true;
  assume {:verifier.code 0} true;
  $i50 := $sext.i32.i64($i49);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12392, 13} true;
  assume {:verifier.code 0} true;
  call $i51 := ldv__builtin_expect($i50, 0);
  // WARNING: %66 = call i64 @ldv__builtin_expect(i64 %65, i64 0), !dbg !8426, !verifier.code !8331
  call {:cexpr "tmp___6"} boogie_si_record_i64($i51);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12393, 15} true;
  assume {:verifier.code 0} true;
  $i52 := $ne.i64($i51, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12393, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i52} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i52 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12394, 5} true;
  assume {:verifier.code 0} true;
  call dev_kfree_skb_any($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12395, 5} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  goto $bb3;
$bb21:
  assume !(($i52 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12399, 11} true;
  assume {:verifier.code 0} true;
  $i53 := $ne.i32($i47, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12399, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i53} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i53 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12400, 25} true;
  assume {:verifier.code 0} true;
  $i54 := $or.i32($i39, 4);
  // WARNING: %73 = or i32 %.1, 4, !dbg !8438, !verifier.code !8331
  call {:cexpr "tx_flags"} boogie_si_record_i32($i54);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12401, 3} true;
  assume {:verifier.code 0} true;
  $i55 := $i54;
  goto $bb25;
$bb24:
  assume !(($i53 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12402, 15} true;
  assume {:verifier.code 0} true;
  call $i56 := igbvf_tx_csum($p5, $p2, $p0, $i39);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12402, 13} true;
  assume {:verifier.code 0} true;
  $i57 := $zext.i1.i8($i56);
  // WARNING: %76 = zext i1 %75 to i8, !dbg !8443, !verifier.code !8331
  call {:cexpr "tmp___7"} boogie_si_record_i8($i57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12403, 15} true;
  assume {:verifier.code 0} true;
  $i58 := $trunc.i8.i1($i57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12403, 23} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i58} true;
  goto $bb26, $bb27;
$bb25:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12409, 11} true;
  assume {:verifier.code 0} true;
  call $i66 := igbvf_tx_map_adv($p5, $p2, $p0);
  // WARNING: %89 = call i32 @igbvf_tx_map_adv(%struct.igbvf_adapter* %6, %struct.igbvf_ring* %2, %struct.sk_buff* %0), !dbg !8459, !verifier.code !8331
  call {:cexpr "count"} boogie_si_record_i32($i66);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12410, 13} true;
  assume {:verifier.code 0} true;
  $i67 := $ne.i32($i66, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12410, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i67} true;
  goto $bb32, $bb33;
$bb26:
  assume ($i58 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12403, 43} true;
  assume {:verifier.code 0} true;
  $p59 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12403, 64} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($p59, 124);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12403, 41} true;
  assume {:verifier.code 0} true;
  $i61 := $load.i8($M.0, $p60);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12403, 26} true;
  assume {:verifier.code 0} true;
  $i62 := $zext.i8.i32($i61);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12403, 73} true;
  assume {:verifier.code 0} true;
  $i63 := $eq.i32($i62, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12403, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i63} true;
  goto $bb29, $bb30;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12403, 23} true;
  assume {:verifier.code 0} true;
  assume !(($i58 == 1));
  goto $bb28;
$bb28:
  assume {:verifier.code 0} true;
  $i65 := $i39;
  goto $bb31;
$bb29:
  assume ($i63 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12404, 27} true;
  assume {:verifier.code 0} true;
  $i64 := $or.i32($i39, 1);
  // WARNING: %85 = or i32 %.1, 1, !dbg !8456, !verifier.code !8331
  call {:cexpr "tx_flags"} boogie_si_record_i32($i64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12405, 5} true;
  assume {:verifier.code 0} true;
  $i65 := $i64;
  goto $bb31;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12403, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i63 == 1));
  goto $bb28;
$bb31:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i55 := $i65;
  goto $bb25;
$bb32:
  assume ($i67 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12411, 77} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($p0, 104);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12411, 77} true;
  assume {:verifier.code 0} true;
  $i69 := $load.i32($M.0, $p68);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12411, 88} true;
  assume {:verifier.code 0} true;
  $i70 := $load.i8($M.32, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12411, 82} true;
  assume {:verifier.code 0} true;
  $i71 := $zext.i8.i32($i70);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12411, 82} true;
  assume {:verifier.code 0} true;
  $i72 := $trunc.i32.i8($i71);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12411, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_tx_queue_adv($p5, $p2, $i55, $i66, $i42, $i69, $i72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12412, 5} true;
  assume {:verifier.code 0} true;
  call $i73 := igbvf_maybe_stop_tx($p1, 21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12413, 3} true;
  assume {:verifier.code 0} true;
  goto $bb34;
$bb33:
  assume !(($i67 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12414, 5} true;
  assume {:verifier.code 0} true;
  call dev_kfree_skb_any($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12415, 15} true;
  assume {:verifier.code 0} true;
  $p74 := $add.ref($p2, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12415, 15} true;
  assume {:verifier.code 0} true;
  $p75 := $load.ref($M.0, $p74);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12415, 29} true;
  assume {:verifier.code 0} true;
  $i76 := $zext.i32.i64($i42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12415, 27} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($p75, $mul.ref($i76, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12415, 53} true;
  assume {:verifier.code 0} true;
  $p78 := $add.ref($add.ref($p75, $mul.ref($i76, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12415, 63} true;
  assume {:verifier.code 0} true;
  $p79 := $bitcast.ref.ref($p78);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12415, 73} true;
  assume {:verifier.code 0} true;
  $p80 := $p79;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12415, 84} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p80, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12416, 28} true;
  assume {:verifier.code 0} true;
  $i81 := $trunc.i32.i16($i42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12416, 14} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($p2, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12416, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p82, $i81);
  assume {:verifier.code 0} true;
  goto $bb34;
$bb34:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12418, 3} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  goto $bb3;
}
const igbvf_maybe_stop_tx: ref;
axiom (igbvf_maybe_stop_tx == $sub.ref(0, 473707));
procedure  igbvf_maybe_stop_tx($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i8: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !17113, metadata !8330), !dbg !17114, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12118, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12119, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12120, 40} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p3, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12120, 40} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12120, 13} true;
  assume {:verifier.code 0} true;
  call $i6 := igbvf_desc_unused($p5);
  // WARNING: %7 = call i32 @igbvf_desc_unused(%struct.igbvf_ring* %6), !dbg !8343, !verifier.code !8332
  call {:cexpr "tmp___0"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12121, 15} true;
  assume {:verifier.code 0} true;
  $i7 := $sge.i32($i6, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12121, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12122, 5} true;
  assume {:verifier.code 0} true;
  $i8 := 0;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12138, 1} true;
  assume {:verifier.code 0} true;
  $r := $i8;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12126, 3} true;
  assume {:verifier.code 0} true;
  call netif_stop_queue($p0);
  call devirtbounce.5(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12128, 40} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p3, 1048);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12128, 40} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12128, 13} true;
  assume {:verifier.code 0} true;
  call $i11 := igbvf_desc_unused($p10);
  // WARNING: %14 = call i32 @igbvf_desc_unused(%struct.igbvf_ring* %13), !dbg !8353, !verifier.code !8332
  call {:cexpr "tmp___1"} boogie_si_record_i32($i11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12129, 15} true;
  assume {:verifier.code 0} true;
  $i12 := $slt.i32($i11, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12129, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12130, 5} true;
  assume {:verifier.code 0} true;
  $i8 := $sub.i32(0, 16);
  goto $bb3;
$bb6:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12134, 3} true;
  assume {:verifier.code 0} true;
  call netif_wake_queue($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12135, 37} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p3, 1056);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12135, 37} true;
  assume {:verifier.code 0} true;
  $i14 := $load.i32($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12135, 51} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i32($i14, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12135, 12} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p3, 1056);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12135, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p16, $i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12136, 3} true;
  assume {:verifier.code 0} true;
  $i8 := 0;
  goto $bb3;
}
const skb_is_gso: ref;
axiom (skb_is_gso == $sub.ref(0, 474739));
procedure  skb_is_gso($p0: ref)
  returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9192, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := skb_end_pointer($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9193, 59} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9193, 59} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9193, 59} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i16($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9193, 11} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i16.i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9193, 68} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9193, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const igbvf_tso: ref;
axiom (igbvf_tso == $sub.ref(0, 475771));
procedure  igbvf_tso($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref)
  returns ($r: i32)
{
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $i34: i16;
  var $p35: ref;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $i49: i16;
  var $p50: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i8;
  var $i73: i32;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i32;
  var $i82: i64;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i64;
  var $i91: i8;
  var $i92: i32;
  var $i93: i64;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i8;
  var $p99: ref;
  var $i100: i32;
  var $p101: ref;
  var $i102: i16;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i16;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i16;
  var $p130: ref;
  var $i11: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.sk_buff* %2, i64 0, metadata !17170, metadata !8330), !dbg !17171, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i8* %4, i64 0, metadata !17174, metadata !8330), !dbg !17175, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !17176, metadata !8330), !dbg !17177, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11951, 12} true;
  assume {:verifier.code 0} true;
  $M.32 := $store.i8($M.32, $p4, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11952, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := skb_cow_head($p2, 0);
  // WARNING: %6 = call i32 @skb_cow_head(%struct.sk_buff* %2, i32 0), !dbg !8349, !verifier.code !8334
  call {:cexpr "err"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11953, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $slt.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11953, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11954, 51} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11954, 51} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11954, 58} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p8, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11954, 5} true;
  assume {:verifier.code 0} true;
  call $i10 := dev_err.ref.ref($p9, .str.17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11955, 5} true;
  assume {:verifier.code 0} true;
  $i11 := $i5;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12027, 1} true;
  assume {:verifier.code 0} true;
  $r := $i11;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11959, 11} true;
  assume {:verifier.code 0} true;
  call $i12 := tcp_hdrlen($p2);
  // WARNING: %15 = call i32 @tcp_hdrlen(%struct.sk_buff* %2), !dbg !8360, !verifier.code !8334
  call {:cexpr "l4len"} boogie_si_record_i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11960, 20} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i8($M.32, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11960, 14} true;
  assume {:verifier.code 0} true;
  $i14 := $zext.i8.i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11960, 38} true;
  assume {:verifier.code 0} true;
  $i15 := $trunc.i32.i8($i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11960, 31} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i8.i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11960, 29} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i32($i14, $i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11960, 14} true;
  assume {:verifier.code 0} true;
  $i18 := $trunc.i32.i8($i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11960, 12} true;
  assume {:verifier.code 0} true;
  $M.32 := $store.i8($M.32, $p4, $i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11961, 27} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p2, 126);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11961, 27} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i16($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11961, 7} true;
  assume {:verifier.code 0} true;
  $i21 := $zext.i16.i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11961, 36} true;
  assume {:verifier.code 0} true;
  $i22 := $eq.i32($i21, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11961, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i22 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11962, 11} true;
  assume {:verifier.code 0} true;
  call $p23 := ip_hdr($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11964, 10} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p23, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11964, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p24, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11965, 10} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p23, 10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11965, 16} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p25, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11966, 15} true;
  assume {:verifier.code 0} true;
  call $p26 := tcp_hdr($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11967, 38} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p23, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11967, 38} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i32($M.0, $p27);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11967, 50} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p23, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11967, 50} true;
  assume {:verifier.code 0} true;
  $i30 := $load.i32($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11967, 15} true;
  assume {:verifier.code 0} true;
  call $i31 := csum_tcpudp_magic($i28, $i30, 0, 6, 0);
  // WARNING: %35 = call zeroext i16 @csum_tcpudp_magic(i32 %32, i32 %34, i16 zeroext 0, i16 zeroext 6, i32 0), !dbg !8389, !verifier.code !8334
  call {:cexpr "tmp___1"} boogie_si_record_i16($i31);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11968, 25} true;
  assume {:verifier.code 0} true;
  $i32 := $zext.i16.i32($i31);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11968, 22} true;
  assume {:verifier.code 0} true;
  $i33 := $xor.i32($i32, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11968, 22} true;
  assume {:verifier.code 0} true;
  $i34 := $trunc.i32.i16($i33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11968, 14} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($p26, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11968, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p35, $i34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11969, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i22 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11970, 15} true;
  assume {:verifier.code 0} true;
  call $i36 := skb_is_gso_v6($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11970, 13} true;
  assume {:verifier.code 0} true;
  $i37 := $zext.i1.i8($i36);
  // WARNING: %42 = zext i1 %41 to i8, !dbg !8399, !verifier.code !8334
  call {:cexpr "tmp___7"} boogie_si_record_i8($i37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11971, 15} true;
  assume {:verifier.code 0} true;
  $i38 := $trunc.i8.i1($i37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11971, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb8, $bb9;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11984, 31} true;
  assume {:verifier.code 0} true;
  $p51 := $add.ref($p1, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11984, 31} true;
  assume {:verifier.code 0} true;
  $i52 := $load.i16($M.0, $p51);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11984, 7} true;
  assume {:verifier.code 0} true;
  $i53 := $zext.i16.i32($i52);
  // WARNING: %62 = zext i16 %61 to i32, !dbg !8431, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i53);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11985, 26} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($p1, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11985, 26} true;
  assume {:verifier.code 0} true;
  $p55 := $load.ref($M.0, $p54);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11985, 40} true;
  assume {:verifier.code 0} true;
  $i56 := $zext.i32.i64($i53);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11985, 38} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($p55, $mul.ref($i56, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11986, 30} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11986, 30} true;
  assume {:verifier.code 0} true;
  $p59 := $load.ref($M.0, $p58);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11986, 37} true;
  assume {:verifier.code 0} true;
  $i60 := $zext.i32.i64($i53);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11986, 35} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($p59, $mul.ref($i60, 16));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11986, 57} true;
  assume {:verifier.code 0} true;
  $p62 := $bitcast.ref.ref($p61);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11987, 17} true;
  assume {:verifier.code 0} true;
  $i63 := $and.i32($i3, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11987, 23} true;
  assume {:verifier.code 0} true;
  $i64 := $ne.i32($i63, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11987, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i64} true;
  goto $bb11, $bb12;
$bb8:
  assume ($i38 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11972, 17} true;
  assume {:verifier.code 0} true;
  call $p39 := ipv6_hdr($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11973, 16} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p39, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11973, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p40, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11974, 17} true;
  assume {:verifier.code 0} true;
  call $p41 := tcp_hdr($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11975, 17} true;
  assume {:verifier.code 0} true;
  call $p42 := ipv6_hdr($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11976, 17} true;
  assume {:verifier.code 0} true;
  call $p43 := ipv6_hdr($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11977, 72} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($p43, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11977, 119} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($p42, 24);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11977, 17} true;
  assume {:verifier.code 0} true;
  call $i46 := csum_ipv6_magic($p44, $p45, 0, 6, 0);
  // WARNING: %52 = call zeroext i16 @csum_ipv6_magic(%struct.inetpeer_addr_base* %50, %struct.inetpeer_addr_base* %51, i32 0, i16 zeroext 6, i32 0), !dbg !8422, !verifier.code !8334
  call {:cexpr "tmp___6"} boogie_si_record_i16($i46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11979, 27} true;
  assume {:verifier.code 0} true;
  $i47 := $zext.i16.i32($i46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11979, 24} true;
  assume {:verifier.code 0} true;
  $i48 := $xor.i32($i47, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11979, 24} true;
  assume {:verifier.code 0} true;
  $i49 := $trunc.i32.i16($i48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11979, 16} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($p41, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11979, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p50, $i49);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11980, 5} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i38 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:verifier.code 0} true;
  goto $bb7;
$bb11:
  assume ($i64 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11988, 22} true;
  assume {:verifier.code 0} true;
  $i65 := $and.i32($i3, $sub.i32(0, 65536));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11988, 37} true;
  assume {:verifier.code 0} true;
  $i66 := $or.i32($i65, 0);
  // WARNING: %76 = or i32 %75, 0, !dbg !8452, !verifier.code !8334
  call {:cexpr "info"} boogie_si_record_i32($i66);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11989, 3} true;
  assume {:verifier.code 0} true;
  $i67 := $i66;
  goto $bb13;
$bb12:
  assume !(($i64 == 1));
  assume {:verifier.code 0} true;
  $i67 := 0;
  goto $bb13;
$bb13:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11992, 13} true;
  assume {:verifier.code 0} true;
  call $i68 := skb_network_offset($p2);
  // WARNING: %79 = call i32 @skb_network_offset(%struct.sk_buff* %2), !dbg !8454, !verifier.code !8334
  call {:cexpr "tmp___8"} boogie_si_record_i32($i68);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11993, 25} true;
  assume {:verifier.code 0} true;
  $i69 := $shl.i32($i68, 9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11993, 31} true;
  assume {:verifier.code 0} true;
  $i70 := $or.i32($i69, $i67);
  // WARNING: %81 = or i32 %80, %.03, !dbg !8458, !verifier.code !8334
  call {:cexpr "info"} boogie_si_record_i32($i70);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11994, 13} true;
  assume {:verifier.code 0} true;
  call $i71 := skb_network_offset($p2);
  // WARNING: %82 = call i32 @skb_network_offset(%struct.sk_buff* %2), !dbg !8459, !verifier.code !8334
  call {:cexpr "tmp___9"} boogie_si_record_i32($i71);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11995, 20} true;
  assume {:verifier.code 0} true;
  $i72 := $load.i8($M.32, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11995, 14} true;
  assume {:verifier.code 0} true;
  $i73 := $zext.i8.i32($i72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11995, 38} true;
  assume {:verifier.code 0} true;
  $i74 := $trunc.i32.i8($i71);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11995, 31} true;
  assume {:verifier.code 0} true;
  $i75 := $zext.i8.i32($i74);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11995, 29} true;
  assume {:verifier.code 0} true;
  $i76 := $add.i32($i73, $i75);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11995, 14} true;
  assume {:verifier.code 0} true;
  $i77 := $trunc.i32.i8($i76);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11995, 12} true;
  assume {:verifier.code 0} true;
  $M.32 := $store.i8($M.32, $p4, $i77);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11996, 14} true;
  assume {:verifier.code 0} true;
  call $p78 := skb_transport_header($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11997, 14} true;
  assume {:verifier.code 0} true;
  call $p79 := skb_network_header($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11998, 40} true;
  assume {:verifier.code 0} true;
  $i80 := $p2i.ref.i64($p78);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11998, 24} true;
  assume {:verifier.code 0} true;
  $i81 := $trunc.i64.i32($i80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11998, 75} true;
  assume {:verifier.code 0} true;
  $i82 := $p2i.ref.i64($p79);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11998, 59} true;
  assume {:verifier.code 0} true;
  $i83 := $trunc.i64.i32($i82);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11998, 57} true;
  assume {:verifier.code 0} true;
  $i84 := $sub.i32($i81, $i83);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11998, 93} true;
  assume {:verifier.code 0} true;
  $i85 := $or.i32($i84, $i70);
  // WARNING: %96 = or i32 %95, %81, !dbg !8479, !verifier.code !8334
  call {:cexpr "info"} boogie_si_record_i32($i85);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 11999, 14} true;
  assume {:verifier.code 0} true;
  call $p86 := skb_transport_header($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12000, 14} true;
  assume {:verifier.code 0} true;
  call $p87 := skb_network_header($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12001, 20} true;
  assume {:verifier.code 0} true;
  $i88 := $load.i8($M.32, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12001, 14} true;
  assume {:verifier.code 0} true;
  $i89 := $zext.i8.i32($i88);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12001, 45} true;
  assume {:verifier.code 0} true;
  $i90 := $p2i.ref.i64($p86);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12001, 39} true;
  assume {:verifier.code 0} true;
  $i91 := $trunc.i64.i8($i90);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12001, 32} true;
  assume {:verifier.code 0} true;
  $i92 := $zext.i8.i32($i91);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12001, 78} true;
  assume {:verifier.code 0} true;
  $i93 := $p2i.ref.i64($p87);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12001, 72} true;
  assume {:verifier.code 0} true;
  $i94 := $trunc.i64.i8($i93);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12001, 65} true;
  assume {:verifier.code 0} true;
  $i95 := $zext.i8.i32($i94);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12001, 63} true;
  assume {:verifier.code 0} true;
  $i96 := $sub.i32($i92, $i95);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12001, 29} true;
  assume {:verifier.code 0} true;
  $i97 := $add.i32($i89, $i96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12001, 14} true;
  assume {:verifier.code 0} true;
  $i98 := $trunc.i32.i8($i97);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12001, 12} true;
  assume {:verifier.code 0} true;
  $M.32 := $store.i8($M.32, $p4, $i98);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12002, 17} true;
  assume {:verifier.code 0} true;
  $p99 := $p62;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12002, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p99, $i85);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12003, 19} true;
  assume {:verifier.code 0} true;
  $i100 := $or.i32(0, 538968064);
  // WARNING: %111 = or i32 0, 538968064, !dbg !8499, !verifier.code !8334
  call {:cexpr "tu_cmd"} boogie_si_record_i32($i100);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12004, 27} true;
  assume {:verifier.code 0} true;
  $p101 := $add.ref($p2, 126);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12004, 27} true;
  assume {:verifier.code 0} true;
  $i102 := $load.i16($M.0, $p101);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12004, 7} true;
  assume {:verifier.code 0} true;
  $i103 := $zext.i16.i32($i102);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12004, 36} true;
  assume {:verifier.code 0} true;
  $i104 := $eq.i32($i103, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12004, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i104} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i104 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12005, 21} true;
  assume {:verifier.code 0} true;
  $i105 := $or.i32($i100, 1024);
  // WARNING: %117 = or i32 %111, 1024, !dbg !8505, !verifier.code !8334
  call {:cexpr "tu_cmd"} boogie_si_record_i32($i105);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12006, 3} true;
  assume {:verifier.code 0} true;
  $i106 := $i105;
  goto $bb16;
$bb15:
  assume !(($i104 == 1));
  assume {:verifier.code 0} true;
  $i106 := $i100;
  goto $bb16;
$bb16:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12009, 19} true;
  assume {:verifier.code 0} true;
  $i107 := $or.i32($i106, 2048);
  // WARNING: %120 = or i32 %.02, 2048, !dbg !8508, !verifier.code !8334
  call {:cexpr "tu_cmd"} boogie_si_record_i32($i107);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12010, 17} true;
  assume {:verifier.code 0} true;
  $p108 := $add.ref($p62, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12010, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p108, $i107);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12011, 14} true;
  assume {:verifier.code 0} true;
  call $p109 := skb_end_pointer($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12012, 70} true;
  assume {:verifier.code 0} true;
  $p110 := $bitcast.ref.ref($p109);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12012, 70} true;
  assume {:verifier.code 0} true;
  $p111 := $add.ref($p110, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12012, 70} true;
  assume {:verifier.code 0} true;
  $i112 := $load.i16($M.0, $p111);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12012, 26} true;
  assume {:verifier.code 0} true;
  $i113 := $zext.i16.i32($i112);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12012, 79} true;
  assume {:verifier.code 0} true;
  $i114 := $shl.i32($i113, 16);
  // WARNING: %127 = shl i32 %126, 16, !dbg !8516, !verifier.code !8334
  call {:cexpr "mss_l4len_idx"} boogie_si_record_i32($i114);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12013, 26} true;
  assume {:verifier.code 0} true;
  $i115 := $shl.i32($i12, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12013, 32} true;
  assume {:verifier.code 0} true;
  $i116 := $or.i32($i115, $i114);
  // WARNING: %129 = or i32 %128, %127, !dbg !8520, !verifier.code !8334
  call {:cexpr "mss_l4len_idx"} boogie_si_record_i32($i116);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12014, 17} true;
  assume {:verifier.code 0} true;
  $p117 := $add.ref($p62, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12014, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p117, $i116);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12015, 17} true;
  assume {:verifier.code 0} true;
  $p118 := $add.ref($p62, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12015, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p118, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12016, 49} true;
  assume {:verifier.code 0} true;
  $i119 := $load.i64($M.0, jiffies);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12016, 16} true;
  assume {:verifier.code 0} true;
  $p120 := $add.ref($add.ref($p55, $mul.ref($i56, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12016, 26} true;
  assume {:verifier.code 0} true;
  $p121 := $bitcast.ref.ref($p120);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12016, 36} true;
  assume {:verifier.code 0} true;
  $p122 := $p121;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12016, 47} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p122, $i119);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12017, 16} true;
  assume {:verifier.code 0} true;
  $p123 := $add.ref($p55, $mul.ref($i56, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12017, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p123, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12018, 9} true;
  assume {:verifier.code 0} true;
  $i124 := $add.i32($i53, 1);
  // WARNING: %137 = add i32 %62, 1, !dbg !8532, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i124);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12019, 16} true;
  assume {:verifier.code 0} true;
  $p125 := $add.ref($p1, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12019, 16} true;
  assume {:verifier.code 0} true;
  $i126 := $load.i32($M.0, $p125);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12019, 22} true;
  assume {:verifier.code 0} true;
  $i127 := $eq.i32($i126, $i124);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12019, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i127} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i127 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12021, 3} true;
  assume {:verifier.code 0} true;
  $i128 := 0;
  goto $bb19;
$bb18:
  assume !(($i127 == 1));
  assume {:verifier.code 0} true;
  $i128 := $i124;
  goto $bb19;
$bb19:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12024, 26} true;
  assume {:verifier.code 0} true;
  $i129 := $trunc.i32.i16($i128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12024, 12} true;
  assume {:verifier.code 0} true;
  $p130 := $add.ref($p1, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12024, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p130, $i129);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12025, 3} true;
  assume {:verifier.code 0} true;
  $i11 := 1;
  goto $bb3;
}
const igbvf_tx_csum: ref;
axiom (igbvf_tx_csum == $sub.ref(0, 476803));
procedure  igbvf_tx_csum($p0: ref, $p1: ref, $p2: ref, $i3: i32)
  returns ($r: i1)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $i40: i64;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $i66: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i16;
  var $p89: ref;
  var $i90: i1;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.sk_buff* %2, i64 0, metadata !17384, metadata !8330), !dbg !17385, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !17386, metadata !8330), !dbg !17387, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !17388, metadata !8330), !dbg !17389, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12045, 24} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12045, 45} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p4, 124);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12045, 22} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i8($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12045, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i8.i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12045, 54} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i7, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12045, 61} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12045, 61} true;
  assume {:verifier.code 0} true;
  assume ($i8 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12046, 33} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p1, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12046, 33} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i16($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12046, 9} true;
  assume {:verifier.code 0} true;
  $i13 := $zext.i16.i32($i12);
  // WARNING: %16 = zext i16 %15 to i32, !dbg !8359, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12047, 28} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p1, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12047, 28} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12047, 42} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i32.i64($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12047, 40} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p15, $mul.ref($i16, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12048, 32} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12048, 32} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12048, 39} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i32.i64($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12048, 37} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p19, $mul.ref($i20, 16));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12048, 59} true;
  assume {:verifier.code 0} true;
  $p22 := $bitcast.ref.ref($p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12049, 19} true;
  assume {:verifier.code 0} true;
  $i23 := $and.i32($i3, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12049, 25} true;
  assume {:verifier.code 0} true;
  $i24 := $ne.i32($i23, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12049, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb6, $bb7;
$bb3:
  assume !(($i8 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12045, 74} true;
  assume {:verifier.code 0} true;
  $i9 := $and.i32($i3, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12045, 80} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12045, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12045, 7} true;
  assume {:verifier.code 0} true;
  assume ($i10 == 1);
  goto $bb2;
$bb5:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb35;
$bb6:
  assume ($i24 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12050, 24} true;
  assume {:verifier.code 0} true;
  $i25 := $and.i32($i3, $sub.i32(0, 65536));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12050, 39} true;
  assume {:verifier.code 0} true;
  $i26 := $or.i32($i25, 0);
  // WARNING: %30 = or i32 %29, 0, !dbg !8380, !verifier.code !8334
  call {:cexpr "info"} boogie_si_record_i32($i26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12051, 5} true;
  assume {:verifier.code 0} true;
  $i27 := $i26;
  goto $bb8;
$bb7:
  assume !(($i24 == 1));
  assume {:verifier.code 0} true;
  $i27 := 0;
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12054, 11} true;
  assume {:verifier.code 0} true;
  call $i28 := skb_network_offset($p2);
  // WARNING: %33 = call i32 @skb_network_offset(%struct.sk_buff* %2), !dbg !8382, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12055, 23} true;
  assume {:verifier.code 0} true;
  $i29 := $shl.i32($i28, 9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12055, 29} true;
  assume {:verifier.code 0} true;
  $i30 := $or.i32($i29, $i27);
  // WARNING: %35 = or i32 %34, %.04, !dbg !8386, !verifier.code !8334
  call {:cexpr "info"} boogie_si_record_i32($i30);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12056, 26} true;
  assume {:verifier.code 0} true;
  $p31 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12056, 47} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p31, 124);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12056, 24} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i8($M.0, $p32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12056, 9} true;
  assume {:verifier.code 0} true;
  $i34 := $zext.i8.i32($i33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12056, 56} true;
  assume {:verifier.code 0} true;
  $i35 := $eq.i32($i34, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12056, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i35 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12057, 17} true;
  assume {:verifier.code 0} true;
  call $p36 := skb_transport_header($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12058, 17} true;
  assume {:verifier.code 0} true;
  call $p37 := skb_network_header($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12059, 44} true;
  assume {:verifier.code 0} true;
  $i38 := $p2i.ref.i64($p36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12059, 28} true;
  assume {:verifier.code 0} true;
  $i39 := $trunc.i64.i32($i38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12059, 78} true;
  assume {:verifier.code 0} true;
  $i40 := $p2i.ref.i64($p37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12059, 62} true;
  assume {:verifier.code 0} true;
  $i41 := $trunc.i64.i32($i40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12059, 60} true;
  assume {:verifier.code 0} true;
  $i42 := $sub.i32($i39, $i41);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12059, 95} true;
  assume {:verifier.code 0} true;
  $i43 := $or.i32($i42, $i30);
  // WARNING: %49 = or i32 %48, %35, !dbg !8406, !verifier.code !8334
  call {:cexpr "info"} boogie_si_record_i32($i43);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12060, 5} true;
  assume {:verifier.code 0} true;
  $i44 := $i43;
  goto $bb11;
$bb10:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  $i44 := $i30;
  goto $bb11;
$bb11:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12063, 19} true;
  assume {:verifier.code 0} true;
  $p45 := $p22;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12063, 35} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p45, $i44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12064, 21} true;
  assume {:verifier.code 0} true;
  $i46 := $or.i32(0, 538968064);
  // WARNING: %53 = or i32 0, 538968064, !dbg !8410, !verifier.code !8334
  call {:cexpr "tu_cmd"} boogie_si_record_i32($i46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12065, 26} true;
  assume {:verifier.code 0} true;
  $p47 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12065, 47} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($p47, 124);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12065, 24} true;
  assume {:verifier.code 0} true;
  $i49 := $load.i8($M.0, $p48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12065, 9} true;
  assume {:verifier.code 0} true;
  $i50 := $zext.i8.i32($i49);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12065, 56} true;
  assume {:verifier.code 0} true;
  $i51 := $eq.i32($i50, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12065, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i51} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i51 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12066, 26} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($p2, 126);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12066, 26} true;
  assume {:verifier.code 0} true;
  $i53 := $load.i16($M.0, $p52);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12066, 15} true;
  assume {:verifier.code 0} true;
  $i54 := $zext.i16.i32($i53);
  assume {:verifier.code 0} true;
  goto $bb14;
$bb13:
  assume !(($i51 == 1));
  assume {:verifier.code 0} true;
  $i74 := $i46;
  goto $bb30;
$bb14:
  assume {:verifier.code 0} true;
  $i55 := $slt.i32($i54, 56710);
  assume {:verifier.code 0} true;
  assume {:branchcond $i55} true;
  goto $bb15, $bb16;
$bb15:
  assume ($i55 == 1);
  assume {:verifier.code 0} true;
  $i57 := $eq.i32($i54, 8);
  assume {:verifier.code 0} true;
  assume {:branchcond $i57} true;
  goto $bb20, $bb21;
$bb16:
  assume !(($i55 == 1));
  assume {:verifier.code 0} true;
  $i56 := $eq.i32($i54, 56710);
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i56 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12077, 17} true;
  assume {:verifier.code 0} true;
  call $p67 := ipv6_hdr($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12078, 35} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($p67, 6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12078, 35} true;
  assume {:verifier.code 0} true;
  $i69 := $load.i8($M.0, $p68);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12078, 11} true;
  assume {:verifier.code 0} true;
  $i70 := $zext.i8.i32($i69);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12078, 43} true;
  assume {:verifier.code 0} true;
  $i71 := $eq.i32($i70, 6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12078, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i71} true;
  goto $bb26, $bb27;
$bb18:
  assume {:verifier.code 0} true;
  assume !(($i56 == 1));
  goto $bb19;
$bb19:
  assume {:verifier.code 0} true;
  goto $bb29;
$bb20:
  assume ($i57 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12068, 23} true;
  assume {:verifier.code 0} true;
  $i58 := $or.i32($i46, 1024);
  // WARNING: %64 = or i32 %53, 1024, !dbg !8421, !verifier.code !8334
  call {:cexpr "tu_cmd"} boogie_si_record_i32($i58);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12069, 17} true;
  assume {:verifier.code 0} true;
  call $p59 := ip_hdr($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12070, 35} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($p59, 9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12070, 35} true;
  assume {:verifier.code 0} true;
  $i61 := $load.i8($M.0, $p60);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12070, 11} true;
  assume {:verifier.code 0} true;
  $i62 := $zext.i8.i32($i61);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12070, 44} true;
  assume {:verifier.code 0} true;
  $i63 := $eq.i32($i62, 6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12070, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i63} true;
  goto $bb22, $bb23;
$bb21:
  assume {:verifier.code 0} true;
  assume !(($i57 == 1));
  goto $bb19;
$bb22:
  assume ($i63 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12071, 25} true;
  assume {:verifier.code 0} true;
  $i64 := $or.i32($i58, 2048);
  // WARNING: %71 = or i32 %64, 2048, !dbg !8431, !verifier.code !8334
  call {:cexpr "tu_cmd"} boogie_si_record_i32($i64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12072, 7} true;
  assume {:verifier.code 0} true;
  $i65 := $i64;
  goto $bb24;
$bb23:
  assume !(($i63 == 1));
  assume {:verifier.code 0} true;
  $i65 := $i58;
  goto $bb24;
$bb24:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12075, 7} true;
  assume {:verifier.code 0} true;
  $i66 := $i65;
  goto $bb25;
$bb25:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12088, 5} true;
  assume {:verifier.code 0} true;
  $i74 := $i66;
  goto $bb30;
$bb26:
  assume ($i71 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12079, 25} true;
  assume {:verifier.code 0} true;
  $i72 := $or.i32($i46, 2048);
  // WARNING: %81 = or i32 %53, 2048, !dbg !8443, !verifier.code !8334
  call {:cexpr "tu_cmd"} boogie_si_record_i32($i72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12080, 7} true;
  assume {:verifier.code 0} true;
  $i73 := $i72;
  goto $bb28;
$bb27:
  assume !(($i71 == 1));
  assume {:verifier.code 0} true;
  $i73 := $i46;
  goto $bb28;
$bb28:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12083, 7} true;
  assume {:verifier.code 0} true;
  $i66 := $i73;
  goto $bb25;
$bb29:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12085, 7} true;
  assume {:verifier.code 0} true;
  $i66 := $i46;
  goto $bb25;
$bb30:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12091, 19} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($p22, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12091, 35} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p75, $i74);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12092, 19} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($p22, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12092, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p76, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12093, 19} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($p22, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12093, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p77, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12094, 51} true;
  assume {:verifier.code 0} true;
  $i78 := $load.i64($M.0, jiffies);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12094, 18} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12094, 28} true;
  assume {:verifier.code 0} true;
  $p80 := $bitcast.ref.ref($p79);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12094, 38} true;
  assume {:verifier.code 0} true;
  $p81 := $p80;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12094, 49} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p81, $i78);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12095, 18} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($p15, $mul.ref($i16, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12095, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p82, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12096, 11} true;
  assume {:verifier.code 0} true;
  $i83 := $add.i32($i13, 1);
  // WARNING: %96 = add i32 %16, 1, !dbg !8462, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i83);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12097, 18} true;
  assume {:verifier.code 0} true;
  $p84 := $add.ref($p1, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12097, 18} true;
  assume {:verifier.code 0} true;
  $i85 := $load.i32($M.0, $p84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12097, 24} true;
  assume {:verifier.code 0} true;
  $i86 := $eq.i32($i85, $i83);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12097, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i86} true;
  goto $bb31, $bb32;
$bb31:
  assume ($i86 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12099, 5} true;
  assume {:verifier.code 0} true;
  $i87 := 0;
  goto $bb33;
$bb32:
  assume !(($i86 == 1));
  assume {:verifier.code 0} true;
  $i87 := $i83;
  goto $bb33;
$bb33:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12102, 28} true;
  assume {:verifier.code 0} true;
  $i88 := $trunc.i32.i16($i87);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12102, 14} true;
  assume {:verifier.code 0} true;
  $p89 := $add.ref($p1, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12102, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p89, $i88);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12103, 5} true;
  assume {:verifier.code 0} true;
  $i90 := 1;
  goto $bb34;
$bb34:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12109, 1} true;
  assume {:verifier.code 0} true;
  $r := $i90;
  $exn := false;
  return;
$bb35:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12107, 3} true;
  assume {:verifier.code 0} true;
  $i90 := 0;
  goto $bb34;
}
const igbvf_tx_map_adv: ref;
axiom (igbvf_tx_map_adv == $sub.ref(0, 477835));
procedure  igbvf_tx_map_adv($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i16;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $i39: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $i71: i1;
  var $i72: i32;
  var $i73: i64;
  var $i74: i64;
  var $i75: i1;
  var $i76: i16;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i106: i32;
  var $i107: i32;
  var $i49: i32;
  var $i50: i32;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p115: ref;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i1;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $i134: i1;
  var $p135: ref;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i32;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $p143: ref;
  var $i144: i32;
  var $i145: i1;
  var $i132: i32;
  var $i133: i32;
  var $i114: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12159, 19} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 1184);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12159, 19} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12160, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := skb_headlen($p2);
  // WARNING: %6 = call i32 @skb_headlen(%struct.sk_buff* %2), !dbg !8343, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i5);
  // WARNING: call void @llvm.dbg.value(metadata i32 %6, i64 0, metadata !17535, metadata !8330), !dbg !17536, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %6, i64 0, metadata !17537, metadata !8330), !dbg !17538, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12163, 31} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p1, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12163, 31} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i16($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12163, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.i16.i32($i7);
  // WARNING: %9 = zext i16 %8 to i32, !dbg !8351, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12164, 26} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p1, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12164, 26} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12164, 40} true;
  assume {:verifier.code 0} true;
  $i11 := $zext.i32.i64($i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12164, 38} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p10, $mul.ref($i11, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12165, 37} true;
  assume {:verifier.code 0} true;
  $i13 := $ugt.i32($i5, 65535);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12165, 37} true;
  assume {:verifier.code 0} true;
  $i14 := $zext.i1.i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12165, 33} true;
  assume {:verifier.code 0} true;
  $i15 := $sext.i32.i64($i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12165, 13} true;
  assume {:verifier.code 0} true;
  call $i16 := ldv__builtin_expect($i15, 0);
  // WARNING: %17 = call i64 @ldv__builtin_expect(i64 %16, i64 0), !dbg !8361, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12166, 15} true;
  assume {:verifier.code 0} true;
  $i17 := $ne.i64($i16, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12166, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i17 == 1);
  call devirtbounce.4(0, .str.2, 2202, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12167, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12170, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12174, 45} true;
  assume {:verifier.code 0} true;
  $i18 := $trunc.i32.i16($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12174, 16} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p10, $mul.ref($i11, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12174, 26} true;
  assume {:verifier.code 0} true;
  $p20 := $bitcast.ref.ref($p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12174, 36} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p20, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12174, 43} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p21, $i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12175, 49} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i64($M.0, jiffies);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12175, 16} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p10, $mul.ref($i11, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12175, 26} true;
  assume {:verifier.code 0} true;
  $p24 := $bitcast.ref.ref($p23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12175, 36} true;
  assume {:verifier.code 0} true;
  $p25 := $p24;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12175, 47} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p25, $i22);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12176, 16} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($add.ref($p10, $mul.ref($i11, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12176, 26} true;
  assume {:verifier.code 0} true;
  $p27 := $bitcast.ref.ref($p26);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12176, 36} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p27, 18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12176, 51} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p28, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12177, 51} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p4, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12177, 69} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p2, 216);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12177, 69} true;
  assume {:verifier.code 0} true;
  $p31 := $load.ref($M.0, $p30);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12177, 75} true;
  assume {:verifier.code 0} true;
  $i32 := $zext.i32.i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12177, 22} true;
  assume {:verifier.code 0} true;
  call $i33 := dma_map_single_attrs($p29, $p31, $i32, 1, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12177, 16} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p10, $mul.ref($i11, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12177, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p34, $i33);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12179, 39} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($p4, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12179, 57} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p10, $mul.ref($i11, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12179, 57} true;
  assume {:verifier.code 0} true;
  $i37 := $load.i64($M.0, $p36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12179, 13} true;
  assume {:verifier.code 0} true;
  call $i38 := dma_mapping_error($p35, $i37);
  // WARNING: %43 = call i32 @dma_mapping_error(%struct.device* %40, i64 %42), !dbg !8392, !verifier.code !8334
  call {:cexpr "tmp___1"} boogie_si_record_i32($i38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12180, 15} true;
  assume {:verifier.code 0} true;
  $i39 := $ne.i32($i38, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12180, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i39 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12181, 5} true;
  assume {:verifier.code 0} true;
  $p40, $i41, $i42 := $p12, 0, $i8;
  goto $bb7;
$bb6:
  assume !(($i39 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12230, 45} true;
  assume {:verifier.code 0} true;
  $p115 := $add.ref($p4, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12230, 3} true;
  assume {:verifier.code 0} true;
  call $i116 := dev_err.ref.ref($p115, .str.18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12231, 16} true;
  assume {:verifier.code 0} true;
  $p117 := $p40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12231, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p117, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12232, 16} true;
  assume {:verifier.code 0} true;
  $p118 := $add.ref($p40, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12232, 26} true;
  assume {:verifier.code 0} true;
  $p119 := $bitcast.ref.ref($p118);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12232, 36} true;
  assume {:verifier.code 0} true;
  $p120 := $p119;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12232, 47} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p120, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12233, 16} true;
  assume {:verifier.code 0} true;
  $p121 := $add.ref($p40, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12233, 26} true;
  assume {:verifier.code 0} true;
  $p122 := $bitcast.ref.ref($p121);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12233, 36} true;
  assume {:verifier.code 0} true;
  $p123 := $add.ref($p122, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12233, 43} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p123, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12234, 16} true;
  assume {:verifier.code 0} true;
  $p124 := $add.ref($p40, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12234, 26} true;
  assume {:verifier.code 0} true;
  $p125 := $bitcast.ref.ref($p124);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12234, 36} true;
  assume {:verifier.code 0} true;
  $p126 := $add.ref($p125, 18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12234, 51} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p126, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12235, 13} true;
  assume {:verifier.code 0} true;
  $i127 := $ne.i32($i41, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12235, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i127} true;
  goto $bb28, $bb29;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12220, 13} true;
  assume {:verifier.code 0} true;
  call $p43 := skb_end_pointer($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12221, 59} true;
  assume {:verifier.code 0} true;
  $p44 := $bitcast.ref.ref($p43);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12221, 59} true;
  assume {:verifier.code 0} true;
  $p45 := $p44;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12221, 59} true;
  assume {:verifier.code 0} true;
  $i46 := $load.i8($M.0, $p45);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12221, 7} true;
  assume {:verifier.code 0} true;
  $i47 := $zext.i8.i32($i46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12221, 68} true;
  assume {:verifier.code 0} true;
  $i48 := $ugt.i32($i47, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12221, 7} true;
  assume {:verifier.code 0} true;
  $i49, $i50 := 0, $i8;
  assume {:branchcond $i48} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i48 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12221, 7} true;
  assume {:verifier.code 0} true;
  $i51, $i52, $i53 := 0, $i8, 0;
  goto $bb12;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12221, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i48 == 1));
  goto $bb11;
$bb11:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb12:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12222, 5} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12188, 17} true;
  assume {:verifier.code 0} true;
  $i54 := $add.i32($i53, 1);
  // WARNING: %55 = add i32 %.0317, 1, !dbg !8410, !verifier.code !8334
  call {:cexpr "count"} boogie_si_record_i32($i54);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12189, 9} true;
  assume {:verifier.code 0} true;
  $i55 := $add.i32($i52, 1);
  // WARNING: %56 = add i32 %.118, 1, !dbg !8411, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i55);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12190, 16} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($p1, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12190, 16} true;
  assume {:verifier.code 0} true;
  $i57 := $load.i32($M.0, $p56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12190, 22} true;
  assume {:verifier.code 0} true;
  $i58 := $eq.i32($i57, $i55);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12190, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i58} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i58 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12192, 3} true;
  assume {:verifier.code 0} true;
  $i59 := 0;
  goto $bb16;
$bb15:
  assume !(($i58 == 1));
  assume {:verifier.code 0} true;
  $i59 := $i55;
  goto $bb16;
$bb16:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12195, 13} true;
  assume {:verifier.code 0} true;
  call $p60 := skb_end_pointer($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12196, 84} true;
  assume {:verifier.code 0} true;
  $p61 := $bitcast.ref.ref($p60);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12196, 84} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($p61, 48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12196, 10} true;
  assume {:verifier.code 0} true;
  $p63 := $bitcast.ref.ref($p62);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12196, 93} true;
  assume {:verifier.code 0} true;
  $i64 := $zext.i32.i64($i51);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12196, 91} true;
  assume {:verifier.code 0} true;
  $p65 := $add.ref($p63, $mul.ref($i64, 16));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12197, 9} true;
  assume {:verifier.code 0} true;
  call $i66 := skb_frag_size($p65);
  // WARNING: %69 = call i32 @skb_frag_size(%struct.skb_frag_struct* %68), !dbg !8427, !verifier.code !8334
  call {:cexpr "len"} boogie_si_record_i32($i66);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12198, 26} true;
  assume {:verifier.code 0} true;
  $p67 := $add.ref($p1, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12198, 26} true;
  assume {:verifier.code 0} true;
  $p68 := $load.ref($M.0, $p67);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12198, 40} true;
  assume {:verifier.code 0} true;
  $i69 := $zext.i32.i64($i59);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12198, 38} true;
  assume {:verifier.code 0} true;
  $p70 := $add.ref($p68, $mul.ref($i69, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12199, 37} true;
  assume {:verifier.code 0} true;
  $i71 := $ugt.i32($i66, 65535);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12199, 37} true;
  assume {:verifier.code 0} true;
  $i72 := $zext.i1.i32($i71);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12199, 33} true;
  assume {:verifier.code 0} true;
  $i73 := $sext.i32.i64($i72);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12199, 13} true;
  assume {:verifier.code 0} true;
  call $i74 := ldv__builtin_expect($i73, 0);
  // WARNING: %77 = call i64 @ldv__builtin_expect(i64 %76, i64 0), !dbg !8433, !verifier.code !8334
  call {:cexpr "tmp___3"} boogie_si_record_i64($i74);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12200, 15} true;
  assume {:verifier.code 0} true;
  $i75 := $ne.i64($i74, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12200, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i75} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i75 == 1);
  call devirtbounce.4(0, .str.2, 2225, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12201, 5} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb18:
  assume !(($i75 == 1));
  assume {:verifier.code 0} true;
  goto $bb20;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12204, 5} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12208, 45} true;
  assume {:verifier.code 0} true;
  $i76 := $trunc.i32.i16($i66);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12208, 16} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($add.ref($p68, $mul.ref($i69, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12208, 26} true;
  assume {:verifier.code 0} true;
  $p78 := $bitcast.ref.ref($p77);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12208, 36} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($p78, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12208, 43} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p79, $i76);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12209, 49} true;
  assume {:verifier.code 0} true;
  $i80 := $load.i64($M.0, jiffies);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12209, 16} true;
  assume {:verifier.code 0} true;
  $p81 := $add.ref($add.ref($p68, $mul.ref($i69, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12209, 26} true;
  assume {:verifier.code 0} true;
  $p82 := $bitcast.ref.ref($p81);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12209, 36} true;
  assume {:verifier.code 0} true;
  $p83 := $p82;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12209, 47} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p83, $i80);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12210, 16} true;
  assume {:verifier.code 0} true;
  $p84 := $add.ref($add.ref($p68, $mul.ref($i69, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12210, 26} true;
  assume {:verifier.code 0} true;
  $p85 := $bitcast.ref.ref($p84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12210, 36} true;
  assume {:verifier.code 0} true;
  $p86 := $add.ref($p85, 18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12210, 51} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p86, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12211, 47} true;
  assume {:verifier.code 0} true;
  $p87 := $add.ref($p4, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12211, 63} true;
  assume {:verifier.code 0} true;
  $i88 := $zext.i32.i64($i66);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12211, 22} true;
  assume {:verifier.code 0} true;
  call $i89 := skb_frag_dma_map($p87, $p65, 0, $i88, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12211, 16} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($p68, $mul.ref($i69, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12211, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p90, $i89);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12212, 39} true;
  assume {:verifier.code 0} true;
  $p91 := $add.ref($p4, 152);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12212, 57} true;
  assume {:verifier.code 0} true;
  $p92 := $add.ref($p68, $mul.ref($i69, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12212, 57} true;
  assume {:verifier.code 0} true;
  $i93 := $load.i64($M.0, $p92);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12212, 13} true;
  assume {:verifier.code 0} true;
  call $i94 := dma_mapping_error($p91, $i93);
  // WARNING: %101 = call i32 @dma_mapping_error(%struct.device* %98, i64 %100), !dbg !8463, !verifier.code !8334
  call {:cexpr "tmp___4"} boogie_si_record_i32($i94);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12213, 15} true;
  assume {:verifier.code 0} true;
  $i95 := $ne.i32($i94, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12213, 7} true;
  assume {:verifier.code 0} true;
  $i96, $i97, $p98 := $i54, $i59, $p70;
  assume {:branchcond $i95} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i95 == 1);
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12214, 5} true;
  assume {:verifier.code 0} true;
  $p40, $i41, $i42 := $p98, $i96, $i97;
  goto $bb7;
$bb22:
  assume !(($i95 == 1));
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12218, 9} true;
  assume {:verifier.code 0} true;
  $i99 := $add.i32($i51, 1);
  // WARNING: %106 = add i32 %.0119, 1, !dbg !8471, !verifier.code !8334
  call {:cexpr "f"} boogie_si_record_i32($i99);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12220, 13} true;
  assume {:verifier.code 0} true;
  call $p100 := skb_end_pointer($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12221, 59} true;
  assume {:verifier.code 0} true;
  $p101 := $bitcast.ref.ref($p100);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12221, 59} true;
  assume {:verifier.code 0} true;
  $p102 := $p101;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12221, 59} true;
  assume {:verifier.code 0} true;
  $i103 := $load.i8($M.0, $p102);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12221, 7} true;
  assume {:verifier.code 0} true;
  $i104 := $zext.i8.i32($i103);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12221, 68} true;
  assume {:verifier.code 0} true;
  $i105 := $ugt.i32($i104, $i99);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12221, 7} true;
  assume {:verifier.code 0} true;
  $i51, $i52, $i53, $i106, $i107 := $i99, $i59, $i54, $i54, $i59;
  assume {:branchcond $i105} true;
  goto $bb24, $bb25;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12221, 7} true;
  assume {:verifier.code 0} true;
  assume ($i105 == 1);
  goto $bb12;
$bb25:
  assume !(($i105 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12221, 7} true;
  assume {:verifier.code 0} true;
  $i49, $i50 := $i106, $i107;
  goto $bb11;
$bb26:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12226, 13} true;
  assume {:verifier.code 0} true;
  $p108 := $add.ref($p1, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12226, 13} true;
  assume {:verifier.code 0} true;
  $p109 := $load.ref($M.0, $p108);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12226, 27} true;
  assume {:verifier.code 0} true;
  $i110 := $zext.i32.i64($i50);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12226, 25} true;
  assume {:verifier.code 0} true;
  $p111 := $add.ref($p109, $mul.ref($i110, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12226, 47} true;
  assume {:verifier.code 0} true;
  $p112 := $add.ref($add.ref($p109, $mul.ref($i110, 40)), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12226, 51} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p112, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12227, 17} true;
  assume {:verifier.code 0} true;
  $i113 := $add.i32($i49, 1);
  // WARNING: %121 = add i32 %.03.lcssa, 1, !dbg !8479, !verifier.code !8334
  call {:cexpr "count"} boogie_si_record_i32($i113);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12228, 3} true;
  assume {:verifier.code 0} true;
  $i114 := $i113;
  goto $bb27;
$bb27:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12261, 1} true;
  assume {:verifier.code 0} true;
  $r := $i114;
  $exn := false;
  return;
$bb28:
  assume ($i127 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12236, 19} true;
  assume {:verifier.code 0} true;
  $i128 := $sub.i32($i41, 1);
  // WARNING: %137 = sub i32 %.14, 1, !dbg !8500, !verifier.code !8334
  call {:cexpr "count"} boogie_si_record_i32($i128);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12237, 3} true;
  assume {:verifier.code 0} true;
  $i129 := $i128;
  goto $bb30;
$bb29:
  assume !(($i127 == 1));
  assume {:verifier.code 0} true;
  $i129 := $i41;
  goto $bb30;
$bb30:
  assume {:verifier.code 0} true;
  // WARNING: %.25 = phi i32 [ %137, %136 ], [ %.14, %138 ], !verifier.code !8334
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12252, 17} true;
  assume {:verifier.code 0} true;
  $i130 := $sub.i32($i129, 1);
  // WARNING: %140 = sub i32 %.25, 1, !dbg !8505, !verifier.code !8334
  call {:cexpr "count"} boogie_si_record_i32($i130);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12253, 15} true;
  assume {:verifier.code 0} true;
  $i131 := $ne.i32($i129, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12253, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i131} true;
  goto $bb31, $bb32;
$bb31:
  assume ($i131 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12253, 7} true;
  assume {:verifier.code 0} true;
  $i132, $i133 := $i130, $i42;
  goto $bb34;
$bb32:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12253, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i131 == 1));
  goto $bb33;
$bb33:
  assume {:verifier.code 0} true;
  goto $bb41;
$bb34:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12254, 5} true;
  assume {:verifier.code 0} true;
  goto $bb35;
$bb35:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12242, 9} true;
  assume {:verifier.code 0} true;
  $i134 := $eq.i32($i133, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12242, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i134} true;
  goto $bb36, $bb37;
$bb36:
  assume ($i134 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12243, 18} true;
  assume {:verifier.code 0} true;
  $p135 := $add.ref($p1, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12243, 18} true;
  assume {:verifier.code 0} true;
  $i136 := $load.i32($M.0, $p135);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12243, 24} true;
  assume {:verifier.code 0} true;
  $i137 := $add.i32($i136, $i133);
  // WARNING: %147 = add i32 %146, %.416, !dbg !8514, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i137);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12244, 3} true;
  assume {:verifier.code 0} true;
  $i138 := $i137;
  goto $bb38;
$bb37:
  assume !(($i134 == 1));
  assume {:verifier.code 0} true;
  $i138 := $i133;
  goto $bb38;
$bb38:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12247, 9} true;
  assume {:verifier.code 0} true;
  $i139 := $sub.i32($i138, 1);
  // WARNING: %150 = sub i32 %.3, 1, !dbg !8516, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i139);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12248, 26} true;
  assume {:verifier.code 0} true;
  $p140 := $add.ref($p1, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12248, 26} true;
  assume {:verifier.code 0} true;
  $p141 := $load.ref($M.0, $p140);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12248, 40} true;
  assume {:verifier.code 0} true;
  $i142 := $zext.i32.i64($i139);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12248, 38} true;
  assume {:verifier.code 0} true;
  $p143 := $add.ref($p141, $mul.ref($i142, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12249, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_put_txbuf($p0, $p143);
  // WARNING: call void @igbvf_put_txbuf(%struct.igbvf_adapter* %0, %struct.igbvf_buffer* %154), !dbg !8520, !verifier.code !8334
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12252, 17} true;
  assume {:verifier.code 0} true;
  $i144 := $sub.i32($i132, 1);
  // WARNING: %155 = sub i32 %158, 1, !dbg !8505, !verifier.code !8334
  call {:cexpr "count"} boogie_si_record_i32($i144);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12253, 15} true;
  assume {:verifier.code 0} true;
  $i145 := $ne.i32($i132, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12253, 7} true;
  assume {:verifier.code 0} true;
  $i132, $i133 := $i144, $i139;
  assume {:branchcond $i145} true;
  goto $bb39, $bb40;
$bb39:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12253, 7} true;
  assume {:verifier.code 0} true;
  assume ($i145 == 1);
  goto $bb34;
$bb40:
  assume !(($i145 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12253, 7} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb41:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12259, 3} true;
  assume {:verifier.code 0} true;
  $i114 := 0;
  goto $bb27;
}
const igbvf_tx_queue_adv: ref;
axiom (igbvf_tx_queue_adv == $sub.ref(0, 478867));
procedure  igbvf_tx_queue_adv($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i8)
{
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i19: i32;
  var $i20: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i36: i32;
  var $i37: i32;
  var $p68: ref;
  var $i69: i32;
  var $p34: ref;
  var $i35: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i16;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i16;
  var $i92: i64;
  var $p93: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.igbvf_ring* %1, i64 0, metadata !17721, metadata !8330), !dbg !17722, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %2, i64 0, metadata !17723, metadata !8330), !dbg !17724, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !17725, metadata !8330), !dbg !17726, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %4, i64 0, metadata !17727, metadata !8330), !dbg !17728, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %5, i64 0, metadata !17729, metadata !8330), !dbg !17730, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata %union.e1000_adv_tx_desc* null, i64 0, metadata !17733, metadata !8330), !dbg !17734, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !17735, metadata !8330), !dbg !17736, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12277, 17} true;
  assume {:verifier.code 0} true;
  $i7 := $and.i32($i2, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12277, 22} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12277, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12278, 33} true;
  assume {:verifier.code 0} true;
  $i9 := $or.i32(573571072, 1073741824);
  // WARNING: %11 = or i32 573571072, 1073741824, !dbg !8358, !verifier.code !8334
  call {:cexpr "cmd_type_len"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12279, 3} true;
  assume {:verifier.code 0} true;
  $i10 := $i9;
  goto $bb3;
$bb2:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  $i10 := 573571072;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12282, 17} true;
  assume {:verifier.code 0} true;
  $i11 := $and.i32($i2, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12282, 22} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i32($i11, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12282, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12283, 33} true;
  assume {:verifier.code 0} true;
  $i13 := $or.i32($i10, $sub.i32(0, 2147483648));
  // WARNING: %17 = or i32 %.01, -2147483648, !dbg !8365, !verifier.code !8334
  call {:cexpr "cmd_type_len"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12284, 35} true;
  assume {:verifier.code 0} true;
  $i14 := $or.i32(0, 512);
  // WARNING: %18 = or i32 0, 512, !dbg !8367, !verifier.code !8334
  call {:cexpr "olinfo_status"} boogie_si_record_i32($i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12285, 19} true;
  assume {:verifier.code 0} true;
  $i15 := $and.i32($i2, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12285, 24} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i32($i15, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12285, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb6, $bb7;
$bb5:
  assume !(($i12 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12291, 16} true;
  assume {:verifier.code 0} true;
  $i21 := $and.i32($i2, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12291, 16} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.i32($i21, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12291, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb10, $bb11;
$bb6:
  assume ($i16 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12286, 37} true;
  assume {:verifier.code 0} true;
  $i17 := $or.i32($i14, 256);
  // WARNING: %22 = or i32 %18, 256, !dbg !8372, !verifier.code !8334
  call {:cexpr "olinfo_status"} boogie_si_record_i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12287, 5} true;
  assume {:verifier.code 0} true;
  $i18 := $i17;
  goto $bb8;
$bb7:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  $i18 := $i14;
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12290, 3} true;
  assume {:verifier.code 0} true;
  $i19, $i20 := $i18, $i13;
  goto $bb9;
$bb9:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12296, 30} true;
  assume {:verifier.code 0} true;
  $i25 := $zext.i8.i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12296, 28} true;
  assume {:verifier.code 0} true;
  $i26 := $sub.i32($i5, $i25);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12296, 45} true;
  assume {:verifier.code 0} true;
  $i27 := $shl.i32($i26, 14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12296, 52} true;
  assume {:verifier.code 0} true;
  $i28 := $or.i32($i27, $i19);
  // WARNING: %36 = or i32 %35, %.2, !dbg !8385, !verifier.code !8334
  call {:cexpr "olinfo_status"} boogie_si_record_i32($i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12297, 31} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p1, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12297, 31} true;
  assume {:verifier.code 0} true;
  $i30 := $load.i16($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12297, 7} true;
  assume {:verifier.code 0} true;
  $i31 := $zext.i16.i32($i30);
  // WARNING: %39 = zext i16 %38 to i32, !dbg !8387, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i31);
  // WARNING: call void @llvm.dbg.value(metadata i32 %39, i64 0, metadata !17774, metadata !8330), !dbg !17775, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12313, 17} true;
  assume {:verifier.code 0} true;
  $i32 := $sub.i32($i3, 1);
  // WARNING: %40 = sub nsw i32 %3, 1, !dbg !8392, !verifier.code !8334
  call {:cexpr "count"} boogie_si_record_i32($i32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12314, 11} true;
  assume {:verifier.code 0} true;
  $i33 := $ne.i32($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12314, 7} true;
  assume {:verifier.code 0} true;
  $p34, $i35 := $0.ref, $i31;
  assume {:branchcond $i33} true;
  goto $bb13, $bb14;
$bb10:
  assume ($i22 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12292, 35} true;
  assume {:verifier.code 0} true;
  $i23 := $or.i32(0, 512);
  // WARNING: %29 = or i32 0, 512, !dbg !8379, !verifier.code !8334
  call {:cexpr "olinfo_status"} boogie_si_record_i32($i23);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12293, 3} true;
  assume {:verifier.code 0} true;
  $i24 := $i23;
  goto $bb12;
$bb11:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  $i24 := 0;
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i19, $i20 := $i24, $i10;
  goto $bb9;
$bb13:
  assume ($i33 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12314, 7} true;
  assume {:verifier.code 0} true;
  $i36, $i37 := $i32, $i31;
  goto $bb16;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12314, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i33 == 1));
  goto $bb15;
$bb15:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb16:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12315, 5} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12300, 26} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p1, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12300, 26} true;
  assume {:verifier.code 0} true;
  $p39 := $load.ref($M.0, $p38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12300, 40} true;
  assume {:verifier.code 0} true;
  $i40 := $zext.i32.i64($i37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12300, 38} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($p39, $mul.ref($i40, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12301, 25} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12301, 25} true;
  assume {:verifier.code 0} true;
  $p43 := $load.ref($M.0, $p42);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12301, 32} true;
  assume {:verifier.code 0} true;
  $i44 := $zext.i32.i64($i37);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12301, 30} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($p43, $mul.ref($i44, 16));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12301, 52} true;
  assume {:verifier.code 0} true;
  $p46 := $bitcast.ref.ref($p45);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12302, 44} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($p39, $mul.ref($i40, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12302, 44} true;
  assume {:verifier.code 0} true;
  $i48 := $load.i64($M.0, $p47);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12302, 12} true;
  assume {:verifier.code 0} true;
  $p49 := $bitcast.ref.ref($p46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12302, 17} true;
  assume {:verifier.code 0} true;
  $p50 := $p49;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12302, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p50, $i48);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12303, 51} true;
  assume {:verifier.code 0} true;
  $p51 := $add.ref($add.ref($p39, $mul.ref($i40, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12303, 61} true;
  assume {:verifier.code 0} true;
  $p52 := $bitcast.ref.ref($p51);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12303, 71} true;
  assume {:verifier.code 0} true;
  $p53 := $add.ref($p52, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12303, 71} true;
  assume {:verifier.code 0} true;
  $i54 := $load.i16($M.0, $p53);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12303, 32} true;
  assume {:verifier.code 0} true;
  $i55 := $zext.i16.i32($i54);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12303, 78} true;
  assume {:verifier.code 0} true;
  $i56 := $or.i32($i55, $i20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12303, 12} true;
  assume {:verifier.code 0} true;
  $p57 := $bitcast.ref.ref($p46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12303, 17} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($p57, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12303, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p58, $i56);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12304, 12} true;
  assume {:verifier.code 0} true;
  $p59 := $bitcast.ref.ref($p46);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12304, 17} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($p59, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12304, 31} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p60, $i28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12305, 9} true;
  assume {:verifier.code 0} true;
  $i61 := $add.i32($i37, 1);
  // WARNING: %66 = add i32 %.17, 1, !dbg !8420, !verifier.code !8334
  call {:cexpr "i"} boogie_si_record_i32($i61);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12306, 16} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($p1, 28);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12306, 16} true;
  assume {:verifier.code 0} true;
  $i63 := $load.i32($M.0, $p62);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12306, 22} true;
  assume {:verifier.code 0} true;
  $i64 := $eq.i32($i63, $i61);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12306, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i64} true;
  goto $bb18, $bb19;
$bb18:
  assume ($i64 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12308, 3} true;
  assume {:verifier.code 0} true;
  $i65 := 0;
  goto $bb20;
$bb19:
  assume !(($i64 == 1));
  assume {:verifier.code 0} true;
  $i65 := $i61;
  goto $bb20;
$bb20:
  assume {:verifier.code 0} true;
  // WARNING: %.0 = phi i32 [ 0, %70 ], [ %66, %71 ], !verifier.code !8334
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12313, 17} true;
  assume {:verifier.code 0} true;
  $i66 := $sub.i32($i36, 1);
  // WARNING: %73 = sub nsw i32 %76, 1, !dbg !8392, !verifier.code !8334
  call {:cexpr "count"} boogie_si_record_i32($i66);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12314, 11} true;
  assume {:verifier.code 0} true;
  $i67 := $ne.i32($i36, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12314, 7} true;
  assume {:verifier.code 0} true;
  $i36, $i37, $p68, $i69 := $i66, $i65, $p45, $i65;
  assume {:branchcond $i67} true;
  goto $bb21, $bb22;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12314, 7} true;
  assume {:verifier.code 0} true;
  assume ($i67 == 1);
  goto $bb16;
$bb22:
  assume !(($i67 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12314, 7} true;
  assume {:verifier.code 0} true;
  $p34, $i35 := $p68, $i69;
  goto $bb15;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12319, 41} true;
  assume {:verifier.code 0} true;
  $p70 := $bitcast.ref.ref($p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12319, 46} true;
  assume {:verifier.code 0} true;
  $p71 := $add.ref($p70, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12319, 46} true;
  assume {:verifier.code 0} true;
  $i72 := $load.i32($M.0, $p71);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12319, 70} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($p0, 1060);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12319, 70} true;
  assume {:verifier.code 0} true;
  $i74 := $load.i32($M.0, $p73);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12319, 59} true;
  assume {:verifier.code 0} true;
  $i75 := $or.i32($i72, $i74);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12319, 12} true;
  assume {:verifier.code 0} true;
  $p76 := $bitcast.ref.ref($p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12319, 17} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($p76, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12319, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p77, $i75);
  call devirtbounce.5(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12321, 13} true;
  assume {:verifier.code 0} true;
  $p78 := $add.ref($p1, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12321, 13} true;
  assume {:verifier.code 0} true;
  $p79 := $load.ref($M.0, $p78);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12321, 27} true;
  assume {:verifier.code 0} true;
  $i80 := $zext.i32.i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12321, 25} true;
  assume {:verifier.code 0} true;
  $p81 := $add.ref($p79, $mul.ref($i80, 40));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12321, 51} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($add.ref($p79, $mul.ref($i80, 40)), 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12321, 61} true;
  assume {:verifier.code 0} true;
  $p83 := $bitcast.ref.ref($p82);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12321, 71} true;
  assume {:verifier.code 0} true;
  $p84 := $add.ref($p83, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12321, 85} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p84, $p34);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12322, 26} true;
  assume {:verifier.code 0} true;
  $i85 := $trunc.i32.i16($i35);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12322, 12} true;
  assume {:verifier.code 0} true;
  $p86 := $add.ref($p1, 32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12322, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p86, $i85);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12323, 41} true;
  assume {:verifier.code 0} true;
  $p87 := $add.ref($p0, 1448);
  $p88 := $add.ref($add.ref($p0, 1448), 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12323, 44} true;
  assume {:verifier.code 0} true;
  $p89 := $load.ref($M.0, $p88);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12323, 79} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($p1, 38);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12323, 79} true;
  assume {:verifier.code 0} true;
  $i91 := $load.i16($M.0, $p90);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12323, 54} true;
  assume {:verifier.code 0} true;
  $i92 := $zext.i16.i64($i91);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12323, 52} true;
  assume {:verifier.code 0} true;
  $p93 := $add.ref($p89, $mul.ref($i92, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12323, 3} true;
  assume {:verifier.code 0} true;
  call writel($i35, $p93);
  call devirtbounce.5(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 12325, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const skb_frag_size: ref;
axiom (skb_frag_size == $sub.ref(0, 479899));
procedure  skb_frag_size($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8979, 32} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8979, 32} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i32($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8979, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const skb_frag_dma_map: ref;
axiom (skb_frag_dma_map == $sub.ref(0, 480931));
procedure  skb_frag_dma_map($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32)
  returns ($r: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.skb_frag_struct* %1, i64 0, metadata !17854, metadata !8330), !dbg !17855, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i64 %2, i64 0, metadata !17856, metadata !8330), !dbg !17857, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i64 %3, i64 0, metadata !17858, metadata !8330), !dbg !17859, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9137, 9} true;
  assume {:verifier.code 0} true;
  call $p5 := skb_frag_page($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9138, 51} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9138, 51} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i32($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9138, 36} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.i32.i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9138, 63} true;
  assume {:verifier.code 0} true;
  $i9 := $add.i64($i8, $i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9138, 13} true;
  assume {:verifier.code 0} true;
  call $i10 := dma_map_page($p0, $p5, $i9, $i3, $i4);
  // WARNING: %11 = call i64 @dma_map_page(%struct.device* %0, %struct.page* %6, i64 %10, i64 %3, i32 %4), !dbg !8352, !verifier.code !8336
  call {:cexpr "tmp___0"} boogie_si_record_i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9139, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const skb_frag_page: ref;
axiom (skb_frag_page == $sub.ref(0, 481963));
procedure  skb_frag_page($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9127, 32} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  $p2 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9127, 37} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9127, 3} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const skb_network_offset: ref;
axiom (skb_network_offset == $sub.ref(0, 482995));
procedure  skb_network_offset($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9094, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := skb_network_header($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9095, 34} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9095, 18} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i64.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9095, 76} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 216);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9095, 76} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9095, 64} true;
  assume {:verifier.code 0} true;
  $i6 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9095, 48} true;
  assume {:verifier.code 0} true;
  $i7 := $trunc.i64.i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9095, 46} true;
  assume {:verifier.code 0} true;
  $i8 := $sub.i32($i3, $i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9095, 3} true;
  assume {:verifier.code 0} true;
  $r := $i8;
  $exn := false;
  return;
}
const skb_transport_header: ref;
axiom (skb_transport_header == $sub.ref(0, 484027));
procedure  skb_transport_header($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i64;
  var $p6: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9078, 33} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 208);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9078, 33} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9078, 61} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 192);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9078, 61} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i16($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9078, 40} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i16.i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9078, 38} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p2, $mul.ref($i5, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9078, 3} true;
  assume {:verifier.code 0} true;
  $r := $p6;
  $exn := false;
  return;
}
const skb_network_header: ref;
axiom (skb_network_header == $sub.ref(0, 485059));
procedure  skb_network_header($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i64;
  var $p6: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9086, 33} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 208);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9086, 33} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9086, 61} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 194);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9086, 61} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i16($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9086, 40} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i16.i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9086, 38} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p2, $mul.ref($i5, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9086, 3} true;
  assume {:verifier.code 0} true;
  $r := $p6;
  $exn := false;
  return;
}
const ip_hdr: ref;
axiom (ip_hdr == $sub.ref(0, 486091));
procedure  ip_hdr($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9624, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := skb_network_header($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9625, 11} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9625, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const ipv6_hdr: ref;
axiom (ipv6_hdr == $sub.ref(0, 487123));
procedure  ipv6_hdr($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9615, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := skb_network_header($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9616, 11} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9616, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const skb_cow_head: ref;
axiom (skb_cow_head == $sub.ref(0, 488155));
procedure  skb_cow_head($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.sk_buff* %0, i64 0, metadata !17941, metadata !8330), !dbg !17942, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9182, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := skb_header_cloned($p0);
  // WARNING: %3 = call i32 @skb_header_cloned(%struct.sk_buff* %0), !dbg !8337, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9183, 13} true;
  assume {:verifier.code 0} true;
  call $i3 := __skb_cow($p0, $i1, $i2);
  // WARNING: %4 = call i32 @__skb_cow(%struct.sk_buff* %0, i32 %1, i32 %3), !dbg !8341, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9184, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const tcp_hdrlen: ref;
axiom (tcp_hdrlen == $sub.ref(0, 489187));
procedure  tcp_hdrlen($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i16;
  var $i5: i16;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9606, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := tcp_hdr($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9607, 38} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p1, 12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9607, 38} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i16($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9607, 38} true;
  assume {:verifier.code 0} true;
  $i4 := $lshr.i16($i3, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9607, 38} true;
  assume {:verifier.code 0} true;
  $i5 := $and.i16($i4, 15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9607, 38} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.i16.i8($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9607, 27} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i8.i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9607, 43} true;
  assume {:verifier.code 0} true;
  $i8 := $mul.i32($i7, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9607, 3} true;
  assume {:verifier.code 0} true;
  $r := $i8;
  $exn := false;
  return;
}
const tcp_hdr: ref;
axiom (tcp_hdr == $sub.ref(0, 490219));
procedure  tcp_hdr($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9597, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := skb_transport_header($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9598, 11} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9598, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const csum_tcpudp_magic: ref;
axiom (csum_tcpudp_magic == $sub.ref(0, 491251));
procedure  csum_tcpudp_magic($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32)
  returns ($r: i16)
{
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !17978, metadata !8330), !dbg !17979, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !17980, metadata !8330), !dbg !17981, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i16 %2, i64 0, metadata !17982, metadata !8330), !dbg !17983, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i16 %3, i64 0, metadata !17984, metadata !8330), !dbg !17985, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8513, 42} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i16.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8513, 42} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.i32.i16($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8513, 53} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i16.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8513, 53} true;
  assume {:verifier.code 0} true;
  $i8 := $trunc.i32.i16($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8513, 9} true;
  assume {:verifier.code 0} true;
  call $i9 := csum_tcpudp_nofold($i0, $i1, $i6, $i8, $i4);
  // WARNING: %10 = call i32 @csum_tcpudp_nofold(i32 %0, i32 %1, i16 zeroext %7, i16 zeroext %9, i32 %4), !dbg !8346, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8514, 13} true;
  assume {:verifier.code 0} true;
  call $i10 := csum_fold($i9);
  // WARNING: %11 = call zeroext i16 @csum_fold(i32 %10), !dbg !8349, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i16($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8515, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const skb_is_gso_v6: ref;
axiom (skb_is_gso_v6 == $sub.ref(0, 492283));
procedure  skb_is_gso_v6($p0: ref)
  returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9201, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := skb_end_pointer($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9202, 51} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9202, 51} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9202, 51} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i16($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9202, 12} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i16.i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9202, 60} true;
  assume {:verifier.code 0} true;
  $i6 := $and.i32($i5, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9202, 66} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i32($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9202, 3} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
}
const csum_ipv6_magic: ref;
axiom (csum_ipv6_magic == $sub.ref(0, 493315));
procedure  csum_ipv6_magic($p0: ref, $p1: ref, $i2: i32, $i3: i16, $i4: i32)
  returns ($r: i16);
const csum_tcpudp_nofold: ref;
axiom (csum_tcpudp_nofold == $sub.ref(0, 494347));
procedure  csum_tcpudp_nofold($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32)
  returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !18013, metadata !8330), !dbg !18014, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !18015, metadata !8330), !dbg !18016, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i16 %2, i64 0, metadata !18017, metadata !8330), !dbg !18018, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i16 %3, i64 0, metadata !18019, metadata !8330), !dbg !18020, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8502, 32} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i16.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8502, 44} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i16.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8502, 42} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i32($i5, $i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8502, 57} true;
  assume {:verifier.code 0} true;
  $i8 := $shl.i32($i7, 8);
  call $i9 := devirtbounce.22(0, $i1, $i0, $i8, $i4);
  // WARNING: %10 = call i32 @devirtbounce.22(i32 (i32, i32, i32, i32)* asm "  addl $1, $0\0A  adcl $2, $0\0A  adcl $3, $0\0A  adcl $$0, $0\0A", "=r,imr,imr,imr,0,~{dirflag},~{fpsr},~{flags}", i32 %1, i32 %0, i32 %9, i32 %4)
  call {:cexpr "sum"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8503, 3} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
}
const csum_fold: ref;
axiom (csum_fold == $sub.ref(0, 495379));
procedure  csum_fold($i0: i32)
  returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8491, 69} true;
  assume {:verifier.code 0} true;
  $i1 := $shl.i32($i0, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8491, 86} true;
  assume {:verifier.code 0} true;
  $i2 := $and.i32($i0, $sub.i32(0, 65536));
  call $i3 := devirtbounce.23(0, $i1, $i2);
  // WARNING: %4 = call i32 @devirtbounce.23(i32 (i32, i32)* asm "  addl $1,$0\0A  adcl $$0xffff,$0", "=r,r,0,~{dirflag},~{fpsr},~{flags}", i32 %2, i32 %3)
  call {:cexpr "sum"} boogie_si_record_i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8492, 22} true;
  assume {:verifier.code 0} true;
  $i4 := $xor.i32($i3, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8492, 28} true;
  assume {:verifier.code 0} true;
  $i5 := $lshr.i32($i4, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8492, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.i32.i16($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8492, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const skb_header_cloned: ref;
axiom (skb_header_cloned == $sub.ref(0, 496411));
procedure  skb_header_cloned($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i6: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9012, 24} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9012, 45} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p1, 124);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9012, 22} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i8($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9012, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i8.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9012, 54} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9012, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9013, 5} true;
  assume {:verifier.code 0} true;
  $i6 := 0;
  goto $bb3;
$bb2:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9022, 1} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9017, 9} true;
  assume {:verifier.code 0} true;
  call $p7 := skb_end_pointer($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9018, 81} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9018, 81} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p8, 36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9018, 13} true;
  assume {:verifier.code 0} true;
  call $i10 := atomic_read($p9);
  // WARNING: %13 = call i32 @atomic_read(%struct.__anonstruct_atomic_t_6* %12), !dbg !8349, !verifier.code !8334
  call {:cexpr "dataref"} boogie_si_record_i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9019, 22} true;
  assume {:verifier.code 0} true;
  $i11 := $and.i32($i10, 65535);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9019, 42} true;
  assume {:verifier.code 0} true;
  $i12 := $ashr.i32($i10, 16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9019, 31} true;
  assume {:verifier.code 0} true;
  $i13 := $sub.i32($i11, $i12);
  // WARNING: %16 = sub nsw i32 %14, %15, !dbg !8354, !verifier.code !8334
  call {:cexpr "dataref"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9020, 19} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i32($i13, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9020, 19} true;
  assume {:verifier.code 0} true;
  $i15 := $zext.i1.i32($i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9020, 3} true;
  assume {:verifier.code 0} true;
  $i6 := $i15;
  goto $bb3;
}
const __skb_cow: ref;
axiom (__skb_cow == $sub.ref(0, 497443));
procedure  __skb_cow($p0: ref, $i1: i32, $i2: i32)
  returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.sk_buff* %0, i64 0, metadata !18070, metadata !8330), !dbg !18071, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !18072, metadata !8330), !dbg !18073, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 %2, i64 0, metadata !18074, metadata !8330), !dbg !18075, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9155, 13} true;
  assume {:verifier.code 0} true;
  call $i3 := skb_headroom($p0);
  // WARNING: %4 = call i32 @skb_headroom(%struct.sk_buff* %0), !dbg !8341, !verifier.code !8334
  call {:cexpr "tmp___0"} boogie_si_record_i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9156, 15} true;
  assume {:verifier.code 0} true;
  $i4 := $ult.i32($i3, $i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9156, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9157, 11} true;
  assume {:verifier.code 0} true;
  call $i5 := skb_headroom($p0);
  // WARNING: %7 = call i32 @skb_headroom(%struct.sk_buff* %0), !dbg !8348, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9158, 29} true;
  assume {:verifier.code 0} true;
  $i6 := $sub.i32($i1, $i5);
  // WARNING: %8 = sub i32 %1, %7, !dbg !8352, !verifier.code !8334
  call {:cexpr "delta"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9159, 3} true;
  assume {:verifier.code 0} true;
  $i7 := $i6;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  $i7 := 0;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9162, 13} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9162, 18} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb4, $bb6;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9162, 18} true;
  assume {:verifier.code 0} true;
  assume ($i8 == 1);
  goto $bb5;
$bb5:
  // WARNING: call void @llvm.dbg.value(metadata i32 32, i64 0, metadata !18097, metadata !8330), !dbg !18098, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 64, i64 0, metadata !18099, metadata !8330), !dbg !18100, !verifier.code !8332
  // WARNING: call void @llvm.dbg.value(metadata i32 32, i64 0, metadata !18101, metadata !8330), !dbg !18102, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9167, 46} true;
  assume {:verifier.code 0} true;
  $i10 := $sgt.i32(32, 64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9167, 40} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb9, $bb10;
$bb6:
  assume !(($i8 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9162, 28} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9162, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb7, $bb8;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9162, 7} true;
  assume {:verifier.code 0} true;
  assume ($i9 == 1);
  goto $bb5;
$bb8:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb9:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9167, 40} true;
  assume {:verifier.code 0} true;
  $i11 := 32;
  goto $bb11;
$bb10:
  assume !(($i10 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9167, 40} true;
  assume {:verifier.code 0} true;
  $i11 := 64;
  goto $bb11;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9167, 40} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9167, 71} true;
  assume {:verifier.code 0} true;
  $i12 := $add.i32($i11, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9167, 77} true;
  assume {:verifier.code 0} true;
  $i13 := $add.i32($i12, $i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9167, 101} true;
  assume {:verifier.code 0} true;
  $i14 := $sgt.i32(32, 64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9167, 91} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9167, 91} true;
  assume {:verifier.code 0} true;
  $i15 := 32;
  goto $bb14;
$bb13:
  assume !(($i14 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9167, 91} true;
  assume {:verifier.code 0} true;
  $i15 := 64;
  goto $bb14;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9167, 91} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9167, 88} true;
  assume {:verifier.code 0} true;
  $i16 := $sub.i32(0, $i15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9167, 86} true;
  assume {:verifier.code 0} true;
  $i17 := $and.i32($i13, $i16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9167, 15} true;
  assume {:verifier.code 0} true;
  call $i18 := pskb_expand_head($p0, $i17, 0, 32);
  // WARNING: %29 = call i32 @pskb_expand_head(%struct.sk_buff* %0, i32 %28, i32 0, i32 32), !dbg !8389, !verifier.code !8334
  call {:cexpr "tmp___1"} boogie_si_record_i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9169, 5} true;
  assume {:verifier.code 0} true;
  $i19 := $i18;
  goto $bb15;
$bb15:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9175, 1} true;
  assume {:verifier.code 0} true;
  $r := $i19;
  $exn := false;
  return;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9173, 3} true;
  assume {:verifier.code 0} true;
  $i19 := 0;
  goto $bb15;
}
const skb_headroom: ref;
axiom (skb_headroom == $sub.ref(0, 498475));
procedure  skb_headroom($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9070, 39} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 216);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9070, 39} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9070, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9070, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.i64.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9070, 75} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 208);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9070, 75} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9070, 63} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9070, 47} true;
  assume {:verifier.code 0} true;
  $i8 := $trunc.i64.i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9070, 45} true;
  assume {:verifier.code 0} true;
  $i9 := $sub.i32($i4, $i8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 9070, 3} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
}
const pskb_expand_head: ref;
axiom (pskb_expand_head == $sub.ref(0, 499507));
procedure  pskb_expand_head($p0: ref, $i1: i32, $i2: i32, $i3: i32)
  returns ($r: i32);
const ldv_mod_timer_52: ref;
axiom (ldv_mod_timer_52 == $sub.ref(0, 500539));
procedure  ldv_mod_timer_52($p0: ref, $i1: i64)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.timer_list* %0, i64 0, metadata !18145, metadata !8330), !dbg !18146, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14565, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := mod_timer($p0, $i1);
  // WARNING: %3 = call i32 @mod_timer(%struct.timer_list* %0, i64 %1), !dbg !8337, !verifier.code !8334
  call {:cexpr "tmp"} boogie_si_record_i32($i2);
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !18151, metadata !8330), !dbg !18152, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14567, 3} true;
  assume {:verifier.code 0} true;
  call activate_pending_timer_4($p0, $i1, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14568, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ldv_error: ref;
axiom (ldv_error == $sub.ref(0, 501571));
procedure  ldv_error()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6434, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6436, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 6438, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_initialize_ethtool_ops_10: ref;
axiom (ldv_initialize_ethtool_ops_10 == $sub.ref(0, 502603));
procedure  ldv_initialize_ethtool_ops_10()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7938, 9} true;
  assume {:verifier.code 0} true;
  call $p0 := ldv_zalloc(20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7939, 30} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7939, 28} true;
  assume {:verifier.code 0} true;
  $M.33 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7940, 13} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_zalloc(44);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7941, 30} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7941, 28} true;
  assume {:verifier.code 0} true;
  $M.34 := $p2;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7942, 13} true;
  assume {:verifier.code 0} true;
  call $p4 := ldv_zalloc(92);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7943, 30} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7943, 28} true;
  assume {:verifier.code 0} true;
  $M.35 := $p4;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7944, 13} true;
  assume {:verifier.code 0} true;
  call $p6 := ldv_zalloc(36);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7945, 30} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7945, 28} true;
  assume {:verifier.code 0} true;
  $M.36 := $p6;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7946, 13} true;
  assume {:verifier.code 0} true;
  call $p8 := ldv_zalloc(16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7947, 30} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7947, 28} true;
  assume {:verifier.code 0} true;
  $M.37 := $p8;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7948, 13} true;
  assume {:verifier.code 0} true;
  call $p10 := ldv_zalloc(16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7949, 30} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7949, 28} true;
  assume {:verifier.code 0} true;
  $M.38 := $p10;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7950, 13} true;
  assume {:verifier.code 0} true;
  call $p12 := ldv_zalloc(3264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7951, 30} true;
  assume {:verifier.code 0} true;
  $p13 := $bitcast.ref.ref($p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7951, 28} true;
  assume {:verifier.code 0} true;
  $M.39 := $p12;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7952, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_main_exported_10: ref;
axiom (ldv_main_exported_10 == $sub.ref(0, 503635));
procedure  ldv_main_exported_10()
{
  var $i0: i32;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7986, 9} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_u32();
  call {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i0);
  // WARNING: %1 = call i32 @__VERIFIER_nondet_u32(), !dbg !8329, !verifier.code !8331
  call {:cexpr "tmp"} boogie_si_record_i32($i0);
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !18204, metadata !8330), !dbg !18205, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7988, 13} true;
  assume {:verifier.code 0} true;
  call $p1 := ldv_zalloc(12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7989, 14} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7990, 13} true;
  assume {:verifier.code 0} true;
  call $p3 := ldv_zalloc(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7992, 13} true;
  assume {:verifier.code 0} true;
  call $p4 := ldv_zalloc(8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7993, 14} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7994, 13} true;
  assume {:verifier.code 0} true;
  call $p6 := ldv_zalloc(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7996, 13} true;
  assume {:verifier.code 0} true;
  call $p7 := ldv_zalloc(196);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7997, 14} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7998, 13} true;
  assume {:verifier.code 0} true;
  call $p9 := ldv_zalloc(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8000, 13} true;
  assume {:verifier.code 1} true;
  call $i10 := __VERIFIER_nondet_u32();
  call {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i10);
  // WARNING: %11 = call i32 @__VERIFIER_nondet_u32(), !dbg !8371, !verifier.code !8331
  call {:cexpr "tmp___6"} boogie_si_record_i32($i10);
  // WARNING: call void @llvm.dbg.value(metadata i32 %11, i64 0, metadata !18242, metadata !8330), !dbg !18243, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8002, 13} true;
  assume {:verifier.code 0} true;
  call $p11 := ldv_zalloc(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8004, 13} true;
  assume {:verifier.code 0} true;
  call $p12 := ldv_zalloc(8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8005, 14} true;
  assume {:verifier.code 0} true;
  $p13 := $bitcast.ref.ref($p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8006, 13} true;
  assume {:verifier.code 1} true;
  call $i14 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i14);
  // WARNING: %15 = call i32 @__VERIFIER_nondet_int(), !dbg !8387, !verifier.code !8331
  call {:cexpr "tmp___9"} boogie_si_record_i32($i14);
  // WARNING: call void @llvm.dbg.value(metadata i32 %15, i64 0, metadata !18258, metadata !8330), !dbg !18259, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8008, 14} true;
  assume {:verifier.code 0} true;
  call $p15 := ldv_zalloc(16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8009, 14} true;
  assume {:verifier.code 0} true;
  $p16 := $bitcast.ref.ref($p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8010, 14} true;
  assume {:verifier.code 0} true;
  call $p17 := ldv_zalloc(8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8011, 14} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8012, 14} true;
  assume {:verifier.code 1} true;
  call $i19 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i19);
  // WARNING: %20 = call i32 @__VERIFIER_nondet_int(), !dbg !8404, !verifier.code !8331
  call {:cexpr "tmp___12"} boogie_si_record_i32($i19);
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  $i20 := $slt.i32($i19, 12);
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i20 == 1);
  assume {:verifier.code 0} true;
  $i33 := $slt.i32($i19, 6);
  assume {:verifier.code 0} true;
  assume {:branchcond $i33} true;
  goto $bb29, $bb30;
$bb3:
  assume !(($i20 == 1));
  assume {:verifier.code 0} true;
  $i21 := $slt.i32($i19, 18);
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i21 == 1);
  assume {:verifier.code 0} true;
  $i28 := $slt.i32($i19, 15);
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb19, $bb20;
$bb5:
  assume !(($i21 == 1));
  assume {:verifier.code 0} true;
  $i22 := $slt.i32($i19, 21);
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i22 == 1);
  assume {:verifier.code 0} true;
  $i26 := $slt.i32($i19, 19);
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb15, $bb16;
$bb7:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  $i23 := $slt.i32($i19, 22);
  assume {:verifier.code 0} true;
  assume {:branchcond $i23} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i23 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8183, 7} true;
  assume {:verifier.code 0} true;
  $i131 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8183, 29} true;
  assume {:verifier.code 0} true;
  $i132 := $eq.i32($i131, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8183, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i132} true;
  goto $bb117, $bb118;
$bb9:
  assume !(($i23 == 1));
  assume {:verifier.code 0} true;
  $i24 := $slt.i32($i19, 23);
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i24 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8191, 7} true;
  assume {:verifier.code 0} true;
  $i135 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8191, 29} true;
  assume {:verifier.code 0} true;
  $i136 := $eq.i32($i135, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8191, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i136} true;
  goto $bb120, $bb121;
$bb11:
  assume !(($i24 == 1));
  assume {:verifier.code 0} true;
  $i25 := $eq.i32($i19, 23);
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i25 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8199, 7} true;
  assume {:verifier.code 0} true;
  $i140 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8199, 29} true;
  assume {:verifier.code 0} true;
  $i141 := $eq.i32($i140, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8199, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i141} true;
  goto $bb123, $bb124;
$bb13:
  assume {:verifier.code 0} true;
  assume !(($i25 == 1));
  goto $bb14;
$bb14:
  assume {:verifier.code 0} true;
  goto $bb126;
$bb15:
  assume ($i26 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8159, 7} true;
  assume {:verifier.code 0} true;
  $i118 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8159, 29} true;
  assume {:verifier.code 0} true;
  $i119 := $eq.i32($i118, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8159, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i119} true;
  goto $bb108, $bb109;
$bb16:
  assume !(($i26 == 1));
  assume {:verifier.code 0} true;
  $i27 := $slt.i32($i19, 20);
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i27 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8167, 7} true;
  assume {:verifier.code 0} true;
  $i122 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8167, 29} true;
  assume {:verifier.code 0} true;
  $i123 := $eq.i32($i122, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8167, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i123} true;
  goto $bb111, $bb112;
$bb18:
  assume !(($i27 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8175, 7} true;
  assume {:verifier.code 0} true;
  $i127 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8175, 29} true;
  assume {:verifier.code 0} true;
  $i128 := $eq.i32($i127, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8175, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i128} true;
  goto $bb114, $bb115;
$bb19:
  assume ($i28 == 1);
  assume {:verifier.code 0} true;
  $i31 := $slt.i32($i19, 13);
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb25, $bb26;
$bb20:
  assume !(($i28 == 1));
  assume {:verifier.code 0} true;
  $i29 := $slt.i32($i19, 16);
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i29 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8135, 7} true;
  assume {:verifier.code 0} true;
  $i106 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8135, 29} true;
  assume {:verifier.code 0} true;
  $i107 := $eq.i32($i106, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8135, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i107} true;
  goto $bb99, $bb100;
$bb22:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  $i30 := $slt.i32($i19, 17);
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i30 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8143, 7} true;
  assume {:verifier.code 0} true;
  $i111 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8143, 29} true;
  assume {:verifier.code 0} true;
  $i112 := $eq.i32($i111, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8143, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i112} true;
  goto $bb102, $bb103;
$bb24:
  assume !(($i30 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8151, 7} true;
  assume {:verifier.code 0} true;
  $i114 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8151, 29} true;
  assume {:verifier.code 0} true;
  $i115 := $eq.i32($i114, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8151, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i115} true;
  goto $bb105, $bb106;
$bb25:
  assume ($i31 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8111, 7} true;
  assume {:verifier.code 0} true;
  $i94 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8111, 29} true;
  assume {:verifier.code 0} true;
  $i95 := $eq.i32($i94, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8111, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i95} true;
  goto $bb90, $bb91;
$bb26:
  assume !(($i31 == 1));
  assume {:verifier.code 0} true;
  $i32 := $slt.i32($i19, 14);
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb27, $bb28;
$bb27:
  assume ($i32 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8119, 7} true;
  assume {:verifier.code 0} true;
  $i98 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8119, 29} true;
  assume {:verifier.code 0} true;
  $i99 := $eq.i32($i98, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8119, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i99} true;
  goto $bb93, $bb94;
$bb28:
  assume !(($i32 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8127, 7} true;
  assume {:verifier.code 0} true;
  $i103 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8127, 29} true;
  assume {:verifier.code 0} true;
  $i104 := $eq.i32($i103, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8127, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i104} true;
  goto $bb96, $bb97;
$bb29:
  assume ($i33 == 1);
  assume {:verifier.code 0} true;
  $i39 := $slt.i32($i19, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb41, $bb42;
$bb30:
  assume !(($i33 == 1));
  assume {:verifier.code 0} true;
  $i34 := $slt.i32($i19, 9);
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb31, $bb32;
$bb31:
  assume ($i34 == 1);
  assume {:verifier.code 0} true;
  $i37 := $slt.i32($i19, 7);
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb37, $bb38;
$bb32:
  assume !(($i34 == 1));
  assume {:verifier.code 0} true;
  $i35 := $slt.i32($i19, 10);
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb33, $bb34;
$bb33:
  assume ($i35 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8087, 7} true;
  assume {:verifier.code 0} true;
  $i81 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8087, 29} true;
  assume {:verifier.code 0} true;
  $i82 := $eq.i32($i81, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8087, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i82} true;
  goto $bb81, $bb82;
$bb34:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  $i36 := $slt.i32($i19, 11);
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb35, $bb36;
$bb35:
  assume ($i36 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8095, 7} true;
  assume {:verifier.code 0} true;
  $i86 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8095, 29} true;
  assume {:verifier.code 0} true;
  $i87 := $eq.i32($i86, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8095, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i87} true;
  goto $bb84, $bb85;
$bb36:
  assume !(($i36 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8103, 7} true;
  assume {:verifier.code 0} true;
  $i91 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8103, 29} true;
  assume {:verifier.code 0} true;
  $i92 := $eq.i32($i91, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8103, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i92} true;
  goto $bb87, $bb88;
$bb37:
  assume ($i37 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8063, 7} true;
  assume {:verifier.code 0} true;
  $i68 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8063, 29} true;
  assume {:verifier.code 0} true;
  $i69 := $eq.i32($i68, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8063, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i69} true;
  goto $bb72, $bb73;
$bb38:
  assume !(($i37 == 1));
  assume {:verifier.code 0} true;
  $i38 := $slt.i32($i19, 8);
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb39, $bb40;
$bb39:
  assume ($i38 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8071, 7} true;
  assume {:verifier.code 0} true;
  $i72 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8071, 29} true;
  assume {:verifier.code 0} true;
  $i73 := $eq.i32($i72, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8071, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i73} true;
  goto $bb75, $bb76;
$bb40:
  assume !(($i38 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8079, 7} true;
  assume {:verifier.code 0} true;
  $i76 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8079, 29} true;
  assume {:verifier.code 0} true;
  $i77 := $eq.i32($i76, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8079, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i77} true;
  goto $bb78, $bb79;
$bb41:
  assume ($i39 == 1);
  assume {:verifier.code 0} true;
  $i42 := $slt.i32($i19, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i42} true;
  goto $bb47, $bb48;
$bb42:
  assume !(($i39 == 1));
  assume {:verifier.code 0} true;
  $i40 := $slt.i32($i19, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb43, $bb44;
$bb43:
  assume ($i40 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8039, 7} true;
  assume {:verifier.code 0} true;
  $i56 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8039, 29} true;
  assume {:verifier.code 0} true;
  $i57 := $eq.i32($i56, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8039, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i57} true;
  goto $bb63, $bb64;
$bb44:
  assume !(($i40 == 1));
  assume {:verifier.code 0} true;
  $i41 := $slt.i32($i19, 5);
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb45, $bb46;
$bb45:
  assume ($i41 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8047, 7} true;
  assume {:verifier.code 0} true;
  $i61 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8047, 29} true;
  assume {:verifier.code 0} true;
  $i62 := $eq.i32($i61, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8047, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i62} true;
  goto $bb66, $bb67;
$bb46:
  assume !(($i41 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8055, 7} true;
  assume {:verifier.code 0} true;
  $i65 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8055, 29} true;
  assume {:verifier.code 0} true;
  $i66 := $eq.i32($i65, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8055, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i66} true;
  goto $bb69, $bb70;
$bb47:
  assume ($i42 == 1);
  assume {:verifier.code 0} true;
  $i44 := $eq.i32($i19, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb51, $bb52;
$bb48:
  assume !(($i42 == 1));
  assume {:verifier.code 0} true;
  $i43 := $slt.i32($i19, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i43} true;
  goto $bb49, $bb50;
$bb49:
  assume ($i43 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8023, 7} true;
  assume {:verifier.code 0} true;
  $i48 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8023, 29} true;
  assume {:verifier.code 0} true;
  $i49 := $eq.i32($i48, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8023, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb57, $bb58;
$bb50:
  assume !(($i43 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8031, 7} true;
  assume {:verifier.code 0} true;
  $i53 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8031, 29} true;
  assume {:verifier.code 0} true;
  $i54 := $eq.i32($i53, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8031, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i54} true;
  goto $bb60, $bb61;
$bb51:
  assume ($i44 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8015, 7} true;
  assume {:verifier.code 0} true;
  $i45 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8015, 29} true;
  assume {:verifier.code 0} true;
  $i46 := $eq.i32($i45, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8015, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb53, $bb54;
$bb52:
  assume {:verifier.code 0} true;
  assume !(($i44 == 1));
  goto $bb14;
$bb53:
  assume ($i46 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8016, 23} true;
  assume {:verifier.code 0} true;
  $p47 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8016, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_get_drvinfo($p47, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8017, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8018, 3} true;
  assume {:verifier.code 0} true;
  goto $bb55;
$bb54:
  assume !(($i46 == 1));
  assume {:verifier.code 0} true;
  goto $bb55;
$bb55:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8021, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb56:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8210, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb57:
  assume ($i49 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8024, 26} true;
  assume {:verifier.code 0} true;
  $p50 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8024, 52} true;
  assume {:verifier.code 0} true;
  $p51 := $M.38;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8024, 5} true;
  assume {:verifier.code 0} true;
  call $i52 := igbvf_set_pauseparam($p50, $p51);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8025, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8026, 3} true;
  assume {:verifier.code 0} true;
  goto $bb59;
$bb58:
  assume !(($i49 == 1));
  assume {:verifier.code 0} true;
  goto $bb59;
$bb59:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8029, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb60:
  assume ($i54 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8032, 29} true;
  assume {:verifier.code 0} true;
  $p55 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8032, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_get_ethtool_stats($p55, $p18, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8033, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8034, 3} true;
  assume {:verifier.code 0} true;
  goto $bb62;
$bb61:
  assume !(($i54 == 1));
  assume {:verifier.code 0} true;
  goto $bb62;
$bb62:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8037, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb63:
  assume ($i57 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8040, 24} true;
  assume {:verifier.code 0} true;
  $p58 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8040, 50} true;
  assume {:verifier.code 0} true;
  $p59 := $M.35;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8040, 5} true;
  assume {:verifier.code 0} true;
  call $i60 := igbvf_get_coalesce($p58, $p59);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8041, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8042, 3} true;
  assume {:verifier.code 0} true;
  goto $bb65;
$bb64:
  assume !(($i57 == 1));
  assume {:verifier.code 0} true;
  goto $bb65;
$bb65:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8045, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb66:
  assume ($i62 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8048, 25} true;
  assume {:verifier.code 0} true;
  $p63 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8048, 51} true;
  assume {:verifier.code 0} true;
  $p64 := $M.36;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8048, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_get_ringparam($p63, $p64);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8049, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8050, 3} true;
  assume {:verifier.code 0} true;
  goto $bb68;
$bb67:
  assume !(($i62 == 1));
  assume {:verifier.code 0} true;
  goto $bb68;
$bb68:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8053, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb69:
  assume ($i66 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8056, 20} true;
  assume {:verifier.code 0} true;
  $p67 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8056, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_get_regs($p67, $p2, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8057, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8058, 3} true;
  assume {:verifier.code 0} true;
  goto $bb71;
$bb70:
  assume !(($i66 == 1));
  assume {:verifier.code 0} true;
  goto $bb71;
$bb71:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8061, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb72:
  assume ($i69 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8064, 26} true;
  assume {:verifier.code 0} true;
  $p70 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8064, 52} true;
  assume {:verifier.code 0} true;
  $p71 := $M.38;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8064, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_get_pauseparam($p70, $p71);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8065, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8066, 3} true;
  assume {:verifier.code 0} true;
  goto $bb74;
$bb73:
  assume !(($i69 == 1));
  assume {:verifier.code 0} true;
  goto $bb74;
$bb74:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8069, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb75:
  assume ($i73 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8072, 26} true;
  assume {:verifier.code 0} true;
  $p74 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8072, 5} true;
  assume {:verifier.code 0} true;
  call $i75 := igbvf_get_sset_count($p74, $i14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8073, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8074, 3} true;
  assume {:verifier.code 0} true;
  goto $bb77;
$bb76:
  assume !(($i73 == 1));
  assume {:verifier.code 0} true;
  goto $bb77;
$bb77:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8077, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb78:
  assume ($i77 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8080, 24} true;
  assume {:verifier.code 0} true;
  $p78 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8080, 50} true;
  assume {:verifier.code 0} true;
  $p79 := $M.34;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8080, 5} true;
  assume {:verifier.code 0} true;
  call $i80 := igbvf_get_settings($p78, $p79);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8081, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8082, 3} true;
  assume {:verifier.code 0} true;
  goto $bb80;
$bb79:
  assume !(($i77 == 1));
  assume {:verifier.code 0} true;
  goto $bb80;
$bb80:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8085, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb81:
  assume ($i82 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8088, 24} true;
  assume {:verifier.code 0} true;
  $p83 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8088, 50} true;
  assume {:verifier.code 0} true;
  $p84 := $M.35;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8088, 5} true;
  assume {:verifier.code 0} true;
  call $i85 := igbvf_set_coalesce($p83, $p84);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8089, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8090, 3} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb82:
  assume !(($i82 == 1));
  assume {:verifier.code 0} true;
  goto $bb83;
$bb83:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8093, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb84:
  assume ($i87 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8096, 19} true;
  assume {:verifier.code 0} true;
  $p88 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8096, 45} true;
  assume {:verifier.code 0} true;
  $p89 := $M.33;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8096, 5} true;
  assume {:verifier.code 0} true;
  call $i90 := igbvf_set_wol($p88, $p89);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8097, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8098, 3} true;
  assume {:verifier.code 0} true;
  goto $bb86;
$bb85:
  assume !(($i87 == 1));
  assume {:verifier.code 0} true;
  goto $bb86;
$bb86:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8101, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb87:
  assume ($i92 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8104, 24} true;
  assume {:verifier.code 0} true;
  $p93 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8104, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_set_msglevel($p93, $i0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8105, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8106, 3} true;
  assume {:verifier.code 0} true;
  goto $bb89;
$bb88:
  assume !(($i92 == 1));
  assume {:verifier.code 0} true;
  goto $bb89;
$bb89:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8109, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb90:
  assume ($i95 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8112, 26} true;
  assume {:verifier.code 0} true;
  $p96 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8112, 5} true;
  assume {:verifier.code 0} true;
  call $i97 := igbvf_get_eeprom_len($p96);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8113, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8114, 3} true;
  assume {:verifier.code 0} true;
  goto $bb92;
$bb91:
  assume !(($i95 == 1));
  assume {:verifier.code 0} true;
  goto $bb92;
$bb92:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8117, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb93:
  assume ($i99 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8120, 24} true;
  assume {:verifier.code 0} true;
  $p100 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8120, 50} true;
  assume {:verifier.code 0} true;
  $p101 := $M.34;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8120, 5} true;
  assume {:verifier.code 0} true;
  call $i102 := igbvf_set_settings($p100, $p101);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8121, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8122, 3} true;
  assume {:verifier.code 0} true;
  goto $bb95;
$bb94:
  assume !(($i99 == 1));
  assume {:verifier.code 0} true;
  goto $bb95;
$bb95:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8125, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb96:
  assume ($i104 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8128, 21} true;
  assume {:verifier.code 0} true;
  $p105 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8128, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_diag_test($p105, $p16, $p5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8129, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8130, 3} true;
  assume {:verifier.code 0} true;
  goto $bb98;
$bb97:
  assume !(($i104 == 1));
  assume {:verifier.code 0} true;
  goto $bb98;
$bb98:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8133, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb99:
  assume ($i107 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8136, 22} true;
  assume {:verifier.code 0} true;
  $p108 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8136, 48} true;
  assume {:verifier.code 0} true;
  $p109 := $M.37;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8136, 5} true;
  assume {:verifier.code 0} true;
  call $i110 := igbvf_get_eeprom($p108, $p109, $p11);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8137, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8138, 3} true;
  assume {:verifier.code 0} true;
  goto $bb101;
$bb100:
  assume !(($i107 == 1));
  assume {:verifier.code 0} true;
  goto $bb101;
$bb101:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8141, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb102:
  assume ($i112 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8144, 23} true;
  assume {:verifier.code 0} true;
  $p113 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8144, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_get_strings($p113, $i10, $p6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8145, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8146, 3} true;
  assume {:verifier.code 0} true;
  goto $bb104;
$bb103:
  assume !(($i112 == 1));
  assume {:verifier.code 0} true;
  goto $bb104;
$bb104:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8149, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb105:
  assume ($i115 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8152, 22} true;
  assume {:verifier.code 0} true;
  $p116 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8152, 5} true;
  assume {:verifier.code 0} true;
  call $i117 := igbvf_nway_reset($p116);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8153, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8154, 3} true;
  assume {:verifier.code 0} true;
  goto $bb107;
$bb106:
  assume !(($i115 == 1));
  assume {:verifier.code 0} true;
  goto $bb107;
$bb107:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8157, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb108:
  assume ($i119 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8160, 19} true;
  assume {:verifier.code 0} true;
  $p120 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8160, 45} true;
  assume {:verifier.code 0} true;
  $p121 := $M.33;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8160, 5} true;
  assume {:verifier.code 0} true;
  call igbvf_get_wol($p120, $p121);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8161, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8162, 3} true;
  assume {:verifier.code 0} true;
  goto $bb110;
$bb109:
  assume !(($i119 == 1));
  assume {:verifier.code 0} true;
  goto $bb110;
$bb110:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8165, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb111:
  assume ($i123 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8168, 22} true;
  assume {:verifier.code 0} true;
  $p124 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8168, 48} true;
  assume {:verifier.code 0} true;
  $p125 := $M.37;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8168, 5} true;
  assume {:verifier.code 0} true;
  call $i126 := igbvf_set_eeprom($p124, $p125, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8169, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8170, 3} true;
  assume {:verifier.code 0} true;
  goto $bb113;
$bb112:
  assume !(($i123 == 1));
  assume {:verifier.code 0} true;
  goto $bb113;
$bb113:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8173, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb114:
  assume ($i128 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8176, 24} true;
  assume {:verifier.code 0} true;
  $p129 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8176, 5} true;
  assume {:verifier.code 0} true;
  call $i130 := igbvf_get_msglevel($p129);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8177, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8178, 3} true;
  assume {:verifier.code 0} true;
  goto $bb116;
$bb115:
  assume !(($i128 == 1));
  assume {:verifier.code 0} true;
  goto $bb116;
$bb116:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8181, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb117:
  assume ($i132 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8184, 24} true;
  assume {:verifier.code 0} true;
  $p133 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8184, 5} true;
  assume {:verifier.code 0} true;
  call $i134 := igbvf_get_regs_len($p133);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8185, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8186, 3} true;
  assume {:verifier.code 0} true;
  goto $bb119;
$bb118:
  assume !(($i132 == 1));
  assume {:verifier.code 0} true;
  goto $bb119;
$bb119:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8189, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb120:
  assume ($i136 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8192, 25} true;
  assume {:verifier.code 0} true;
  $p137 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8192, 51} true;
  assume {:verifier.code 0} true;
  $p138 := $M.36;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8192, 5} true;
  assume {:verifier.code 0} true;
  call $i139 := igbvf_set_ringparam($p137, $p138);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8193, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8194, 3} true;
  assume {:verifier.code 0} true;
  goto $bb122;
$bb121:
  assume !(($i136 == 1));
  assume {:verifier.code 0} true;
  goto $bb122;
$bb122:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8197, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb123:
  assume ($i141 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8200, 25} true;
  assume {:verifier.code 0} true;
  $p142 := $M.39;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8200, 5} true;
  assume {:verifier.code 0} true;
  call $i143 := ethtool_op_get_link($p142);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8201, 27} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8202, 3} true;
  assume {:verifier.code 0} true;
  goto $bb125;
$bb124:
  assume !(($i141 == 1));
  assume {:verifier.code 0} true;
  goto $bb125;
$bb125:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8205, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb126:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8207, 3} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8208, 3} true;
  assume {:verifier.code 0} true;
  goto $bb127;
$bb127:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 8208, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
}
const __VERIFIER_nondet_u32: ref;
axiom (__VERIFIER_nondet_u32 == $sub.ref(0, 504667));
procedure  __VERIFIER_nondet_u32()
  returns ($r: i32);
const ldv_stop: ref;
axiom (ldv_stop == $sub.ref(0, 505699));
procedure  ldv_stop()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7270, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7272, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 7274, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_irq_3: ref;
axiom (ldv_irq_3 == $sub.ref(0, 506731));
procedure  ldv_irq_3($i0: i32, $i1: i32, $p2: ref)
  returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !18543, metadata !8330), !dbg !18544, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13096, 13} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i0, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13096, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13097, 11} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  // WARNING: %6 = call i32 @__VERIFIER_nondet_int(), !dbg !8343, !verifier.code !8345
  call {:cexpr "tmp"} boogie_si_record_i32($i4);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb3:
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i4, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13100, 15} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i32($i0, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13100, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb6, $bb7;
$bb5:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb6:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13101, 24} true;
  assume {:verifier.code 0} true;
  $M.41 := 2;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13102, 20} true;
  assume {:verifier.code 0} true;
  call $i7 := igbvf_msix_other($i1, $p2);
  // WARNING: %10 = call i32 @igbvf_msix_other(i32 %1, i8* %2), !dbg !8354, !verifier.code !8334
  call {:cexpr "irq_retval"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13103, 24} true;
  assume {:verifier.code 0} true;
  $M.41 := 1;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13104, 7} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13118, 1} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13108, 5} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13113, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13110, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13111, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13111, 5} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13116, 3} true;
  assume {:verifier.code 0} true;
  goto $bb8;
}
const choose_interrupt_2: ref;
axiom (choose_interrupt_2 == $sub.ref(0, 507763));
procedure  choose_interrupt_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13124, 9} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  // WARNING: %1 = call i32 @__VERIFIER_nondet_int(), !dbg !8329, !verifier.code !8331
  call {:cexpr "tmp"} boogie_si_record_i32($i0);
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  $i1 := $slt.i32($i0, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  $i4 := $slt.i32($i0, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb9, $bb10;
$bb3:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  $i2 := $slt.i32($i0, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13133, 27} true;
  assume {:verifier.code 0} true;
  $i14 := $M.48;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13133, 40} true;
  assume {:verifier.code 0} true;
  $i15 := $M.49;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13133, 58} true;
  assume {:verifier.code 0} true;
  $p16 := $M.50;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13133, 17} true;
  assume {:verifier.code 0} true;
  call $i17 := ldv_irq_2($i14, $i15, $p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13133, 15} true;
  assume {:verifier.code 0} true;
  $M.42 := $i17;
  call {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13134, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb5:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i0, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13136, 27} true;
  assume {:verifier.code 0} true;
  $i18 := $M.51;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13136, 40} true;
  assume {:verifier.code 0} true;
  $i19 := $M.52;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13136, 58} true;
  assume {:verifier.code 0} true;
  $p20 := $M.53;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13136, 17} true;
  assume {:verifier.code 0} true;
  call $i21 := ldv_irq_2($i18, $i19, $p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13136, 15} true;
  assume {:verifier.code 0} true;
  $M.42 := $i21;
  call {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13137, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb7:
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  goto $bb14;
$bb9:
  assume ($i4 == 1);
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i0, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb11, $bb12;
$bb10:
  assume !(($i4 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13130, 27} true;
  assume {:verifier.code 0} true;
  $i10 := $M.45;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13130, 40} true;
  assume {:verifier.code 0} true;
  $i11 := $M.46;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13130, 58} true;
  assume {:verifier.code 0} true;
  $p12 := $M.47;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13130, 17} true;
  assume {:verifier.code 0} true;
  call $i13 := ldv_irq_2($i10, $i11, $p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13130, 15} true;
  assume {:verifier.code 0} true;
  $M.42 := $i13;
  call {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13131, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb11:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13127, 27} true;
  assume {:verifier.code 0} true;
  $i6 := $M.42;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13127, 40} true;
  assume {:verifier.code 0} true;
  $i7 := $M.43;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13127, 58} true;
  assume {:verifier.code 0} true;
  $p8 := $M.44;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13127, 17} true;
  assume {:verifier.code 0} true;
  call $i9 := ldv_irq_2($i6, $i7, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13127, 15} true;
  assume {:verifier.code 0} true;
  $M.42 := $i9;
  call {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13128, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb8;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13142, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13139, 3} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13140, 3} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13140, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
}
const ldv_irq_2: ref;
axiom (ldv_irq_2 == $sub.ref(0, 508795));
procedure  ldv_irq_2($i0: i32, $i1: i32, $p2: ref)
  returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !18612, metadata !8330), !dbg !18613, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13688, 13} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i0, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13688, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13689, 11} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  // WARNING: %6 = call i32 @__VERIFIER_nondet_int(), !dbg !8343, !verifier.code !8345
  call {:cexpr "tmp"} boogie_si_record_i32($i4);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb3:
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i4, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13692, 15} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i32($i0, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13692, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb6, $bb7;
$bb5:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb6:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13693, 24} true;
  assume {:verifier.code 0} true;
  $M.41 := 2;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13694, 20} true;
  assume {:verifier.code 0} true;
  call $i7 := igbvf_intr_msix_rx($i1, $p2);
  // WARNING: %10 = call i32 @igbvf_intr_msix_rx(i32 %1, i8* %2), !dbg !8354, !verifier.code !8334
  call {:cexpr "irq_retval"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13695, 24} true;
  assume {:verifier.code 0} true;
  $M.41 := 1;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13696, 7} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13710, 1} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13700, 5} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13705, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13702, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13703, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13703, 5} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13708, 3} true;
  assume {:verifier.code 0} true;
  goto $bb8;
}
const ldv_initialize_pci_driver_5: ref;
axiom (ldv_initialize_pci_driver_5 == $sub.ref(0, 509827));
procedure  ldv_initialize_pci_driver_5()
{
  var $p0: ref;
  var $p1: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13182, 9} true;
  assume {:verifier.code 0} true;
  call $p0 := ldv_zalloc(2976);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13183, 25} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13183, 23} true;
  assume {:verifier.code 0} true;
  $M.54 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13184, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const timer_init_4: ref;
axiom (timer_init_4 == $sub.ref(0, 510859));
procedure  timer_init_4()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13352, 17} true;
  assume {:verifier.code 0} true;
  $M.3 := 0;
  call {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13353, 17} true;
  assume {:verifier.code 0} true;
  $M.5 := 0;
  call {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13354, 17} true;
  assume {:verifier.code 0} true;
  $M.7 := 0;
  call {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13355, 17} true;
  assume {:verifier.code 0} true;
  $M.9 := 0;
  call {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13356, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const choose_interrupt_1: ref;
axiom (choose_interrupt_1 == $sub.ref(0, 511891));
procedure  choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13364, 9} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  // WARNING: %1 = call i32 @__VERIFIER_nondet_int(), !dbg !8329, !verifier.code !8331
  call {:cexpr "tmp"} boogie_si_record_i32($i0);
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  $i1 := $slt.i32($i0, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  $i4 := $slt.i32($i0, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb9, $bb10;
$bb3:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  $i2 := $slt.i32($i0, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13373, 27} true;
  assume {:verifier.code 0} true;
  $i14 := $M.61;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13373, 40} true;
  assume {:verifier.code 0} true;
  $i15 := $M.62;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13373, 58} true;
  assume {:verifier.code 0} true;
  $p16 := $M.63;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13373, 17} true;
  assume {:verifier.code 0} true;
  call $i17 := ldv_irq_1($i14, $i15, $p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13373, 15} true;
  assume {:verifier.code 0} true;
  $M.55 := $i17;
  call {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13374, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb5:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i0, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13376, 27} true;
  assume {:verifier.code 0} true;
  $i18 := $M.64;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13376, 40} true;
  assume {:verifier.code 0} true;
  $i19 := $M.65;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13376, 58} true;
  assume {:verifier.code 0} true;
  $p20 := $M.66;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13376, 17} true;
  assume {:verifier.code 0} true;
  call $i21 := ldv_irq_1($i18, $i19, $p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13376, 15} true;
  assume {:verifier.code 0} true;
  $M.55 := $i21;
  call {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13377, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb7:
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  goto $bb14;
$bb9:
  assume ($i4 == 1);
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i0, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb11, $bb12;
$bb10:
  assume !(($i4 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13370, 27} true;
  assume {:verifier.code 0} true;
  $i10 := $M.58;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13370, 40} true;
  assume {:verifier.code 0} true;
  $i11 := $M.59;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13370, 58} true;
  assume {:verifier.code 0} true;
  $p12 := $M.60;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13370, 17} true;
  assume {:verifier.code 0} true;
  call $i13 := ldv_irq_1($i10, $i11, $p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13370, 15} true;
  assume {:verifier.code 0} true;
  $M.55 := $i13;
  call {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13371, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb11:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13367, 27} true;
  assume {:verifier.code 0} true;
  $i6 := $M.55;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13367, 40} true;
  assume {:verifier.code 0} true;
  $i7 := $M.56;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13367, 58} true;
  assume {:verifier.code 0} true;
  $p8 := $M.57;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13367, 17} true;
  assume {:verifier.code 0} true;
  call $i9 := ldv_irq_1($i6, $i7, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13367, 15} true;
  assume {:verifier.code 0} true;
  $M.55 := $i9;
  call {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13368, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb8;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13382, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13379, 3} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13380, 3} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13380, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
}
const ldv_irq_1: ref;
axiom (ldv_irq_1 == $sub.ref(0, 512923));
procedure  ldv_irq_1($i0: i32, $i1: i32, $p2: ref)
  returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !18696, metadata !8330), !dbg !18697, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13582, 13} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i0, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13582, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13583, 11} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  // WARNING: %6 = call i32 @__VERIFIER_nondet_int(), !dbg !8343, !verifier.code !8345
  call {:cexpr "tmp"} boogie_si_record_i32($i4);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb3:
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i4, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13586, 15} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i32($i0, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13586, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb6, $bb7;
$bb5:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb6:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13587, 24} true;
  assume {:verifier.code 0} true;
  $M.41 := 2;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13588, 20} true;
  assume {:verifier.code 0} true;
  call $i7 := igbvf_intr_msix_tx($i1, $p2);
  // WARNING: %10 = call i32 @igbvf_intr_msix_tx(i32 %1, i8* %2), !dbg !8354, !verifier.code !8334
  call {:cexpr "irq_retval"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13589, 24} true;
  assume {:verifier.code 0} true;
  $M.41 := 1;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13590, 7} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13604, 1} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13594, 5} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13599, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13596, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13597, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13597, 5} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13602, 3} true;
  assume {:verifier.code 0} true;
  goto $bb8;
}
const choose_timer_4: ref;
axiom (choose_timer_4 == $sub.ref(0, 513955));
procedure  choose_timer_4()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13390, 9} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  // WARNING: %1 = call i32 @__VERIFIER_nondet_int(), !dbg !8329, !verifier.code !8331
  call {:cexpr "tmp"} boogie_si_record_i32($i0);
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  $i1 := $slt.i32($i0, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  $i4 := $slt.i32($i0, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb9, $bb10;
$bb3:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  $i2 := $slt.i32($i0, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13409, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $M.7;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13409, 21} true;
  assume {:verifier.code 0} true;
  $i15 := $eq.i32($i14, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13409, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb20, $bb21;
$bb5:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i0, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13417, 7} true;
  assume {:verifier.code 0} true;
  $i18 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13417, 21} true;
  assume {:verifier.code 0} true;
  $i19 := $eq.i32($i18, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13417, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb23, $bb24;
$bb7:
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  goto $bb26;
$bb9:
  assume ($i4 == 1);
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i0, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb11, $bb12;
$bb10:
  assume !(($i4 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13401, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13401, 21} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i32($i10, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13401, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb17, $bb18;
$bb11:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13393, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $M.3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13393, 21} true;
  assume {:verifier.code 0} true;
  $i7 := $eq.i32($i6, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13393, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb13, $bb14;
$bb12:
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb8;
$bb13:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13394, 19} true;
  assume {:verifier.code 0} true;
  $M.3 := 2;
  call {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13395, 17} true;
  assume {:verifier.code 0} true;
  $i8 := $M.3;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13395, 32} true;
  assume {:verifier.code 0} true;
  $p9 := $M.2;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13395, 5} true;
  assume {:verifier.code 0} true;
  call ldv_timer_4($i8, $p9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13396, 3} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13399, 3} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13428, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb17:
  assume ($i11 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13402, 19} true;
  assume {:verifier.code 0} true;
  $M.5 := 2;
  call {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13403, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13403, 32} true;
  assume {:verifier.code 0} true;
  $p13 := $M.4;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13403, 5} true;
  assume {:verifier.code 0} true;
  call ldv_timer_4($i12, $p13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13404, 3} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb18:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13407, 3} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb20:
  assume ($i15 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13410, 19} true;
  assume {:verifier.code 0} true;
  $M.7 := 2;
  call {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13411, 17} true;
  assume {:verifier.code 0} true;
  $i16 := $M.7;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13411, 32} true;
  assume {:verifier.code 0} true;
  $p17 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13411, 5} true;
  assume {:verifier.code 0} true;
  call ldv_timer_4($i16, $p17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13412, 3} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb21:
  assume !(($i15 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13415, 3} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb23:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13418, 19} true;
  assume {:verifier.code 0} true;
  $M.9 := 2;
  call {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13419, 17} true;
  assume {:verifier.code 0} true;
  $i20 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13419, 32} true;
  assume {:verifier.code 0} true;
  $p21 := $M.8;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13419, 5} true;
  assume {:verifier.code 0} true;
  call ldv_timer_4($i20, $p21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13420, 3} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb24:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13423, 3} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb26:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13425, 3} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13426, 3} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13426, 3} true;
  assume {:verifier.code 0} true;
  goto $bb16;
}
const ldv_timer_4: ref;
axiom (ldv_timer_4 == $sub.ref(0, 514987));
procedure  ldv_timer_4($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13676, 20} true;
  assume {:verifier.code 0} true;
  $M.41 := 2;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13677, 25} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p1, 40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13677, 25} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i64($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13677, 3} true;
  assume {:verifier.code 0} true;
  call igbvf_watchdog($i3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13678, 20} true;
  assume {:verifier.code 0} true;
  $M.41 := 1;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13679, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_initialize_pci_error_handlers_6: ref;
axiom (ldv_initialize_pci_error_handlers_6 == $sub.ref(0, 516019));
procedure  ldv_initialize_pci_error_handlers_6()
{
  var $p0: ref;
  var $p1: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13526, 9} true;
  assume {:verifier.code 0} true;
  call $p0 := ldv_zalloc(2976);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13527, 30} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13527, 28} true;
  assume {:verifier.code 0} true;
  $M.67 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13528, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const choose_interrupt_3: ref;
axiom (choose_interrupt_3 == $sub.ref(0, 517051));
procedure  choose_interrupt_3()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13650, 9} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  // WARNING: %1 = call i32 @__VERIFIER_nondet_int(), !dbg !8329, !verifier.code !8331
  call {:cexpr "tmp"} boogie_si_record_i32($i0);
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  $i1 := $slt.i32($i0, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i1 == 1);
  assume {:verifier.code 0} true;
  $i4 := $slt.i32($i0, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb9, $bb10;
$bb3:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  $i2 := $slt.i32($i0, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13659, 27} true;
  assume {:verifier.code 0} true;
  $i14 := $M.23;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13659, 40} true;
  assume {:verifier.code 0} true;
  $i15 := $M.24;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13659, 58} true;
  assume {:verifier.code 0} true;
  $p16 := $M.25;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13659, 17} true;
  assume {:verifier.code 0} true;
  call $i17 := ldv_irq_3($i14, $i15, $p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13659, 15} true;
  assume {:verifier.code 0} true;
  $M.17 := $i17;
  call {:cexpr "ldv_irq_3_0"} boogie_si_record_i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13660, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb5:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i0, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13662, 27} true;
  assume {:verifier.code 0} true;
  $i18 := $M.26;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13662, 40} true;
  assume {:verifier.code 0} true;
  $i19 := $M.27;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13662, 58} true;
  assume {:verifier.code 0} true;
  $p20 := $M.28;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13662, 17} true;
  assume {:verifier.code 0} true;
  call $i21 := ldv_irq_3($i18, $i19, $p20);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13662, 15} true;
  assume {:verifier.code 0} true;
  $M.17 := $i21;
  call {:cexpr "ldv_irq_3_0"} boogie_si_record_i32($i21);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13663, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb7:
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  goto $bb14;
$bb9:
  assume ($i4 == 1);
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i0, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb11, $bb12;
$bb10:
  assume !(($i4 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13656, 27} true;
  assume {:verifier.code 0} true;
  $i10 := $M.20;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13656, 40} true;
  assume {:verifier.code 0} true;
  $i11 := $M.21;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13656, 58} true;
  assume {:verifier.code 0} true;
  $p12 := $M.22;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13656, 17} true;
  assume {:verifier.code 0} true;
  call $i13 := ldv_irq_3($i10, $i11, $p12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13656, 15} true;
  assume {:verifier.code 0} true;
  $M.17 := $i13;
  call {:cexpr "ldv_irq_3_0"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13657, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb11:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13653, 27} true;
  assume {:verifier.code 0} true;
  $i6 := $M.17;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13653, 40} true;
  assume {:verifier.code 0} true;
  $i7 := $M.18;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13653, 58} true;
  assume {:verifier.code 0} true;
  $p8 := $M.19;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13653, 17} true;
  assume {:verifier.code 0} true;
  call $i9 := ldv_irq_3($i6, $i7, $p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13653, 15} true;
  assume {:verifier.code 0} true;
  $M.17 := $i9;
  call {:cexpr "ldv_irq_3_0"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13654, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb8;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13668, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13665, 3} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13666, 3} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13666, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
}
const main: ref;
axiom (main == $sub.ref(0, 518083));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i120: i16;
  var $i121: i32;
  var $i122: i16;
  var $i123: i32;
  var $i124: i16;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i16;
  var $i130: i32;
  var $i131: i16;
  var $i132: i32;
  var $i133: i16;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i16;
  var $i139: i32;
  var $i140: i16;
  var $i141: i32;
  var $i142: i16;
  var $i143: i32;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $i155: i32;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $i159: i16;
  var $i160: i32;
  var $i161: i16;
  var $i162: i32;
  var $i163: i16;
  var $i164: i32;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $i168: i16;
  var $i169: i32;
  var $i170: i16;
  var $i171: i32;
  var $i172: i16;
  var $i173: i32;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $i177: i16;
  var $i178: i32;
  var $i179: i16;
  var $i180: i32;
  var $i181: i16;
  var $i182: i32;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $p186: ref;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $p194: ref;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i198: i32;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $i202: i1;
  var $p203: ref;
  var $i204: i32;
  var $i205: i32;
  var $i206: i1;
  var $p207: ref;
  var $i208: i32;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $i224: i32;
  var $i225: i1;
  var $p226: ref;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $i230: i64;
  var $i231: i32;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $i235: i64;
  var $i236: i32;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $i240: i64;
  var $i241: i32;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $i245: i32;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $i249: i32;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $i253: i32;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $i257: i32;
  var $i258: i32;
  var $i259: i1;
  var $p260: ref;
  var $i261: i32;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $i268: i32;
  var $i269: i1;
  var $p270: ref;
  var $i271: i32;
  var $i272: i1;
  var $i273: i32;
  var $i274: i32;
  var $i275: i1;
  var $i276: i32;
  var $i277: i32;
  var $i278: i32;
  var $i279: i1;
  var $i280: i32;
  var $i281: i32;
  var $i282: i32;
  var $i283: i32;
  var $i284: i1;
  var $i285: i32;
  var $i286: i1;
  var $i287: i32;
  var $i288: i1;
  var $i289: i32;
  var $i290: i1;
  var $i291: i32;
  var $i292: i1;
  var $i293: i32;
  var $i294: i1;
  var $i295: i32;
  var $i296: i1;
  var $i297: i32;
  var $i298: i1;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $i303: i32;
  var $i304: i1;
  var $i305: i1;
  var $i306: i1;
  var $i307: i32;
  var $i308: i1;
  var $i309: i32;
  var $i310: i1;
  var $i311: i32;
  var $i312: i1;
  var $i313: i32;
  var $i314: i32;
  var $i315: i1;
  var $i316: i32;
  var $i317: i1;
  var $i318: i32;
  var $i319: i1;
  var $i320: i32;
  var $i321: i1;
  var $i322: i32;
  var $i323: i1;
  var $i324: i1;
  var $i325: i1;
  var $i326: i1;
  var $i327: i1;
  var $i328: i1;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $i332: i32;
  var $i333: i32;
  var $i334: i1;
  var $i335: i32;
  var $i336: i32;
  var $i337: i32;
  var $i338: i1;
  var $p339: ref;
  var $p340: ref;
  var $i341: i32;
  var $i342: i32;
  var $i343: i32;
  var $i344: i1;
  var $i345: i32;
  var $i346: i1;
  var $p347: ref;
  var $i348: i32;
  var $i349: i32;
  var $i350: i1;
  var $i351: i32;
  var $i352: i1;
  var $p353: ref;
  var $i354: i32;
  var $i355: i1;
  var $p356: ref;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $i360: i32;
  var $i361: i32;
  var $i362: i32;
  var $i363: i1;
  var $p364: ref;
  var $i365: i32;
  var $i366: i32;
  var $i367: i32;
  var $i368: i1;
  var $p369: ref;
  var $i370: i32;
  var $i371: i32;
$bb0:
  call $initialize();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13787, 9} true;
  assume {:verifier.code 1} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:verifier.code 0} true;
  call $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13787, 9} true;
  assume {:verifier.code 1} true;
  call $i5 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
  // WARNING: %6 = call i32 @__VERIFIER_nondet_int(), !dbg !8341, !verifier.code !8343
  call {:cexpr "tmp"} boogie_si_record_i32($i5);
  // WARNING: call void @llvm.dbg.value(metadata i32 %6, i64 0, metadata !18853, metadata !8330), !dbg !18854, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13789, 13} true;
  assume {:verifier.code 1} true;
  call $i6 := __VERIFIER_nondet_u16();
  call {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i6);
  // WARNING: %7 = call zeroext i16 @__VERIFIER_nondet_u16(), !dbg !8348, !verifier.code !8343
  call {:cexpr "tmp___0"} boogie_si_record_i16($i6);
  // WARNING: call void @llvm.dbg.value(metadata i16 %7, i64 0, metadata !18858, metadata !8330), !dbg !18859, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13791, 13} true;
  assume {:verifier.code 0} true;
  call $p7 := ldv_zalloc(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13793, 13} true;
  assume {:verifier.code 0} true;
  call $p8 := ldv_zalloc(40);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13794, 13} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p8);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13795, 13} true;
  assume {:verifier.code 0} true;
  call $p10 := ldv_zalloc(232);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13796, 13} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13797, 13} true;
  assume {:verifier.code 1} true;
  call $i12 := __VERIFIER_nondet_u16();
  call {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i12);
  // WARNING: %13 = call zeroext i16 @__VERIFIER_nondet_u16(), !dbg !8370, !verifier.code !8343
  call {:cexpr "tmp___4"} boogie_si_record_i16($i12);
  // WARNING: call void @llvm.dbg.value(metadata i16 %13, i64 0, metadata !18880, metadata !8330), !dbg !18881, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13799, 13} true;
  assume {:verifier.code 1} true;
  call $i13 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
  // WARNING: %14 = call i32 @__VERIFIER_nondet_int(), !dbg !8375, !verifier.code !8343
  call {:cexpr "tmp___5"} boogie_si_record_i32($i13);
  // WARNING: call void @llvm.dbg.value(metadata i32 %14, i64 0, metadata !18885, metadata !8330), !dbg !18886, !verifier.code !8332
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13801, 13} true;
  assume {:verifier.code 0} true;
  call $p14 := ldv_zalloc(288);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13802, 14} true;
  assume {:verifier.code 0} true;
  $p15 := $bitcast.ref.ref($p14);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13803, 13} true;
  assume {:verifier.code 0} true;
  call $p16 := ldv_zalloc(288);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13804, 14} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p16);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13805, 13} true;
  assume {:verifier.code 0} true;
  call $p18 := ldv_zalloc(32);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13806, 14} true;
  assume {:verifier.code 0} true;
  $p19 := $bitcast.ref.ref($p18);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13807, 3} true;
  assume {:verifier.code 0} true;
  call ldv_initialize();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13808, 3} true;
  assume {:verifier.code 0} true;
  $p20 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13808, 3} true;
  assume {:verifier.code 0} true;
  call $M.68 := $memset.i8($M.68, $p20, 0, 4, $zext.i32.i64(4), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13809, 3} true;
  assume {:verifier.code 0} true;
  $p21 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13809, 3} true;
  assume {:verifier.code 0} true;
  call $M.69 := $memset.i8($M.69, $p21, 0, 8, $zext.i32.i64(8), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13810, 3} true;
  assume {:verifier.code 0} true;
  $p22 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13810, 3} true;
  assume {:verifier.code 0} true;
  call $M.70 := $memset.i8($M.70, $p22, 0, 2, $zext.i32.i64(2), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13811, 3} true;
  assume {:verifier.code 0} true;
  $p23 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13811, 3} true;
  assume {:verifier.code 0} true;
  call $M.71 := $memset.i8($M.71, $p23, 0, 2, $zext.i32.i64(2), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13812, 3} true;
  assume {:verifier.code 0} true;
  $p24 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13812, 3} true;
  assume {:verifier.code 0} true;
  call $M.72 := $memset.i8($M.72, $p24, 0, 4, $zext.i32.i64(4), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13813, 24} true;
  assume {:verifier.code 0} true;
  $M.73 := 0;
  call {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13814, 24} true;
  assume {:verifier.code 0} true;
  $M.74 := 1;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13815, 24} true;
  assume {:verifier.code 0} true;
  $M.29 := 0;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13816, 24} true;
  assume {:verifier.code 0} true;
  $M.75 := 0;
  call {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13817, 24} true;
  assume {:verifier.code 0} true;
  $M.76 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13818, 24} true;
  assume {:verifier.code 0} true;
  $M.77 := 0;
  call {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13819, 24} true;
  assume {:verifier.code 0} true;
  $M.78 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13820, 3} true;
  assume {:verifier.code 0} true;
  call timer_init_4();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13821, 24} true;
  assume {:verifier.code 0} true;
  $M.79 := 1;
  call {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13822, 11} true;
  assume {:verifier.code 0} true;
  $M.80 := 0;
  call {:cexpr "ref_cnt"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13823, 24} true;
  assume {:verifier.code 0} true;
  $M.81 := 1;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13824, 25} true;
  assume {:verifier.code 0} true;
  $M.40 := 0;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13825, 24} true;
  assume {:verifier.code 0} true;
  $M.82 := 0;
  call {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13825, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13827, 13} true;
  assume {:verifier.code 1} true;
  call $i25 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i25);
  // WARNING: %27 = call i32 @__VERIFIER_nondet_int(), !dbg !8418, !verifier.code !8343
  call {:cexpr "tmp___9"} boogie_si_record_i32($i25);
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:verifier.code 0} true;
  $i26 := $slt.i32($i25, 5);
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i26 == 1);
  assume {:verifier.code 0} true;
  $i33 := $slt.i32($i25, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i33} true;
  goto $bb18, $bb19;
$bb4:
  assume !(($i26 == 1));
  assume {:verifier.code 0} true;
  $i27 := $slt.i32($i25, 8);
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i27 == 1);
  assume {:verifier.code 0} true;
  $i31 := $slt.i32($i25, 6);
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb14, $bb15;
$bb6:
  assume !(($i27 == 1));
  assume {:verifier.code 0} true;
  $i28 := $slt.i32($i25, 9);
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i28 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14247, 7} true;
  assume {:verifier.code 0} true;
  $i301 := $M.81;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14247, 28} true;
  assume {:verifier.code 0} true;
  $i302 := $ne.i32($i301, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14247, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i302} true;
  goto $bb268, $bb269;
$bb8:
  assume !(($i28 == 1));
  assume {:verifier.code 0} true;
  $i29 := $slt.i32($i25, 10);
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i29 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14294, 7} true;
  assume {:verifier.code 0} true;
  $i318 := $M.40;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14294, 29} true;
  assume {:verifier.code 0} true;
  $i319 := $ne.i32($i318, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14294, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i319} true;
  goto $bb298, $bb299;
$bb10:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  $i30 := $eq.i32($i25, 10);
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i30 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14301, 7} true;
  assume {:verifier.code 0} true;
  $i320 := $M.82;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14301, 28} true;
  assume {:verifier.code 0} true;
  $i321 := $ne.i32($i320, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14301, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i321} true;
  goto $bb301, $bb302;
$bb12:
  assume {:verifier.code 0} true;
  assume !(($i30 == 1));
  goto $bb13;
$bb13:
  assume {:verifier.code 0} true;
  goto $bb354;
$bb14:
  assume ($i31 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14213, 7} true;
  assume {:verifier.code 0} true;
  $i291 := $M.77;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14213, 28} true;
  assume {:verifier.code 0} true;
  $i292 := $ne.i32($i291, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14213, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i292} true;
  goto $bb250, $bb251;
$bb15:
  assume !(($i31 == 1));
  assume {:verifier.code 0} true;
  $i32 := $slt.i32($i25, 7);
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb16, $bb17;
$bb16:
  assume ($i32 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14233, 7} true;
  assume {:verifier.code 0} true;
  $i297 := $M.78;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14233, 28} true;
  assume {:verifier.code 0} true;
  $i298 := $ne.i32($i297, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14233, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i298} true;
  goto $bb262, $bb263;
$bb17:
  assume !(($i32 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14240, 7} true;
  assume {:verifier.code 0} true;
  $i299 := $M.79;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14240, 28} true;
  assume {:verifier.code 0} true;
  $i300 := $ne.i32($i299, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14240, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i300} true;
  goto $bb265, $bb266;
$bb18:
  assume ($i33 == 1);
  assume {:verifier.code 0} true;
  $i36 := $slt.i32($i25, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb24, $bb25;
$bb19:
  assume !(($i33 == 1));
  assume {:verifier.code 0} true;
  $i34 := $slt.i32($i25, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i34 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13930, 7} true;
  assume {:verifier.code 0} true;
  $i98 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13930, 28} true;
  assume {:verifier.code 0} true;
  $i99 := $ne.i32($i98, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13930, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i99} true;
  goto $bb87, $bb88;
$bb21:
  assume !(($i34 == 1));
  assume {:verifier.code 0} true;
  $i35 := $slt.i32($i25, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb22, $bb23;
$bb22:
  assume ($i35 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14186, 7} true;
  assume {:verifier.code 0} true;
  $i283 := $M.75;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14186, 28} true;
  assume {:verifier.code 0} true;
  $i284 := $ne.i32($i283, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14186, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i284} true;
  goto $bb235, $bb236;
$bb23:
  assume !(($i35 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14206, 7} true;
  assume {:verifier.code 0} true;
  $i289 := $M.76;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14206, 28} true;
  assume {:verifier.code 0} true;
  $i290 := $ne.i32($i289, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14206, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i290} true;
  goto $bb247, $bb248;
$bb24:
  assume ($i36 == 1);
  assume {:verifier.code 0} true;
  $i37 := $eq.i32($i25, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb26, $bb27;
$bb25:
  assume !(($i36 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13923, 7} true;
  assume {:verifier.code 0} true;
  $i96 := $M.74;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13923, 28} true;
  assume {:verifier.code 0} true;
  $i97 := $ne.i32($i96, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13923, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i97} true;
  goto $bb84, $bb85;
$bb26:
  assume ($i37 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13830, 7} true;
  assume {:verifier.code 0} true;
  $i38 := $M.73;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13830, 28} true;
  assume {:verifier.code 0} true;
  $i39 := $ne.i32($i38, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13830, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb28, $bb29;
$bb27:
  assume {:verifier.code 0} true;
  assume !(($i37 == 1));
  goto $bb13;
$bb28:
  assume ($i39 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13831, 16} true;
  assume {:verifier.code 1} true;
  call $i40 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i40);
  // WARNING: %32 = call i32 @__VERIFIER_nondet_int(), !dbg !8426, !verifier.code !8343
  call {:cexpr "tmp___10"} boogie_si_record_i32($i40);
  assume {:verifier.code 0} true;
  goto $bb30;
$bb29:
  assume !(($i39 == 1));
  assume {:verifier.code 0} true;
  goto $bb82;
$bb30:
  assume {:verifier.code 0} true;
  $i41 := $slt.i32($i40, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb31, $bb32;
$bb31:
  assume ($i41 == 1);
  assume {:verifier.code 0} true;
  $i45 := $slt.i32($i40, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb40, $bb41;
$bb32:
  assume !(($i41 == 1));
  assume {:verifier.code 0} true;
  $i42 := $slt.i32($i40, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i42} true;
  goto $bb33, $bb34;
$bb33:
  assume ($i42 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13882, 9} true;
  assume {:verifier.code 0} true;
  $i78 := $M.73;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13882, 30} true;
  assume {:verifier.code 0} true;
  $i79 := $eq.i32($i78, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13882, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i79} true;
  goto $bb68, $bb69;
$bb34:
  assume !(($i42 == 1));
  assume {:verifier.code 0} true;
  $i43 := $slt.i32($i40, 5);
  assume {:verifier.code 0} true;
  assume {:branchcond $i43} true;
  goto $bb35, $bb36;
$bb35:
  assume ($i43 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13890, 9} true;
  assume {:verifier.code 0} true;
  $i81 := $M.73;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13890, 30} true;
  assume {:verifier.code 0} true;
  $i82 := $eq.i32($i81, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13890, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i82} true;
  goto $bb71, $bb72;
$bb36:
  assume !(($i43 == 1));
  assume {:verifier.code 0} true;
  $i44 := $eq.i32($i40, 5);
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb37, $bb38;
$bb37:
  assume ($i44 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13906, 9} true;
  assume {:verifier.code 0} true;
  $i91 := $M.73;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13906, 30} true;
  assume {:verifier.code 0} true;
  $i92 := $eq.i32($i91, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13906, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i92} true;
  goto $bb77, $bb78;
$bb38:
  assume {:verifier.code 0} true;
  assume !(($i44 == 1));
  goto $bb39;
$bb39:
  assume {:verifier.code 0} true;
  goto $bb80;
$bb40:
  assume ($i45 == 1);
  assume {:verifier.code 0} true;
  $i47 := $eq.i32($i40, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i47} true;
  goto $bb44, $bb45;
$bb41:
  assume !(($i45 == 1));
  assume {:verifier.code 0} true;
  $i46 := $slt.i32($i40, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb42, $bb43;
$bb42:
  assume ($i46 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13842, 9} true;
  assume {:verifier.code 0} true;
  $i51 := $M.73;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13842, 30} true;
  assume {:verifier.code 0} true;
  $i52 := $eq.i32($i51, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13842, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i52} true;
  goto $bb50, $bb51;
$bb43:
  assume !(($i46 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13862, 9} true;
  assume {:verifier.code 0} true;
  $i63 := $M.73;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13862, 30} true;
  assume {:verifier.code 0} true;
  $i64 := $eq.i32($i63, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13862, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i64} true;
  goto $bb59, $bb60;
$bb44:
  assume ($i47 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13834, 9} true;
  assume {:verifier.code 0} true;
  $i48 := $M.73;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13834, 30} true;
  assume {:verifier.code 0} true;
  $i49 := $eq.i32($i48, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13834, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb46, $bb47;
$bb45:
  assume {:verifier.code 0} true;
  assume !(($i47 == 1));
  goto $bb39;
$bb46:
  assume ($i49 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13835, 23} true;
  assume {:verifier.code 0} true;
  $p50 := $M.67;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13835, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_io_resume($p50);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13836, 28} true;
  assume {:verifier.code 0} true;
  $M.73 := 2;
  call {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13837, 5} true;
  assume {:verifier.code 0} true;
  goto $bb48;
$bb47:
  assume !(($i49 == 1));
  assume {:verifier.code 0} true;
  goto $bb48;
$bb48:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13840, 5} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb49:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13918, 3} true;
  assume {:verifier.code 0} true;
  goto $bb82;
$bb50:
  assume ($i52 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13843, 27} true;
  assume {:verifier.code 0} true;
  $p53 := $M.67;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13843, 7} true;
  assume {:verifier.code 0} true;
  call $i54 := igbvf_io_slot_reset($p53);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13844, 28} true;
  assume {:verifier.code 0} true;
  $M.73 := 1;
  call {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13845, 5} true;
  assume {:verifier.code 0} true;
  goto $bb52;
$bb51:
  assume !(($i52 == 1));
  assume {:verifier.code 0} true;
  goto $bb52;
$bb52:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13848, 9} true;
  assume {:verifier.code 0} true;
  $i55 := $M.73;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13848, 30} true;
  assume {:verifier.code 0} true;
  $i56 := $eq.i32($i55, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13848, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb53, $bb54;
$bb53:
  assume ($i56 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13849, 27} true;
  assume {:verifier.code 0} true;
  $p57 := $M.67;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13849, 7} true;
  assume {:verifier.code 0} true;
  call $i58 := igbvf_io_slot_reset($p57);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13850, 28} true;
  assume {:verifier.code 0} true;
  $M.73 := 3;
  call {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13851, 5} true;
  assume {:verifier.code 0} true;
  goto $bb55;
$bb54:
  assume !(($i56 == 1));
  assume {:verifier.code 0} true;
  goto $bb55;
$bb55:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13854, 9} true;
  assume {:verifier.code 0} true;
  $i59 := $M.73;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13854, 30} true;
  assume {:verifier.code 0} true;
  $i60 := $eq.i32($i59, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13854, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i60} true;
  goto $bb56, $bb57;
$bb56:
  assume ($i60 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13855, 27} true;
  assume {:verifier.code 0} true;
  $p61 := $M.67;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13855, 7} true;
  assume {:verifier.code 0} true;
  call $i62 := igbvf_io_slot_reset($p61);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13856, 28} true;
  assume {:verifier.code 0} true;
  $M.73 := 2;
  call {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13857, 5} true;
  assume {:verifier.code 0} true;
  goto $bb58;
$bb57:
  assume !(($i60 == 1));
  assume {:verifier.code 0} true;
  goto $bb58;
$bb58:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13860, 5} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb59:
  assume ($i64 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13863, 31} true;
  assume {:verifier.code 0} true;
  $p65 := $M.67;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13863, 79} true;
  assume {:verifier.code 0} true;
  $i66 := $load.i32($M.68, $p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13863, 7} true;
  assume {:verifier.code 0} true;
  call $i67 := igbvf_io_error_detected($p65, $i66);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13864, 28} true;
  assume {:verifier.code 0} true;
  $M.73 := 1;
  call {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13865, 5} true;
  assume {:verifier.code 0} true;
  goto $bb61;
$bb60:
  assume !(($i64 == 1));
  assume {:verifier.code 0} true;
  goto $bb61;
$bb61:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13868, 9} true;
  assume {:verifier.code 0} true;
  $i68 := $M.73;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13868, 30} true;
  assume {:verifier.code 0} true;
  $i69 := $eq.i32($i68, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13868, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i69} true;
  goto $bb62, $bb63;
$bb62:
  assume ($i69 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13869, 31} true;
  assume {:verifier.code 0} true;
  $p70 := $M.67;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13869, 79} true;
  assume {:verifier.code 0} true;
  $i71 := $load.i32($M.68, $p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13869, 7} true;
  assume {:verifier.code 0} true;
  call $i72 := igbvf_io_error_detected($p70, $i71);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13870, 28} true;
  assume {:verifier.code 0} true;
  $M.73 := 3;
  call {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13871, 5} true;
  assume {:verifier.code 0} true;
  goto $bb64;
$bb63:
  assume !(($i69 == 1));
  assume {:verifier.code 0} true;
  goto $bb64;
$bb64:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13874, 9} true;
  assume {:verifier.code 0} true;
  $i73 := $M.73;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13874, 30} true;
  assume {:verifier.code 0} true;
  $i74 := $eq.i32($i73, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13874, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i74} true;
  goto $bb65, $bb66;
$bb65:
  assume ($i74 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13875, 31} true;
  assume {:verifier.code 0} true;
  $p75 := $M.67;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13875, 79} true;
  assume {:verifier.code 0} true;
  $i76 := $load.i32($M.68, $p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13875, 7} true;
  assume {:verifier.code 0} true;
  call $i77 := igbvf_io_error_detected($p75, $i76);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13876, 28} true;
  assume {:verifier.code 0} true;
  $M.73 := 2;
  call {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13877, 5} true;
  assume {:verifier.code 0} true;
  goto $bb67;
$bb66:
  assume !(($i74 == 1));
  assume {:verifier.code 0} true;
  goto $bb67;
$bb67:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13880, 5} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb68:
  assume ($i79 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13883, 7} true;
  assume {:verifier.code 0} true;
  call $i80 := ldv_suspend_6();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13884, 28} true;
  assume {:verifier.code 0} true;
  $M.73 := 3;
  call {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13885, 5} true;
  assume {:verifier.code 0} true;
  goto $bb70;
$bb69:
  assume !(($i79 == 1));
  assume {:verifier.code 0} true;
  goto $bb70;
$bb70:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13888, 5} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb71:
  assume ($i82 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13891, 7} true;
  assume {:verifier.code 0} true;
  call $i83 := ldv_release_6();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13892, 28} true;
  assume {:verifier.code 0} true;
  $M.73 := 1;
  call {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13893, 17} true;
  assume {:verifier.code 0} true;
  $i84 := $M.80;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13893, 25} true;
  assume {:verifier.code 0} true;
  $i85 := $sub.i32($i84, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13893, 15} true;
  assume {:verifier.code 0} true;
  $M.80 := $i85;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i85);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13894, 5} true;
  assume {:verifier.code 0} true;
  goto $bb73;
$bb72:
  assume !(($i82 == 1));
  assume {:verifier.code 0} true;
  goto $bb73;
$bb73:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13897, 9} true;
  assume {:verifier.code 0} true;
  $i86 := $M.73;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13897, 30} true;
  assume {:verifier.code 0} true;
  $i87 := $eq.i32($i86, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13897, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i87} true;
  goto $bb74, $bb75;
$bb74:
  assume ($i87 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13898, 7} true;
  assume {:verifier.code 0} true;
  call $i88 := ldv_release_6();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13899, 28} true;
  assume {:verifier.code 0} true;
  $M.73 := 1;
  call {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13900, 17} true;
  assume {:verifier.code 0} true;
  $i89 := $M.80;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13900, 25} true;
  assume {:verifier.code 0} true;
  $i90 := $sub.i32($i89, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13900, 15} true;
  assume {:verifier.code 0} true;
  $M.80 := $i90;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i90);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13901, 5} true;
  assume {:verifier.code 0} true;
  goto $bb76;
$bb75:
  assume !(($i87 == 1));
  assume {:verifier.code 0} true;
  goto $bb76;
$bb76:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13904, 5} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb77:
  assume ($i92 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13907, 7} true;
  assume {:verifier.code 0} true;
  call $i93 := ldv_probe_6();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13908, 28} true;
  assume {:verifier.code 0} true;
  $M.73 := 2;
  call {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13909, 17} true;
  assume {:verifier.code 0} true;
  $i94 := $M.80;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13909, 25} true;
  assume {:verifier.code 0} true;
  $i95 := $add.i32($i94, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13909, 15} true;
  assume {:verifier.code 0} true;
  $M.80 := $i95;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i95);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13910, 5} true;
  assume {:verifier.code 0} true;
  goto $bb79;
$bb78:
  assume !(($i92 == 1));
  assume {:verifier.code 0} true;
  goto $bb79;
$bb79:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13913, 5} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb80:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13915, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13916, 5} true;
  assume {:verifier.code 0} true;
  goto $bb81;
$bb81:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13916, 5} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb82:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13921, 3} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb83:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14390, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb84:
  assume ($i97 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13924, 5} true;
  assume {:verifier.code 0} true;
  call choose_interrupt_3();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13925, 3} true;
  assume {:verifier.code 0} true;
  goto $bb86;
$bb85:
  assume !(($i97 == 1));
  assume {:verifier.code 0} true;
  goto $bb86;
$bb86:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13928, 3} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb87:
  assume ($i99 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13931, 16} true;
  assume {:verifier.code 1} true;
  call $i100 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i100);
  // WARNING: %135 = call i32 @__VERIFIER_nondet_int(), !dbg !8562, !verifier.code !8343
  call {:cexpr "tmp___11"} boogie_si_record_i32($i100);
  assume {:verifier.code 0} true;
  goto $bb89;
$bb88:
  assume !(($i99 == 1));
  assume {:verifier.code 0} true;
  goto $bb234;
$bb89:
  assume {:verifier.code 0} true;
  $i101 := $slt.i32($i100, 7);
  assume {:verifier.code 0} true;
  assume {:branchcond $i101} true;
  goto $bb90, $bb91;
$bb90:
  assume ($i101 == 1);
  assume {:verifier.code 0} true;
  $i110 := $slt.i32($i100, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i110} true;
  goto $bb109, $bb110;
$bb91:
  assume !(($i101 == 1));
  assume {:verifier.code 0} true;
  $i102 := $slt.i32($i100, 11);
  assume {:verifier.code 0} true;
  assume {:branchcond $i102} true;
  goto $bb92, $bb93;
$bb92:
  assume ($i102 == 1);
  assume {:verifier.code 0} true;
  $i107 := $slt.i32($i100, 9);
  assume {:verifier.code 0} true;
  assume {:branchcond $i107} true;
  goto $bb103, $bb104;
$bb93:
  assume !(($i102 == 1));
  assume {:verifier.code 0} true;
  $i103 := $slt.i32($i100, 13);
  assume {:verifier.code 0} true;
  assume {:branchcond $i103} true;
  goto $bb94, $bb95;
$bb94:
  assume ($i103 == 1);
  assume {:verifier.code 0} true;
  $i106 := $slt.i32($i100, 12);
  assume {:verifier.code 0} true;
  assume {:branchcond $i106} true;
  goto $bb101, $bb102;
$bb95:
  assume !(($i103 == 1));
  assume {:verifier.code 0} true;
  $i104 := $slt.i32($i100, 14);
  assume {:verifier.code 0} true;
  assume {:branchcond $i104} true;
  goto $bb96, $bb97;
$bb96:
  assume ($i104 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14156, 9} true;
  assume {:verifier.code 0} true;
  $i271 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14156, 30} true;
  assume {:verifier.code 0} true;
  $i272 := $eq.i32($i271, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14156, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i272} true;
  goto $bb223, $bb224;
$bb97:
  assume !(($i104 == 1));
  assume {:verifier.code 0} true;
  $i105 := $eq.i32($i100, 14);
  assume {:verifier.code 0} true;
  assume {:branchcond $i105} true;
  goto $bb98, $bb99;
$bb98:
  assume ($i105 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14169, 9} true;
  assume {:verifier.code 0} true;
  $i278 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14169, 30} true;
  assume {:verifier.code 0} true;
  $i279 := $eq.i32($i278, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14169, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i279} true;
  goto $bb229, $bb230;
$bb99:
  assume {:verifier.code 0} true;
  assume !(($i105 == 1));
  goto $bb100;
$bb100:
  assume {:verifier.code 0} true;
  goto $bb232;
$bb101:
  assume ($i106 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14116, 9} true;
  assume {:verifier.code 0} true;
  $i250 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14116, 30} true;
  assume {:verifier.code 0} true;
  $i251 := $eq.i32($i250, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14116, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i251} true;
  goto $bb205, $bb206;
$bb102:
  assume !(($i106 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14136, 9} true;
  assume {:verifier.code 0} true;
  $i262 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14136, 30} true;
  assume {:verifier.code 0} true;
  $i263 := $eq.i32($i262, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14136, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i263} true;
  goto $bb214, $bb215;
$bb103:
  assume ($i107 == 1);
  assume {:verifier.code 0} true;
  $i109 := $slt.i32($i100, 8);
  assume {:verifier.code 0} true;
  assume {:branchcond $i109} true;
  goto $bb107, $bb108;
$bb104:
  assume !(($i107 == 1));
  assume {:verifier.code 0} true;
  $i108 := $slt.i32($i100, 10);
  assume {:verifier.code 0} true;
  assume {:branchcond $i108} true;
  goto $bb105, $bb106;
$bb105:
  assume ($i108 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14082, 9} true;
  assume {:verifier.code 0} true;
  $i227 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14082, 30} true;
  assume {:verifier.code 0} true;
  $i228 := $eq.i32($i227, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14082, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i228} true;
  goto $bb190, $bb191;
$bb106:
  assume !(($i108 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14102, 9} true;
  assume {:verifier.code 0} true;
  $i242 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14102, 30} true;
  assume {:verifier.code 0} true;
  $i243 := $eq.i32($i242, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14102, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i243} true;
  goto $bb199, $bb200;
$bb107:
  assume ($i109 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14042, 9} true;
  assume {:verifier.code 0} true;
  $i209 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14042, 30} true;
  assume {:verifier.code 0} true;
  $i210 := $eq.i32($i209, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14042, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i210} true;
  goto $bb172, $bb173;
$bb108:
  assume !(($i109 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14062, 9} true;
  assume {:verifier.code 0} true;
  $i218 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14062, 30} true;
  assume {:verifier.code 0} true;
  $i219 := $eq.i32($i218, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14062, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i219} true;
  goto $bb181, $bb182;
$bb109:
  assume ($i110 == 1);
  assume {:verifier.code 0} true;
  $i114 := $slt.i32($i100, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i114} true;
  goto $bb117, $bb118;
$bb110:
  assume !(($i110 == 1));
  assume {:verifier.code 0} true;
  $i111 := $slt.i32($i100, 5);
  assume {:verifier.code 0} true;
  assume {:branchcond $i111} true;
  goto $bb111, $bb112;
$bb111:
  assume ($i111 == 1);
  assume {:verifier.code 0} true;
  $i113 := $slt.i32($i100, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i113} true;
  goto $bb115, $bb116;
$bb112:
  assume !(($i111 == 1));
  assume {:verifier.code 0} true;
  $i112 := $slt.i32($i100, 6);
  assume {:verifier.code 0} true;
  assume {:branchcond $i112} true;
  goto $bb113, $bb114;
$bb113:
  assume ($i112 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14026, 9} true;
  assume {:verifier.code 0} true;
  $i201 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14026, 30} true;
  assume {:verifier.code 0} true;
  $i202 := $eq.i32($i201, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14026, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i202} true;
  goto $bb166, $bb167;
$bb114:
  assume !(($i112 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14034, 9} true;
  assume {:verifier.code 0} true;
  $i205 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14034, 30} true;
  assume {:verifier.code 0} true;
  $i206 := $eq.i32($i205, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14034, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i206} true;
  goto $bb169, $bb170;
$bb115:
  assume ($i113 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13994, 9} true;
  assume {:verifier.code 0} true;
  $i183 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13994, 30} true;
  assume {:verifier.code 0} true;
  $i184 := $eq.i32($i183, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13994, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i184} true;
  goto $bb151, $bb152;
$bb116:
  assume !(($i113 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14014, 9} true;
  assume {:verifier.code 0} true;
  $i195 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14014, 30} true;
  assume {:verifier.code 0} true;
  $i196 := $eq.i32($i195, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14014, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i196} true;
  goto $bb160, $bb161;
$bb117:
  assume ($i114 == 1);
  assume {:verifier.code 0} true;
  $i116 := $eq.i32($i100, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i116} true;
  goto $bb121, $bb122;
$bb118:
  assume !(($i114 == 1));
  assume {:verifier.code 0} true;
  $i115 := $slt.i32($i100, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i115} true;
  goto $bb119, $bb120;
$bb119:
  assume ($i115 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13954, 9} true;
  assume {:verifier.code 0} true;
  $i144 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13954, 30} true;
  assume {:verifier.code 0} true;
  $i145 := $eq.i32($i144, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13954, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i145} true;
  goto $bb133, $bb134;
$bb120:
  assume !(($i115 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13974, 9} true;
  assume {:verifier.code 0} true;
  $i156 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13974, 30} true;
  assume {:verifier.code 0} true;
  $i157 := $eq.i32($i156, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13974, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i157} true;
  goto $bb142, $bb143;
$bb121:
  assume ($i116 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13934, 9} true;
  assume {:verifier.code 0} true;
  $i117 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13934, 30} true;
  assume {:verifier.code 0} true;
  $i118 := $eq.i32($i117, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13934, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i118} true;
  goto $bb123, $bb124;
$bb122:
  assume {:verifier.code 0} true;
  assume !(($i116 == 1));
  goto $bb100;
$bb123:
  assume ($i118 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13935, 30} true;
  assume {:verifier.code 0} true;
  $p119 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13935, 61} true;
  assume {:verifier.code 0} true;
  $i120 := $load.i16($M.71, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13935, 55} true;
  assume {:verifier.code 0} true;
  $i121 := $zext.i16.i32($i120);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13935, 55} true;
  assume {:verifier.code 0} true;
  $i122 := $trunc.i32.i16($i121);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13935, 71} true;
  assume {:verifier.code 0} true;
  $i123 := $zext.i16.i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13935, 71} true;
  assume {:verifier.code 0} true;
  $i124 := $trunc.i32.i16($i123);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13935, 7} true;
  assume {:verifier.code 0} true;
  call $i125 := igbvf_vlan_rx_kill_vid($p119, $i122, $i124);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13936, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 1;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13937, 5} true;
  assume {:verifier.code 0} true;
  goto $bb125;
$bb124:
  assume !(($i118 == 1));
  assume {:verifier.code 0} true;
  goto $bb125;
$bb125:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13940, 9} true;
  assume {:verifier.code 0} true;
  $i126 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13940, 30} true;
  assume {:verifier.code 0} true;
  $i127 := $eq.i32($i126, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13940, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i127} true;
  goto $bb126, $bb127;
$bb126:
  assume ($i127 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13941, 30} true;
  assume {:verifier.code 0} true;
  $p128 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13941, 61} true;
  assume {:verifier.code 0} true;
  $i129 := $load.i16($M.71, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13941, 55} true;
  assume {:verifier.code 0} true;
  $i130 := $zext.i16.i32($i129);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13941, 55} true;
  assume {:verifier.code 0} true;
  $i131 := $trunc.i32.i16($i130);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13941, 71} true;
  assume {:verifier.code 0} true;
  $i132 := $zext.i16.i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13941, 71} true;
  assume {:verifier.code 0} true;
  $i133 := $trunc.i32.i16($i132);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13941, 7} true;
  assume {:verifier.code 0} true;
  call $i134 := igbvf_vlan_rx_kill_vid($p128, $i131, $i133);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13942, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 3;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13943, 5} true;
  assume {:verifier.code 0} true;
  goto $bb128;
$bb127:
  assume !(($i127 == 1));
  assume {:verifier.code 0} true;
  goto $bb128;
$bb128:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13946, 9} true;
  assume {:verifier.code 0} true;
  $i135 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13946, 30} true;
  assume {:verifier.code 0} true;
  $i136 := $eq.i32($i135, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13946, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i136} true;
  goto $bb129, $bb130;
$bb129:
  assume ($i136 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13947, 30} true;
  assume {:verifier.code 0} true;
  $p137 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13947, 61} true;
  assume {:verifier.code 0} true;
  $i138 := $load.i16($M.71, $p3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13947, 55} true;
  assume {:verifier.code 0} true;
  $i139 := $zext.i16.i32($i138);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13947, 55} true;
  assume {:verifier.code 0} true;
  $i140 := $trunc.i32.i16($i139);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13947, 71} true;
  assume {:verifier.code 0} true;
  $i141 := $zext.i16.i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13947, 71} true;
  assume {:verifier.code 0} true;
  $i142 := $trunc.i32.i16($i141);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13947, 7} true;
  assume {:verifier.code 0} true;
  call $i143 := igbvf_vlan_rx_kill_vid($p137, $i140, $i142);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13948, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 2;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13949, 5} true;
  assume {:verifier.code 0} true;
  goto $bb131;
$bb130:
  assume !(($i136 == 1));
  assume {:verifier.code 0} true;
  goto $bb131;
$bb131:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13952, 5} true;
  assume {:verifier.code 0} true;
  goto $bb132;
$bb132:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14181, 3} true;
  assume {:verifier.code 0} true;
  goto $bb234;
$bb133:
  assume ($i145 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13955, 19} true;
  assume {:verifier.code 0} true;
  $p146 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13955, 7} true;
  assume {:verifier.code 0} true;
  call $i147 := igbvf_ioctl($p146, $p9, $i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13956, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 1;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13957, 5} true;
  assume {:verifier.code 0} true;
  goto $bb135;
$bb134:
  assume !(($i145 == 1));
  assume {:verifier.code 0} true;
  goto $bb135;
$bb135:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13960, 9} true;
  assume {:verifier.code 0} true;
  $i148 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13960, 30} true;
  assume {:verifier.code 0} true;
  $i149 := $eq.i32($i148, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13960, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i149} true;
  goto $bb136, $bb137;
$bb136:
  assume ($i149 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13961, 19} true;
  assume {:verifier.code 0} true;
  $p150 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13961, 7} true;
  assume {:verifier.code 0} true;
  call $i151 := igbvf_ioctl($p150, $p9, $i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13962, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 3;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13963, 5} true;
  assume {:verifier.code 0} true;
  goto $bb138;
$bb137:
  assume !(($i149 == 1));
  assume {:verifier.code 0} true;
  goto $bb138;
$bb138:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13966, 9} true;
  assume {:verifier.code 0} true;
  $i152 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13966, 30} true;
  assume {:verifier.code 0} true;
  $i153 := $eq.i32($i152, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13966, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i153} true;
  goto $bb139, $bb140;
$bb139:
  assume ($i153 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13967, 19} true;
  assume {:verifier.code 0} true;
  $p154 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13967, 7} true;
  assume {:verifier.code 0} true;
  call $i155 := igbvf_ioctl($p154, $p9, $i5);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13968, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 2;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13969, 5} true;
  assume {:verifier.code 0} true;
  goto $bb141;
$bb140:
  assume !(($i153 == 1));
  assume {:verifier.code 0} true;
  goto $bb141;
$bb141:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13972, 5} true;
  assume {:verifier.code 0} true;
  goto $bb132;
$bb142:
  assume ($i157 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13975, 29} true;
  assume {:verifier.code 0} true;
  $p158 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13975, 60} true;
  assume {:verifier.code 0} true;
  $i159 := $load.i16($M.70, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13975, 54} true;
  assume {:verifier.code 0} true;
  $i160 := $zext.i16.i32($i159);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13975, 54} true;
  assume {:verifier.code 0} true;
  $i161 := $trunc.i32.i16($i160);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13975, 69} true;
  assume {:verifier.code 0} true;
  $i162 := $zext.i16.i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13975, 69} true;
  assume {:verifier.code 0} true;
  $i163 := $trunc.i32.i16($i162);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13975, 7} true;
  assume {:verifier.code 0} true;
  call $i164 := igbvf_vlan_rx_add_vid($p158, $i161, $i163);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13976, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 1;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13977, 5} true;
  assume {:verifier.code 0} true;
  goto $bb144;
$bb143:
  assume !(($i157 == 1));
  assume {:verifier.code 0} true;
  goto $bb144;
$bb144:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13980, 9} true;
  assume {:verifier.code 0} true;
  $i165 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13980, 30} true;
  assume {:verifier.code 0} true;
  $i166 := $eq.i32($i165, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13980, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i166} true;
  goto $bb145, $bb146;
$bb145:
  assume ($i166 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13981, 29} true;
  assume {:verifier.code 0} true;
  $p167 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13981, 60} true;
  assume {:verifier.code 0} true;
  $i168 := $load.i16($M.70, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13981, 54} true;
  assume {:verifier.code 0} true;
  $i169 := $zext.i16.i32($i168);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13981, 54} true;
  assume {:verifier.code 0} true;
  $i170 := $trunc.i32.i16($i169);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13981, 69} true;
  assume {:verifier.code 0} true;
  $i171 := $zext.i16.i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13981, 69} true;
  assume {:verifier.code 0} true;
  $i172 := $trunc.i32.i16($i171);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13981, 7} true;
  assume {:verifier.code 0} true;
  call $i173 := igbvf_vlan_rx_add_vid($p167, $i170, $i172);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13982, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 3;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13983, 5} true;
  assume {:verifier.code 0} true;
  goto $bb147;
$bb146:
  assume !(($i166 == 1));
  assume {:verifier.code 0} true;
  goto $bb147;
$bb147:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13986, 9} true;
  assume {:verifier.code 0} true;
  $i174 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13986, 30} true;
  assume {:verifier.code 0} true;
  $i175 := $eq.i32($i174, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13986, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i175} true;
  goto $bb148, $bb149;
$bb148:
  assume ($i175 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13987, 29} true;
  assume {:verifier.code 0} true;
  $p176 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13987, 60} true;
  assume {:verifier.code 0} true;
  $i177 := $load.i16($M.70, $p2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13987, 54} true;
  assume {:verifier.code 0} true;
  $i178 := $zext.i16.i32($i177);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13987, 54} true;
  assume {:verifier.code 0} true;
  $i179 := $trunc.i32.i16($i178);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13987, 69} true;
  assume {:verifier.code 0} true;
  $i180 := $zext.i16.i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13987, 69} true;
  assume {:verifier.code 0} true;
  $i181 := $trunc.i32.i16($i180);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13987, 7} true;
  assume {:verifier.code 0} true;
  call $i182 := igbvf_vlan_rx_add_vid($p176, $i179, $i181);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13988, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 2;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13989, 5} true;
  assume {:verifier.code 0} true;
  goto $bb150;
$bb149:
  assume !(($i175 == 1));
  assume {:verifier.code 0} true;
  goto $bb150;
$bb150:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13992, 5} true;
  assume {:verifier.code 0} true;
  goto $bb132;
$bb151:
  assume ($i184 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13995, 23} true;
  assume {:verifier.code 0} true;
  $p185 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13995, 7} true;
  assume {:verifier.code 0} true;
  call $p186 := igbvf_get_stats($p185);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13996, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 1;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13997, 5} true;
  assume {:verifier.code 0} true;
  goto $bb153;
$bb152:
  assume !(($i184 == 1));
  assume {:verifier.code 0} true;
  goto $bb153;
$bb153:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14000, 9} true;
  assume {:verifier.code 0} true;
  $i187 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14000, 30} true;
  assume {:verifier.code 0} true;
  $i188 := $eq.i32($i187, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14000, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i188} true;
  goto $bb154, $bb155;
$bb154:
  assume ($i188 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14001, 23} true;
  assume {:verifier.code 0} true;
  $p189 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14001, 7} true;
  assume {:verifier.code 0} true;
  call $p190 := igbvf_get_stats($p189);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14002, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 3;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14003, 5} true;
  assume {:verifier.code 0} true;
  goto $bb156;
$bb155:
  assume !(($i188 == 1));
  assume {:verifier.code 0} true;
  goto $bb156;
$bb156:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14006, 9} true;
  assume {:verifier.code 0} true;
  $i191 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14006, 30} true;
  assume {:verifier.code 0} true;
  $i192 := $eq.i32($i191, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14006, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i192} true;
  goto $bb157, $bb158;
$bb157:
  assume ($i192 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14007, 23} true;
  assume {:verifier.code 0} true;
  $p193 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14007, 7} true;
  assume {:verifier.code 0} true;
  call $p194 := igbvf_get_stats($p193);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14008, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 2;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14009, 5} true;
  assume {:verifier.code 0} true;
  goto $bb159;
$bb158:
  assume !(($i192 == 1));
  assume {:verifier.code 0} true;
  goto $bb159;
$bb159:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14012, 5} true;
  assume {:verifier.code 0} true;
  goto $bb132;
$bb160:
  assume ($i196 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14015, 33} true;
  assume {:verifier.code 0} true;
  $p197 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14015, 22} true;
  assume {:verifier.code 0} true;
  call $i198 := igbvf_open($p197);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14015, 20} true;
  assume {:verifier.code 0} true;
  $M.83 := $i198;
  call {:cexpr "ldv_retval_1"} boogie_si_record_i32($i198);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14016, 11} true;
  assume {:verifier.code 0} true;
  $i199 := $M.83;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14016, 24} true;
  assume {:verifier.code 0} true;
  $i200 := $eq.i32($i199, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14016, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i200} true;
  goto $bb162, $bb163;
$bb161:
  assume !(($i196 == 1));
  assume {:verifier.code 0} true;
  goto $bb165;
$bb162:
  assume ($i200 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14017, 30} true;
  assume {:verifier.code 0} true;
  $M.29 := 3;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14018, 7} true;
  assume {:verifier.code 0} true;
  goto $bb164;
$bb163:
  assume !(($i200 == 1));
  assume {:verifier.code 0} true;
  goto $bb164;
$bb164:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14021, 5} true;
  assume {:verifier.code 0} true;
  goto $bb165;
$bb165:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14024, 5} true;
  assume {:verifier.code 0} true;
  goto $bb132;
$bb166:
  assume ($i202 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14027, 33} true;
  assume {:verifier.code 0} true;
  $p203 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14027, 7} true;
  assume {:verifier.code 0} true;
  call $i204 := igbvf_xmit_frame($p11, $p203);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14028, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 3;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14029, 5} true;
  assume {:verifier.code 0} true;
  goto $bb168;
$bb167:
  assume !(($i202 == 1));
  assume {:verifier.code 0} true;
  goto $bb168;
$bb168:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14032, 5} true;
  assume {:verifier.code 0} true;
  goto $bb132;
$bb169:
  assume ($i206 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14035, 19} true;
  assume {:verifier.code 0} true;
  $p207 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14035, 7} true;
  assume {:verifier.code 0} true;
  call $i208 := igbvf_close($p207);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14036, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 2;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14037, 5} true;
  assume {:verifier.code 0} true;
  goto $bb171;
$bb170:
  assume !(($i206 == 1));
  assume {:verifier.code 0} true;
  goto $bb171;
$bb171:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14040, 5} true;
  assume {:verifier.code 0} true;
  goto $bb132;
$bb172:
  assume ($i210 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14043, 23} true;
  assume {:verifier.code 0} true;
  $p211 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14043, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_set_multi($p211);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14044, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 1;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14045, 5} true;
  assume {:verifier.code 0} true;
  goto $bb174;
$bb173:
  assume !(($i210 == 1));
  assume {:verifier.code 0} true;
  goto $bb174;
$bb174:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14048, 9} true;
  assume {:verifier.code 0} true;
  $i212 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14048, 30} true;
  assume {:verifier.code 0} true;
  $i213 := $eq.i32($i212, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14048, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i213} true;
  goto $bb175, $bb176;
$bb175:
  assume ($i213 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14049, 23} true;
  assume {:verifier.code 0} true;
  $p214 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14049, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_set_multi($p214);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14050, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 3;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14051, 5} true;
  assume {:verifier.code 0} true;
  goto $bb177;
$bb176:
  assume !(($i213 == 1));
  assume {:verifier.code 0} true;
  goto $bb177;
$bb177:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14054, 9} true;
  assume {:verifier.code 0} true;
  $i215 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14054, 30} true;
  assume {:verifier.code 0} true;
  $i216 := $eq.i32($i215, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14054, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i216} true;
  goto $bb178, $bb179;
$bb178:
  assume ($i216 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14055, 23} true;
  assume {:verifier.code 0} true;
  $p217 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14055, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_set_multi($p217);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14056, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 2;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14057, 5} true;
  assume {:verifier.code 0} true;
  goto $bb180;
$bb179:
  assume !(($i216 == 1));
  assume {:verifier.code 0} true;
  goto $bb180;
$bb180:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14060, 5} true;
  assume {:verifier.code 0} true;
  goto $bb132;
$bb181:
  assume ($i219 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14063, 21} true;
  assume {:verifier.code 0} true;
  $p220 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14063, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_netpoll($p220);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14064, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 1;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14065, 5} true;
  assume {:verifier.code 0} true;
  goto $bb183;
$bb182:
  assume !(($i219 == 1));
  assume {:verifier.code 0} true;
  goto $bb183;
$bb183:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14068, 9} true;
  assume {:verifier.code 0} true;
  $i221 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14068, 30} true;
  assume {:verifier.code 0} true;
  $i222 := $eq.i32($i221, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14068, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i222} true;
  goto $bb184, $bb185;
$bb184:
  assume ($i222 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14069, 21} true;
  assume {:verifier.code 0} true;
  $p223 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14069, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_netpoll($p223);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14070, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 3;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14071, 5} true;
  assume {:verifier.code 0} true;
  goto $bb186;
$bb185:
  assume !(($i222 == 1));
  assume {:verifier.code 0} true;
  goto $bb186;
$bb186:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14074, 9} true;
  assume {:verifier.code 0} true;
  $i224 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14074, 30} true;
  assume {:verifier.code 0} true;
  $i225 := $eq.i32($i224, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14074, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i225} true;
  goto $bb187, $bb188;
$bb187:
  assume ($i225 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14075, 21} true;
  assume {:verifier.code 0} true;
  $p226 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14075, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_netpoll($p226);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14076, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 2;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14077, 5} true;
  assume {:verifier.code 0} true;
  goto $bb189;
$bb188:
  assume !(($i225 == 1));
  assume {:verifier.code 0} true;
  goto $bb189;
$bb189:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14080, 5} true;
  assume {:verifier.code 0} true;
  goto $bb132;
$bb190:
  assume ($i228 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14083, 26} true;
  assume {:verifier.code 0} true;
  $p229 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14083, 51} true;
  assume {:verifier.code 0} true;
  $i230 := $load.i64($M.69, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14083, 7} true;
  assume {:verifier.code 0} true;
  call $i231 := igbvf_set_features($p229, $i230);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14084, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 1;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14085, 5} true;
  assume {:verifier.code 0} true;
  goto $bb192;
$bb191:
  assume !(($i228 == 1));
  assume {:verifier.code 0} true;
  goto $bb192;
$bb192:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14088, 9} true;
  assume {:verifier.code 0} true;
  $i232 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14088, 30} true;
  assume {:verifier.code 0} true;
  $i233 := $eq.i32($i232, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14088, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i233} true;
  goto $bb193, $bb194;
$bb193:
  assume ($i233 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14089, 26} true;
  assume {:verifier.code 0} true;
  $p234 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14089, 51} true;
  assume {:verifier.code 0} true;
  $i235 := $load.i64($M.69, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14089, 7} true;
  assume {:verifier.code 0} true;
  call $i236 := igbvf_set_features($p234, $i235);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14090, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 3;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14091, 5} true;
  assume {:verifier.code 0} true;
  goto $bb195;
$bb194:
  assume !(($i233 == 1));
  assume {:verifier.code 0} true;
  goto $bb195;
$bb195:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14094, 9} true;
  assume {:verifier.code 0} true;
  $i237 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14094, 30} true;
  assume {:verifier.code 0} true;
  $i238 := $eq.i32($i237, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14094, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i238} true;
  goto $bb196, $bb197;
$bb196:
  assume ($i238 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14095, 26} true;
  assume {:verifier.code 0} true;
  $p239 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14095, 51} true;
  assume {:verifier.code 0} true;
  $i240 := $load.i64($M.69, $p1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14095, 7} true;
  assume {:verifier.code 0} true;
  call $i241 := igbvf_set_features($p239, $i240);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14096, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 2;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14097, 5} true;
  assume {:verifier.code 0} true;
  goto $bb198;
$bb197:
  assume !(($i238 == 1));
  assume {:verifier.code 0} true;
  goto $bb198;
$bb198:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14100, 5} true;
  assume {:verifier.code 0} true;
  goto $bb132;
$bb199:
  assume ($i243 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14103, 24} true;
  assume {:verifier.code 0} true;
  $p244 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14103, 7} true;
  assume {:verifier.code 0} true;
  call $i245 := igbvf_change_mtu($p244, $i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14104, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 3;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14105, 5} true;
  assume {:verifier.code 0} true;
  goto $bb201;
$bb200:
  assume !(($i243 == 1));
  assume {:verifier.code 0} true;
  goto $bb201;
$bb201:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14108, 9} true;
  assume {:verifier.code 0} true;
  $i246 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14108, 30} true;
  assume {:verifier.code 0} true;
  $i247 := $eq.i32($i246, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14108, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i247} true;
  goto $bb202, $bb203;
$bb202:
  assume ($i247 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14109, 24} true;
  assume {:verifier.code 0} true;
  $p248 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14109, 7} true;
  assume {:verifier.code 0} true;
  call $i249 := igbvf_change_mtu($p248, $i13);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14110, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 2;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14111, 5} true;
  assume {:verifier.code 0} true;
  goto $bb204;
$bb203:
  assume !(($i247 == 1));
  assume {:verifier.code 0} true;
  goto $bb204;
$bb204:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14114, 5} true;
  assume {:verifier.code 0} true;
  goto $bb132;
$bb205:
  assume ($i251 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14117, 21} true;
  assume {:verifier.code 0} true;
  $p252 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14117, 7} true;
  assume {:verifier.code 0} true;
  call $i253 := igbvf_set_mac($p252, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14118, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 1;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14119, 5} true;
  assume {:verifier.code 0} true;
  goto $bb207;
$bb206:
  assume !(($i251 == 1));
  assume {:verifier.code 0} true;
  goto $bb207;
$bb207:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14122, 9} true;
  assume {:verifier.code 0} true;
  $i254 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14122, 30} true;
  assume {:verifier.code 0} true;
  $i255 := $eq.i32($i254, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14122, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i255} true;
  goto $bb208, $bb209;
$bb208:
  assume ($i255 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14123, 21} true;
  assume {:verifier.code 0} true;
  $p256 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14123, 7} true;
  assume {:verifier.code 0} true;
  call $i257 := igbvf_set_mac($p256, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14124, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 3;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14125, 5} true;
  assume {:verifier.code 0} true;
  goto $bb210;
$bb209:
  assume !(($i255 == 1));
  assume {:verifier.code 0} true;
  goto $bb210;
$bb210:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14128, 9} true;
  assume {:verifier.code 0} true;
  $i258 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14128, 30} true;
  assume {:verifier.code 0} true;
  $i259 := $eq.i32($i258, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14128, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i259} true;
  goto $bb211, $bb212;
$bb211:
  assume ($i259 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14129, 21} true;
  assume {:verifier.code 0} true;
  $p260 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14129, 7} true;
  assume {:verifier.code 0} true;
  call $i261 := igbvf_set_mac($p260, $p7);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14130, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 2;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14131, 5} true;
  assume {:verifier.code 0} true;
  goto $bb213;
$bb212:
  assume !(($i259 == 1));
  assume {:verifier.code 0} true;
  goto $bb213;
$bb213:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14134, 5} true;
  assume {:verifier.code 0} true;
  goto $bb132;
$bb214:
  assume ($i263 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14137, 24} true;
  assume {:verifier.code 0} true;
  $p264 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14137, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_tx_timeout($p264);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14138, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 1;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14139, 5} true;
  assume {:verifier.code 0} true;
  goto $bb216;
$bb215:
  assume !(($i263 == 1));
  assume {:verifier.code 0} true;
  goto $bb216;
$bb216:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14142, 9} true;
  assume {:verifier.code 0} true;
  $i265 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14142, 30} true;
  assume {:verifier.code 0} true;
  $i266 := $eq.i32($i265, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14142, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i266} true;
  goto $bb217, $bb218;
$bb217:
  assume ($i266 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14143, 24} true;
  assume {:verifier.code 0} true;
  $p267 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14143, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_tx_timeout($p267);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14144, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 3;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14145, 5} true;
  assume {:verifier.code 0} true;
  goto $bb219;
$bb218:
  assume !(($i266 == 1));
  assume {:verifier.code 0} true;
  goto $bb219;
$bb219:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14148, 9} true;
  assume {:verifier.code 0} true;
  $i268 := $M.29;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14148, 30} true;
  assume {:verifier.code 0} true;
  $i269 := $eq.i32($i268, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14148, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i269} true;
  goto $bb220, $bb221;
$bb220:
  assume ($i269 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14149, 24} true;
  assume {:verifier.code 0} true;
  $p270 := $M.30;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14149, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_tx_timeout($p270);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14150, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 2;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14151, 5} true;
  assume {:verifier.code 0} true;
  goto $bb222;
$bb221:
  assume !(($i269 == 1));
  assume {:verifier.code 0} true;
  goto $bb222;
$bb222:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14154, 5} true;
  assume {:verifier.code 0} true;
  goto $bb132;
$bb223:
  assume ($i272 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14157, 22} true;
  assume {:verifier.code 0} true;
  call $i273 := ldv_ndo_init_7();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14157, 20} true;
  assume {:verifier.code 0} true;
  $M.84 := $i273;
  call {:cexpr "ldv_retval_0"} boogie_si_record_i32($i273);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14158, 11} true;
  assume {:verifier.code 0} true;
  $i274 := $M.84;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14158, 24} true;
  assume {:verifier.code 0} true;
  $i275 := $eq.i32($i274, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14158, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i275} true;
  goto $bb225, $bb226;
$bb224:
  assume !(($i272 == 1));
  assume {:verifier.code 0} true;
  goto $bb228;
$bb225:
  assume ($i275 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14159, 30} true;
  assume {:verifier.code 0} true;
  $M.29 := 2;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14160, 19} true;
  assume {:verifier.code 0} true;
  $i276 := $M.80;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14160, 27} true;
  assume {:verifier.code 0} true;
  $i277 := $add.i32($i276, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14160, 17} true;
  assume {:verifier.code 0} true;
  $M.80 := $i277;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i277);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14161, 7} true;
  assume {:verifier.code 0} true;
  goto $bb227;
$bb226:
  assume !(($i275 == 1));
  assume {:verifier.code 0} true;
  goto $bb227;
$bb227:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14164, 5} true;
  assume {:verifier.code 0} true;
  goto $bb228;
$bb228:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14167, 5} true;
  assume {:verifier.code 0} true;
  goto $bb132;
$bb229:
  assume ($i279 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14170, 7} true;
  assume {:verifier.code 0} true;
  call $i280 := ldv_ndo_uninit_7();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14171, 28} true;
  assume {:verifier.code 0} true;
  $M.29 := 1;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14172, 17} true;
  assume {:verifier.code 0} true;
  $i281 := $M.80;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14172, 25} true;
  assume {:verifier.code 0} true;
  $i282 := $sub.i32($i281, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14172, 15} true;
  assume {:verifier.code 0} true;
  $M.80 := $i282;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i282);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14173, 5} true;
  assume {:verifier.code 0} true;
  goto $bb231;
$bb230:
  assume !(($i279 == 1));
  assume {:verifier.code 0} true;
  goto $bb231;
$bb231:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14176, 5} true;
  assume {:verifier.code 0} true;
  goto $bb132;
$bb232:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14178, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14179, 5} true;
  assume {:verifier.code 0} true;
  goto $bb233;
$bb233:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14179, 5} true;
  assume {:verifier.code 0} true;
  goto $bb132;
$bb234:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14184, 3} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb235:
  assume ($i284 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14187, 16} true;
  assume {:verifier.code 1} true;
  call $i285 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i285);
  // WARNING: %434 = call i32 @__VERIFIER_nondet_int(), !dbg !8937, !verifier.code !8343
  call {:cexpr "tmp___12"} boogie_si_record_i32($i285);
  assume {:verifier.code 0} true;
  goto $bb237;
$bb236:
  assume !(($i284 == 1));
  assume {:verifier.code 0} true;
  goto $bb246;
$bb237:
  assume {:verifier.code 0} true;
  $i286 := $eq.i32($i285, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i286} true;
  goto $bb238, $bb239;
$bb238:
  assume ($i286 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14190, 9} true;
  assume {:verifier.code 0} true;
  $i287 := $M.75;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14190, 30} true;
  assume {:verifier.code 0} true;
  $i288 := $eq.i32($i287, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14190, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i288} true;
  goto $bb240, $bb241;
$bb239:
  assume !(($i286 == 1));
  assume {:verifier.code 0} true;
  goto $bb244;
$bb240:
  assume ($i288 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14191, 7} true;
  assume {:verifier.code 0} true;
  call e1000_init_function_pointers_vf($p15);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14192, 28} true;
  assume {:verifier.code 0} true;
  $M.75 := 1;
  call {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14193, 5} true;
  assume {:verifier.code 0} true;
  goto $bb242;
$bb241:
  assume !(($i288 == 1));
  assume {:verifier.code 0} true;
  goto $bb242;
$bb242:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14196, 5} true;
  assume {:verifier.code 0} true;
  goto $bb243;
$bb243:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14201, 3} true;
  assume {:verifier.code 0} true;
  goto $bb246;
$bb244:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14198, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14199, 5} true;
  assume {:verifier.code 0} true;
  goto $bb245;
$bb245:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14199, 5} true;
  assume {:verifier.code 0} true;
  goto $bb243;
$bb246:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14204, 3} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb247:
  assume ($i290 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14207, 5} true;
  assume {:verifier.code 0} true;
  call choose_interrupt_2();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14208, 3} true;
  assume {:verifier.code 0} true;
  goto $bb249;
$bb248:
  assume !(($i290 == 1));
  assume {:verifier.code 0} true;
  goto $bb249;
$bb249:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14211, 3} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb250:
  assume ($i292 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14214, 16} true;
  assume {:verifier.code 1} true;
  call $i293 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i293);
  // WARNING: %456 = call i32 @__VERIFIER_nondet_int(), !dbg !8969, !verifier.code !8343
  call {:cexpr "tmp___13"} boogie_si_record_i32($i293);
  assume {:verifier.code 0} true;
  goto $bb252;
$bb251:
  assume !(($i292 == 1));
  assume {:verifier.code 0} true;
  goto $bb261;
$bb252:
  assume {:verifier.code 0} true;
  $i294 := $eq.i32($i293, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i294} true;
  goto $bb253, $bb254;
$bb253:
  assume ($i294 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14217, 9} true;
  assume {:verifier.code 0} true;
  $i295 := $M.77;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14217, 30} true;
  assume {:verifier.code 0} true;
  $i296 := $eq.i32($i295, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14217, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i296} true;
  goto $bb255, $bb256;
$bb254:
  assume !(($i294 == 1));
  assume {:verifier.code 0} true;
  goto $bb259;
$bb255:
  assume ($i296 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14218, 7} true;
  assume {:verifier.code 0} true;
  call e1000_init_function_pointers_vf($p17);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14219, 28} true;
  assume {:verifier.code 0} true;
  $M.77 := 1;
  call {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14220, 5} true;
  assume {:verifier.code 0} true;
  goto $bb257;
$bb256:
  assume !(($i296 == 1));
  assume {:verifier.code 0} true;
  goto $bb257;
$bb257:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14223, 5} true;
  assume {:verifier.code 0} true;
  goto $bb258;
$bb258:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14228, 3} true;
  assume {:verifier.code 0} true;
  goto $bb261;
$bb259:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14225, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14226, 5} true;
  assume {:verifier.code 0} true;
  goto $bb260;
$bb260:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14226, 5} true;
  assume {:verifier.code 0} true;
  goto $bb258;
$bb261:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14231, 3} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb262:
  assume ($i298 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14234, 5} true;
  assume {:verifier.code 0} true;
  call choose_interrupt_1();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14235, 3} true;
  assume {:verifier.code 0} true;
  goto $bb264;
$bb263:
  assume !(($i298 == 1));
  assume {:verifier.code 0} true;
  goto $bb264;
$bb264:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14238, 3} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb265:
  assume ($i300 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14241, 5} true;
  assume {:verifier.code 0} true;
  call choose_timer_4();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14242, 3} true;
  assume {:verifier.code 0} true;
  goto $bb267;
$bb266:
  assume !(($i300 == 1));
  assume {:verifier.code 0} true;
  goto $bb267;
$bb267:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14245, 3} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb268:
  assume ($i302 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14248, 16} true;
  assume {:verifier.code 1} true;
  call $i303 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i303);
  // WARNING: %484 = call i32 @__VERIFIER_nondet_int(), !dbg !9009, !verifier.code !8343
  call {:cexpr "tmp___14"} boogie_si_record_i32($i303);
  assume {:verifier.code 0} true;
  goto $bb270;
$bb269:
  assume !(($i302 == 1));
  assume {:verifier.code 0} true;
  goto $bb297;
$bb270:
  assume {:verifier.code 0} true;
  $i304 := $slt.i32($i303, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i304} true;
  goto $bb271, $bb272;
$bb271:
  assume ($i304 == 1);
  assume {:verifier.code 0} true;
  $i306 := $eq.i32($i303, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i306} true;
  goto $bb276, $bb277;
$bb272:
  assume !(($i304 == 1));
  assume {:verifier.code 0} true;
  $i305 := $eq.i32($i303, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i305} true;
  goto $bb273, $bb274;
$bb273:
  assume ($i305 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14260, 9} true;
  assume {:verifier.code 0} true;
  $i311 := $M.81;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14260, 30} true;
  assume {:verifier.code 0} true;
  $i312 := $eq.i32($i311, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14260, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i312} true;
  goto $bb286, $bb287;
$bb274:
  assume {:verifier.code 0} true;
  assume !(($i305 == 1));
  goto $bb275;
$bb275:
  assume {:verifier.code 0} true;
  goto $bb295;
$bb276:
  assume ($i306 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14251, 9} true;
  assume {:verifier.code 0} true;
  $i307 := $M.81;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14251, 30} true;
  assume {:verifier.code 0} true;
  $i308 := $eq.i32($i307, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14251, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i308} true;
  goto $bb278, $bb279;
$bb277:
  assume {:verifier.code 0} true;
  assume !(($i306 == 1));
  goto $bb275;
$bb278:
  assume ($i308 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14251, 38} true;
  assume {:verifier.code 0} true;
  $i309 := $M.80;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14251, 46} true;
  assume {:verifier.code 0} true;
  $i310 := $eq.i32($i309, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14251, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i310} true;
  goto $bb281, $bb282;
$bb279:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14251, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i308 == 1));
  goto $bb280;
$bb280:
  assume {:verifier.code 0} true;
  goto $bb284;
$bb281:
  assume ($i310 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14252, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_exit_module();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14253, 28} true;
  assume {:verifier.code 0} true;
  $M.81 := 3;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14254, 7} true;
  assume {:verifier.code 0} true;
  goto $bb283;
$bb282:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14251, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i310 == 1));
  goto $bb280;
$bb283:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14392, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_final_state();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14393, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
$bb284:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14258, 5} true;
  assume {:verifier.code 0} true;
  goto $bb285;
$bb285:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14289, 3} true;
  assume {:verifier.code 0} true;
  goto $bb297;
$bb286:
  assume ($i312 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14261, 22} true;
  assume {:verifier.code 0} true;
  call $i313 := igbvf_init_module();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14261, 20} true;
  assume {:verifier.code 0} true;
  $M.85 := $i313;
  call {:cexpr "ldv_retval_2"} boogie_si_record_i32($i313);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14262, 11} true;
  assume {:verifier.code 0} true;
  $i314 := $M.85;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14262, 24} true;
  assume {:verifier.code 0} true;
  $i315 := $ne.i32($i314, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14262, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i315} true;
  goto $bb288, $bb289;
$bb287:
  assume !(($i312 == 1));
  assume {:verifier.code 0} true;
  goto $bb294;
$bb288:
  assume ($i315 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14263, 30} true;
  assume {:verifier.code 0} true;
  $M.81 := 3;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14264, 9} true;
  assume {:verifier.code 0} true;
  goto $bb283;
$bb289:
  assume !(($i315 == 1));
  assume {:verifier.code 0} true;
  goto $bb290;
$bb290:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14268, 11} true;
  assume {:verifier.code 0} true;
  $i316 := $M.85;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14268, 24} true;
  assume {:verifier.code 0} true;
  $i317 := $eq.i32($i316, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14268, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i317} true;
  goto $bb291, $bb292;
$bb291:
  assume ($i317 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14269, 30} true;
  assume {:verifier.code 0} true;
  $M.81 := 2;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14270, 30} true;
  assume {:verifier.code 0} true;
  $M.82 := 1;
  call {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14271, 9} true;
  assume {:verifier.code 0} true;
  call ldv_initialize_pci_driver_5();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14272, 30} true;
  assume {:verifier.code 0} true;
  $M.75 := 1;
  call {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14273, 31} true;
  assume {:verifier.code 0} true;
  $M.40 := 1;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14274, 9} true;
  assume {:verifier.code 0} true;
  call ldv_initialize_ethtool_ops_10();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14275, 30} true;
  assume {:verifier.code 0} true;
  $M.73 := 1;
  call {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14276, 9} true;
  assume {:verifier.code 0} true;
  call ldv_initialize_pci_error_handlers_6();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14277, 30} true;
  assume {:verifier.code 0} true;
  $M.77 := 1;
  call {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14278, 7} true;
  assume {:verifier.code 0} true;
  goto $bb293;
$bb292:
  assume !(($i317 == 1));
  assume {:verifier.code 0} true;
  goto $bb293;
$bb293:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14281, 5} true;
  assume {:verifier.code 0} true;
  goto $bb294;
$bb294:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14284, 5} true;
  assume {:verifier.code 0} true;
  goto $bb285;
$bb295:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14286, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14287, 5} true;
  assume {:verifier.code 0} true;
  goto $bb296;
$bb296:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14287, 5} true;
  assume {:verifier.code 0} true;
  goto $bb285;
$bb297:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14292, 3} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb298:
  assume ($i319 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14295, 5} true;
  assume {:verifier.code 0} true;
  call ldv_main_exported_10();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14296, 3} true;
  assume {:verifier.code 0} true;
  goto $bb300;
$bb299:
  assume !(($i319 == 1));
  assume {:verifier.code 0} true;
  goto $bb300;
$bb300:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14299, 3} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb301:
  assume ($i321 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14302, 16} true;
  assume {:verifier.code 1} true;
  call $i322 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i322);
  // WARNING: %526 = call i32 @__VERIFIER_nondet_int(), !dbg !9076, !verifier.code !8343
  call {:cexpr "tmp___15"} boogie_si_record_i32($i322);
  assume {:verifier.code 0} true;
  goto $bb303;
$bb302:
  assume !(($i321 == 1));
  assume {:verifier.code 0} true;
  goto $bb353;
$bb303:
  assume {:verifier.code 0} true;
  $i323 := $slt.i32($i322, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i323} true;
  goto $bb304, $bb305;
$bb304:
  assume ($i323 == 1);
  assume {:verifier.code 0} true;
  $i327 := $slt.i32($i322, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i327} true;
  goto $bb313, $bb314;
$bb305:
  assume !(($i323 == 1));
  assume {:verifier.code 0} true;
  $i324 := $slt.i32($i322, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i324} true;
  goto $bb306, $bb307;
$bb306:
  assume ($i324 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14330, 9} true;
  assume {:verifier.code 0} true;
  $i345 := $M.82;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14330, 30} true;
  assume {:verifier.code 0} true;
  $i346 := $eq.i32($i345, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14330, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i346} true;
  goto $bb330, $bb331;
$bb307:
  assume !(($i324 == 1));
  assume {:verifier.code 0} true;
  $i325 := $slt.i32($i322, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i325} true;
  goto $bb308, $bb309;
$bb308:
  assume ($i325 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14342, 9} true;
  assume {:verifier.code 0} true;
  $i351 := $M.82;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14342, 30} true;
  assume {:verifier.code 0} true;
  $i352 := $eq.i32($i351, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14342, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i352} true;
  goto $bb336, $bb337;
$bb309:
  assume !(($i325 == 1));
  assume {:verifier.code 0} true;
  $i326 := $eq.i32($i322, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i326} true;
  goto $bb310, $bb311;
$bb310:
  assume ($i326 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14356, 9} true;
  assume {:verifier.code 0} true;
  $i357 := $M.82;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14356, 30} true;
  assume {:verifier.code 0} true;
  $i358 := $eq.i32($i357, 4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14356, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i358} true;
  goto $bb342, $bb343;
$bb311:
  assume {:verifier.code 0} true;
  assume !(($i326 == 1));
  goto $bb312;
$bb312:
  assume {:verifier.code 0} true;
  goto $bb351;
$bb313:
  assume ($i327 == 1);
  assume {:verifier.code 0} true;
  $i328 := $eq.i32($i322, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i328} true;
  goto $bb315, $bb316;
$bb314:
  assume !(($i327 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14318, 9} true;
  assume {:verifier.code 0} true;
  $i337 := $M.82;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14318, 30} true;
  assume {:verifier.code 0} true;
  $i338 := $eq.i32($i337, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14318, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i338} true;
  goto $bb324, $bb325;
$bb315:
  assume ($i328 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14305, 9} true;
  assume {:verifier.code 0} true;
  $i329 := $M.82;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14305, 30} true;
  assume {:verifier.code 0} true;
  $i330 := $eq.i32($i329, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14305, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i330} true;
  goto $bb317, $bb318;
$bb316:
  assume {:verifier.code 0} true;
  assume !(($i328 == 1));
  goto $bb312;
$bb317:
  assume ($i330 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14306, 34} true;
  assume {:verifier.code 0} true;
  $p331 := $M.54;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14306, 22} true;
  assume {:verifier.code 0} true;
  call $i332 := igbvf_probe($p331, $p19);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14306, 20} true;
  assume {:verifier.code 0} true;
  $M.86 := $i332;
  call {:cexpr "ldv_retval_5"} boogie_si_record_i32($i332);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14307, 11} true;
  assume {:verifier.code 0} true;
  $i333 := $M.86;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14307, 24} true;
  assume {:verifier.code 0} true;
  $i334 := $eq.i32($i333, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14307, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i334} true;
  goto $bb319, $bb320;
$bb318:
  assume !(($i330 == 1));
  assume {:verifier.code 0} true;
  goto $bb322;
$bb319:
  assume ($i334 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14308, 30} true;
  assume {:verifier.code 0} true;
  $M.82 := 2;
  call {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14309, 19} true;
  assume {:verifier.code 0} true;
  $i335 := $M.80;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14309, 27} true;
  assume {:verifier.code 0} true;
  $i336 := $add.i32($i335, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14309, 17} true;
  assume {:verifier.code 0} true;
  $M.80 := $i336;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i336);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14310, 7} true;
  assume {:verifier.code 0} true;
  goto $bb321;
$bb320:
  assume !(($i334 == 1));
  assume {:verifier.code 0} true;
  goto $bb321;
$bb321:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14313, 5} true;
  assume {:verifier.code 0} true;
  goto $bb322;
$bb322:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14316, 5} true;
  assume {:verifier.code 0} true;
  goto $bb323;
$bb323:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14382, 3} true;
  assume {:verifier.code 0} true;
  goto $bb353;
$bb324:
  assume ($i338 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14319, 36} true;
  assume {:verifier.code 0} true;
  $p339 := $M.54;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14319, 22} true;
  assume {:verifier.code 0} true;
  $p340 := $p4;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14319, 22} true;
  assume {:verifier.code 0} true;
  $i341 := $load.i32($M.72, $p340);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14319, 22} true;
  assume {:verifier.code 0} true;
  call $i342 := igbvf_suspend($p339, $i341);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14319, 20} true;
  assume {:verifier.code 0} true;
  $M.87 := $i342;
  call {:cexpr "ldv_retval_4"} boogie_si_record_i32($i342);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14320, 11} true;
  assume {:verifier.code 0} true;
  $i343 := $M.87;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14320, 24} true;
  assume {:verifier.code 0} true;
  $i344 := $eq.i32($i343, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14320, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i344} true;
  goto $bb326, $bb327;
$bb325:
  assume !(($i338 == 1));
  assume {:verifier.code 0} true;
  goto $bb329;
$bb326:
  assume ($i344 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14321, 30} true;
  assume {:verifier.code 0} true;
  $M.82 := 3;
  call {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14322, 7} true;
  assume {:verifier.code 0} true;
  goto $bb328;
$bb327:
  assume !(($i344 == 1));
  assume {:verifier.code 0} true;
  goto $bb328;
$bb328:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14325, 5} true;
  assume {:verifier.code 0} true;
  goto $bb329;
$bb329:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14328, 5} true;
  assume {:verifier.code 0} true;
  goto $bb323;
$bb330:
  assume ($i346 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14331, 35} true;
  assume {:verifier.code 0} true;
  $p347 := $M.54;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14331, 22} true;
  assume {:verifier.code 0} true;
  call $i348 := igbvf_resume($p347);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14331, 20} true;
  assume {:verifier.code 0} true;
  $M.88 := $i348;
  call {:cexpr "ldv_retval_3"} boogie_si_record_i32($i348);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14332, 11} true;
  assume {:verifier.code 0} true;
  $i349 := $M.88;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14332, 24} true;
  assume {:verifier.code 0} true;
  $i350 := $eq.i32($i349, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14332, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i350} true;
  goto $bb332, $bb333;
$bb331:
  assume !(($i346 == 1));
  assume {:verifier.code 0} true;
  goto $bb335;
$bb332:
  assume ($i350 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14333, 30} true;
  assume {:verifier.code 0} true;
  $M.82 := 2;
  call {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14334, 7} true;
  assume {:verifier.code 0} true;
  goto $bb334;
$bb333:
  assume !(($i350 == 1));
  assume {:verifier.code 0} true;
  goto $bb334;
$bb334:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14337, 5} true;
  assume {:verifier.code 0} true;
  goto $bb335;
$bb335:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14340, 5} true;
  assume {:verifier.code 0} true;
  goto $bb323;
$bb336:
  assume ($i352 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14343, 22} true;
  assume {:verifier.code 0} true;
  $p353 := $M.54;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14343, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_shutdown($p353);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14344, 28} true;
  assume {:verifier.code 0} true;
  $M.82 := 4;
  call {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14345, 5} true;
  assume {:verifier.code 0} true;
  goto $bb338;
$bb337:
  assume !(($i352 == 1));
  assume {:verifier.code 0} true;
  goto $bb338;
$bb338:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14348, 9} true;
  assume {:verifier.code 0} true;
  $i354 := $M.82;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14348, 30} true;
  assume {:verifier.code 0} true;
  $i355 := $eq.i32($i354, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14348, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i355} true;
  goto $bb339, $bb340;
$bb339:
  assume ($i355 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14349, 22} true;
  assume {:verifier.code 0} true;
  $p356 := $M.54;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14349, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_shutdown($p356);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14350, 28} true;
  assume {:verifier.code 0} true;
  $M.82 := 4;
  call {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14351, 5} true;
  assume {:verifier.code 0} true;
  goto $bb341;
$bb340:
  assume !(($i355 == 1));
  assume {:verifier.code 0} true;
  goto $bb341;
$bb341:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14354, 5} true;
  assume {:verifier.code 0} true;
  goto $bb323;
$bb342:
  assume ($i358 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14357, 20} true;
  assume {:verifier.code 0} true;
  $p359 := $M.54;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14357, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_remove($p359);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14358, 28} true;
  assume {:verifier.code 0} true;
  $M.82 := 1;
  call {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14359, 17} true;
  assume {:verifier.code 0} true;
  $i360 := $M.80;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14359, 25} true;
  assume {:verifier.code 0} true;
  $i361 := $sub.i32($i360, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14359, 15} true;
  assume {:verifier.code 0} true;
  $M.80 := $i361;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i361);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14360, 5} true;
  assume {:verifier.code 0} true;
  goto $bb344;
$bb343:
  assume !(($i358 == 1));
  assume {:verifier.code 0} true;
  goto $bb344;
$bb344:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14363, 9} true;
  assume {:verifier.code 0} true;
  $i362 := $M.82;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14363, 30} true;
  assume {:verifier.code 0} true;
  $i363 := $eq.i32($i362, 3);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14363, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i363} true;
  goto $bb345, $bb346;
$bb345:
  assume ($i363 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14364, 20} true;
  assume {:verifier.code 0} true;
  $p364 := $M.54;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14364, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_remove($p364);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14365, 28} true;
  assume {:verifier.code 0} true;
  $M.82 := 1;
  call {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14366, 17} true;
  assume {:verifier.code 0} true;
  $i365 := $M.80;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14366, 25} true;
  assume {:verifier.code 0} true;
  $i366 := $sub.i32($i365, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14366, 15} true;
  assume {:verifier.code 0} true;
  $M.80 := $i366;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i366);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14367, 5} true;
  assume {:verifier.code 0} true;
  goto $bb347;
$bb346:
  assume !(($i363 == 1));
  assume {:verifier.code 0} true;
  goto $bb347;
$bb347:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14370, 9} true;
  assume {:verifier.code 0} true;
  $i367 := $M.82;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14370, 30} true;
  assume {:verifier.code 0} true;
  $i368 := $eq.i32($i367, 2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14370, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i368} true;
  goto $bb348, $bb349;
$bb348:
  assume ($i368 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14371, 20} true;
  assume {:verifier.code 0} true;
  $p369 := $M.54;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14371, 7} true;
  assume {:verifier.code 0} true;
  call igbvf_remove($p369);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14372, 28} true;
  assume {:verifier.code 0} true;
  $M.82 := 1;
  call {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14373, 17} true;
  assume {:verifier.code 0} true;
  $i370 := $M.80;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14373, 25} true;
  assume {:verifier.code 0} true;
  $i371 := $sub.i32($i370, 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14373, 15} true;
  assume {:verifier.code 0} true;
  $M.80 := $i371;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i371);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14374, 5} true;
  assume {:verifier.code 0} true;
  goto $bb350;
$bb349:
  assume !(($i368 == 1));
  assume {:verifier.code 0} true;
  goto $bb350;
$bb350:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14377, 5} true;
  assume {:verifier.code 0} true;
  goto $bb323;
$bb351:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14379, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14380, 5} true;
  assume {:verifier.code 0} true;
  goto $bb352;
$bb352:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14380, 5} true;
  assume {:verifier.code 0} true;
  goto $bb323;
$bb353:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14385, 3} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb354:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14387, 3} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14388, 3} true;
  assume {:verifier.code 0} true;
  goto $bb355;
$bb355:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14388, 3} true;
  assume {:verifier.code 0} true;
  goto $bb83;
}
const __VERIFIER_nondet_u16: ref;
axiom (__VERIFIER_nondet_u16 == $sub.ref(0, 519115));
procedure  __VERIFIER_nondet_u16()
  returns ($r: i16);
const ldv_initialize: ref;
axiom (ldv_initialize == $sub.ref(0, 520147));
procedure  ldv_initialize()
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14819, 16} true;
  assume {:verifier.code 0} true;
  $p0 := $M.10;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14819, 3} true;
  assume {:verifier.code 0} true;
  call ldv_set_init($p0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14820, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_suspend_6: ref;
axiom (ldv_suspend_6 == $sub.ref(0, 521179));
procedure  ldv_suspend_6()
  returns ($r: i32);
const ldv_release_6: ref;
axiom (ldv_release_6 == $sub.ref(0, 522211));
procedure  ldv_release_6()
  returns ($r: i32);
const ldv_probe_6: ref;
axiom (ldv_probe_6 == $sub.ref(0, 523243));
procedure  ldv_probe_6()
  returns ($r: i32);
const ldv_ndo_init_7: ref;
axiom (ldv_ndo_init_7 == $sub.ref(0, 524275));
procedure  ldv_ndo_init_7()
  returns ($r: i32);
const ldv_ndo_uninit_7: ref;
axiom (ldv_ndo_uninit_7 == $sub.ref(0, 525307));
procedure  ldv_ndo_uninit_7()
  returns ($r: i32);
const igbvf_exit_module: ref;
axiom (igbvf_exit_module == $sub.ref(0, 526339));
procedure  igbvf_exit_module()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13073, 3} true;
  assume {:verifier.code 0} true;
  call pci_unregister_driver(igbvf_driver);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13074, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const igbvf_init_module: ref;
axiom (igbvf_init_module == $sub.ref(0, 527371));
procedure  igbvf_init_module()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13061, 3} true;
  assume {:verifier.code 0} true;
  call $i0 := printk.ref.ref.ref(.str.21, igbvf_driver_string, igbvf_driver_version);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13063, 3} true;
  assume {:verifier.code 0} true;
  call $i1 := printk.ref.ref(.str.22, igbvf_copyright);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13064, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := __pci_register_driver(igbvf_driver, __this_module, .str.23);
  // WARNING: %3 = call i32 @__pci_register_driver(%struct.pci_driver* @igbvf_driver, %struct.module* @__this_module, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.23, i32 0, i32 0)), !dbg !8333, !verifier.code !8331
  call {:cexpr "ret"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 13065, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ldv_check_final_state: ref;
axiom (ldv_check_final_state == $sub.ref(0, 528403));
procedure  ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14880, 30} true;
  assume {:verifier.code 0} true;
  $p0 := $M.10;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14880, 13} true;
  assume {:verifier.code 0} true;
  call $i1 := ldv_set_is_empty($p0);
  // WARNING: %2 = call i32 @ldv_set_is_empty(i8* %1), !dbg !8332, !verifier.code !8331
  call {:cexpr "tmp___7"} boogie_si_record_i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14881, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14881, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14883, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14884, 5} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14886, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_set_is_empty: ref;
axiom (ldv_set_is_empty == $sub.ref(0, 529435));
procedure  ldv_set_is_empty($p0: ref)
  returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14751, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $M.11;
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14751, 22} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14751, 22} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i1.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14751, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const __pci_register_driver: ref;
axiom (__pci_register_driver == $sub.ref(0, 530467));
procedure  __pci_register_driver($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32);
const pci_unregister_driver: ref;
axiom (pci_unregister_driver == $sub.ref(0, 531499));
procedure  pci_unregister_driver($p0: ref);
const ldv_set_init: ref;
axiom (ldv_set_init == $sub.ref(0, 532531));
procedure  ldv_set_init($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14648, 14} true;
  assume {:verifier.code 0} true;
  $M.11 := 0;
  call {:cexpr "last_index"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/205_9a_array_unsafes_linux-3.16-rc1.tar.xz-205_9a-drivers--net--ethernet--intel--igbvf--igbvf.ko-entry_point_true-unreach-call.cil.out-Fgbjji.c", 14649, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 533563));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !19762, metadata !8330), !dbg !19763, !verifier.code !8332
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 34, 21} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 35, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 534595));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 535627));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 261, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_error: ref;
axiom (__VERIFIER_error == $sub.ref(0, 536659));
procedure  __VERIFIER_error()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 47, 3} true;
  assume {:verifier.code 1} true;
  assert false;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 51, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 537691));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 538723));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 539755));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 540787));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 541819));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 542851));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 543883));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 544915));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 545947));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 120, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
  // WARNING: %1 = call i32 @__SMACK_nondet_int(), !dbg !8329, !verifier.code !8330
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.i32($i0, 2147483647);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i2);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 122, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 546979));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 548011));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 549043));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 550075));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 551107));
procedure  __SMACK_nondet_long()
  returns ($r: i64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 552139));
procedure  __SMACK_nondet_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 553171));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 554203));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 555235));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 556267));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 557299));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 558331));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 559363));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 560395));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 561427));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 562459));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const calloc: ref;
axiom (calloc == $sub.ref(0, 563491));
procedure  calloc($i0: i64, $i1: i64)
  returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !19795, metadata !8330), !dbg !19796, !verifier.code !8332
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 248, 7} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 248, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 248, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 250, 3} true;
  assume {:verifier.code 0} true;
  $p4 := $0.ref;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 251, 22} true;
  assume {:verifier.code 0} true;
  $i5 := $mul.i64($i0, $i1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 251, 11} true;
  assume {:verifier.code 0} true;
  call $p6 := malloc($i5);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 252, 24} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.i64($i0, $i1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 252, 5} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p6, 0, $i7, $zext.i32.i64(1), (0 == 1));
  assume {:verifier.code 0} true;
  $p4 := $p6;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 254, 3} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 564523));
function {:inline} $bitcast.ref.ref(i: ref) returns (ref) {i}
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $min.bv128(i1: bv128, i2: bv128) returns (bv128) {if $slt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv96(i1: bv96, i2: bv96) returns (bv96) {if $slt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv88(i1: bv88, i2: bv88) returns (bv88) {if $slt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv64(i1: bv64, i2: bv64) returns (bv64) {if $slt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv56(i1: bv56, i2: bv56) returns (bv56) {if $slt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv48(i1: bv48, i2: bv48) returns (bv48) {if $slt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv40(i1: bv40, i2: bv40) returns (bv40) {if $slt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv32(i1: bv32, i2: bv32) returns (bv32) {if $slt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv24(i1: bv24, i2: bv24) returns (bv24) {if $slt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv16(i1: bv16, i2: bv16) returns (bv16) {if $slt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv8(i1: bv8, i2: bv8) returns (bv8) {if $slt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv128(i1: bv128, i2: bv128) returns (bv128) {if $sgt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv96(i1: bv96, i2: bv96) returns (bv96) {if $sgt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv88(i1: bv88, i2: bv88) returns (bv88) {if $sgt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv64(i1: bv64, i2: bv64) returns (bv64) {if $sgt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv56(i1: bv56, i2: bv56) returns (bv56) {if $sgt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv48(i1: bv48, i2: bv48) returns (bv48) {if $sgt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv40(i1: bv40, i2: bv40) returns (bv40) {if $sgt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv32(i1: bv32, i2: bv32) returns (bv32) {if $sgt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv24(i1: bv24, i2: bv24) returns (bv24) {if $sgt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv16(i1: bv16, i2: bv16) returns (bv16) {if $sgt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv8(i1: bv8, i2: bv8) returns (bv8) {if $sgt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ult.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ult.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ult.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ult.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ult.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ult.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ult.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ult.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ult.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ult.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ult.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ugt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ugt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ugt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ugt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ugt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ugt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ugt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ugt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ugt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ugt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ugt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then i1 else i2}
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) returns (bv128);
function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) returns (bv96);
function {:bvbuiltin "bvnot"} $not.bv88(i: bv88) returns (bv88);
function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) returns (bv64);
function {:bvbuiltin "bvnot"} $not.bv56(i: bv56) returns (bv56);
function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) returns (bv48);
function {:bvbuiltin "bvnot"} $not.bv40(i: bv40) returns (bv40);
function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) returns (bv32);
function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) returns (bv24);
function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) returns (bv16);
function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) returns (bv8);
function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) returns (bv1);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 == i2} function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 == i2} function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 == i2} function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 == i2} function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 == i2} function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 == i2} function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 == i2} function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 == i2} function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 == i2} function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 == i2} function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 == i2} function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 == i2} function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 != i2} function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 != i2} function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 != i2} function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 != i2} function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 != i2} function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 != i2} function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 != i2} function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 != i2} function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 != i2} function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 != i2} function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 != i2} function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 != i2} function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ule.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ule.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ule.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ule.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ule.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ule.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ule.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ule.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ule.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ule.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ule.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ule.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ult.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ult.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ult.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ult.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ult.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ult.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ult.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ult.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ult.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ult.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ult.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $uge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $uge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $uge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $uge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $uge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $uge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $uge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $uge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $uge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $uge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $uge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $uge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ugt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ugt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ugt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ugt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ugt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ugt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ugt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ugt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ugt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ugt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ugt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sle.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sle.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sle.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sle.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sle.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sle.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sle.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sle.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sle.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sle.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sle.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sle.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $slt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $slt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $slt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $slt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $slt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $slt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $slt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $slt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $slt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $slt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $slt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sgt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sgt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sgt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sgt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sgt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sgt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sgt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sgt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sgt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sgt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sgt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:inline} $trunc.bv128.bv96(i: bv128) returns (bv96) {i[96:0]}
function {:inline} $trunc.bv128.bv88(i: bv128) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv128.bv64(i: bv128) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv128.bv56(i: bv128) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv128.bv48(i: bv128) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv128.bv40(i: bv128) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv128.bv32(i: bv128) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv128.bv24(i: bv128) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv128.bv16(i: bv128) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv128.bv8(i: bv128) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv128.bv1(i: bv128) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv96.bv88(i: bv96) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv96.bv64(i: bv96) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv96.bv56(i: bv96) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv96.bv48(i: bv96) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv96.bv40(i: bv96) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv96.bv32(i: bv96) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv96.bv24(i: bv96) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv96.bv16(i: bv96) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv96.bv8(i: bv96) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv96.bv1(i: bv96) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv88.bv64(i: bv88) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv88.bv56(i: bv88) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv88.bv48(i: bv88) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv88.bv40(i: bv88) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv88.bv32(i: bv88) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv88.bv24(i: bv88) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv88.bv16(i: bv88) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv88.bv8(i: bv88) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv88.bv1(i: bv88) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv64.bv56(i: bv64) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv64.bv48(i: bv64) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv64.bv40(i: bv64) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv64.bv32(i: bv64) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv64.bv24(i: bv64) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv64.bv16(i: bv64) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv64.bv8(i: bv64) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv64.bv1(i: bv64) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv56.bv48(i: bv56) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv56.bv40(i: bv56) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv56.bv32(i: bv56) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv56.bv24(i: bv56) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv56.bv16(i: bv56) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv56.bv8(i: bv56) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv56.bv1(i: bv56) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv48.bv32(i: bv48) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv48.bv24(i: bv48) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv48.bv16(i: bv48) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv48.bv8(i: bv48) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv48.bv1(i: bv48) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv40.bv32(i: bv40) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv40.bv24(i: bv40) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv40.bv16(i: bv40) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv40.bv8(i: bv40) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv40.bv1(i: bv40) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv32.bv24(i: bv32) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv32.bv16(i: bv32) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv32.bv8(i: bv32) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv32.bv1(i: bv32) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv24.bv16(i: bv24) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv24.bv8(i: bv24) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv24.bv1(i: bv24) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv16.bv8(i: bv16) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv16.bv1(i: bv16) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv8.bv1(i: bv8) returns (bv1) {i[1:0]}
function {:inline} $zext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 1bv8}
function {:inline} $zext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 1bv16}
function {:inline} $zext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 1bv24}
function {:inline} $zext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 1bv32}
function {:inline} $zext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1bv40}
function {:inline} $zext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 1bv48}
function {:inline} $zext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 1bv56}
function {:inline} $zext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 1bv64}
function {:inline} $zext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 1bv88}
function {:inline} $zext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 1bv96}
function {:inline} $zext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 1bv128}
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $sext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 255bv8}
function {:inline} $sext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 65535bv16}
function {:inline} $sext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 16777215bv24}
function {:inline} $sext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 4294967295bv32}
function {:inline} $sext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1099511627775bv40}
function {:inline} $sext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 281474976710655bv48}
function {:inline} $sext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 72057594037927935bv56}
function {:inline} $sext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 18446744073709551615bv64}
function {:inline} $sext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88}
function {:inline} $sext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96}
function {:inline} $sext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128}
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) {i1 + i2}
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) {i1 + i2}
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) {i1 + i2}
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) {i1 + i2}
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) {i1 + i2}
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) {i1 + i2}
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) {i1 + i2}
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) {i1 + i2}
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) {i1 + i2}
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) {i1 + i2}
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) {i1 + i2}
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) {i1 + i2}
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) {i1 - i2}
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) {i1 - i2}
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) {i1 - i2}
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) {i1 - i2}
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) {i1 - i2}
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) {i1 - i2}
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) {i1 - i2}
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) {i1 - i2}
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) {i1 - i2}
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) {i1 - i2}
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) {i1 - i2}
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) {i1 - i2}
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) {i1 * i2}
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) {i1 * i2}
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) {i1 * i2}
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) {i1 * i2}
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) {i1 * i2}
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) {i1 * i2}
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) {i1 * i2}
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) {i1 * i2}
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) {i1 * i2}
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) {i1 * i2}
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) {i1 * i2}
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) {i1 * i2}
function {:builtin "div"} $div(i1: int, i2: int) returns (int);
function {:builtin "mod"} $mod(i1: int, i2: int) returns (int);
function {:builtin "rem"} $rem(i1: int, i2: int) returns (int);
function {:inline} $min(i1: int, i2: int) returns (int) {if i1 < i2 then i1 else i2}
function {:inline} $max(i1: int, i2: int) returns (int) {if i1 > i2 then i1 else i2}
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $not.i128(i: i128) returns (i128);
function $not.i96(i: i96) returns (i96);
function $not.i88(i: i88) returns (i88);
function $not.i64(i: i64) returns (i64);
function $not.i56(i: i56) returns (i56);
function $not.i48(i: i48) returns (i48);
function $not.i40(i: i40) returns (i40);
function $not.i32(i: i32) returns (i32);
function $not.i24(i: i24) returns (i24);
function $not.i16(i: i16) returns (i16);
function $not.i8(i: i8) returns (i8);
function $not.i1(i: i1) returns (i1);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) {i1 == i2} function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) {i1 == i2} function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) {i1 == i2} function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) {i1 == i2} function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) {i1 == i2} function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) {i1 == i2} function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) {i1 == i2} function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) {i1 == i2} function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) {i1 == i2} function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) {i1 == i2} function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) {i1 == i2} function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) {i1 == i2} function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) {i1 != i2} function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) {i1 != i2} function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) {i1 != i2} function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) {i1 != i2} function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) {i1 != i2} function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) {i1 != i2} function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) {i1 != i2} function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) {i1 != i2} function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) {i1 != i2} function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) {i1 != i2} function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) {i1 != i2} function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) {i1 != i2} function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
axiom $and.i1(0,0) == 0;
axiom $and.i1(0,1) == 0;
axiom $and.i1(1,0) == 0;
axiom $and.i1(1,1) == 1;
axiom $or.i1(0,0) == 0;
axiom $or.i1(0,1) == 1;
axiom $or.i1(1,0) == 1;
axiom $or.i1(1,1) == 1;
axiom $xor.i1(0,0) == 0;
axiom $xor.i1(0,1) == 1;
axiom $xor.i1(1,0) == 1;
axiom $xor.i1(1,1) == 0;
axiom($and.i32(32, 16) == 0);
function {:inline} $trunc.i128.i96(i: i128) returns (i96) {i}
function {:inline} $trunc.i128.i88(i: i128) returns (i88) {i}
function {:inline} $trunc.i128.i64(i: i128) returns (i64) {i}
function {:inline} $trunc.i128.i56(i: i128) returns (i56) {i}
function {:inline} $trunc.i128.i48(i: i128) returns (i48) {i}
function {:inline} $trunc.i128.i40(i: i128) returns (i40) {i}
function {:inline} $trunc.i128.i32(i: i128) returns (i32) {i}
function {:inline} $trunc.i128.i24(i: i128) returns (i24) {i}
function {:inline} $trunc.i128.i16(i: i128) returns (i16) {i}
function {:inline} $trunc.i128.i8(i: i128) returns (i8) {i}
function {:inline} $trunc.i128.i1(i: i128) returns (i1) {i}
function {:inline} $trunc.i96.i64(i: i96) returns (i64) {i}
function {:inline} $trunc.i96.i88(i: i96) returns (i88) {i}
function {:inline} $trunc.i96.i56(i: i96) returns (i56) {i}
function {:inline} $trunc.i96.i48(i: i96) returns (i48) {i}
function {:inline} $trunc.i96.i40(i: i96) returns (i40) {i}
function {:inline} $trunc.i96.i32(i: i96) returns (i32) {i}
function {:inline} $trunc.i96.i24(i: i96) returns (i24) {i}
function {:inline} $trunc.i96.i16(i: i96) returns (i16) {i}
function {:inline} $trunc.i96.i8(i: i96) returns (i8) {i}
function {:inline} $trunc.i96.i1(i: i96) returns (i1) {i}
function {:inline} $trunc.i88.i64(i: i88) returns (i64) {i}
function {:inline} $trunc.i88.i88(i: i88) returns (i88) {i}
function {:inline} $trunc.i88.i56(i: i88) returns (i56) {i}
function {:inline} $trunc.i88.i48(i: i88) returns (i48) {i}
function {:inline} $trunc.i88.i40(i: i88) returns (i40) {i}
function {:inline} $trunc.i88.i32(i: i88) returns (i32) {i}
function {:inline} $trunc.i88.i24(i: i88) returns (i24) {i}
function {:inline} $trunc.i88.i16(i: i88) returns (i16) {i}
function {:inline} $trunc.i88.i8(i: i88) returns (i8) {i}
function {:inline} $trunc.i88.i1(i: i88) returns (i1) {i}
function {:inline} $trunc.i64.i56(i: i64) returns (i56) {i}
function {:inline} $trunc.i64.i48(i: i64) returns (i48) {i}
function {:inline} $trunc.i64.i40(i: i64) returns (i40) {i}
function {:inline} $trunc.i64.i32(i: i64) returns (i32) {i}
function {:inline} $trunc.i64.i24(i: i64) returns (i24) {i}
function {:inline} $trunc.i64.i16(i: i64) returns (i16) {i}
function {:inline} $trunc.i64.i8(i: i64) returns (i8) {i}
function {:inline} $trunc.i64.i1(i: i64) returns (i1) {i}
function {:inline} $trunc.i56.i48(i: i56) returns (i48) {i}
function {:inline} $trunc.i56.i40(i: i56) returns (i40) {i}
function {:inline} $trunc.i56.i32(i: i56) returns (i32) {i}
function {:inline} $trunc.i56.i24(i: i56) returns (i24) {i}
function {:inline} $trunc.i56.i16(i: i56) returns (i16) {i}
function {:inline} $trunc.i56.i8(i: i56) returns (i8) {i}
function {:inline} $trunc.i56.i1(i: i56) returns (i1) {i}
function {:inline} $trunc.i48.i40(i: i48) returns (i40) {i}
function {:inline} $trunc.i48.i32(i: i48) returns (i32) {i}
function {:inline} $trunc.i48.i24(i: i48) returns (i24) {i}
function {:inline} $trunc.i48.i16(i: i48) returns (i16) {i}
function {:inline} $trunc.i48.i8(i: i48) returns (i8) {i}
function {:inline} $trunc.i48.i1(i: i48) returns (i1) {i}
function {:inline} $trunc.i40.i32(i: i40) returns (i32) {i}
function {:inline} $trunc.i40.i24(i: i40) returns (i24) {i}
function {:inline} $trunc.i40.i16(i: i40) returns (i16) {i}
function {:inline} $trunc.i40.i8(i: i40) returns (i8) {i}
function {:inline} $trunc.i40.i1(i: i40) returns (i1) {i}
function {:inline} $trunc.i32.i24(i: i32) returns (i24) {i}
function {:inline} $trunc.i32.i16(i: i32) returns (i16) {i}
function {:inline} $trunc.i32.i8(i: i32) returns (i8) {i}
function {:inline} $trunc.i32.i1(i: i32) returns (i1) {i}
function {:inline} $trunc.i24.i16(i: i24) returns (i16) {i}
function {:inline} $trunc.i24.i8(i: i24) returns (i8) {i}
function {:inline} $trunc.i24.i1(i: i24) returns (i1) {i}
function {:inline} $trunc.i16.i8(i: i16) returns (i8) {i}
function {:inline} $trunc.i16.i1(i: i16) returns (i1) {i}
function {:inline} $trunc.i8.i1(i: i8) returns (i1) {i}
function {:inline} $zext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $zext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $zext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $zext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $zext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $zext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $zext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $zext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $zext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $zext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $zext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $zext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $zext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $zext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $zext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $zext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $zext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $zext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $zext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $zext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $zext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $zext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $zext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $zext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $zext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $zext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $zext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $zext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $zext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $zext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $zext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $zext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $zext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $zext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $zext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $zext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $zext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $zext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $zext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $zext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $zext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $zext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $zext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $zext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $zext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $zext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $zext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $zext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $zext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $zext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $zext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $zext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $zext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $zext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $zext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $zext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $zext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $zext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $zext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $zext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $zext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $zext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $zext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $zext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $zext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $zext.i96.i128(i: i96) returns (i128) {i}
function {:inline} $sext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $sext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $sext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $sext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $sext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $sext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $sext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $sext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $sext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $sext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $sext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $sext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $sext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $sext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $sext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $sext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $sext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $sext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $sext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $sext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $sext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $sext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $sext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $sext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $sext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $sext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $sext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $sext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $sext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $sext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $sext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $sext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $sext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $sext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $sext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $sext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $sext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $sext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $sext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $sext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $sext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $sext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $sext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $sext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $sext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $sext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $sext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $sext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $sext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $sext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $sext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $sext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $sext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $sext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $sext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $sext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $sext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $sext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $sext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $sext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $sext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $sext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $sext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $sext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $sext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $sext.i96.i128(i: i96) returns (i128) {i}
function $fp(ipart:int, fpart:int, epart:int) returns (float);
function $fadd.float(f1:float, f2:float) returns (float);
function $fsub.float(f1:float, f2:float) returns (float);
function $fmul.float(f1:float, f2:float) returns (float);
function $fdiv.float(f1:float, f2:float) returns (float);
function $frem.float(f1:float, f2:float) returns (float);
function $ffalse.float(f1:float, f2:float) returns (i1);
function $ftrue.float(f1:float, f2:float) returns (i1);
function {:inline} $foeq.float(f1:float, f2:float) returns (i1) { if $foeq.bool(f1,f2) then 1 else 0 }
function $foeq.bool(f1:float, f2:float) returns (bool);
function $foge.float(f1:float, f2:float) returns (i1);
function $fogt.float(f1:float, f2:float) returns (i1);
function $fole.float(f1:float, f2:float) returns (i1);
function $folt.float(f1:float, f2:float) returns (i1);
function $fone.float(f1:float, f2:float) returns (i1);
function $ford.float(f1:float, f2:float) returns (i1);
function $fueq.float(f1:float, f2:float) returns (i1);
function $fuge.float(f1:float, f2:float) returns (i1);
function $fugt.float(f1:float, f2:float) returns (i1);
function $fule.float(f1:float, f2:float) returns (i1);
function $fult.float(f1:float, f2:float) returns (i1);
function $fune.float(f1:float, f2:float) returns (i1);
function $funo.float(f1:float, f2:float) returns (i1);
function $fp2si.float.i128(f:float) returns (i128);
function $fp2ui.float.i128(f:float) returns (i128);
function $si2fp.i128.float(i:i128) returns (float);
function $ui2fp.i128.float(i:i128) returns (float);
function $fp2si.float.i96(f:float) returns (i96);
function $fp2ui.float.i96(f:float) returns (i96);
function $si2fp.i96.float(i:i96) returns (float);
function $ui2fp.i96.float(i:i96) returns (float);
function $fp2si.float.i88(f:float) returns (i88);
function $fp2ui.float.i88(f:float) returns (i88);
function $si2fp.i88.float(i:i88) returns (float);
function $ui2fp.i88.float(i:i88) returns (float);
function $fp2si.float.i64(f:float) returns (i64);
function $fp2ui.float.i64(f:float) returns (i64);
function $si2fp.i64.float(i:i64) returns (float);
function $ui2fp.i64.float(i:i64) returns (float);
function $fp2si.float.i56(f:float) returns (i56);
function $fp2ui.float.i56(f:float) returns (i56);
function $si2fp.i56.float(i:i56) returns (float);
function $ui2fp.i56.float(i:i56) returns (float);
function $fp2si.float.i48(f:float) returns (i48);
function $fp2ui.float.i48(f:float) returns (i48);
function $si2fp.i48.float(i:i48) returns (float);
function $ui2fp.i48.float(i:i48) returns (float);
function $fp2si.float.i40(f:float) returns (i40);
function $fp2ui.float.i40(f:float) returns (i40);
function $si2fp.i40.float(i:i40) returns (float);
function $ui2fp.i40.float(i:i40) returns (float);
function $fp2si.float.i32(f:float) returns (i32);
function $fp2ui.float.i32(f:float) returns (i32);
function $si2fp.i32.float(i:i32) returns (float);
function $ui2fp.i32.float(i:i32) returns (float);
function $fp2si.float.i24(f:float) returns (i24);
function $fp2ui.float.i24(f:float) returns (i24);
function $si2fp.i24.float(i:i24) returns (float);
function $ui2fp.i24.float(i:i24) returns (float);
function $fp2si.float.i16(f:float) returns (i16);
function $fp2ui.float.i16(f:float) returns (i16);
function $si2fp.i16.float(i:i16) returns (float);
function $ui2fp.i16.float(i:i16) returns (float);
function $fp2si.float.i8(f:float) returns (i8);
function $fp2ui.float.i8(f:float) returns (i8);
function $si2fp.i8.float(i:i8) returns (float);
function $ui2fp.i8.float(i:i8) returns (float);
function $fptrunc.float.float(f:float) returns (float);
function $fpext.float.float(f:float) returns (float);
function $fp2si.float.bv128(f:float) returns (bv128);
function $fp2ui.float.bv128(f:float) returns (bv128);
function $si2fp.bv128.float(i:bv128) returns (float);
function $ui2fp.bv128.float(i:bv128) returns (float);
function $fp2si.float.bv96(f:float) returns (bv96);
function $fp2ui.float.bv96(f:float) returns (bv96);
function $si2fp.bv96.float(i:bv96) returns (float);
function $ui2fp.bv96.float(i:bv96) returns (float);
function $fp2si.float.bv88(f:float) returns (bv88);
function $fp2ui.float.bv88(f:float) returns (bv88);
function $si2fp.bv88.float(i:bv88) returns (float);
function $ui2fp.bv88.float(i:bv88) returns (float);
function $fp2si.float.bv64(f:float) returns (bv64);
function $fp2ui.float.bv64(f:float) returns (bv64);
function $si2fp.bv64.float(i:bv64) returns (float);
function $ui2fp.bv64.float(i:bv64) returns (float);
function $fp2si.float.bv56(f:float) returns (bv56);
function $fp2ui.float.bv56(f:float) returns (bv56);
function $si2fp.bv56.float(i:bv56) returns (float);
function $ui2fp.bv56.float(i:bv56) returns (float);
function $fp2si.float.bv48(f:float) returns (bv48);
function $fp2ui.float.bv48(f:float) returns (bv48);
function $si2fp.bv48.float(i:bv48) returns (float);
function $ui2fp.bv48.float(i:bv48) returns (float);
function $fp2si.float.bv40(f:float) returns (bv40);
function $fp2ui.float.bv40(f:float) returns (bv40);
function $si2fp.bv40.float(i:bv40) returns (float);
function $ui2fp.bv40.float(i:bv40) returns (float);
function $fp2si.float.bv32(f:float) returns (bv32);
function $fp2ui.float.bv32(f:float) returns (bv32);
function $si2fp.bv32.float(i:bv32) returns (float);
function $ui2fp.bv32.float(i:bv32) returns (float);
function $fp2si.float.bv24(f:float) returns (bv24);
function $fp2ui.float.bv24(f:float) returns (bv24);
function $si2fp.bv24.float(i:bv24) returns (float);
function $ui2fp.bv24.float(i:bv24) returns (float);
function $fp2si.float.bv16(f:float) returns (bv16);
function $fp2ui.float.bv16(f:float) returns (bv16);
function $si2fp.bv16.float(i:bv16) returns (float);
function $ui2fp.bv16.float(i:bv16) returns (float);
function $fp2si.float.bv8(f:float) returns (bv8);
function $fp2ui.float.bv8(f:float) returns (bv8);
function $si2fp.bv8.float(i:bv8) returns (float);
function $ui2fp.bv8.float(i:bv8) returns (float);
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;
function {:inline} $isExternal(p: ref) returns (bool) {$slt.ref.bool(p,$EXTERNS_BOTTOM)}
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) { M[p] }
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) { M[p] }
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) { M[p] }
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) { M[p] }
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) { M[p] }
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) { M[p] }
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) { M[p] }
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) { M[p] }
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) { M[p] }
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) { M[p] }
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128){ $load.bytes.bv64(M, $add.ref(p, $8.ref)) ++ $load.bytes.bv64(M, p) }
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96){ $load.bytes.bv64(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88){ $load.bytes.bv56(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64){ $load.bytes.bv32(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56){ $load.bytes.bv24(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48){ $load.bytes.bv16(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40){ M[$add.ref(p, $4.ref)] ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32){ M[$add.ref(p, $3.ref)] ++ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24){ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16){ M[$add.ref(p, $1.ref)] ++ M[p] }
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, v: i128) returns ([ref] i128) { M[p := v] }
function {:inline} $store.i96(M: [ref] i96, p: ref, v: i96) returns ([ref] i96) { M[p := v] }
function {:inline} $store.i88(M: [ref] i88, p: ref, v: i88) returns ([ref] i88) { M[p := v] }
function {:inline} $store.i64(M: [ref] i64, p: ref, v: i64) returns ([ref] i64) { M[p := v] }
function {:inline} $store.i56(M: [ref] i56, p: ref, v: i56) returns ([ref] i56) { M[p := v] }
function {:inline} $store.i48(M: [ref] i48, p: ref, v: i48) returns ([ref] i48) { M[p := v] }
function {:inline} $store.i40(M: [ref] i40, p: ref, v: i40) returns ([ref] i40) { M[p := v] }
function {:inline} $store.i32(M: [ref] i32, p: ref, v: i32) returns ([ref] i32) { M[p := v] }
function {:inline} $store.i24(M: [ref] i24, p: ref, v: i24) returns ([ref] i24) { M[p := v] }
function {:inline} $store.i16(M: [ref] i16, p: ref, v: i16) returns ([ref] i16) { M[p := v] }
function {:inline} $store.i8(M: [ref] i8, p: ref, v: i8) returns ([ref] i8) { M[p := v] }
function {:inline} $store.bv128(M: [ref] bv128, p: ref, v: bv128) returns ([ref] bv128) { M[p := v] }
function {:inline} $store.bv96(M: [ref] bv96, p: ref, v: bv96) returns ([ref] bv96) { M[p := v] }
function {:inline} $store.bv88(M: [ref] bv88, p: ref, v: bv88) returns ([ref] bv88) { M[p := v] }
function {:inline} $store.bv64(M: [ref] bv64, p: ref, v: bv64) returns ([ref] bv64) { M[p := v] }
function {:inline} $store.bv56(M: [ref] bv56, p: ref, v: bv56) returns ([ref] bv56) { M[p := v] }
function {:inline} $store.bv48(M: [ref] bv48, p: ref, v: bv48) returns ([ref] bv48) { M[p := v] }
function {:inline} $store.bv40(M: [ref] bv40, p: ref, v: bv40) returns ([ref] bv40) { M[p := v] }
function {:inline} $store.bv32(M: [ref] bv32, p: ref, v: bv32) returns ([ref] bv32) { M[p := v] }
function {:inline} $store.bv24(M: [ref] bv24, p: ref, v: bv24) returns ([ref] bv24) { M[p := v] }
function {:inline} $store.bv16(M: [ref] bv16, p: ref, v: bv16) returns ([ref] bv16) { M[p := v] }
function {:inline} $store.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) { M[p := v] }
function {:inline} $store.bytes.bv128(M:[ref]bv8, p:ref, v:bv128) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]][$add.ref(p, $11.ref) := v[104:96]][$add.ref(p, $12.ref) := v[112:104]][$add.ref(p, $13.ref) := v[120:112]][$add.ref(p, $14.ref) := v[128:120]]}
function {:inline} $store.bytes.bv96(M:[ref]bv8, p:ref, v:bv96) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]]}
function {:inline} $store.bytes.bv88(M:[ref]bv8, p:ref, v:bv88) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]]}
function {:inline} $store.bytes.bv64(M:[ref]bv8, p:ref, v:bv64) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]]}
function {:inline} $store.bytes.bv56(M:[ref]bv8, p:ref, v:bv56) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]]}
function {:inline} $store.bytes.bv48(M:[ref]bv8, p:ref, v:bv48) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]]}
function {:inline} $store.bytes.bv40(M:[ref]bv8, p:ref, v:bv40) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]]}
function {:inline} $store.bytes.bv32(M:[ref]bv8, p:ref, v:bv32) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]]}
function {:inline} $store.bytes.bv24(M:[ref]bv8, p:ref, v:bv24) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]]}
function {:inline} $store.bytes.bv16(M:[ref]bv8, p:ref, v:bv16) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]]}
function {:inline} $store.bytes.bv8(M:[ref]bv8, p:ref, v:bv8) returns ([ref]bv8) {M[p := v]}
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, v: ref) returns ([ref] ref) { M[p := v] }
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, v: float) returns ([ref] float) { M[p := v] }
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
procedure  boogie_si_record_bool(i: bool);
procedure  boogie_si_record_i1(i: i1);
procedure  boogie_si_record_i8(i: i8);
procedure  boogie_si_record_i16(i: i16);
procedure  boogie_si_record_i24(i: i24);
procedure  boogie_si_record_i32(i: i32);
procedure  boogie_si_record_i40(i: i40);
procedure  boogie_si_record_i48(i: i48);
procedure  boogie_si_record_i56(i: i56);
procedure  boogie_si_record_i64(i: i64);
procedure  boogie_si_record_i88(i: i88);
procedure  boogie_si_record_i96(i: i96);
procedure  boogie_si_record_i128(i: i128);
procedure  boogie_si_record_bv1(i: bv1);
procedure  boogie_si_record_bv8(i: bv8);
procedure  boogie_si_record_bv16(i: bv16);
procedure  boogie_si_record_bv24(i: bv24);
procedure  boogie_si_record_bv32(i: bv32);
procedure  boogie_si_record_bv40(i: bv40);
procedure  boogie_si_record_bv48(i: bv48);
procedure  boogie_si_record_bv56(i: bv56);
procedure  boogie_si_record_bv64(i: bv64);
procedure  boogie_si_record_bv88(i: bv88);
procedure  boogie_si_record_bv96(i: bv96);
procedure  boogie_si_record_bv128(i: bv128);
procedure  boogie_si_record_ref(i: ref);
procedure  boogie_si_record_float(i: float);
var $exn: bool;
var $exnv: int;
function $extractvalue(p: int, i: int) returns (int);

procedure  $alloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 565555));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 566587));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1782, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1787, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 567619));
procedure  llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 568651));
procedure  __SMACK_static_init()
{
$bb0:
  $M.20 := 0;
  call {:cexpr "ldv_irq_3_1"} boogie_si_record_i32(0);
  $M.42 := 0;
  call {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(0);
  $M.23 := 0;
  call {:cexpr "ldv_irq_3_2"} boogie_si_record_i32(0);
  $M.48 := 0;
  call {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(0);
  $M.17 := 0;
  call {:cexpr "ldv_irq_3_0"} boogie_si_record_i32(0);
  $M.45 := 0;
  call {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(0);
  $M.64 := 0;
  call {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
  $M.55 := 0;
  call {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
  $M.61 := 0;
  call {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
  $M.41 := 1;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
  $M.58 := 0;
  call {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
  $M.51 := 0;
  call {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(0);
  $M.26 := 0;
  call {:cexpr "ldv_irq_3_3"} boogie_si_record_i32(0);
  $M.33 := $0.ref;
  $M.34 := $0.ref;
  $M.35 := $0.ref;
  $M.36 := $0.ref;
  $M.37 := $0.ref;
  $M.38 := $0.ref;
  $M.39 := $0.ref;
  $M.40 := 0;
  call {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
  $M.0 := $store.i8($M.0, igbvf_driver_name, 105);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_name, 1), 103);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_name, 2), 98);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_name, 3), 118);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_name, 4), 102);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_name, 5), 0);
  $M.0 := $store.i8($M.0, igbvf_driver_version, 50);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_version, 1), 46);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_version, 2), 48);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_version, 3), 46);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_version, 4), 50);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_version, 5), 45);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_version, 6), 107);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_version, 7), 0);
  $M.43 := 0;
  call {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32(0);
  $M.44 := $0.ref;
  $M.46 := 0;
  call {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32(0);
  $M.47 := $0.ref;
  $M.49 := 0;
  call {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32(0);
  $M.50 := $0.ref;
  $M.52 := 0;
  call {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32(0);
  $M.53 := $0.ref;
  $M.54 := $0.ref;
  $M.30 := $0.ref;
  $M.18 := 0;
  call {:cexpr "ldv_irq_line_3_0"} boogie_si_record_i32(0);
  $M.19 := $0.ref;
  $M.21 := 0;
  call {:cexpr "ldv_irq_line_3_1"} boogie_si_record_i32(0);
  $M.22 := $0.ref;
  $M.24 := 0;
  call {:cexpr "ldv_irq_line_3_2"} boogie_si_record_i32(0);
  $M.25 := $0.ref;
  $M.27 := 0;
  call {:cexpr "ldv_irq_line_3_3"} boogie_si_record_i32(0);
  $M.28 := $0.ref;
  $M.2 := $0.ref;
  $M.3 := 0;
  call {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(0);
  $M.4 := $0.ref;
  $M.5 := 0;
  call {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(0);
  $M.6 := $0.ref;
  $M.7 := 0;
  call {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(0);
  $M.8 := $0.ref;
  $M.9 := 0;
  call {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(0);
  $M.56 := 0;
  call {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
  $M.57 := $0.ref;
  $M.59 := 0;
  call {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
  $M.60 := $0.ref;
  $M.62 := 0;
  call {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
  $M.63 := $0.ref;
  $M.65 := 0;
  call {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
  $M.66 := $0.ref;
  $M.67 := $0.ref;
  $M.73 := 0;
  call {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
  $M.74 := 0;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
  $M.29 := 0;
  call {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
  $M.75 := 0;
  call {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
  $M.76 := 0;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
  $M.77 := 0;
  call {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
  $M.78 := 0;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
  $M.79 := 0;
  call {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
  $M.80 := 0;
  call {:cexpr "ref_cnt"} boogie_si_record_i32(0);
  $M.81 := 0;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
  $M.82 := 0;
  call {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
  $M.83 := 0;
  call {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
  $M.84 := 0;
  call {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
  $M.85 := 0;
  call {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
  $M.86 := 0;
  call {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
  $M.87 := 0;
  call {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
  $M.88 := 0;
  call {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
  $M.11 := 0;
  call {:cexpr "last_index"} boogie_si_record_i32(0);
  $M.10 := $0.ref;
  $M.89 := 0;
  $M.90 := 0;
  $M.91 := 0;
  $M.92 := 0;
  $M.93 := 0;
  $M.94 := 0;
  $M.95 := 0;
  $M.12 := $store.ref($M.12, set_impl, $0.ref);
  $M.12 := $store.ref($M.12, $add.ref(set_impl, 8), $0.ref);
  $M.12 := $store.ref($M.12, $add.ref(set_impl, 16), $0.ref);
  $M.12 := $store.ref($M.12, $add.ref(set_impl, 24), $0.ref);
  $M.12 := $store.ref($M.12, $add.ref(set_impl, 32), $0.ref);
  $M.12 := $store.ref($M.12, $add.ref(set_impl, 40), $0.ref);
  $M.12 := $store.ref($M.12, $add.ref(set_impl, 48), $0.ref);
  $M.12 := $store.ref($M.12, $add.ref(set_impl, 56), $0.ref);
  $M.12 := $store.ref($M.12, $add.ref(set_impl, 64), $0.ref);
  $M.12 := $store.ref($M.12, $add.ref(set_impl, 72), $0.ref);
  $M.12 := $store.ref($M.12, $add.ref(set_impl, 80), $0.ref);
  $M.12 := $store.ref($M.12, $add.ref(set_impl, 88), $0.ref);
  $M.12 := $store.ref($M.12, $add.ref(set_impl, 96), $0.ref);
  $M.12 := $store.ref($M.12, $add.ref(set_impl, 104), $0.ref);
  $M.12 := $store.ref($M.12, $add.ref(set_impl, 112), $0.ref);
  $M.0 := $store.ref($M.0, igbvf_netdev_ops, $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 16), igbvf_open);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 24), igbvf_close);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 32), igbvf_xmit_frame);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 40), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 48), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 56), igbvf_set_multi);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 64), igbvf_set_mac);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 72), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 80), igbvf_ioctl);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 88), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 96), igbvf_change_mtu);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 104), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 112), igbvf_tx_timeout);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 120), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 128), igbvf_get_stats);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 136), igbvf_vlan_rx_add_vid);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 144), igbvf_vlan_rx_kill_vid);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 152), igbvf_netpoll);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 160), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 168), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 176), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 184), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 192), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 200), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 208), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 216), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 224), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 232), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 240), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 248), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 256), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 264), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 272), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 280), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 288), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 296), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 304), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 312), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 320), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 328), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 336), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 344), igbvf_set_features);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 352), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 360), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 368), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 376), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 384), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 392), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 400), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 408), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 416), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 424), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 432), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 440), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 448), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 456), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 464), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_netdev_ops, 472), $0.ref);
  $M.14 := $sub.i32(0, 1);
  call {:cexpr "debug"} boogie_si_record_i32($sub.i32(0, 1));
  $M.0 := $store.i32($M.0, igbvf_i350_vf_info, 2);
  $M.0 := $store.i32($M.0, $add.ref(igbvf_i350_vf_info, 4), 0);
  $M.0 := $store.i32($M.0, $add.ref(igbvf_i350_vf_info, 8), 10);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_i350_vf_info, 16), e1000_init_function_pointers_vf);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_i350_vf_info, 24), $0.ref);
  $M.0 := $store.i32($M.0, igbvf_vf_info, 1);
  $M.0 := $store.i32($M.0, $add.ref(igbvf_vf_info, 4), 0);
  $M.0 := $store.i32($M.0, $add.ref(igbvf_vf_info, 8), 10);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_vf_info, 16), e1000_init_function_pointers_vf);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_vf_info, 24), $0.ref);
  $M.13 := $store.ref($M.13, igbvf_info_tbl, igbvf_vf_info);
  $M.13 := $store.ref($M.13, $add.ref(igbvf_info_tbl, 8), igbvf_i350_vf_info);
  $M.0 := $store.i8($M.0, igbvf_copyright, 67);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 1), 111);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 2), 112);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 3), 121);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 4), 114);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 5), 105);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 6), 103);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 7), 104);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 8), 116);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 9), 32);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 10), 40);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 11), 99);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 12), 41);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 13), 32);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 14), 50);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 15), 48);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 16), 48);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 17), 57);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 18), 32);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 19), 45);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 20), 32);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 21), 50);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 22), 48);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 23), 49);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 24), 50);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 25), 32);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 26), 73);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 27), 110);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 28), 116);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 29), 101);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 30), 108);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 31), 32);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 32), 67);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 33), 111);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 34), 114);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 35), 112);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 36), 111);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 37), 114);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 38), 97);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 39), 116);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 40), 105);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 41), 111);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 42), 110);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 43), 46);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_copyright, 44), 0);
  $M.0 := $store.i8($M.0, igbvf_driver_string, 73);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 1), 110);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 2), 116);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 3), 101);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 4), 108);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 5), 40);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 6), 82);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 7), 41);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 8), 32);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 9), 71);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 10), 105);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 11), 103);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 12), 97);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 13), 98);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 14), 105);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 15), 116);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 16), 32);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 17), 86);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 18), 105);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 19), 114);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 20), 116);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 21), 117);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 22), 97);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 23), 108);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 24), 32);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 25), 70);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 26), 117);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 27), 110);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 28), 99);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 29), 116);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 30), 105);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 31), 111);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 32), 110);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 33), 32);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 34), 78);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 35), 101);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 36), 116);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 37), 119);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 38), 111);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 39), 114);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 40), 107);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 41), 32);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 42), 68);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 43), 114);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 44), 105);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 45), 118);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 46), 101);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 47), 114);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_driver_string, 48), 0);
  $M.0 := $store.ref($M.0, igbvf_err_handler, igbvf_io_error_detected);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_err_handler, 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_err_handler, 16), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_err_handler, 24), igbvf_io_slot_reset);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_err_handler, 32), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_err_handler, 40), igbvf_io_resume);
  $M.0 := $store.i32($M.0, igbvf_pci_tbl, 32902);
  $M.0 := $store.i32($M.0, $add.ref(igbvf_pci_tbl, 4), 4298);
  $M.0 := $store.i32($M.0, $add.ref(igbvf_pci_tbl, 8), $sub.i32(0, 1));
  $M.0 := $store.i32($M.0, $add.ref(igbvf_pci_tbl, 12), $sub.i32(0, 1));
  $M.0 := $store.i32($M.0, $add.ref(igbvf_pci_tbl, 16), 0);
  $M.0 := $store.i32($M.0, $add.ref(igbvf_pci_tbl, 20), 0);
  $M.0 := $store.i64($M.0, $add.ref(igbvf_pci_tbl, 24), 0);
  $M.0 := $store.i32($M.0, $add.ref(igbvf_pci_tbl, 32), 32902);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_pci_tbl, 32), 4), 5408);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_pci_tbl, 32), 8), $sub.i32(0, 1));
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_pci_tbl, 32), 12), $sub.i32(0, 1));
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_pci_tbl, 32), 16), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_pci_tbl, 32), 20), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref(igbvf_pci_tbl, 32), 24), 1);
  $M.0 := $store.i32($M.0, $add.ref(igbvf_pci_tbl, 64), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_pci_tbl, 64), 4), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_pci_tbl, 64), 8), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_pci_tbl, 64), 12), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_pci_tbl, 64), 16), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_pci_tbl, 64), 20), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref(igbvf_pci_tbl, 64), 24), 0);
  $M.0 := $store.ref($M.0, igbvf_driver, $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_driver, 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_driver, 16), igbvf_driver_name);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_driver, 24), igbvf_pci_tbl);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_driver, 32), igbvf_probe);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_driver, 40), igbvf_remove);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_driver, 48), igbvf_suspend);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_driver, 56), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_driver, 64), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_driver, 72), igbvf_resume);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_driver, 80), igbvf_shutdown);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_driver, 88), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_driver, 96), igbvf_err_handler);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_driver, 104), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_driver, 104), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_driver, 104), 16), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_driver, 104), 24), $0.ref);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver, 104), 32), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_driver, 104), 40), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_driver, 104), 48), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_driver, 104), 56), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_driver, 104), 64), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_driver, 104), 72), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_driver, 104), 80), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_driver, 104), 88), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_driver, 104), 96), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_driver, 104), 104), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_driver, 104), 112), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref(igbvf_driver, 224), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_driver, 224), 4), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_driver, 224), 8), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_driver, 224), 16), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_driver, 224), 24), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(igbvf_driver, 224), 24), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_driver, 224), 24), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(igbvf_driver, 224), 24), 24), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_driver, 224), 24), 32), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(igbvf_driver, 224), 24), 40), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_driver, 224), 72), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(igbvf_driver, 224), 72), 8), $0.ref);
  $M.0 := $store.i8($M.0, igbvf_gstrings_test, 76);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 1), 105);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 2), 110);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 3), 107);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 4), 32);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 5), 116);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 6), 101);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 7), 115);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 8), 116);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 9), 32);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 10), 32);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 11), 32);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 12), 40);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 13), 111);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 14), 110);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 15), 47);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 16), 111);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 17), 102);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 18), 102);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 19), 108);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 20), 105);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 21), 110);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 22), 101);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 23), 41);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 24), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 25), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 26), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 27), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 28), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 29), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 30), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_test, 31), 0);
  $M.0 := $store.i8($M.0, igbvf_gstrings_stats, 114);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 1), 120);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 2), 95);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 3), 112);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 4), 97);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 5), 99);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 6), 107);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 7), 101);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 8), 116);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 9), 115);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 10), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 11), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 12), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 13), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 14), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 15), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 16), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 17), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 18), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 19), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 20), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 21), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 22), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 23), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 24), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 25), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 26), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 27), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 28), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 29), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 30), 0);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 31), 0);
  $M.0 := $store.i32($M.0, $add.ref(igbvf_gstrings_stats, 32), 8);
  $M.0 := $store.i32($M.0, $add.ref(igbvf_gstrings_stats, 36), 1888);
  $M.0 := $store.i32($M.0, $add.ref(igbvf_gstrings_stats, 40), 1776);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 44), 116);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 1), 120);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 2), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 3), 112);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 4), 97);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 5), 99);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 6), 107);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 7), 101);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 8), 116);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 9), 115);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 10), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 11), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 12), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 13), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 14), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 15), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 16), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 17), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 18), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 19), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 20), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 21), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 22), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 23), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 24), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 25), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 26), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 27), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 28), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 29), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 30), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 31), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 32), 8);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 36), 1896);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 44), 40), 1784);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 88), 114);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 1), 120);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 2), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 3), 98);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 4), 121);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 5), 116);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 6), 101);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 7), 115);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 8), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 9), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 10), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 11), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 12), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 13), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 14), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 15), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 16), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 17), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 18), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 19), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 20), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 21), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 22), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 23), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 24), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 25), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 26), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 27), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 28), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 29), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 30), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 31), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 32), 8);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 36), 1904);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 88), 40), 1792);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 132), 116);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 1), 120);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 2), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 3), 98);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 4), 121);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 5), 116);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 6), 101);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 7), 115);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 8), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 9), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 10), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 11), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 12), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 13), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 14), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 15), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 16), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 17), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 18), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 19), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 20), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 21), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 22), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 23), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 24), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 25), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 26), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 27), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 28), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 29), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 30), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 31), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 32), 8);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 36), 1912);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 132), 40), 1800);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 176), 109);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 1), 117);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 2), 108);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 3), 116);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 4), 105);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 5), 99);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 6), 97);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 7), 115);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 8), 116);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 9), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 10), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 11), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 12), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 13), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 14), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 15), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 16), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 17), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 18), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 19), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 20), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 21), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 22), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 23), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 24), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 25), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 26), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 27), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 28), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 29), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 30), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 31), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 32), 8);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 36), 1920);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 176), 40), 1808);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 220), 108);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 1), 98);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 2), 114);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 3), 120);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 4), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 5), 98);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 6), 121);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 7), 116);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 8), 101);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 9), 115);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 10), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 11), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 12), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 13), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 14), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 15), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 16), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 17), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 18), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 19), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 20), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 21), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 22), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 23), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 24), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 25), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 26), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 27), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 28), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 29), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 30), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 31), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 32), 8);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 36), 1944);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 220), 40), 1832);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 264), 108);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 1), 98);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 2), 114);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 3), 120);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 4), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 5), 112);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 6), 97);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 7), 99);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 8), 107);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 9), 101);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 10), 116);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 11), 115);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 12), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 13), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 14), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 15), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 16), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 17), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 18), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 19), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 20), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 21), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 22), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 23), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 24), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 25), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 26), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 27), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 28), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 29), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 30), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 31), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 32), 8);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 36), 1952);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 264), 40), 1840);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 308), 116);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 1), 120);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 2), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 3), 114);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 4), 101);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 5), 115);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 6), 116);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 7), 97);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 8), 114);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 9), 116);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 10), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 11), 113);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 12), 117);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 13), 101);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 14), 117);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 15), 101);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 16), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 17), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 18), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 19), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 20), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 21), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 22), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 23), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 24), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 25), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 26), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 27), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 28), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 29), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 30), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 31), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 32), 4);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 36), 1096);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 308), 40), 1960);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 352), 114);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 1), 120);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 2), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 3), 108);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 4), 111);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 5), 110);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 6), 103);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 7), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 8), 98);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 9), 121);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 10), 116);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 11), 101);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 12), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 13), 99);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 14), 111);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 15), 117);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 16), 110);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 17), 116);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 18), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 19), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 20), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 21), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 22), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 23), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 24), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 25), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 26), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 27), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 28), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 29), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 30), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 31), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 32), 8);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 36), 1904);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 352), 40), 1792);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 396), 114);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 1), 120);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 2), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 3), 99);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 4), 115);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 5), 117);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 6), 109);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 7), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 8), 111);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 9), 102);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 10), 102);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 11), 108);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 12), 111);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 13), 97);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 14), 100);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 15), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 16), 103);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 17), 111);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 18), 111);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 19), 100);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 20), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 21), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 22), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 23), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 24), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 25), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 26), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 27), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 28), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 29), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 30), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 31), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 32), 8);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 36), 1176);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 396), 40), 1960);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 440), 114);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 1), 120);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 2), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 3), 99);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 4), 115);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 5), 117);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 6), 109);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 7), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 8), 111);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 9), 102);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 10), 102);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 11), 108);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 12), 111);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 13), 97);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 14), 100);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 15), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 16), 101);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 17), 114);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 18), 114);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 19), 111);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 20), 114);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 21), 115);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 22), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 23), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 24), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 25), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 26), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 27), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 28), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 29), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 30), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 31), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 32), 8);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 36), 1168);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 440), 40), 1960);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 484), 114);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 1), 120);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 2), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 3), 104);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 4), 101);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 5), 97);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 6), 100);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 7), 101);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 8), 114);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 9), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 10), 115);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 11), 112);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 12), 108);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 13), 105);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 14), 116);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 15), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 16), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 17), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 18), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 19), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 20), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 21), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 22), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 23), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 24), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 25), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 26), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 27), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 28), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 29), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 30), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 31), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 32), 8);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 36), 1184);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 484), 40), 1960);
  $M.0 := $store.i8($M.0, $add.ref(igbvf_gstrings_stats, 528), 97);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 1), 108);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 2), 108);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 3), 111);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 4), 99);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 5), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 6), 114);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 7), 120);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 8), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 9), 98);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 10), 117);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 11), 102);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 12), 102);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 13), 95);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 14), 102);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 15), 97);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 16), 105);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 17), 108);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 18), 101);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 19), 100);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 20), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 21), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 22), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 23), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 24), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 25), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 26), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 27), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 28), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 29), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 30), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 31), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 32), 4);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 36), 1192);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_gstrings_stats, 528), 40), 1960);
  $M.0 := $store.ref($M.0, igbvf_ethtool_ops, igbvf_get_settings);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 8), igbvf_set_settings);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 16), igbvf_get_drvinfo);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 24), igbvf_get_regs_len);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 32), igbvf_get_regs);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 40), igbvf_get_wol);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 48), igbvf_set_wol);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 56), igbvf_get_msglevel);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 64), igbvf_set_msglevel);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 72), igbvf_nway_reset);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 80), ethtool_op_get_link);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 88), igbvf_get_eeprom_len);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 96), igbvf_get_eeprom);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 104), igbvf_set_eeprom);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 112), igbvf_get_coalesce);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 120), igbvf_set_coalesce);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 128), igbvf_get_ringparam);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 136), igbvf_set_ringparam);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 144), igbvf_get_pauseparam);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 152), igbvf_set_pauseparam);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 160), igbvf_diag_test);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 168), igbvf_get_strings);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 176), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 184), igbvf_get_ethtool_stats);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 192), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 200), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 208), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 216), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 224), igbvf_get_sset_count);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 232), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 240), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 248), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 256), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 264), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 272), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 280), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 288), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 296), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 304), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 312), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 320), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 328), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 336), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 344), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 352), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 360), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(igbvf_ethtool_ops, 368), $0.ref);
  $M.96 := $store.i8($M.96, .str.15, 37);
  $M.96 := $store.i8($M.96, $add.ref(.str.15, 1), 115);
  $M.96 := $store.i8($M.96, $add.ref(.str.15, 2), 45);
  $M.96 := $store.i8($M.96, $add.ref(.str.15, 3), 116);
  $M.96 := $store.i8($M.96, $add.ref(.str.15, 4), 120);
  $M.96 := $store.i8($M.96, $add.ref(.str.15, 5), 45);
  $M.96 := $store.i8($M.96, $add.ref(.str.15, 6), 48);
  $M.96 := $store.i8($M.96, $add.ref(.str.15, 7), 0);
  $M.97 := $store.i8($M.97, .str.16, 37);
  $M.97 := $store.i8($M.97, $add.ref(.str.16, 1), 115);
  $M.97 := $store.i8($M.97, $add.ref(.str.16, 2), 45);
  $M.97 := $store.i8($M.97, $add.ref(.str.16, 3), 114);
  $M.97 := $store.i8($M.97, $add.ref(.str.16, 4), 120);
  $M.97 := $store.i8($M.97, $add.ref(.str.16, 5), 45);
  $M.97 := $store.i8($M.97, $add.ref(.str.16, 6), 48);
  $M.97 := $store.i8($M.97, $add.ref(.str.16, 7), 0);
  $exn := false;
  return;
}
const devirtbounce: ref;
axiom (devirtbounce == $sub.ref(0, 569683));
procedure  devirtbounce(funcPtr: ref, arg: ref)
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i56 := $eq.ref(igbvf_close, $p0);
  assume {:branchcond $i56} true;
  goto $bb20, $bb39;
$bb2:
  assume ($i38 == 1);
  $p1 := $bitcast.ref.ref(arg);
  call $i2 := igbvf_get_regs_len($p1);
  $r := $i2;
  $exn := false;
  return;
$bb3:
  assume ($i39 == 1);
  $p3 := $bitcast.ref.ref(arg);
  call $i4 := igbvf_get_msglevel($p3);
  $r := $i4;
  $exn := false;
  return;
$bb4:
  assume ($i40 == 1);
  $p5 := $bitcast.ref.ref(arg);
  call $i6 := igbvf_nway_reset($p5);
  $r := $i6;
  $exn := false;
  return;
$bb5:
  assume ($i41 == 1);
  $p7 := $bitcast.ref.ref(arg);
  call $i8 := ethtool_op_get_link($p7);
  $r := $i8;
  $exn := false;
  return;
$bb6:
  assume ($i42 == 1);
  $p9 := $bitcast.ref.ref(arg);
  call $i10 := igbvf_get_eeprom_len($p9);
  $r := $i10;
  $exn := false;
  return;
$bb7:
  assume ($i43 == 1);
  call $i11 := __builtinx_memcpy();
  $r := $i11;
  $exn := false;
  return;
$bb8:
  assume ($i44 == 1);
  $p12 := $bitcast.ref.ref(arg);
  call $i13 := igbvf_resume($p12);
  $r := $i13;
  $exn := false;
  return;
$bb9:
  assume ($i45 == 1);
  $p14 := $bitcast.ref.ref(arg);
  call $i15 := igbvf_io_slot_reset($p14);
  $r := $i15;
  $exn := false;
  return;
$bb10:
  assume ($i46 == 1);
  $p16 := $bitcast.ref.ref(arg);
  call $i17 := e1000_init_mac_params_vf($p16);
  $r := $i17;
  $exn := false;
  return;
$bb11:
  assume ($i47 == 1);
  $p18 := $bitcast.ref.ref(arg);
  call $i19 := e1000_init_mbx_params_vf($p18);
  $r := $i19;
  $exn := false;
  return;
$bb12:
  assume ($i48 == 1);
  $p20 := $bitcast.ref.ref(arg);
  call $i21 := e1000_check_for_msg_vf($p20);
  $r := $i21;
  $exn := false;
  return;
$bb13:
  assume ($i49 == 1);
  $p22 := $bitcast.ref.ref(arg);
  call $i23 := e1000_check_for_ack_vf($p22);
  $r := $i23;
  $exn := false;
  return;
$bb14:
  assume ($i50 == 1);
  $p24 := $bitcast.ref.ref(arg);
  call $i25 := e1000_check_for_rst_vf($p24);
  $r := $i25;
  $exn := false;
  return;
$bb15:
  assume ($i51 == 1);
  $p26 := $bitcast.ref.ref(arg);
  call $i27 := e1000_reset_hw_vf($p26);
  $r := $i27;
  $exn := false;
  return;
$bb16:
  assume ($i52 == 1);
  $p28 := $bitcast.ref.ref(arg);
  call $i29 := e1000_init_hw_vf($p28);
  $r := $i29;
  $exn := false;
  return;
$bb17:
  assume ($i53 == 1);
  $p30 := $bitcast.ref.ref(arg);
  call $i31 := e1000_check_for_link_vf($p30);
  $r := $i31;
  $exn := false;
  return;
$bb18:
  assume ($i54 == 1);
  $p32 := $bitcast.ref.ref(arg);
  call $i33 := e1000_read_mac_addr_vf($p32);
  $r := $i33;
  $exn := false;
  return;
$bb19:
  assume ($i55 == 1);
  $p34 := $bitcast.ref.ref(arg);
  call $i35 := igbvf_open($p34);
  $r := $i35;
  $exn := false;
  return;
$bb20:
  assume ($i56 == 1);
  $p36 := $bitcast.ref.ref(arg);
  call $i37 := igbvf_close($p36);
  $r := $i37;
  $exn := false;
  return;
$bb21:
  assume !(($i38 == 1));
  assume false;
$bb22:
  assume !(($i39 == 1));
  $i38 := $eq.ref(igbvf_get_regs_len, $p0);
  assume {:branchcond $i38} true;
  goto $bb2, $bb21;
$bb23:
  assume !(($i40 == 1));
  $i39 := $eq.ref(igbvf_get_msglevel, $p0);
  assume {:branchcond $i39} true;
  goto $bb3, $bb22;
$bb24:
  assume !(($i41 == 1));
  $i40 := $eq.ref(igbvf_nway_reset, $p0);
  assume {:branchcond $i40} true;
  goto $bb4, $bb23;
$bb25:
  assume !(($i42 == 1));
  $i41 := $eq.ref(ethtool_op_get_link, $p0);
  assume {:branchcond $i41} true;
  goto $bb5, $bb24;
$bb26:
  assume !(($i43 == 1));
  $i42 := $eq.ref(igbvf_get_eeprom_len, $p0);
  assume {:branchcond $i42} true;
  goto $bb6, $bb25;
$bb27:
  assume !(($i44 == 1));
  $i43 := $eq.ref(__builtinx_memcpy, $p0);
  assume {:branchcond $i43} true;
  goto $bb7, $bb26;
$bb28:
  assume !(($i45 == 1));
  $i44 := $eq.ref(igbvf_resume, $p0);
  assume {:branchcond $i44} true;
  goto $bb8, $bb27;
$bb29:
  assume !(($i46 == 1));
  $i45 := $eq.ref(igbvf_io_slot_reset, $p0);
  assume {:branchcond $i45} true;
  goto $bb9, $bb28;
$bb30:
  assume !(($i47 == 1));
  $i46 := $eq.ref(e1000_init_mac_params_vf, $p0);
  assume {:branchcond $i46} true;
  goto $bb10, $bb29;
$bb31:
  assume !(($i48 == 1));
  $i47 := $eq.ref(e1000_init_mbx_params_vf, $p0);
  assume {:branchcond $i47} true;
  goto $bb11, $bb30;
$bb32:
  assume !(($i49 == 1));
  $i48 := $eq.ref(e1000_check_for_msg_vf, $p0);
  assume {:branchcond $i48} true;
  goto $bb12, $bb31;
$bb33:
  assume !(($i50 == 1));
  $i49 := $eq.ref(e1000_check_for_ack_vf, $p0);
  assume {:branchcond $i49} true;
  goto $bb13, $bb32;
$bb34:
  assume !(($i51 == 1));
  $i50 := $eq.ref(e1000_check_for_rst_vf, $p0);
  assume {:branchcond $i50} true;
  goto $bb14, $bb33;
$bb35:
  assume !(($i52 == 1));
  $i51 := $eq.ref(e1000_reset_hw_vf, $p0);
  assume {:branchcond $i51} true;
  goto $bb15, $bb34;
$bb36:
  assume !(($i53 == 1));
  $i52 := $eq.ref(e1000_init_hw_vf, $p0);
  assume {:branchcond $i52} true;
  goto $bb16, $bb35;
$bb37:
  assume !(($i54 == 1));
  $i53 := $eq.ref(e1000_check_for_link_vf, $p0);
  assume {:branchcond $i53} true;
  goto $bb17, $bb36;
$bb38:
  assume !(($i55 == 1));
  $i54 := $eq.ref(e1000_read_mac_addr_vf, $p0);
  assume {:branchcond $i54} true;
  goto $bb18, $bb37;
$bb39:
  assume !(($i56 == 1));
  $i55 := $eq.ref(igbvf_open, $p0);
  assume {:branchcond $i55} true;
  goto $bb19, $bb38;
}
const devirtbounce.1: ref;
axiom (devirtbounce.1 == $sub.ref(0, 570715));
procedure  devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.2: ref;
axiom (devirtbounce.2 == $sub.ref(0, 571747));
procedure  devirtbounce.2(funcPtr: ref, arg: ref)
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i47 := $eq.ref(igbvf_close, $p0);
  assume {:branchcond $i47} true;
  goto $bb20, $bb39;
$bb2:
  assume ($i29 == 1);
  $p1 := $bitcast.ref.ref(arg);
  call $i2 := igbvf_get_regs_len($p1);
  $r := $i2;
  $exn := false;
  return;
$bb3:
  assume ($i30 == 1);
  $p3 := $bitcast.ref.ref(arg);
  call $i4 := igbvf_get_msglevel($p3);
  $r := $i4;
  $exn := false;
  return;
$bb4:
  assume ($i31 == 1);
  $p5 := $bitcast.ref.ref(arg);
  call $i6 := igbvf_nway_reset($p5);
  $r := $i6;
  $exn := false;
  return;
$bb5:
  assume ($i32 == 1);
  $p7 := $bitcast.ref.ref(arg);
  call $i8 := ethtool_op_get_link($p7);
  $r := $i8;
  $exn := false;
  return;
$bb6:
  assume ($i33 == 1);
  $p9 := $bitcast.ref.ref(arg);
  call $i10 := igbvf_get_eeprom_len($p9);
  $r := $i10;
  $exn := false;
  return;
$bb7:
  assume ($i34 == 1);
  call $i11 := __builtinx_memcpy();
  $r := $i11;
  $exn := false;
  return;
$bb8:
  assume ($i35 == 1);
  $p12 := $bitcast.ref.ref(arg);
  call $i13 := igbvf_resume($p12);
  $r := $i13;
  $exn := false;
  return;
$bb9:
  assume ($i36 == 1);
  $p14 := $bitcast.ref.ref(arg);
  call $i15 := igbvf_io_slot_reset($p14);
  $r := $i15;
  $exn := false;
  return;
$bb10:
  assume ($i37 == 1);
  call $i16 := e1000_init_mac_params_vf(arg);
  $r := $i16;
  $exn := false;
  return;
$bb11:
  assume ($i38 == 1);
  call $i17 := e1000_init_mbx_params_vf(arg);
  $r := $i17;
  $exn := false;
  return;
$bb12:
  assume ($i39 == 1);
  call $i18 := e1000_check_for_msg_vf(arg);
  $r := $i18;
  $exn := false;
  return;
$bb13:
  assume ($i40 == 1);
  call $i19 := e1000_check_for_ack_vf(arg);
  $r := $i19;
  $exn := false;
  return;
$bb14:
  assume ($i41 == 1);
  call $i20 := e1000_check_for_rst_vf(arg);
  $r := $i20;
  $exn := false;
  return;
$bb15:
  assume ($i42 == 1);
  call $i21 := e1000_reset_hw_vf(arg);
  $r := $i21;
  $exn := false;
  return;
$bb16:
  assume ($i43 == 1);
  call $i22 := e1000_init_hw_vf(arg);
  $r := $i22;
  $exn := false;
  return;
$bb17:
  assume ($i44 == 1);
  call $i23 := e1000_check_for_link_vf(arg);
  $r := $i23;
  $exn := false;
  return;
$bb18:
  assume ($i45 == 1);
  call $i24 := e1000_read_mac_addr_vf(arg);
  $r := $i24;
  $exn := false;
  return;
$bb19:
  assume ($i46 == 1);
  $p25 := $bitcast.ref.ref(arg);
  call $i26 := igbvf_open($p25);
  $r := $i26;
  $exn := false;
  return;
$bb20:
  assume ($i47 == 1);
  $p27 := $bitcast.ref.ref(arg);
  call $i28 := igbvf_close($p27);
  $r := $i28;
  $exn := false;
  return;
$bb21:
  assume !(($i29 == 1));
  assume false;
$bb22:
  assume !(($i30 == 1));
  $i29 := $eq.ref(igbvf_get_regs_len, $p0);
  assume {:branchcond $i29} true;
  goto $bb2, $bb21;
$bb23:
  assume !(($i31 == 1));
  $i30 := $eq.ref(igbvf_get_msglevel, $p0);
  assume {:branchcond $i30} true;
  goto $bb3, $bb22;
$bb24:
  assume !(($i32 == 1));
  $i31 := $eq.ref(igbvf_nway_reset, $p0);
  assume {:branchcond $i31} true;
  goto $bb4, $bb23;
$bb25:
  assume !(($i33 == 1));
  $i32 := $eq.ref(ethtool_op_get_link, $p0);
  assume {:branchcond $i32} true;
  goto $bb5, $bb24;
$bb26:
  assume !(($i34 == 1));
  $i33 := $eq.ref(igbvf_get_eeprom_len, $p0);
  assume {:branchcond $i33} true;
  goto $bb6, $bb25;
$bb27:
  assume !(($i35 == 1));
  $i34 := $eq.ref(__builtinx_memcpy, $p0);
  assume {:branchcond $i34} true;
  goto $bb7, $bb26;
$bb28:
  assume !(($i36 == 1));
  $i35 := $eq.ref(igbvf_resume, $p0);
  assume {:branchcond $i35} true;
  goto $bb8, $bb27;
$bb29:
  assume !(($i37 == 1));
  $i36 := $eq.ref(igbvf_io_slot_reset, $p0);
  assume {:branchcond $i36} true;
  goto $bb9, $bb28;
$bb30:
  assume !(($i38 == 1));
  $i37 := $eq.ref(e1000_init_mac_params_vf, $p0);
  assume {:branchcond $i37} true;
  goto $bb10, $bb29;
$bb31:
  assume !(($i39 == 1));
  $i38 := $eq.ref(e1000_init_mbx_params_vf, $p0);
  assume {:branchcond $i38} true;
  goto $bb11, $bb30;
$bb32:
  assume !(($i40 == 1));
  $i39 := $eq.ref(e1000_check_for_msg_vf, $p0);
  assume {:branchcond $i39} true;
  goto $bb12, $bb31;
$bb33:
  assume !(($i41 == 1));
  $i40 := $eq.ref(e1000_check_for_ack_vf, $p0);
  assume {:branchcond $i40} true;
  goto $bb13, $bb32;
$bb34:
  assume !(($i42 == 1));
  $i41 := $eq.ref(e1000_check_for_rst_vf, $p0);
  assume {:branchcond $i41} true;
  goto $bb14, $bb33;
$bb35:
  assume !(($i43 == 1));
  $i42 := $eq.ref(e1000_reset_hw_vf, $p0);
  assume {:branchcond $i42} true;
  goto $bb15, $bb34;
$bb36:
  assume !(($i44 == 1));
  $i43 := $eq.ref(e1000_init_hw_vf, $p0);
  assume {:branchcond $i43} true;
  goto $bb16, $bb35;
$bb37:
  assume !(($i45 == 1));
  $i44 := $eq.ref(e1000_check_for_link_vf, $p0);
  assume {:branchcond $i44} true;
  goto $bb17, $bb36;
$bb38:
  assume !(($i46 == 1));
  $i45 := $eq.ref(e1000_read_mac_addr_vf, $p0);
  assume {:branchcond $i45} true;
  goto $bb18, $bb37;
$bb39:
  assume !(($i47 == 1));
  $i46 := $eq.ref(igbvf_open, $p0);
  assume {:branchcond $i46} true;
  goto $bb19, $bb38;
}
const devirtbounce.3: ref;
axiom (devirtbounce.3 == $sub.ref(0, 572779));
procedure  devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.4: ref;
axiom (devirtbounce.4 == $sub.ref(0, 573811));
procedure  devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.5: ref;
axiom (devirtbounce.5 == $sub.ref(0, 574843));
procedure  devirtbounce.5(funcPtr: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.6: ref;
axiom (devirtbounce.6 == $sub.ref(0, 575875));
procedure  devirtbounce.6(funcPtr: ref, arg: i32, arg1: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.7: ref;
axiom (devirtbounce.7 == $sub.ref(0, 576907));
procedure  devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: i32)
{
  var $p0: ref;
  var $i1: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i1 := $eq.ref(e1000_update_mc_addr_list_vf, $p0);
  assume {:branchcond $i1} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i1 == 1);
  call e1000_update_mc_addr_list_vf(arg, arg1, arg2, arg3, arg4);
  $exn := false;
  return;
$bb3:
  assume !(($i1 == 1));
  assume false;
}
const devirtbounce.8: ref;
axiom (devirtbounce.8 == $sub.ref(0, 577939));
procedure  devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref)
  returns ($r: i64)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.9: ref;
axiom (devirtbounce.9 == $sub.ref(0, 578971));
procedure  devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64)
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i5 := $eq.ref(igbvf_set_features, $p0);
  assume {:branchcond $i5} true;
  goto $bb3, $bb5;
$bb2:
  assume ($i4 == 1);
  call $i1 := __builtinx_memcpy();
  $r := $i1;
  $exn := false;
  return;
$bb3:
  assume ($i5 == 1);
  $p2 := $bitcast.ref.ref(arg);
  call $i3 := igbvf_set_features($p2, arg1);
  $r := $i3;
  $exn := false;
  return;
$bb4:
  assume !(($i4 == 1));
  assume false;
$bb5:
  assume !(($i5 == 1));
  $i4 := $eq.ref(__builtinx_memcpy, $p0);
  assume {:branchcond $i4} true;
  goto $bb2, $bb4;
}
const devirtbounce.10: ref;
axiom (devirtbounce.10 == $sub.ref(0, 580003));
procedure  devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref, arg2: i16)
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i15 := $eq.ref(igbvf_ioctl, $p0);
  assume {:branchcond $i15} true;
  goto $bb7, $bb13;
$bb2:
  assume ($i10 == 1);
  call $i1 := __builtinx_memcpy();
  $r := $i1;
  $exn := false;
  return;
$bb3:
  assume ($i11 == 1);
  call $i2 := e1000_read_mbx_vf(arg, arg1, arg2);
  $r := $i2;
  $exn := false;
  return;
$bb4:
  assume ($i12 == 1);
  call $i3 := e1000_write_mbx_vf(arg, arg1, arg2);
  $r := $i3;
  $exn := false;
  return;
$bb5:
  assume ($i13 == 1);
  call $i4 := e1000_read_posted_mbx(arg, arg1, arg2);
  $r := $i4;
  $exn := false;
  return;
$bb6:
  assume ($i14 == 1);
  call $i5 := e1000_write_posted_mbx(arg, arg1, arg2);
  $r := $i5;
  $exn := false;
  return;
$bb7:
  assume ($i15 == 1);
  $p6 := $bitcast.ref.ref(arg);
  $p7 := $bitcast.ref.ref(arg1);
  $i8 := $zext.i16.i32(arg2);
  call $i9 := igbvf_ioctl($p6, $p7, $i8);
  $r := $i9;
  $exn := false;
  return;
$bb8:
  assume !(($i10 == 1));
  assume false;
$bb9:
  assume !(($i11 == 1));
  $i10 := $eq.ref(__builtinx_memcpy, $p0);
  assume {:branchcond $i10} true;
  goto $bb2, $bb8;
$bb10:
  assume !(($i12 == 1));
  $i11 := $eq.ref(e1000_read_mbx_vf, $p0);
  assume {:branchcond $i11} true;
  goto $bb3, $bb9;
$bb11:
  assume !(($i13 == 1));
  $i12 := $eq.ref(e1000_write_mbx_vf, $p0);
  assume {:branchcond $i12} true;
  goto $bb4, $bb10;
$bb12:
  assume !(($i14 == 1));
  $i13 := $eq.ref(e1000_read_posted_mbx, $p0);
  assume {:branchcond $i13} true;
  goto $bb5, $bb11;
$bb13:
  assume !(($i15 == 1));
  $i14 := $eq.ref(e1000_write_posted_mbx, $p0);
  assume {:branchcond $i14} true;
  goto $bb6, $bb12;
}
const devirtbounce.11: ref;
axiom (devirtbounce.11 == $sub.ref(0, 581035));
procedure  devirtbounce.11(funcPtr: ref, arg: ref, arg1: i16, arg2: i1)
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i12 := $eq.ref(igbvf_vlan_rx_kill_vid, $p0);
  assume {:branchcond $i12} true;
  goto $bb5, $bb9;
$bb2:
  assume ($i9 == 1);
  call $i1 := __builtinx_memcpy();
  $r := $i1;
  $exn := false;
  return;
$bb3:
  assume ($i10 == 1);
  $p2 := $bitcast.ref.ref(arg);
  $i3 := $zext.i1.i16(arg2);
  call $i4 := igbvf_vlan_rx_add_vid($p2, arg1, $i3);
  $r := $i4;
  $exn := false;
  return;
$bb4:
  assume ($i11 == 1);
  call $i5 := e1000_set_vfta_vf(arg, arg1, arg2);
  $r := $i5;
  $exn := false;
  return;
$bb5:
  assume ($i12 == 1);
  $p6 := $bitcast.ref.ref(arg);
  $i7 := $zext.i1.i16(arg2);
  call $i8 := igbvf_vlan_rx_kill_vid($p6, arg1, $i7);
  $r := $i8;
  $exn := false;
  return;
$bb6:
  assume !(($i9 == 1));
  assume false;
$bb7:
  assume !(($i10 == 1));
  $i9 := $eq.ref(__builtinx_memcpy, $p0);
  assume {:branchcond $i9} true;
  goto $bb2, $bb6;
$bb8:
  assume !(($i11 == 1));
  $i10 := $eq.ref(igbvf_vlan_rx_add_vid, $p0);
  assume {:branchcond $i10} true;
  goto $bb3, $bb7;
$bb9:
  assume !(($i12 == 1));
  $i11 := $eq.ref(e1000_set_vfta_vf, $p0);
  assume {:branchcond $i11} true;
  goto $bb4, $bb8;
}
const devirtbounce.12: ref;
axiom (devirtbounce.12 == $sub.ref(0, 582067));
procedure  devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.13: ref;
axiom (devirtbounce.13 == $sub.ref(0, 583099));
procedure  devirtbounce.13(funcPtr: ref, arg: i64, arg1: ref, arg2: i32)
  returns ($r: i64)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.14: ref;
axiom (devirtbounce.14 == $sub.ref(0, 584131));
procedure  devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.15: ref;
axiom (devirtbounce.15 == $sub.ref(0, 585163));
procedure  devirtbounce.15(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref)
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.16: ref;
axiom (devirtbounce.16 == $sub.ref(0, 586195));
procedure  devirtbounce.16(funcPtr: ref, arg: ref)
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i56 := $eq.ref(igbvf_close, $p0);
  assume {:branchcond $i56} true;
  goto $bb20, $bb39;
$bb2:
  assume ($i38 == 1);
  $p1 := $bitcast.ref.ref(arg);
  call $i2 := igbvf_get_regs_len($p1);
  $r := $i2;
  $exn := false;
  return;
$bb3:
  assume ($i39 == 1);
  $p3 := $bitcast.ref.ref(arg);
  call $i4 := igbvf_get_msglevel($p3);
  $r := $i4;
  $exn := false;
  return;
$bb4:
  assume ($i40 == 1);
  $p5 := $bitcast.ref.ref(arg);
  call $i6 := igbvf_nway_reset($p5);
  $r := $i6;
  $exn := false;
  return;
$bb5:
  assume ($i41 == 1);
  $p7 := $bitcast.ref.ref(arg);
  call $i8 := ethtool_op_get_link($p7);
  $r := $i8;
  $exn := false;
  return;
$bb6:
  assume ($i42 == 1);
  $p9 := $bitcast.ref.ref(arg);
  call $i10 := igbvf_get_eeprom_len($p9);
  $r := $i10;
  $exn := false;
  return;
$bb7:
  assume ($i43 == 1);
  call $i11 := __builtinx_memcpy();
  $r := $i11;
  $exn := false;
  return;
$bb8:
  assume ($i44 == 1);
  $p12 := $bitcast.ref.ref(arg);
  call $i13 := igbvf_resume($p12);
  $r := $i13;
  $exn := false;
  return;
$bb9:
  assume ($i45 == 1);
  $p14 := $bitcast.ref.ref(arg);
  call $i15 := igbvf_io_slot_reset($p14);
  $r := $i15;
  $exn := false;
  return;
$bb10:
  assume ($i46 == 1);
  $p16 := $bitcast.ref.ref(arg);
  call $i17 := e1000_init_mac_params_vf($p16);
  $r := $i17;
  $exn := false;
  return;
$bb11:
  assume ($i47 == 1);
  $p18 := $bitcast.ref.ref(arg);
  call $i19 := e1000_init_mbx_params_vf($p18);
  $r := $i19;
  $exn := false;
  return;
$bb12:
  assume ($i48 == 1);
  $p20 := $bitcast.ref.ref(arg);
  call $i21 := e1000_check_for_msg_vf($p20);
  $r := $i21;
  $exn := false;
  return;
$bb13:
  assume ($i49 == 1);
  $p22 := $bitcast.ref.ref(arg);
  call $i23 := e1000_check_for_ack_vf($p22);
  $r := $i23;
  $exn := false;
  return;
$bb14:
  assume ($i50 == 1);
  $p24 := $bitcast.ref.ref(arg);
  call $i25 := e1000_check_for_rst_vf($p24);
  $r := $i25;
  $exn := false;
  return;
$bb15:
  assume ($i51 == 1);
  $p26 := $bitcast.ref.ref(arg);
  call $i27 := e1000_reset_hw_vf($p26);
  $r := $i27;
  $exn := false;
  return;
$bb16:
  assume ($i52 == 1);
  $p28 := $bitcast.ref.ref(arg);
  call $i29 := e1000_init_hw_vf($p28);
  $r := $i29;
  $exn := false;
  return;
$bb17:
  assume ($i53 == 1);
  $p30 := $bitcast.ref.ref(arg);
  call $i31 := e1000_check_for_link_vf($p30);
  $r := $i31;
  $exn := false;
  return;
$bb18:
  assume ($i54 == 1);
  $p32 := $bitcast.ref.ref(arg);
  call $i33 := e1000_read_mac_addr_vf($p32);
  $r := $i33;
  $exn := false;
  return;
$bb19:
  assume ($i55 == 1);
  $p34 := $bitcast.ref.ref(arg);
  call $i35 := igbvf_open($p34);
  $r := $i35;
  $exn := false;
  return;
$bb20:
  assume ($i56 == 1);
  $p36 := $bitcast.ref.ref(arg);
  call $i37 := igbvf_close($p36);
  $r := $i37;
  $exn := false;
  return;
$bb21:
  assume !(($i38 == 1));
  assume false;
$bb22:
  assume !(($i39 == 1));
  $i38 := $eq.ref(igbvf_get_regs_len, $p0);
  assume {:branchcond $i38} true;
  goto $bb2, $bb21;
$bb23:
  assume !(($i40 == 1));
  $i39 := $eq.ref(igbvf_get_msglevel, $p0);
  assume {:branchcond $i39} true;
  goto $bb3, $bb22;
$bb24:
  assume !(($i41 == 1));
  $i40 := $eq.ref(igbvf_nway_reset, $p0);
  assume {:branchcond $i40} true;
  goto $bb4, $bb23;
$bb25:
  assume !(($i42 == 1));
  $i41 := $eq.ref(ethtool_op_get_link, $p0);
  assume {:branchcond $i41} true;
  goto $bb5, $bb24;
$bb26:
  assume !(($i43 == 1));
  $i42 := $eq.ref(igbvf_get_eeprom_len, $p0);
  assume {:branchcond $i42} true;
  goto $bb6, $bb25;
$bb27:
  assume !(($i44 == 1));
  $i43 := $eq.ref(__builtinx_memcpy, $p0);
  assume {:branchcond $i43} true;
  goto $bb7, $bb26;
$bb28:
  assume !(($i45 == 1));
  $i44 := $eq.ref(igbvf_resume, $p0);
  assume {:branchcond $i44} true;
  goto $bb8, $bb27;
$bb29:
  assume !(($i46 == 1));
  $i45 := $eq.ref(igbvf_io_slot_reset, $p0);
  assume {:branchcond $i45} true;
  goto $bb9, $bb28;
$bb30:
  assume !(($i47 == 1));
  $i46 := $eq.ref(e1000_init_mac_params_vf, $p0);
  assume {:branchcond $i46} true;
  goto $bb10, $bb29;
$bb31:
  assume !(($i48 == 1));
  $i47 := $eq.ref(e1000_init_mbx_params_vf, $p0);
  assume {:branchcond $i47} true;
  goto $bb11, $bb30;
$bb32:
  assume !(($i49 == 1));
  $i48 := $eq.ref(e1000_check_for_msg_vf, $p0);
  assume {:branchcond $i48} true;
  goto $bb12, $bb31;
$bb33:
  assume !(($i50 == 1));
  $i49 := $eq.ref(e1000_check_for_ack_vf, $p0);
  assume {:branchcond $i49} true;
  goto $bb13, $bb32;
$bb34:
  assume !(($i51 == 1));
  $i50 := $eq.ref(e1000_check_for_rst_vf, $p0);
  assume {:branchcond $i50} true;
  goto $bb14, $bb33;
$bb35:
  assume !(($i52 == 1));
  $i51 := $eq.ref(e1000_reset_hw_vf, $p0);
  assume {:branchcond $i51} true;
  goto $bb15, $bb34;
$bb36:
  assume !(($i53 == 1));
  $i52 := $eq.ref(e1000_init_hw_vf, $p0);
  assume {:branchcond $i52} true;
  goto $bb16, $bb35;
$bb37:
  assume !(($i54 == 1));
  $i53 := $eq.ref(e1000_check_for_link_vf, $p0);
  assume {:branchcond $i53} true;
  goto $bb17, $bb36;
$bb38:
  assume !(($i55 == 1));
  $i54 := $eq.ref(e1000_read_mac_addr_vf, $p0);
  assume {:branchcond $i54} true;
  goto $bb18, $bb37;
$bb39:
  assume !(($i56 == 1));
  $i55 := $eq.ref(igbvf_open, $p0);
  assume {:branchcond $i55} true;
  goto $bb19, $bb38;
}
const devirtbounce.17: ref;
axiom (devirtbounce.17 == $sub.ref(0, 587227));
procedure  devirtbounce.17(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i17 := $eq.ref(igbvf_netpoll, $p0);
  assume {:branchcond $i17} true;
  goto $bb10, $bb19;
$bb2:
  assume ($i9 == 1);
  $p1 := $bitcast.ref.ref(arg);
  call igbvf_set_multi($p1);
  $exn := false;
  return;
$bb3:
  assume ($i10 == 1);
  $p2 := $bitcast.ref.ref(arg);
  call igbvf_remove($p2);
  $exn := false;
  return;
$bb4:
  assume ($i11 == 1);
  $p3 := $bitcast.ref.ref(arg);
  call igbvf_shutdown($p3);
  $exn := false;
  return;
$bb5:
  assume ($i12 == 1);
  $p4 := $bitcast.ref.ref(arg);
  call igbvf_reset_task($p4);
  $exn := false;
  return;
$bb6:
  assume ($i13 == 1);
  $p5 := $bitcast.ref.ref(arg);
  call igbvf_watchdog_task($p5);
  $exn := false;
  return;
$bb7:
  assume ($i14 == 1);
  $p6 := $bitcast.ref.ref(arg);
  call igbvf_io_resume($p6);
  $exn := false;
  return;
$bb8:
  assume ($i15 == 1);
  call e1000_init_function_pointers_vf(arg);
  $exn := false;
  return;
$bb9:
  assume ($i16 == 1);
  $p7 := $bitcast.ref.ref(arg);
  call igbvf_tx_timeout($p7);
  $exn := false;
  return;
$bb10:
  assume ($i17 == 1);
  $p8 := $bitcast.ref.ref(arg);
  call igbvf_netpoll($p8);
  $exn := false;
  return;
$bb11:
  assume !(($i9 == 1));
  assume false;
$bb12:
  assume !(($i10 == 1));
  $i9 := $eq.ref(igbvf_set_multi, $p0);
  assume {:branchcond $i9} true;
  goto $bb2, $bb11;
$bb13:
  assume !(($i11 == 1));
  $i10 := $eq.ref(igbvf_remove, $p0);
  assume {:branchcond $i10} true;
  goto $bb3, $bb12;
$bb14:
  assume !(($i12 == 1));
  $i11 := $eq.ref(igbvf_shutdown, $p0);
  assume {:branchcond $i11} true;
  goto $bb4, $bb13;
$bb15:
  assume !(($i13 == 1));
  $i12 := $eq.ref(igbvf_reset_task, $p0);
  assume {:branchcond $i12} true;
  goto $bb5, $bb14;
$bb16:
  assume !(($i14 == 1));
  $i13 := $eq.ref(igbvf_watchdog_task, $p0);
  assume {:branchcond $i13} true;
  goto $bb6, $bb15;
$bb17:
  assume !(($i15 == 1));
  $i14 := $eq.ref(igbvf_io_resume, $p0);
  assume {:branchcond $i14} true;
  goto $bb7, $bb16;
$bb18:
  assume !(($i16 == 1));
  $i15 := $eq.ref(e1000_init_function_pointers_vf, $p0);
  assume {:branchcond $i15} true;
  goto $bb8, $bb17;
$bb19:
  assume !(($i17 == 1));
  $i16 := $eq.ref(igbvf_tx_timeout, $p0);
  assume {:branchcond $i16} true;
  goto $bb9, $bb18;
}
const devirtbounce.18: ref;
axiom (devirtbounce.18 == $sub.ref(0, 588259));
procedure  devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i14 := $eq.ref(e1000_get_link_up_info_vf, $p0);
  assume {:branchcond $i14} true;
  goto $bb5, $bb9;
$bb2:
  assume ($i11 == 1);
  $p1 := $bitcast.ref.ref(arg);
  $p2 := $bitcast.ref.ref(arg1);
  $p3 := $bitcast.ref.ref(arg2);
  call $i4 := igbvf_get_eeprom($p1, $p2, $p3);
  $r := $i4;
  $exn := false;
  return;
$bb3:
  assume ($i12 == 1);
  $p5 := $bitcast.ref.ref(arg);
  $p6 := $bitcast.ref.ref(arg1);
  $p7 := $bitcast.ref.ref(arg2);
  call $i8 := igbvf_set_eeprom($p5, $p6, $p7);
  $r := $i8;
  $exn := false;
  return;
$bb4:
  assume ($i13 == 1);
  call $i9 := __builtinx_memcpy();
  $r := $i9;
  $exn := false;
  return;
$bb5:
  assume ($i14 == 1);
  call $i10 := e1000_get_link_up_info_vf(arg, arg1, arg2);
  $r := $i10;
  $exn := false;
  return;
$bb6:
  assume !(($i11 == 1));
  assume false;
$bb7:
  assume !(($i12 == 1));
  $i11 := $eq.ref(igbvf_get_eeprom, $p0);
  assume {:branchcond $i11} true;
  goto $bb2, $bb6;
$bb8:
  assume !(($i13 == 1));
  $i12 := $eq.ref(igbvf_set_eeprom, $p0);
  assume {:branchcond $i12} true;
  goto $bb3, $bb7;
$bb9:
  assume !(($i14 == 1));
  $i13 := $eq.ref(__builtinx_memcpy, $p0);
  assume {:branchcond $i13} true;
  goto $bb4, $bb8;
}
const devirtbounce.19: ref;
axiom (devirtbounce.19 == $sub.ref(0, 589291));
procedure  devirtbounce.19(funcPtr: ref, arg: ref, arg1: i64)
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i5 := $eq.ref(igbvf_set_features, $p0);
  assume {:branchcond $i5} true;
  goto $bb3, $bb5;
$bb2:
  assume ($i4 == 1);
  call $i1 := __builtinx_memcpy();
  $r := $i1;
  $exn := false;
  return;
$bb3:
  assume ($i5 == 1);
  $p2 := $bitcast.ref.ref(arg);
  call $i3 := igbvf_set_features($p2, arg1);
  $r := $i3;
  $exn := false;
  return;
$bb4:
  assume !(($i4 == 1));
  assume false;
$bb5:
  assume !(($i5 == 1));
  $i4 := $eq.ref(__builtinx_memcpy, $p0);
  assume {:branchcond $i4} true;
  goto $bb2, $bb4;
}
const devirtbounce.20: ref;
axiom (devirtbounce.20 == $sub.ref(0, 590323));
procedure  devirtbounce.20(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i12 := $eq.ref(igbvf_get_pauseparam, $p0);
  assume {:branchcond $i12} true;
  goto $bb5, $bb9;
$bb2:
  assume ($i9 == 1);
  $p1 := $bitcast.ref.ref(arg);
  $p2 := $bitcast.ref.ref(arg1);
  call igbvf_get_drvinfo($p1, $p2);
  $exn := false;
  return;
$bb3:
  assume ($i10 == 1);
  $p3 := $bitcast.ref.ref(arg);
  $p4 := $bitcast.ref.ref(arg1);
  call igbvf_get_wol($p3, $p4);
  $exn := false;
  return;
$bb4:
  assume ($i11 == 1);
  $p5 := $bitcast.ref.ref(arg);
  $p6 := $bitcast.ref.ref(arg1);
  call igbvf_get_ringparam($p5, $p6);
  $exn := false;
  return;
$bb5:
  assume ($i12 == 1);
  $p7 := $bitcast.ref.ref(arg);
  $p8 := $bitcast.ref.ref(arg1);
  call igbvf_get_pauseparam($p7, $p8);
  $exn := false;
  return;
$bb6:
  assume !(($i9 == 1));
  assume false;
$bb7:
  assume !(($i10 == 1));
  $i9 := $eq.ref(igbvf_get_drvinfo, $p0);
  assume {:branchcond $i9} true;
  goto $bb2, $bb6;
$bb8:
  assume !(($i11 == 1));
  $i10 := $eq.ref(igbvf_get_wol, $p0);
  assume {:branchcond $i10} true;
  goto $bb3, $bb7;
$bb9:
  assume !(($i12 == 1));
  $i11 := $eq.ref(igbvf_get_ringparam, $p0);
  assume {:branchcond $i11} true;
  goto $bb4, $bb8;
}
const devirtbounce.21: ref;
axiom (devirtbounce.21 == $sub.ref(0, 591355));
procedure  devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref, arg2: i32)
{
  var $p0: ref;
  var $i1: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i1 := $eq.ref(e1000_rar_set_vf, $p0);
  assume {:branchcond $i1} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i1 == 1);
  call e1000_rar_set_vf(arg, arg1, arg2);
  $exn := false;
  return;
$bb3:
  assume !(($i1 == 1));
  assume false;
}
const devirtbounce.22: ref;
axiom (devirtbounce.22 == $sub.ref(0, 592387));
procedure  devirtbounce.22(funcPtr: ref, arg: i32, arg1: i32, arg2: i32, arg3: i32)
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i2 := $eq.ref(__builtinx_memcpy, $p0);
  assume {:branchcond $i2} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i2 == 1);
  call $i1 := __builtinx_memcpy();
  $r := $i1;
  $exn := false;
  return;
$bb3:
  assume !(($i2 == 1));
  assume false;
}
const devirtbounce.23: ref;
axiom (devirtbounce.23 == $sub.ref(0, 593419));
procedure  devirtbounce.23(funcPtr: ref, arg: i32, arg1: i32)
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i2 := $eq.ref(__builtinx_memcpy, $p0);
  assume {:branchcond $i2} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i2 == 1);
  call $i1 := __builtinx_memcpy();
  $r := $i1;
  $exn := false;
  return;
$bb3:
  assume !(($i2 == 1));
  assume false;
}
procedure  $memcpy.i8(M.dst: [ref] i8, M.src: [ref] i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src,dst),x)]);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M.dst[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M.dst[x]);
}

procedure  $memset.i8(M: [ref] i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == val);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M[x]);
}

const $u0: i32;
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
