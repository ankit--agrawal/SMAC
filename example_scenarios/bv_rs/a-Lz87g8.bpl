// generated by SMACK version 1.9.0 for svcomp
// via /mnt/local/smack-project/smack/bin/smack -x=svcomp --verifier=svcomp --clang-options=-m64 /proj/SMACK/sv-benchmarks/c/bitvector/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil.c --verifier-options=/bopt:boolControlVC /bopt:coalesceBlocks:1 /bopt:liveVariableAnalysis:1 /bopt:removeEmptyBlocks:0 /bopt:subsumption:1 /bopt:typeEncoding:a /bopt:vc:l /bopt:z3lets:2 /bopt:z3opt:NNF.SK_HACK=false /bopt:z3opt:SMT.ARITH.RANDOM_INITIAL_VALUE=true /bopt:z3opt:SMT.ARRAY.EXTENSIONAL=false /bopt:z3opt:SMT.ARRAY.WEAK=false /bopt:z3opt:SMT.BV.REFLECT=false /bopt:z3opt:SMT.CASE_SPLIT=3 /bopt:z3opt:SMT.DELAY_UNITS=false /bopt:z3opt:SMT.MBQI=true /bopt:z3opt:SMT.MBQI.MAX_ITERATIONS=32353 /bopt:z3opt:SMT.PHASE_SELECTION=6 /bopt:z3opt:SMT.QI.EAGER_THRESHOLD=105 /bopt:z3opt:SMT.RELEVANCY=2 /bopt:z3opt:SMT.RESTART_FACTOR=3.2571769379298345 /bopt:z3opt:SMT.RESTART_STRATEGY=3 /bopt:z3types /deepAsserts /doNotUseLabels /noCallTreeReuse /noInitPruning /useArrayTheory

// Basic types
type i1 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i80 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type ref = bv64;
type float;

// Basic constants
const $0: bv32;
axiom ($0 == 0bv32);
const $1: bv32;
axiom ($1 == 1bv32);
const $0.ref: ref;
axiom ($0.ref == 0bv64);
const $1.ref: ref;
axiom ($1.ref == 1bv64);
const $2.ref: ref;
axiom ($2.ref == 2bv64);
const $3.ref: ref;
axiom ($3.ref == 3bv64);
const $4.ref: ref;
axiom ($4.ref == 4bv64);
const $5.ref: ref;
axiom ($5.ref == 5bv64);
const $6.ref: ref;
axiom ($6.ref == 6bv64);
const $7.ref: ref;
axiom ($7.ref == 7bv64);
const $8.ref: ref;
axiom ($8.ref == 8bv64);
const $9.ref: ref;
axiom ($9.ref == 9bv64);
const $10.ref: ref;
axiom ($10.ref == 10bv64);
const $11.ref: ref;
axiom ($11.ref == 11bv64);
const $12.ref: ref;
axiom ($12.ref == 12bv64);
const $13.ref: ref;
axiom ($13.ref == 13bv64);
const $14.ref: ref;
axiom ($14.ref == 14bv64);
const $1024.ref: ref;
axiom ($1024.ref == 1024bv64);

// Memory maps (0 regions)

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0bv64, 40254bv64));
axiom ($EXTERNS_BOTTOM == $sub.ref(0bv64, 32768bv64));
axiom ($MALLOC_TOP == 9223372036854775807bv64);

// Bitstd::vector-integer conversions
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2int"} $bv2uint.64(i: bv64) returns (i64);
function {:inline} $bv2int.64(i: bv64) returns (i64) { (if $slt.bv64.bool(i, 0bv64) then $sub.i64($bv2uint.64(i), 18446744073709551616) else $bv2uint.64(i)) }
// Bytewise pointer storage
function {:inline} $load.bytes.ref(M: [ref] bv8, p: ref) returns (ref) { $i2p.bv64.ref($load.bytes.bv64(M, p)) }
function {:inline} $store.bytes.ref(M: [ref] bv8, p: ref, v: ref)returns ([ref] bv8) { $store.bytes.bv64(M,p,$p2i.ref.bv64(v)) }
// Pointer-number conversions
function {:inline} $p2i.ref.bv8(p: ref) returns (bv8) { $trunc.bv64.bv8(p) }
function {:inline} $i2p.bv8.ref(i: bv8) returns (ref) { $zext.bv8.bv64(i) }
function {:inline} $p2i.ref.bv16(p: ref) returns (bv16) { $trunc.bv64.bv16(p) }
function {:inline} $i2p.bv16.ref(i: bv16) returns (ref) { $zext.bv16.bv64(i) }
function {:inline} $p2i.ref.bv32(p: ref) returns (bv32) { $trunc.bv64.bv32(p) }
function {:inline} $i2p.bv32.ref(i: bv32) returns (ref) { $zext.bv32.bv64(i) }
function {:inline} $p2i.ref.bv64(p: ref) returns (bv64) { p }
function {:inline} $i2p.bv64.ref(i: bv64) returns (ref) { i }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (bv1) { (if $eq.bv64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.bv64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (bv1) { (if $ne.bv64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.bv64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (bv1) { (if $ugt.bv64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.bv64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (bv1) { (if $uge.bv64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.bv64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (bv1) { (if $ult.bv64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.bv64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (bv1) { (if $ule.bv64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.bv64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (bv1) { (if $sgt.bv64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.bv64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (bv1) { (if $sge.bv64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.bv64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (bv1) { (if $slt.bv64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.bv64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (bv1) { (if $sle.bv64.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.bv64.bool(p1, p2) }

// Pointer operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.bv64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.bv64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.bv64(p1, p2) }

const {:count 14} .str.3: ref;
axiom (.str.3 == $sub.ref(0bv64, 1038bv64));
const ssl3_accept: ref;
axiom (ssl3_accept == $sub.ref(0bv64, 2070bv64));
procedure  ssl3_accept($i0: bv32)
  returns ($r: bv32)
{
  var $i1: bv32;
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv32;
  var $i6: bv32;
  var $i7: bv32;
  var $i8: bv32;
  var $i9: bv32;
  var $i10: bv32;
  var $i11: bv32;
  var $i12: bv32;
  var $i13: bv32;
  var $i14: bv32;
  var $i15: bv32;
  var $i16: bv32;
  var $i17: bv32;
  var $i18: bv32;
  var $i19: bv32;
  var $i20: bv32;
  var $i21: bv32;
  var $i22: bv32;
  var $i23: bv64;
  var $i24: bv32;
  var $i25: bv32;
  var $i26: bv32;
  var $i27: bv1;
  var $i29: bv1;
  var $i30: bv32;
  var $i28: bv32;
  var $i31: bv32;
  var $i32: bv1;
  var $i33: bv32;
  var $i34: bv1;
  var $i35: bv1;
  var $i37: bv32;
  var $i38: bv32;
  var $i39: bv32;
  var $i40: bv64;
  var $i41: bv32;
  var $i42: bv32;
  var $i43: bv32;
  var $i44: bv32;
  var $i45: bv1;
  var $i46: bv1;
  var $i47: bv1;
  var $i48: bv1;
  var $i49: bv1;
  var $i50: bv1;
  var $i51: bv1;
  var $i52: bv1;
  var $i53: bv1;
  var $i54: bv1;
  var $i55: bv1;
  var $i56: bv1;
  var $i57: bv1;
  var $i58: bv1;
  var $i59: bv1;
  var $i60: bv1;
  var $i61: bv1;
  var $i62: bv1;
  var $i63: bv1;
  var $i64: bv1;
  var $i65: bv1;
  var $i66: bv1;
  var $i67: bv1;
  var $i68: bv1;
  var $i69: bv1;
  var $i70: bv1;
  var $i71: bv1;
  var $i72: bv1;
  var $i73: bv1;
  var $i74: bv1;
  var $i75: bv1;
  var $i76: bv1;
  var $i77: bv1;
  var $i78: bv1;
  var $i79: bv32;
  var $i80: bv32;
  var $i81: bv1;
  var $i82: bv1;
  var $i83: bv32;
  var $i84: bv1;
  var $i85: bv1;
  var $i86: bv32;
  var $i87: bv1;
  var $i89: bv1;
  var $i90: bv32;
  var $i91: bv1;
  var $i92: bv1;
  var $i93: bv1;
  var $i94: bv32;
  var $i98: bv32;
  var $i95: bv32;
  var $i96: bv32;
  var $i97: bv32;
  var $i108: bv32;
  var $i109: bv1;
  var $i110: bv32;
  var $i111: bv32;
  var $i112: bv1;
  var $i113: bv32;
  var $i114: bv1;
  var $i115: bv32;
  var $i116: bv32;
  var $i117: bv1;
  var $i118: bv32;
  var $i119: bv1;
  var $i120: bv32;
  var $i121: bv1;
  var $i122: bv32;
  var $i123: bv64;
  var $i124: bv64;
  var $i125: bv1;
  var $i127: bv32;
  var $i128: bv1;
  var $i129: bv32;
  var $i126: bv32;
  var $i130: bv64;
  var $i131: bv64;
  var $i132: bv64;
  var $i133: bv1;
  var $i134: bv32;
  var $i135: bv1;
  var $i136: bv64;
  var $i137: bv1;
  var $i138: bv64;
  var $i139: bv1;
  var $i140: bv1;
  var $i141: bv64;
  var $i142: bv64;
  var $i143: bv1;
  var $i144: bv64;
  var $i145: bv64;
  var $i146: bv1;
  var $i147: bv32;
  var $i148: bv1;
  var $i149: bv32;
  var $i150: bv32;
  var $i151: bv1;
  var $i152: bv32;
  var $i153: bv1;
  var $i154: bv32;
  var $i155: bv32;
  var $i156: bv32;
  var $i157: bv32;
  var $i158: bv32;
  var $i159: bv1;
  var $i160: bv1;
  var $i161: bv32;
  var $i162: bv1;
  var $i166: bv64;
  var $i167: bv64;
  var $i168: bv1;
  var $i169: bv32;
  var $i170: bv1;
  var $i174: bv32;
  var $i175: bv1;
  var $i176: bv32;
  var $i171: bv32;
  var $i172: bv32;
  var $i173: bv32;
  var $i163: bv32;
  var $i164: bv32;
  var $i165: bv32;
  var $i177: bv32;
  var $i178: bv32;
  var $i179: bv32;
  var $i180: bv32;
  var $i181: bv1;
  var $i182: bv32;
  var $i183: bv1;
  var $i184: bv1;
  var $i185: bv64;
  var $i186: bv32;
  var $i187: bv1;
  var $i188: bv32;
  var $i189: bv1;
  var $i191: bv32;
  var $i192: bv1;
  var $i193: bv32;
  var $i190: bv32;
  var $i194: bv32;
  var $i195: bv1;
  var $i196: bv32;
  var $i197: bv32;
  var $i198: bv1;
  var $i199: bv32;
  var $i200: bv32;
  var $i201: bv1;
  var $i202: bv32;
  var $i203: bv32;
  var $i204: bv32;
  var $i205: bv1;
  var $i206: bv32;
  var $i207: bv1;
  var $i208: bv32;
  var $i209: bv1;
  var $i210: bv32;
  var $i211: bv1;
  var $i212: bv32;
  var $i213: bv1;
  var $i214: bv32;
  var $i215: bv1;
  var $i216: bv32;
  var $i217: bv1;
  var $i218: bv1;
  var $i219: bv32;
  var $i220: bv1;
  var $i221: bv32;
  var $i222: bv1;
  var $i223: bv1;
  var $i99: bv32;
  var $i100: bv32;
  var $i101: bv32;
  var $i102: bv64;
  var $i103: bv32;
  var $i104: bv32;
  var $i105: bv32;
  var $i106: bv32;
  var $i107: bv32;
  var $i224: bv1;
  var $i225: bv1;
  var $i226: bv1;
  var $i227: bv32;
  var $i228: bv1;
  var $i229: bv32;
  var $i230: bv1;
  var $i231: bv1;
  var $i88: bv32;
  var $i232: bv1;
  var $i36: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 9, 27} true;
  assume {:verifier.code 1} true;
  call {:cexpr "ssl3_accept:arg:initial_state"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 9, 27} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
  // WARNING: %2 = call i32 @__VERIFIER_nondet_int(), !dbg !20, !verifier.code !21
  call {:cexpr "s__info_callback"} boogie_si_record_bv32($i1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 10, 26} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i2);
  // WARNING: %3 = call i32 @__VERIFIER_nondet_int(), !dbg !24, !verifier.code !21
  call {:cexpr "s__in_handshake"} boogie_si_record_bv32($i2);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 14, 21} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i3);
  // WARNING: %4 = call i32 @__VERIFIER_nondet_int(), !dbg !27, !verifier.code !21
  call {:cexpr "s__version"} boogie_si_record_bv32($i3);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 17, 17} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i4);
  // WARNING: %5 = call i32 @__VERIFIER_nondet_int(), !dbg !30, !verifier.code !21
  call {:cexpr "s__hit"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 20, 19} true;
  assume {:verifier.code 1} true;
  call $i5 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i5);
  // WARNING: %6 = call i32 @__VERIFIER_nondet_int(), !dbg !33, !verifier.code !21
  call {:cexpr "s__debug"} boogie_si_record_bv32($i5);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 22, 18} true;
  assume {:verifier.code 1} true;
  call $i6 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i6);
  // WARNING: %7 = call i32 @__VERIFIER_nondet_int(), !dbg !36, !verifier.code !21
  call {:cexpr "s__cert"} boogie_si_record_bv32($i6);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 23, 21} true;
  assume {:verifier.code 1} true;
  call $i7 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i7);
  // WARNING: %8 = call i32 @__VERIFIER_nondet_int(), !dbg !39, !verifier.code !21
  call {:cexpr "s__options"} boogie_si_record_bv32($i7);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 24, 25} true;
  assume {:verifier.code 1} true;
  call $i8 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i8);
  // WARNING: %9 = call i32 @__VERIFIER_nondet_int(), !dbg !42, !verifier.code !21
  call {:cexpr "s__verify_mode"} boogie_si_record_bv32($i8);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 25, 27} true;
  assume {:verifier.code 1} true;
  call $i9 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i9);
  // WARNING: %10 = call i32 @__VERIFIER_nondet_int(), !dbg !45, !verifier.code !21
  call {:cexpr "s__session__peer"} boogie_si_record_bv32($i9);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 26, 42} true;
  assume {:verifier.code 1} true;
  call $i10 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i10);
  // WARNING: %11 = call i32 @__VERIFIER_nondet_int(), !dbg !48, !verifier.code !21
  call {:cexpr "s__cert__pkeys__AT0__privatekey"} boogie_si_record_bv32($i10);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 27, 32} true;
  assume {:verifier.code 1} true;
  call $i11 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i11);
  // WARNING: %12 = call i32 @__VERIFIER_nondet_int(), !dbg !51, !verifier.code !21
  call {:cexpr "s__ctx__info_callback"} boogie_si_record_bv32($i11);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 30, 42} true;
  assume {:verifier.code 1} true;
  call $i12 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i12);
  // WARNING: %13 = call i32 @__VERIFIER_nondet_int(), !dbg !54, !verifier.code !21
  call {:cexpr "s__ctx__stats__sess_accept_good"} boogie_si_record_bv32($i12);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 32, 36} true;
  assume {:verifier.code 1} true;
  call $i13 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i13);
  // WARNING: %14 = call i32 @__VERIFIER_nondet_int(), !dbg !57, !verifier.code !21
  call {:cexpr "s__s3__tmp__reuse_message"} boogie_si_record_bv32($i13);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 34, 33} true;
  assume {:verifier.code 1} true;
  call $i14 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i14);
  // WARNING: %15 = call i32 @__VERIFIER_nondet_int(), !dbg !60, !verifier.code !21
  call {:cexpr "s__s3__tmp__new_cipher"} boogie_si_record_bv32($i14);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 35, 45} true;
  assume {:verifier.code 1} true;
  call $i15 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i15);
  // WARNING: %16 = call i32 @__VERIFIER_nondet_int(), !dbg !63, !verifier.code !21
  call {:cexpr "s__s3__tmp__new_cipher__algorithms"} boogie_si_record_bv32($i15);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 37, 48} true;
  assume {:verifier.code 1} true;
  call $i16 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i16);
  // WARNING: %17 = call i32 @__VERIFIER_nondet_int(), !dbg !66, !verifier.code !21
  call {:cexpr "s__s3__tmp__new_cipher__algo_strength"} boogie_si_record_bv32($i16);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 50, 18} true;
  assume {:verifier.code 1} true;
  call $i17 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i17);
  // WARNING: %18 = call i32 @__VERIFIER_nondet_int(), !dbg !69, !verifier.code !21
  call {:cexpr "tmp___1"} boogie_si_record_bv32($i17);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 51, 18} true;
  assume {:verifier.code 1} true;
  call $i18 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i18);
  // WARNING: %19 = call i32 @__VERIFIER_nondet_int(), !dbg !72, !verifier.code !21
  call {:cexpr "tmp___2"} boogie_si_record_bv32($i18);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 52, 18} true;
  assume {:verifier.code 1} true;
  call $i19 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i19);
  // WARNING: %20 = call i32 @__VERIFIER_nondet_int(), !dbg !75, !verifier.code !21
  call {:cexpr "tmp___3"} boogie_si_record_bv32($i19);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 53, 18} true;
  assume {:verifier.code 1} true;
  call $i20 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i20);
  // WARNING: %21 = call i32 @__VERIFIER_nondet_int(), !dbg !78, !verifier.code !21
  call {:cexpr "tmp___4"} boogie_si_record_bv32($i20);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 54, 18} true;
  assume {:verifier.code 1} true;
  call $i21 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i21);
  // WARNING: %22 = call i32 @__VERIFIER_nondet_int(), !dbg !81, !verifier.code !21
  call {:cexpr "tmp___5"} boogie_si_record_bv32($i21);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 55, 18} true;
  assume {:verifier.code 1} true;
  call $i22 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i22);
  // WARNING: %23 = call i32 @__VERIFIER_nondet_int(), !dbg !84, !verifier.code !21
  call {:cexpr "tmp___6"} boogie_si_record_bv32($i22);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 57, 19} true;
  assume {:verifier.code 1} true;
  call $i23 := __VERIFIER_nondet_long();
  call {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_bv64($i23);
  // WARNING: %24 = call i64 @__VERIFIER_nondet_long(), !dbg !87, !verifier.code !21
  call {:cexpr "tmp___8"} boogie_si_record_bv64($i23);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 58, 18} true;
  assume {:verifier.code 1} true;
  call $i24 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i24);
  // WARNING: %25 = call i32 @__VERIFIER_nondet_int(), !dbg !91, !verifier.code !21
  call {:cexpr "tmp___9"} boogie_si_record_bv32($i24);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 59, 19} true;
  assume {:verifier.code 1} true;
  call $i25 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i25);
  // WARNING: %26 = call i32 @__VERIFIER_nondet_int(), !dbg !94, !verifier.code !21
  call {:cexpr "tmp___10"} boogie_si_record_bv32($i25);
  // WARNING: call void @llvm.dbg.value(metadata i32 %26, i64 0, metadata !95, metadata !17), !dbg !96, !verifier.code !19
  call {:cexpr "ssl3_accept:arg:s__state"} boogie_si_record_bv32($i0);
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !97, metadata !17), !dbg !98, !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 66, 9} true;
  assume {:verifier.code 1} true;
  call $i26 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i26);
  // WARNING: %27 = call i32 @__VERIFIER_nondet_int(), !dbg !101, !verifier.code !21
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !103, metadata !17), !dbg !104, !verifier.code !19
  // WARNING: call void @llvm.dbg.value(metadata i32 -1, i64 0, metadata !105, metadata !17), !dbg !106, !verifier.code !19
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !107, metadata !17), !dbg !108, !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 72, 24} true;
  assume {:verifier.code 0} true;
  $i27 := $ne.bv32($i1, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 72, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i27 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 74, 3} true;
  assume {:verifier.code 0} true;
  $i28 := $i1;
  goto $bb3;
$bb2:
  assume !(($i27 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 75, 31} true;
  assume {:verifier.code 0} true;
  $i29 := $ne.bv32($i11, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 75, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb4, $bb5;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 82, 15} true;
  assume {:verifier.code 0} true;
  $i31 := $and.bv32($i17, 12288bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 82, 15} true;
  assume {:verifier.code 0} true;
  $i32 := $ne.bv32($i31, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 82, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb7, $bb8;
$bb4:
  assume ($i29 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 77, 5} true;
  assume {:verifier.code 0} true;
  $i30 := $i11;
  goto $bb6;
$bb5:
  assume !(($i29 == 1bv1));
  assume {:verifier.code 0} true;
  $i30 := 0bv32;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i28 := $i30;
  goto $bb3;
$bb7:
  assume ($i32 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 83, 17} true;
  assume {:verifier.code 0} true;
  $i33 := $and.bv32($i18, 16384bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 83, 17} true;
  assume {:verifier.code 0} true;
  $i34 := $ne.bv32($i33, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 83, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb9, $bb10;
$bb8:
  assume !(($i32 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb9:
  assume ($i34 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 85, 5} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume !(($i34 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 88, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 91, 15} true;
  assume {:verifier.code 0} true;
  $i35 := $eq.bv32($i6, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 91, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i35 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 93, 5} true;
  assume {:verifier.code 0} true;
  $i36 := $sub.bv32(0bv32, 1bv32);
  goto $bb15;
$bb14:
  assume !(($i35 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 671, 3} true;
  assume {:verifier.code 0} true;
  $r := $i36;
  $exn := false;
  return;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 98, 3} true;
  assume {:verifier.code 0} true;
  $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44 := $u0, $u0, $u0, $u1, $u0, 0bv32, $i0, 0bv32;
  goto $bb17;
$bb17:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 98, 13} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 101, 18} true;
  assume {:verifier.code 0} true;
  $i45 := $eq.bv32($i43, 12292bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 101, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i45 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 102, 7} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume !(($i45 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 104, 20} true;
  assume {:verifier.code 0} true;
  $i46 := $eq.bv32($i43, 16384bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 104, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb22, $bb23;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 210, 77} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb22:
  assume ($i46 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 105, 9} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb23:
  assume !(($i46 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 107, 22} true;
  assume {:verifier.code 0} true;
  $i47 := $eq.bv32($i43, 8192bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 107, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i47} true;
  goto $bb25, $bb26;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 210, 77} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb25:
  assume ($i47 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 108, 11} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb26:
  assume !(($i47 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 110, 24} true;
  assume {:verifier.code 0} true;
  $i48 := $eq.bv32($i43, 24576bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 110, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i48} true;
  goto $bb28, $bb29;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 210, 77} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb28:
  assume ($i48 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 111, 13} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb29:
  assume !(($i48 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 113, 26} true;
  assume {:verifier.code 0} true;
  $i49 := $eq.bv32($i43, 8195bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 113, 17} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb31, $bb32;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 210, 77} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb31:
  assume ($i49 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 114, 15} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb32:
  assume !(($i49 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 116, 28} true;
  assume {:verifier.code 0} true;
  $i50 := $eq.bv32($i43, 8480bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 116, 19} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i50} true;
  goto $bb34, $bb35;
$bb33:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 216, 84} true;
  assume {:verifier.code 0} true;
  $i82 := $ne.bv32($i28, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 216, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i82} true;
  goto $bb128, $bb129;
$bb34:
  assume ($i50 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 117, 17} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb35:
  assume !(($i50 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 119, 30} true;
  assume {:verifier.code 0} true;
  $i51 := $eq.bv32($i43, 8481bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 119, 21} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i51} true;
  goto $bb37, $bb38;
$bb36:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 266, 77} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb37:
  assume ($i51 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 120, 19} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb38:
  assume !(($i51 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 122, 32} true;
  assume {:verifier.code 0} true;
  $i52 := $eq.bv32($i43, 8482bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 122, 23} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i52} true;
  goto $bb40, $bb41;
$bb39:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 270, 83} true;
  assume {:verifier.code 1} true;
  call $i108 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i108);
  // WARNING: %202 = call i32 @__VERIFIER_nondet_int(), !dbg !432, !verifier.code !21
  call {:cexpr "ret"} boogie_si_record_bv32($i108);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 271, 85} true;
  assume {:verifier.code 0} true;
  $i109 := $sle.bv32($i108, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 271, 81} true;
  assume {:verifier.code 0} true;
  $i110 := $i108;
  assume {:branchcond $i109} true;
  goto $bb154, $bb155;
$bb40:
  assume ($i52 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 123, 21} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb41:
  assume !(($i52 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 125, 34} true;
  assume {:verifier.code 0} true;
  $i53 := $eq.bv32($i43, 8464bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 125, 25} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i53} true;
  goto $bb43, $bb44;
$bb42:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 282, 77} true;
  assume {:verifier.code 0} true;
  $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107 := $i37, $i38, $i39, $i40, $i41, 0bv32, $i42, 3bv32, $i44;
  goto $bb153;
$bb43:
  assume ($i53 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 126, 23} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb44:
  assume !(($i53 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 128, 36} true;
  assume {:verifier.code 0} true;
  $i54 := $eq.bv32($i43, 8465bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 128, 27} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i54} true;
  goto $bb46, $bb47;
$bb45:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 282, 77} true;
  assume {:verifier.code 0} true;
  goto $bb48;
$bb46:
  assume ($i54 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 129, 25} true;
  assume {:verifier.code 0} true;
  goto $bb48;
$bb47:
  assume !(($i54 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 131, 38} true;
  assume {:verifier.code 0} true;
  $i55 := $eq.bv32($i43, 8466bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 131, 29} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i55} true;
  goto $bb49, $bb50;
$bb48:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 282, 77} true;
  assume {:verifier.code 0} true;
  goto $bb51;
$bb49:
  assume ($i55 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 132, 27} true;
  assume {:verifier.code 0} true;
  goto $bb51;
$bb50:
  assume !(($i55 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 134, 40} true;
  assume {:verifier.code 0} true;
  $i56 := $eq.bv32($i43, 8496bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 134, 31} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb52, $bb53;
$bb51:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 287, 83} true;
  assume {:verifier.code 1} true;
  call $i111 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i111);
  // WARNING: %211 = call i32 @__VERIFIER_nondet_int(), !dbg !444, !verifier.code !21
  call {:cexpr "ret"} boogie_si_record_bv32($i111);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 288, 91} true;
  assume {:verifier.code 0} true;
  $i112 := $eq.bv32($i44, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 288, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i112} true;
  goto $bb157, $bb158;
$bb52:
  assume ($i56 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 135, 29} true;
  assume {:verifier.code 0} true;
  goto $bb54;
$bb53:
  assume !(($i56 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 137, 42} true;
  assume {:verifier.code 0} true;
  $i57 := $eq.bv32($i43, 8497bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 137, 33} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i57} true;
  goto $bb55, $bb56;
$bb54:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 301, 77} true;
  assume {:verifier.code 0} true;
  goto $bb57;
$bb55:
  assume ($i57 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 138, 31} true;
  assume {:verifier.code 0} true;
  goto $bb57;
$bb56:
  assume !(($i57 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 140, 44} true;
  assume {:verifier.code 0} true;
  $i58 := $eq.bv32($i43, 8512bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 140, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i58} true;
  goto $bb58, $bb59;
$bb57:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 304, 83} true;
  assume {:verifier.code 1} true;
  call $i116 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i116);
  // WARNING: %222 = call i32 @__VERIFIER_nondet_int(), !dbg !457, !verifier.code !21
  call {:cexpr "ret"} boogie_si_record_bv32($i116);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 305, 91} true;
  assume {:verifier.code 0} true;
  $i117 := $eq.bv32($i44, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 305, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i117} true;
  goto $bb163, $bb164;
$bb58:
  assume ($i58 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 141, 33} true;
  assume {:verifier.code 0} true;
  goto $bb60;
$bb59:
  assume !(($i58 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 143, 46} true;
  assume {:verifier.code 0} true;
  $i59 := $eq.bv32($i43, 8513bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 143, 37} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i59} true;
  goto $bb61, $bb62;
$bb60:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 321, 77} true;
  assume {:verifier.code 0} true;
  goto $bb63;
$bb61:
  assume ($i59 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 144, 35} true;
  assume {:verifier.code 0} true;
  goto $bb63;
$bb62:
  assume !(($i59 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 146, 48} true;
  assume {:verifier.code 0} true;
  $i60 := $eq.bv32($i43, 8528bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 146, 39} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i60} true;
  goto $bb64, $bb65;
$bb63:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 324, 81} true;
  assume {:verifier.code 0} true;
  $i123 := $sext.bv32.bv64($i15);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 324, 132} true;
  assume {:verifier.code 0} true;
  $i124 := $and.bv64($i123, 256bv64);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 324, 132} true;
  assume {:verifier.code 0} true;
  $i125 := $ne.bv64($i124, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 324, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i125} true;
  goto $bb172, $bb173;
$bb64:
  assume ($i60 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 147, 37} true;
  assume {:verifier.code 0} true;
  goto $bb66;
$bb65:
  assume !(($i60 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 149, 50} true;
  assume {:verifier.code 0} true;
  $i61 := $eq.bv32($i43, 8529bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 149, 41} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i61} true;
  goto $bb67, $bb68;
$bb66:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 336, 77} true;
  assume {:verifier.code 0} true;
  goto $bb69;
$bb67:
  assume ($i61 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 150, 39} true;
  assume {:verifier.code 0} true;
  goto $bb69;
$bb68:
  assume !(($i61 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 152, 52} true;
  assume {:verifier.code 0} true;
  $i62 := $eq.bv32($i43, 8544bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 152, 43} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i62} true;
  goto $bb70, $bb71;
$bb69:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 339, 81} true;
  assume {:verifier.code 0} true;
  $i130 := $sext.bv32.bv64($i15);
  // WARNING: %250 = sext i32 %16 to i64, !dbg !490, !verifier.code !19
  call {:cexpr "l"} boogie_si_record_bv64($i130);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 340, 81} true;
  assume {:verifier.code 0} true;
  $i131 := $sext.bv32.bv64($i7);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 340, 108} true;
  assume {:verifier.code 0} true;
  $i132 := $and.bv64($i131, 2097152bv64);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 340, 108} true;
  assume {:verifier.code 0} true;
  $i133 := $ne.bv64($i132, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 340, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i133} true;
  goto $bb178, $bb179;
$bb70:
  assume ($i62 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 153, 41} true;
  assume {:verifier.code 0} true;
  goto $bb72;
$bb71:
  assume !(($i62 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 155, 54} true;
  assume {:verifier.code 0} true;
  $i63 := $eq.bv32($i43, 8545bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 155, 45} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i63} true;
  goto $bb73, $bb74;
$bb72:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 383, 77} true;
  assume {:verifier.code 0} true;
  goto $bb75;
$bb73:
  assume ($i63 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 156, 43} true;
  assume {:verifier.code 0} true;
  goto $bb75;
$bb74:
  assume !(($i63 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 158, 56} true;
  assume {:verifier.code 0} true;
  $i64 := $eq.bv32($i43, 8560bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 158, 47} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i64} true;
  goto $bb76, $bb77;
$bb75:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 386, 96} true;
  assume {:verifier.code 0} true;
  $i158 := $and.bv32($i8, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 386, 96} true;
  assume {:verifier.code 0} true;
  $i159 := $ne.bv32($i158, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 386, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i159} true;
  goto $bb206, $bb207;
$bb76:
  assume ($i64 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 159, 45} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb77:
  assume !(($i64 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 161, 58} true;
  assume {:verifier.code 0} true;
  $i65 := $eq.bv32($i43, 8561bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 161, 49} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i65} true;
  goto $bb79, $bb80;
$bb78:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 424, 77} true;
  assume {:verifier.code 0} true;
  goto $bb81;
$bb79:
  assume ($i65 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 162, 47} true;
  assume {:verifier.code 0} true;
  goto $bb81;
$bb80:
  assume !(($i65 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 164, 60} true;
  assume {:verifier.code 0} true;
  $i66 := $eq.bv32($i43, 8448bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 164, 51} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i66} true;
  goto $bb82, $bb83;
$bb81:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 427, 83} true;
  assume {:verifier.code 1} true;
  call $i180 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i180);
  // WARNING: %336 = call i32 @__VERIFIER_nondet_int(), !dbg !598, !verifier.code !21
  call {:cexpr "ret"} boogie_si_record_bv32($i180);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 428, 85} true;
  assume {:verifier.code 0} true;
  $i181 := $sle.bv32($i180, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 428, 81} true;
  assume {:verifier.code 0} true;
  $i182 := $i180;
  assume {:branchcond $i181} true;
  goto $bb226, $bb227;
$bb82:
  assume ($i66 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 165, 49} true;
  assume {:verifier.code 0} true;
  goto $bb84;
$bb83:
  assume !(($i66 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 167, 62} true;
  assume {:verifier.code 0} true;
  $i67 := $eq.bv32($i43, 8576bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 167, 53} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i67} true;
  goto $bb85, $bb86;
$bb84:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 438, 86} true;
  assume {:verifier.code 0} true;
  $i183 := $sgt.bv64($i40, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 438, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i183} true;
  goto $bb229, $bb230;
$bb85:
  assume ($i67 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 168, 51} true;
  assume {:verifier.code 0} true;
  goto $bb87;
$bb86:
  assume !(($i67 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 170, 64} true;
  assume {:verifier.code 0} true;
  $i68 := $eq.bv32($i43, 8577bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 170, 55} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb88, $bb89;
$bb87:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 452, 77} true;
  assume {:verifier.code 0} true;
  goto $bb90;
$bb88:
  assume ($i68 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 171, 53} true;
  assume {:verifier.code 0} true;
  goto $bb90;
$bb89:
  assume !(($i68 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 173, 66} true;
  assume {:verifier.code 0} true;
  $i69 := $eq.bv32($i43, 8592bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 173, 57} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i69} true;
  goto $bb91, $bb92;
$bb90:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 455, 83} true;
  assume {:verifier.code 1} true;
  call $i186 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i186);
  // WARNING: %352 = call i32 @__VERIFIER_nondet_int(), !dbg !621, !verifier.code !21
  call {:cexpr "ret"} boogie_si_record_bv32($i186);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 456, 85} true;
  assume {:verifier.code 0} true;
  $i187 := $sle.bv32($i186, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 456, 81} true;
  assume {:verifier.code 0} true;
  $i188 := $i186;
  assume {:branchcond $i187} true;
  goto $bb235, $bb236;
$bb91:
  assume ($i69 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 174, 55} true;
  assume {:verifier.code 0} true;
  goto $bb93;
$bb92:
  assume !(($i69 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 176, 68} true;
  assume {:verifier.code 0} true;
  $i70 := $eq.bv32($i43, 8593bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 176, 59} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i70} true;
  goto $bb94, $bb95;
$bb93:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 473, 77} true;
  assume {:verifier.code 0} true;
  goto $bb96;
$bb94:
  assume ($i70 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 177, 57} true;
  assume {:verifier.code 0} true;
  goto $bb96;
$bb95:
  assume !(($i70 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 179, 70} true;
  assume {:verifier.code 0} true;
  $i71 := $eq.bv32($i43, 8608bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 179, 61} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i71} true;
  goto $bb97, $bb98;
$bb96:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 476, 83} true;
  assume {:verifier.code 1} true;
  call $i194 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i194);
  // WARNING: %368 = call i32 @__VERIFIER_nondet_int(), !dbg !641, !verifier.code !21
  call {:cexpr "ret"} boogie_si_record_bv32($i194);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 477, 85} true;
  assume {:verifier.code 0} true;
  $i195 := $sle.bv32($i194, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 477, 81} true;
  assume {:verifier.code 0} true;
  $i196 := $i194;
  assume {:branchcond $i195} true;
  goto $bb244, $bb245;
$bb97:
  assume ($i71 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 180, 59} true;
  assume {:verifier.code 0} true;
  goto $bb99;
$bb98:
  assume !(($i71 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 182, 72} true;
  assume {:verifier.code 0} true;
  $i72 := $eq.bv32($i43, 8609bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 182, 63} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i72} true;
  goto $bb100, $bb101;
$bb99:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 484, 77} true;
  assume {:verifier.code 0} true;
  goto $bb102;
$bb100:
  assume ($i72 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 183, 61} true;
  assume {:verifier.code 0} true;
  goto $bb102;
$bb101:
  assume !(($i72 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 185, 74} true;
  assume {:verifier.code 0} true;
  $i73 := $eq.bv32($i43, 8640bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 185, 65} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i73} true;
  goto $bb103, $bb104;
$bb102:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 487, 83} true;
  assume {:verifier.code 1} true;
  call $i197 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i197);
  // WARNING: %375 = call i32 @__VERIFIER_nondet_int(), !dbg !649, !verifier.code !21
  call {:cexpr "ret"} boogie_si_record_bv32($i197);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 488, 85} true;
  assume {:verifier.code 0} true;
  $i198 := $sle.bv32($i197, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 488, 81} true;
  assume {:verifier.code 0} true;
  $i199 := $i197;
  assume {:branchcond $i198} true;
  goto $bb247, $bb248;
$bb103:
  assume ($i73 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 186, 63} true;
  assume {:verifier.code 0} true;
  goto $bb105;
$bb104:
  assume !(($i73 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 188, 76} true;
  assume {:verifier.code 0} true;
  $i74 := $eq.bv32($i43, 8641bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 188, 67} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i74} true;
  goto $bb106, $bb107;
$bb105:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 495, 77} true;
  assume {:verifier.code 0} true;
  goto $bb108;
$bb106:
  assume ($i74 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 189, 65} true;
  assume {:verifier.code 0} true;
  goto $bb108;
$bb107:
  assume !(($i74 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 191, 78} true;
  assume {:verifier.code 0} true;
  $i75 := $eq.bv32($i43, 8656bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 191, 69} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i75} true;
  goto $bb109, $bb110;
$bb108:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 498, 83} true;
  assume {:verifier.code 1} true;
  call $i200 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i200);
  // WARNING: %382 = call i32 @__VERIFIER_nondet_int(), !dbg !657, !verifier.code !21
  call {:cexpr "ret"} boogie_si_record_bv32($i200);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 499, 91} true;
  assume {:verifier.code 0} true;
  $i201 := $eq.bv32($i44, 3bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 499, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i201} true;
  goto $bb250, $bb251;
$bb109:
  assume ($i75 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 192, 67} true;
  assume {:verifier.code 0} true;
  goto $bb111;
$bb110:
  assume !(($i75 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 194, 80} true;
  assume {:verifier.code 0} true;
  $i76 := $eq.bv32($i43, 8657bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 194, 71} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i76} true;
  goto $bb112, $bb113;
$bb111:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 515, 77} true;
  assume {:verifier.code 0} true;
  goto $bb114;
$bb112:
  assume ($i76 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 195, 69} true;
  assume {:verifier.code 0} true;
  goto $bb114;
$bb113:
  assume !(($i76 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 197, 82} true;
  assume {:verifier.code 0} true;
  $i77 := $eq.bv32($i43, 8672bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 197, 73} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i77} true;
  goto $bb115, $bb116;
$bb114:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 519, 83} true;
  assume {:verifier.code 0} true;
  $i209 := $ne.bv32($i24, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 519, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i209} true;
  goto $bb259, $bb260;
$bb115:
  assume ($i77 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 198, 71} true;
  assume {:verifier.code 0} true;
  goto $bb117;
$bb116:
  assume !(($i77 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 200, 84} true;
  assume {:verifier.code 0} true;
  $i78 := $eq.bv32($i43, 8673bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 200, 75} true;
  assume {:verifier.code 0} true;
  $i79, $i80 := $i42, $i43;
  assume {:branchcond $i78} true;
  goto $bb118, $bb119;
$bb117:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 544, 77} true;
  assume {:verifier.code 0} true;
  goto $bb120;
$bb118:
  assume ($i78 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 201, 73} true;
  assume {:verifier.code 0} true;
  goto $bb120;
$bb119:
  assume !(($i78 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 203, 86} true;
  assume {:verifier.code 0} true;
  $i81 := $eq.bv32($i80, 3bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 203, 77} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i81} true;
  goto $bb121, $bb122;
$bb120:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 547, 83} true;
  assume {:verifier.code 1} true;
  call $i216 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i216);
  // WARNING: %418 = call i32 @__VERIFIER_nondet_int(), !dbg !702, !verifier.code !21
  call {:cexpr "ret"} boogie_si_record_bv32($i216);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 548, 91} true;
  assume {:verifier.code 0} true;
  $i217 := $eq.bv32($i44, 4bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 548, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i217} true;
  goto $bb271, $bb272;
$bb121:
  assume ($i81 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 204, 75} true;
  assume {:verifier.code 0} true;
  goto $bb123;
$bb122:
  assume !(($i81 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 207, 75} true;
  assume {:verifier.code 0} true;
  goto $bb124;
$bb123:
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !401, metadata !17), !dbg !402, !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 569, 81} true;
  assume {:verifier.code 0} true;
  $i222 := $ne.bv32($i79, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 569, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i222} true;
  goto $bb281, $bb282;
$bb124:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 584, 77} true;
  assume {:verifier.code 0} true;
  $i88 := $sub.bv32(0bv32, 1bv32);
  goto $bb138;
$bb125:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 208, 79} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0bv1} true;
  goto $bb126, $bb127;
$bb126:
  assume (0bv1 == 1bv1);
  assume {:verifier.code 0} true;
  assume false;
$bb127:
  assume !((0bv1 == 1bv1));
  assume {:verifier.code 0} true;
  assume false;
$bb128:
  assume ($i82 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 218, 77} true;
  assume {:verifier.code 0} true;
  goto $bb130;
$bb129:
  assume !(($i82 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb130;
$bb130:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 221, 92} true;
  assume {:verifier.code 0} true;
  $i83 := $or.bv32($i3, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 221, 92} true;
  assume {:verifier.code 0} true;
  $i84 := $ne.bv32($i83, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 221, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i84} true;
  goto $bb131, $bb132;
$bb131:
  assume ($i84 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 223, 79} true;
  assume {:verifier.code 0} true;
  $i36 := $sub.bv32(0bv32, 1bv32);
  goto $bb15;
$bb132:
  assume !(($i84 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb133;
$bb133:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 228, 97} true;
  assume {:verifier.code 0} true;
  $i85 := $eq.bv32($i41, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 228, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i85} true;
  goto $bb134, $bb135;
$bb134:
  assume ($i85 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 229, 85} true;
  assume {:verifier.code 1} true;
  call $i86 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i86);
  // WARNING: %175 = call i32 @__VERIFIER_nondet_int(), !dbg !387, !verifier.code !21
  call {:cexpr "buf"} boogie_si_record_bv32($i86);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 230, 87} true;
  assume {:verifier.code 0} true;
  $i87 := $eq.bv32($i86, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 230, 83} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i87} true;
  goto $bb136, $bb137;
$bb135:
  assume !(($i85 == 1bv1));
  assume {:verifier.code 0} true;
  $i90 := $i41;
  goto $bb143;
$bb136:
  assume ($i87 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 232, 81} true;
  assume {:verifier.code 0} true;
  $i88 := $sub.bv32(0bv32, 1bv32);
  goto $bb138;
$bb137:
  assume !(($i87 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb139;
$bb138:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 659, 10} true;
  assume {:verifier.code 0} true;
  $i232 := $ne.bv32($i28, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 659, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i232} true;
  goto $bb342, $bb343;
$bb139:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 236, 85} true;
  assume {:verifier.code 0} true;
  $i89 := $ne.bv32($i19, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 236, 83} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i89} true;
  goto $bb140, $bb141;
$bb140:
  assume ($i89 == 1bv1);
  assume {:verifier.code 0} true;
  goto $bb142;
$bb141:
  assume !(($i89 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 238, 81} true;
  assume {:verifier.code 0} true;
  $i88 := $sub.bv32(0bv32, 1bv32);
  goto $bb138;
$bb142:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 243, 77} true;
  assume {:verifier.code 0} true;
  $i90 := $i86;
  goto $bb143;
$bb143:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 246, 83} true;
  assume {:verifier.code 0} true;
  $i91 := $ne.bv32($i20, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 246, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i91} true;
  goto $bb144, $bb145;
$bb144:
  assume ($i91 == 1bv1);
  assume {:verifier.code 0} true;
  goto $bb146;
$bb145:
  assume !(($i91 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 248, 79} true;
  assume {:verifier.code 0} true;
  $i88 := $sub.bv32(0bv32, 1bv32);
  goto $bb138;
$bb146:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 253, 90} true;
  assume {:verifier.code 0} true;
  $i92 := $ne.bv32($i43, 12292bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 253, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i92} true;
  goto $bb147, $bb148;
$bb147:
  assume ($i92 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 254, 85} true;
  assume {:verifier.code 0} true;
  $i93 := $ne.bv32($i21, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 254, 83} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i93} true;
  goto $bb149, $bb150;
$bb148:
  assume !(($i92 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 263, 159} true;
  assume {:verifier.code 0} true;
  $i98 := $add.bv32($i37, 1bv32);
  // WARNING: %198 = add nsw i32 %.039, 1, !dbg !424, !verifier.code !19
  call {:cexpr "s__ctx__stats__sess_accept_renegotiate"} boogie_si_record_bv32($i98);
  // WARNING: call void @llvm.dbg.value(metadata i32 %198, i64 0, metadata !426, metadata !17), !dbg !427, !verifier.code !19
  assume {:verifier.code 0} true;
  $i95, $i96, $i97 := $i98, $i38, 8480bv32;
  goto $bb152;
$bb149:
  assume ($i93 == 1bv1);
  assume {:verifier.code 0} true;
  goto $bb151;
$bb150:
  assume !(($i93 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 256, 81} true;
  assume {:verifier.code 0} true;
  $i88 := $sub.bv32(0bv32, 1bv32);
  goto $bb138;
$bb151:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 261, 135} true;
  assume {:verifier.code 0} true;
  $i94 := $add.bv32($i38, 1bv32);
  // WARNING: %196 = add nsw i32 %.036, 1, !dbg !420, !verifier.code !19
  call {:cexpr "s__ctx__stats__sess_accept"} boogie_si_record_bv32($i94);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 262, 77} true;
  assume {:verifier.code 0} true;
  $i95, $i96, $i97 := $i37, $i94, 8464bv32;
  goto $bb152;
$bb152:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 266, 77} true;
  assume {:verifier.code 0} true;
  $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107 := $i95, $i96, $i39, $i40, $i90, 0bv32, $i42, $i97, $i44;
  goto $bb153;
$bb153:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb287;
$bb154:
  assume ($i109 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 272, 79} true;
  assume {:verifier.code 0} true;
  $i88 := $i110;
  goto $bb138;
$bb155:
  assume !(($i109 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb156;
$bb156:
  // WARNING: call void @llvm.dbg.value(metadata i32 8482, i64 0, metadata !438, metadata !17), !dbg !439, !verifier.code !19
  // WARNING: call void @llvm.dbg.value(metadata i32 8448, i64 0, metadata !97, metadata !17), !dbg !98, !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 279, 77} true;
  assume {:verifier.code 0} true;
  $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107 := $i37, $i38, 8482bv32, $i40, $i41, 0bv32, $i42, 8448bv32, $i44;
  goto $bb153;
$bb157:
  assume ($i112 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 290, 77} true;
  assume {:verifier.code 0} true;
  $i113 := 1bv32;
  goto $bb159;
$bb158:
  assume !(($i112 == 1bv1));
  assume {:verifier.code 0} true;
  $i113 := $i44;
  goto $bb159;
$bb159:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 293, 85} true;
  assume {:verifier.code 0} true;
  $i114 := $sle.bv32($i111, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 293, 81} true;
  assume {:verifier.code 0} true;
  $i115 := $i111;
  assume {:branchcond $i114} true;
  goto $bb160, $bb161;
$bb160:
  assume ($i114 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 294, 79} true;
  assume {:verifier.code 0} true;
  $i88 := $i115;
  goto $bb138;
$bb161:
  assume !(($i114 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb162;
$bb162:
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !109, metadata !17), !dbg !110, !verifier.code !19
  // WARNING: call void @llvm.dbg.value(metadata i32 8496, i64 0, metadata !97, metadata !17), !dbg !98, !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 301, 77} true;
  assume {:verifier.code 0} true;
  $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107 := $i37, $i38, $i39, $i40, $i41, 0bv32, 1bv32, 8496bv32, $i113;
  goto $bb153;
$bb163:
  assume ($i117 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 307, 77} true;
  assume {:verifier.code 0} true;
  $i118 := 2bv32;
  goto $bb165;
$bb164:
  assume !(($i117 == 1bv1));
  assume {:verifier.code 0} true;
  $i118 := $i44;
  goto $bb165;
$bb165:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 310, 85} true;
  assume {:verifier.code 0} true;
  $i119 := $sle.bv32($i116, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 310, 81} true;
  assume {:verifier.code 0} true;
  $i120 := $i116;
  assume {:branchcond $i119} true;
  goto $bb166, $bb167;
$bb166:
  assume ($i119 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 311, 79} true;
  assume {:verifier.code 0} true;
  $i88 := $i120;
  goto $bb138;
$bb167:
  assume !(($i119 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb168;
$bb168:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 315, 81} true;
  assume {:verifier.code 0} true;
  $i121 := $ne.bv32($i4, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 315, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i121} true;
  goto $bb169, $bb170;
$bb169:
  assume ($i121 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 317, 77} true;
  assume {:verifier.code 0} true;
  $i122 := 8656bv32;
  goto $bb171;
$bb170:
  assume !(($i121 == 1bv1));
  assume {:verifier.code 0} true;
  $i122 := 8512bv32;
  goto $bb171;
$bb171:
  assume {:verifier.code 0} true;
  // WARNING: %.24 = phi i32 [ 8656, %232 ], [ 8512, %233 ], !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 321, 77} true;
  assume {:verifier.code 0} true;
  $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107 := $i37, $i38, $i39, $i40, $i41, 0bv32, $i42, $i122, $i118;
  goto $bb153;
$bb172:
  assume ($i125 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 326, 77} true;
  assume {:verifier.code 0} true;
  $i126 := 1bv32;
  goto $bb174;
$bb173:
  assume !(($i125 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 327, 85} true;
  assume {:verifier.code 1} true;
  call $i127 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i127);
  // WARNING: %242 = call i32 @__VERIFIER_nondet_int(), !dbg !481, !verifier.code !21
  call {:cexpr "ret"} boogie_si_record_bv32($i127);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 328, 87} true;
  assume {:verifier.code 0} true;
  $i128 := $sle.bv32($i127, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 328, 83} true;
  assume {:verifier.code 0} true;
  $i129 := $i127;
  assume {:branchcond $i128} true;
  goto $bb175, $bb176;
$bb174:
  assume {:verifier.code 0} true;
  // WARNING: %.112 = phi i32 [ 1, %240 ], [ 0, %246 ], !verifier.code !19
  // WARNING: call void @llvm.dbg.value(metadata i32 8528, i64 0, metadata !97, metadata !17), !dbg !98, !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 336, 77} true;
  assume {:verifier.code 0} true;
  $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107 := $i37, $i38, $i39, $i40, $i41, $i126, $i42, 8528bv32, $i44;
  goto $bb153;
$bb175:
  assume ($i128 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 329, 81} true;
  assume {:verifier.code 0} true;
  $i88 := $i129;
  goto $bb138;
$bb176:
  assume !(($i128 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb177;
$bb177:
  assume {:verifier.code 0} true;
  $i126 := 0bv32;
  goto $bb174;
$bb178:
  assume ($i133 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 342, 77} true;
  assume {:verifier.code 0} true;
  $i134 := 1bv32;
  goto $bb180;
$bb179:
  assume !(($i133 == 1bv1));
  assume {:verifier.code 0} true;
  $i134 := 0bv32;
  goto $bb180;
$bb180:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 345, 81} true;
  assume {:verifier.code 0} true;
  $i135 := $ne.bv32($i134, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 345, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i135} true;
  goto $bb181, $bb182;
$bb181:
  assume ($i135 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 346, 79} true;
  assume {:verifier.code 0} true;
  goto $bb183;
$bb182:
  assume !(($i135 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 348, 85} true;
  assume {:verifier.code 0} true;
  $i136 := $and.bv64($i130, 30bv64);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 348, 85} true;
  assume {:verifier.code 0} true;
  $i137 := $ne.bv64($i136, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 348, 83} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i137} true;
  goto $bb184, $bb185;
$bb183:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 363, 95} true;
  assume {:verifier.code 1} true;
  call $i152 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i152);
  // WARNING: %286 = call i32 @__VERIFIER_nondet_int(), !dbg !542, !verifier.code !21
  call {:cexpr "ret"} boogie_si_record_bv32($i152);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 364, 97} true;
  assume {:verifier.code 0} true;
  $i153 := $sle.bv32($i152, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 364, 93} true;
  assume {:verifier.code 0} true;
  $i154 := $i152;
  assume {:branchcond $i153} true;
  goto $bb197, $bb198;
$bb184:
  assume ($i137 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 349, 81} true;
  assume {:verifier.code 0} true;
  goto $bb183;
$bb185:
  assume !(($i137 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 351, 87} true;
  assume {:verifier.code 0} true;
  $i138 := $and.bv64($i130, 1bv64);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 351, 87} true;
  assume {:verifier.code 0} true;
  $i139 := $ne.bv64($i138, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 351, 85} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i139} true;
  goto $bb186, $bb187;
$bb186:
  assume ($i139 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 352, 119} true;
  assume {:verifier.code 0} true;
  $i140 := $eq.bv32($i10, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 352, 87} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i140} true;
  goto $bb188, $bb189;
$bb187:
  assume !(($i139 == 1bv1));
  assume {:verifier.code 0} true;
  $i157 := 1bv32;
  goto $bb203;
$bb188:
  assume ($i140 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 353, 85} true;
  assume {:verifier.code 0} true;
  goto $bb183;
$bb189:
  assume !(($i140 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 355, 89} true;
  assume {:verifier.code 0} true;
  $i141 := $sext.bv32.bv64($i16);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 355, 143} true;
  assume {:verifier.code 0} true;
  $i142 := $and.bv64($i141, 2bv64);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 355, 143} true;
  assume {:verifier.code 0} true;
  $i143 := $ne.bv64($i142, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 355, 89} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i143} true;
  goto $bb190, $bb191;
$bb190:
  assume ($i143 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 356, 91} true;
  assume {:verifier.code 0} true;
  $i144 := $sext.bv32.bv64($i16);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 356, 145} true;
  assume {:verifier.code 0} true;
  $i145 := $and.bv64($i144, 4bv64);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 356, 145} true;
  assume {:verifier.code 0} true;
  $i146 := $ne.bv64($i145, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 356, 91} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i146} true;
  goto $bb192, $bb193;
$bb191:
  assume !(($i143 == 1bv1));
  assume {:verifier.code 0} true;
  $i156 := 1bv32;
  goto $bb201;
$bb192:
  assume ($i146 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 358, 87} true;
  assume {:verifier.code 0} true;
  $i147 := 512bv32;
  goto $bb194;
$bb193:
  assume !(($i146 == 1bv1));
  assume {:verifier.code 0} true;
  $i147 := 1024bv32;
  goto $bb194;
$bb194:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 361, 104} true;
  assume {:verifier.code 0} true;
  $i148 := $sgt.bv32(8bv32, $i147);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 361, 104} true;
  assume {:verifier.code 0} true;
  $i149 := $zext.bv1.bv32($i148);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 361, 99} true;
  assume {:verifier.code 0} true;
  $i150 := $or.bv32($i22, $i149);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 361, 99} true;
  assume {:verifier.code 0} true;
  $i151 := $ne.bv32($i150, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 361, 91} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i151} true;
  goto $bb195, $bb196;
$bb195:
  assume ($i151 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 361, 116} true;
  assume {:verifier.code 0} true;
  goto $bb183;
$bb196:
  assume !(($i151 == 1bv1));
  assume {:verifier.code 0} true;
  $i155 := 1bv32;
  goto $bb200;
$bb197:
  assume ($i153 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 365, 91} true;
  assume {:verifier.code 0} true;
  $i88 := $i154;
  goto $bb138;
$bb198:
  assume !(($i153 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb199;
$bb199:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 369, 87} true;
  assume {:verifier.code 0} true;
  $i155 := 0bv32;
  goto $bb200;
$bb200:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 372, 85} true;
  assume {:verifier.code 0} true;
  $i156 := $i155;
  goto $bb201;
$bb201:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb202;
$bb202:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 376, 81} true;
  assume {:verifier.code 0} true;
  $i157 := $i156;
  goto $bb203;
$bb203:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb204;
$bb204:
  assume {:verifier.code 0} true;
  goto $bb205;
$bb205:
  // WARNING: call void @llvm.dbg.value(metadata i32 8544, i64 0, metadata !97, metadata !17), !dbg !98, !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 383, 77} true;
  assume {:verifier.code 0} true;
  $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107 := $i37, $i38, $i39, $i40, $i41, $i157, $i42, 8544bv32, $i44;
  goto $bb153;
$bb206:
  assume ($i159 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 387, 100} true;
  assume {:verifier.code 0} true;
  $i160 := $ne.bv32($i9, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 387, 83} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i160} true;
  goto $bb208, $bb209;
$bb207:
  assume !(($i159 == 1bv1));
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !107, metadata !17), !dbg !108, !verifier.code !19
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !565, metadata !17), !dbg !566, !verifier.code !19
  assume {:verifier.code 0} true;
  $i177, $i178, $i179 := $i39, 1bv32, 8560bv32;
  goto $bb225;
$bb208:
  assume ($i160 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 388, 100} true;
  assume {:verifier.code 0} true;
  $i161 := $and.bv32($i8, 4bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 388, 100} true;
  assume {:verifier.code 0} true;
  $i162 := $ne.bv32($i161, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 388, 85} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i162} true;
  goto $bb210, $bb211;
$bb209:
  assume !(($i160 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 395, 86} true;
  assume {:verifier.code 0} true;
  goto $bb213;
$bb210:
  assume ($i162 == 1bv1);
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !107, metadata !17), !dbg !108, !verifier.code !19
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !565, metadata !17), !dbg !566, !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 392, 81} true;
  assume {:verifier.code 0} true;
  goto $bb212;
$bb211:
  assume !(($i162 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 393, 83} true;
  assume {:verifier.code 0} true;
  goto $bb213;
$bb212:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 395, 79} true;
  assume {:verifier.code 0} true;
  $i163, $i164, $i165 := $i39, 1bv32, 8560bv32;
  goto $bb214;
$bb213:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 397, 85} true;
  assume {:verifier.code 0} true;
  $i166 := $sext.bv32.bv64($i15);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 397, 136} true;
  assume {:verifier.code 0} true;
  $i167 := $and.bv64($i166, 256bv64);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 397, 136} true;
  assume {:verifier.code 0} true;
  $i168 := $ne.bv64($i167, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 397, 85} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i168} true;
  goto $bb215, $bb216;
$bb214:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 419, 77} true;
  assume {:verifier.code 0} true;
  $i177, $i178, $i179 := $i163, $i164, $i165;
  goto $bb225;
$bb215:
  assume ($i168 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 398, 102} true;
  assume {:verifier.code 0} true;
  $i169 := $and.bv32($i8, 2bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 398, 102} true;
  assume {:verifier.code 0} true;
  $i170 := $ne.bv32($i169, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 398, 87} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i170} true;
  goto $bb217, $bb218;
$bb216:
  assume !(($i168 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 405, 88} true;
  assume {:verifier.code 0} true;
  goto $bb219;
$bb217:
  assume ($i170 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 399, 85} true;
  assume {:verifier.code 0} true;
  goto $bb219;
$bb218:
  assume !(($i170 == 1bv1));
  // WARNING: call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !107, metadata !17), !dbg !108, !verifier.code !19
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !565, metadata !17), !dbg !566, !verifier.code !19
  assume {:verifier.code 0} true;
  goto $bb220;
$bb219:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 408, 89} true;
  assume {:verifier.code 1} true;
  call $i174 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i174);
  // WARNING: %325 = call i32 @__VERIFIER_nondet_int(), !dbg !588, !verifier.code !21
  call {:cexpr "ret"} boogie_si_record_bv32($i174);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 409, 91} true;
  assume {:verifier.code 0} true;
  $i175 := $sle.bv32($i174, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 409, 87} true;
  assume {:verifier.code 0} true;
  $i176 := $i174;
  assume {:branchcond $i175} true;
  goto $bb222, $bb223;
$bb220:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 405, 81} true;
  assume {:verifier.code 0} true;
  $i171, $i172, $i173 := $i39, 1bv32, 8560bv32;
  goto $bb221;
$bb221:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i163, $i164, $i165 := $i171, $i172, $i173;
  goto $bb214;
$bb222:
  assume ($i175 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 410, 85} true;
  assume {:verifier.code 0} true;
  $i88 := $i176;
  goto $bb138;
$bb223:
  assume !(($i175 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb224;
$bb224:
  // WARNING: call void @llvm.dbg.value(metadata i32 8448, i64 0, metadata !97, metadata !17), !dbg !98, !verifier.code !19
  // WARNING: call void @llvm.dbg.value(metadata i32 8576, i64 0, metadata !438, metadata !17), !dbg !439, !verifier.code !19
  assume {:verifier.code 0} true;
  $i171, $i172, $i173 := 8576bv32, 0bv32, 8448bv32;
  goto $bb221;
$bb225:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 424, 77} true;
  assume {:verifier.code 0} true;
  $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107 := $i37, $i38, $i177, $i40, $i41, $i178, $i42, $i179, $i44;
  goto $bb153;
$bb226:
  assume ($i181 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 429, 79} true;
  assume {:verifier.code 0} true;
  $i88 := $i182;
  goto $bb138;
$bb227:
  assume !(($i181 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb228;
$bb228:
  // WARNING: call void @llvm.dbg.value(metadata i32 8576, i64 0, metadata !438, metadata !17), !dbg !439, !verifier.code !19
  // WARNING: call void @llvm.dbg.value(metadata i32 8448, i64 0, metadata !97, metadata !17), !dbg !98, !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 436, 77} true;
  assume {:verifier.code 0} true;
  $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107 := $i37, $i38, 8576bv32, $i40, $i41, 0bv32, $i42, 8448bv32, $i44;
  goto $bb153;
$bb229:
  assume ($i183 == 1bv1);
  // WARNING: call void @llvm.dbg.value(metadata i32 2, i64 0, metadata !608, metadata !17), !dbg !609, !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 441, 88} true;
  assume {:verifier.code 0} true;
  $i184 := $sle.bv64($i23, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 441, 83} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i184} true;
  goto $bb231, $bb232;
$bb230:
  assume !(($i183 == 1bv1));
  assume {:verifier.code 0} true;
  $i185 := $i40;
  goto $bb234;
$bb231:
  assume ($i184 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 443, 81} true;
  assume {:verifier.code 0} true;
  $i88 := $sub.bv32(0bv32, 1bv32);
  goto $bb138;
$bb232:
  assume !(($i184 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb233;
$bb233:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 448, 77} true;
  assume {:verifier.code 0} true;
  $i185 := $i23;
  goto $bb234;
$bb234:
  assume {:verifier.code 0} true;
  // WARNING: %.125 = phi i64 [ %24, %347 ], [ %.024, %348 ], !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 452, 77} true;
  assume {:verifier.code 0} true;
  $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107 := $i37, $i38, $i39, $i185, $i41, 0bv32, $i42, $i39, $i44;
  goto $bb153;
$bb235:
  assume ($i187 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 457, 79} true;
  assume {:verifier.code 0} true;
  $i88 := $i188;
  goto $bb138;
$bb236:
  assume !(($i187 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb237;
$bb237:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 461, 85} true;
  assume {:verifier.code 0} true;
  $i189 := $eq.bv32($i186, 2bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 461, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i189} true;
  goto $bb238, $bb239;
$bb238:
  assume ($i189 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 463, 77} true;
  assume {:verifier.code 0} true;
  $i190 := 8466bv32;
  goto $bb240;
$bb239:
  assume !(($i189 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 464, 85} true;
  assume {:verifier.code 1} true;
  call $i191 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i191);
  // WARNING: %360 = call i32 @__VERIFIER_nondet_int(), !dbg !632, !verifier.code !21
  call {:cexpr "ret"} boogie_si_record_bv32($i191);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 465, 87} true;
  assume {:verifier.code 0} true;
  $i192 := $sle.bv32($i191, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 465, 83} true;
  assume {:verifier.code 0} true;
  $i193 := $i191;
  assume {:branchcond $i192} true;
  goto $bb241, $bb242;
$bb240:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 473, 77} true;
  assume {:verifier.code 0} true;
  $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107 := $i37, $i38, $i39, $i40, $i41, 0bv32, $i42, $i190, $i44;
  goto $bb153;
$bb241:
  assume ($i192 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 466, 81} true;
  assume {:verifier.code 0} true;
  $i88 := $i193;
  goto $bb138;
$bb242:
  assume !(($i192 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb243;
$bb243:
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !409, metadata !17), !dbg !410, !verifier.code !19
  assume {:verifier.code 0} true;
  $i190 := 8592bv32;
  goto $bb240;
$bb244:
  assume ($i195 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 478, 79} true;
  assume {:verifier.code 0} true;
  $i88 := $i196;
  goto $bb138;
$bb245:
  assume !(($i195 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb246;
$bb246:
  // WARNING: call void @llvm.dbg.value(metadata i32 8608, i64 0, metadata !97, metadata !17), !dbg !98, !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 484, 77} true;
  assume {:verifier.code 0} true;
  $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107 := $i37, $i38, $i39, $i40, $i41, 0bv32, $i42, 8608bv32, $i44;
  goto $bb153;
$bb247:
  assume ($i198 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 489, 79} true;
  assume {:verifier.code 0} true;
  $i88 := $i199;
  goto $bb138;
$bb248:
  assume !(($i198 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb249;
$bb249:
  // WARNING: call void @llvm.dbg.value(metadata i32 8640, i64 0, metadata !97, metadata !17), !dbg !98, !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 495, 77} true;
  assume {:verifier.code 0} true;
  $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107 := $i37, $i38, $i39, $i40, $i41, 0bv32, $i42, 8640bv32, $i44;
  goto $bb153;
$bb250:
  assume ($i201 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 500, 112} true;
  assume {:verifier.code 0} true;
  $i202 := $sdiv.bv32($i43, $i39);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 500, 101} true;
  assume {:verifier.code 0} true;
  $i203 := $add.bv32($i44, $i202);
  // WARNING: %386 = add nsw i32 %.01, %385, !dbg !663, !verifier.code !19
  call {:cexpr "blastFlag"} boogie_si_record_bv32($i203);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 501, 77} true;
  assume {:verifier.code 0} true;
  $i204 := $i203;
  goto $bb252;
$bb251:
  assume !(($i201 == 1bv1));
  assume {:verifier.code 0} true;
  $i204 := $i44;
  goto $bb252;
$bb252:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 504, 85} true;
  assume {:verifier.code 0} true;
  $i205 := $sle.bv32($i200, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 504, 81} true;
  assume {:verifier.code 0} true;
  $i206 := $i200;
  assume {:branchcond $i205} true;
  goto $bb253, $bb254;
$bb253:
  assume ($i205 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 505, 79} true;
  assume {:verifier.code 0} true;
  $i88 := $i206;
  goto $bb138;
$bb254:
  assume !(($i205 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb255;
$bb255:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 509, 81} true;
  assume {:verifier.code 0} true;
  $i207 := $ne.bv32($i4, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 509, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i207} true;
  goto $bb256, $bb257;
$bb256:
  assume ($i207 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 511, 77} true;
  assume {:verifier.code 0} true;
  $i208 := 3bv32;
  goto $bb258;
$bb257:
  assume !(($i207 == 1bv1));
  assume {:verifier.code 0} true;
  $i208 := 8656bv32;
  goto $bb258;
$bb258:
  assume {:verifier.code 0} true;
  // WARNING: %.7 = phi i32 [ 3, %394 ], [ 8656, %395 ], !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 515, 77} true;
  assume {:verifier.code 0} true;
  $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107 := $i37, $i38, $i39, $i40, $i41, 0bv32, $i42, $i208, $i204;
  goto $bb153;
$bb259:
  assume ($i209 == 1bv1);
  assume {:verifier.code 0} true;
  goto $bb261;
$bb260:
  assume !(($i209 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 521, 79} true;
  assume {:verifier.code 0} true;
  $i88 := $sub.bv32(0bv32, 1bv32);
  goto $bb138;
$bb261:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 525, 83} true;
  assume {:verifier.code 1} true;
  call $i210 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i210);
  // WARNING: %403 = call i32 @__VERIFIER_nondet_int(), !dbg !684, !verifier.code !21
  call {:cexpr "ret"} boogie_si_record_bv32($i210);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 526, 91} true;
  assume {:verifier.code 0} true;
  $i211 := $eq.bv32($i44, 2bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 526, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i211} true;
  goto $bb262, $bb263;
$bb262:
  assume ($i211 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 528, 77} true;
  assume {:verifier.code 0} true;
  $i212 := 3bv32;
  goto $bb264;
$bb263:
  assume !(($i211 == 1bv1));
  assume {:verifier.code 0} true;
  $i212 := $i44;
  goto $bb264;
$bb264:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 531, 85} true;
  assume {:verifier.code 0} true;
  $i213 := $sle.bv32($i210, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 531, 81} true;
  assume {:verifier.code 0} true;
  $i214 := $i210;
  assume {:branchcond $i213} true;
  goto $bb265, $bb266;
$bb265:
  assume ($i213 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 532, 79} true;
  assume {:verifier.code 0} true;
  $i88 := $i214;
  goto $bb138;
$bb266:
  assume !(($i213 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb267;
$bb267:
  // WARNING: call void @llvm.dbg.value(metadata i32 8672, i64 0, metadata !97, metadata !17), !dbg !98, !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 538, 83} true;
  assume {:verifier.code 0} true;
  $i215 := $ne.bv32($i25, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 538, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i215} true;
  goto $bb268, $bb269;
$bb268:
  assume ($i215 == 1bv1);
  assume {:verifier.code 0} true;
  goto $bb270;
$bb269:
  assume !(($i215 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 540, 79} true;
  assume {:verifier.code 0} true;
  $i88 := $sub.bv32(0bv32, 1bv32);
  goto $bb138;
$bb270:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 544, 77} true;
  assume {:verifier.code 0} true;
  $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107 := $i37, $i38, $i39, $i40, $i41, 0bv32, $i42, 8672bv32, $i212;
  goto $bb153;
$bb271:
  assume ($i217 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 549, 79} true;
  assume {:verifier.code 0} true;
  goto $bb273;
$bb272:
  assume !(($i217 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb274;
$bb273:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 666, 10} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  // WARNING: call void @__VERIFIER_error(), !dbg !774, !verifier.code !21
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 669, 3} true;
  assume {:verifier.code 0} true;
  $i36 := $sub.bv32(0bv32, 1bv32);
  goto $bb15;
$bb274:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 553, 85} true;
  assume {:verifier.code 0} true;
  $i218 := $sle.bv32($i216, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 553, 81} true;
  assume {:verifier.code 0} true;
  $i219 := $i216;
  assume {:branchcond $i218} true;
  goto $bb275, $bb276;
$bb275:
  assume ($i218 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 554, 79} true;
  assume {:verifier.code 0} true;
  $i88 := $i219;
  goto $bb138;
$bb276:
  assume !(($i218 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb277;
$bb277:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 559, 81} true;
  assume {:verifier.code 0} true;
  $i220 := $ne.bv32($i4, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 559, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i220} true;
  goto $bb278, $bb279;
$bb278:
  assume ($i220 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 561, 77} true;
  assume {:verifier.code 0} true;
  $i221 := 8640bv32;
  goto $bb280;
$bb279:
  assume !(($i220 == 1bv1));
  assume {:verifier.code 0} true;
  $i221 := 3bv32;
  goto $bb280;
$bb280:
  assume {:verifier.code 0} true;
  // WARNING: %.433 = phi i32 [ 8640, %428 ], [ 3, %429 ], !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 565, 77} true;
  assume {:verifier.code 0} true;
  $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107 := $i37, $i38, $i221, $i40, $i41, 0bv32, $i42, 8448bv32, $i44;
  goto $bb153;
$bb281:
  assume ($i222 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 572, 86} true;
  assume {:verifier.code 0} true;
  $i223 := $ne.bv32($i28, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 572, 83} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i223} true;
  goto $bb283, $bb284;
$bb282:
  assume !(($i222 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb286;
$bb283:
  assume ($i223 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 574, 79} true;
  assume {:verifier.code 0} true;
  goto $bb285;
$bb284:
  assume !(($i223 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb285;
$bb285:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 577, 77} true;
  assume {:verifier.code 0} true;
  goto $bb286;
$bb286:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 581, 77} true;
  assume {:verifier.code 0} true;
  $i88 := 1bv32;
  goto $bb138;
$bb287:
  assume {:verifier.code 0} true;
  goto $bb288;
$bb288:
  assume {:verifier.code 0} true;
  goto $bb289;
$bb289:
  assume {:verifier.code 0} true;
  goto $bb290;
$bb290:
  assume {:verifier.code 0} true;
  goto $bb291;
$bb291:
  assume {:verifier.code 0} true;
  goto $bb292;
$bb292:
  assume {:verifier.code 0} true;
  goto $bb293;
$bb293:
  assume {:verifier.code 0} true;
  goto $bb294;
$bb294:
  assume {:verifier.code 0} true;
  goto $bb295;
$bb295:
  assume {:verifier.code 0} true;
  goto $bb296;
$bb296:
  assume {:verifier.code 0} true;
  goto $bb297;
$bb297:
  assume {:verifier.code 0} true;
  goto $bb298;
$bb298:
  assume {:verifier.code 0} true;
  goto $bb299;
$bb299:
  assume {:verifier.code 0} true;
  goto $bb300;
$bb300:
  assume {:verifier.code 0} true;
  goto $bb301;
$bb301:
  assume {:verifier.code 0} true;
  goto $bb302;
$bb302:
  assume {:verifier.code 0} true;
  goto $bb303;
$bb303:
  assume {:verifier.code 0} true;
  goto $bb304;
$bb304:
  assume {:verifier.code 0} true;
  goto $bb305;
$bb305:
  assume {:verifier.code 0} true;
  goto $bb306;
$bb306:
  assume {:verifier.code 0} true;
  goto $bb307;
$bb307:
  assume {:verifier.code 0} true;
  goto $bb308;
$bb308:
  assume {:verifier.code 0} true;
  goto $bb309;
$bb309:
  assume {:verifier.code 0} true;
  goto $bb310;
$bb310:
  assume {:verifier.code 0} true;
  goto $bb311;
$bb311:
  assume {:verifier.code 0} true;
  goto $bb312;
$bb312:
  assume {:verifier.code 0} true;
  goto $bb313;
$bb313:
  assume {:verifier.code 0} true;
  goto $bb314;
$bb314:
  assume {:verifier.code 0} true;
  goto $bb315;
$bb315:
  assume {:verifier.code 0} true;
  goto $bb316;
$bb316:
  assume {:verifier.code 0} true;
  goto $bb317;
$bb317:
  assume {:verifier.code 0} true;
  goto $bb318;
$bb318:
  assume {:verifier.code 0} true;
  goto $bb319;
$bb319:
  assume {:verifier.code 0} true;
  goto $bb320;
$bb320:
  assume {:verifier.code 0} true;
  goto $bb321;
$bb321:
  assume {:verifier.code 0} true;
  goto $bb322;
$bb322:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 624, 11} true;
  assume {:verifier.code 0} true;
  $i224 := $ne.bv32($i13, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 624, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i224} true;
  goto $bb323, $bb324;
$bb323:
  assume ($i224 == 1bv1);
  assume {:verifier.code 0} true;
  goto $bb340;
$bb324:
  assume !(($i224 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 625, 13} true;
  assume {:verifier.code 0} true;
  $i225 := $ne.bv32($i104, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 625, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i225} true;
  goto $bb325, $bb326;
$bb325:
  assume ($i225 == 1bv1);
  assume {:verifier.code 0} true;
  goto $bb339;
$bb326:
  assume !(($i225 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 626, 13} true;
  assume {:verifier.code 0} true;
  $i226 := $ne.bv32($i5, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 626, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i226} true;
  goto $bb327, $bb328;
$bb327:
  assume ($i226 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 627, 17} true;
  assume {:verifier.code 1} true;
  call $i227 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i227);
  // WARNING: %485 = call i32 @__VERIFIER_nondet_int(), !dbg !742, !verifier.code !21
  call {:cexpr "ret"} boogie_si_record_bv32($i227);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 628, 19} true;
  assume {:verifier.code 0} true;
  $i228 := $sle.bv32($i227, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 628, 15} true;
  assume {:verifier.code 0} true;
  $i229 := $i227;
  assume {:branchcond $i228} true;
  goto $bb329, $bb330;
$bb328:
  assume !(($i226 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb332;
$bb329:
  assume ($i228 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 629, 13} true;
  assume {:verifier.code 0} true;
  $i88 := $i229;
  goto $bb138;
$bb330:
  assume !(($i228 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb331;
$bb331:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 633, 9} true;
  assume {:verifier.code 0} true;
  goto $bb332;
$bb332:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 636, 16} true;
  assume {:verifier.code 0} true;
  $i230 := $ne.bv32($i28, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 636, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i230} true;
  goto $bb333, $bb334;
$bb333:
  assume ($i230 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 637, 24} true;
  assume {:verifier.code 0} true;
  $i231 := $ne.bv32($i106, $i43);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 637, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i231} true;
  goto $bb335, $bb336;
$bb334:
  assume !(($i230 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb338;
$bb335:
  assume ($i231 == 1bv1);
  // WARNING: call void @llvm.dbg.value(metadata i32 %.8, i64 0, metadata !757, metadata !17), !dbg !758, !verifier.code !19
  // WARNING: call void @llvm.dbg.value(metadata i32 %.02, i64 0, metadata !97, metadata !17), !dbg !98, !verifier.code !19
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 641, 11} true;
  assume {:verifier.code 0} true;
  goto $bb337;
$bb336:
  assume !(($i231 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb337;
$bb337:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 644, 9} true;
  assume {:verifier.code 0} true;
  goto $bb338;
$bb338:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 647, 7} true;
  assume {:verifier.code 0} true;
  goto $bb339;
$bb339:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 650, 5} true;
  assume {:verifier.code 0} true;
  goto $bb340;
$bb340:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 98, 3} true;
  assume {:verifier.code 0} true;
  $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44 := $i99, $i100, $i101, $i102, $i103, $i105, $i106, $i107;
  goto $bb17;
$bb341:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 656, 3} true;
  assume {:verifier.code 0} true;
  $i88 := $u0;
  goto $bb138;
$bb342:
  assume ($i232 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 661, 3} true;
  assume {:verifier.code 0} true;
  goto $bb344;
$bb343:
  assume !(($i232 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb344;
$bb344:
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 665, 3} true;
  assume {:verifier.code 0} true;
  $i36 := $i88;
  goto $bb15;
}
const main: ref;
axiom (main == $sub.ref(0bv64, 3102bv64));
procedure {:entrypoint} main()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  call $initialize();
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 681, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 681, 9} true;
  assume {:verifier.code 0} true;
  call $i0 := ssl3_accept(8464bv32);
  // WARNING: %1 = call i32 @ssl3_accept(i32 8464), !dbg !20, !verifier.code !19
  call {:cexpr "tmp"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/proj/SMACK/smac/example_scenarios/bv_rs/s3_srvr_3_true-unreach-call_true-no-overflow.BV.c.cil-hJA1nR.c", 683, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0bv64, 4134bv64));
procedure  __VERIFIER_assume($i0: bv32)
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 272, 3} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_bv32($i0);
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !791, metadata !17), !dbg !792, !verifier.code !19
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 272, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 35, 21} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 36, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0bv64, 5166bv64));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.bv32($p0: ref, p.1: bv32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0bv64, 6198bv64));
procedure  __SMACK_dummy($i0: bv32)
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 272, 3} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_dummy:arg:v"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 272, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 273, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_error: ref;
axiom (__VERIFIER_error == $sub.ref(0bv64, 7230bv64));
procedure  __VERIFIER_error()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 48, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 48, 3} true;
  assume {:verifier.code 1} true;
  assert false;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 52, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_check_overflow: ref;
axiom (__SMACK_check_overflow == $sub.ref(0bv64, 8262bv64));
procedure  __SMACK_check_overflow($i0: bv32)
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 272, 3} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_check_overflow:arg:flag"} boogie_si_record_bv32($i0);
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !810, metadata !17), !dbg !811, !verifier.code !19
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 272, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 55, 24} true;
  assume {:verifier.code 1} true;
  assert {:overflow} $i0 == $0;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 56, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0bv64, 9294bv64));
procedure  __SMACK_nondet_char()
  returns ($r: bv8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0bv64, 10326bv64));
procedure  __SMACK_nondet_signed_char()
  returns ($r: bv8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0bv64, 11358bv64));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: bv8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0bv64, 12390bv64));
procedure  __SMACK_nondet_short()
  returns ($r: bv16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0bv64, 13422bv64));
procedure  __SMACK_nondet_signed_short()
  returns ($r: bv16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0bv64, 14454bv64));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: bv16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0bv64, 15486bv64));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: bv16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0bv64, 16518bv64));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: bv16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0bv64, 17550bv64));
procedure  __VERIFIER_nondet_int()
  returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv1;
  var $i3: bv1;
  var $i2: bv1;
  var $i4: bv32;
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 115, 11} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 115, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_bv32($i0);
  // WARNING: %1 = call i32 @__SMACK_nondet_int(), !dbg !16, !verifier.code !17
  call {:cexpr "x"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 116, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.bv32($i0, $sub.bv32(0bv32, 2147483648bv32));
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0bv1;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 116, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.bv32($i0, 2147483647bv32);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1bv1));
  goto $bb3;
$bb3:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 116, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.bv1.bv32($i2);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 116, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 117, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0bv64, 18582bv64));
procedure  __SMACK_nondet_int()
  returns ($r: bv32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0bv64, 19614bv64));
procedure  __SMACK_nondet_signed_int()
  returns ($r: bv32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0bv64, 20646bv64));
procedure  __SMACK_nondet_unsigned()
  returns ($r: bv32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0bv64, 21678bv64));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: bv32);
const __VERIFIER_nondet_long: ref;
axiom (__VERIFIER_nondet_long == $sub.ref(0bv64, 22710bv64));
procedure  __VERIFIER_nondet_long()
  returns ($r: bv64)
{
  var $i0: bv64;
  var $i1: bv1;
  var $i3: bv1;
  var $i2: bv1;
  var $i4: bv32;
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 145, 12} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 145, 12} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_long();
  call {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_bv64($i0);
  // WARNING: %1 = call i64 @__SMACK_nondet_long(), !dbg !16, !verifier.code !17
  call {:cexpr "x"} boogie_si_record_bv64($i0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 146, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.bv64($i0, $sub.bv64(0bv64, 9223372036854775808bv64));
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 146, 35} true;
  assume {:verifier.code 0} true;
  $i2 := 0bv1;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 146, 40} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.bv64($i0, 9223372036854775807bv64);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 146, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1bv1));
  goto $bb3;
$bb3:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 146, 35} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.bv1.bv32($i2);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 146, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 147, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0bv64, 23742bv64));
procedure  __SMACK_nondet_long()
  returns ($r: bv64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0bv64, 24774bv64));
procedure  __SMACK_nondet_long_int()
  returns ($r: bv64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0bv64, 25806bv64));
procedure  __SMACK_nondet_signed_long()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0bv64, 26838bv64));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0bv64, 27870bv64));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0bv64, 28902bv64));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: bv64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0bv64, 29934bv64));
procedure  __SMACK_nondet_long_long()
  returns ($r: bv64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0bv64, 30966bv64));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0bv64, 31998bv64));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0bv64, 33030bv64));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0bv64, 34062bv64));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0bv64, 35094bv64));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: bv64);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0bv64, 36126bv64));
function {:inline} $bitcast.ref.ref(i: ref) returns (ref) {i}
function {:inline} $zext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 1bv8}
function {:inline} $zext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 1bv16}
function {:inline} $zext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 1bv24}
function {:inline} $zext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 1bv32}
function {:inline} $zext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1bv40}
function {:inline} $zext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 1bv48}
function {:inline} $zext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 1bv56}
function {:inline} $zext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 1bv64}
function {:inline} $zext.bv1.bv80(i: bv1) returns (bv80) {if i == 0bv1 then 0bv80 else 1bv80}
function {:inline} $zext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 1bv88}
function {:inline} $zext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 1bv96}
function {:inline} $zext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 1bv128}
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) returns (bv80);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) returns (bv80);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) returns (bv80);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) returns (bv80);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) returns (bv80);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) returns (bv80);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) returns (bv80);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) returns (bv80);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) returns (bv88);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) returns (bv96);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $sext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 255bv8}
function {:inline} $sext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 65535bv16}
function {:inline} $sext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 16777215bv24}
function {:inline} $sext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 4294967295bv32}
function {:inline} $sext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1099511627775bv40}
function {:inline} $sext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 281474976710655bv48}
function {:inline} $sext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 72057594037927935bv56}
function {:inline} $sext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 18446744073709551615bv64}
function {:inline} $sext.bv1.bv80(i: bv1) returns (bv80) {if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80}
function {:inline} $sext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88}
function {:inline} $sext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96}
function {:inline} $sext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128}
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) returns (bv80);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) returns (bv80);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) returns (bv80);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) returns (bv80);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) returns (bv80);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) returns (bv80);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) returns (bv80);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) returns (bv80);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) returns (bv88);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) returns (bv96);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:builtin "div"} $div(i1: int, i2: int) returns (int);
function {:builtin "mod"} $mod(i1: int, i2: int) returns (int);
function {:builtin "rem"} $rem(i1: int, i2: int) returns (int);
function {:inline} $min(i1: int, i2: int) returns (int) {if i1 < i2 then i1 else i2}
function {:inline} $max(i1: int, i2: int) returns (int) {if i1 > i2 then i1 else i2}
axiom $and.i1(0,0) == 0;
axiom $and.i1(0,1) == 0;
axiom $and.i1(1,0) == 0;
axiom $and.i1(1,1) == 1;
axiom $or.i1(0,0) == 0;
axiom $or.i1(0,1) == 1;
axiom $or.i1(1,0) == 1;
axiom $or.i1(1,1) == 1;
axiom $xor.i1(0,0) == 0;
axiom $xor.i1(0,1) == 1;
axiom $xor.i1(1,0) == 1;
axiom $xor.i1(1,1) == 0;
axiom($and.i32(32, 16) == 0);
function $fp(ipart:int, fpart:int, epart:int) returns (float);
function $fadd.float(i1: float, i2: float) returns (float);
function $fsub.float(i1: float, i2: float) returns (float);
function $fmul.float(i1: float, i2: float) returns (float);
function $fdiv.float(i1: float, i2: float) returns (float);
function $frem.float(i1: float, i2: float) returns (float);
function {:inline} $ffalse.float.bool(i1: float, i2: float) returns (bool) {false}
function {:inline} $ftrue.float.bool(i1: float, i2: float) returns (bool) {true}
function $foeq.float.bool(i1: float, i2: float) returns (bool);
function $foge.float.bool(i1: float, i2: float) returns (bool);
function $fogt.float.bool(i1: float, i2: float) returns (bool);
function $fole.float.bool(i1: float, i2: float) returns (bool);
function $folt.float.bool(i1: float, i2: float) returns (bool);
function $fone.float.bool(i1: float, i2: float) returns (bool);
function $ford.float.bool(i1: float, i2: float) returns (bool);
function $fueq.float.bool(i1: float, i2: float) returns (bool);
function $fuge.float.bool(i1: float, i2: float) returns (bool);
function $fugt.float.bool(i1: float, i2: float) returns (bool);
function $fule.float.bool(i1: float, i2: float) returns (bool);
function $fult.float.bool(i1: float, i2: float) returns (bool);
function $fune.float.bool(i1: float, i2: float) returns (bool);
function $funo.float.bool(i1: float, i2: float) returns (bool);
function $fp2si.float.i128(i: float) returns (i128);
function $fp2ui.float.i128(i: float) returns (i128);
function $fp2si.float.i96(i: float) returns (i96);
function $fp2ui.float.i96(i: float) returns (i96);
function $fp2si.float.i88(i: float) returns (i88);
function $fp2ui.float.i88(i: float) returns (i88);
function $fp2si.float.i80(i: float) returns (i80);
function $fp2ui.float.i80(i: float) returns (i80);
function $fp2si.float.i64(i: float) returns (i64);
function $fp2ui.float.i64(i: float) returns (i64);
function $fp2si.float.i56(i: float) returns (i56);
function $fp2ui.float.i56(i: float) returns (i56);
function $fp2si.float.i48(i: float) returns (i48);
function $fp2ui.float.i48(i: float) returns (i48);
function $fp2si.float.i40(i: float) returns (i40);
function $fp2ui.float.i40(i: float) returns (i40);
function $fp2si.float.i32(i: float) returns (i32);
function $fp2ui.float.i32(i: float) returns (i32);
function $fp2si.float.i24(i: float) returns (i24);
function $fp2ui.float.i24(i: float) returns (i24);
function $fp2si.float.i16(i: float) returns (i16);
function $fp2ui.float.i16(i: float) returns (i16);
function $fp2si.float.i8(i: float) returns (i8);
function $fp2ui.float.i8(i: float) returns (i8);
function $fp2si.float.i1(i: float) returns (i1);
function $fp2ui.float.i1(i: float) returns (i1);
function $si2fp.i128.float(i: i128) returns (float);
function $ui2fp.i128.float(i: i128) returns (float);
function $si2fp.i96.float(i: i96) returns (float);
function $ui2fp.i96.float(i: i96) returns (float);
function $si2fp.i88.float(i: i88) returns (float);
function $ui2fp.i88.float(i: i88) returns (float);
function $si2fp.i80.float(i: i80) returns (float);
function $ui2fp.i80.float(i: i80) returns (float);
function $si2fp.i64.float(i: i64) returns (float);
function $ui2fp.i64.float(i: i64) returns (float);
function $si2fp.i56.float(i: i56) returns (float);
function $ui2fp.i56.float(i: i56) returns (float);
function $si2fp.i48.float(i: i48) returns (float);
function $ui2fp.i48.float(i: i48) returns (float);
function $si2fp.i40.float(i: i40) returns (float);
function $ui2fp.i40.float(i: i40) returns (float);
function $si2fp.i32.float(i: i32) returns (float);
function $ui2fp.i32.float(i: i32) returns (float);
function $si2fp.i24.float(i: i24) returns (float);
function $ui2fp.i24.float(i: i24) returns (float);
function $si2fp.i16.float(i: i16) returns (float);
function $ui2fp.i16.float(i: i16) returns (float);
function $si2fp.i8.float(i: i8) returns (float);
function $ui2fp.i8.float(i: i8) returns (float);
function $si2fp.i1.float(i: i1) returns (float);
function $ui2fp.i1.float(i: i1) returns (float);
function $fp2si.float.bv128(i: float) returns (bv128);
function $fp2ui.float.bv128(i: float) returns (bv128);
function $fp2si.float.bv96(i: float) returns (bv96);
function $fp2ui.float.bv96(i: float) returns (bv96);
function $fp2si.float.bv88(i: float) returns (bv88);
function $fp2ui.float.bv88(i: float) returns (bv88);
function $fp2si.float.bv80(i: float) returns (bv80);
function $fp2ui.float.bv80(i: float) returns (bv80);
function $fp2si.float.bv64(i: float) returns (bv64);
function $fp2ui.float.bv64(i: float) returns (bv64);
function $fp2si.float.bv56(i: float) returns (bv56);
function $fp2ui.float.bv56(i: float) returns (bv56);
function $fp2si.float.bv48(i: float) returns (bv48);
function $fp2ui.float.bv48(i: float) returns (bv48);
function $fp2si.float.bv40(i: float) returns (bv40);
function $fp2ui.float.bv40(i: float) returns (bv40);
function $fp2si.float.bv32(i: float) returns (bv32);
function $fp2ui.float.bv32(i: float) returns (bv32);
function $fp2si.float.bv24(i: float) returns (bv24);
function $fp2ui.float.bv24(i: float) returns (bv24);
function $fp2si.float.bv16(i: float) returns (bv16);
function $fp2ui.float.bv16(i: float) returns (bv16);
function $fp2si.float.bv8(i: float) returns (bv8);
function $fp2ui.float.bv8(i: float) returns (bv8);
function $fp2si.float.bv1(i: float) returns (bv1);
function $fp2ui.float.bv1(i: float) returns (bv1);
function $si2fp.bv128.float(i: bv128) returns (float);
function $ui2fp.bv128.float(i: bv128) returns (float);
function $si2fp.bv96.float(i: bv96) returns (float);
function $ui2fp.bv96.float(i: bv96) returns (float);
function $si2fp.bv88.float(i: bv88) returns (float);
function $ui2fp.bv88.float(i: bv88) returns (float);
function $si2fp.bv80.float(i: bv80) returns (float);
function $ui2fp.bv80.float(i: bv80) returns (float);
function $si2fp.bv64.float(i: bv64) returns (float);
function $ui2fp.bv64.float(i: bv64) returns (float);
function $si2fp.bv56.float(i: bv56) returns (float);
function $ui2fp.bv56.float(i: bv56) returns (float);
function $si2fp.bv48.float(i: bv48) returns (float);
function $ui2fp.bv48.float(i: bv48) returns (float);
function $si2fp.bv40.float(i: bv40) returns (float);
function $ui2fp.bv40.float(i: bv40) returns (float);
function $si2fp.bv32.float(i: bv32) returns (float);
function $ui2fp.bv32.float(i: bv32) returns (float);
function $si2fp.bv24.float(i: bv24) returns (float);
function $ui2fp.bv24.float(i: bv24) returns (float);
function $si2fp.bv16.float(i: bv16) returns (float);
function $ui2fp.bv16.float(i: bv16) returns (float);
function $si2fp.bv8.float(i: bv8) returns (float);
function $ui2fp.bv8.float(i: bv8) returns (float);
function $si2fp.bv1.float(i: bv1) returns (float);
function $ui2fp.bv1.float(i: bv1) returns (float);
function $fptrunc.float.float(i: float) returns (float);
function $fpext.float.float(i: float) returns (float);
function $bitcast.float.i1(i: float) returns (i1);
function $bitcast.float.bv1(i: float) returns (bv1);
function $bitcast.i1.float(i: i1) returns (float);
function $bitcast.bv1.float(i: bv1) returns (float);
function $bitcast.float.i8(i: float) returns (i8);
function $bitcast.float.bv8(i: float) returns (bv8);
function $bitcast.i8.float(i: i8) returns (float);
function $bitcast.bv8.float(i: bv8) returns (float);
function $bitcast.float.i16(i: float) returns (i16);
function $bitcast.float.bv16(i: float) returns (bv16);
function $bitcast.i16.float(i: i16) returns (float);
function $bitcast.bv16.float(i: bv16) returns (float);
function $bitcast.float.i32(i: float) returns (i32);
function $bitcast.float.bv32(i: float) returns (bv32);
function $bitcast.i32.float(i: i32) returns (float);
function $bitcast.bv32.float(i: bv32) returns (float);
function $bitcast.float.i64(i: float) returns (i64);
function $bitcast.float.bv64(i: float) returns (bv64);
function $bitcast.i64.float(i: i64) returns (float);
function $bitcast.bv64.float(i: bv64) returns (float);
function $bitcast.float.i80(i: float) returns (i80);
function $bitcast.float.bv80(i: float) returns (bv80);
function $bitcast.i80.float(i: i80) returns (float);
function $bitcast.bv80.float(i: bv80) returns (float);
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;
function {:inline} $isExternal(p: ref) returns (bool) {$slt.ref.bool(p,$EXTERNS_BOTTOM)}
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16) {$load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24) {$load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32) {$load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40) {$load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48) {$load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56) {$load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64) {$load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv72(M: [ref] bv8, p: ref) returns (bv72) {$load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv80(M: [ref] bv8, p: ref) returns (bv80) {$load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88) {$load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96) {$load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv104(M: [ref] bv8, p: ref) returns (bv104) {$load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv112(M: [ref] bv8, p: ref) returns (bv112) {$load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv120(M: [ref] bv8, p: ref) returns (bv120) {$load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128) {$load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M,p)}
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $load.bytes.bv1(M: [ref] bv8, p: ref) returns (bv1) { $trunc.bv8.bv1(M[p]) }
function {:inline} $store.bytes.bv16(M: [ref] bv8, p: ref, v: bv16) returns ([ref] bv8) {$store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv24(M: [ref] bv8, p: ref, v: bv24) returns ([ref] bv8) {$store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv32(M: [ref] bv8, p: ref, v: bv32) returns ([ref] bv8) {$store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv40(M: [ref] bv8, p: ref, v: bv40) returns ([ref] bv8) {$store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv48(M: [ref] bv8, p: ref, v: bv48) returns ([ref] bv8) {$store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv56(M: [ref] bv8, p: ref, v: bv56) returns ([ref] bv8) {$store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv64(M: [ref] bv8, p: ref, v: bv64) returns ([ref] bv8) {$store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv72(M: [ref] bv8, p: ref, v: bv72) returns ([ref] bv8) {$store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv80(M: [ref] bv8, p: ref, v: bv80) returns ([ref] bv8) {$store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv88(M: [ref] bv8, p: ref, v: bv88) returns ([ref] bv8) {$store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv96(M: [ref] bv8, p: ref, v: bv96) returns ([ref] bv8) {$store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv104(M: [ref] bv8, p: ref, v: bv104) returns ([ref] bv8) {$store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv112(M: [ref] bv8, p: ref, v: bv112) returns ([ref] bv8) {$store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv120(M: [ref] bv8, p: ref, v: bv120) returns ([ref] bv8) {$store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv128(M: [ref] bv8, p: ref, v: bv128) returns ([ref] bv8) {$store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]}
function {:inline} $store.bytes.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) {M[p := v]}
function {:inline} $store.bytes.bv1(M: [ref] bv8, p: ref, v: bv1) returns ([ref] bv8) {M[p := $zext.bv1.bv8(v)]}
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, v: ref) returns ([ref] ref) { M[p := v] }
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $load.unsafe.float(M: [ref] i8, p: ref) returns (float) { $bitcast.i8.float(M[p]) }
function {:inline} $store.float(M: [ref] float, p: ref, v: float) returns ([ref] float) { M[p := v] }
function {:inline} $store.unsafe.float(M: [ref] i8, p: ref, v: float) returns ([ref] i8) { M[p := $bitcast.float.i8(v)] }
function {:inline} $load.bytes.float(M: [ref] bv8, p: ref) returns (float) { $bitcast.bv8.float(M[p]) }
function {:inline} $store.bytes.float(M:[ref]bv8, p:ref, v:float) returns ([ref]bv8) {M[p := $bitcast.float.bv8(v)]}
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
var $exn: bool;
var $exnv: int;
function $extractvalue(p: int, i: int) returns (int);

procedure  $alloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0bv64, 37158bv64));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0bv64, 38190bv64));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1467, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1467, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1472, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0bv64, 39222bv64));
procedure  llvm.dbg.value($p0: ref, $i1: bv64, $p2: ref, $p3: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0bv64, 40254bv64));
procedure  __SMACK_static_init()
{
$bb0:
  $exn := false;
  return;
}
const $u0: bv32;
const $u1: bv64;
procedure  boogie_si_record_bv32(x: bv32);
procedure  boogie_si_record_bv64(x: bv64);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function $shl.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function $and.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function $or.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2}
function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) {if $ule.i1.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2}
function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) {if $ult.i1.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2}
function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) {if $uge.i1.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2}
function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) {if $ugt.i1.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2}
function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) {if $sle.i1.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2}
function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) {if $slt.i1.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2}
function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) {if $sge.i1.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2}
function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) {if $sgt.i1.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 == i2}
function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) {if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) {i1 == i2}
function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) {if $eq.i1.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 != i2}
function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) {i1 != i2}
function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) {if $ne.i1.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) returns (bv1);
function $not.i1(i1: i1) returns (i1);
function {:inline} $load.i1(M: [ref] i1, p: ref) returns (i1) {M[p]}
function {:inline} $load.bv1(M: [ref] bv1, p: ref) returns (bv1) {M[p]}
function {:inline} $store.i1(M: [ref] i1, p: ref, v: i1) returns ([ref] i1) {M[p := v]}
function {:inline} $store.bv1(M: [ref] bv1, p: ref, v: bv1) returns ([ref] bv1) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function $and.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function $or.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2}
function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) {if $ule.i8.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2}
function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) {if $ult.i8.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2}
function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) {if $uge.i8.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2}
function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) {if $ugt.i8.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2}
function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) {if $sle.i8.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2}
function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) {if $slt.i8.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2}
function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) {if $sge.i8.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2}
function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) {if $sgt.i8.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 == i2}
function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) {if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) {i1 == i2}
function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) {if $eq.i8.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 != i2}
function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) {i1 != i2}
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) {if $ne.i8.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv8(i1: bv8, i2: bv8) returns (bv8) {if $slt.bv8.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv8(i1: bv8, i2: bv8) returns (bv8) {if $sgt.bv8.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ult.bv8.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ugt.bv8.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) returns (bv8);
function $not.i8(i1: i8) returns (i8);
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) {M[p]}
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) {M[p]}
function {:inline} $store.i8(M: [ref] i8, p: ref, v: i8) returns ([ref] i8) {M[p := v]}
function {:inline} $store.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function $and.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function $or.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2}
function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) {if $ule.i16.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2}
function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) {if $ult.i16.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2}
function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) {if $uge.i16.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2}
function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) {if $ugt.i16.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2}
function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) {if $sle.i16.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2}
function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) {if $slt.i16.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2}
function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) {if $sge.i16.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2}
function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) {if $sgt.i16.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 == i2}
function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) {if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) {i1 == i2}
function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) {if $eq.i16.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 != i2}
function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) {i1 != i2}
function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) {if $ne.i16.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv16(i1: bv16, i2: bv16) returns (bv16) {if $slt.bv16.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv16(i1: bv16, i2: bv16) returns (bv16) {if $sgt.bv16.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ult.bv16.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ugt.bv16.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) returns (bv16);
function $not.i16(i1: i16) returns (i16);
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) {M[p]}
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) {M[p]}
function {:inline} $store.i16(M: [ref] i16, p: ref, v: i16) returns ([ref] i16) {M[p := v]}
function {:inline} $store.bv16(M: [ref] bv16, p: ref, v: bv16) returns ([ref] bv16) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function $and.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function $or.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2}
function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) {if $ule.i24.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2}
function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) {if $ult.i24.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2}
function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) {if $uge.i24.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2}
function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) {if $ugt.i24.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2}
function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) {if $sle.i24.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2}
function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) {if $slt.i24.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2}
function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) {if $sge.i24.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2}
function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) {if $sgt.i24.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 == i2}
function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) {if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) {i1 == i2}
function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) {if $eq.i24.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 != i2}
function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) {i1 != i2}
function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) {if $ne.i24.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv24(i1: bv24, i2: bv24) returns (bv24) {if $slt.bv24.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv24(i1: bv24, i2: bv24) returns (bv24) {if $sgt.bv24.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ult.bv24.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ugt.bv24.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) returns (bv24);
function $not.i24(i1: i24) returns (i24);
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) {M[p]}
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) {M[p]}
function {:inline} $store.i24(M: [ref] i24, p: ref, v: i24) returns ([ref] i24) {M[p := v]}
function {:inline} $store.bv24(M: [ref] bv24, p: ref, v: bv24) returns ([ref] bv24) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function $and.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function $or.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2}
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) {if $ule.i32.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2}
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) {if $ult.i32.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2}
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) {if $uge.i32.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2}
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) {if $ugt.i32.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2}
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) {if $sle.i32.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2}
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) {if $slt.i32.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2}
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) {if $sge.i32.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2}
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) {if $sgt.i32.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 == i2}
function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) {if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) {i1 == i2}
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) {if $eq.i32.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 != i2}
function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) {i1 != i2}
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) {if $ne.i32.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv32(i1: bv32, i2: bv32) returns (bv32) {if $slt.bv32.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv32(i1: bv32, i2: bv32) returns (bv32) {if $sgt.bv32.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ult.bv32.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ugt.bv32.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) returns (bv32);
function $not.i32(i1: i32) returns (i32);
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) {M[p]}
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) {M[p]}
function {:inline} $store.i32(M: [ref] i32, p: ref, v: i32) returns ([ref] i32) {M[p := v]}
function {:inline} $store.bv32(M: [ref] bv32, p: ref, v: bv32) returns ([ref] bv32) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function $and.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function $or.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2}
function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) {if $ule.i40.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2}
function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) {if $ult.i40.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2}
function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) {if $uge.i40.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2}
function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) {if $ugt.i40.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2}
function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) {if $sle.i40.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2}
function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) {if $slt.i40.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2}
function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) {if $sge.i40.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2}
function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) {if $sgt.i40.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 == i2}
function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) {if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) {i1 == i2}
function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) {if $eq.i40.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 != i2}
function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) {i1 != i2}
function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) {if $ne.i40.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv40(i1: bv40, i2: bv40) returns (bv40) {if $slt.bv40.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv40(i1: bv40, i2: bv40) returns (bv40) {if $sgt.bv40.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ult.bv40.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ugt.bv40.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) returns (bv40);
function $not.i40(i1: i40) returns (i40);
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) {M[p]}
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) {M[p]}
function {:inline} $store.i40(M: [ref] i40, p: ref, v: i40) returns ([ref] i40) {M[p := v]}
function {:inline} $store.bv40(M: [ref] bv40, p: ref, v: bv40) returns ([ref] bv40) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function $and.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function $or.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2}
function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) {if $ule.i48.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2}
function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) {if $ult.i48.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2}
function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) {if $uge.i48.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2}
function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) {if $ugt.i48.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2}
function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) {if $sle.i48.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2}
function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) {if $slt.i48.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2}
function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) {if $sge.i48.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2}
function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) {if $sgt.i48.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 == i2}
function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) {if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) {i1 == i2}
function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) {if $eq.i48.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 != i2}
function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) {i1 != i2}
function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) {if $ne.i48.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv48(i1: bv48, i2: bv48) returns (bv48) {if $slt.bv48.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv48(i1: bv48, i2: bv48) returns (bv48) {if $sgt.bv48.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ult.bv48.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ugt.bv48.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) returns (bv48);
function $not.i48(i1: i48) returns (i48);
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) {M[p]}
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) {M[p]}
function {:inline} $store.i48(M: [ref] i48, p: ref, v: i48) returns ([ref] i48) {M[p := v]}
function {:inline} $store.bv48(M: [ref] bv48, p: ref, v: bv48) returns ([ref] bv48) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function $and.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function $or.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2}
function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) {if $ule.i56.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2}
function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) {if $ult.i56.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2}
function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) {if $uge.i56.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2}
function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) {if $ugt.i56.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2}
function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) {if $sle.i56.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2}
function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) {if $slt.i56.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2}
function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) {if $sge.i56.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2}
function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) {if $sgt.i56.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 == i2}
function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) {if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) {i1 == i2}
function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) {if $eq.i56.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 != i2}
function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) {i1 != i2}
function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) {if $ne.i56.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv56(i1: bv56, i2: bv56) returns (bv56) {if $slt.bv56.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv56(i1: bv56, i2: bv56) returns (bv56) {if $sgt.bv56.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ult.bv56.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ugt.bv56.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) returns (bv56);
function $not.i56(i1: i56) returns (i56);
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) {M[p]}
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) {M[p]}
function {:inline} $store.i56(M: [ref] i56, p: ref, v: i56) returns ([ref] i56) {M[p := v]}
function {:inline} $store.bv56(M: [ref] bv56, p: ref, v: bv56) returns ([ref] bv56) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function $and.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function $or.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2}
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) {if $ule.i64.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2}
function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) {if $ult.i64.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2}
function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) {if $uge.i64.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2}
function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) {if $ugt.i64.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2}
function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) {if $sle.i64.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2}
function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) {if $slt.i64.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2}
function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) {if $sge.i64.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2}
function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) {if $sgt.i64.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 == i2}
function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) {if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) {i1 == i2}
function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) {if $eq.i64.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 != i2}
function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) {i1 != i2}
function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) {if $ne.i64.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv64(i1: bv64, i2: bv64) returns (bv64) {if $slt.bv64.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv64(i1: bv64, i2: bv64) returns (bv64) {if $sgt.bv64.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ult.bv64.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ugt.bv64.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) returns (bv64);
function $not.i64(i1: i64) returns (i64);
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) {M[p]}
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) {M[p]}
function {:inline} $store.i64(M: [ref] i64, p: ref, v: i64) returns ([ref] i64) {M[p := v]}
function {:inline} $store.bv64(M: [ref] bv64, p: ref, v: bv64) returns ([ref] bv64) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:inline} $add.i80(i1: i80, i2: i80) returns (i80) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:inline} $sub.i80(i1: i80, i2: i80) returns (i80) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:inline} $mul.i80(i1: i80, i2: i80) returns (i80) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) returns (bv80);
function $shl.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) returns (bv80);
function $lshr.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) returns (bv80);
function $ashr.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) returns (bv80);
function $and.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) returns (bv80);
function $or.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) returns (bv80);
function $xor.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) returns (bv80);
function $nand.i80(i1: i80, i2: i80) returns (i80);
function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $ule.bv80(i1: bv80, i2: bv80) returns (bv1) {if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i80.bool(i1: i80, i2: i80) returns (bool) {i1 <= i2}
function {:inline} $ule.i80(i1: i80, i2: i80) returns (i1) {if $ule.i80.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $ult.bv80(i1: bv80, i2: bv80) returns (bv1) {if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i80.bool(i1: i80, i2: i80) returns (bool) {i1 < i2}
function {:inline} $ult.i80(i1: i80, i2: i80) returns (i1) {if $ult.i80.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $uge.bv80(i1: bv80, i2: bv80) returns (bv1) {if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i80.bool(i1: i80, i2: i80) returns (bool) {i1 >= i2}
function {:inline} $uge.i80(i1: i80, i2: i80) returns (i1) {if $uge.i80.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $ugt.bv80(i1: bv80, i2: bv80) returns (bv1) {if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i80.bool(i1: i80, i2: i80) returns (bool) {i1 > i2}
function {:inline} $ugt.i80(i1: i80, i2: i80) returns (i1) {if $ugt.i80.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $sle.bv80(i1: bv80, i2: bv80) returns (bv1) {if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i80.bool(i1: i80, i2: i80) returns (bool) {i1 <= i2}
function {:inline} $sle.i80(i1: i80, i2: i80) returns (i1) {if $sle.i80.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $slt.bv80(i1: bv80, i2: bv80) returns (bv1) {if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i80.bool(i1: i80, i2: i80) returns (bool) {i1 < i2}
function {:inline} $slt.i80(i1: i80, i2: i80) returns (i1) {if $slt.i80.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $sge.bv80(i1: bv80, i2: bv80) returns (bv1) {if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i80.bool(i1: i80, i2: i80) returns (bool) {i1 >= i2}
function {:inline} $sge.i80(i1: i80, i2: i80) returns (i1) {if $sge.i80.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $sgt.bv80(i1: bv80, i2: bv80) returns (bv1) {if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i80.bool(i1: i80, i2: i80) returns (bool) {i1 > i2}
function {:inline} $sgt.i80(i1: i80, i2: i80) returns (i1) {if $sgt.i80.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) returns (bool) {i1 == i2}
function {:inline} $eq.bv80(i1: bv80, i2: bv80) returns (bv1) {if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i80.bool(i1: i80, i2: i80) returns (bool) {i1 == i2}
function {:inline} $eq.i80(i1: i80, i2: i80) returns (i1) {if $eq.i80.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) returns (bool) {i1 != i2}
function {:inline} $ne.bv80(i1: bv80, i2: bv80) returns (bv1) {if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i80.bool(i1: i80, i2: i80) returns (bool) {i1 != i2}
function {:inline} $ne.i80(i1: i80, i2: i80) returns (i1) {if $ne.i80.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv80(i1: bv80, i2: bv80) returns (bv80) {if $slt.bv80.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv80(i1: bv80, i2: bv80) returns (bv80) {if $sgt.bv80.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv80(i1: bv80, i2: bv80) returns (bv80) {if $ult.bv80.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv80(i1: bv80, i2: bv80) returns (bv80) {if $ugt.bv80.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i80(i1: i80, i2: i80) returns (i80) {$min(i1,i2)}
function {:inline} $smax.i80(i1: i80, i2: i80) returns (i80) {$max(i1,i2)}
function {:inline} $umin.i80(i1: i80, i2: i80) returns (i80) {$min(i1,i2)}
function {:inline} $umax.i80(i1: i80, i2: i80) returns (i80) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) returns (bv80);
function $not.i80(i1: i80) returns (i80);
function {:inline} $load.i80(M: [ref] i80, p: ref) returns (i80) {M[p]}
function {:inline} $load.bv80(M: [ref] bv80, p: ref) returns (bv80) {M[p]}
function {:inline} $store.i80(M: [ref] i80, p: ref, v: i80) returns ([ref] i80) {M[p := v]}
function {:inline} $store.bv80(M: [ref] bv80, p: ref, v: bv80) returns ([ref] bv80) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function $and.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function $or.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2}
function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) {if $ule.i88.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2}
function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) {if $ult.i88.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2}
function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) {if $uge.i88.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2}
function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) {if $ugt.i88.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2}
function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) {if $sle.i88.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2}
function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) {if $slt.i88.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2}
function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) {if $sge.i88.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2}
function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) {if $sgt.i88.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 == i2}
function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) {if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) {i1 == i2}
function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) {if $eq.i88.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 != i2}
function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) {i1 != i2}
function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) {if $ne.i88.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv88(i1: bv88, i2: bv88) returns (bv88) {if $slt.bv88.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv88(i1: bv88, i2: bv88) returns (bv88) {if $sgt.bv88.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ult.bv88.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ugt.bv88.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) returns (bv88);
function $not.i88(i1: i88) returns (i88);
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) {M[p]}
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) {M[p]}
function {:inline} $store.i88(M: [ref] i88, p: ref, v: i88) returns ([ref] i88) {M[p := v]}
function {:inline} $store.bv88(M: [ref] bv88, p: ref, v: bv88) returns ([ref] bv88) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function $and.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function $or.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2}
function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) {if $ule.i96.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2}
function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) {if $ult.i96.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2}
function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) {if $uge.i96.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2}
function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) {if $ugt.i96.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2}
function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) {if $sle.i96.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2}
function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) {if $slt.i96.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2}
function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) {if $sge.i96.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2}
function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) {if $sgt.i96.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 == i2}
function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) {if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) {i1 == i2}
function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) {if $eq.i96.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 != i2}
function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) {i1 != i2}
function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) {if $ne.i96.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv96(i1: bv96, i2: bv96) returns (bv96) {if $slt.bv96.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv96(i1: bv96, i2: bv96) returns (bv96) {if $sgt.bv96.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ult.bv96.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ugt.bv96.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) returns (bv96);
function $not.i96(i1: i96) returns (i96);
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) {M[p]}
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) {M[p]}
function {:inline} $store.i96(M: [ref] i96, p: ref, v: i96) returns ([ref] i96) {M[p := v]}
function {:inline} $store.bv96(M: [ref] bv96, p: ref, v: bv96) returns ([ref] bv96) {M[p := v]}
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) {i1 + i2}
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) {i1 - i2}
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) {i1 * i2}
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function $shl.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function $and.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function $or.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2}
function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) {if $ule.i128.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2}
function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) {if $ult.i128.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2}
function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) {if $uge.i128.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2}
function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) {if $ugt.i128.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2}
function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) {if $sle.i128.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2}
function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) {if $slt.i128.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2}
function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) {if $sge.i128.bool(i1, i2) then 1 else 0}
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2}
function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) {if $sgt.i128.bool(i1, i2) then 1 else 0}
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 == i2}
function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) {if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) {i1 == i2}
function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) {if $eq.i128.bool(i1, i2) then 1 else 0}
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 != i2}
function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1}
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) {i1 != i2}
function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) {if $ne.i128.bool(i1, i2) then 1 else 0}
function {:inline} $min.bv128(i1: bv128, i2: bv128) returns (bv128) {if $slt.bv128.bool(i1, i2) then i1 else i2}
function {:inline} $max.bv128(i1: bv128, i2: bv128) returns (bv128) {if $sgt.bv128.bool(i1, i2) then i1 else i2}
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ult.bv128.bool(i1, i2) then i1 else i2}
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ugt.bv128.bool(i1, i2) then i1 else i2}
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) returns (bv128);
function $not.i128(i1: i128) returns (i128);
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) {M[p]}
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) {M[p]}
function {:inline} $store.i128(M: [ref] i128, p: ref, v: i128) returns ([ref] i128) {M[p := v]}
function {:inline} $store.bv128(M: [ref] bv128, p: ref, v: bv128) returns ([ref] bv128) {M[p := v]}
function {:inline} $trunc.bv8.bv1(i1: bv8) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i8.i1(i1: i8) returns (i1) {i1}
function {:inline} $zext.i1.i8(i1: i1) returns (i8) {i1}
function {:inline} $sext.i1.i8(i1: i1) returns (i8) {i1}
function {:inline} $trunc.bv16.bv1(i1: bv16) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i16.i1(i1: i16) returns (i1) {i1}
function {:inline} $zext.i1.i16(i1: i1) returns (i16) {i1}
function {:inline} $sext.i1.i16(i1: i1) returns (i16) {i1}
function {:inline} $trunc.bv24.bv1(i1: bv24) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i24.i1(i1: i24) returns (i1) {i1}
function {:inline} $zext.i1.i24(i1: i1) returns (i24) {i1}
function {:inline} $sext.i1.i24(i1: i1) returns (i24) {i1}
function {:inline} $trunc.bv32.bv1(i1: bv32) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i32.i1(i1: i32) returns (i1) {i1}
function {:inline} $zext.i1.i32(i1: i1) returns (i32) {i1}
function {:inline} $sext.i1.i32(i1: i1) returns (i32) {i1}
function {:inline} $trunc.bv40.bv1(i1: bv40) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i40.i1(i1: i40) returns (i1) {i1}
function {:inline} $zext.i1.i40(i1: i1) returns (i40) {i1}
function {:inline} $sext.i1.i40(i1: i1) returns (i40) {i1}
function {:inline} $trunc.bv48.bv1(i1: bv48) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i48.i1(i1: i48) returns (i1) {i1}
function {:inline} $zext.i1.i48(i1: i1) returns (i48) {i1}
function {:inline} $sext.i1.i48(i1: i1) returns (i48) {i1}
function {:inline} $trunc.bv56.bv1(i1: bv56) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i56.i1(i1: i56) returns (i1) {i1}
function {:inline} $zext.i1.i56(i1: i1) returns (i56) {i1}
function {:inline} $sext.i1.i56(i1: i1) returns (i56) {i1}
function {:inline} $trunc.bv64.bv1(i1: bv64) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i64.i1(i1: i64) returns (i1) {i1}
function {:inline} $zext.i1.i64(i1: i1) returns (i64) {i1}
function {:inline} $sext.i1.i64(i1: i1) returns (i64) {i1}
function {:inline} $trunc.bv80.bv1(i1: bv80) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i80.i1(i1: i80) returns (i1) {i1}
function {:inline} $zext.i1.i80(i1: i1) returns (i80) {i1}
function {:inline} $sext.i1.i80(i1: i1) returns (i80) {i1}
function {:inline} $trunc.bv88.bv1(i1: bv88) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i88.i1(i1: i88) returns (i1) {i1}
function {:inline} $zext.i1.i88(i1: i1) returns (i88) {i1}
function {:inline} $sext.i1.i88(i1: i1) returns (i88) {i1}
function {:inline} $trunc.bv96.bv1(i1: bv96) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i96.i1(i1: i96) returns (i1) {i1}
function {:inline} $zext.i1.i96(i1: i1) returns (i96) {i1}
function {:inline} $sext.i1.i96(i1: i1) returns (i96) {i1}
function {:inline} $trunc.bv128.bv1(i1: bv128) returns (bv1) {i1[1:0]}
function {:inline} $trunc.i128.i1(i1: i128) returns (i1) {i1}
function {:inline} $zext.i1.i128(i1: i1) returns (i128) {i1}
function {:inline} $sext.i1.i128(i1: i1) returns (i128) {i1}
function {:inline} $trunc.bv16.bv8(i1: bv16) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i16.i8(i1: i16) returns (i8) {i1}
function {:inline} $zext.i8.i16(i1: i8) returns (i16) {i1}
function {:inline} $sext.i8.i16(i1: i8) returns (i16) {i1}
function {:inline} $trunc.bv24.bv8(i1: bv24) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i24.i8(i1: i24) returns (i8) {i1}
function {:inline} $zext.i8.i24(i1: i8) returns (i24) {i1}
function {:inline} $sext.i8.i24(i1: i8) returns (i24) {i1}
function {:inline} $trunc.bv32.bv8(i1: bv32) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i32.i8(i1: i32) returns (i8) {i1}
function {:inline} $zext.i8.i32(i1: i8) returns (i32) {i1}
function {:inline} $sext.i8.i32(i1: i8) returns (i32) {i1}
function {:inline} $trunc.bv40.bv8(i1: bv40) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i40.i8(i1: i40) returns (i8) {i1}
function {:inline} $zext.i8.i40(i1: i8) returns (i40) {i1}
function {:inline} $sext.i8.i40(i1: i8) returns (i40) {i1}
function {:inline} $trunc.bv48.bv8(i1: bv48) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i48.i8(i1: i48) returns (i8) {i1}
function {:inline} $zext.i8.i48(i1: i8) returns (i48) {i1}
function {:inline} $sext.i8.i48(i1: i8) returns (i48) {i1}
function {:inline} $trunc.bv56.bv8(i1: bv56) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i56.i8(i1: i56) returns (i8) {i1}
function {:inline} $zext.i8.i56(i1: i8) returns (i56) {i1}
function {:inline} $sext.i8.i56(i1: i8) returns (i56) {i1}
function {:inline} $trunc.bv64.bv8(i1: bv64) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i64.i8(i1: i64) returns (i8) {i1}
function {:inline} $zext.i8.i64(i1: i8) returns (i64) {i1}
function {:inline} $sext.i8.i64(i1: i8) returns (i64) {i1}
function {:inline} $trunc.bv80.bv8(i1: bv80) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i80.i8(i1: i80) returns (i8) {i1}
function {:inline} $zext.i8.i80(i1: i8) returns (i80) {i1}
function {:inline} $sext.i8.i80(i1: i8) returns (i80) {i1}
function {:inline} $trunc.bv88.bv8(i1: bv88) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i88.i8(i1: i88) returns (i8) {i1}
function {:inline} $zext.i8.i88(i1: i8) returns (i88) {i1}
function {:inline} $sext.i8.i88(i1: i8) returns (i88) {i1}
function {:inline} $trunc.bv96.bv8(i1: bv96) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i96.i8(i1: i96) returns (i8) {i1}
function {:inline} $zext.i8.i96(i1: i8) returns (i96) {i1}
function {:inline} $sext.i8.i96(i1: i8) returns (i96) {i1}
function {:inline} $trunc.bv128.bv8(i1: bv128) returns (bv8) {i1[8:0]}
function {:inline} $trunc.i128.i8(i1: i128) returns (i8) {i1}
function {:inline} $zext.i8.i128(i1: i8) returns (i128) {i1}
function {:inline} $sext.i8.i128(i1: i8) returns (i128) {i1}
function {:inline} $trunc.bv24.bv16(i1: bv24) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i24.i16(i1: i24) returns (i16) {i1}
function {:inline} $zext.i16.i24(i1: i16) returns (i24) {i1}
function {:inline} $sext.i16.i24(i1: i16) returns (i24) {i1}
function {:inline} $trunc.bv32.bv16(i1: bv32) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i32.i16(i1: i32) returns (i16) {i1}
function {:inline} $zext.i16.i32(i1: i16) returns (i32) {i1}
function {:inline} $sext.i16.i32(i1: i16) returns (i32) {i1}
function {:inline} $trunc.bv40.bv16(i1: bv40) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i40.i16(i1: i40) returns (i16) {i1}
function {:inline} $zext.i16.i40(i1: i16) returns (i40) {i1}
function {:inline} $sext.i16.i40(i1: i16) returns (i40) {i1}
function {:inline} $trunc.bv48.bv16(i1: bv48) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i48.i16(i1: i48) returns (i16) {i1}
function {:inline} $zext.i16.i48(i1: i16) returns (i48) {i1}
function {:inline} $sext.i16.i48(i1: i16) returns (i48) {i1}
function {:inline} $trunc.bv56.bv16(i1: bv56) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i56.i16(i1: i56) returns (i16) {i1}
function {:inline} $zext.i16.i56(i1: i16) returns (i56) {i1}
function {:inline} $sext.i16.i56(i1: i16) returns (i56) {i1}
function {:inline} $trunc.bv64.bv16(i1: bv64) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i64.i16(i1: i64) returns (i16) {i1}
function {:inline} $zext.i16.i64(i1: i16) returns (i64) {i1}
function {:inline} $sext.i16.i64(i1: i16) returns (i64) {i1}
function {:inline} $trunc.bv80.bv16(i1: bv80) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i80.i16(i1: i80) returns (i16) {i1}
function {:inline} $zext.i16.i80(i1: i16) returns (i80) {i1}
function {:inline} $sext.i16.i80(i1: i16) returns (i80) {i1}
function {:inline} $trunc.bv88.bv16(i1: bv88) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i88.i16(i1: i88) returns (i16) {i1}
function {:inline} $zext.i16.i88(i1: i16) returns (i88) {i1}
function {:inline} $sext.i16.i88(i1: i16) returns (i88) {i1}
function {:inline} $trunc.bv96.bv16(i1: bv96) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i96.i16(i1: i96) returns (i16) {i1}
function {:inline} $zext.i16.i96(i1: i16) returns (i96) {i1}
function {:inline} $sext.i16.i96(i1: i16) returns (i96) {i1}
function {:inline} $trunc.bv128.bv16(i1: bv128) returns (bv16) {i1[16:0]}
function {:inline} $trunc.i128.i16(i1: i128) returns (i16) {i1}
function {:inline} $zext.i16.i128(i1: i16) returns (i128) {i1}
function {:inline} $sext.i16.i128(i1: i16) returns (i128) {i1}
function {:inline} $trunc.bv32.bv24(i1: bv32) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i32.i24(i1: i32) returns (i24) {i1}
function {:inline} $zext.i24.i32(i1: i24) returns (i32) {i1}
function {:inline} $sext.i24.i32(i1: i24) returns (i32) {i1}
function {:inline} $trunc.bv40.bv24(i1: bv40) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i40.i24(i1: i40) returns (i24) {i1}
function {:inline} $zext.i24.i40(i1: i24) returns (i40) {i1}
function {:inline} $sext.i24.i40(i1: i24) returns (i40) {i1}
function {:inline} $trunc.bv48.bv24(i1: bv48) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i48.i24(i1: i48) returns (i24) {i1}
function {:inline} $zext.i24.i48(i1: i24) returns (i48) {i1}
function {:inline} $sext.i24.i48(i1: i24) returns (i48) {i1}
function {:inline} $trunc.bv56.bv24(i1: bv56) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i56.i24(i1: i56) returns (i24) {i1}
function {:inline} $zext.i24.i56(i1: i24) returns (i56) {i1}
function {:inline} $sext.i24.i56(i1: i24) returns (i56) {i1}
function {:inline} $trunc.bv64.bv24(i1: bv64) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i64.i24(i1: i64) returns (i24) {i1}
function {:inline} $zext.i24.i64(i1: i24) returns (i64) {i1}
function {:inline} $sext.i24.i64(i1: i24) returns (i64) {i1}
function {:inline} $trunc.bv80.bv24(i1: bv80) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i80.i24(i1: i80) returns (i24) {i1}
function {:inline} $zext.i24.i80(i1: i24) returns (i80) {i1}
function {:inline} $sext.i24.i80(i1: i24) returns (i80) {i1}
function {:inline} $trunc.bv88.bv24(i1: bv88) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i88.i24(i1: i88) returns (i24) {i1}
function {:inline} $zext.i24.i88(i1: i24) returns (i88) {i1}
function {:inline} $sext.i24.i88(i1: i24) returns (i88) {i1}
function {:inline} $trunc.bv96.bv24(i1: bv96) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i96.i24(i1: i96) returns (i24) {i1}
function {:inline} $zext.i24.i96(i1: i24) returns (i96) {i1}
function {:inline} $sext.i24.i96(i1: i24) returns (i96) {i1}
function {:inline} $trunc.bv128.bv24(i1: bv128) returns (bv24) {i1[24:0]}
function {:inline} $trunc.i128.i24(i1: i128) returns (i24) {i1}
function {:inline} $zext.i24.i128(i1: i24) returns (i128) {i1}
function {:inline} $sext.i24.i128(i1: i24) returns (i128) {i1}
function {:inline} $trunc.bv40.bv32(i1: bv40) returns (bv32) {i1[32:0]}
function {:inline} $trunc.i40.i32(i1: i40) returns (i32) {i1}
function {:inline} $zext.i32.i40(i1: i32) returns (i40) {i1}
function {:inline} $sext.i32.i40(i1: i32) returns (i40) {i1}
function {:inline} $trunc.bv48.bv32(i1: bv48) returns (bv32) {i1[32:0]}
function {:inline} $trunc.i48.i32(i1: i48) returns (i32) {i1}
function {:inline} $zext.i32.i48(i1: i32) returns (i48) {i1}
function {:inline} $sext.i32.i48(i1: i32) returns (i48) {i1}
function {:inline} $trunc.bv56.bv32(i1: bv56) returns (bv32) {i1[32:0]}
function {:inline} $trunc.i56.i32(i1: i56) returns (i32) {i1}
function {:inline} $zext.i32.i56(i1: i32) returns (i56) {i1}
function {:inline} $sext.i32.i56(i1: i32) returns (i56) {i1}
function {:inline} $trunc.bv64.bv32(i1: bv64) returns (bv32) {i1[32:0]}
function {:inline} $trunc.i64.i32(i1: i64) returns (i32) {i1}
function {:inline} $zext.i32.i64(i1: i32) returns (i64) {i1}
function {:inline} $sext.i32.i64(i1: i32) returns (i64) {i1}
function {:inline} $trunc.bv80.bv32(i1: bv80) returns (bv32) {i1[32:0]}
function {:inline} $trunc.i80.i32(i1: i80) returns (i32) {i1}
function {:inline} $zext.i32.i80(i1: i32) returns (i80) {i1}
function {:inline} $sext.i32.i80(i1: i32) returns (i80) {i1}
function {:inline} $trunc.bv88.bv32(i1: bv88) returns (bv32) {i1[32:0]}
function {:inline} $trunc.i88.i32(i1: i88) returns (i32) {i1}
function {:inline} $zext.i32.i88(i1: i32) returns (i88) {i1}
function {:inline} $sext.i32.i88(i1: i32) returns (i88) {i1}
function {:inline} $trunc.bv96.bv32(i1: bv96) returns (bv32) {i1[32:0]}
function {:inline} $trunc.i96.i32(i1: i96) returns (i32) {i1}
function {:inline} $zext.i32.i96(i1: i32) returns (i96) {i1}
function {:inline} $sext.i32.i96(i1: i32) returns (i96) {i1}
function {:inline} $trunc.bv128.bv32(i1: bv128) returns (bv32) {i1[32:0]}
function {:inline} $trunc.i128.i32(i1: i128) returns (i32) {i1}
function {:inline} $zext.i32.i128(i1: i32) returns (i128) {i1}
function {:inline} $sext.i32.i128(i1: i32) returns (i128) {i1}
function {:inline} $trunc.bv48.bv40(i1: bv48) returns (bv40) {i1[40:0]}
function {:inline} $trunc.i48.i40(i1: i48) returns (i40) {i1}
function {:inline} $zext.i40.i48(i1: i40) returns (i48) {i1}
function {:inline} $sext.i40.i48(i1: i40) returns (i48) {i1}
function {:inline} $trunc.bv56.bv40(i1: bv56) returns (bv40) {i1[40:0]}
function {:inline} $trunc.i56.i40(i1: i56) returns (i40) {i1}
function {:inline} $zext.i40.i56(i1: i40) returns (i56) {i1}
function {:inline} $sext.i40.i56(i1: i40) returns (i56) {i1}
function {:inline} $trunc.bv64.bv40(i1: bv64) returns (bv40) {i1[40:0]}
function {:inline} $trunc.i64.i40(i1: i64) returns (i40) {i1}
function {:inline} $zext.i40.i64(i1: i40) returns (i64) {i1}
function {:inline} $sext.i40.i64(i1: i40) returns (i64) {i1}
function {:inline} $trunc.bv80.bv40(i1: bv80) returns (bv40) {i1[40:0]}
function {:inline} $trunc.i80.i40(i1: i80) returns (i40) {i1}
function {:inline} $zext.i40.i80(i1: i40) returns (i80) {i1}
function {:inline} $sext.i40.i80(i1: i40) returns (i80) {i1}
function {:inline} $trunc.bv88.bv40(i1: bv88) returns (bv40) {i1[40:0]}
function {:inline} $trunc.i88.i40(i1: i88) returns (i40) {i1}
function {:inline} $zext.i40.i88(i1: i40) returns (i88) {i1}
function {:inline} $sext.i40.i88(i1: i40) returns (i88) {i1}
function {:inline} $trunc.bv96.bv40(i1: bv96) returns (bv40) {i1[40:0]}
function {:inline} $trunc.i96.i40(i1: i96) returns (i40) {i1}
function {:inline} $zext.i40.i96(i1: i40) returns (i96) {i1}
function {:inline} $sext.i40.i96(i1: i40) returns (i96) {i1}
function {:inline} $trunc.bv128.bv40(i1: bv128) returns (bv40) {i1[40:0]}
function {:inline} $trunc.i128.i40(i1: i128) returns (i40) {i1}
function {:inline} $zext.i40.i128(i1: i40) returns (i128) {i1}
function {:inline} $sext.i40.i128(i1: i40) returns (i128) {i1}
function {:inline} $trunc.bv56.bv48(i1: bv56) returns (bv48) {i1[48:0]}
function {:inline} $trunc.i56.i48(i1: i56) returns (i48) {i1}
function {:inline} $zext.i48.i56(i1: i48) returns (i56) {i1}
function {:inline} $sext.i48.i56(i1: i48) returns (i56) {i1}
function {:inline} $trunc.bv64.bv48(i1: bv64) returns (bv48) {i1[48:0]}
function {:inline} $trunc.i64.i48(i1: i64) returns (i48) {i1}
function {:inline} $zext.i48.i64(i1: i48) returns (i64) {i1}
function {:inline} $sext.i48.i64(i1: i48) returns (i64) {i1}
function {:inline} $trunc.bv80.bv48(i1: bv80) returns (bv48) {i1[48:0]}
function {:inline} $trunc.i80.i48(i1: i80) returns (i48) {i1}
function {:inline} $zext.i48.i80(i1: i48) returns (i80) {i1}
function {:inline} $sext.i48.i80(i1: i48) returns (i80) {i1}
function {:inline} $trunc.bv88.bv48(i1: bv88) returns (bv48) {i1[48:0]}
function {:inline} $trunc.i88.i48(i1: i88) returns (i48) {i1}
function {:inline} $zext.i48.i88(i1: i48) returns (i88) {i1}
function {:inline} $sext.i48.i88(i1: i48) returns (i88) {i1}
function {:inline} $trunc.bv96.bv48(i1: bv96) returns (bv48) {i1[48:0]}
function {:inline} $trunc.i96.i48(i1: i96) returns (i48) {i1}
function {:inline} $zext.i48.i96(i1: i48) returns (i96) {i1}
function {:inline} $sext.i48.i96(i1: i48) returns (i96) {i1}
function {:inline} $trunc.bv128.bv48(i1: bv128) returns (bv48) {i1[48:0]}
function {:inline} $trunc.i128.i48(i1: i128) returns (i48) {i1}
function {:inline} $zext.i48.i128(i1: i48) returns (i128) {i1}
function {:inline} $sext.i48.i128(i1: i48) returns (i128) {i1}
function {:inline} $trunc.bv64.bv56(i1: bv64) returns (bv56) {i1[56:0]}
function {:inline} $trunc.i64.i56(i1: i64) returns (i56) {i1}
function {:inline} $zext.i56.i64(i1: i56) returns (i64) {i1}
function {:inline} $sext.i56.i64(i1: i56) returns (i64) {i1}
function {:inline} $trunc.bv80.bv56(i1: bv80) returns (bv56) {i1[56:0]}
function {:inline} $trunc.i80.i56(i1: i80) returns (i56) {i1}
function {:inline} $zext.i56.i80(i1: i56) returns (i80) {i1}
function {:inline} $sext.i56.i80(i1: i56) returns (i80) {i1}
function {:inline} $trunc.bv88.bv56(i1: bv88) returns (bv56) {i1[56:0]}
function {:inline} $trunc.i88.i56(i1: i88) returns (i56) {i1}
function {:inline} $zext.i56.i88(i1: i56) returns (i88) {i1}
function {:inline} $sext.i56.i88(i1: i56) returns (i88) {i1}
function {:inline} $trunc.bv96.bv56(i1: bv96) returns (bv56) {i1[56:0]}
function {:inline} $trunc.i96.i56(i1: i96) returns (i56) {i1}
function {:inline} $zext.i56.i96(i1: i56) returns (i96) {i1}
function {:inline} $sext.i56.i96(i1: i56) returns (i96) {i1}
function {:inline} $trunc.bv128.bv56(i1: bv128) returns (bv56) {i1[56:0]}
function {:inline} $trunc.i128.i56(i1: i128) returns (i56) {i1}
function {:inline} $zext.i56.i128(i1: i56) returns (i128) {i1}
function {:inline} $sext.i56.i128(i1: i56) returns (i128) {i1}
function {:inline} $trunc.bv80.bv64(i1: bv80) returns (bv64) {i1[64:0]}
function {:inline} $trunc.i80.i64(i1: i80) returns (i64) {i1}
function {:inline} $zext.i64.i80(i1: i64) returns (i80) {i1}
function {:inline} $sext.i64.i80(i1: i64) returns (i80) {i1}
function {:inline} $trunc.bv88.bv64(i1: bv88) returns (bv64) {i1[64:0]}
function {:inline} $trunc.i88.i64(i1: i88) returns (i64) {i1}
function {:inline} $zext.i64.i88(i1: i64) returns (i88) {i1}
function {:inline} $sext.i64.i88(i1: i64) returns (i88) {i1}
function {:inline} $trunc.bv96.bv64(i1: bv96) returns (bv64) {i1[64:0]}
function {:inline} $trunc.i96.i64(i1: i96) returns (i64) {i1}
function {:inline} $zext.i64.i96(i1: i64) returns (i96) {i1}
function {:inline} $sext.i64.i96(i1: i64) returns (i96) {i1}
function {:inline} $trunc.bv128.bv64(i1: bv128) returns (bv64) {i1[64:0]}
function {:inline} $trunc.i128.i64(i1: i128) returns (i64) {i1}
function {:inline} $zext.i64.i128(i1: i64) returns (i128) {i1}
function {:inline} $sext.i64.i128(i1: i64) returns (i128) {i1}
function {:inline} $trunc.bv88.bv80(i1: bv88) returns (bv80) {i1[80:0]}
function {:inline} $trunc.i88.i80(i1: i88) returns (i80) {i1}
function {:inline} $zext.i80.i88(i1: i80) returns (i88) {i1}
function {:inline} $sext.i80.i88(i1: i80) returns (i88) {i1}
function {:inline} $trunc.bv96.bv80(i1: bv96) returns (bv80) {i1[80:0]}
function {:inline} $trunc.i96.i80(i1: i96) returns (i80) {i1}
function {:inline} $zext.i80.i96(i1: i80) returns (i96) {i1}
function {:inline} $sext.i80.i96(i1: i80) returns (i96) {i1}
function {:inline} $trunc.bv128.bv80(i1: bv128) returns (bv80) {i1[80:0]}
function {:inline} $trunc.i128.i80(i1: i128) returns (i80) {i1}
function {:inline} $zext.i80.i128(i1: i80) returns (i128) {i1}
function {:inline} $sext.i80.i128(i1: i80) returns (i128) {i1}
function {:inline} $trunc.bv96.bv88(i1: bv96) returns (bv88) {i1[88:0]}
function {:inline} $trunc.i96.i88(i1: i96) returns (i88) {i1}
function {:inline} $zext.i88.i96(i1: i88) returns (i96) {i1}
function {:inline} $sext.i88.i96(i1: i88) returns (i96) {i1}
function {:inline} $trunc.bv128.bv88(i1: bv128) returns (bv88) {i1[88:0]}
function {:inline} $trunc.i128.i88(i1: i128) returns (i88) {i1}
function {:inline} $zext.i88.i128(i1: i88) returns (i128) {i1}
function {:inline} $sext.i88.i128(i1: i88) returns (i128) {i1}
function {:inline} $trunc.bv128.bv96(i1: bv128) returns (bv96) {i1[96:0]}
function {:inline} $trunc.i128.i96(i1: i128) returns (i96) {i1}
function {:inline} $zext.i96.i128(i1: i96) returns (i128) {i1}
function {:inline} $sext.i96.i128(i1: i96) returns (i128) {i1}
