// generated by SMACK version 1.9.0 for corral
// via /mnt/local/smack-project/smack/bin/smack -x=svcomp --time-limit 1800 /proj/SMACK/sv-benchmarks/c/ldv-linux-4.2-rc1/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out.c --verifier-options  /bopt:z3opt:SMT.MBQI=true /bopt:z3opt:SMT.MBQI.MAX_ITERATIONS=1000 /di /staticInlining /trackAllVars /useArrayTheory --unroll 16

// Basic types
type i1 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type ref = i64;
type float = i32;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $2.ref: ref;
axiom ($2.ref == 2);
const $3.ref: ref;
axiom ($3.ref == 3);
const $4.ref: ref;
axiom ($4.ref == 4);
const $5.ref: ref;
axiom ($5.ref == 5);
const $6.ref: ref;
axiom ($6.ref == 6);
const $7.ref: ref;
axiom ($7.ref == 7);
const $8.ref: ref;
axiom ($8.ref == 8);
const $9.ref: ref;
axiom ($9.ref == 9);
const $10.ref: ref;
axiom ($10.ref == 10);
const $11.ref: ref;
axiom ($11.ref == 11);
const $12.ref: ref;
axiom ($12.ref == 12);
const $13.ref: ref;
axiom ($13.ref == 13);
const $14.ref: ref;
axiom ($14.ref == 14);
const $1024.ref: ref;
axiom ($1024.ref == 1024);

// Memory maps (23 regions)
var $M.0: [ref] i8;
var $M.1: [ref] i8;
var $M.2: [ref] i64;
var $M.3: [ref] i64;
var $M.4: [ref] i8;
var $M.5: i32;
var $M.6: i32;
var $M.7: [ref] ref;
var $M.8: [ref] i8;
var $M.9: ref;
var $M.10: ref;
var $M.11: [ref] i8;
var $M.12: i32;
var $M.13: i32;
var $M.14: i32;
var $M.15: i32;
var $M.16: i32;
var $M.17: i32;
var $M.18: ref;
var $M.19: i32;
var $M.20: [ref] i8;
var $M.21: [ref] i8;
var $M.22: [ref] i8;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 178457));
axiom ($EXTERNS_BOTTOM == $sub.ref(0, 32800));
axiom ($MALLOC_TOP == 9223372036854775807);

// Bitstd::vector-integer conversions
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2int"} $bv2int.64(i: bv64) returns (i64);

// Pointer-number conversions
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { if $eq.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { if $ne.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { if $ugt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { if $uge.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { if $ult.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { if $ule.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { if $sgt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { if $sge.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { if $slt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { if $sle.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

const LDV_IN_INTERRUPT: ref;
axiom (LDV_IN_INTERRUPT == $sub.ref(0, 1028));
const atmtcp_v_dev_ops_group0: ref;
axiom (atmtcp_v_dev_ops_group0 == $sub.ref(0, 2060));
const atmtcp_v_dev_ops_group1: ref;
axiom (atmtcp_v_dev_ops_group1 == $sub.ref(0, 3092));
const atmtcp_c_dev_ops_group0: ref;
axiom (atmtcp_c_dev_ops_group0 == $sub.ref(0, 4124));
const ldv_state_variable_1: ref;
axiom (ldv_state_variable_1 == $sub.ref(0, 5152));
const ref_cnt: ref;
axiom (ref_cnt == $sub.ref(0, 6180));
const ldv_state_variable_0: ref;
axiom (ldv_state_variable_0 == $sub.ref(0, 7208));
const ldv_state_variable_3: ref;
axiom (ldv_state_variable_3 == $sub.ref(0, 8236));
const ldv_state_variable_2: ref;
axiom (ldv_state_variable_2 == $sub.ref(0, 9264));
const ldv_retval_0: ref;
axiom (ldv_retval_0 == $sub.ref(0, 10292));
const ldv_retval_1: ref;
axiom (ldv_retval_1 == $sub.ref(0, 11320));
const ldv_module_refcounter: ref;
axiom (ldv_module_refcounter == $sub.ref(0, 12348));
const atmtcp_ioctl_ops: ref;
axiom (atmtcp_ioctl_ops == $sub.ref(0, 13404));
const atmtcp_c_dev_ops: ref;
axiom (atmtcp_c_dev_ops == $sub.ref(0, 14540));
const atmtcp_control_dev: ref;
axiom (atmtcp_control_dev == $sub.ref(0, 17260));
const atmtcp_v_dev_ops: ref;
axiom (atmtcp_v_dev_ops == $sub.ref(0, 18396));
const __this_module: ref;
axiom (__this_module == $sub.ref(0, 32776));
const {:count 11} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 19431));
const .str.6: ref;
axiom (.str.6 == $sub.ref(0, 20456));
const {:count 4} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 21484));
const {:count 25} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 22533));
const vcc_sklist_lock: ref;
axiom (vcc_sklist_lock == $sub.ref(0, 32784));
const vcc_hash: ref;
axiom (vcc_hash == $sub.ref(0, 32792));
const {:count 33} .str.8: ref;
axiom (.str.8 == $sub.ref(0, 23590));
const current_task: ref;
axiom (current_task == $sub.ref(0, 32800));
const {:count 7} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 24621));
const {:count 24} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 25669));
const {:count 39} .str.9: ref;
axiom (.str.9 == $sub.ref(0, 26732));
const .str: ref;
axiom (.str == $sub.ref(0, 27779));
const {:count 14} .str.2.14: ref;
axiom (.str.2.14 == $sub.ref(0, 28817));
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 29849));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const malloc: ref;
axiom (malloc == $sub.ref(0, 30881));
procedure  malloc($i0: i64)
  returns ($r: ref)
{
  call $r := $malloc($i0);
}
const atmtcp_v_dev_close: ref;
axiom (atmtcp_v_dev_close == $sub.ref(0, 31913));
procedure  atmtcp_v_dev_close($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6641, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atmtcp_v_open: ref;
axiom (atmtcp_v_open == $sub.ref(0, 32945));
procedure  atmtcp_v_open($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i16;
  var $i11: i16;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i16;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i29: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(128, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6655, 14} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6655, 14} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i16($M.0, $p2);
  // WARNING: %4 = load i16, i16* %3, align 8, !dbg !8011, !verifier.code !8005
  call {:cexpr "vpi"} boogie_si_record_i16($i3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6656, 14} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6656, 14} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.0, $p4);
  // WARNING: %6 = load i32, i32* %5, align 4, !dbg !8015, !verifier.code !8005
  call {:cexpr "vci"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6657, 3} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6657, 3} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p6, 0, 120, $zext.i32.i64(4), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6658, 7} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p1, 20);
  $p8 := $add.ref($p1, 20);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6658, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p8, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6659, 19} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i16.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6659, 19} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.i32.i16($i9);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6659, 9} true;
  assume {:verifier.code 0} true;
  call $i11 := __fswab16($i10);
  // WARNING: %12 = call zeroext i16 @__fswab16(i16 zeroext %11), !dbg !8022, !verifier.code !8005
  call {:cexpr "tmp"} boogie_si_record_i16($i11);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6660, 7} true;
  assume {:verifier.code 0} true;
  $p12 := $p1;
  $p13 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6660, 15} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p13, $i11);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6661, 7} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p1, 20);
  $p15 := $add.ref($add.ref($p1, 20), 4);
  $p16 := $add.ref($add.ref($add.ref($p1, 20), 4), 2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6661, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p16, $i3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6662, 30} true;
  assume {:verifier.code 0} true;
  $i17 := $trunc.i32.i16($i5);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6662, 23} true;
  assume {:verifier.code 0} true;
  $i18 := $zext.i16.i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6662, 23} true;
  assume {:verifier.code 0} true;
  $i19 := $trunc.i32.i16($i18);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6662, 13} true;
  assume {:verifier.code 0} true;
  call $i20 := __fswab16($i19);
  // WARNING: %21 = call zeroext i16 @__fswab16(i16 zeroext %20), !dbg !8031, !verifier.code !8005
  call {:cexpr "tmp___0"} boogie_si_record_i16($i20);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6663, 7} true;
  assume {:verifier.code 0} true;
  $p21 := $p1;
  $p22 := $add.ref($p1, 2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6663, 15} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p22, $i20);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6664, 7} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p1, 20);
  $p24 := $add.ref($add.ref($p1, 20), 4);
  $p25 := $add.ref($add.ref($add.ref($p1, 20), 4), 4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6664, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p25, $i5);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6665, 7} true;
  assume {:verifier.code 0} true;
  $i26 := $sext.i16.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6665, 17} true;
  assume {:verifier.code 0} true;
  $i27 := $eq.i32($i26, $sub.i32(0, 2));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6665, 23} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6665, 23} true;
  assume {:verifier.code 0} true;
  assume ($i27 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6666, 5} true;
  assume {:verifier.code 0} true;
  $i29 := 0;
  goto $bb6;
$bb3:
  assume !(($i27 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6665, 30} true;
  assume {:verifier.code 0} true;
  $i28 := $eq.i32($i5, $sub.i32(0, 2));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6665, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6665, 7} true;
  assume {:verifier.code 0} true;
  assume ($i28 == 1);
  goto $bb2;
$bb5:
  assume !(($i28 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6683, 1} true;
  assume {:verifier.code 0} true;
  $r := $i29;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6670, 7} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6670, 12} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p30, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6671, 7} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p1, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6671, 18} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p0, 1328);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6671, 18} true;
  assume {:verifier.code 0} true;
  $p33 := $bitcast.ref.ref($p31);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6671, 18} true;
  assume {:verifier.code 0} true;
  $p34 := $bitcast.ref.ref($p32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6671, 18} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memcpy.i8($M.0, $M.0, $p33, $p34, 92, $zext.i32.i64(4), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6672, 51} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($p0, 1288);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6672, 3} true;
  assume {:verifier.code 0} true;
  call set_bit(0, $p35);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6673, 53} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p0, 1288);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6673, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit(1, $p36);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6674, 11} true;
  assume {:verifier.code 0} true;
  call $i37 := atmtcp_send_control($p0, 1, $p1, 1);
  // WARNING: %41 = call i32 @atmtcp_send_control(%struct.atm_vcc* %0, i32 1, %struct.atmtcp_control* %2, i32 1), !dbg !8055, !verifier.code !8005
  call {:cexpr "error"} boogie_si_record_i32($i37);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6675, 13} true;
  assume {:verifier.code 0} true;
  $i38 := $ne.i32($i37, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6675, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i38 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6676, 5} true;
  assume {:verifier.code 0} true;
  $i29 := $i37;
  goto $bb6;
$bb9:
  assume !(($i38 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6680, 13} true;
  assume {:verifier.code 0} true;
  call $p39 := sk_atm($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6681, 22} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p39, 968);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6681, 22} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i32($M.0, $p40);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6681, 11} true;
  assume {:verifier.code 0} true;
  $i42 := $sub.i32(0, $i41);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6681, 3} true;
  assume {:verifier.code 0} true;
  $i29 := $i42;
  goto $bb6;
}
const atmtcp_v_close: ref;
axiom (atmtcp_v_close == $sub.ref(0, 33977));
procedure  atmtcp_v_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(128, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6689, 3} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6689, 3} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p2, 0, 120, $zext.i32.i64(4), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6690, 7} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p1, 20);
  $p4 := $add.ref($p1, 20);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6690, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p4, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6691, 32} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6691, 32} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i16($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6691, 7} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p1, 20);
  $p8 := $add.ref($add.ref($p1, 20), 4);
  $p9 := $add.ref($add.ref($add.ref($p1, 20), 4), 2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6691, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p9, $i6);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6692, 32} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p0, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6692, 32} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i32($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6692, 7} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p1, 20);
  $p13 := $add.ref($add.ref($p1, 20), 4);
  $p14 := $add.ref($add.ref($add.ref($p1, 20), 4), 4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6692, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p14, $i11);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6693, 53} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p0, 1288);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6693, 3} true;
  assume {:verifier.code 0} true;
  call clear_bit(1, $p15);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6694, 3} true;
  assume {:verifier.code 0} true;
  call $i16 := atmtcp_send_control($p0, 2, $p1, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6695, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atmtcp_v_ioctl: ref;
axiom (atmtcp_v_ioctl == $sub.ref(0, 35009));
procedure  atmtcp_v_ioctl($p0: ref, $i1: i32, $p2: ref)
  returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p43: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i5: i32;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p84: ref;
  var $p85: ref;
  var $p83: ref;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $i96: i16;
  var $i97: i32;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i1;
  var $p118: ref;
  var $p119: ref;
  var $p117: ref;
  var $i120: i64;
  var $i121: i1;
  var $p122: ref;
  var $i123: i64;
  var $i124: i1;
  var $p126: ref;
  var $p127: ref;
  var $p125: ref;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i64;
  var $i136: i1;
  var $p137: ref;
  var $i138: i16;
  var $i139: i32;
  var $p140: ref;
  var $i141: i8;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i32;
  var $p147: ref;
  var $i148: i8;
  var $i149: i32;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $i158: i1;
  var $p160: ref;
  var $p161: ref;
  var $p159: ref;
  var $i162: i64;
  var $i163: i1;
  var $p164: ref;
  var $i165: i64;
  var $i166: i1;
  var $p168: ref;
  var $p169: ref;
  var $p167: ref;
  var $i170: i64;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i64;
  var $i177: i64;
  var $i178: i1;
  var $p179: ref;
  var $i180: i16;
  var $i181: i32;
  var $p182: ref;
  var $i183: i8;
  var $i184: i32;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $i188: i32;
  var $p189: ref;
  var $i190: i8;
  var $i191: i32;
  var $i192: i32;
  var $i193: i1;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i64;
  var $i200: i1;
  var $p202: ref;
  var $p203: ref;
  var $p201: ref;
  var $i204: i64;
  var $i205: i1;
  var $p206: ref;
  var $i207: i64;
  var $i208: i1;
  var $p210: ref;
  var $p211: ref;
  var $p209: ref;
  var $i212: i64;
  var $i213: i1;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i64;
  var $i219: i64;
  var $i220: i1;
  var $p221: ref;
  var $i222: i16;
  var $i223: i32;
  var $p224: ref;
  var $i225: i8;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $i230: i32;
  var $p231: ref;
  var $i232: i8;
  var $i233: i32;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $i241: i64;
  var $i242: i1;
  var $p244: ref;
  var $p245: ref;
  var $p243: ref;
  var $i246: i64;
  var $i247: i1;
  var $p248: ref;
  var $i249: i64;
  var $i250: i1;
  var $p252: ref;
  var $p253: ref;
  var $p251: ref;
  var $i254: i64;
  var $i255: i1;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $i260: i64;
  var $i261: i64;
  var $i262: i1;
  var $p263: ref;
  var $i264: i16;
  var $i265: i32;
  var $p266: ref;
  var $i267: i8;
  var $i268: i32;
  var $i269: i32;
  var $i270: i1;
  var $p271: ref;
  var $i272: i32;
  var $p273: ref;
  var $i274: i8;
  var $i275: i32;
  var $i276: i32;
  var $i277: i1;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $i283: i64;
  var $i284: i1;
  var $p286: ref;
  var $p287: ref;
  var $p285: ref;
  var $i288: i64;
  var $i289: i1;
  var $p290: ref;
  var $i291: i64;
  var $i292: i1;
  var $p294: ref;
  var $p295: ref;
  var $p293: ref;
  var $i296: i64;
  var $i297: i1;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $i302: i64;
  var $i303: i64;
  var $i304: i1;
  var $p305: ref;
  var $i306: i16;
  var $i307: i32;
  var $p308: ref;
  var $i309: i8;
  var $i310: i32;
  var $i311: i32;
  var $i312: i1;
  var $p313: ref;
  var $i314: i32;
  var $p315: ref;
  var $i316: i8;
  var $i317: i32;
  var $i318: i32;
  var $i319: i1;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $i325: i64;
  var $i326: i1;
  var $p328: ref;
  var $p329: ref;
  var $p327: ref;
  var $i330: i64;
  var $i331: i1;
  var $p332: ref;
  var $i333: i64;
  var $i334: i1;
  var $p336: ref;
  var $p337: ref;
  var $p335: ref;
  var $i338: i64;
  var $i339: i1;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $i344: i64;
  var $i345: i64;
  var $i346: i1;
  var $p347: ref;
  var $i348: i16;
  var $i349: i32;
  var $p350: ref;
  var $i351: i8;
  var $i352: i32;
  var $i353: i32;
  var $i354: i1;
  var $p355: ref;
  var $i356: i32;
  var $p357: ref;
  var $i358: i8;
  var $i359: i32;
  var $i360: i32;
  var $i361: i1;
  var $p362: ref;
  var $p363: ref;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $i367: i64;
  var $i368: i1;
  var $p370: ref;
  var $p371: ref;
  var $p369: ref;
  var $i372: i64;
  var $i373: i1;
  var $p374: ref;
  var $i375: i64;
  var $i376: i1;
  var $p378: ref;
  var $p379: ref;
  var $p377: ref;
  var $i380: i64;
  var $i381: i1;
  var $p382: ref;
  var $p383: ref;
  var $p384: ref;
  var $p385: ref;
  var $i386: i64;
  var $i387: i64;
  var $i388: i1;
  var $p389: ref;
  var $i390: i16;
  var $i391: i32;
  var $p392: ref;
  var $i393: i8;
  var $i394: i32;
  var $i395: i32;
  var $i396: i1;
  var $p397: ref;
  var $i398: i32;
  var $p399: ref;
  var $i400: i8;
  var $i401: i32;
  var $i402: i32;
  var $i403: i1;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $p407: ref;
  var $p408: ref;
  var $i409: i64;
  var $i410: i1;
  var $p412: ref;
  var $p413: ref;
  var $p411: ref;
  var $i414: i64;
  var $i415: i1;
  var $p416: ref;
  var $i417: i64;
  var $i418: i1;
  var $p420: ref;
  var $p421: ref;
  var $p419: ref;
  var $i422: i64;
  var $i423: i1;
  var $p424: ref;
  var $p425: ref;
  var $p426: ref;
  var $p427: ref;
  var $i428: i64;
  var $i429: i64;
  var $i430: i1;
  var $p431: ref;
  var $i432: i16;
  var $i433: i32;
  var $p434: ref;
  var $i435: i8;
  var $i436: i32;
  var $i437: i32;
  var $i438: i1;
  var $p439: ref;
  var $i440: i32;
  var $p441: ref;
  var $i442: i8;
  var $i443: i32;
  var $i444: i32;
  var $i445: i1;
  var $p446: ref;
  var $p447: ref;
  var $p448: ref;
  var $p449: ref;
  var $p450: ref;
  var $i451: i64;
  var $i452: i1;
  var $p454: ref;
  var $p455: ref;
  var $p453: ref;
  var $i456: i64;
  var $i457: i1;
  var $p458: ref;
  var $i459: i64;
  var $i460: i1;
  var $p462: ref;
  var $p463: ref;
  var $p461: ref;
  var $i464: i64;
  var $i465: i1;
  var $p466: ref;
  var $p467: ref;
  var $p468: ref;
  var $p469: ref;
  var $i470: i64;
  var $i471: i64;
  var $i472: i1;
  var $p473: ref;
  var $i474: i16;
  var $i475: i32;
  var $p476: ref;
  var $i477: i8;
  var $i478: i32;
  var $i479: i32;
  var $i480: i1;
  var $p481: ref;
  var $i482: i32;
  var $p483: ref;
  var $i484: i8;
  var $i485: i32;
  var $i486: i32;
  var $i487: i1;
  var $p488: ref;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $i493: i64;
  var $i494: i1;
  var $p496: ref;
  var $p497: ref;
  var $p495: ref;
  var $i498: i64;
  var $i499: i1;
  var $p500: ref;
  var $i501: i64;
  var $i502: i1;
  var $p504: ref;
  var $p505: ref;
  var $p503: ref;
  var $i506: i64;
  var $i507: i1;
  var $p508: ref;
  var $p509: ref;
  var $p510: ref;
  var $p511: ref;
  var $i512: i64;
  var $i513: i64;
  var $i514: i1;
  var $p515: ref;
  var $i516: i16;
  var $i517: i32;
  var $p518: ref;
  var $i519: i8;
  var $i520: i32;
  var $i521: i32;
  var $i522: i1;
  var $p523: ref;
  var $i524: i32;
  var $p525: ref;
  var $i526: i8;
  var $i527: i32;
  var $i528: i32;
  var $i529: i1;
  var $p530: ref;
  var $p531: ref;
  var $p532: ref;
  var $p533: ref;
  var $p534: ref;
  var $i535: i64;
  var $i536: i1;
  var $p538: ref;
  var $p539: ref;
  var $p537: ref;
  var $i540: i64;
  var $i541: i1;
  var $p542: ref;
  var $i543: i64;
  var $i544: i1;
  var $p546: ref;
  var $p547: ref;
  var $p545: ref;
  var $i548: i64;
  var $i549: i1;
  var $p550: ref;
  var $p551: ref;
  var $p552: ref;
  var $p553: ref;
  var $i554: i64;
  var $i555: i64;
  var $i556: i1;
  var $p557: ref;
  var $i558: i16;
  var $i559: i32;
  var $p560: ref;
  var $i561: i8;
  var $i562: i32;
  var $i563: i32;
  var $i564: i1;
  var $p565: ref;
  var $i566: i32;
  var $p567: ref;
  var $i568: i8;
  var $i569: i32;
  var $i570: i32;
  var $i571: i1;
  var $p572: ref;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $i577: i64;
  var $i578: i1;
  var $p580: ref;
  var $p581: ref;
  var $p579: ref;
  var $i582: i64;
  var $i583: i1;
  var $p584: ref;
  var $i585: i64;
  var $i586: i1;
  var $p588: ref;
  var $p589: ref;
  var $p587: ref;
  var $i590: i64;
  var $i591: i1;
  var $p592: ref;
  var $p593: ref;
  var $p594: ref;
  var $p595: ref;
  var $i596: i64;
  var $i597: i64;
  var $i598: i1;
  var $p599: ref;
  var $i600: i16;
  var $i601: i32;
  var $p602: ref;
  var $i603: i8;
  var $i604: i32;
  var $i605: i32;
  var $i606: i1;
  var $p607: ref;
  var $i608: i32;
  var $p609: ref;
  var $i610: i8;
  var $i611: i32;
  var $i612: i32;
  var $i613: i1;
  var $p614: ref;
  var $p615: ref;
  var $p616: ref;
  var $p617: ref;
  var $p618: ref;
  var $i619: i64;
  var $i620: i1;
  var $p622: ref;
  var $p623: ref;
  var $p621: ref;
  var $i624: i64;
  var $i625: i1;
  var $p626: ref;
  var $i627: i64;
  var $i628: i1;
  var $p630: ref;
  var $p631: ref;
  var $p629: ref;
  var $i632: i64;
  var $i633: i1;
  var $p634: ref;
  var $p635: ref;
  var $p636: ref;
  var $p637: ref;
  var $i638: i64;
  var $i639: i64;
  var $i640: i1;
  var $p641: ref;
  var $i642: i16;
  var $i643: i32;
  var $p644: ref;
  var $i645: i8;
  var $i646: i32;
  var $i647: i32;
  var $i648: i1;
  var $p649: ref;
  var $i650: i32;
  var $p651: ref;
  var $i652: i8;
  var $i653: i32;
  var $i654: i32;
  var $i655: i1;
  var $p656: ref;
  var $p657: ref;
  var $p658: ref;
  var $p659: ref;
  var $p660: ref;
  var $i661: i64;
  var $i662: i1;
  var $p664: ref;
  var $p665: ref;
  var $p663: ref;
  var $i666: i64;
  var $i667: i1;
  var $p668: ref;
  var $i669: i64;
  var $i670: i1;
  var $p672: ref;
  var $p673: ref;
  var $p671: ref;
  var $i674: i64;
  var $i675: i1;
  var $p676: ref;
  var $p677: ref;
  var $p678: ref;
  var $p679: ref;
  var $i680: i64;
  var $i681: i64;
  var $i682: i1;
  var $p683: ref;
  var $i684: i16;
  var $i685: i32;
  var $p686: ref;
  var $i687: i8;
  var $i688: i32;
  var $i689: i32;
  var $i690: i1;
  var $p691: ref;
  var $i692: i32;
  var $p693: ref;
  var $i694: i8;
  var $i695: i32;
  var $i696: i32;
  var $i697: i1;
  var $p698: ref;
  var $p699: ref;
  var $p700: ref;
  var $p701: ref;
  var $p702: ref;
  var $i703: i64;
  var $i704: i1;
  var $p706: ref;
  var $p707: ref;
  var $p705: ref;
  var $i708: i64;
  var $i709: i1;
  var $p710: ref;
  var $i711: i64;
  var $i712: i1;
  var $p714: ref;
  var $p715: ref;
  var $p713: ref;
  var $i716: i64;
  var $i717: i1;
  var $p718: ref;
  var $p719: ref;
  var $p720: ref;
  var $p721: ref;
  var $i722: i64;
  var $i723: i64;
  var $i724: i1;
  var $p725: ref;
  var $i726: i16;
  var $i727: i32;
  var $p728: ref;
  var $i729: i8;
  var $i730: i32;
  var $i731: i32;
  var $i732: i1;
  var $p733: ref;
  var $i734: i32;
  var $p735: ref;
  var $i736: i8;
  var $i737: i32;
  var $i738: i32;
  var $i739: i1;
  var $p740: ref;
  var $p741: ref;
  var $p742: ref;
  var $p743: ref;
  var $p744: ref;
  var $i745: i64;
  var $i746: i1;
  var $p748: ref;
  var $p749: ref;
  var $p747: ref;
  var $i750: i64;
  var $i751: i1;
  var $p752: ref;
  var $i753: i64;
  var $i754: i1;
  var $p756: ref;
  var $p757: ref;
  var $p755: ref;
  var $i758: i64;
  var $i759: i1;
  var $p760: ref;
  var $p761: ref;
  var $p762: ref;
  var $p763: ref;
  var $i764: i64;
  var $i765: i64;
  var $i766: i1;
  var $p767: ref;
  var $i768: i16;
  var $i769: i32;
  var $p770: ref;
  var $i771: i8;
  var $i772: i32;
  var $i773: i32;
  var $i774: i1;
  var $p775: ref;
  var $i776: i32;
  var $p777: ref;
  var $i778: i8;
  var $i779: i32;
  var $i780: i32;
  var $i781: i1;
  var $p782: ref;
  var $p783: ref;
  var $p784: ref;
  var $p785: ref;
  var $p786: ref;
  var $i787: i64;
  var $i788: i1;
  var $p790: ref;
  var $p791: ref;
  var $p789: ref;
  var $i792: i64;
  var $i793: i1;
  var $p794: ref;
  var $i795: i64;
  var $i796: i1;
  var $p798: ref;
  var $p799: ref;
  var $p797: ref;
  var $i800: i64;
  var $i801: i1;
  var $p802: ref;
  var $p803: ref;
  var $p804: ref;
  var $p805: ref;
  var $i806: i64;
  var $i807: i64;
  var $i808: i1;
  var $p809: ref;
  var $i810: i16;
  var $i811: i32;
  var $p812: ref;
  var $i813: i8;
  var $i814: i32;
  var $i815: i32;
  var $i816: i1;
  var $p817: ref;
  var $i818: i32;
  var $p819: ref;
  var $i820: i8;
  var $i821: i32;
  var $i822: i32;
  var $i823: i1;
  var $p824: ref;
  var $p825: ref;
  var $p826: ref;
  var $p827: ref;
  var $p828: ref;
  var $i829: i64;
  var $i830: i1;
  var $p832: ref;
  var $p833: ref;
  var $p831: ref;
  var $i834: i64;
  var $i835: i1;
  var $p836: ref;
  var $i837: i64;
  var $i838: i1;
  var $p840: ref;
  var $p841: ref;
  var $p839: ref;
  var $i842: i64;
  var $i843: i1;
  var $p844: ref;
  var $p845: ref;
  var $p846: ref;
  var $p847: ref;
  var $i848: i64;
  var $i849: i64;
  var $i850: i1;
  var $p851: ref;
  var $i852: i16;
  var $i853: i32;
  var $p854: ref;
  var $i855: i8;
  var $i856: i32;
  var $i857: i32;
  var $i858: i1;
  var $p859: ref;
  var $i860: i32;
  var $p861: ref;
  var $i862: i8;
  var $i863: i32;
  var $i864: i32;
  var $i865: i1;
  var $p866: ref;
  var $p867: ref;
  var $p868: ref;
  var $p869: ref;
  var $p870: ref;
  var $i871: i64;
  var $i872: i1;
  var $p874: ref;
  var $p875: ref;
  var $p873: ref;
  var $i876: i64;
  var $i877: i1;
  var $p878: ref;
  var $i879: i64;
  var $i880: i1;
  var $p882: ref;
  var $p883: ref;
  var $p881: ref;
  var $i884: i64;
  var $i885: i1;
  var $p886: ref;
  var $p887: ref;
  var $p888: ref;
  var $p889: ref;
  var $i890: i64;
  var $i891: i64;
  var $i892: i1;
  var $p893: ref;
  var $i894: i16;
  var $i895: i32;
  var $p896: ref;
  var $i897: i8;
  var $i898: i32;
  var $i899: i32;
  var $i900: i1;
  var $p901: ref;
  var $i902: i32;
  var $p903: ref;
  var $i904: i8;
  var $i905: i32;
  var $i906: i32;
  var $i907: i1;
  var $p908: ref;
  var $p909: ref;
  var $p910: ref;
  var $p911: ref;
  var $p912: ref;
  var $i913: i64;
  var $i914: i1;
  var $p916: ref;
  var $p917: ref;
  var $p915: ref;
  var $i918: i64;
  var $i919: i1;
  var $p920: ref;
  var $i921: i64;
  var $i922: i1;
  var $p924: ref;
  var $p925: ref;
  var $p923: ref;
  var $i926: i64;
  var $i927: i1;
  var $p928: ref;
  var $p929: ref;
  var $p930: ref;
  var $p931: ref;
  var $i932: i64;
  var $i933: i64;
  var $i934: i1;
  var $p935: ref;
  var $i936: i16;
  var $i937: i32;
  var $p938: ref;
  var $i939: i8;
  var $i940: i32;
  var $i941: i32;
  var $i942: i1;
  var $p943: ref;
  var $i944: i32;
  var $p945: ref;
  var $i946: i8;
  var $i947: i32;
  var $i948: i32;
  var $i949: i1;
  var $p950: ref;
  var $p951: ref;
  var $p952: ref;
  var $p953: ref;
  var $p954: ref;
  var $i955: i64;
  var $i956: i1;
  var $p958: ref;
  var $p959: ref;
  var $p957: ref;
  var $i960: i64;
  var $i961: i1;
  var $p962: ref;
  var $i963: i64;
  var $i964: i1;
  var $p966: ref;
  var $p967: ref;
  var $p965: ref;
  var $i968: i64;
  var $i969: i1;
  var $p970: ref;
  var $p971: ref;
  var $p972: ref;
  var $p973: ref;
  var $i974: i64;
  var $i975: i64;
  var $i976: i1;
  var $p977: ref;
  var $i978: i16;
  var $i979: i32;
  var $p980: ref;
  var $i981: i8;
  var $i982: i32;
  var $i983: i32;
  var $i984: i1;
  var $p985: ref;
  var $i986: i32;
  var $p987: ref;
  var $i988: i8;
  var $i989: i32;
  var $i990: i32;
  var $i991: i1;
  var $p992: ref;
  var $p993: ref;
  var $p994: ref;
  var $p995: ref;
  var $p996: ref;
  var $i997: i64;
  var $i998: i1;
  var $p1000: ref;
  var $p1001: ref;
  var $p999: ref;
  var $i1002: i64;
  var $i1003: i1;
  var $p1004: ref;
  var $i1005: i64;
  var $i1006: i1;
  var $p1008: ref;
  var $p1009: ref;
  var $p1007: ref;
  var $i1010: i64;
  var $i1011: i1;
  var $p1012: ref;
  var $p1013: ref;
  var $p1014: ref;
  var $p1015: ref;
  var $i1016: i64;
  var $i1017: i64;
  var $i1018: i1;
  var $p1019: ref;
  var $i1020: i16;
  var $i1021: i32;
  var $p1022: ref;
  var $i1023: i8;
  var $i1024: i32;
  var $i1025: i32;
  var $i1026: i1;
  var $p1027: ref;
  var $i1028: i32;
  var $p1029: ref;
  var $i1030: i8;
  var $i1031: i32;
  var $i1032: i32;
  var $i1033: i1;
  var $p1034: ref;
  var $p1035: ref;
  var $p1036: ref;
  var $p1037: ref;
  var $p1038: ref;
  var $i1039: i64;
  var $i1040: i1;
  var $p1042: ref;
  var $p1043: ref;
  var $p1041: ref;
  var $i1044: i64;
  var $i1045: i1;
  var $p1046: ref;
  var $i1047: i64;
  var $i1048: i1;
  var $p1050: ref;
  var $p1051: ref;
  var $p1049: ref;
  var $i1052: i64;
  var $i1053: i1;
  var $p1054: ref;
  var $p1055: ref;
  var $p1056: ref;
  var $p1057: ref;
  var $i1058: i64;
  var $i1059: i64;
  var $i1060: i1;
  var $p1061: ref;
  var $i1062: i16;
  var $i1063: i32;
  var $p1064: ref;
  var $i1065: i8;
  var $i1066: i32;
  var $i1067: i32;
  var $i1068: i1;
  var $p1069: ref;
  var $i1070: i32;
  var $p1071: ref;
  var $i1072: i8;
  var $i1073: i32;
  var $i1074: i32;
  var $i1075: i1;
  var $p1076: ref;
  var $p1077: ref;
  var $p1078: ref;
  var $p1079: ref;
  var $p1080: ref;
  var $i1081: i64;
  var $i1082: i1;
  var $p1084: ref;
  var $p1085: ref;
  var $p1083: ref;
  var $i1086: i64;
  var $i1087: i1;
  var $p1088: ref;
  var $i1089: i64;
  var $i1090: i1;
  var $p1092: ref;
  var $p1093: ref;
  var $p1091: ref;
  var $i1094: i64;
  var $i1095: i1;
  var $p1096: ref;
  var $p1097: ref;
  var $p1098: ref;
  var $p1099: ref;
  var $i1100: i64;
  var $i1101: i64;
  var $i1102: i1;
  var $p1103: ref;
  var $i1104: i16;
  var $i1105: i32;
  var $p1106: ref;
  var $i1107: i8;
  var $i1108: i32;
  var $i1109: i32;
  var $i1110: i1;
  var $p1111: ref;
  var $i1112: i32;
  var $p1113: ref;
  var $i1114: i8;
  var $i1115: i32;
  var $i1116: i32;
  var $i1117: i1;
  var $p1118: ref;
  var $p1119: ref;
  var $p1120: ref;
  var $p1121: ref;
  var $p1122: ref;
  var $i1123: i64;
  var $i1124: i1;
  var $p1126: ref;
  var $p1127: ref;
  var $p1125: ref;
  var $i1128: i64;
  var $i1129: i1;
  var $p1130: ref;
  var $i1131: i64;
  var $i1132: i1;
  var $p1134: ref;
  var $p1135: ref;
  var $p1133: ref;
  var $i1136: i64;
  var $i1137: i1;
  var $p1138: ref;
  var $p1139: ref;
  var $p1140: ref;
  var $p1141: ref;
  var $i1142: i64;
  var $i1143: i64;
  var $i1144: i1;
  var $p1145: ref;
  var $i1146: i16;
  var $i1147: i32;
  var $p1148: ref;
  var $i1149: i8;
  var $i1150: i32;
  var $i1151: i32;
  var $i1152: i1;
  var $p1153: ref;
  var $i1154: i32;
  var $p1155: ref;
  var $i1156: i8;
  var $i1157: i32;
  var $i1158: i32;
  var $i1159: i1;
  var $p1160: ref;
  var $p1161: ref;
  var $p1162: ref;
  var $p1163: ref;
  var $p1164: ref;
  var $i1165: i64;
  var $i1166: i1;
  var $p1168: ref;
  var $p1169: ref;
  var $p1167: ref;
  var $i1170: i64;
  var $i1171: i1;
  var $p1172: ref;
  var $i1173: i64;
  var $i1174: i1;
  var $p1176: ref;
  var $p1177: ref;
  var $p1175: ref;
  var $i1178: i64;
  var $i1179: i1;
  var $p1180: ref;
  var $p1181: ref;
  var $p1182: ref;
  var $p1183: ref;
  var $i1184: i64;
  var $i1185: i64;
  var $i1186: i1;
  var $p1187: ref;
  var $i1188: i16;
  var $i1189: i32;
  var $p1190: ref;
  var $i1191: i8;
  var $i1192: i32;
  var $i1193: i32;
  var $i1194: i1;
  var $p1195: ref;
  var $i1196: i32;
  var $p1197: ref;
  var $i1198: i8;
  var $i1199: i32;
  var $i1200: i32;
  var $i1201: i1;
  var $p1202: ref;
  var $p1203: ref;
  var $p1204: ref;
  var $p1205: ref;
  var $p1206: ref;
  var $i1207: i64;
  var $i1208: i1;
  var $p1210: ref;
  var $p1211: ref;
  var $p1209: ref;
  var $i1212: i64;
  var $i1213: i1;
  var $p1214: ref;
  var $i1215: i64;
  var $i1216: i1;
  var $p1218: ref;
  var $p1219: ref;
  var $p1217: ref;
  var $i1220: i64;
  var $i1221: i1;
  var $p1222: ref;
  var $p1223: ref;
  var $p1224: ref;
  var $p1225: ref;
  var $i1226: i64;
  var $i1227: i64;
  var $i1228: i1;
  var $p1229: ref;
  var $i1230: i16;
  var $i1231: i32;
  var $p1232: ref;
  var $i1233: i8;
  var $i1234: i32;
  var $i1235: i32;
  var $i1236: i1;
  var $p1237: ref;
  var $i1238: i32;
  var $p1239: ref;
  var $i1240: i8;
  var $i1241: i32;
  var $i1242: i32;
  var $i1243: i1;
  var $p1244: ref;
  var $p1245: ref;
  var $p1246: ref;
  var $p1247: ref;
  var $p1248: ref;
  var $i1249: i64;
  var $i1250: i1;
  var $p1252: ref;
  var $p1253: ref;
  var $p1251: ref;
  var $i1254: i64;
  var $i1255: i1;
  var $p1256: ref;
  var $i1257: i64;
  var $i1258: i1;
  var $p1260: ref;
  var $p1261: ref;
  var $p1259: ref;
  var $i1262: i64;
  var $i1263: i1;
  var $p1264: ref;
  var $p1265: ref;
  var $p1266: ref;
  var $p1267: ref;
  var $i1268: i64;
  var $i1269: i64;
  var $i1270: i1;
  var $p1271: ref;
  var $i1272: i16;
  var $i1273: i32;
  var $p1274: ref;
  var $i1275: i8;
  var $i1276: i32;
  var $i1277: i32;
  var $i1278: i1;
  var $p1279: ref;
  var $i1280: i32;
  var $p1281: ref;
  var $i1282: i8;
  var $i1283: i32;
  var $i1284: i32;
  var $i1285: i1;
  var $p1286: ref;
  var $p1287: ref;
  var $p1288: ref;
  var $p1289: ref;
  var $p1290: ref;
  var $i1291: i64;
  var $i1292: i1;
  var $p1294: ref;
  var $p1295: ref;
  var $p1293: ref;
  var $i1296: i64;
  var $i1297: i1;
  var $p1298: ref;
  var $i1299: i64;
  var $i1300: i1;
  var $p1302: ref;
  var $p1303: ref;
  var $p1301: ref;
  var $i1304: i64;
  var $i1305: i1;
  var $p1306: ref;
  var $p1307: ref;
  var $p1308: ref;
  var $p1309: ref;
  var $i1310: i64;
  var $i1311: i64;
  var $i1312: i1;
  var $p1313: ref;
  var $i1314: i16;
  var $i1315: i32;
  var $p1316: ref;
  var $i1317: i8;
  var $i1318: i32;
  var $i1319: i32;
  var $i1320: i1;
  var $p1321: ref;
  var $i1322: i32;
  var $p1323: ref;
  var $i1324: i8;
  var $i1325: i32;
  var $i1326: i32;
  var $i1327: i1;
  var $p1328: ref;
  var $p1329: ref;
  var $p1330: ref;
  var $p1331: ref;
  var $p1332: ref;
  var $i1333: i64;
  var $i1334: i1;
  var $p1336: ref;
  var $p1337: ref;
  var $p1335: ref;
  var $i1338: i64;
  var $i1339: i1;
  var $p1340: ref;
  var $i1341: i64;
  var $i1342: i1;
  var $p1344: ref;
  var $p1345: ref;
  var $p1343: ref;
  var $i1346: i64;
  var $i1347: i1;
  var $p1348: ref;
  var $p1349: ref;
  var $p1350: ref;
  var $p1351: ref;
  var $i1352: i64;
  var $i1353: i64;
  var $i1354: i1;
  var $p1355: ref;
  var $i1356: i16;
  var $i1357: i32;
  var $p1358: ref;
  var $i1359: i8;
  var $i1360: i32;
  var $i1361: i32;
  var $i1362: i1;
  var $p1363: ref;
  var $i1364: i32;
  var $p1365: ref;
  var $i1366: i8;
  var $i1367: i32;
  var $i1368: i32;
  var $i1369: i1;
  var $p1370: ref;
  var $p1371: ref;
  var $p1372: ref;
  var $p1373: ref;
  var $p1374: ref;
  var $i1375: i64;
  var $i1376: i1;
  var $p1378: ref;
  var $p1379: ref;
  var $p1377: ref;
  var $i1380: i64;
  var $i1381: i1;
$bb0:
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata %struct.atm_dev* %0, i64 0, metadata !8095, metadata !8006), !dbg !8096, !verifier.code !8008
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6714, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i1, 1074815371);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6714, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6715, 5} true;
  assume {:verifier.code 0} true;
  $i5 := $sub.i32(0, 515);
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6793, 1} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6719, 24} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6719, 9} true;
  assume {:verifier.code 0} true;
  call $i7 := copy_from_user($p6, $p2, 2);
  // WARNING: %10 = call i64 @copy_from_user(i8* %9, i8* %2, i64 2), !dbg !8022, !verifier.code !8005
  call {:cexpr "tmp"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6720, 11} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i64($i7, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6720, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6721, 5} true;
  assume {:verifier.code 0} true;
  $i5 := $sub.i32(0, 14);
  goto $bb3;
$bb6:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6725, 16} true;
  assume {:verifier.code 0} true;
  $p9 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6725, 16} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i8($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6725, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i8.i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6725, 25} true;
  assume {:verifier.code 0} true;
  $i12 := $eq.i32($i11, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6725, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6726, 8} true;
  assume {:verifier.code 0} true;
  $p13 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6726, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p13, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6727, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6730, 16} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6730, 16} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i8($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6730, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $sext.i8.i32($i15);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6730, 25} true;
  assume {:verifier.code 0} true;
  $i17 := $eq.i32($i16, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6730, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i17 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6731, 8} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6731, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p18, 16);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6732, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 18} true;
  assume {:verifier.code 0} true;
  $p19 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 18} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i8($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 9} true;
  assume {:verifier.code 0} true;
  $i21 := $sext.i8.i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 27} true;
  assume {:verifier.code 0} true;
  $i22 := $sgt.i32($i21, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 31} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb14, $bb16;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 31} true;
  assume {:verifier.code 0} true;
  assume ($i22 == 1);
  goto $bb15;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6736, 5} true;
  assume {:verifier.code 0} true;
  $i5 := $sub.i32(0, 22);
  goto $bb3;
$bb16:
  assume !(($i22 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 43} true;
  assume {:verifier.code 0} true;
  $p23 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 43} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i8($M.0, $p23);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 34} true;
  assume {:verifier.code 0} true;
  $i25 := $sext.i8.i32($i24);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 52} true;
  assume {:verifier.code 0} true;
  $i26 := $slt.i32($i25, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 57} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb17, $bb18;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 57} true;
  assume {:verifier.code 0} true;
  assume ($i26 == 1);
  goto $bb15;
$bb18:
  assume !(($i26 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 69} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 69} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i8($M.0, $p27);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 60} true;
  assume {:verifier.code 0} true;
  $i29 := $sext.i8.i32($i28);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 78} true;
  assume {:verifier.code 0} true;
  $i30 := $sgt.i32($i29, 16);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 84} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb19, $bb20;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 84} true;
  assume {:verifier.code 0} true;
  assume ($i30 == 1);
  goto $bb15;
$bb20:
  assume !(($i30 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 96} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 96} true;
  assume {:verifier.code 0} true;
  $i32 := $load.i8($M.0, $p31);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 87} true;
  assume {:verifier.code 0} true;
  $i33 := $sext.i8.i32($i32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 105} true;
  assume {:verifier.code 0} true;
  $i34 := $slt.i32($i33, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb21, $bb22;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6735, 7} true;
  assume {:verifier.code 0} true;
  assume ($i34 == 1);
  goto $bb15;
$bb22:
  assume !(($i34 == 1));
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6740, 3} true;
  assume {:verifier.code 0} true;
  call _raw_read_lock(vcc_sklist_lock);
  // WARNING: call void @_raw_read_lock(%struct.__anonstruct_rwlock_t_36* @vcc_sklist_lock), !dbg !8070, !verifier.code !8005
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6784, 7} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p35 := $load.ref($M.0, vcc_hash);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i36 := $p2i.ref.i64($p35);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i37 := $ne.i64($i36, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i37 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p38 := $bitcast.ref.ref($p35);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p38, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p40 := $p39;
  goto $bb28;
$bb27:
  assume !(($i37 == 1));
  assume {:verifier.code 0} true;
  $p40 := $0.ref;
  goto $bb28;
$bb28:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i41 := $p2i.ref.i64($p40);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i42 := $ne.i64($i41, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i42} true;
  goto $bb29, $bb30;
$bb29:
  assume ($i42 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p43 := $p40;
  goto $bb32;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i42 == 1));
  goto $bb31;
$bb31:
  assume {:verifier.code 0} true;
  goto $bb49;
$bb32:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb33:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p44 := atm_sk($p43);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($p44, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p46 := $load.ref($M.0, $p45);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i47 := $p2i.ref.i64($p46);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i48 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i49 := $ne.i64($i47, $i48);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb34, $bb35;
$bb34:
  assume ($i49 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb35:
  assume !(($i49 == 1));
  assume {:verifier.code 0} true;
  goto $bb37;
$bb36:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p65 := $p43;
  $p66 := $add.ref($p43, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p67 := $bitcast.ref.ref($p66);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p68 := $p67;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p69 := $load.ref($M.0, $p68);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i70 := $p2i.ref.i64($p69);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i71 := $ne.i64($i70, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i71} true;
  goto $bb44, $bb45;
$bb37:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($p44, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i51 := $load.i16($M.0, $p50);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i52 := $sext.i16.i32($i51);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p53 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i54 := $load.i8($M.0, $p53);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i55 := $sext.i8.i32($i54);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i56 := $ashr.i32($i52, $i55);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i57 := $ne.i32($i56, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i57} true;
  goto $bb38, $bb40;
$bb38:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i57 == 1);
  goto $bb39;
$bb39:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6762, 5} true;
  assume {:verifier.code 0} true;
  call _raw_read_unlock(vcc_sklist_lock);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6763, 5} true;
  assume {:verifier.code 0} true;
  $i5 := $sub.i32(0, 16);
  goto $bb3;
$bb40:
  assume !(($i57 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($p44, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i59 := $load.i32($M.0, $p58);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i61 := $load.i8($M.0, $p60);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i62 := $sext.i8.i32($i61);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i63 := $ashr.i32($i59, $i62);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i64 := $ne.i32($i63, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i64} true;
  goto $bb41, $bb42;
$bb41:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i64 == 1);
  goto $bb39;
$bb42:
  assume !(($i64 == 1));
  assume {:verifier.code 0} true;
  goto $bb43;
$bb43:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb44:
  assume ($i71 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p72 := $bitcast.ref.ref($p69);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($p72, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p74 := $p73;
  goto $bb46;
$bb45:
  assume !(($i71 == 1));
  assume {:verifier.code 0} true;
  $p74 := $0.ref;
  goto $bb46;
$bb46:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i75 := $p2i.ref.i64($p74);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i76 := $ne.i64($i75, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p43 := $p74;
  assume {:branchcond $i76} true;
  goto $bb47, $bb48;
$bb47:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i76 == 1);
  goto $bb32;
$bb48:
  assume !(($i76 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb31;
$bb49:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb50;
$bb50:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p80 := $load.ref($M.0, $add.ref(vcc_hash, 8));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i81 := $p2i.ref.i64($p80);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i82 := $ne.i64($i81, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i82} true;
  goto $bb52, $bb53;
$bb51:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6789, 3} true;
  assume {:verifier.code 0} true;
  call _raw_read_unlock(vcc_sklist_lock);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6790, 8} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($p0, 94);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6790, 19} true;
  assume {:verifier.code 0} true;
  $p78 := $bitcast.ref.ref($p77);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6790, 19} true;
  assume {:verifier.code 0} true;
  $p79 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6790, 19} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memcpy.i8($M.0, $M.0, $p78, $p79, 2, $zext.i32.i64(1), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6791, 3} true;
  assume {:verifier.code 0} true;
  $i5 := 0;
  goto $bb3;
$bb52:
  assume ($i82 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p84 := $bitcast.ref.ref($p80);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p85 := $add.ref($p84, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p83 := $p85;
  goto $bb54;
$bb53:
  assume !(($i82 == 1));
  assume {:verifier.code 0} true;
  $p83 := $0.ref;
  goto $bb54;
$bb54:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i86 := $p2i.ref.i64($p83);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i87 := $ne.i64($i86, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i87} true;
  goto $bb55, $bb56;
$bb55:
  assume ($i87 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p88 := $p83;
  goto $bb58;
$bb56:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i87 == 1));
  goto $bb57;
$bb57:
  assume {:verifier.code 0} true;
  goto $bb74;
$bb58:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb59;
$bb59:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p89 := atm_sk($p88);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($p89, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p91 := $load.ref($M.0, $p90);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i92 := $p2i.ref.i64($p91);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i93 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i94 := $ne.i64($i92, $i93);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i94} true;
  goto $bb60, $bb61;
$bb60:
  assume ($i94 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb68;
$bb61:
  assume !(($i94 == 1));
  assume {:verifier.code 0} true;
  goto $bb62;
$bb62:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p95 := $add.ref($p89, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i96 := $load.i16($M.0, $p95);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i97 := $sext.i16.i32($i96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p98 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i99 := $load.i8($M.0, $p98);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i100 := $sext.i8.i32($i99);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i101 := $ashr.i32($i97, $i100);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i102 := $ne.i32($i101, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i102} true;
  goto $bb63, $bb64;
$bb63:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i102 == 1);
  goto $bb39;
$bb64:
  assume !(($i102 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p103 := $add.ref($p89, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i104 := $load.i32($M.0, $p103);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p105 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i106 := $load.i8($M.0, $p105);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i107 := $sext.i8.i32($i106);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i108 := $ashr.i32($i104, $i107);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i109 := $ne.i32($i108, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i109} true;
  goto $bb65, $bb66;
$bb65:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i109 == 1);
  goto $bb39;
$bb66:
  assume !(($i109 == 1));
  assume {:verifier.code 0} true;
  goto $bb67;
$bb67:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb68;
$bb68:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p110 := $p88;
  $p111 := $add.ref($p88, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p112 := $bitcast.ref.ref($p111);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p113 := $p112;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p114 := $load.ref($M.0, $p113);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i115 := $p2i.ref.i64($p114);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i116 := $ne.i64($i115, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i116} true;
  goto $bb69, $bb70;
$bb69:
  assume ($i116 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p118 := $bitcast.ref.ref($p114);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p119 := $add.ref($p118, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p117 := $p119;
  goto $bb71;
$bb70:
  assume !(($i116 == 1));
  assume {:verifier.code 0} true;
  $p117 := $0.ref;
  goto $bb71;
$bb71:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i120 := $p2i.ref.i64($p117);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i121 := $ne.i64($i120, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p88 := $p117;
  assume {:branchcond $i121} true;
  goto $bb72, $bb73;
$bb72:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i121 == 1);
  goto $bb58;
$bb73:
  assume !(($i121 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb57;
$bb74:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb75;
$bb75:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p122 := $load.ref($M.0, $add.ref(vcc_hash, 16));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i123 := $p2i.ref.i64($p122);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i124 := $ne.i64($i123, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i124} true;
  goto $bb76, $bb77;
$bb76:
  assume ($i124 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p126 := $bitcast.ref.ref($p122);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p127 := $add.ref($p126, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p125 := $p127;
  goto $bb78;
$bb77:
  assume !(($i124 == 1));
  assume {:verifier.code 0} true;
  $p125 := $0.ref;
  goto $bb78;
$bb78:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i128 := $p2i.ref.i64($p125);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i129 := $ne.i64($i128, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i129} true;
  goto $bb79, $bb80;
$bb79:
  assume ($i129 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p130 := $p125;
  goto $bb82;
$bb80:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i129 == 1));
  goto $bb81;
$bb81:
  assume {:verifier.code 0} true;
  goto $bb98;
$bb82:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb83:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p131 := atm_sk($p130);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p132 := $add.ref($p131, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p133 := $load.ref($M.0, $p132);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i134 := $p2i.ref.i64($p133);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i135 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i136 := $ne.i64($i134, $i135);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i136} true;
  goto $bb84, $bb85;
$bb84:
  assume ($i136 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb92;
$bb85:
  assume !(($i136 == 1));
  assume {:verifier.code 0} true;
  goto $bb86;
$bb86:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p137 := $add.ref($p131, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i138 := $load.i16($M.0, $p137);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i139 := $sext.i16.i32($i138);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p140 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i141 := $load.i8($M.0, $p140);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i142 := $sext.i8.i32($i141);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i143 := $ashr.i32($i139, $i142);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i144 := $ne.i32($i143, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i144} true;
  goto $bb87, $bb88;
$bb87:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i144 == 1);
  goto $bb39;
$bb88:
  assume !(($i144 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p145 := $add.ref($p131, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i146 := $load.i32($M.0, $p145);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p147 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i148 := $load.i8($M.0, $p147);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i149 := $sext.i8.i32($i148);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i150 := $ashr.i32($i146, $i149);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i151 := $ne.i32($i150, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i151} true;
  goto $bb89, $bb90;
$bb89:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i151 == 1);
  goto $bb39;
$bb90:
  assume !(($i151 == 1));
  assume {:verifier.code 0} true;
  goto $bb91;
$bb91:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb92;
$bb92:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p152 := $p130;
  $p153 := $add.ref($p130, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p154 := $bitcast.ref.ref($p153);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p155 := $p154;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p156 := $load.ref($M.0, $p155);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i157 := $p2i.ref.i64($p156);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i158 := $ne.i64($i157, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i158} true;
  goto $bb93, $bb94;
$bb93:
  assume ($i158 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p160 := $bitcast.ref.ref($p156);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p161 := $add.ref($p160, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p159 := $p161;
  goto $bb95;
$bb94:
  assume !(($i158 == 1));
  assume {:verifier.code 0} true;
  $p159 := $0.ref;
  goto $bb95;
$bb95:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i162 := $p2i.ref.i64($p159);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i163 := $ne.i64($i162, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p130 := $p159;
  assume {:branchcond $i163} true;
  goto $bb96, $bb97;
$bb96:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i163 == 1);
  goto $bb82;
$bb97:
  assume !(($i163 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb81;
$bb98:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb99;
$bb99:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p164 := $load.ref($M.0, $add.ref(vcc_hash, 24));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i165 := $p2i.ref.i64($p164);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i166 := $ne.i64($i165, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i166} true;
  goto $bb100, $bb101;
$bb100:
  assume ($i166 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p168 := $bitcast.ref.ref($p164);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p169 := $add.ref($p168, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p167 := $p169;
  goto $bb102;
$bb101:
  assume !(($i166 == 1));
  assume {:verifier.code 0} true;
  $p167 := $0.ref;
  goto $bb102;
$bb102:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i170 := $p2i.ref.i64($p167);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i171 := $ne.i64($i170, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i171} true;
  goto $bb103, $bb104;
$bb103:
  assume ($i171 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p172 := $p167;
  goto $bb106;
$bb104:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i171 == 1));
  goto $bb105;
$bb105:
  assume {:verifier.code 0} true;
  goto $bb122;
$bb106:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb107;
$bb107:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p173 := atm_sk($p172);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p174 := $add.ref($p173, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p175 := $load.ref($M.0, $p174);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i176 := $p2i.ref.i64($p175);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i177 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i178 := $ne.i64($i176, $i177);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i178} true;
  goto $bb108, $bb109;
$bb108:
  assume ($i178 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb116;
$bb109:
  assume !(($i178 == 1));
  assume {:verifier.code 0} true;
  goto $bb110;
$bb110:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p179 := $add.ref($p173, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i180 := $load.i16($M.0, $p179);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i181 := $sext.i16.i32($i180);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p182 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i183 := $load.i8($M.0, $p182);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i184 := $sext.i8.i32($i183);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i185 := $ashr.i32($i181, $i184);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i186 := $ne.i32($i185, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i186} true;
  goto $bb111, $bb112;
$bb111:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i186 == 1);
  goto $bb39;
$bb112:
  assume !(($i186 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p187 := $add.ref($p173, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i188 := $load.i32($M.0, $p187);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p189 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i190 := $load.i8($M.0, $p189);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i191 := $sext.i8.i32($i190);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i192 := $ashr.i32($i188, $i191);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i193 := $ne.i32($i192, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i193} true;
  goto $bb113, $bb114;
$bb113:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i193 == 1);
  goto $bb39;
$bb114:
  assume !(($i193 == 1));
  assume {:verifier.code 0} true;
  goto $bb115;
$bb115:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb116;
$bb116:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p194 := $p172;
  $p195 := $add.ref($p172, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p196 := $bitcast.ref.ref($p195);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p197 := $p196;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p198 := $load.ref($M.0, $p197);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i199 := $p2i.ref.i64($p198);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i200 := $ne.i64($i199, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i200} true;
  goto $bb117, $bb118;
$bb117:
  assume ($i200 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p202 := $bitcast.ref.ref($p198);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p203 := $add.ref($p202, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p201 := $p203;
  goto $bb119;
$bb118:
  assume !(($i200 == 1));
  assume {:verifier.code 0} true;
  $p201 := $0.ref;
  goto $bb119;
$bb119:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i204 := $p2i.ref.i64($p201);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i205 := $ne.i64($i204, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p172 := $p201;
  assume {:branchcond $i205} true;
  goto $bb120, $bb121;
$bb120:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i205 == 1);
  goto $bb106;
$bb121:
  assume !(($i205 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb105;
$bb122:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb123;
$bb123:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p206 := $load.ref($M.0, $add.ref(vcc_hash, 32));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i207 := $p2i.ref.i64($p206);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i208 := $ne.i64($i207, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i208} true;
  goto $bb124, $bb125;
$bb124:
  assume ($i208 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p210 := $bitcast.ref.ref($p206);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p211 := $add.ref($p210, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p209 := $p211;
  goto $bb126;
$bb125:
  assume !(($i208 == 1));
  assume {:verifier.code 0} true;
  $p209 := $0.ref;
  goto $bb126;
$bb126:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i212 := $p2i.ref.i64($p209);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i213 := $ne.i64($i212, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i213} true;
  goto $bb127, $bb128;
$bb127:
  assume ($i213 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p214 := $p209;
  goto $bb130;
$bb128:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i213 == 1));
  goto $bb129;
$bb129:
  assume {:verifier.code 0} true;
  goto $bb146;
$bb130:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb131;
$bb131:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p215 := atm_sk($p214);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p216 := $add.ref($p215, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p217 := $load.ref($M.0, $p216);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i218 := $p2i.ref.i64($p217);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i219 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i220 := $ne.i64($i218, $i219);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i220} true;
  goto $bb132, $bb133;
$bb132:
  assume ($i220 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb140;
$bb133:
  assume !(($i220 == 1));
  assume {:verifier.code 0} true;
  goto $bb134;
$bb134:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p221 := $add.ref($p215, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i222 := $load.i16($M.0, $p221);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i223 := $sext.i16.i32($i222);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p224 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i225 := $load.i8($M.0, $p224);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i226 := $sext.i8.i32($i225);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i227 := $ashr.i32($i223, $i226);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i228 := $ne.i32($i227, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i228} true;
  goto $bb135, $bb136;
$bb135:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i228 == 1);
  goto $bb39;
$bb136:
  assume !(($i228 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p229 := $add.ref($p215, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i230 := $load.i32($M.0, $p229);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p231 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i232 := $load.i8($M.0, $p231);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i233 := $sext.i8.i32($i232);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i234 := $ashr.i32($i230, $i233);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i235 := $ne.i32($i234, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i235} true;
  goto $bb137, $bb138;
$bb137:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i235 == 1);
  goto $bb39;
$bb138:
  assume !(($i235 == 1));
  assume {:verifier.code 0} true;
  goto $bb139;
$bb139:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb140;
$bb140:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p236 := $p214;
  $p237 := $add.ref($p214, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p238 := $bitcast.ref.ref($p237);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p239 := $p238;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p240 := $load.ref($M.0, $p239);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i241 := $p2i.ref.i64($p240);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i242 := $ne.i64($i241, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i242} true;
  goto $bb141, $bb142;
$bb141:
  assume ($i242 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p244 := $bitcast.ref.ref($p240);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p245 := $add.ref($p244, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p243 := $p245;
  goto $bb143;
$bb142:
  assume !(($i242 == 1));
  assume {:verifier.code 0} true;
  $p243 := $0.ref;
  goto $bb143;
$bb143:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i246 := $p2i.ref.i64($p243);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i247 := $ne.i64($i246, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p214 := $p243;
  assume {:branchcond $i247} true;
  goto $bb144, $bb145;
$bb144:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i247 == 1);
  goto $bb130;
$bb145:
  assume !(($i247 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb129;
$bb146:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb147;
$bb147:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p248 := $load.ref($M.0, $add.ref(vcc_hash, 40));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i249 := $p2i.ref.i64($p248);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i250 := $ne.i64($i249, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i250} true;
  goto $bb148, $bb149;
$bb148:
  assume ($i250 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p252 := $bitcast.ref.ref($p248);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p253 := $add.ref($p252, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p251 := $p253;
  goto $bb150;
$bb149:
  assume !(($i250 == 1));
  assume {:verifier.code 0} true;
  $p251 := $0.ref;
  goto $bb150;
$bb150:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i254 := $p2i.ref.i64($p251);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i255 := $ne.i64($i254, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i255} true;
  goto $bb151, $bb152;
$bb151:
  assume ($i255 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p256 := $p251;
  goto $bb154;
$bb152:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i255 == 1));
  goto $bb153;
$bb153:
  assume {:verifier.code 0} true;
  goto $bb170;
$bb154:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb155;
$bb155:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p257 := atm_sk($p256);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p258 := $add.ref($p257, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p259 := $load.ref($M.0, $p258);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i260 := $p2i.ref.i64($p259);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i261 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i262 := $ne.i64($i260, $i261);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i262} true;
  goto $bb156, $bb157;
$bb156:
  assume ($i262 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb164;
$bb157:
  assume !(($i262 == 1));
  assume {:verifier.code 0} true;
  goto $bb158;
$bb158:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p263 := $add.ref($p257, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i264 := $load.i16($M.0, $p263);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i265 := $sext.i16.i32($i264);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p266 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i267 := $load.i8($M.0, $p266);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i268 := $sext.i8.i32($i267);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i269 := $ashr.i32($i265, $i268);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i270 := $ne.i32($i269, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i270} true;
  goto $bb159, $bb160;
$bb159:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i270 == 1);
  goto $bb39;
$bb160:
  assume !(($i270 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p271 := $add.ref($p257, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i272 := $load.i32($M.0, $p271);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p273 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i274 := $load.i8($M.0, $p273);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i275 := $sext.i8.i32($i274);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i276 := $ashr.i32($i272, $i275);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i277 := $ne.i32($i276, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i277} true;
  goto $bb161, $bb162;
$bb161:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i277 == 1);
  goto $bb39;
$bb162:
  assume !(($i277 == 1));
  assume {:verifier.code 0} true;
  goto $bb163;
$bb163:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb164;
$bb164:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p278 := $p256;
  $p279 := $add.ref($p256, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p280 := $bitcast.ref.ref($p279);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p281 := $p280;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p282 := $load.ref($M.0, $p281);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i283 := $p2i.ref.i64($p282);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i284 := $ne.i64($i283, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i284} true;
  goto $bb165, $bb166;
$bb165:
  assume ($i284 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p286 := $bitcast.ref.ref($p282);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p287 := $add.ref($p286, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p285 := $p287;
  goto $bb167;
$bb166:
  assume !(($i284 == 1));
  assume {:verifier.code 0} true;
  $p285 := $0.ref;
  goto $bb167;
$bb167:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i288 := $p2i.ref.i64($p285);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i289 := $ne.i64($i288, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p256 := $p285;
  assume {:branchcond $i289} true;
  goto $bb168, $bb169;
$bb168:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i289 == 1);
  goto $bb154;
$bb169:
  assume !(($i289 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb153;
$bb170:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb171;
$bb171:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p290 := $load.ref($M.0, $add.ref(vcc_hash, 48));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i291 := $p2i.ref.i64($p290);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i292 := $ne.i64($i291, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i292} true;
  goto $bb172, $bb173;
$bb172:
  assume ($i292 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p294 := $bitcast.ref.ref($p290);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p295 := $add.ref($p294, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p293 := $p295;
  goto $bb174;
$bb173:
  assume !(($i292 == 1));
  assume {:verifier.code 0} true;
  $p293 := $0.ref;
  goto $bb174;
$bb174:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i296 := $p2i.ref.i64($p293);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i297 := $ne.i64($i296, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i297} true;
  goto $bb175, $bb176;
$bb175:
  assume ($i297 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p298 := $p293;
  goto $bb178;
$bb176:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i297 == 1));
  goto $bb177;
$bb177:
  assume {:verifier.code 0} true;
  goto $bb194;
$bb178:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb179;
$bb179:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p299 := atm_sk($p298);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p300 := $add.ref($p299, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p301 := $load.ref($M.0, $p300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i302 := $p2i.ref.i64($p301);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i303 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i304 := $ne.i64($i302, $i303);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i304} true;
  goto $bb180, $bb181;
$bb180:
  assume ($i304 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb188;
$bb181:
  assume !(($i304 == 1));
  assume {:verifier.code 0} true;
  goto $bb182;
$bb182:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p305 := $add.ref($p299, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i306 := $load.i16($M.0, $p305);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i307 := $sext.i16.i32($i306);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p308 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i309 := $load.i8($M.0, $p308);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i310 := $sext.i8.i32($i309);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i311 := $ashr.i32($i307, $i310);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i312 := $ne.i32($i311, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i312} true;
  goto $bb183, $bb184;
$bb183:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i312 == 1);
  goto $bb39;
$bb184:
  assume !(($i312 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p313 := $add.ref($p299, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i314 := $load.i32($M.0, $p313);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p315 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i316 := $load.i8($M.0, $p315);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i317 := $sext.i8.i32($i316);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i318 := $ashr.i32($i314, $i317);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i319 := $ne.i32($i318, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i319} true;
  goto $bb185, $bb186;
$bb185:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i319 == 1);
  goto $bb39;
$bb186:
  assume !(($i319 == 1));
  assume {:verifier.code 0} true;
  goto $bb187;
$bb187:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb188;
$bb188:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p320 := $p298;
  $p321 := $add.ref($p298, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p322 := $bitcast.ref.ref($p321);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p323 := $p322;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p324 := $load.ref($M.0, $p323);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i325 := $p2i.ref.i64($p324);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i326 := $ne.i64($i325, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i326} true;
  goto $bb189, $bb190;
$bb189:
  assume ($i326 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p328 := $bitcast.ref.ref($p324);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p329 := $add.ref($p328, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p327 := $p329;
  goto $bb191;
$bb190:
  assume !(($i326 == 1));
  assume {:verifier.code 0} true;
  $p327 := $0.ref;
  goto $bb191;
$bb191:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i330 := $p2i.ref.i64($p327);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i331 := $ne.i64($i330, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p298 := $p327;
  assume {:branchcond $i331} true;
  goto $bb192, $bb193;
$bb192:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i331 == 1);
  goto $bb178;
$bb193:
  assume !(($i331 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb177;
$bb194:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb195;
$bb195:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p332 := $load.ref($M.0, $add.ref(vcc_hash, 56));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i333 := $p2i.ref.i64($p332);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i334 := $ne.i64($i333, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i334} true;
  goto $bb196, $bb197;
$bb196:
  assume ($i334 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p336 := $bitcast.ref.ref($p332);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p337 := $add.ref($p336, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p335 := $p337;
  goto $bb198;
$bb197:
  assume !(($i334 == 1));
  assume {:verifier.code 0} true;
  $p335 := $0.ref;
  goto $bb198;
$bb198:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i338 := $p2i.ref.i64($p335);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i339 := $ne.i64($i338, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i339} true;
  goto $bb199, $bb200;
$bb199:
  assume ($i339 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p340 := $p335;
  goto $bb202;
$bb200:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i339 == 1));
  goto $bb201;
$bb201:
  assume {:verifier.code 0} true;
  goto $bb218;
$bb202:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb203;
$bb203:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p341 := atm_sk($p340);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p342 := $add.ref($p341, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p343 := $load.ref($M.0, $p342);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i344 := $p2i.ref.i64($p343);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i345 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i346 := $ne.i64($i344, $i345);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i346} true;
  goto $bb204, $bb205;
$bb204:
  assume ($i346 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb212;
$bb205:
  assume !(($i346 == 1));
  assume {:verifier.code 0} true;
  goto $bb206;
$bb206:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p347 := $add.ref($p341, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i348 := $load.i16($M.0, $p347);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i349 := $sext.i16.i32($i348);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p350 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i351 := $load.i8($M.0, $p350);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i352 := $sext.i8.i32($i351);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i353 := $ashr.i32($i349, $i352);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i354 := $ne.i32($i353, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i354} true;
  goto $bb207, $bb208;
$bb207:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i354 == 1);
  goto $bb39;
$bb208:
  assume !(($i354 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p355 := $add.ref($p341, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i356 := $load.i32($M.0, $p355);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p357 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i358 := $load.i8($M.0, $p357);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i359 := $sext.i8.i32($i358);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i360 := $ashr.i32($i356, $i359);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i361 := $ne.i32($i360, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i361} true;
  goto $bb209, $bb210;
$bb209:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i361 == 1);
  goto $bb39;
$bb210:
  assume !(($i361 == 1));
  assume {:verifier.code 0} true;
  goto $bb211;
$bb211:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb212;
$bb212:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p362 := $p340;
  $p363 := $add.ref($p340, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p364 := $bitcast.ref.ref($p363);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p365 := $p364;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p366 := $load.ref($M.0, $p365);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i367 := $p2i.ref.i64($p366);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i368 := $ne.i64($i367, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i368} true;
  goto $bb213, $bb214;
$bb213:
  assume ($i368 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p370 := $bitcast.ref.ref($p366);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p371 := $add.ref($p370, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p369 := $p371;
  goto $bb215;
$bb214:
  assume !(($i368 == 1));
  assume {:verifier.code 0} true;
  $p369 := $0.ref;
  goto $bb215;
$bb215:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i372 := $p2i.ref.i64($p369);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i373 := $ne.i64($i372, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p340 := $p369;
  assume {:branchcond $i373} true;
  goto $bb216, $bb217;
$bb216:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i373 == 1);
  goto $bb202;
$bb217:
  assume !(($i373 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb201;
$bb218:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb219;
$bb219:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p374 := $load.ref($M.0, $add.ref(vcc_hash, 64));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i375 := $p2i.ref.i64($p374);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i376 := $ne.i64($i375, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i376} true;
  goto $bb220, $bb221;
$bb220:
  assume ($i376 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p378 := $bitcast.ref.ref($p374);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p379 := $add.ref($p378, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p377 := $p379;
  goto $bb222;
$bb221:
  assume !(($i376 == 1));
  assume {:verifier.code 0} true;
  $p377 := $0.ref;
  goto $bb222;
$bb222:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i380 := $p2i.ref.i64($p377);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i381 := $ne.i64($i380, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i381} true;
  goto $bb223, $bb224;
$bb223:
  assume ($i381 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p382 := $p377;
  goto $bb226;
$bb224:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i381 == 1));
  goto $bb225;
$bb225:
  assume {:verifier.code 0} true;
  goto $bb242;
$bb226:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb227;
$bb227:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p383 := atm_sk($p382);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p384 := $add.ref($p383, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p385 := $load.ref($M.0, $p384);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i386 := $p2i.ref.i64($p385);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i387 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i388 := $ne.i64($i386, $i387);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i388} true;
  goto $bb228, $bb229;
$bb228:
  assume ($i388 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb236;
$bb229:
  assume !(($i388 == 1));
  assume {:verifier.code 0} true;
  goto $bb230;
$bb230:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p389 := $add.ref($p383, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i390 := $load.i16($M.0, $p389);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i391 := $sext.i16.i32($i390);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p392 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i393 := $load.i8($M.0, $p392);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i394 := $sext.i8.i32($i393);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i395 := $ashr.i32($i391, $i394);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i396 := $ne.i32($i395, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i396} true;
  goto $bb231, $bb232;
$bb231:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i396 == 1);
  goto $bb39;
$bb232:
  assume !(($i396 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p397 := $add.ref($p383, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i398 := $load.i32($M.0, $p397);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p399 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i400 := $load.i8($M.0, $p399);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i401 := $sext.i8.i32($i400);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i402 := $ashr.i32($i398, $i401);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i403 := $ne.i32($i402, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i403} true;
  goto $bb233, $bb234;
$bb233:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i403 == 1);
  goto $bb39;
$bb234:
  assume !(($i403 == 1));
  assume {:verifier.code 0} true;
  goto $bb235;
$bb235:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb236;
$bb236:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p404 := $p382;
  $p405 := $add.ref($p382, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p406 := $bitcast.ref.ref($p405);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p407 := $p406;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p408 := $load.ref($M.0, $p407);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i409 := $p2i.ref.i64($p408);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i410 := $ne.i64($i409, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i410} true;
  goto $bb237, $bb238;
$bb237:
  assume ($i410 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p412 := $bitcast.ref.ref($p408);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p413 := $add.ref($p412, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p411 := $p413;
  goto $bb239;
$bb238:
  assume !(($i410 == 1));
  assume {:verifier.code 0} true;
  $p411 := $0.ref;
  goto $bb239;
$bb239:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i414 := $p2i.ref.i64($p411);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i415 := $ne.i64($i414, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p382 := $p411;
  assume {:branchcond $i415} true;
  goto $bb240, $bb241;
$bb240:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i415 == 1);
  goto $bb226;
$bb241:
  assume !(($i415 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb225;
$bb242:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb243;
$bb243:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p416 := $load.ref($M.0, $add.ref(vcc_hash, 72));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i417 := $p2i.ref.i64($p416);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i418 := $ne.i64($i417, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i418} true;
  goto $bb244, $bb245;
$bb244:
  assume ($i418 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p420 := $bitcast.ref.ref($p416);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p421 := $add.ref($p420, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p419 := $p421;
  goto $bb246;
$bb245:
  assume !(($i418 == 1));
  assume {:verifier.code 0} true;
  $p419 := $0.ref;
  goto $bb246;
$bb246:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i422 := $p2i.ref.i64($p419);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i423 := $ne.i64($i422, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i423} true;
  goto $bb247, $bb248;
$bb247:
  assume ($i423 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p424 := $p419;
  goto $bb250;
$bb248:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i423 == 1));
  goto $bb249;
$bb249:
  assume {:verifier.code 0} true;
  goto $bb266;
$bb250:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb251;
$bb251:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p425 := atm_sk($p424);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p426 := $add.ref($p425, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p427 := $load.ref($M.0, $p426);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i428 := $p2i.ref.i64($p427);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i429 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i430 := $ne.i64($i428, $i429);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i430} true;
  goto $bb252, $bb253;
$bb252:
  assume ($i430 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb260;
$bb253:
  assume !(($i430 == 1));
  assume {:verifier.code 0} true;
  goto $bb254;
$bb254:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p431 := $add.ref($p425, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i432 := $load.i16($M.0, $p431);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i433 := $sext.i16.i32($i432);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p434 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i435 := $load.i8($M.0, $p434);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i436 := $sext.i8.i32($i435);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i437 := $ashr.i32($i433, $i436);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i438 := $ne.i32($i437, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i438} true;
  goto $bb255, $bb256;
$bb255:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i438 == 1);
  goto $bb39;
$bb256:
  assume !(($i438 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p439 := $add.ref($p425, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i440 := $load.i32($M.0, $p439);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p441 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i442 := $load.i8($M.0, $p441);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i443 := $sext.i8.i32($i442);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i444 := $ashr.i32($i440, $i443);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i445 := $ne.i32($i444, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i445} true;
  goto $bb257, $bb258;
$bb257:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i445 == 1);
  goto $bb39;
$bb258:
  assume !(($i445 == 1));
  assume {:verifier.code 0} true;
  goto $bb259;
$bb259:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb260;
$bb260:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p446 := $p424;
  $p447 := $add.ref($p424, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p448 := $bitcast.ref.ref($p447);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p449 := $p448;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p450 := $load.ref($M.0, $p449);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i451 := $p2i.ref.i64($p450);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i452 := $ne.i64($i451, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i452} true;
  goto $bb261, $bb262;
$bb261:
  assume ($i452 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p454 := $bitcast.ref.ref($p450);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p455 := $add.ref($p454, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p453 := $p455;
  goto $bb263;
$bb262:
  assume !(($i452 == 1));
  assume {:verifier.code 0} true;
  $p453 := $0.ref;
  goto $bb263;
$bb263:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i456 := $p2i.ref.i64($p453);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i457 := $ne.i64($i456, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p424 := $p453;
  assume {:branchcond $i457} true;
  goto $bb264, $bb265;
$bb264:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i457 == 1);
  goto $bb250;
$bb265:
  assume !(($i457 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb249;
$bb266:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb267;
$bb267:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p458 := $load.ref($M.0, $add.ref(vcc_hash, 80));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i459 := $p2i.ref.i64($p458);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i460 := $ne.i64($i459, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i460} true;
  goto $bb268, $bb269;
$bb268:
  assume ($i460 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p462 := $bitcast.ref.ref($p458);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p463 := $add.ref($p462, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p461 := $p463;
  goto $bb270;
$bb269:
  assume !(($i460 == 1));
  assume {:verifier.code 0} true;
  $p461 := $0.ref;
  goto $bb270;
$bb270:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i464 := $p2i.ref.i64($p461);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i465 := $ne.i64($i464, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i465} true;
  goto $bb271, $bb272;
$bb271:
  assume ($i465 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p466 := $p461;
  goto $bb274;
$bb272:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i465 == 1));
  goto $bb273;
$bb273:
  assume {:verifier.code 0} true;
  goto $bb290;
$bb274:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb275;
$bb275:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p467 := atm_sk($p466);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p468 := $add.ref($p467, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p469 := $load.ref($M.0, $p468);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i470 := $p2i.ref.i64($p469);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i471 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i472 := $ne.i64($i470, $i471);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i472} true;
  goto $bb276, $bb277;
$bb276:
  assume ($i472 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb284;
$bb277:
  assume !(($i472 == 1));
  assume {:verifier.code 0} true;
  goto $bb278;
$bb278:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p473 := $add.ref($p467, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i474 := $load.i16($M.0, $p473);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i475 := $sext.i16.i32($i474);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p476 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i477 := $load.i8($M.0, $p476);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i478 := $sext.i8.i32($i477);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i479 := $ashr.i32($i475, $i478);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i480 := $ne.i32($i479, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i480} true;
  goto $bb279, $bb280;
$bb279:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i480 == 1);
  goto $bb39;
$bb280:
  assume !(($i480 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p481 := $add.ref($p467, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i482 := $load.i32($M.0, $p481);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p483 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i484 := $load.i8($M.0, $p483);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i485 := $sext.i8.i32($i484);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i486 := $ashr.i32($i482, $i485);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i487 := $ne.i32($i486, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i487} true;
  goto $bb281, $bb282;
$bb281:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i487 == 1);
  goto $bb39;
$bb282:
  assume !(($i487 == 1));
  assume {:verifier.code 0} true;
  goto $bb283;
$bb283:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb284;
$bb284:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p488 := $p466;
  $p489 := $add.ref($p466, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p490 := $bitcast.ref.ref($p489);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p491 := $p490;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p492 := $load.ref($M.0, $p491);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i493 := $p2i.ref.i64($p492);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i494 := $ne.i64($i493, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i494} true;
  goto $bb285, $bb286;
$bb285:
  assume ($i494 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p496 := $bitcast.ref.ref($p492);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p497 := $add.ref($p496, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p495 := $p497;
  goto $bb287;
$bb286:
  assume !(($i494 == 1));
  assume {:verifier.code 0} true;
  $p495 := $0.ref;
  goto $bb287;
$bb287:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i498 := $p2i.ref.i64($p495);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i499 := $ne.i64($i498, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p466 := $p495;
  assume {:branchcond $i499} true;
  goto $bb288, $bb289;
$bb288:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i499 == 1);
  goto $bb274;
$bb289:
  assume !(($i499 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb273;
$bb290:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb291;
$bb291:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p500 := $load.ref($M.0, $add.ref(vcc_hash, 88));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i501 := $p2i.ref.i64($p500);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i502 := $ne.i64($i501, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i502} true;
  goto $bb292, $bb293;
$bb292:
  assume ($i502 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p504 := $bitcast.ref.ref($p500);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p505 := $add.ref($p504, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p503 := $p505;
  goto $bb294;
$bb293:
  assume !(($i502 == 1));
  assume {:verifier.code 0} true;
  $p503 := $0.ref;
  goto $bb294;
$bb294:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i506 := $p2i.ref.i64($p503);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i507 := $ne.i64($i506, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i507} true;
  goto $bb295, $bb296;
$bb295:
  assume ($i507 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p508 := $p503;
  goto $bb298;
$bb296:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i507 == 1));
  goto $bb297;
$bb297:
  assume {:verifier.code 0} true;
  goto $bb314;
$bb298:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb299;
$bb299:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p509 := atm_sk($p508);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p510 := $add.ref($p509, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p511 := $load.ref($M.0, $p510);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i512 := $p2i.ref.i64($p511);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i513 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i514 := $ne.i64($i512, $i513);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i514} true;
  goto $bb300, $bb301;
$bb300:
  assume ($i514 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb308;
$bb301:
  assume !(($i514 == 1));
  assume {:verifier.code 0} true;
  goto $bb302;
$bb302:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p515 := $add.ref($p509, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i516 := $load.i16($M.0, $p515);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i517 := $sext.i16.i32($i516);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p518 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i519 := $load.i8($M.0, $p518);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i520 := $sext.i8.i32($i519);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i521 := $ashr.i32($i517, $i520);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i522 := $ne.i32($i521, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i522} true;
  goto $bb303, $bb304;
$bb303:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i522 == 1);
  goto $bb39;
$bb304:
  assume !(($i522 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p523 := $add.ref($p509, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i524 := $load.i32($M.0, $p523);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p525 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i526 := $load.i8($M.0, $p525);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i527 := $sext.i8.i32($i526);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i528 := $ashr.i32($i524, $i527);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i529 := $ne.i32($i528, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i529} true;
  goto $bb305, $bb306;
$bb305:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i529 == 1);
  goto $bb39;
$bb306:
  assume !(($i529 == 1));
  assume {:verifier.code 0} true;
  goto $bb307;
$bb307:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb308;
$bb308:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p530 := $p508;
  $p531 := $add.ref($p508, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p532 := $bitcast.ref.ref($p531);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p533 := $p532;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p534 := $load.ref($M.0, $p533);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i535 := $p2i.ref.i64($p534);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i536 := $ne.i64($i535, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i536} true;
  goto $bb309, $bb310;
$bb309:
  assume ($i536 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p538 := $bitcast.ref.ref($p534);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p539 := $add.ref($p538, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p537 := $p539;
  goto $bb311;
$bb310:
  assume !(($i536 == 1));
  assume {:verifier.code 0} true;
  $p537 := $0.ref;
  goto $bb311;
$bb311:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i540 := $p2i.ref.i64($p537);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i541 := $ne.i64($i540, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p508 := $p537;
  assume {:branchcond $i541} true;
  goto $bb312, $bb313;
$bb312:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i541 == 1);
  goto $bb298;
$bb313:
  assume !(($i541 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb297;
$bb314:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb315;
$bb315:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p542 := $load.ref($M.0, $add.ref(vcc_hash, 96));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i543 := $p2i.ref.i64($p542);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i544 := $ne.i64($i543, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i544} true;
  goto $bb316, $bb317;
$bb316:
  assume ($i544 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p546 := $bitcast.ref.ref($p542);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p547 := $add.ref($p546, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p545 := $p547;
  goto $bb318;
$bb317:
  assume !(($i544 == 1));
  assume {:verifier.code 0} true;
  $p545 := $0.ref;
  goto $bb318;
$bb318:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i548 := $p2i.ref.i64($p545);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i549 := $ne.i64($i548, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i549} true;
  goto $bb319, $bb320;
$bb319:
  assume ($i549 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p550 := $p545;
  goto $bb322;
$bb320:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i549 == 1));
  goto $bb321;
$bb321:
  assume {:verifier.code 0} true;
  goto $bb338;
$bb322:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb323;
$bb323:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p551 := atm_sk($p550);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p552 := $add.ref($p551, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p553 := $load.ref($M.0, $p552);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i554 := $p2i.ref.i64($p553);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i555 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i556 := $ne.i64($i554, $i555);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i556} true;
  goto $bb324, $bb325;
$bb324:
  assume ($i556 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb332;
$bb325:
  assume !(($i556 == 1));
  assume {:verifier.code 0} true;
  goto $bb326;
$bb326:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p557 := $add.ref($p551, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i558 := $load.i16($M.0, $p557);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i559 := $sext.i16.i32($i558);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p560 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i561 := $load.i8($M.0, $p560);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i562 := $sext.i8.i32($i561);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i563 := $ashr.i32($i559, $i562);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i564 := $ne.i32($i563, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i564} true;
  goto $bb327, $bb328;
$bb327:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i564 == 1);
  goto $bb39;
$bb328:
  assume !(($i564 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p565 := $add.ref($p551, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i566 := $load.i32($M.0, $p565);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p567 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i568 := $load.i8($M.0, $p567);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i569 := $sext.i8.i32($i568);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i570 := $ashr.i32($i566, $i569);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i571 := $ne.i32($i570, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i571} true;
  goto $bb329, $bb330;
$bb329:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i571 == 1);
  goto $bb39;
$bb330:
  assume !(($i571 == 1));
  assume {:verifier.code 0} true;
  goto $bb331;
$bb331:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb332;
$bb332:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p572 := $p550;
  $p573 := $add.ref($p550, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p574 := $bitcast.ref.ref($p573);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p575 := $p574;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p576 := $load.ref($M.0, $p575);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i577 := $p2i.ref.i64($p576);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i578 := $ne.i64($i577, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i578} true;
  goto $bb333, $bb334;
$bb333:
  assume ($i578 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p580 := $bitcast.ref.ref($p576);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p581 := $add.ref($p580, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p579 := $p581;
  goto $bb335;
$bb334:
  assume !(($i578 == 1));
  assume {:verifier.code 0} true;
  $p579 := $0.ref;
  goto $bb335;
$bb335:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i582 := $p2i.ref.i64($p579);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i583 := $ne.i64($i582, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p550 := $p579;
  assume {:branchcond $i583} true;
  goto $bb336, $bb337;
$bb336:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i583 == 1);
  goto $bb322;
$bb337:
  assume !(($i583 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb321;
$bb338:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb339;
$bb339:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p584 := $load.ref($M.0, $add.ref(vcc_hash, 104));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i585 := $p2i.ref.i64($p584);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i586 := $ne.i64($i585, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i586} true;
  goto $bb340, $bb341;
$bb340:
  assume ($i586 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p588 := $bitcast.ref.ref($p584);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p589 := $add.ref($p588, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p587 := $p589;
  goto $bb342;
$bb341:
  assume !(($i586 == 1));
  assume {:verifier.code 0} true;
  $p587 := $0.ref;
  goto $bb342;
$bb342:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i590 := $p2i.ref.i64($p587);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i591 := $ne.i64($i590, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i591} true;
  goto $bb343, $bb344;
$bb343:
  assume ($i591 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p592 := $p587;
  goto $bb346;
$bb344:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i591 == 1));
  goto $bb345;
$bb345:
  assume {:verifier.code 0} true;
  goto $bb362;
$bb346:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb347;
$bb347:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p593 := atm_sk($p592);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p594 := $add.ref($p593, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p595 := $load.ref($M.0, $p594);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i596 := $p2i.ref.i64($p595);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i597 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i598 := $ne.i64($i596, $i597);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i598} true;
  goto $bb348, $bb349;
$bb348:
  assume ($i598 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb356;
$bb349:
  assume !(($i598 == 1));
  assume {:verifier.code 0} true;
  goto $bb350;
$bb350:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p599 := $add.ref($p593, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i600 := $load.i16($M.0, $p599);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i601 := $sext.i16.i32($i600);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p602 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i603 := $load.i8($M.0, $p602);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i604 := $sext.i8.i32($i603);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i605 := $ashr.i32($i601, $i604);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i606 := $ne.i32($i605, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i606} true;
  goto $bb351, $bb352;
$bb351:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i606 == 1);
  goto $bb39;
$bb352:
  assume !(($i606 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p607 := $add.ref($p593, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i608 := $load.i32($M.0, $p607);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p609 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i610 := $load.i8($M.0, $p609);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i611 := $sext.i8.i32($i610);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i612 := $ashr.i32($i608, $i611);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i613 := $ne.i32($i612, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i613} true;
  goto $bb353, $bb354;
$bb353:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i613 == 1);
  goto $bb39;
$bb354:
  assume !(($i613 == 1));
  assume {:verifier.code 0} true;
  goto $bb355;
$bb355:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb356;
$bb356:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p614 := $p592;
  $p615 := $add.ref($p592, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p616 := $bitcast.ref.ref($p615);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p617 := $p616;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p618 := $load.ref($M.0, $p617);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i619 := $p2i.ref.i64($p618);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i620 := $ne.i64($i619, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i620} true;
  goto $bb357, $bb358;
$bb357:
  assume ($i620 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p622 := $bitcast.ref.ref($p618);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p623 := $add.ref($p622, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p621 := $p623;
  goto $bb359;
$bb358:
  assume !(($i620 == 1));
  assume {:verifier.code 0} true;
  $p621 := $0.ref;
  goto $bb359;
$bb359:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i624 := $p2i.ref.i64($p621);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i625 := $ne.i64($i624, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p592 := $p621;
  assume {:branchcond $i625} true;
  goto $bb360, $bb361;
$bb360:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i625 == 1);
  goto $bb346;
$bb361:
  assume !(($i625 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb345;
$bb362:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb363;
$bb363:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p626 := $load.ref($M.0, $add.ref(vcc_hash, 112));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i627 := $p2i.ref.i64($p626);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i628 := $ne.i64($i627, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i628} true;
  goto $bb364, $bb365;
$bb364:
  assume ($i628 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p630 := $bitcast.ref.ref($p626);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p631 := $add.ref($p630, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p629 := $p631;
  goto $bb366;
$bb365:
  assume !(($i628 == 1));
  assume {:verifier.code 0} true;
  $p629 := $0.ref;
  goto $bb366;
$bb366:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i632 := $p2i.ref.i64($p629);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i633 := $ne.i64($i632, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i633} true;
  goto $bb367, $bb368;
$bb367:
  assume ($i633 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p634 := $p629;
  goto $bb370;
$bb368:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i633 == 1));
  goto $bb369;
$bb369:
  assume {:verifier.code 0} true;
  goto $bb386;
$bb370:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb371;
$bb371:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p635 := atm_sk($p634);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p636 := $add.ref($p635, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p637 := $load.ref($M.0, $p636);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i638 := $p2i.ref.i64($p637);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i639 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i640 := $ne.i64($i638, $i639);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i640} true;
  goto $bb372, $bb373;
$bb372:
  assume ($i640 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb380;
$bb373:
  assume !(($i640 == 1));
  assume {:verifier.code 0} true;
  goto $bb374;
$bb374:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p641 := $add.ref($p635, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i642 := $load.i16($M.0, $p641);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i643 := $sext.i16.i32($i642);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p644 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i645 := $load.i8($M.0, $p644);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i646 := $sext.i8.i32($i645);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i647 := $ashr.i32($i643, $i646);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i648 := $ne.i32($i647, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i648} true;
  goto $bb375, $bb376;
$bb375:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i648 == 1);
  goto $bb39;
$bb376:
  assume !(($i648 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p649 := $add.ref($p635, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i650 := $load.i32($M.0, $p649);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p651 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i652 := $load.i8($M.0, $p651);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i653 := $sext.i8.i32($i652);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i654 := $ashr.i32($i650, $i653);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i655 := $ne.i32($i654, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i655} true;
  goto $bb377, $bb378;
$bb377:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i655 == 1);
  goto $bb39;
$bb378:
  assume !(($i655 == 1));
  assume {:verifier.code 0} true;
  goto $bb379;
$bb379:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb380;
$bb380:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p656 := $p634;
  $p657 := $add.ref($p634, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p658 := $bitcast.ref.ref($p657);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p659 := $p658;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p660 := $load.ref($M.0, $p659);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i661 := $p2i.ref.i64($p660);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i662 := $ne.i64($i661, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i662} true;
  goto $bb381, $bb382;
$bb381:
  assume ($i662 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p664 := $bitcast.ref.ref($p660);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p665 := $add.ref($p664, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p663 := $p665;
  goto $bb383;
$bb382:
  assume !(($i662 == 1));
  assume {:verifier.code 0} true;
  $p663 := $0.ref;
  goto $bb383;
$bb383:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i666 := $p2i.ref.i64($p663);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i667 := $ne.i64($i666, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p634 := $p663;
  assume {:branchcond $i667} true;
  goto $bb384, $bb385;
$bb384:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i667 == 1);
  goto $bb370;
$bb385:
  assume !(($i667 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb369;
$bb386:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb387;
$bb387:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p668 := $load.ref($M.0, $add.ref(vcc_hash, 120));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i669 := $p2i.ref.i64($p668);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i670 := $ne.i64($i669, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i670} true;
  goto $bb388, $bb389;
$bb388:
  assume ($i670 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p672 := $bitcast.ref.ref($p668);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p673 := $add.ref($p672, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p671 := $p673;
  goto $bb390;
$bb389:
  assume !(($i670 == 1));
  assume {:verifier.code 0} true;
  $p671 := $0.ref;
  goto $bb390;
$bb390:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i674 := $p2i.ref.i64($p671);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i675 := $ne.i64($i674, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i675} true;
  goto $bb391, $bb392;
$bb391:
  assume ($i675 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p676 := $p671;
  goto $bb394;
$bb392:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i675 == 1));
  goto $bb393;
$bb393:
  assume {:verifier.code 0} true;
  goto $bb410;
$bb394:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb395;
$bb395:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p677 := atm_sk($p676);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p678 := $add.ref($p677, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p679 := $load.ref($M.0, $p678);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i680 := $p2i.ref.i64($p679);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i681 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i682 := $ne.i64($i680, $i681);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i682} true;
  goto $bb396, $bb397;
$bb396:
  assume ($i682 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb404;
$bb397:
  assume !(($i682 == 1));
  assume {:verifier.code 0} true;
  goto $bb398;
$bb398:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p683 := $add.ref($p677, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i684 := $load.i16($M.0, $p683);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i685 := $sext.i16.i32($i684);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p686 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i687 := $load.i8($M.0, $p686);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i688 := $sext.i8.i32($i687);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i689 := $ashr.i32($i685, $i688);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i690 := $ne.i32($i689, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i690} true;
  goto $bb399, $bb400;
$bb399:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i690 == 1);
  goto $bb39;
$bb400:
  assume !(($i690 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p691 := $add.ref($p677, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i692 := $load.i32($M.0, $p691);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p693 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i694 := $load.i8($M.0, $p693);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i695 := $sext.i8.i32($i694);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i696 := $ashr.i32($i692, $i695);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i697 := $ne.i32($i696, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i697} true;
  goto $bb401, $bb402;
$bb401:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i697 == 1);
  goto $bb39;
$bb402:
  assume !(($i697 == 1));
  assume {:verifier.code 0} true;
  goto $bb403;
$bb403:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb404;
$bb404:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p698 := $p676;
  $p699 := $add.ref($p676, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p700 := $bitcast.ref.ref($p699);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p701 := $p700;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p702 := $load.ref($M.0, $p701);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i703 := $p2i.ref.i64($p702);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i704 := $ne.i64($i703, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i704} true;
  goto $bb405, $bb406;
$bb405:
  assume ($i704 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p706 := $bitcast.ref.ref($p702);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p707 := $add.ref($p706, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p705 := $p707;
  goto $bb407;
$bb406:
  assume !(($i704 == 1));
  assume {:verifier.code 0} true;
  $p705 := $0.ref;
  goto $bb407;
$bb407:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i708 := $p2i.ref.i64($p705);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i709 := $ne.i64($i708, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p676 := $p705;
  assume {:branchcond $i709} true;
  goto $bb408, $bb409;
$bb408:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i709 == 1);
  goto $bb394;
$bb409:
  assume !(($i709 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb393;
$bb410:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb411;
$bb411:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p710 := $load.ref($M.0, $add.ref(vcc_hash, 128));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i711 := $p2i.ref.i64($p710);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i712 := $ne.i64($i711, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i712} true;
  goto $bb412, $bb413;
$bb412:
  assume ($i712 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p714 := $bitcast.ref.ref($p710);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p715 := $add.ref($p714, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p713 := $p715;
  goto $bb414;
$bb413:
  assume !(($i712 == 1));
  assume {:verifier.code 0} true;
  $p713 := $0.ref;
  goto $bb414;
$bb414:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i716 := $p2i.ref.i64($p713);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i717 := $ne.i64($i716, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i717} true;
  goto $bb415, $bb416;
$bb415:
  assume ($i717 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p718 := $p713;
  goto $bb418;
$bb416:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i717 == 1));
  goto $bb417;
$bb417:
  assume {:verifier.code 0} true;
  goto $bb434;
$bb418:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb419;
$bb419:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p719 := atm_sk($p718);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p720 := $add.ref($p719, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p721 := $load.ref($M.0, $p720);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i722 := $p2i.ref.i64($p721);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i723 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i724 := $ne.i64($i722, $i723);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i724} true;
  goto $bb420, $bb421;
$bb420:
  assume ($i724 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb428;
$bb421:
  assume !(($i724 == 1));
  assume {:verifier.code 0} true;
  goto $bb422;
$bb422:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p725 := $add.ref($p719, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i726 := $load.i16($M.0, $p725);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i727 := $sext.i16.i32($i726);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p728 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i729 := $load.i8($M.0, $p728);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i730 := $sext.i8.i32($i729);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i731 := $ashr.i32($i727, $i730);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i732 := $ne.i32($i731, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i732} true;
  goto $bb423, $bb424;
$bb423:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i732 == 1);
  goto $bb39;
$bb424:
  assume !(($i732 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p733 := $add.ref($p719, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i734 := $load.i32($M.0, $p733);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p735 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i736 := $load.i8($M.0, $p735);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i737 := $sext.i8.i32($i736);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i738 := $ashr.i32($i734, $i737);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i739 := $ne.i32($i738, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i739} true;
  goto $bb425, $bb426;
$bb425:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i739 == 1);
  goto $bb39;
$bb426:
  assume !(($i739 == 1));
  assume {:verifier.code 0} true;
  goto $bb427;
$bb427:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb428;
$bb428:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p740 := $p718;
  $p741 := $add.ref($p718, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p742 := $bitcast.ref.ref($p741);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p743 := $p742;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p744 := $load.ref($M.0, $p743);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i745 := $p2i.ref.i64($p744);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i746 := $ne.i64($i745, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i746} true;
  goto $bb429, $bb430;
$bb429:
  assume ($i746 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p748 := $bitcast.ref.ref($p744);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p749 := $add.ref($p748, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p747 := $p749;
  goto $bb431;
$bb430:
  assume !(($i746 == 1));
  assume {:verifier.code 0} true;
  $p747 := $0.ref;
  goto $bb431;
$bb431:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i750 := $p2i.ref.i64($p747);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i751 := $ne.i64($i750, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p718 := $p747;
  assume {:branchcond $i751} true;
  goto $bb432, $bb433;
$bb432:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i751 == 1);
  goto $bb418;
$bb433:
  assume !(($i751 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb417;
$bb434:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb435;
$bb435:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p752 := $load.ref($M.0, $add.ref(vcc_hash, 136));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i753 := $p2i.ref.i64($p752);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i754 := $ne.i64($i753, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i754} true;
  goto $bb436, $bb437;
$bb436:
  assume ($i754 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p756 := $bitcast.ref.ref($p752);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p757 := $add.ref($p756, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p755 := $p757;
  goto $bb438;
$bb437:
  assume !(($i754 == 1));
  assume {:verifier.code 0} true;
  $p755 := $0.ref;
  goto $bb438;
$bb438:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i758 := $p2i.ref.i64($p755);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i759 := $ne.i64($i758, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i759} true;
  goto $bb439, $bb440;
$bb439:
  assume ($i759 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p760 := $p755;
  goto $bb442;
$bb440:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i759 == 1));
  goto $bb441;
$bb441:
  assume {:verifier.code 0} true;
  goto $bb458;
$bb442:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb443;
$bb443:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p761 := atm_sk($p760);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p762 := $add.ref($p761, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p763 := $load.ref($M.0, $p762);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i764 := $p2i.ref.i64($p763);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i765 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i766 := $ne.i64($i764, $i765);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i766} true;
  goto $bb444, $bb445;
$bb444:
  assume ($i766 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb452;
$bb445:
  assume !(($i766 == 1));
  assume {:verifier.code 0} true;
  goto $bb446;
$bb446:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p767 := $add.ref($p761, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i768 := $load.i16($M.0, $p767);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i769 := $sext.i16.i32($i768);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p770 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i771 := $load.i8($M.0, $p770);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i772 := $sext.i8.i32($i771);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i773 := $ashr.i32($i769, $i772);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i774 := $ne.i32($i773, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i774} true;
  goto $bb447, $bb448;
$bb447:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i774 == 1);
  goto $bb39;
$bb448:
  assume !(($i774 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p775 := $add.ref($p761, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i776 := $load.i32($M.0, $p775);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p777 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i778 := $load.i8($M.0, $p777);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i779 := $sext.i8.i32($i778);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i780 := $ashr.i32($i776, $i779);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i781 := $ne.i32($i780, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i781} true;
  goto $bb449, $bb450;
$bb449:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i781 == 1);
  goto $bb39;
$bb450:
  assume !(($i781 == 1));
  assume {:verifier.code 0} true;
  goto $bb451;
$bb451:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb452;
$bb452:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p782 := $p760;
  $p783 := $add.ref($p760, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p784 := $bitcast.ref.ref($p783);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p785 := $p784;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p786 := $load.ref($M.0, $p785);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i787 := $p2i.ref.i64($p786);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i788 := $ne.i64($i787, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i788} true;
  goto $bb453, $bb454;
$bb453:
  assume ($i788 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p790 := $bitcast.ref.ref($p786);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p791 := $add.ref($p790, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p789 := $p791;
  goto $bb455;
$bb454:
  assume !(($i788 == 1));
  assume {:verifier.code 0} true;
  $p789 := $0.ref;
  goto $bb455;
$bb455:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i792 := $p2i.ref.i64($p789);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i793 := $ne.i64($i792, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p760 := $p789;
  assume {:branchcond $i793} true;
  goto $bb456, $bb457;
$bb456:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i793 == 1);
  goto $bb442;
$bb457:
  assume !(($i793 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb441;
$bb458:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb459;
$bb459:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p794 := $load.ref($M.0, $add.ref(vcc_hash, 144));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i795 := $p2i.ref.i64($p794);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i796 := $ne.i64($i795, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i796} true;
  goto $bb460, $bb461;
$bb460:
  assume ($i796 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p798 := $bitcast.ref.ref($p794);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p799 := $add.ref($p798, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p797 := $p799;
  goto $bb462;
$bb461:
  assume !(($i796 == 1));
  assume {:verifier.code 0} true;
  $p797 := $0.ref;
  goto $bb462;
$bb462:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i800 := $p2i.ref.i64($p797);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i801 := $ne.i64($i800, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i801} true;
  goto $bb463, $bb464;
$bb463:
  assume ($i801 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p802 := $p797;
  goto $bb466;
$bb464:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i801 == 1));
  goto $bb465;
$bb465:
  assume {:verifier.code 0} true;
  goto $bb482;
$bb466:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb467;
$bb467:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p803 := atm_sk($p802);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p804 := $add.ref($p803, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p805 := $load.ref($M.0, $p804);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i806 := $p2i.ref.i64($p805);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i807 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i808 := $ne.i64($i806, $i807);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i808} true;
  goto $bb468, $bb469;
$bb468:
  assume ($i808 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb476;
$bb469:
  assume !(($i808 == 1));
  assume {:verifier.code 0} true;
  goto $bb470;
$bb470:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p809 := $add.ref($p803, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i810 := $load.i16($M.0, $p809);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i811 := $sext.i16.i32($i810);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p812 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i813 := $load.i8($M.0, $p812);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i814 := $sext.i8.i32($i813);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i815 := $ashr.i32($i811, $i814);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i816 := $ne.i32($i815, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i816} true;
  goto $bb471, $bb472;
$bb471:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i816 == 1);
  goto $bb39;
$bb472:
  assume !(($i816 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p817 := $add.ref($p803, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i818 := $load.i32($M.0, $p817);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p819 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i820 := $load.i8($M.0, $p819);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i821 := $sext.i8.i32($i820);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i822 := $ashr.i32($i818, $i821);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i823 := $ne.i32($i822, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i823} true;
  goto $bb473, $bb474;
$bb473:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i823 == 1);
  goto $bb39;
$bb474:
  assume !(($i823 == 1));
  assume {:verifier.code 0} true;
  goto $bb475;
$bb475:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb476;
$bb476:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p824 := $p802;
  $p825 := $add.ref($p802, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p826 := $bitcast.ref.ref($p825);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p827 := $p826;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p828 := $load.ref($M.0, $p827);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i829 := $p2i.ref.i64($p828);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i830 := $ne.i64($i829, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i830} true;
  goto $bb477, $bb478;
$bb477:
  assume ($i830 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p832 := $bitcast.ref.ref($p828);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p833 := $add.ref($p832, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p831 := $p833;
  goto $bb479;
$bb478:
  assume !(($i830 == 1));
  assume {:verifier.code 0} true;
  $p831 := $0.ref;
  goto $bb479;
$bb479:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i834 := $p2i.ref.i64($p831);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i835 := $ne.i64($i834, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p802 := $p831;
  assume {:branchcond $i835} true;
  goto $bb480, $bb481;
$bb480:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i835 == 1);
  goto $bb466;
$bb481:
  assume !(($i835 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb465;
$bb482:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb483;
$bb483:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p836 := $load.ref($M.0, $add.ref(vcc_hash, 152));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i837 := $p2i.ref.i64($p836);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i838 := $ne.i64($i837, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i838} true;
  goto $bb484, $bb485;
$bb484:
  assume ($i838 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p840 := $bitcast.ref.ref($p836);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p841 := $add.ref($p840, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p839 := $p841;
  goto $bb486;
$bb485:
  assume !(($i838 == 1));
  assume {:verifier.code 0} true;
  $p839 := $0.ref;
  goto $bb486;
$bb486:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i842 := $p2i.ref.i64($p839);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i843 := $ne.i64($i842, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i843} true;
  goto $bb487, $bb488;
$bb487:
  assume ($i843 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p844 := $p839;
  goto $bb490;
$bb488:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i843 == 1));
  goto $bb489;
$bb489:
  assume {:verifier.code 0} true;
  goto $bb506;
$bb490:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb491;
$bb491:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p845 := atm_sk($p844);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p846 := $add.ref($p845, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p847 := $load.ref($M.0, $p846);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i848 := $p2i.ref.i64($p847);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i849 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i850 := $ne.i64($i848, $i849);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i850} true;
  goto $bb492, $bb493;
$bb492:
  assume ($i850 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb500;
$bb493:
  assume !(($i850 == 1));
  assume {:verifier.code 0} true;
  goto $bb494;
$bb494:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p851 := $add.ref($p845, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i852 := $load.i16($M.0, $p851);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i853 := $sext.i16.i32($i852);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p854 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i855 := $load.i8($M.0, $p854);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i856 := $sext.i8.i32($i855);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i857 := $ashr.i32($i853, $i856);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i858 := $ne.i32($i857, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i858} true;
  goto $bb495, $bb496;
$bb495:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i858 == 1);
  goto $bb39;
$bb496:
  assume !(($i858 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p859 := $add.ref($p845, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i860 := $load.i32($M.0, $p859);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p861 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i862 := $load.i8($M.0, $p861);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i863 := $sext.i8.i32($i862);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i864 := $ashr.i32($i860, $i863);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i865 := $ne.i32($i864, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i865} true;
  goto $bb497, $bb498;
$bb497:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i865 == 1);
  goto $bb39;
$bb498:
  assume !(($i865 == 1));
  assume {:verifier.code 0} true;
  goto $bb499;
$bb499:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb500;
$bb500:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p866 := $p844;
  $p867 := $add.ref($p844, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p868 := $bitcast.ref.ref($p867);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p869 := $p868;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p870 := $load.ref($M.0, $p869);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i871 := $p2i.ref.i64($p870);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i872 := $ne.i64($i871, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i872} true;
  goto $bb501, $bb502;
$bb501:
  assume ($i872 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p874 := $bitcast.ref.ref($p870);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p875 := $add.ref($p874, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p873 := $p875;
  goto $bb503;
$bb502:
  assume !(($i872 == 1));
  assume {:verifier.code 0} true;
  $p873 := $0.ref;
  goto $bb503;
$bb503:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i876 := $p2i.ref.i64($p873);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i877 := $ne.i64($i876, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p844 := $p873;
  assume {:branchcond $i877} true;
  goto $bb504, $bb505;
$bb504:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i877 == 1);
  goto $bb490;
$bb505:
  assume !(($i877 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb489;
$bb506:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb507;
$bb507:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p878 := $load.ref($M.0, $add.ref(vcc_hash, 160));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i879 := $p2i.ref.i64($p878);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i880 := $ne.i64($i879, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i880} true;
  goto $bb508, $bb509;
$bb508:
  assume ($i880 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p882 := $bitcast.ref.ref($p878);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p883 := $add.ref($p882, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p881 := $p883;
  goto $bb510;
$bb509:
  assume !(($i880 == 1));
  assume {:verifier.code 0} true;
  $p881 := $0.ref;
  goto $bb510;
$bb510:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i884 := $p2i.ref.i64($p881);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i885 := $ne.i64($i884, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i885} true;
  goto $bb511, $bb512;
$bb511:
  assume ($i885 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p886 := $p881;
  goto $bb514;
$bb512:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i885 == 1));
  goto $bb513;
$bb513:
  assume {:verifier.code 0} true;
  goto $bb530;
$bb514:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb515;
$bb515:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p887 := atm_sk($p886);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p888 := $add.ref($p887, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p889 := $load.ref($M.0, $p888);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i890 := $p2i.ref.i64($p889);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i891 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i892 := $ne.i64($i890, $i891);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i892} true;
  goto $bb516, $bb517;
$bb516:
  assume ($i892 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb524;
$bb517:
  assume !(($i892 == 1));
  assume {:verifier.code 0} true;
  goto $bb518;
$bb518:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p893 := $add.ref($p887, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i894 := $load.i16($M.0, $p893);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i895 := $sext.i16.i32($i894);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p896 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i897 := $load.i8($M.0, $p896);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i898 := $sext.i8.i32($i897);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i899 := $ashr.i32($i895, $i898);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i900 := $ne.i32($i899, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i900} true;
  goto $bb519, $bb520;
$bb519:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i900 == 1);
  goto $bb39;
$bb520:
  assume !(($i900 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p901 := $add.ref($p887, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i902 := $load.i32($M.0, $p901);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p903 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i904 := $load.i8($M.0, $p903);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i905 := $sext.i8.i32($i904);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i906 := $ashr.i32($i902, $i905);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i907 := $ne.i32($i906, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i907} true;
  goto $bb521, $bb522;
$bb521:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i907 == 1);
  goto $bb39;
$bb522:
  assume !(($i907 == 1));
  assume {:verifier.code 0} true;
  goto $bb523;
$bb523:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb524;
$bb524:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p908 := $p886;
  $p909 := $add.ref($p886, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p910 := $bitcast.ref.ref($p909);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p911 := $p910;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p912 := $load.ref($M.0, $p911);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i913 := $p2i.ref.i64($p912);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i914 := $ne.i64($i913, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i914} true;
  goto $bb525, $bb526;
$bb525:
  assume ($i914 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p916 := $bitcast.ref.ref($p912);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p917 := $add.ref($p916, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p915 := $p917;
  goto $bb527;
$bb526:
  assume !(($i914 == 1));
  assume {:verifier.code 0} true;
  $p915 := $0.ref;
  goto $bb527;
$bb527:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i918 := $p2i.ref.i64($p915);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i919 := $ne.i64($i918, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p886 := $p915;
  assume {:branchcond $i919} true;
  goto $bb528, $bb529;
$bb528:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i919 == 1);
  goto $bb514;
$bb529:
  assume !(($i919 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb513;
$bb530:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb531;
$bb531:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p920 := $load.ref($M.0, $add.ref(vcc_hash, 168));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i921 := $p2i.ref.i64($p920);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i922 := $ne.i64($i921, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i922} true;
  goto $bb532, $bb533;
$bb532:
  assume ($i922 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p924 := $bitcast.ref.ref($p920);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p925 := $add.ref($p924, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p923 := $p925;
  goto $bb534;
$bb533:
  assume !(($i922 == 1));
  assume {:verifier.code 0} true;
  $p923 := $0.ref;
  goto $bb534;
$bb534:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i926 := $p2i.ref.i64($p923);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i927 := $ne.i64($i926, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i927} true;
  goto $bb535, $bb536;
$bb535:
  assume ($i927 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p928 := $p923;
  goto $bb538;
$bb536:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i927 == 1));
  goto $bb537;
$bb537:
  assume {:verifier.code 0} true;
  goto $bb554;
$bb538:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb539;
$bb539:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p929 := atm_sk($p928);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p930 := $add.ref($p929, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p931 := $load.ref($M.0, $p930);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i932 := $p2i.ref.i64($p931);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i933 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i934 := $ne.i64($i932, $i933);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i934} true;
  goto $bb540, $bb541;
$bb540:
  assume ($i934 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb548;
$bb541:
  assume !(($i934 == 1));
  assume {:verifier.code 0} true;
  goto $bb542;
$bb542:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p935 := $add.ref($p929, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i936 := $load.i16($M.0, $p935);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i937 := $sext.i16.i32($i936);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p938 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i939 := $load.i8($M.0, $p938);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i940 := $sext.i8.i32($i939);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i941 := $ashr.i32($i937, $i940);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i942 := $ne.i32($i941, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i942} true;
  goto $bb543, $bb544;
$bb543:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i942 == 1);
  goto $bb39;
$bb544:
  assume !(($i942 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p943 := $add.ref($p929, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i944 := $load.i32($M.0, $p943);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p945 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i946 := $load.i8($M.0, $p945);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i947 := $sext.i8.i32($i946);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i948 := $ashr.i32($i944, $i947);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i949 := $ne.i32($i948, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i949} true;
  goto $bb545, $bb546;
$bb545:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i949 == 1);
  goto $bb39;
$bb546:
  assume !(($i949 == 1));
  assume {:verifier.code 0} true;
  goto $bb547;
$bb547:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb548;
$bb548:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p950 := $p928;
  $p951 := $add.ref($p928, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p952 := $bitcast.ref.ref($p951);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p953 := $p952;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p954 := $load.ref($M.0, $p953);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i955 := $p2i.ref.i64($p954);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i956 := $ne.i64($i955, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i956} true;
  goto $bb549, $bb550;
$bb549:
  assume ($i956 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p958 := $bitcast.ref.ref($p954);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p959 := $add.ref($p958, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p957 := $p959;
  goto $bb551;
$bb550:
  assume !(($i956 == 1));
  assume {:verifier.code 0} true;
  $p957 := $0.ref;
  goto $bb551;
$bb551:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i960 := $p2i.ref.i64($p957);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i961 := $ne.i64($i960, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p928 := $p957;
  assume {:branchcond $i961} true;
  goto $bb552, $bb553;
$bb552:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i961 == 1);
  goto $bb538;
$bb553:
  assume !(($i961 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb537;
$bb554:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb555;
$bb555:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p962 := $load.ref($M.0, $add.ref(vcc_hash, 176));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i963 := $p2i.ref.i64($p962);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i964 := $ne.i64($i963, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i964} true;
  goto $bb556, $bb557;
$bb556:
  assume ($i964 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p966 := $bitcast.ref.ref($p962);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p967 := $add.ref($p966, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p965 := $p967;
  goto $bb558;
$bb557:
  assume !(($i964 == 1));
  assume {:verifier.code 0} true;
  $p965 := $0.ref;
  goto $bb558;
$bb558:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i968 := $p2i.ref.i64($p965);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i969 := $ne.i64($i968, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i969} true;
  goto $bb559, $bb560;
$bb559:
  assume ($i969 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p970 := $p965;
  goto $bb562;
$bb560:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i969 == 1));
  goto $bb561;
$bb561:
  assume {:verifier.code 0} true;
  goto $bb578;
$bb562:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb563;
$bb563:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p971 := atm_sk($p970);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p972 := $add.ref($p971, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p973 := $load.ref($M.0, $p972);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i974 := $p2i.ref.i64($p973);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i975 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i976 := $ne.i64($i974, $i975);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i976} true;
  goto $bb564, $bb565;
$bb564:
  assume ($i976 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb572;
$bb565:
  assume !(($i976 == 1));
  assume {:verifier.code 0} true;
  goto $bb566;
$bb566:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p977 := $add.ref($p971, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i978 := $load.i16($M.0, $p977);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i979 := $sext.i16.i32($i978);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p980 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i981 := $load.i8($M.0, $p980);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i982 := $sext.i8.i32($i981);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i983 := $ashr.i32($i979, $i982);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i984 := $ne.i32($i983, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i984} true;
  goto $bb567, $bb568;
$bb567:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i984 == 1);
  goto $bb39;
$bb568:
  assume !(($i984 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p985 := $add.ref($p971, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i986 := $load.i32($M.0, $p985);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p987 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i988 := $load.i8($M.0, $p987);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i989 := $sext.i8.i32($i988);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i990 := $ashr.i32($i986, $i989);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i991 := $ne.i32($i990, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i991} true;
  goto $bb569, $bb570;
$bb569:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i991 == 1);
  goto $bb39;
$bb570:
  assume !(($i991 == 1));
  assume {:verifier.code 0} true;
  goto $bb571;
$bb571:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb572;
$bb572:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p992 := $p970;
  $p993 := $add.ref($p970, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p994 := $bitcast.ref.ref($p993);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p995 := $p994;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p996 := $load.ref($M.0, $p995);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i997 := $p2i.ref.i64($p996);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i998 := $ne.i64($i997, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i998} true;
  goto $bb573, $bb574;
$bb573:
  assume ($i998 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p1000 := $bitcast.ref.ref($p996);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p1001 := $add.ref($p1000, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p999 := $p1001;
  goto $bb575;
$bb574:
  assume !(($i998 == 1));
  assume {:verifier.code 0} true;
  $p999 := $0.ref;
  goto $bb575;
$bb575:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1002 := $p2i.ref.i64($p999);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1003 := $ne.i64($i1002, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p970 := $p999;
  assume {:branchcond $i1003} true;
  goto $bb576, $bb577;
$bb576:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1003 == 1);
  goto $bb562;
$bb577:
  assume !(($i1003 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb561;
$bb578:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb579;
$bb579:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p1004 := $load.ref($M.0, $add.ref(vcc_hash, 184));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i1005 := $p2i.ref.i64($p1004);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i1006 := $ne.i64($i1005, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1006} true;
  goto $bb580, $bb581;
$bb580:
  assume ($i1006 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p1008 := $bitcast.ref.ref($p1004);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p1009 := $add.ref($p1008, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p1007 := $p1009;
  goto $bb582;
$bb581:
  assume !(($i1006 == 1));
  assume {:verifier.code 0} true;
  $p1007 := $0.ref;
  goto $bb582;
$bb582:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1010 := $p2i.ref.i64($p1007);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1011 := $ne.i64($i1010, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1011} true;
  goto $bb583, $bb584;
$bb583:
  assume ($i1011 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1012 := $p1007;
  goto $bb586;
$bb584:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i1011 == 1));
  goto $bb585;
$bb585:
  assume {:verifier.code 0} true;
  goto $bb602;
$bb586:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb587;
$bb587:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p1013 := atm_sk($p1012);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1014 := $add.ref($p1013, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1015 := $load.ref($M.0, $p1014);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i1016 := $p2i.ref.i64($p1015);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i1017 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i1018 := $ne.i64($i1016, $i1017);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1018} true;
  goto $bb588, $bb589;
$bb588:
  assume ($i1018 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb596;
$bb589:
  assume !(($i1018 == 1));
  assume {:verifier.code 0} true;
  goto $bb590;
$bb590:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p1019 := $add.ref($p1013, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i1020 := $load.i16($M.0, $p1019);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i1021 := $sext.i16.i32($i1020);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p1022 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i1023 := $load.i8($M.0, $p1022);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i1024 := $sext.i8.i32($i1023);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i1025 := $ashr.i32($i1021, $i1024);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i1026 := $ne.i32($i1025, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1026} true;
  goto $bb591, $bb592;
$bb591:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i1026 == 1);
  goto $bb39;
$bb592:
  assume !(($i1026 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p1027 := $add.ref($p1013, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i1028 := $load.i32($M.0, $p1027);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p1029 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i1030 := $load.i8($M.0, $p1029);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i1031 := $sext.i8.i32($i1030);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i1032 := $ashr.i32($i1028, $i1031);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i1033 := $ne.i32($i1032, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1033} true;
  goto $bb593, $bb594;
$bb593:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1033 == 1);
  goto $bb39;
$bb594:
  assume !(($i1033 == 1));
  assume {:verifier.code 0} true;
  goto $bb595;
$bb595:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb596;
$bb596:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p1034 := $p1012;
  $p1035 := $add.ref($p1012, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p1036 := $bitcast.ref.ref($p1035);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1037 := $p1036;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1038 := $load.ref($M.0, $p1037);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i1039 := $p2i.ref.i64($p1038);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i1040 := $ne.i64($i1039, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1040} true;
  goto $bb597, $bb598;
$bb597:
  assume ($i1040 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p1042 := $bitcast.ref.ref($p1038);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p1043 := $add.ref($p1042, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p1041 := $p1043;
  goto $bb599;
$bb598:
  assume !(($i1040 == 1));
  assume {:verifier.code 0} true;
  $p1041 := $0.ref;
  goto $bb599;
$bb599:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1044 := $p2i.ref.i64($p1041);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1045 := $ne.i64($i1044, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1012 := $p1041;
  assume {:branchcond $i1045} true;
  goto $bb600, $bb601;
$bb600:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1045 == 1);
  goto $bb586;
$bb601:
  assume !(($i1045 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb585;
$bb602:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb603;
$bb603:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p1046 := $load.ref($M.0, $add.ref(vcc_hash, 192));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i1047 := $p2i.ref.i64($p1046);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i1048 := $ne.i64($i1047, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1048} true;
  goto $bb604, $bb605;
$bb604:
  assume ($i1048 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p1050 := $bitcast.ref.ref($p1046);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p1051 := $add.ref($p1050, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p1049 := $p1051;
  goto $bb606;
$bb605:
  assume !(($i1048 == 1));
  assume {:verifier.code 0} true;
  $p1049 := $0.ref;
  goto $bb606;
$bb606:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1052 := $p2i.ref.i64($p1049);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1053 := $ne.i64($i1052, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1053} true;
  goto $bb607, $bb608;
$bb607:
  assume ($i1053 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1054 := $p1049;
  goto $bb610;
$bb608:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i1053 == 1));
  goto $bb609;
$bb609:
  assume {:verifier.code 0} true;
  goto $bb626;
$bb610:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb611;
$bb611:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p1055 := atm_sk($p1054);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1056 := $add.ref($p1055, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1057 := $load.ref($M.0, $p1056);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i1058 := $p2i.ref.i64($p1057);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i1059 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i1060 := $ne.i64($i1058, $i1059);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1060} true;
  goto $bb612, $bb613;
$bb612:
  assume ($i1060 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb620;
$bb613:
  assume !(($i1060 == 1));
  assume {:verifier.code 0} true;
  goto $bb614;
$bb614:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p1061 := $add.ref($p1055, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i1062 := $load.i16($M.0, $p1061);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i1063 := $sext.i16.i32($i1062);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p1064 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i1065 := $load.i8($M.0, $p1064);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i1066 := $sext.i8.i32($i1065);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i1067 := $ashr.i32($i1063, $i1066);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i1068 := $ne.i32($i1067, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1068} true;
  goto $bb615, $bb616;
$bb615:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i1068 == 1);
  goto $bb39;
$bb616:
  assume !(($i1068 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p1069 := $add.ref($p1055, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i1070 := $load.i32($M.0, $p1069);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p1071 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i1072 := $load.i8($M.0, $p1071);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i1073 := $sext.i8.i32($i1072);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i1074 := $ashr.i32($i1070, $i1073);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i1075 := $ne.i32($i1074, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1075} true;
  goto $bb617, $bb618;
$bb617:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1075 == 1);
  goto $bb39;
$bb618:
  assume !(($i1075 == 1));
  assume {:verifier.code 0} true;
  goto $bb619;
$bb619:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb620;
$bb620:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p1076 := $p1054;
  $p1077 := $add.ref($p1054, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p1078 := $bitcast.ref.ref($p1077);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1079 := $p1078;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1080 := $load.ref($M.0, $p1079);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i1081 := $p2i.ref.i64($p1080);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i1082 := $ne.i64($i1081, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1082} true;
  goto $bb621, $bb622;
$bb621:
  assume ($i1082 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p1084 := $bitcast.ref.ref($p1080);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p1085 := $add.ref($p1084, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p1083 := $p1085;
  goto $bb623;
$bb622:
  assume !(($i1082 == 1));
  assume {:verifier.code 0} true;
  $p1083 := $0.ref;
  goto $bb623;
$bb623:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1086 := $p2i.ref.i64($p1083);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1087 := $ne.i64($i1086, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1054 := $p1083;
  assume {:branchcond $i1087} true;
  goto $bb624, $bb625;
$bb624:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1087 == 1);
  goto $bb610;
$bb625:
  assume !(($i1087 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb609;
$bb626:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb627;
$bb627:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p1088 := $load.ref($M.0, $add.ref(vcc_hash, 200));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i1089 := $p2i.ref.i64($p1088);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i1090 := $ne.i64($i1089, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1090} true;
  goto $bb628, $bb629;
$bb628:
  assume ($i1090 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p1092 := $bitcast.ref.ref($p1088);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p1093 := $add.ref($p1092, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p1091 := $p1093;
  goto $bb630;
$bb629:
  assume !(($i1090 == 1));
  assume {:verifier.code 0} true;
  $p1091 := $0.ref;
  goto $bb630;
$bb630:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1094 := $p2i.ref.i64($p1091);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1095 := $ne.i64($i1094, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1095} true;
  goto $bb631, $bb632;
$bb631:
  assume ($i1095 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1096 := $p1091;
  goto $bb634;
$bb632:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i1095 == 1));
  goto $bb633;
$bb633:
  assume {:verifier.code 0} true;
  goto $bb650;
$bb634:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb635;
$bb635:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p1097 := atm_sk($p1096);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1098 := $add.ref($p1097, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1099 := $load.ref($M.0, $p1098);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i1100 := $p2i.ref.i64($p1099);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i1101 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i1102 := $ne.i64($i1100, $i1101);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1102} true;
  goto $bb636, $bb637;
$bb636:
  assume ($i1102 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb644;
$bb637:
  assume !(($i1102 == 1));
  assume {:verifier.code 0} true;
  goto $bb638;
$bb638:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p1103 := $add.ref($p1097, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i1104 := $load.i16($M.0, $p1103);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i1105 := $sext.i16.i32($i1104);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p1106 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i1107 := $load.i8($M.0, $p1106);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i1108 := $sext.i8.i32($i1107);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i1109 := $ashr.i32($i1105, $i1108);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i1110 := $ne.i32($i1109, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1110} true;
  goto $bb639, $bb640;
$bb639:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i1110 == 1);
  goto $bb39;
$bb640:
  assume !(($i1110 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p1111 := $add.ref($p1097, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i1112 := $load.i32($M.0, $p1111);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p1113 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i1114 := $load.i8($M.0, $p1113);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i1115 := $sext.i8.i32($i1114);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i1116 := $ashr.i32($i1112, $i1115);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i1117 := $ne.i32($i1116, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1117} true;
  goto $bb641, $bb642;
$bb641:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1117 == 1);
  goto $bb39;
$bb642:
  assume !(($i1117 == 1));
  assume {:verifier.code 0} true;
  goto $bb643;
$bb643:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb644;
$bb644:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p1118 := $p1096;
  $p1119 := $add.ref($p1096, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p1120 := $bitcast.ref.ref($p1119);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1121 := $p1120;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1122 := $load.ref($M.0, $p1121);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i1123 := $p2i.ref.i64($p1122);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i1124 := $ne.i64($i1123, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1124} true;
  goto $bb645, $bb646;
$bb645:
  assume ($i1124 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p1126 := $bitcast.ref.ref($p1122);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p1127 := $add.ref($p1126, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p1125 := $p1127;
  goto $bb647;
$bb646:
  assume !(($i1124 == 1));
  assume {:verifier.code 0} true;
  $p1125 := $0.ref;
  goto $bb647;
$bb647:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1128 := $p2i.ref.i64($p1125);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1129 := $ne.i64($i1128, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1096 := $p1125;
  assume {:branchcond $i1129} true;
  goto $bb648, $bb649;
$bb648:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1129 == 1);
  goto $bb634;
$bb649:
  assume !(($i1129 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb633;
$bb650:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb651;
$bb651:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p1130 := $load.ref($M.0, $add.ref(vcc_hash, 208));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i1131 := $p2i.ref.i64($p1130);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i1132 := $ne.i64($i1131, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1132} true;
  goto $bb652, $bb653;
$bb652:
  assume ($i1132 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p1134 := $bitcast.ref.ref($p1130);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p1135 := $add.ref($p1134, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p1133 := $p1135;
  goto $bb654;
$bb653:
  assume !(($i1132 == 1));
  assume {:verifier.code 0} true;
  $p1133 := $0.ref;
  goto $bb654;
$bb654:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1136 := $p2i.ref.i64($p1133);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1137 := $ne.i64($i1136, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1137} true;
  goto $bb655, $bb656;
$bb655:
  assume ($i1137 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1138 := $p1133;
  goto $bb658;
$bb656:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i1137 == 1));
  goto $bb657;
$bb657:
  assume {:verifier.code 0} true;
  goto $bb674;
$bb658:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb659;
$bb659:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p1139 := atm_sk($p1138);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1140 := $add.ref($p1139, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1141 := $load.ref($M.0, $p1140);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i1142 := $p2i.ref.i64($p1141);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i1143 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i1144 := $ne.i64($i1142, $i1143);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1144} true;
  goto $bb660, $bb661;
$bb660:
  assume ($i1144 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb668;
$bb661:
  assume !(($i1144 == 1));
  assume {:verifier.code 0} true;
  goto $bb662;
$bb662:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p1145 := $add.ref($p1139, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i1146 := $load.i16($M.0, $p1145);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i1147 := $sext.i16.i32($i1146);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p1148 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i1149 := $load.i8($M.0, $p1148);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i1150 := $sext.i8.i32($i1149);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i1151 := $ashr.i32($i1147, $i1150);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i1152 := $ne.i32($i1151, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1152} true;
  goto $bb663, $bb664;
$bb663:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i1152 == 1);
  goto $bb39;
$bb664:
  assume !(($i1152 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p1153 := $add.ref($p1139, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i1154 := $load.i32($M.0, $p1153);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p1155 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i1156 := $load.i8($M.0, $p1155);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i1157 := $sext.i8.i32($i1156);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i1158 := $ashr.i32($i1154, $i1157);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i1159 := $ne.i32($i1158, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1159} true;
  goto $bb665, $bb666;
$bb665:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1159 == 1);
  goto $bb39;
$bb666:
  assume !(($i1159 == 1));
  assume {:verifier.code 0} true;
  goto $bb667;
$bb667:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb668;
$bb668:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p1160 := $p1138;
  $p1161 := $add.ref($p1138, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p1162 := $bitcast.ref.ref($p1161);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1163 := $p1162;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1164 := $load.ref($M.0, $p1163);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i1165 := $p2i.ref.i64($p1164);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i1166 := $ne.i64($i1165, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1166} true;
  goto $bb669, $bb670;
$bb669:
  assume ($i1166 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p1168 := $bitcast.ref.ref($p1164);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p1169 := $add.ref($p1168, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p1167 := $p1169;
  goto $bb671;
$bb670:
  assume !(($i1166 == 1));
  assume {:verifier.code 0} true;
  $p1167 := $0.ref;
  goto $bb671;
$bb671:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1170 := $p2i.ref.i64($p1167);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1171 := $ne.i64($i1170, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1138 := $p1167;
  assume {:branchcond $i1171} true;
  goto $bb672, $bb673;
$bb672:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1171 == 1);
  goto $bb658;
$bb673:
  assume !(($i1171 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb657;
$bb674:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb675;
$bb675:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p1172 := $load.ref($M.0, $add.ref(vcc_hash, 216));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i1173 := $p2i.ref.i64($p1172);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i1174 := $ne.i64($i1173, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1174} true;
  goto $bb676, $bb677;
$bb676:
  assume ($i1174 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p1176 := $bitcast.ref.ref($p1172);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p1177 := $add.ref($p1176, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p1175 := $p1177;
  goto $bb678;
$bb677:
  assume !(($i1174 == 1));
  assume {:verifier.code 0} true;
  $p1175 := $0.ref;
  goto $bb678;
$bb678:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1178 := $p2i.ref.i64($p1175);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1179 := $ne.i64($i1178, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1179} true;
  goto $bb679, $bb680;
$bb679:
  assume ($i1179 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1180 := $p1175;
  goto $bb682;
$bb680:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i1179 == 1));
  goto $bb681;
$bb681:
  assume {:verifier.code 0} true;
  goto $bb698;
$bb682:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb683;
$bb683:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p1181 := atm_sk($p1180);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1182 := $add.ref($p1181, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1183 := $load.ref($M.0, $p1182);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i1184 := $p2i.ref.i64($p1183);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i1185 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i1186 := $ne.i64($i1184, $i1185);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1186} true;
  goto $bb684, $bb685;
$bb684:
  assume ($i1186 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb692;
$bb685:
  assume !(($i1186 == 1));
  assume {:verifier.code 0} true;
  goto $bb686;
$bb686:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p1187 := $add.ref($p1181, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i1188 := $load.i16($M.0, $p1187);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i1189 := $sext.i16.i32($i1188);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p1190 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i1191 := $load.i8($M.0, $p1190);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i1192 := $sext.i8.i32($i1191);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i1193 := $ashr.i32($i1189, $i1192);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i1194 := $ne.i32($i1193, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1194} true;
  goto $bb687, $bb688;
$bb687:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i1194 == 1);
  goto $bb39;
$bb688:
  assume !(($i1194 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p1195 := $add.ref($p1181, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i1196 := $load.i32($M.0, $p1195);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p1197 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i1198 := $load.i8($M.0, $p1197);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i1199 := $sext.i8.i32($i1198);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i1200 := $ashr.i32($i1196, $i1199);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i1201 := $ne.i32($i1200, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1201} true;
  goto $bb689, $bb690;
$bb689:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1201 == 1);
  goto $bb39;
$bb690:
  assume !(($i1201 == 1));
  assume {:verifier.code 0} true;
  goto $bb691;
$bb691:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb692;
$bb692:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p1202 := $p1180;
  $p1203 := $add.ref($p1180, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p1204 := $bitcast.ref.ref($p1203);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1205 := $p1204;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1206 := $load.ref($M.0, $p1205);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i1207 := $p2i.ref.i64($p1206);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i1208 := $ne.i64($i1207, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1208} true;
  goto $bb693, $bb694;
$bb693:
  assume ($i1208 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p1210 := $bitcast.ref.ref($p1206);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p1211 := $add.ref($p1210, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p1209 := $p1211;
  goto $bb695;
$bb694:
  assume !(($i1208 == 1));
  assume {:verifier.code 0} true;
  $p1209 := $0.ref;
  goto $bb695;
$bb695:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1212 := $p2i.ref.i64($p1209);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1213 := $ne.i64($i1212, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1180 := $p1209;
  assume {:branchcond $i1213} true;
  goto $bb696, $bb697;
$bb696:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1213 == 1);
  goto $bb682;
$bb697:
  assume !(($i1213 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb681;
$bb698:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb699;
$bb699:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p1214 := $load.ref($M.0, $add.ref(vcc_hash, 224));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i1215 := $p2i.ref.i64($p1214);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i1216 := $ne.i64($i1215, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1216} true;
  goto $bb700, $bb701;
$bb700:
  assume ($i1216 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p1218 := $bitcast.ref.ref($p1214);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p1219 := $add.ref($p1218, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p1217 := $p1219;
  goto $bb702;
$bb701:
  assume !(($i1216 == 1));
  assume {:verifier.code 0} true;
  $p1217 := $0.ref;
  goto $bb702;
$bb702:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1220 := $p2i.ref.i64($p1217);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1221 := $ne.i64($i1220, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1221} true;
  goto $bb703, $bb704;
$bb703:
  assume ($i1221 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1222 := $p1217;
  goto $bb706;
$bb704:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i1221 == 1));
  goto $bb705;
$bb705:
  assume {:verifier.code 0} true;
  goto $bb722;
$bb706:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb707;
$bb707:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p1223 := atm_sk($p1222);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1224 := $add.ref($p1223, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1225 := $load.ref($M.0, $p1224);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i1226 := $p2i.ref.i64($p1225);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i1227 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i1228 := $ne.i64($i1226, $i1227);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1228} true;
  goto $bb708, $bb709;
$bb708:
  assume ($i1228 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb716;
$bb709:
  assume !(($i1228 == 1));
  assume {:verifier.code 0} true;
  goto $bb710;
$bb710:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p1229 := $add.ref($p1223, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i1230 := $load.i16($M.0, $p1229);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i1231 := $sext.i16.i32($i1230);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p1232 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i1233 := $load.i8($M.0, $p1232);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i1234 := $sext.i8.i32($i1233);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i1235 := $ashr.i32($i1231, $i1234);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i1236 := $ne.i32($i1235, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1236} true;
  goto $bb711, $bb712;
$bb711:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i1236 == 1);
  goto $bb39;
$bb712:
  assume !(($i1236 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p1237 := $add.ref($p1223, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i1238 := $load.i32($M.0, $p1237);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p1239 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i1240 := $load.i8($M.0, $p1239);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i1241 := $sext.i8.i32($i1240);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i1242 := $ashr.i32($i1238, $i1241);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i1243 := $ne.i32($i1242, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1243} true;
  goto $bb713, $bb714;
$bb713:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1243 == 1);
  goto $bb39;
$bb714:
  assume !(($i1243 == 1));
  assume {:verifier.code 0} true;
  goto $bb715;
$bb715:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb716;
$bb716:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p1244 := $p1222;
  $p1245 := $add.ref($p1222, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p1246 := $bitcast.ref.ref($p1245);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1247 := $p1246;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1248 := $load.ref($M.0, $p1247);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i1249 := $p2i.ref.i64($p1248);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i1250 := $ne.i64($i1249, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1250} true;
  goto $bb717, $bb718;
$bb717:
  assume ($i1250 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p1252 := $bitcast.ref.ref($p1248);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p1253 := $add.ref($p1252, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p1251 := $p1253;
  goto $bb719;
$bb718:
  assume !(($i1250 == 1));
  assume {:verifier.code 0} true;
  $p1251 := $0.ref;
  goto $bb719;
$bb719:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1254 := $p2i.ref.i64($p1251);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1255 := $ne.i64($i1254, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1222 := $p1251;
  assume {:branchcond $i1255} true;
  goto $bb720, $bb721;
$bb720:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1255 == 1);
  goto $bb706;
$bb721:
  assume !(($i1255 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb705;
$bb722:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb723;
$bb723:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p1256 := $load.ref($M.0, $add.ref(vcc_hash, 232));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i1257 := $p2i.ref.i64($p1256);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i1258 := $ne.i64($i1257, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1258} true;
  goto $bb724, $bb725;
$bb724:
  assume ($i1258 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p1260 := $bitcast.ref.ref($p1256);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p1261 := $add.ref($p1260, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p1259 := $p1261;
  goto $bb726;
$bb725:
  assume !(($i1258 == 1));
  assume {:verifier.code 0} true;
  $p1259 := $0.ref;
  goto $bb726;
$bb726:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1262 := $p2i.ref.i64($p1259);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1263 := $ne.i64($i1262, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1263} true;
  goto $bb727, $bb728;
$bb727:
  assume ($i1263 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1264 := $p1259;
  goto $bb730;
$bb728:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i1263 == 1));
  goto $bb729;
$bb729:
  assume {:verifier.code 0} true;
  goto $bb746;
$bb730:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb731;
$bb731:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p1265 := atm_sk($p1264);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1266 := $add.ref($p1265, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1267 := $load.ref($M.0, $p1266);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i1268 := $p2i.ref.i64($p1267);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i1269 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i1270 := $ne.i64($i1268, $i1269);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1270} true;
  goto $bb732, $bb733;
$bb732:
  assume ($i1270 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb740;
$bb733:
  assume !(($i1270 == 1));
  assume {:verifier.code 0} true;
  goto $bb734;
$bb734:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p1271 := $add.ref($p1265, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i1272 := $load.i16($M.0, $p1271);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i1273 := $sext.i16.i32($i1272);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p1274 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i1275 := $load.i8($M.0, $p1274);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i1276 := $sext.i8.i32($i1275);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i1277 := $ashr.i32($i1273, $i1276);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i1278 := $ne.i32($i1277, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1278} true;
  goto $bb735, $bb736;
$bb735:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i1278 == 1);
  goto $bb39;
$bb736:
  assume !(($i1278 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p1279 := $add.ref($p1265, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i1280 := $load.i32($M.0, $p1279);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p1281 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i1282 := $load.i8($M.0, $p1281);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i1283 := $sext.i8.i32($i1282);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i1284 := $ashr.i32($i1280, $i1283);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i1285 := $ne.i32($i1284, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1285} true;
  goto $bb737, $bb738;
$bb737:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1285 == 1);
  goto $bb39;
$bb738:
  assume !(($i1285 == 1));
  assume {:verifier.code 0} true;
  goto $bb739;
$bb739:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb740;
$bb740:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p1286 := $p1264;
  $p1287 := $add.ref($p1264, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p1288 := $bitcast.ref.ref($p1287);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1289 := $p1288;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1290 := $load.ref($M.0, $p1289);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i1291 := $p2i.ref.i64($p1290);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i1292 := $ne.i64($i1291, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1292} true;
  goto $bb741, $bb742;
$bb741:
  assume ($i1292 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p1294 := $bitcast.ref.ref($p1290);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p1295 := $add.ref($p1294, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p1293 := $p1295;
  goto $bb743;
$bb742:
  assume !(($i1292 == 1));
  assume {:verifier.code 0} true;
  $p1293 := $0.ref;
  goto $bb743;
$bb743:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1296 := $p2i.ref.i64($p1293);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1297 := $ne.i64($i1296, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1264 := $p1293;
  assume {:branchcond $i1297} true;
  goto $bb744, $bb745;
$bb744:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1297 == 1);
  goto $bb730;
$bb745:
  assume !(($i1297 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb729;
$bb746:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb747;
$bb747:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p1298 := $load.ref($M.0, $add.ref(vcc_hash, 240));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i1299 := $p2i.ref.i64($p1298);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i1300 := $ne.i64($i1299, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1300} true;
  goto $bb748, $bb749;
$bb748:
  assume ($i1300 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p1302 := $bitcast.ref.ref($p1298);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p1303 := $add.ref($p1302, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p1301 := $p1303;
  goto $bb750;
$bb749:
  assume !(($i1300 == 1));
  assume {:verifier.code 0} true;
  $p1301 := $0.ref;
  goto $bb750;
$bb750:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1304 := $p2i.ref.i64($p1301);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1305 := $ne.i64($i1304, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1305} true;
  goto $bb751, $bb752;
$bb751:
  assume ($i1305 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1306 := $p1301;
  goto $bb754;
$bb752:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i1305 == 1));
  goto $bb753;
$bb753:
  assume {:verifier.code 0} true;
  goto $bb770;
$bb754:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb755;
$bb755:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p1307 := atm_sk($p1306);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1308 := $add.ref($p1307, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1309 := $load.ref($M.0, $p1308);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i1310 := $p2i.ref.i64($p1309);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i1311 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i1312 := $ne.i64($i1310, $i1311);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1312} true;
  goto $bb756, $bb757;
$bb756:
  assume ($i1312 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb764;
$bb757:
  assume !(($i1312 == 1));
  assume {:verifier.code 0} true;
  goto $bb758;
$bb758:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p1313 := $add.ref($p1307, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i1314 := $load.i16($M.0, $p1313);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i1315 := $sext.i16.i32($i1314);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p1316 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i1317 := $load.i8($M.0, $p1316);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i1318 := $sext.i8.i32($i1317);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i1319 := $ashr.i32($i1315, $i1318);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i1320 := $ne.i32($i1319, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1320} true;
  goto $bb759, $bb760;
$bb759:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i1320 == 1);
  goto $bb39;
$bb760:
  assume !(($i1320 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p1321 := $add.ref($p1307, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i1322 := $load.i32($M.0, $p1321);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p1323 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i1324 := $load.i8($M.0, $p1323);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i1325 := $sext.i8.i32($i1324);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i1326 := $ashr.i32($i1322, $i1325);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i1327 := $ne.i32($i1326, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1327} true;
  goto $bb761, $bb762;
$bb761:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1327 == 1);
  goto $bb39;
$bb762:
  assume !(($i1327 == 1));
  assume {:verifier.code 0} true;
  goto $bb763;
$bb763:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb764;
$bb764:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p1328 := $p1306;
  $p1329 := $add.ref($p1306, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p1330 := $bitcast.ref.ref($p1329);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1331 := $p1330;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1332 := $load.ref($M.0, $p1331);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i1333 := $p2i.ref.i64($p1332);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i1334 := $ne.i64($i1333, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1334} true;
  goto $bb765, $bb766;
$bb765:
  assume ($i1334 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p1336 := $bitcast.ref.ref($p1332);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p1337 := $add.ref($p1336, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p1335 := $p1337;
  goto $bb767;
$bb766:
  assume !(($i1334 == 1));
  assume {:verifier.code 0} true;
  $p1335 := $0.ref;
  goto $bb767;
$bb767:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1338 := $p2i.ref.i64($p1335);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1339 := $ne.i64($i1338, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1306 := $p1335;
  assume {:branchcond $i1339} true;
  goto $bb768, $bb769;
$bb768:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1339 == 1);
  goto $bb754;
$bb769:
  assume !(($i1339 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb753;
$bb770:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6785, 5} true;
  assume {:verifier.code 0} true;
  goto $bb771;
$bb771:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6745, 19} true;
  assume {:verifier.code 0} true;
  $p1340 := $load.ref($M.0, $add.ref(vcc_hash, 248));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  $i1341 := $p2i.ref.i64($p1340);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 31} true;
  assume {:verifier.code 0} true;
  $i1342 := $ne.i64($i1341, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6746, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1342} true;
  goto $bb772, $bb773;
$bb772:
  assume ($i1342 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 15} true;
  assume {:verifier.code 0} true;
  $p1344 := $bitcast.ref.ref($p1340);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6748, 37} true;
  assume {:verifier.code 0} true;
  $p1345 := $add.ref($p1344, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6749, 3} true;
  assume {:verifier.code 0} true;
  $p1343 := $p1345;
  goto $bb774;
$bb773:
  assume !(($i1342 == 1));
  assume {:verifier.code 0} true;
  $p1343 := $0.ref;
  goto $bb774;
$bb774:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1346 := $p2i.ref.i64($p1343);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1347 := $ne.i64($i1346, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1347} true;
  goto $bb775, $bb776;
$bb775:
  assume ($i1347 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1348 := $p1343;
  goto $bb778;
$bb776:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i1347 == 1));
  goto $bb777;
$bb777:
  assume {:verifier.code 0} true;
  goto $bb794;
$bb778:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6778, 5} true;
  assume {:verifier.code 0} true;
  goto $bb779;
$bb779:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6755, 9} true;
  assume {:verifier.code 0} true;
  call $p1349 := atm_sk($p1348);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1350 := $add.ref($p1349, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 28} true;
  assume {:verifier.code 0} true;
  $p1351 := $load.ref($M.0, $p1350);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  $i1352 := $p2i.ref.i64($p1351);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 35} true;
  assume {:verifier.code 0} true;
  $i1353 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 32} true;
  assume {:verifier.code 0} true;
  $i1354 := $ne.i64($i1352, $i1353);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1354} true;
  goto $bb780, $bb781;
$bb780:
  assume ($i1354 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6757, 5} true;
  assume {:verifier.code 0} true;
  goto $bb788;
$bb781:
  assume !(($i1354 == 1));
  assume {:verifier.code 0} true;
  goto $bb782;
$bb782:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $p1355 := $add.ref($p1349, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 18} true;
  assume {:verifier.code 0} true;
  $i1356 := $load.i16($M.0, $p1355);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  $i1357 := $sext.i16.i32($i1356);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $p1358 := $p3;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 34} true;
  assume {:verifier.code 0} true;
  $i1359 := $load.i8($M.0, $p1358);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 25} true;
  assume {:verifier.code 0} true;
  $i1360 := $sext.i8.i32($i1359);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 22} true;
  assume {:verifier.code 0} true;
  $i1361 := $ashr.i32($i1357, $i1360);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 43} true;
  assume {:verifier.code 0} true;
  $i1362 := $ne.i32($i1361, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1362} true;
  goto $bb783, $bb784;
$bb783:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 48} true;
  assume {:verifier.code 0} true;
  assume ($i1362 == 1);
  goto $bb39;
$bb784:
  assume !(($i1362 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $p1363 := $add.ref($p1349, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 56} true;
  assume {:verifier.code 0} true;
  $i1364 := $load.i32($M.0, $p1363);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $p1365 := $add.ref($p3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 72} true;
  assume {:verifier.code 0} true;
  $i1366 := $load.i8($M.0, $p1365);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 63} true;
  assume {:verifier.code 0} true;
  $i1367 := $sext.i8.i32($i1366);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 60} true;
  assume {:verifier.code 0} true;
  $i1368 := $ashr.i32($i1364, $i1367);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 81} true;
  assume {:verifier.code 0} true;
  $i1369 := $ne.i32($i1368, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1369} true;
  goto $bb785, $bb786;
$bb785:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1369 == 1);
  goto $bb39;
$bb786:
  assume !(($i1369 == 1));
  assume {:verifier.code 0} true;
  goto $bb787;
$bb787:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6761, 84} true;
  assume {:verifier.code 0} true;
  goto $bb788;
$bb788:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 20} true;
  assume {:verifier.code 0} true;
  $p1370 := $p1348;
  $p1371 := $add.ref($p1348, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 52} true;
  assume {:verifier.code 0} true;
  $p1372 := $bitcast.ref.ref($p1371);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1373 := $p1372;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6768, 61} true;
  assume {:verifier.code 0} true;
  $p1374 := $load.ref($M.0, $p1373);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  $i1375 := $p2i.ref.i64($p1374);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 35} true;
  assume {:verifier.code 0} true;
  $i1376 := $ne.i64($i1375, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6769, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1376} true;
  goto $bb789, $bb790;
$bb789:
  assume ($i1376 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 15} true;
  assume {:verifier.code 0} true;
  $p1378 := $bitcast.ref.ref($p1374);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6771, 41} true;
  assume {:verifier.code 0} true;
  $p1379 := $add.ref($p1378, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6772, 3} true;
  assume {:verifier.code 0} true;
  $p1377 := $p1379;
  goto $bb791;
$bb790:
  assume !(($i1376 == 1));
  assume {:verifier.code 0} true;
  $p1377 := $0.ref;
  goto $bb791;
$bb791:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $i1380 := $p2i.ref.i64($p1377);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 25} true;
  assume {:verifier.code 0} true;
  $i1381 := $ne.i64($i1380, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  $p1348 := $p1377;
  assume {:branchcond $i1381} true;
  goto $bb792, $bb793;
$bb792:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  assume ($i1381 == 1);
  goto $bb778;
$bb793:
  assume !(($i1381 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb777;
$bb794:
  assume {:verifier.code 0} true;
  goto $bb51;
}
const atmtcp_v_send: ref;
axiom (atmtcp_v_send == $sub.ref(0, 36041));
procedure  atmtcp_v_send($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i60: i16;
  var $i61: i16;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i16;
  var $i66: i32;
  var $i67: i16;
  var $i68: i16;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i14: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6809, 27} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 1328);
  $p3 := $add.ref($p0, 1328);
  $p4 := $add.ref($p0, 1328);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6809, 36} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i8($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6809, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i8.i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6809, 50} true;
  assume {:verifier.code 0} true;
  $i7 := $eq.i32($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6809, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6810, 30} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 1480);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6810, 30} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6810, 9} true;
  assume {:verifier.code 0} true;
  $i10 := $p2i.ref.i64($p9);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6810, 34} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.i64($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6810, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb3:
  assume ($i11 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6812, 15} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p0, 1480);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6812, 15} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.0, $p12);
  call devirtbounce($p13, $p0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6813, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i11 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6814, 7} true;
  assume {:verifier.code 0} true;
  call consume_skb($p1);
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6816, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 22);
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6877, 1} true;
  assume {:verifier.code 0} true;
  $r := $i14;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6820, 46} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p0, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6820, 46} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6820, 52} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p16, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6820, 52} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.0, $p17);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6820, 14} true;
  assume {:verifier.code 0} true;
  $p19 := $bitcast.ref.ref($p18);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6821, 7} true;
  assume {:verifier.code 0} true;
  $i20 := $p2i.ref.i64($p19);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6821, 32} true;
  assume {:verifier.code 0} true;
  $i21 := $ne.i64($i20, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6821, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i21 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6822, 25} true;
  assume {:verifier.code 0} true;
  $p22 := $p19;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6822, 25} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.0, $p22);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6823, 3} true;
  assume {:verifier.code 0} true;
  $p24 := $p23;
  goto $bb10;
$bb9:
  assume !(($i21 == 1));
  assume {:verifier.code 0} true;
  $p24 := $0.ref;
  goto $bb10;
$bb10:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6826, 7} true;
  assume {:verifier.code 0} true;
  $i25 := $p2i.ref.i64($p19);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6826, 32} true;
  assume {:verifier.code 0} true;
  $i26 := $eq.i64($i25, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6826, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb11, $bb13;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6826, 81} true;
  assume {:verifier.code 0} true;
  assume ($i26 == 1);
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6827, 30} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p0, 1480);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6827, 30} true;
  assume {:verifier.code 0} true;
  $p30 := $load.ref($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6827, 9} true;
  assume {:verifier.code 0} true;
  $i31 := $p2i.ref.i64($p30);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6827, 34} true;
  assume {:verifier.code 0} true;
  $i32 := $ne.i64($i31, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6827, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb16, $bb17;
$bb13:
  assume !(($i26 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6826, 84} true;
  assume {:verifier.code 0} true;
  $i27 := $p2i.ref.i64($p24);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6826, 108} true;
  assume {:verifier.code 0} true;
  $i28 := $eq.i64($i27, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6826, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb14, $bb15;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6826, 7} true;
  assume {:verifier.code 0} true;
  assume ($i28 == 1);
  goto $bb12;
$bb15:
  assume !(($i28 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb16:
  assume ($i32 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6829, 15} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p0, 1480);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6829, 15} true;
  assume {:verifier.code 0} true;
  $p34 := $load.ref($M.0, $p33);
  call devirtbounce($p34, $p0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6830, 5} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb17:
  assume !(($i32 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6831, 7} true;
  assume {:verifier.code 0} true;
  call consume_skb($p1);
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6833, 9} true;
  assume {:verifier.code 0} true;
  $i35 := $p2i.ref.i64($p19);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6833, 34} true;
  assume {:verifier.code 0} true;
  $i36 := $ne.i64($i35, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6833, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i36 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6834, 7} true;
  assume {:verifier.code 0} true;
  $i14 := 0;
  goto $bb6;
$bb20:
  assume !(($i36 == 1));
  assume {:verifier.code 0} true;
  goto $bb21;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6838, 24} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p0, 1520);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6838, 24} true;
  assume {:verifier.code 0} true;
  $p38 := $load.ref($M.0, $p37);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6838, 32} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p38, 4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6838, 5} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p39);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6839, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 67);
  goto $bb6;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6843, 22} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p1, 128);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6843, 22} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i32($M.0, $p40);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6843, 26} true;
  assume {:verifier.code 0} true;
  $i42 := $add.i32($i41, 8);
  // WARNING: %60 = add i32 %59, 8, !dbg !8074, !verifier.code !8008
  call {:cexpr "size"} boogie_si_record_i32($i42);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6844, 13} true;
  assume {:verifier.code 0} true;
  call $p43 := atm_alloc_charge($p24, $i42, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6845, 7} true;
  assume {:verifier.code 0} true;
  $i44 := $p2i.ref.i64($p43);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6845, 31} true;
  assume {:verifier.code 0} true;
  $i45 := $eq.i64($i44, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6845, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i45 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6846, 30} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p0, 1480);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6846, 30} true;
  assume {:verifier.code 0} true;
  $p47 := $load.ref($M.0, $p46);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6846, 9} true;
  assume {:verifier.code 0} true;
  $i48 := $p2i.ref.i64($p47);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6846, 34} true;
  assume {:verifier.code 0} true;
  $i49 := $ne.i64($i48, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6846, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb25, $bb26;
$bb24:
  assume !(($i45 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb25:
  assume ($i49 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6848, 15} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($p0, 1480);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6848, 15} true;
  assume {:verifier.code 0} true;
  $p51 := $load.ref($M.0, $p50);
  call devirtbounce($p51, $p0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6849, 5} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb26:
  assume !(($i49 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6850, 7} true;
  assume {:verifier.code 0} true;
  call consume_skb($p1);
  assume {:verifier.code 0} true;
  goto $bb27;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6852, 24} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($p0, 1520);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6852, 24} true;
  assume {:verifier.code 0} true;
  $p53 := $load.ref($M.0, $p52);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6852, 32} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($p53, 4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6852, 5} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p54);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6853, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 105);
  goto $bb6;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6857, 9} true;
  assume {:verifier.code 0} true;
  call $p55 := skb_put($p43, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6858, 9} true;
  assume {:verifier.code 0} true;
  $p56 := $bitcast.ref.ref($p55);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6859, 43} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($p0, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6859, 43} true;
  assume {:verifier.code 0} true;
  $i58 := $load.i16($M.0, $p57);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6859, 23} true;
  assume {:verifier.code 0} true;
  $i59 := $zext.i16.i32($i58);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6859, 23} true;
  assume {:verifier.code 0} true;
  $i60 := $trunc.i32.i16($i59);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6859, 13} true;
  assume {:verifier.code 0} true;
  call $i61 := __fswab16($i60);
  // WARNING: %85 = call zeroext i16 @__fswab16(i16 zeroext %84), !dbg !8107, !verifier.code !8008
  call {:cexpr "tmp___0"} boogie_si_record_i16($i61);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6860, 8} true;
  assume {:verifier.code 0} true;
  $p62 := $p56;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6860, 12} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p62, $i61);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6861, 43} true;
  assume {:verifier.code 0} true;
  $p63 := $add.ref($p0, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6861, 43} true;
  assume {:verifier.code 0} true;
  $i64 := $load.i32($M.0, $p63);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6861, 30} true;
  assume {:verifier.code 0} true;
  $i65 := $trunc.i32.i16($i64);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6861, 23} true;
  assume {:verifier.code 0} true;
  $i66 := $zext.i16.i32($i65);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6861, 23} true;
  assume {:verifier.code 0} true;
  $i67 := $trunc.i32.i16($i66);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6861, 13} true;
  assume {:verifier.code 0} true;
  call $i68 := __fswab16($i67);
  // WARNING: %92 = call zeroext i16 @__fswab16(i16 zeroext %91), !dbg !8115, !verifier.code !8008
  call {:cexpr "tmp___1"} boogie_si_record_i16($i68);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6862, 8} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($p56, 2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6862, 12} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p69, $i68);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6863, 28} true;
  assume {:verifier.code 0} true;
  $p70 := $add.ref($p1, 128);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6863, 28} true;
  assume {:verifier.code 0} true;
  $i71 := $load.i32($M.0, $p70);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6863, 13} true;
  assume {:verifier.code 0} true;
  call $i72 := __fswab32($i71);
  // WARNING: %96 = call i32 @__fswab32(i32 %95), !dbg !8121, !verifier.code !8008
  call {:cexpr "tmp___2"} boogie_si_record_i32($i72);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6864, 8} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($p56, 4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6864, 15} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p73, $i72);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6865, 35} true;
  assume {:verifier.code 0} true;
  $p74 := $add.ref($p1, 128);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6865, 35} true;
  assume {:verifier.code 0} true;
  $i75 := $load.i32($M.0, $p74);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6865, 13} true;
  assume {:verifier.code 0} true;
  call $p76 := skb_put($p43, $i75);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6866, 82} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($p1, 128);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6866, 82} true;
  assume {:verifier.code 0} true;
  $i78 := $load.i32($M.0, $p77);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6866, 3} true;
  assume {:verifier.code 0} true;
  call skb_copy_from_linear_data($p1, $p76, $i78);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6867, 28} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($p0, 1480);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6867, 28} true;
  assume {:verifier.code 0} true;
  $p80 := $load.ref($M.0, $p79);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6867, 7} true;
  assume {:verifier.code 0} true;
  $i81 := $p2i.ref.i64($p80);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6867, 32} true;
  assume {:verifier.code 0} true;
  $i82 := $ne.i64($i81, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6867, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i82} true;
  goto $bb29, $bb30;
$bb29:
  assume ($i82 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6868, 13} true;
  assume {:verifier.code 0} true;
  $p83 := $add.ref($p0, 1480);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6868, 13} true;
  assume {:verifier.code 0} true;
  $p84 := $load.ref($M.0, $p83);
  call devirtbounce($p84, $p0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6869, 3} true;
  assume {:verifier.code 0} true;
  goto $bb31;
$bb30:
  assume !(($i82 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6870, 5} true;
  assume {:verifier.code 0} true;
  call consume_skb($p1);
  assume {:verifier.code 0} true;
  goto $bb31;
$bb31:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6872, 15} true;
  assume {:verifier.code 0} true;
  $p85 := $add.ref($p24, 1472);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6872, 15} true;
  assume {:verifier.code 0} true;
  $p86 := $load.ref($M.0, $p85);
  call devirtbounce($p86, $p24, $p43);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6873, 22} true;
  assume {:verifier.code 0} true;
  $p87 := $add.ref($p0, 1520);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6873, 22} true;
  assume {:verifier.code 0} true;
  $p88 := $load.ref($M.0, $p87);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6873, 30} true;
  assume {:verifier.code 0} true;
  $p89 := $p88;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6873, 3} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p89);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6874, 26} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($p24, 1520);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6874, 26} true;
  assume {:verifier.code 0} true;
  $p91 := $load.ref($M.0, $p90);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6874, 34} true;
  assume {:verifier.code 0} true;
  $p92 := $add.ref($p91, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6874, 3} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p92);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6875, 3} true;
  assume {:verifier.code 0} true;
  $i14 := 0;
  goto $bb6;
}
const atmtcp_v_proc: ref;
axiom (atmtcp_v_proc == $sub.ref(0, 37073));
procedure  atmtcp_v_proc($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i8: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6885, 45} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6885, 45} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6885, 14} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6886, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i64($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6886, 12} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i64($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6886, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6887, 5} true;
  assume {:verifier.code 0} true;
  $i8 := 0;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6900, 1} true;
  assume {:verifier.code 0} true;
  $r := $i8;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6891, 17} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p5, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6891, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6891, 25} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i32($i10, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6891, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i11 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6892, 11} true;
  assume {:verifier.code 0} true;
  call $i12 := sprintf.ref.ref($p2, .str.4);
  // WARNING: %16 = call i32 (i8*, i8*, ...) @sprintf(i8* %2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0)), !dbg !8028, !verifier.code !8008
  call {:cexpr "tmp"} boogie_si_record_i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6893, 5} true;
  assume {:verifier.code 0} true;
  $i8 := $i12;
  goto $bb3;
$bb6:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6897, 82} true;
  assume {:verifier.code 0} true;
  $p13 := $p5;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6897, 82} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6897, 56} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.i64($p14);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6897, 86} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i64($i15, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6897, 56} true;
  assume {:verifier.code 0} true;
  havoc $p17;
  assume ((($i16 == 1) ==> ($p17 == .str.6)) && (($i16 != 1) ==> ($p17 == .str.7)));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6897, 13} true;
  assume {:verifier.code 0} true;
  call $i18 := sprintf.ref.ref.ref($p2, .str.5, $p17);
  // WARNING: %24 = call i32 (i8*, i8*, ...) @sprintf(i8* %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i32 0, i32 0), i8* %23), !dbg !8036, !verifier.code !8008
  call {:cexpr "tmp___0"} boogie_si_record_i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6898, 3} true;
  assume {:verifier.code 0} true;
  $i8 := $i18;
  goto $bb3;
}
const sprintf: ref;
axiom (sprintf == $sub.ref(0, 38105));
procedure  sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
  returns ($r: i32);
procedure  sprintf.ref.ref($p0: ref, $p1: ref)
  returns ($r: i32);
const consume_skb: ref;
axiom (consume_skb == $sub.ref(0, 39137));
procedure  consume_skb($p0: ref);
const atomic_inc: ref;
axiom (atomic_inc == $sub.ref(0, 40169));
procedure  atomic_inc($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6135, 129} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  call devirtbounce.1(0, $p1, $p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6136, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atm_alloc_charge: ref;
axiom (atm_alloc_charge == $sub.ref(0, 41201));
procedure  atm_alloc_charge($p0: ref, $i1: i32, $i2: i32)
  returns ($r: ref);
const skb_put: ref;
axiom (skb_put == $sub.ref(0, 42233));
procedure  skb_put($p0: ref, $i1: i32)
  returns ($r: ref);
const __fswab16: ref;
axiom (__fswab16 == $sub.ref(0, 43265));
procedure  __fswab16($i0: i16)
  returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6076, 36} true;
  assume {:verifier.code 0} true;
  $i1 := $zext.i16.i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6076, 46} true;
  assume {:verifier.code 0} true;
  $i2 := $shl.i32($i1, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6076, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i32.i16($i2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6076, 20} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i16.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6076, 71} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i16.i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6076, 81} true;
  assume {:verifier.code 0} true;
  $i6 := $ashr.i32($i5, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6076, 62} true;
  assume {:verifier.code 0} true;
  $i7 := $trunc.i32.i16($i6);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6076, 55} true;
  assume {:verifier.code 0} true;
  $i8 := $sext.i16.i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6076, 53} true;
  assume {:verifier.code 0} true;
  $i9 := $or.i32($i4, $i8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6076, 11} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.i32.i16($i9);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6076, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const __fswab32: ref;
axiom (__fswab32 == $sub.ref(0, 44297));
procedure  __fswab32($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6084, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := __arch_swab32($i0);
  // WARNING: %2 = call i32 @__arch_swab32(i32 %0), !dbg !8011, !verifier.code !8010
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6085, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const skb_copy_from_linear_data: ref;
axiom (skb_copy_from_linear_data == $sub.ref(0, 45329));
procedure  skb_copy_from_linear_data($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !8464, metadata !8006), !dbg !8465, !verifier.code !8008
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6343, 35} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 216);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6343, 35} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6343, 41} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.i32.i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6343, 3} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memcpy.i8($M.0, $M.0, $p1, $p4, $i5, $zext.i32.i64(1), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6344, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.memcpy.p0i8.p0i8.i64: ref;
axiom (llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 46361));
procedure  llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);
const __arch_swab32: ref;
axiom (__arch_swab32 == $sub.ref(0, 47393));
procedure  __arch_swab32($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  call $i1 := devirtbounce.2(0, $i0);
  // WARNING: %2 = call i32 @devirtbounce.2(i32 (i32)* asm "bswapl $0", "=r,0,~{dirflag},~{fpsr},~{flags}", i32 %0)
  call {:cexpr "val"} boogie_si_record_i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6068, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const copy_from_user: ref;
axiom (copy_from_user == $sub.ref(0, 48425));
procedure  copy_from_user($p0: ref, $p1: ref, $i2: i64)
  returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !8483, metadata !8006), !dbg !8484, !verifier.code !8008
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6311, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := __builtinx_object_size.ref.i32($p0, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6311, 9} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i3);
  // WARNING: %5 = sext i32 %4 to i64, !dbg !8015, !verifier.code !8010
  call {:cexpr "tmp"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6312, 8} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i64.i32($i4);
  // WARNING: %6 = trunc i64 %5 to i32, !dbg !8019, !verifier.code !8010
  call {:cexpr "sz"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6313, 3} true;
  assume {:verifier.code 0} true;
  call __might_fault(.str.8, 697);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6314, 44} true;
  assume {:verifier.code 0} true;
  $i6 := $slt.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6314, 48} true;
  assume {:verifier.code 0} true;
  $i7 := 1;
  assume {:branchcond $i6} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6314, 48} true;
  assume {:verifier.code 0} true;
  assume ($i6 == 1);
  goto $bb2;
$bb2:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6314, 48} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i1.i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6314, 33} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i32.i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6314, 13} true;
  assume {:verifier.code 0} true;
  call $i12 := ldv__builtin_expect($i11, 1);
  // WARNING: %15 = call i64 @ldv__builtin_expect(i64 %14, i64 1), !dbg !8032, !verifier.code !8010
  call {:cexpr "tmp___0"} boogie_si_record_i64($i12);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6315, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i64($i12, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6315, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb4, $bb5;
$bb3:
  assume !(($i6 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6314, 51} true;
  assume {:verifier.code 0} true;
  $i8 := $sext.i32.i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6314, 70} true;
  assume {:verifier.code 0} true;
  $i9 := $uge.i64($i8, $i2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6314, 48} true;
  assume {:verifier.code 0} true;
  $i7 := $i9;
  goto $bb2;
$bb4:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6316, 35} true;
  assume {:verifier.code 0} true;
  $i14 := $trunc.i64.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6316, 9} true;
  assume {:verifier.code 0} true;
  call $i15 := _copy_from_user($p0, $p1, $i14);
  // WARNING: %19 = call i64 @_copy_from_user(i8* %0, i8* %1, i32 %18), !dbg !8040, !verifier.code !8010
  call {:cexpr "n"} boogie_si_record_i64($i15);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6317, 3} true;
  assume {:verifier.code 0} true;
  $i16 := $i15;
  goto $bb6;
$bb5:
  assume !(($i13 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6318, 5} true;
  assume {:verifier.code 0} true;
  call __copy_from_user_overflow();
  assume {:verifier.code 0} true;
  $i16 := $i2;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6320, 3} true;
  assume {:verifier.code 0} true;
  $r := $i16;
  $exn := false;
  return;
}
const _raw_read_lock: ref;
axiom (_raw_read_lock == $sub.ref(0, 49457));
procedure  _raw_read_lock($p0: ref);
const atm_sk: ref;
axiom (atm_sk == $sub.ref(0, 50489));
procedure  atm_sk($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6376, 11} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6376, 3} true;
  assume {:verifier.code 0} true;
  $r := $p1;
  $exn := false;
  return;
}
const _raw_read_unlock: ref;
axiom (_raw_read_unlock == $sub.ref(0, 51521));
procedure  _raw_read_unlock($p0: ref);
const __builtinx_object_size: ref;
axiom (__builtinx_object_size == $sub.ref(0, 52553));
procedure  __builtinx_object_size()
  returns ($r: i32);
procedure  __builtinx_object_size.ref.i32(p.0: ref, p.1: i32)
  returns ($r: i32);
const __might_fault: ref;
axiom (__might_fault == $sub.ref(0, 53585));
procedure  __might_fault($p0: ref, $i1: i32);
const ldv__builtin_expect: ref;
axiom (ldv__builtin_expect == $sub.ref(0, 54617));
procedure  ldv__builtin_expect($i0: i64, $i1: i64)
  returns ($r: i64)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !8528, metadata !8006), !dbg !8529, !verifier.code !8008
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6288, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const _copy_from_user: ref;
axiom (_copy_from_user == $sub.ref(0, 55649));
procedure  _copy_from_user($p0: ref, $p1: ref, $i2: i32)
  returns ($r: i64);
const __copy_from_user_overflow: ref;
axiom (__copy_from_user_overflow == $sub.ref(0, 56681));
procedure  __copy_from_user_overflow();
const llvm.memset.p0i8.i64: ref;
axiom (llvm.memset.p0i8.i64 == $sub.ref(0, 57713));
procedure  llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);
const clear_bit: ref;
axiom (clear_bit == $sub.ref(0, 58745));
procedure  clear_bit($i0: i64, $p1: ref)
{
$bb0:
  call devirtbounce.3(0, $p1, $i0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6032, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atmtcp_send_control: ref;
axiom (atmtcp_send_control == $sub.ref(0, 59777));
procedure  atmtcp_send_control($p0: ref, $i1: i32, $p2: ref, $i3: i32)
  returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $p97: ref;
  var $i98: i64;
  var $i99: i32;
  var $i100: i1;
  var $i92: i32;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $p105: ref;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $i32: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata %struct.atm_vcc* %0, i64 0, metadata !8546, metadata !8006), !dbg !8547, !verifier.code !8008
  // WARNING: call void @llvm.dbg.value(metadata %struct.atmtcp_control* %2, i64 0, metadata !8550, metadata !8006), !dbg !8551, !verifier.code !8008
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6483, 9} true;
  assume {:verifier.code 0} true;
  call $p7 := get_current();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6484, 8} true;
  assume {:verifier.code 0} true;
  $p8 := $p4;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6484, 14} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p8, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6485, 18} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6485, 8} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p4, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6485, 16} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p10, $p7);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6486, 8} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p4, 16);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6486, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p11, default_wake_function);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6487, 8} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p4, 24);
  $p13 := $add.ref($p4, 24);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6487, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p13, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6488, 8} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p4, 24);
  $p15 := $add.ref($add.ref($p4, 24), 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6488, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p15, $0.ref);
  // WARNING: store %struct.list_head* null, %struct.list_head** %16, align 8, !dbg !8048, !verifier.code !8007
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 35} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p0, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 35} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 41} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p17, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 41} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 13} true;
  assume {:verifier.code 0} true;
  $i20 := $p2i.ref.i64($p19);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 50} true;
  assume {:verifier.code 0} true;
  $i21 := $ne.i64($i20, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i21 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 116} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p0, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 116} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.0, $p22);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 122} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p23, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 122} true;
  assume {:verifier.code 0} true;
  $p25 := $load.ref($M.0, $p24);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 84} true;
  assume {:verifier.code 0} true;
  $p26 := $bitcast.ref.ref($p25);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 133} true;
  assume {:verifier.code 0} true;
  $p27 := $p26;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 133} true;
  assume {:verifier.code 0} true;
  $p28 := $load.ref($M.0, $p27);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 13} true;
  assume {:verifier.code 0} true;
  $p29 := $p28;
  goto $bb3;
$bb2:
  assume !(($i21 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 13} true;
  assume {:verifier.code 0} true;
  $p29 := $0.ref;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6490, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6491, 7} true;
  assume {:verifier.code 0} true;
  $i30 := $p2i.ref.i64($p29);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6491, 31} true;
  assume {:verifier.code 0} true;
  $i31 := $eq.i64($i30, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6491, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i31 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6492, 5} true;
  assume {:verifier.code 0} true;
  $i32 := $sub.i32(0, 49);
  goto $bb6;
$bb5:
  assume !(($i31 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6603, 1} true;
  assume {:verifier.code 0} true;
  $r := $i32;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6496, 9} true;
  assume {:verifier.code 0} true;
  call $p33 := alloc_skb(120, 208);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6497, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $p2i.ref.i64($p33);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6497, 27} true;
  assume {:verifier.code 0} true;
  $i35 := $eq.i64($i34, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6497, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i35 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6498, 5} true;
  assume {:verifier.code 0} true;
  $i32 := $sub.i32(0, 12);
  goto $bb6;
$bb9:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  call devirtbounce.4(0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 35} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p0, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 35} true;
  assume {:verifier.code 0} true;
  $p37 := $load.ref($M.0, $p36);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 41} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p37, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 41} true;
  assume {:verifier.code 0} true;
  $p39 := $load.ref($M.0, $p38);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 13} true;
  assume {:verifier.code 0} true;
  $i40 := $p2i.ref.i64($p39);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 50} true;
  assume {:verifier.code 0} true;
  $i41 := $ne.i64($i40, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i41 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 116} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($p0, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 116} true;
  assume {:verifier.code 0} true;
  $p43 := $load.ref($M.0, $p42);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 122} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($p43, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 122} true;
  assume {:verifier.code 0} true;
  $p45 := $load.ref($M.0, $p44);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 84} true;
  assume {:verifier.code 0} true;
  $p46 := $bitcast.ref.ref($p45);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 133} true;
  assume {:verifier.code 0} true;
  $p47 := $p46;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 133} true;
  assume {:verifier.code 0} true;
  $p48 := $load.ref($M.0, $p47);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 13} true;
  assume {:verifier.code 0} true;
  $p49 := $p48;
  goto $bb13;
$bb12:
  assume !(($i41 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 13} true;
  assume {:verifier.code 0} true;
  $p49 := $0.ref;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6503, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6504, 7} true;
  assume {:verifier.code 0} true;
  $i50 := $p2i.ref.i64($p49);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6504, 31} true;
  assume {:verifier.code 0} true;
  $i51 := $eq.i64($i50, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6504, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i51} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i51 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6505, 5} true;
  assume {:verifier.code 0} true;
  call consume_skb($p33);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6506, 5} true;
  assume {:verifier.code 0} true;
  $i32 := $sub.i32(0, 49);
  goto $bb6;
$bb15:
  assume !(($i51 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6510, 40} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($p33, 224);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6510, 40} true;
  assume {:verifier.code 0} true;
  $i53 := $load.i32($M.0, $p52);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6510, 3} true;
  assume {:verifier.code 0} true;
  call atm_force_charge($p49, $i53);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6511, 13} true;
  assume {:verifier.code 0} true;
  call $p54 := skb_put($p33, 120);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6512, 13} true;
  assume {:verifier.code 0} true;
  $p55 := $bitcast.ref.ref($p54);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6513, 14} true;
  assume {:verifier.code 0} true;
  $p56 := $bitcast.ref.ref($p55);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6513, 14} true;
  assume {:verifier.code 0} true;
  $p57 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6513, 14} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memcpy.i8($M.0, $M.0, $p56, $p57, 128, $zext.i32.i64(4), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6514, 12} true;
  assume {:verifier.code 0} true;
  $p58 := $p55;
  $p59 := $add.ref($p55, 4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6514, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p59, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6515, 12} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($p55, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6515, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p60, $i1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6516, 30} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($p55, 12);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6516, 3} true;
  assume {:verifier.code 0} true;
  $p62 := $bitcast.ref.ref($p61);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6516, 3} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p62, 0, 8, $zext.i32.i64(4), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6517, 36} true;
  assume {:verifier.code 0} true;
  $p63 := $add.ref($p55, 12);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6517, 3} true;
  assume {:verifier.code 0} true;
  $p64 := $bitcast.ref.ref($p63);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6517, 42} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p64, $p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6518, 32} true;
  assume {:verifier.code 0} true;
  $i65 := $sext.i32.i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6518, 87} true;
  assume {:verifier.code 0} true;
  $p66 := $add.ref($p0, 1288);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6518, 14} true;
  assume {:verifier.code 0} true;
  call $i67 := variable_test_bit($i65, $p66);
  // WARNING: %82 = call i32 @variable_test_bit(i64 %80, i64* %81), !dbg !8120, !verifier.code !8007
  call {:cexpr "old_test"} boogie_si_record_i32($i67);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6519, 15} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($p49, 1472);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6519, 15} true;
  assume {:verifier.code 0} true;
  $p69 := $load.ref($M.0, $p68);
  call devirtbounce($p69, $p49, $p33);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6520, 13} true;
  assume {:verifier.code 0} true;
  call $p70 := sk_atm($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6521, 13} true;
  assume {:verifier.code 0} true;
  call $p71 := sk_sleep($p70);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6522, 3} true;
  assume {:verifier.code 0} true;
  call add_wait_queue($p71, $p4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6563, 31} true;
  assume {:verifier.code 0} true;
  $i72 := $sext.i32.i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6563, 86} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($p0, 1288);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6563, 13} true;
  assume {:verifier.code 0} true;
  call $i74 := variable_test_bit($i72, $p73);
  // WARNING: %89 = call i32 @variable_test_bit(i64 %87, i64* %88), !dbg !8133, !verifier.code !8007
  call {:cexpr "tmp___8"} boogie_si_record_i32($i74);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6564, 15} true;
  assume {:verifier.code 0} true;
  $i75 := $eq.i32($i74, $i67);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6564, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i75} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i75 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6564, 7} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6564, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i75 == 1));
  goto $bb19;
$bb19:
  assume {:verifier.code 0} true;
  goto $bb32;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6565, 5} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb21:
  call devirtbounce.4(0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 35} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($p0, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 35} true;
  assume {:verifier.code 0} true;
  $p77 := $load.ref($M.0, $p76);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 41} true;
  assume {:verifier.code 0} true;
  $p78 := $add.ref($p77, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 41} true;
  assume {:verifier.code 0} true;
  $p79 := $load.ref($M.0, $p78);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 13} true;
  assume {:verifier.code 0} true;
  $i80 := $p2i.ref.i64($p79);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 50} true;
  assume {:verifier.code 0} true;
  $i81 := $ne.i64($i80, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i81} true;
  goto $bb22, $bb23;
$bb22:
  assume ($i81 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 116} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($p0, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 116} true;
  assume {:verifier.code 0} true;
  $p83 := $load.ref($M.0, $p82);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 122} true;
  assume {:verifier.code 0} true;
  $p84 := $add.ref($p83, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 122} true;
  assume {:verifier.code 0} true;
  $p85 := $load.ref($M.0, $p84);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 84} true;
  assume {:verifier.code 0} true;
  $p86 := $bitcast.ref.ref($p85);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 133} true;
  assume {:verifier.code 0} true;
  $p87 := $p86;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 133} true;
  assume {:verifier.code 0} true;
  $p88 := $load.ref($M.0, $p87);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 13} true;
  assume {:verifier.code 0} true;
  $p89 := $p88;
  goto $bb24;
$bb23:
  assume !(($i81 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 13} true;
  assume {:verifier.code 0} true;
  $p89 := $0.ref;
  goto $bb24;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6526, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6527, 7} true;
  assume {:verifier.code 0} true;
  $i90 := $p2i.ref.i64($p89);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6527, 31} true;
  assume {:verifier.code 0} true;
  $i91 := $eq.i64($i90, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6527, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i91} true;
  goto $bb25, $bb26;
$bb25:
  assume ($i91 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6529, 5} true;
  assume {:verifier.code 0} true;
  $i92 := $sub.i32(0, 49);
  goto $bb27;
$bb26:
  assume !(($i91 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6570, 13} true;
  assume {:verifier.code 0} true;
  call $p101 := get_current();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6571, 12} true;
  assume {:verifier.code 0} true;
  $p102 := $add.ref($p101, 11728);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6571, 30} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i64($M.1, $p102, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6572, 13} true;
  assume {:verifier.code 0} true;
  $M.3 := $store.i64($M.3, $p6, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6590, 14} true;
  assume {:verifier.code 0} true;
  call $p103 := get_current();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6591, 3} true;
  assume {:verifier.code 0} true;
  $i104 := $load.i64($M.3, $p6);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6591, 77} true;
  assume {:verifier.code 0} true;
  $p105 := $p103;
  call $i106 := devirtbounce.5(0, $p105, $i104, $p105);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6591, 3} true;
  assume {:verifier.code 0} true;
  $M.3 := $store.i64($M.3, $p6, $i106);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6593, 3} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6533, 13} true;
  assume {:verifier.code 0} true;
  call $p93 := get_current();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6534, 12} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($p93, 11728);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6534, 30} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i64($M.1, $p94, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6535, 9} true;
  assume {:verifier.code 0} true;
  $M.2 := $store.i64($M.2, $p5, 2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6553, 13} true;
  assume {:verifier.code 0} true;
  call $p95 := get_current();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6554, 3} true;
  assume {:verifier.code 0} true;
  $i96 := $load.i64($M.2, $p5);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6554, 72} true;
  assume {:verifier.code 0} true;
  $p97 := $p95;
  call $i98 := devirtbounce.5(0, $p97, $i96, $p97);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6554, 3} true;
  assume {:verifier.code 0} true;
  $M.2 := $store.i64($M.2, $p5, $i98);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6556, 3} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb29:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6561, 3} true;
  assume {:verifier.code 0} true;
  call schedule();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6563, 13} true;
  assume {:verifier.code 0} true;
  call $i99 := variable_test_bit($i72, $p73);
  // WARNING: %121 = call i32 @variable_test_bit(i64 %87, i64* %88), !dbg !8133, !verifier.code !8007
  call {:cexpr "tmp___8"} boogie_si_record_i32($i99);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6564, 15} true;
  assume {:verifier.code 0} true;
  $i100 := $eq.i32($i99, $i67);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6564, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i100} true;
  goto $bb30, $bb31;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6564, 7} true;
  assume {:verifier.code 0} true;
  assume ($i100 == 1);
  goto $bb20;
$bb31:
  assume !(($i100 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6564, 7} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb32:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6564, 18} true;
  assume {:verifier.code 0} true;
  $i92 := 0;
  goto $bb27;
$bb33:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6598, 14} true;
  assume {:verifier.code 0} true;
  call $p107 := sk_atm($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6599, 14} true;
  assume {:verifier.code 0} true;
  call $p108 := sk_sleep($p107);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6600, 3} true;
  assume {:verifier.code 0} true;
  call remove_wait_queue($p108, $p4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6601, 3} true;
  assume {:verifier.code 0} true;
  $i32 := $i92;
  goto $bb6;
}
const get_current: ref;
axiom (get_current == $sub.ref(0, 60809));
procedure  get_current()
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  call $p0 := devirtbounce.6(0, current_task);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6110, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6115, 3} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const default_wake_function: ref;
axiom (default_wake_function == $sub.ref(0, 61841));
procedure  default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref)
  returns ($r: i32);
const alloc_skb: ref;
axiom (alloc_skb == $sub.ref(0, 62873));
procedure  alloc_skb($i0: i32, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !8742, metadata !8006), !dbg !8743, !verifier.code !8008
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6331, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := __alloc_skb($i0, $i1, 0, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6332, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const atm_force_charge: ref;
axiom (atm_force_charge == $sub.ref(0, 63905));
procedure  atm_force_charge($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.atm_vcc* %0, i64 0, metadata !8754, metadata !8006), !dbg !8755, !verifier.code !8008
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6413, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := sk_atm($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6414, 31} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 432);
  $p4 := $add.ref($p2, 432);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6414, 3} true;
  assume {:verifier.code 0} true;
  call atomic_add($i1, $p4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6415, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const variable_test_bit: ref;
axiom (variable_test_bit == $sub.ref(0, 64937));
procedure  variable_test_bit($i0: i64, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  call $i2 := devirtbounce.7(0, $p1, $i0);
  // WARNING: %3 = call i32 @devirtbounce.7(i32 (i64*, i64)* asm sideeffect "bt $2,$1\0A\09sbb $0,$0", "=r,*m,Ir,~{dirflag},~{fpsr},~{flags}", i64* %1, i64 %0)
  call {:cexpr "oldbit"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6059, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const sk_atm: ref;
axiom (sk_atm == $sub.ref(0, 65969));
procedure  sk_atm($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6393, 11} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6393, 3} true;
  assume {:verifier.code 0} true;
  $r := $p1;
  $exn := false;
  return;
}
const sk_sleep: ref;
axiom (sk_sleep == $sub.ref(0, 67001));
procedure  sk_sleep($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6364, 52} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 496);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6364, 20} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6364, 75} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6364, 60} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6364, 3} true;
  assume {:verifier.code 0} true;
  call __read_once_size($p3, $p5, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6365, 21} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6365, 21} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6367, 9} true;
  assume {:verifier.code 0} true;
  call $i8 := debug_lockdep_rcu_enabled();
  // WARNING: %9 = call i32 @debug_lockdep_rcu_enabled(), !dbg !8029, !verifier.code !8007
  call {:cexpr "tmp"} boogie_si_record_i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6368, 25} true;
  assume {:verifier.code 0} true;
  $p9 := $p7;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6368, 3} true;
  assume {:verifier.code 0} true;
  $r := $p9;
  $exn := false;
  return;
}
const add_wait_queue: ref;
axiom (add_wait_queue == $sub.ref(0, 68033));
procedure  add_wait_queue($p0: ref, $p1: ref);
const schedule: ref;
axiom (schedule == $sub.ref(0, 69065));
procedure  schedule();
const remove_wait_queue: ref;
axiom (remove_wait_queue == $sub.ref(0, 70097));
procedure  remove_wait_queue($p0: ref, $p1: ref);
const __read_once_size: ref;
axiom (__read_once_size == $sub.ref(0, 71129));
procedure  __read_once_size($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !8817, metadata !8006), !dbg !8818, !verifier.code !8008
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  $i3 := $slt.i32($i2, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i3 == 1);
  assume {:verifier.code 0} true;
  $i7 := $slt.i32($i2, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb11, $bb12;
$bb3:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  $i4 := $slt.i32($i2, 8);
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i4 == 1);
  assume {:verifier.code 0} true;
  $i6 := $eq.i32($i2, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb9, $bb10;
$bb5:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i2, 8);
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6005, 23} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6005, 21} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i64($M.0, $p17);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6005, 5} true;
  assume {:verifier.code 0} true;
  $p19 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6005, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p19, $i18);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6006, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb7:
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  goto $bb18;
$bb9:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6002, 23} true;
  assume {:verifier.code 0} true;
  $p14 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6002, 21} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i32($M.0, $p14);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6002, 5} true;
  assume {:verifier.code 0} true;
  $p16 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6002, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p16, $i15);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6003, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb10:
  assume {:verifier.code 0} true;
  assume !(($i6 == 1));
  goto $bb8;
$bb11:
  assume ($i7 == 1);
  assume {:verifier.code 0} true;
  $i9 := $eq.i32($i2, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb15, $bb16;
$bb12:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i2, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 5999, 23} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 5999, 21} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i16($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 5999, 5} true;
  assume {:verifier.code 0} true;
  $p13 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 5999, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p13, $i12);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6000, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb14:
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb8;
$bb15:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 5996, 20} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i8($M.0, $p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 5996, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p1, $i10);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 5997, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume {:verifier.code 0} true;
  assume !(($i9 == 1));
  goto $bb8;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6013, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb18:
  call devirtbounce.4(0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6009, 44} true;
  assume {:verifier.code 0} true;
  $i20 := $sext.i32.i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6009, 3} true;
  assume {:verifier.code 0} true;
  call $i21 := __builtinx_memcpy.ref.ref.i64($p1, $p0, $i20);
  call devirtbounce.4(0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6011, 3} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6011, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
}
const debug_lockdep_rcu_enabled: ref;
axiom (debug_lockdep_rcu_enabled == $sub.ref(0, 72161));
procedure  debug_lockdep_rcu_enabled()
  returns ($r: i32);
const __builtinx_memcpy: ref;
axiom (__builtinx_memcpy == $sub.ref(0, 73193));
procedure  __builtinx_memcpy()
  returns ($r: i32);
procedure  __builtinx_memcpy.ref.ref.i64(p.0: ref, p.1: ref, p.2: i64)
  returns ($r: i32);
const atomic_add: ref;
axiom (atomic_add == $sub.ref(0, 74225));
procedure  atomic_add($i0: i32, $p1: ref)
{
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6126, 132} true;
  assume {:verifier.code 0} true;
  $p2 := $p1;
  call devirtbounce.8(0, $p2, $i0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6127, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __alloc_skb: ref;
axiom (__alloc_skb == $sub.ref(0, 75257));
procedure  __alloc_skb($i0: i32, $i1: i32, $i2: i32, $i3: i32)
  returns ($r: ref);
const set_bit: ref;
axiom (set_bit == $sub.ref(0, 76289));
procedure  set_bit($i0: i64, $p1: ref)
{
$bb0:
  call devirtbounce.3(0, $p1, $i0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6023, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atmtcp_c_close: ref;
axiom (atmtcp_c_close == $sub.ref(0, 77321));
procedure  atmtcp_c_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6907, 39} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 1504);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6907, 39} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6907, 16} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6908, 52} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p3, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6908, 52} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6908, 14} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6909, 13} true;
  assume {:verifier.code 0} true;
  $p7 := $p6;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6909, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p7, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6910, 17} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p6, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6910, 17} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i32($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6910, 25} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6910, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6911, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6922, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6915, 15} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p3, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6915, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p11, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6916, 9} true;
  assume {:verifier.code 0} true;
  $p12 := $bitcast.ref.ref($p6);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6916, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p12);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6917, 3} true;
  assume {:verifier.code 0} true;
  call ldv_atm_dev_deregister_5($p3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6918, 8} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p0, 1504);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6918, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p13, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6919, 3} true;
  assume {:verifier.code 0} true;
  call ldv_module_put_6(__this_module);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6920, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const atmtcp_c_send: ref;
axiom (atmtcp_c_send == $sub.ref(0, 78353));
procedure  atmtcp_c_send($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i16;
  var $i24: i16;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i16;
  var $i29: i16;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i19: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i5: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.sk_buff* %1, i64 0, metadata !8897, metadata !8006), !dbg !8898, !verifier.code !8008
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6984, 12} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p1, 128);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6984, 12} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i32($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6984, 16} true;
  assume {:verifier.code 0} true;
  $i4 := $eq.i32($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6984, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6985, 5} true;
  assume {:verifier.code 0} true;
  $i5 := 0;
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7031, 1} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6989, 32} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p0, 1504);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6989, 32} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6989, 9} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6990, 35} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p1, 216);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6990, 35} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6990, 9} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6991, 12} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p11, 4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6991, 12} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.0, $p12);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6991, 19} true;
  assume {:verifier.code 0} true;
  $i14 := $eq.i32($i13, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6991, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6992, 72} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p1, 216);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6992, 72} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6992, 34} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p16);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6992, 14} true;
  assume {:verifier.code 0} true;
  call $i18 := atmtcp_recv_control($p17);
  // WARNING: %22 = call i32 @atmtcp_recv_control(%struct.atmtcp_control* %21), !dbg !8035, !verifier.code !8008
  call {:cexpr "result"} boogie_si_record_i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6993, 5} true;
  assume {:verifier.code 0} true;
  $i19 := $i18;
  goto $bb7;
$bb6:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7024, 28} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($p0, 1480);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7024, 28} true;
  assume {:verifier.code 0} true;
  $p59 := $load.ref($M.0, $p58);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7024, 7} true;
  assume {:verifier.code 0} true;
  $i60 := $p2i.ref.i64($p59);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7024, 32} true;
  assume {:verifier.code 0} true;
  $i61 := $ne.i64($i60, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7024, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i61} true;
  goto $bb15, $bb16;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6997, 3} true;
  assume {:verifier.code 0} true;
  call _raw_read_lock(vcc_sklist_lock);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6998, 30} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p11, 2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6998, 30} true;
  assume {:verifier.code 0} true;
  $i21 := $load.i16($M.0, $p20);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6998, 19} true;
  assume {:verifier.code 0} true;
  $i22 := $zext.i16.i32($i21);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6998, 19} true;
  assume {:verifier.code 0} true;
  $i23 := $trunc.i32.i16($i22);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6998, 9} true;
  assume {:verifier.code 0} true;
  call $i24 := __fswab16($i23);
  // WARNING: %29 = call zeroext i16 @__fswab16(i16 zeroext %28), !dbg !8040, !verifier.code !8008
  call {:cexpr "tmp"} boogie_si_record_i16($i24);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6999, 34} true;
  assume {:verifier.code 0} true;
  $p25 := $p11;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6999, 34} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i16($M.0, $p25);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6999, 23} true;
  assume {:verifier.code 0} true;
  $i27 := $zext.i16.i32($i26);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6999, 23} true;
  assume {:verifier.code 0} true;
  $i28 := $trunc.i32.i16($i27);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6999, 13} true;
  assume {:verifier.code 0} true;
  call $i29 := __fswab16($i28);
  // WARNING: %34 = call zeroext i16 @__fswab16(i16 zeroext %33), !dbg !8045, !verifier.code !8008
  call {:cexpr "tmp___0"} boogie_si_record_i16($i29);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7000, 27} true;
  assume {:verifier.code 0} true;
  $i30 := $sext.i16.i32($i29);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7000, 27} true;
  assume {:verifier.code 0} true;
  $i31 := $trunc.i32.i16($i30);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7000, 52} true;
  assume {:verifier.code 0} true;
  $i32 := $zext.i16.i32($i24);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7000, 13} true;
  assume {:verifier.code 0} true;
  call $p33 := find_vcc($p8, $i31, $i32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7001, 3} true;
  assume {:verifier.code 0} true;
  call _raw_read_unlock(vcc_sklist_lock);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7002, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $p2i.ref.i64($p33);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7002, 31} true;
  assume {:verifier.code 0} true;
  $i35 := $eq.i64($i34, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7002, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i35 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7004, 24} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p0, 1520);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7004, 24} true;
  assume {:verifier.code 0} true;
  $p37 := $load.ref($M.0, $p36);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7004, 32} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p37, 4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7004, 5} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p38);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7005, 5} true;
  assume {:verifier.code 0} true;
  $i19 := $sub.i32(0, 49);
  goto $bb7;
$bb10:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7009, 3} true;
  assume {:verifier.code 0} true;
  call $p39 := skb_pull($p1, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7010, 50} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p1, 128);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7010, 50} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i32($M.0, $p40);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7010, 13} true;
  assume {:verifier.code 0} true;
  call $p42 := atm_alloc_charge($p33, $i41, 208);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7011, 7} true;
  assume {:verifier.code 0} true;
  $i43 := $p2i.ref.i64($p42);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7011, 31} true;
  assume {:verifier.code 0} true;
  $i44 := $eq.i64($i43, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7011, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i44 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7013, 5} true;
  assume {:verifier.code 0} true;
  $i19 := $sub.i32(0, 105);
  goto $bb7;
$bb13:
  assume !(($i44 == 1));
  assume {:verifier.code 0} true;
  goto $bb14;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7017, 3} true;
  assume {:verifier.code 0} true;
  call __net_timestamp($p42);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7018, 35} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($p1, 128);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7018, 35} true;
  assume {:verifier.code 0} true;
  $i46 := $load.i32($M.0, $p45);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7018, 13} true;
  assume {:verifier.code 0} true;
  call $p47 := skb_put($p42, $i46);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7019, 82} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($p1, 128);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7019, 82} true;
  assume {:verifier.code 0} true;
  $i49 := $load.i32($M.0, $p48);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7019, 3} true;
  assume {:verifier.code 0} true;
  call skb_copy_from_linear_data($p1, $p47, $i49);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7020, 15} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($p33, 1472);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7020, 15} true;
  assume {:verifier.code 0} true;
  $p51 := $load.ref($M.0, $p50);
  call devirtbounce($p51, $p33, $p42);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7021, 22} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($p0, 1520);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7021, 22} true;
  assume {:verifier.code 0} true;
  $p53 := $load.ref($M.0, $p52);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7021, 30} true;
  assume {:verifier.code 0} true;
  $p54 := $p53;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7021, 3} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p54);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7022, 26} true;
  assume {:verifier.code 0} true;
  $p55 := $add.ref($p33, 1520);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7022, 26} true;
  assume {:verifier.code 0} true;
  $p56 := $load.ref($M.0, $p55);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7022, 34} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($p56, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7022, 3} true;
  assume {:verifier.code 0} true;
  call atomic_inc($p57);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7022, 3} true;
  assume {:verifier.code 0} true;
  $i19 := 0;
  goto $bb7;
$bb15:
  assume ($i61 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7025, 13} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($p0, 1480);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7025, 13} true;
  assume {:verifier.code 0} true;
  $p63 := $load.ref($M.0, $p62);
  call devirtbounce($p63, $p0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7026, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume !(($i61 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7027, 5} true;
  assume {:verifier.code 0} true;
  call consume_skb($p1);
  assume {:verifier.code 0} true;
  goto $bb17;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7029, 3} true;
  assume {:verifier.code 0} true;
  $i5 := $i19;
  goto $bb3;
}
const atmtcp_recv_control: ref;
axiom (atmtcp_recv_control == $sub.ref(0, 79385));
procedure  atmtcp_recv_control($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $i33: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6612, 38} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 12);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6612, 9} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6612, 9} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6613, 19} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 20);
  $p5 := $add.ref($add.ref($p0, 20), 4);
  $p6 := $add.ref($add.ref($add.ref($p0, 20), 4), 2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6613, 33} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i16($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6613, 8} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p3, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6613, 12} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i16($M.0, $p8, $i7);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6614, 19} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p0, 20);
  $p10 := $add.ref($add.ref($p0, 20), 4);
  $p11 := $add.ref($add.ref($add.ref($p0, 20), 4), 4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6614, 33} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i32($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6614, 8} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p3, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6614, 12} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p13, $i12);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6615, 8} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p3, 1328);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6615, 19} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p0, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6615, 19} true;
  assume {:verifier.code 0} true;
  $p16 := $bitcast.ref.ref($p14);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6615, 19} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p15);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6615, 19} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memcpy.i8($M.0, $M.0, $p16, $p17, 92, $zext.i32.i64(4), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6616, 9} true;
  assume {:verifier.code 0} true;
  call $p18 := sk_atm($p3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6617, 24} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p0, 124);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6617, 24} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i32($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6617, 17} true;
  assume {:verifier.code 0} true;
  $i21 := $sub.i32(0, $i20);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6617, 8} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p18, 968);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6617, 15} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p22, $i21);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6618, 16} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6618, 16} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i32($M.0, $p23);
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  $i25 := $slt.i32($i24, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i25 == 1);
  assume {:verifier.code 0} true;
  $i27 := $eq.i32($i24, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb7, $bb8;
$bb3:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  $i26 := $eq.i32($i24, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i26 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6623, 54} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p3, 1288);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6623, 3} true;
  assume {:verifier.code 0} true;
  call change_bit(0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6624, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb5:
  assume {:verifier.code 0} true;
  assume !(($i26 == 1));
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  goto $bb10;
$bb7:
  assume ($i27 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6620, 54} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p3, 1288);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6620, 3} true;
  assume {:verifier.code 0} true;
  call change_bit(1, $p28);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6621, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume {:verifier.code 0} true;
  assume !(($i27 == 1));
  goto $bb6;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6630, 13} true;
  assume {:verifier.code 0} true;
  call $p34 := sk_atm($p3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6631, 13} true;
  assume {:verifier.code 0} true;
  call $p35 := sk_sleep($p34);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6632, 3} true;
  assume {:verifier.code 0} true;
  call __wake_up($p35, 3, 1, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6633, 3} true;
  assume {:verifier.code 0} true;
  $i33 := 0;
  goto $bb11;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6626, 59} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p0, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6626, 59} true;
  assume {:verifier.code 0} true;
  $i31 := $load.i32($M.0, $p30);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6626, 3} true;
  assume {:verifier.code 0} true;
  call $i32 := printk.ref.i32(.str.9, $i31);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6627, 3} true;
  assume {:verifier.code 0} true;
  $i33 := $sub.i32(0, 22);
  goto $bb11;
$bb11:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6635, 1} true;
  assume {:verifier.code 0} true;
  $r := $i33;
  $exn := false;
  return;
}
const find_vcc: ref;
axiom (find_vcc == $sub.ref(0, 80417));
procedure  find_vcc($p0: ref, $i1: i16, $i2: i32)
  returns ($r: ref)
{
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p15: ref;
  var $p37: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.atm_dev* %0, i64 0, metadata !9038, metadata !8006), !dbg !9039, !verifier.code !8008
  // WARNING: call void @llvm.dbg.value(metadata i16 %1, i64 0, metadata !9040, metadata !8006), !dbg !9041, !verifier.code !8008
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6936, 47} true;
  assume {:verifier.code 0} true;
  $i3 := $sext.i32.i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6936, 67} true;
  assume {:verifier.code 0} true;
  $i4 := $and.i64($i3, 31);
  $p5 := $add.ref(vcc_hash, $mul.ref($i4, 8));
  $p6 := $add.ref(vcc_hash, $mul.ref($i4, 8));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6937, 19} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6938, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $p2i.ref.i64($p7);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6938, 31} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i64($i8, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6938, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6940, 11} true;
  assume {:verifier.code 0} true;
  $p10 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6940, 33} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6941, 3} true;
  assume {:verifier.code 0} true;
  $p12 := $p11;
  goto $bb3;
$bb2:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  $p12 := $0.ref;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6962, 7} true;
  assume {:verifier.code 0} true;
  $i13 := $p2i.ref.i64($p12);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6962, 25} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i64($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6962, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6962, 7} true;
  assume {:verifier.code 0} true;
  $p15 := $p12;
  goto $bb7;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6962, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i14 == 1));
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  goto $bb25;
$bb7:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6963, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6947, 9} true;
  assume {:verifier.code 0} true;
  call $p16 := atm_sk($p15);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 30} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p16, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 30} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.0, $p17);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 9} true;
  assume {:verifier.code 0} true;
  $i19 := $p2i.ref.i64($p18);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 37} true;
  assume {:verifier.code 0} true;
  $i20 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 34} true;
  assume {:verifier.code 0} true;
  $i21 := $eq.i64($i19, $i20);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 57} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i21 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 65} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p16, 1300);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 65} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i32($M.0, $p22);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 69} true;
  assume {:verifier.code 0} true;
  $i24 := $eq.i32($i23, $i2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 77} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb12, $bb13;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 57} true;
  assume {:verifier.code 0} true;
  assume !(($i21 == 1));
  goto $bb11;
$bb11:
  assume {:verifier.code 0} true;
  goto $bb19;
$bb12:
  assume ($i24 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 91} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p16, 1296);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 91} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i16($M.0, $p25);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 80} true;
  assume {:verifier.code 0} true;
  $i27 := $sext.i16.i32($i26);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 98} true;
  assume {:verifier.code 0} true;
  $i28 := $sext.i16.i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 95} true;
  assume {:verifier.code 0} true;
  $i29 := $eq.i32($i27, $i28);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 109} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb14, $bb15;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 77} true;
  assume {:verifier.code 0} true;
  assume !(($i24 == 1));
  goto $bb11;
$bb14:
  assume ($i29 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 132} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p16, 1328);
  $p31 := $add.ref($add.ref($p16, 1328), 44);
  $p32 := $add.ref($add.ref($p16, 1328), 44);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 141} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i8($M.0, $p32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 112} true;
  assume {:verifier.code 0} true;
  $i34 := $zext.i8.i32($i33);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 155} true;
  assume {:verifier.code 0} true;
  $i35 := $ne.i32($i34, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 7} true;
  assume {:verifier.code 0} true;
  $p36 := $p16;
  assume {:branchcond $i35} true;
  goto $bb16, $bb17;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 109} true;
  assume {:verifier.code 0} true;
  assume !(($i29 == 1));
  goto $bb11;
$bb16:
  assume ($i35 == 1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6949, 5} true;
  assume {:verifier.code 0} true;
  $p37 := $p36;
  goto $bb18;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6948, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i35 == 1));
  goto $bb11;
$bb18:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6970, 1} true;
  assume {:verifier.code 0} true;
  $r := $p37;
  $exn := false;
  return;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6953, 20} true;
  assume {:verifier.code 0} true;
  $p38 := $p15;
  $p39 := $add.ref($p15, 96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6953, 52} true;
  assume {:verifier.code 0} true;
  $p40 := $bitcast.ref.ref($p39);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6953, 61} true;
  assume {:verifier.code 0} true;
  $p41 := $p40;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6953, 61} true;
  assume {:verifier.code 0} true;
  $p42 := $load.ref($M.0, $p41);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6954, 7} true;
  assume {:verifier.code 0} true;
  $i43 := $p2i.ref.i64($p42);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6954, 35} true;
  assume {:verifier.code 0} true;
  $i44 := $ne.i64($i43, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6954, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i44 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6956, 15} true;
  assume {:verifier.code 0} true;
  $p45 := $bitcast.ref.ref($p42);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6956, 41} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p45, $mul.ref($sub.ref(0, 96), 1288));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6957, 3} true;
  assume {:verifier.code 0} true;
  $p47 := $p46;
  goto $bb22;
$bb21:
  assume !(($i44 == 1));
  assume {:verifier.code 0} true;
  $p47 := $0.ref;
  goto $bb22;
$bb22:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6962, 7} true;
  assume {:verifier.code 0} true;
  $i48 := $p2i.ref.i64($p47);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6962, 25} true;
  assume {:verifier.code 0} true;
  $i49 := $ne.i64($i48, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6962, 7} true;
  assume {:verifier.code 0} true;
  $p15 := $p47;
  assume {:branchcond $i49} true;
  goto $bb23, $bb24;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6962, 7} true;
  assume {:verifier.code 0} true;
  assume ($i49 == 1);
  goto $bb7;
$bb24:
  assume !(($i49 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6962, 7} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6968, 3} true;
  assume {:verifier.code 0} true;
  $p37 := $0.ref;
  goto $bb18;
}
const skb_pull: ref;
axiom (skb_pull == $sub.ref(0, 81449));
procedure  skb_pull($p0: ref, $i1: i32)
  returns ($r: ref);
const __net_timestamp: ref;
axiom (__net_timestamp == $sub.ref(0, 82481));
procedure  __net_timestamp($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6352, 8} true;
  assume {:verifier.code 0} true;
  $p2 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6352, 27} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6352, 46} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p3, 16);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6352, 65} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6352, 74} true;
  assume {:verifier.code 0} true;
  call $i6 := ktime_get_real();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6352, 74} true;
  assume {:verifier.code 0} true;
  $p7 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6352, 74} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p7, $i6);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6352, 74} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p5);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6352, 74} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6352, 74} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memcpy.i8($M.0, $M.0, $p8, $p9, 8, $zext.i32.i64(8), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6353, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ktime_get_real: ref;
axiom (ktime_get_real == $sub.ref(0, 83513));
procedure  ktime_get_real()
  returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
$bb0:
  assume {:verifier.code 0} true;
  call $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6161, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := ktime_get_with_offset(0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6161, 9} true;
  assume {:verifier.code 0} true;
  $p4 := $p2;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6161, 9} true;
  assume {:verifier.code 0} true;
  $M.4 := $store.i64($M.4, $p4, $i3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6161, 9} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6161, 9} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6161, 9} true;
  assume {:verifier.code 0} true;
  call $M.4 := $memcpy.i8($M.4, $M.4, $p5, $p6, 8, $zext.i32.i64(8), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6162, 11} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6162, 11} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6162, 11} true;
  assume {:verifier.code 0} true;
  call $M.4 := $memcpy.i8($M.4, $M.4, $p7, $p8, 8, $zext.i32.i64(8), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6162, 3} true;
  assume {:verifier.code 0} true;
  $p9 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6162, 3} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i64($M.4, $p9);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6162, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const ktime_get_with_offset: ref;
axiom (ktime_get_with_offset == $sub.ref(0, 84545));
procedure  ktime_get_with_offset($i0: i32)
  returns ($r: i64);
const change_bit: ref;
axiom (change_bit == $sub.ref(0, 85577));
procedure  change_bit($i0: i64, $p1: ref)
{
$bb0:
  call devirtbounce.3(0, $p1, $i0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6041, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const printk: ref;
axiom (printk == $sub.ref(0, 86609));
procedure  printk.ref.i32($p0: ref, p.1: i32)
  returns ($r: i32);
const __wake_up: ref;
axiom (__wake_up == $sub.ref(0, 87641));
procedure  __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
const kfree: ref;
axiom (kfree == $sub.ref(0, 88673));
procedure  kfree($p0: ref);
const ldv_atm_dev_deregister_5: ref;
axiom (ldv_atm_dev_deregister_5 == $sub.ref(0, 89705));
procedure  ldv_atm_dev_deregister_5($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7617, 3} true;
  assume {:verifier.code 0} true;
  call atm_dev_deregister($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7618, 24} true;
  assume {:verifier.code 0} true;
  $M.5 := 0;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7619, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_module_put_6: ref;
axiom (ldv_module_put_6 == $sub.ref(0, 90737));
procedure  ldv_module_put_6($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7627, 3} true;
  assume {:verifier.code 0} true;
  call ldv_module_put($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7628, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_module_put: ref;
axiom (ldv_module_put == $sub.ref(0, 91769));
procedure  ldv_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7761, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7761, 30} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i64($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7761, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7762, 9} true;
  assume {:verifier.code 0} true;
  $i3 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7762, 31} true;
  assume {:verifier.code 0} true;
  $i4 := $sle.i32($i3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7762, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7763, 7} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7764, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7767, 29} true;
  assume {:verifier.code 0} true;
  $i5 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7767, 51} true;
  assume {:verifier.code 0} true;
  $i6 := $sub.i32($i5, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7767, 27} true;
  assume {:verifier.code 0} true;
  $M.6 := $i6;
  call {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7768, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7771, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_error: ref;
axiom (ldv_error == $sub.ref(0, 92801));
procedure  ldv_error()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7675, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7677, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7679, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atm_dev_deregister: ref;
axiom (atm_dev_deregister == $sub.ref(0, 93833));
procedure  atm_dev_deregister($p0: ref);
const atmtcp_ioctl: ref;
axiom (atmtcp_ioctl == $sub.ref(0, 94865));
procedure  atmtcp_ioctl($p0: ref, $i1: i32, $i2: i64)
  returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i21: i32;
  var $i7: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.socket* %0, i64 0, metadata !9187, metadata !8006), !dbg !9188, !verifier.code !8008
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !9189, metadata !8006), !dbg !9190, !verifier.code !8008
  // WARNING: call void @llvm.dbg.value(metadata i64 %2, i64 0, metadata !9191, metadata !8006), !dbg !9192, !verifier.code !8008
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7282, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := ATM_SD($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7284, 12} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.i32($i1, 24960);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7284, 22} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7284, 29} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i1, 24974);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7284, 40} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7284, 22} true;
  assume {:verifier.code 0} true;
  assume !(($i4 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb9;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7284, 47} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i1, 24975);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7284, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb6, $bb7;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7284, 40} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb6:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7285, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.i32(0, 515);
  goto $bb8;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7284, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i6 == 1));
  goto $bb3;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7320, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7289, 13} true;
  assume {:verifier.code 0} true;
  call $i8 := capable(12);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7289, 11} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i1.i8($i8);
  // WARNING: %14 = zext i1 %13 to i8, !dbg !8033, !verifier.code !8008
  call {:cexpr "tmp___0"} boogie_si_record_i8($i9);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7290, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.i8.i1($i9);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7290, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7292, 3} true;
  assume {:verifier.code 0} true;
  $i11 := 0;
  goto $bb12;
$bb11:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  $i11 := 1;
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7295, 7} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i32($i11, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7295, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7296, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.i32(0, 1);
  goto $bb8;
$bb14:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:verifier.code 0} true;
  $i13 := $slt.i32($i1, 24974);
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i13 == 1);
  assume {:verifier.code 0} true;
  $i16 := $eq.i32($i1, 24960);
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb24, $bb25;
$bb18:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  $i14 := $slt.i32($i1, 24975);
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7311, 34} true;
  assume {:verifier.code 0} true;
  $i22 := $trunc.i64.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7311, 9} true;
  assume {:verifier.code 0} true;
  call $i23 := atmtcp_create_persistent($i22);
  // WARNING: %33 = call i32 @atmtcp_create_persistent(i32 %32), !dbg !8061, !verifier.code !8008
  call {:cexpr "err"} boogie_si_record_i32($i23);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7312, 3} true;
  assume {:verifier.code 0} true;
  $i21 := $i23;
  goto $bb29;
$bb20:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  $i15 := $eq.i32($i1, 24975);
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i15 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7314, 34} true;
  assume {:verifier.code 0} true;
  $i24 := $trunc.i64.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7314, 9} true;
  assume {:verifier.code 0} true;
  call $i25 := atmtcp_remove_persistent($i24);
  // WARNING: %36 = call i32 @atmtcp_remove_persistent(i32 %35), !dbg !8064, !verifier.code !8008
  call {:cexpr "err"} boogie_si_record_i32($i25);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7315, 3} true;
  assume {:verifier.code 0} true;
  $i21 := $i25;
  goto $bb29;
$bb22:
  assume {:verifier.code 0} true;
  assume !(($i15 == 1));
  goto $bb23;
$bb23:
  assume {:verifier.code 0} true;
  goto $bb30;
$bb24:
  assume ($i16 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7302, 28} true;
  assume {:verifier.code 0} true;
  $i17 := $trunc.i64.i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7302, 9} true;
  assume {:verifier.code 0} true;
  call $i18 := atmtcp_attach($p3, $i17);
  // WARNING: %25 = call i32 @atmtcp_attach(%struct.atm_vcc* %4, i32 %24), !dbg !8050, !verifier.code !8008
  call {:cexpr "err"} boogie_si_record_i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7303, 11} true;
  assume {:verifier.code 0} true;
  $i19 := $sge.i32($i18, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7303, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb26, $bb27;
$bb25:
  assume {:verifier.code 0} true;
  assume !(($i16 == 1));
  goto $bb23;
$bb26:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7304, 11} true;
  assume {:verifier.code 0} true;
  $p20 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7304, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p20, 3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7305, 5} true;
  assume {:verifier.code 0} true;
  call ldv___module_get_9(__this_module);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7306, 3} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7309, 3} true;
  assume {:verifier.code 0} true;
  $i21 := $i18;
  goto $bb29;
$bb29:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7318, 3} true;
  assume {:verifier.code 0} true;
  $i7 := $i21;
  goto $bb8;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7316, 3} true;
  assume {:verifier.code 0} true;
  $i21 := 0;
  goto $bb29;
}
const ATM_SD: ref;
axiom (ATM_SD == $sub.ref(0, 95897));
procedure  ATM_SD($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6384, 22} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6384, 22} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6384, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := atm_sk($p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6385, 3} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const capable: ref;
axiom (capable == $sub.ref(0, 96929));
procedure  capable($i0: i32)
  returns ($r: i1);
const atmtcp_attach: ref;
axiom (atmtcp_attach == $sub.ref(0, 97961));
procedure  atmtcp_attach($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i14: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata %struct.atm_vcc* %0, i64 0, metadata !9263, metadata !8006), !dbg !9264, !verifier.code !8008
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7188, 7} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p2, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7189, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i1, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7189, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7190, 11} true;
  assume {:verifier.code 0} true;
  call $p4 := atm_dev_lookup($i1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7190, 9} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p2, $p4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7191, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7194, 23} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.7, $p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7194, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7194, 27} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i64($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7194, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7195, 25} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.7, $p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7195, 30} true;
  assume {:verifier.code 0} true;
  $p9 := $p8;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7195, 30} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7195, 9} true;
  assume {:verifier.code 0} true;
  $i11 := $p2i.ref.i64($p10);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7195, 34} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i64($i11, $p2i.ref.i64(atmtcp_v_dev_ops));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7195, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb6, $bb7;
$bb5:
  assume !(($i7 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7208, 13} true;
  assume {:verifier.code 0} true;
  call $i24 := atmtcp_create($i1, 0, $p2);
  // WARNING: %35 = call i32 @atmtcp_create(i32 %1, i32 0, %struct.atm_dev** %3), !dbg !8053, !verifier.code !8007
  call {:cexpr "error"} boogie_si_record_i32($i24);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7209, 15} true;
  assume {:verifier.code 0} true;
  $i25 := $ne.i32($i24, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7209, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb14, $bb15;
$bb6:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7196, 19} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.7, $p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7196, 7} true;
  assume {:verifier.code 0} true;
  call atm_dev_put($p13);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7197, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 124);
  goto $bb8;
$bb7:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7226, 1} true;
  assume {:verifier.code 0} true;
  $r := $i14;
  $exn := false;
  return;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7201, 52} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.7, $p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7201, 57} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p15, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7201, 57} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7201, 26} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p17);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7201, 68} true;
  assume {:verifier.code 0} true;
  $p19 := $p18;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7201, 68} true;
  assume {:verifier.code 0} true;
  $p20 := $load.ref($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7201, 9} true;
  assume {:verifier.code 0} true;
  $i21 := $p2i.ref.i64($p20);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7201, 72} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.i64($i21, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7201, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i22 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7202, 19} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.7, $p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7202, 7} true;
  assume {:verifier.code 0} true;
  call atm_dev_put($p23);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7203, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 16);
  goto $bb8;
$bb11:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7207, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7215, 30} true;
  assume {:verifier.code 0} true;
  $p26 := $load.ref($M.7, $p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7215, 35} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p26, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7215, 35} true;
  assume {:verifier.code 0} true;
  $p28 := $load.ref($M.0, $p27);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7215, 4} true;
  assume {:verifier.code 0} true;
  $p29 := $bitcast.ref.ref($p28);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7215, 46} true;
  assume {:verifier.code 0} true;
  $p30 := $p29;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7215, 50} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p30, $p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7216, 8} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p0, 1320);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7216, 12} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p31, atmtcp_control_dev);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7217, 9} true;
  assume {:verifier.code 0} true;
  call $p32 := sk_atm($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7218, 3} true;
  assume {:verifier.code 0} true;
  call vcc_insert_socket($p32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7219, 51} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p0, 1288);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7219, 3} true;
  assume {:verifier.code 0} true;
  call set_bit(8, $p33);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7220, 51} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p0, 1288);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7220, 3} true;
  assume {:verifier.code 0} true;
  call set_bit(1, $p34);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7221, 27} true;
  assume {:verifier.code 0} true;
  $p35 := $load.ref($M.7, $p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7221, 19} true;
  assume {:verifier.code 0} true;
  $p36 := $bitcast.ref.ref($p35);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7221, 8} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p0, 1504);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7221, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p37, $p35);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7222, 3} true;
  assume {:verifier.code 0} true;
  call $i38 := atm_init_aal5($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7223, 8} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p0, 1520);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7223, 14} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p39, $add.ref($add.ref(atmtcp_control_dev, 96), 40));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7224, 11} true;
  assume {:verifier.code 0} true;
  $p40 := $load.ref($M.7, $p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7224, 16} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($p40, 24);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7224, 16} true;
  assume {:verifier.code 0} true;
  $i42 := $load.i32($M.0, $p41);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7224, 3} true;
  assume {:verifier.code 0} true;
  $i14 := $i42;
  goto $bb8;
$bb14:
  assume ($i25 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7210, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $i24;
  goto $bb8;
$bb15:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:verifier.code 0} true;
  goto $bb13;
}
const ldv___module_get_9: ref;
axiom (ldv___module_get_9 == $sub.ref(0, 98993));
procedure  ldv___module_get_9($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7666, 3} true;
  assume {:verifier.code 0} true;
  call ldv_module_get($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7667, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atmtcp_create_persistent: ref;
axiom (atmtcp_create_persistent == $sub.ref(0, 100025));
procedure  atmtcp_create_persistent($i0: i32)
  returns ($r: i32)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7232, 9} true;
  assume {:verifier.code 0} true;
  call $i1 := atmtcp_create($i0, 1, $0.ref);
  // WARNING: %2 = call i32 @atmtcp_create(i32 %0, i32 1, %struct.atm_dev** null), !dbg !8009, !verifier.code !8008
  call {:cexpr "tmp"} boogie_si_record_i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7233, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const atmtcp_remove_persistent: ref;
axiom (atmtcp_remove_persistent == $sub.ref(0, 101057));
procedure  atmtcp_remove_persistent($i0: i32)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7242, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := atm_dev_lookup($i0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7243, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7243, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i64($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7243, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7244, 5} true;
  assume {:verifier.code 0} true;
  $i4 := $sub.i32(0, 19);
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7271, 1} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7248, 28} true;
  assume {:verifier.code 0} true;
  $p5 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7248, 28} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7248, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p6);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7248, 32} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i64($i7, $p2i.ref.i64(atmtcp_v_dev_ops));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7248, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7249, 5} true;
  assume {:verifier.code 0} true;
  call atm_dev_put($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7250, 5} true;
  assume {:verifier.code 0} true;
  $i4 := $sub.i32(0, 124);
  goto $bb3;
$bb6:
  assume !(($i8 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7254, 45} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p1, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7254, 45} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7254, 14} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7255, 17} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p11, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7255, 17} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.0, $p12);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7255, 25} true;
  assume {:verifier.code 0} true;
  $i14 := $eq.i32($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7255, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7256, 5} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb3;
$bb9:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7260, 13} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p11, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7260, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p15, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7261, 55} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p1, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7261, 55} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7261, 24} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p17);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7261, 66} true;
  assume {:verifier.code 0} true;
  $p19 := $p18;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7261, 66} true;
  assume {:verifier.code 0} true;
  $p20 := $load.ref($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7261, 7} true;
  assume {:verifier.code 0} true;
  $i21 := $p2i.ref.i64($p20);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7261, 70} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.i64($i21, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7261, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i22 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7262, 5} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb3;
$bb12:
  assume !(($i22 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7266, 9} true;
  assume {:verifier.code 0} true;
  $p23 := $bitcast.ref.ref($p11);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7266, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p23);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7267, 3} true;
  assume {:verifier.code 0} true;
  call atm_dev_put($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7268, 3} true;
  assume {:verifier.code 0} true;
  call ldv_atm_dev_deregister_8($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7269, 3} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  goto $bb3;
}
const atm_dev_lookup: ref;
axiom (atm_dev_lookup == $sub.ref(0, 102089));
procedure  atm_dev_lookup($i0: i32)
  returns ($r: ref);
const atm_dev_put: ref;
axiom (atm_dev_put == $sub.ref(0, 103121));
procedure  atm_dev_put($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6425, 40} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 164);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6425, 13} true;
  assume {:verifier.code 0} true;
  call $i2 := atomic_dec_and_test($p1);
  // WARNING: %3 = call i32 @atomic_dec_and_test(%union.__anonunion____missing_field_name_343* %2), !dbg !8011, !verifier.code !8008
  call {:cexpr "tmp___1"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6426, 15} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6426, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6427, 75} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 48);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6427, 11} true;
  assume {:verifier.code 0} true;
  call $i5 := constant_test_bit(0, $p4);
  // WARNING: %7 = call i32 @constant_test_bit(i64 0, i64* %6), !dbg !8019, !verifier.code !8008
  call {:cexpr "tmp"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6428, 39} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6428, 39} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i1.i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6428, 35} true;
  assume {:verifier.code 0} true;
  $i8 := $sext.i32.i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6428, 15} true;
  assume {:verifier.code 0} true;
  call $i9 := ldv__builtin_expect($i8, 0);
  // WARNING: %11 = call i64 @ldv__builtin_expect(i64 %10, i64 0), !dbg !8024, !verifier.code !8008
  call {:cexpr "tmp___0"} boogie_si_record_i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6429, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i64($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6429, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb3:
  assume ($i10 == 1);
  call devirtbounce.9(0, .str, 271, 12);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6430, 7} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6433, 7} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6437, 31} true;
  assume {:verifier.code 0} true;
  $p11 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6437, 31} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6437, 37} true;
  assume {:verifier.code 0} true;
  $p13 := $p12;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6437, 37} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6437, 9} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.i64($p14);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6437, 47} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.i64($i15, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6437, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i16 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6438, 16} true;
  assume {:verifier.code 0} true;
  $p17 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6438, 16} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.0, $p17);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6438, 22} true;
  assume {:verifier.code 0} true;
  $p19 := $p18;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6438, 22} true;
  assume {:verifier.code 0} true;
  $p20 := $load.ref($M.0, $p19);
  call devirtbounce.10($p20, $p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6439, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i16 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6442, 23} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p0, 256);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6442, 5} true;
  assume {:verifier.code 0} true;
  call put_device($p21);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6443, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6446, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_atm_dev_deregister_8: ref;
axiom (ldv_atm_dev_deregister_8 == $sub.ref(0, 104153));
procedure  ldv_atm_dev_deregister_8($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7656, 3} true;
  assume {:verifier.code 0} true;
  call atm_dev_deregister($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7657, 24} true;
  assume {:verifier.code 0} true;
  $M.5 := 0;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7658, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atomic_dec_and_test: ref;
axiom (atomic_dec_and_test == $sub.ref(0, 105185));
procedure  atomic_dec_and_test($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6144, 138} true;
  assume {:verifier.code 0} true;
  $p2 := $p0;
  call devirtbounce.11(0, $p2, $p1, $p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6146, 32} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i8($M.8, $p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6146, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i8.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6146, 35} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.i32($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6146, 35} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6146, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const constant_test_bit: ref;
axiom (constant_test_bit == $sub.ref(0, 106217));
procedure  constant_test_bit($i0: i64, $p1: ref)
  returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6049, 63} true;
  assume {:verifier.code 0} true;
  $i2 := $ashr.i64($i0, 6);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6049, 41} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p1, $mul.ref($i2, 8));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6049, 34} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i64($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6049, 74} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i64.i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6049, 83} true;
  assume {:verifier.code 0} true;
  $i6 := $and.i32($i5, 63);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6049, 70} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i32.i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6049, 70} true;
  assume {:verifier.code 0} true;
  $i8 := $lshr.i64($i4, $i7);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6049, 11} true;
  assume {:verifier.code 0} true;
  $i9 := $trunc.i64.i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6049, 90} true;
  assume {:verifier.code 0} true;
  $i10 := $and.i32($i9, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6049, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const put_device: ref;
axiom (put_device == $sub.ref(0, 107249));
procedure  put_device($p0: ref);
const atmtcp_create: ref;
axiom (atmtcp_create == $sub.ref(0, 108281));
procedure  atmtcp_create($i0: i32, $i1: i32, $p2: ref)
  returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i7: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !9483, metadata !8006), !dbg !9484, !verifier.code !8008
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7153, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := kmalloc(16, 208);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7154, 14} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7155, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7155, 32} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i64($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7155, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7156, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.i32(0, 12);
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7180, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7160, 9} true;
  assume {:verifier.code 0} true;
  call $p8 := ldv_atm_dev_register_7(.str.1, $0.ref, atmtcp_v_dev_ops, $i0, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7162, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $p2i.ref.i64($p8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7162, 27} true;
  assume {:verifier.code 0} true;
  $i10 := $eq.i64($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7162, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7163, 11} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7163, 5} true;
  assume {:verifier.code 0} true;
  call kfree($p11);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7164, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $eq.i32($i0, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7164, 13} true;
  assume {:verifier.code 0} true;
  havoc $i13;
  assume ((($i12 == 1) ==> ($i13 == $sub.i32(0, 12))) && (($i12 != 1) ==> ($i13 == $sub.i32(0, 16))));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7164, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $i13;
  goto $bb3;
$bb6:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7168, 8} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p8, 94);
  $p15 := $add.ref($p8, 94);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7168, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p15, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7169, 8} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p8, 94);
  $p17 := $add.ref($add.ref($p8, 94), 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7169, 26} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, $p17, 16);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7170, 19} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7170, 8} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p8, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7170, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p19, $p3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7171, 35} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p8, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7171, 35} true;
  assume {:verifier.code 0} true;
  $p21 := $load.ref($M.0, $p20);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7171, 4} true;
  assume {:verifier.code 0} true;
  $p22 := $bitcast.ref.ref($p21);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7171, 46} true;
  assume {:verifier.code 0} true;
  $p23 := $p22;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7171, 50} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p23, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7172, 35} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p8, 32);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7172, 35} true;
  assume {:verifier.code 0} true;
  $p25 := $load.ref($M.0, $p24);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7172, 4} true;
  assume {:verifier.code 0} true;
  $p26 := $bitcast.ref.ref($p25);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7172, 46} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p26, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7172, 54} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p27, $i1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7173, 7} true;
  assume {:verifier.code 0} true;
  $i28 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7173, 30} true;
  assume {:verifier.code 0} true;
  $i29 := $ne.i64($i28, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7173, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i29 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7174, 13} true;
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p2, $p8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7175, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7178, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 0;
  goto $bb3;
}
const kmalloc: ref;
axiom (kmalloc == $sub.ref(0, 109313));
procedure  kmalloc($i0: i64, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !9542, metadata !8006), !dbg !9543, !verifier.code !8008
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6179, 13} true;
  assume {:verifier.code 0} true;
  call $p2 := __kmalloc($i0, $i1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6180, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const ldv_atm_dev_register_7: ref;
axiom (ldv_atm_dev_register_7 == $sub.ref(0, 110345));
procedure  ldv_atm_dev_register_7($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref)
  returns ($r: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.atmdev_ops* %2, i64 0, metadata !9558, metadata !8006), !dbg !9559, !verifier.code !8008
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7639, 9} true;
  assume {:verifier.code 0} true;
  call $p5 := atm_dev_register($p0, $p1, $p2, $i3, $p4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7642, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7642, 36} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i64($i6, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7642, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7643, 26} true;
  assume {:verifier.code 0} true;
  $M.5 := 1;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7644, 5} true;
  assume {:verifier.code 0} true;
  call ldv_initialize_atmdev_ops_3();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7645, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7648, 3} true;
  assume {:verifier.code 0} true;
  $r := $p5;
  $exn := false;
  return;
}
const atm_dev_register: ref;
axiom (atm_dev_register == $sub.ref(0, 111377));
procedure  atm_dev_register($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref)
  returns ($r: ref);
const ldv_initialize_atmdev_ops_3: ref;
axiom (ldv_initialize_atmdev_ops_3 == $sub.ref(0, 112409));
procedure  ldv_initialize_atmdev_ops_3()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7351, 9} true;
  assume {:verifier.code 0} true;
  call $p0 := ldv_init_zalloc(1688);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7352, 29} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7352, 27} true;
  assume {:verifier.code 0} true;
  $M.9 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7353, 13} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_init_zalloc(1640);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7354, 29} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7354, 27} true;
  assume {:verifier.code 0} true;
  $M.10 := $p2;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7355, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_init_zalloc: ref;
axiom (ldv_init_zalloc == $sub.ref(0, 113441));
procedure  ldv_init_zalloc($i0: i64)
  returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6232, 9} true;
  assume {:verifier.code 0} true;
  call $p1 := calloc(1, $i0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6234, 21} true;
  assume {:verifier.code 1} true;
  $i2 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6234, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $ne.i64($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6234, 39} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6234, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6235, 3} true;
  assume {:verifier.code 0} true;
  $r := $p1;
  $exn := false;
  return;
}
const __kmalloc: ref;
axiom (__kmalloc == $sub.ref(0, 114473));
procedure  __kmalloc($i0: i64, $i1: i32)
  returns ($r: ref);
const ldv_module_get: ref;
axiom (ldv_module_get == $sub.ref(0, 115505));
procedure  ldv_module_get($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7729, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7729, 30} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i64($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7729, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7730, 29} true;
  assume {:verifier.code 0} true;
  $i3 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7730, 51} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i32($i3, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7730, 27} true;
  assume {:verifier.code 0} true;
  $M.6 := $i4;
  call {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7731, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7734, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const vcc_insert_socket: ref;
axiom (vcc_insert_socket == $sub.ref(0, 116537));
procedure  vcc_insert_socket($p0: ref);
const atm_init_aal5: ref;
axiom (atm_init_aal5 == $sub.ref(0, 117569));
procedure  atm_init_aal5($p0: ref)
  returns ($r: i32);
const ldv_memset: ref;
axiom (ldv_memset == $sub.ref(0, 118601));
procedure  ldv_memset($p0: ref, $i1: i32, $i2: i64)
  returns ($r: ref)
{
  var $i3: i8;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %0, i64 0, metadata !9624, metadata !8006), !dbg !9625, !verifier.code !8008
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !9626, metadata !8006), !dbg !9627, !verifier.code !8008
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6243, 9} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i32.i8($i1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6243, 9} true;
  assume {:verifier.code 0} true;
  call $M.11 := $memset.i8($M.11, $p0, $i3, $i2, $zext.i32.i64(1), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6244, 3} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 119633));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
$bb0:
  call $initialize();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7392, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:verifier.code 0} true;
  call $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7392, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_init_zalloc(48);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7393, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7394, 13} true;
  assume {:verifier.code 0} true;
  call $p4 := ldv_init_zalloc(8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7395, 13} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7396, 13} true;
  assume {:verifier.code 0} true;
  call $p6 := ldv_init_zalloc(1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7398, 13} true;
  assume {:verifier.code 0} true;
  call $p7 := ldv_init_zalloc(232);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7399, 13} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7400, 13} true;
  assume {:verifier.code 0} true;
  call $p9 := ldv_init_zalloc(1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7402, 13} true;
  assume {:verifier.code 0} true;
  call $p10 := ldv_init_zalloc(232);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7403, 13} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7404, 3} true;
  assume {:verifier.code 0} true;
  call ldv_initialize();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7405, 14} true;
  assume {:verifier.code 0} true;
  $p12 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7405, 3} true;
  assume {:verifier.code 0} true;
  call $p13 := ldv_memset($p12, 0, 8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7406, 13} true;
  assume {:verifier.code 1} true;
  call $i14 := __VERIFIER_nondet_uint();
  call {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i14);
  // WARNING: %15 = call i32 @__VERIFIER_nondet_uint(), !dbg !8049, !verifier.code !8050
  call {:cexpr "ldvarg2"} boogie_si_record_i32($i14);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7407, 14} true;
  assume {:verifier.code 0} true;
  $p15 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7407, 3} true;
  assume {:verifier.code 0} true;
  call $p16 := ldv_memset($p15, 0, 4);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7408, 24} true;
  assume {:verifier.code 0} true;
  $M.12 := 0;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7409, 11} true;
  assume {:verifier.code 0} true;
  $M.13 := 0;
  call {:cexpr "ref_cnt"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7410, 24} true;
  assume {:verifier.code 0} true;
  $M.14 := 1;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7411, 24} true;
  assume {:verifier.code 0} true;
  $M.5 := 0;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7412, 24} true;
  assume {:verifier.code 0} true;
  $M.15 := 0;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7412, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7414, 13} true;
  assume {:verifier.code 1} true;
  call $i17 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i17);
  // WARNING: %19 = call i32 @__VERIFIER_nondet_int(), !dbg !8061, !verifier.code !8050
  call {:cexpr "tmp___5"} boogie_si_record_i32($i17);
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:verifier.code 0} true;
  $i18 := $slt.i32($i17, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i18 == 1);
  assume {:verifier.code 0} true;
  $i21 := $slt.i32($i17, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb10, $bb11;
$bb4:
  assume !(($i18 == 1));
  assume {:verifier.code 0} true;
  $i19 := $slt.i32($i17, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i19 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7477, 7} true;
  assume {:verifier.code 0} true;
  $i48 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7477, 28} true;
  assume {:verifier.code 0} true;
  $i49 := $ne.i32($i48, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7477, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb57, $bb58;
$bb6:
  assume !(($i19 == 1));
  assume {:verifier.code 0} true;
  $i20 := $eq.i32($i17, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i20 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7560, 7} true;
  assume {:verifier.code 0} true;
  $i97 := $M.15;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7560, 28} true;
  assume {:verifier.code 0} true;
  $i98 := $ne.i32($i97, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7560, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i98} true;
  goto $bb109, $bb110;
$bb8:
  assume {:verifier.code 0} true;
  assume !(($i20 == 1));
  goto $bb9;
$bb9:
  assume {:verifier.code 0} true;
  goto $bb137;
$bb10:
  assume ($i21 == 1);
  assume {:verifier.code 0} true;
  $i22 := $eq.i32($i17, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb12, $bb13;
$bb11:
  assume !(($i21 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7437, 7} true;
  assume {:verifier.code 0} true;
  $i31 := $M.14;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7437, 28} true;
  assume {:verifier.code 0} true;
  $i32 := $ne.i32($i31, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7437, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb27, $bb28;
$bb12:
  assume ($i22 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7417, 7} true;
  assume {:verifier.code 0} true;
  $i23 := $M.12;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7417, 28} true;
  assume {:verifier.code 0} true;
  $i24 := $ne.i32($i23, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7417, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb14, $bb15;
$bb13:
  assume {:verifier.code 0} true;
  assume !(($i22 == 1));
  goto $bb9;
$bb14:
  assume ($i24 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7418, 15} true;
  assume {:verifier.code 1} true;
  call $i25 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i25);
  // WARNING: %24 = call i32 @__VERIFIER_nondet_int(), !dbg !8069, !verifier.code !8050
  call {:cexpr "tmp___6"} boogie_si_record_i32($i25);
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i24 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb16:
  assume {:verifier.code 0} true;
  $i26 := $eq.i32($i25, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i26 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7421, 9} true;
  assume {:verifier.code 0} true;
  $i27 := $M.12;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7421, 30} true;
  assume {:verifier.code 0} true;
  $i28 := $eq.i32($i27, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7421, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb19, $bb20;
$bb18:
  assume !(($i26 == 1));
  assume {:verifier.code 0} true;
  goto $bb23;
$bb19:
  assume ($i28 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7422, 38} true;
  assume {:verifier.code 0} true;
  $i29 := $load.i64($M.11, $p0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7422, 7} true;
  assume {:verifier.code 0} true;
  call $i30 := atmtcp_ioctl($p3, $i14, $i29);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7423, 28} true;
  assume {:verifier.code 0} true;
  $M.12 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7424, 5} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume !(($i28 == 1));
  assume {:verifier.code 0} true;
  goto $bb21;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7427, 5} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7432, 3} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7429, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7430, 5} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7430, 5} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7435, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb26:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7606, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb27:
  assume ($i32 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7438, 15} true;
  assume {:verifier.code 1} true;
  call $i33 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i33);
  // WARNING: %42 = call i32 @__VERIFIER_nondet_int(), !dbg !8094, !verifier.code !8050
  call {:cexpr "tmp___7"} boogie_si_record_i32($i33);
  assume {:verifier.code 0} true;
  goto $bb29;
$bb28:
  assume !(($i32 == 1));
  assume {:verifier.code 0} true;
  goto $bb56;
$bb29:
  assume {:verifier.code 0} true;
  $i34 := $slt.i32($i33, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb30, $bb31;
$bb30:
  assume ($i34 == 1);
  assume {:verifier.code 0} true;
  $i36 := $eq.i32($i33, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb35, $bb36;
$bb31:
  assume !(($i34 == 1));
  assume {:verifier.code 0} true;
  $i35 := $eq.i32($i33, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb32, $bb33;
$bb32:
  assume ($i35 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7450, 9} true;
  assume {:verifier.code 0} true;
  $i41 := $M.14;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7450, 30} true;
  assume {:verifier.code 0} true;
  $i42 := $eq.i32($i41, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7450, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i42} true;
  goto $bb45, $bb46;
$bb33:
  assume {:verifier.code 0} true;
  assume !(($i35 == 1));
  goto $bb34;
$bb34:
  assume {:verifier.code 0} true;
  goto $bb54;
$bb35:
  assume ($i36 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7441, 9} true;
  assume {:verifier.code 0} true;
  $i37 := $M.14;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7441, 30} true;
  assume {:verifier.code 0} true;
  $i38 := $eq.i32($i37, 3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7441, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb37, $bb38;
$bb36:
  assume {:verifier.code 0} true;
  assume !(($i36 == 1));
  goto $bb34;
$bb37:
  assume ($i38 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7441, 38} true;
  assume {:verifier.code 0} true;
  $i39 := $M.13;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7441, 46} true;
  assume {:verifier.code 0} true;
  $i40 := $eq.i32($i39, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7441, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb40, $bb41;
$bb38:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7441, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i38 == 1));
  goto $bb39;
$bb39:
  assume {:verifier.code 0} true;
  goto $bb43;
$bb40:
  assume ($i40 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7442, 7} true;
  assume {:verifier.code 0} true;
  call atmtcp_exit();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7443, 28} true;
  assume {:verifier.code 0} true;
  $M.14 := 2;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7444, 7} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb41:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7441, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i40 == 1));
  goto $bb39;
$bb42:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7608, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_final_state();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7609, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
$bb43:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7448, 5} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb44:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7472, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb45:
  assume ($i42 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7451, 22} true;
  assume {:verifier.code 0} true;
  call $i43 := atmtcp_init();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7451, 20} true;
  assume {:verifier.code 0} true;
  $M.16 := $i43;
  call {:cexpr "ldv_retval_0"} boogie_si_record_i32($i43);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7452, 11} true;
  assume {:verifier.code 0} true;
  $i44 := $M.16;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7452, 24} true;
  assume {:verifier.code 0} true;
  $i45 := $eq.i32($i44, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7452, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb47, $bb48;
$bb46:
  assume !(($i42 == 1));
  assume {:verifier.code 0} true;
  goto $bb53;
$bb47:
  assume ($i45 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7453, 30} true;
  assume {:verifier.code 0} true;
  $M.14 := 3;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7454, 30} true;
  assume {:verifier.code 0} true;
  $M.12 := 1;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7455, 7} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb48:
  assume !(($i45 == 1));
  assume {:verifier.code 0} true;
  goto $bb49;
$bb49:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7458, 11} true;
  assume {:verifier.code 0} true;
  $i46 := $M.16;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7458, 24} true;
  assume {:verifier.code 0} true;
  $i47 := $ne.i32($i46, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7458, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i47} true;
  goto $bb50, $bb51;
$bb50:
  assume ($i47 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7459, 30} true;
  assume {:verifier.code 0} true;
  $M.14 := 2;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7460, 9} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb51:
  assume !(($i47 == 1));
  assume {:verifier.code 0} true;
  goto $bb52;
$bb52:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7464, 5} true;
  assume {:verifier.code 0} true;
  goto $bb53;
$bb53:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7467, 5} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb54:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7469, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7470, 5} true;
  assume {:verifier.code 0} true;
  goto $bb55;
$bb55:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7470, 5} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb56:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7475, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb57:
  assume ($i49 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7478, 15} true;
  assume {:verifier.code 1} true;
  call $i50 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i50);
  // WARNING: %78 = call i32 @__VERIFIER_nondet_int(), !dbg !8146, !verifier.code !8050
  call {:cexpr "tmp___8"} boogie_si_record_i32($i50);
  assume {:verifier.code 0} true;
  goto $bb59;
$bb58:
  assume !(($i49 == 1));
  assume {:verifier.code 0} true;
  goto $bb108;
$bb59:
  assume {:verifier.code 0} true;
  $i51 := $slt.i32($i50, 3);
  assume {:verifier.code 0} true;
  assume {:branchcond $i51} true;
  goto $bb60, $bb61;
$bb60:
  assume ($i51 == 1);
  assume {:verifier.code 0} true;
  $i55 := $slt.i32($i50, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i55} true;
  goto $bb69, $bb70;
$bb61:
  assume !(($i51 == 1));
  assume {:verifier.code 0} true;
  $i52 := $slt.i32($i50, 4);
  assume {:verifier.code 0} true;
  assume {:branchcond $i52} true;
  goto $bb62, $bb63;
$bb62:
  assume ($i52 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7517, 9} true;
  assume {:verifier.code 0} true;
  $i78 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7517, 30} true;
  assume {:verifier.code 0} true;
  $i79 := $eq.i32($i78, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7517, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i79} true;
  goto $bb91, $bb92;
$bb63:
  assume !(($i52 == 1));
  assume {:verifier.code 0} true;
  $i53 := $slt.i32($i50, 5);
  assume {:verifier.code 0} true;
  assume {:branchcond $i53} true;
  goto $bb64, $bb65;
$bb64:
  assume ($i53 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7531, 9} true;
  assume {:verifier.code 0} true;
  $i86 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7531, 30} true;
  assume {:verifier.code 0} true;
  $i87 := $eq.i32($i86, 2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7531, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i87} true;
  goto $bb97, $bb98;
$bb65:
  assume !(($i53 == 1));
  assume {:verifier.code 0} true;
  $i54 := $eq.i32($i50, 5);
  assume {:verifier.code 0} true;
  assume {:branchcond $i54} true;
  goto $bb66, $bb67;
$bb66:
  assume ($i54 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7539, 9} true;
  assume {:verifier.code 0} true;
  $i89 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7539, 30} true;
  assume {:verifier.code 0} true;
  $i90 := $eq.i32($i89, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7539, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i90} true;
  goto $bb100, $bb101;
$bb67:
  assume {:verifier.code 0} true;
  assume !(($i54 == 1));
  goto $bb68;
$bb68:
  assume {:verifier.code 0} true;
  goto $bb106;
$bb69:
  assume ($i55 == 1);
  assume {:verifier.code 0} true;
  $i57 := $eq.i32($i50, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i57} true;
  goto $bb73, $bb74;
$bb70:
  assume !(($i55 == 1));
  assume {:verifier.code 0} true;
  $i56 := $slt.i32($i50, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb71, $bb72;
$bb71:
  assume ($i56 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7489, 9} true;
  assume {:verifier.code 0} true;
  $i62 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7489, 30} true;
  assume {:verifier.code 0} true;
  $i63 := $eq.i32($i62, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7489, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i63} true;
  goto $bb79, $bb80;
$bb72:
  assume !(($i56 == 1));
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7503, 9} true;
  assume {:verifier.code 0} true;
  $i72 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7503, 30} true;
  assume {:verifier.code 0} true;
  $i73 := $eq.i32($i72, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7503, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i73} true;
  goto $bb85, $bb86;
$bb73:
  assume ($i57 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7481, 9} true;
  assume {:verifier.code 0} true;
  $i58 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7481, 30} true;
  assume {:verifier.code 0} true;
  $i59 := $eq.i32($i58, 2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7481, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i59} true;
  goto $bb75, $bb76;
$bb74:
  assume {:verifier.code 0} true;
  assume !(($i57 == 1));
  goto $bb68;
$bb75:
  assume ($i59 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7482, 21} true;
  assume {:verifier.code 0} true;
  $p60 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7482, 7} true;
  assume {:verifier.code 0} true;
  call $i61 := atmtcp_v_proc($p60, $p5, $p9);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7483, 28} true;
  assume {:verifier.code 0} true;
  $M.5 := 2;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7484, 5} true;
  assume {:verifier.code 0} true;
  goto $bb77;
$bb76:
  assume !(($i59 == 1));
  assume {:verifier.code 0} true;
  goto $bb77;
$bb77:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7487, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb78:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7555, 3} true;
  assume {:verifier.code 0} true;
  goto $bb108;
$bb79:
  assume ($i63 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7490, 22} true;
  assume {:verifier.code 0} true;
  $p64 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7490, 47} true;
  assume {:verifier.code 0} true;
  $i65 := $load.i32($M.11, $p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7490, 7} true;
  assume {:verifier.code 0} true;
  call $i66 := atmtcp_v_ioctl($p64, $i65, $p6);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7491, 28} true;
  assume {:verifier.code 0} true;
  $M.5 := 1;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7492, 5} true;
  assume {:verifier.code 0} true;
  goto $bb81;
$bb80:
  assume !(($i63 == 1));
  assume {:verifier.code 0} true;
  goto $bb81;
$bb81:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7495, 9} true;
  assume {:verifier.code 0} true;
  $i67 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7495, 30} true;
  assume {:verifier.code 0} true;
  $i68 := $eq.i32($i67, 2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7495, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb82, $bb83;
$bb82:
  assume ($i68 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7496, 22} true;
  assume {:verifier.code 0} true;
  $p69 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7496, 47} true;
  assume {:verifier.code 0} true;
  $i70 := $load.i32($M.11, $p1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7496, 7} true;
  assume {:verifier.code 0} true;
  call $i71 := atmtcp_v_ioctl($p69, $i70, $p6);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7497, 28} true;
  assume {:verifier.code 0} true;
  $M.5 := 2;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7498, 5} true;
  assume {:verifier.code 0} true;
  goto $bb84;
$bb83:
  assume !(($i68 == 1));
  assume {:verifier.code 0} true;
  goto $bb84;
$bb84:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7501, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb85:
  assume ($i73 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7504, 26} true;
  assume {:verifier.code 0} true;
  $p74 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7504, 7} true;
  assume {:verifier.code 0} true;
  call atmtcp_v_dev_close($p74);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7505, 28} true;
  assume {:verifier.code 0} true;
  $M.5 := 1;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7506, 5} true;
  assume {:verifier.code 0} true;
  goto $bb87;
$bb86:
  assume !(($i73 == 1));
  assume {:verifier.code 0} true;
  goto $bb87;
$bb87:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7509, 9} true;
  assume {:verifier.code 0} true;
  $i75 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7509, 30} true;
  assume {:verifier.code 0} true;
  $i76 := $eq.i32($i75, 2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7509, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i76} true;
  goto $bb88, $bb89;
$bb88:
  assume ($i76 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7510, 26} true;
  assume {:verifier.code 0} true;
  $p77 := $M.9;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7510, 7} true;
  assume {:verifier.code 0} true;
  call atmtcp_v_dev_close($p77);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7511, 28} true;
  assume {:verifier.code 0} true;
  $M.5 := 2;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7512, 5} true;
  assume {:verifier.code 0} true;
  goto $bb90;
$bb89:
  assume !(($i76 == 1));
  assume {:verifier.code 0} true;
  goto $bb90;
$bb90:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7515, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb91:
  assume ($i79 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7518, 21} true;
  assume {:verifier.code 0} true;
  $p80 := $M.10;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7518, 7} true;
  assume {:verifier.code 0} true;
  call $i81 := atmtcp_v_send($p80, $p8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7519, 28} true;
  assume {:verifier.code 0} true;
  $M.5 := 1;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7520, 5} true;
  assume {:verifier.code 0} true;
  goto $bb93;
$bb92:
  assume !(($i79 == 1));
  assume {:verifier.code 0} true;
  goto $bb93;
$bb93:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7523, 9} true;
  assume {:verifier.code 0} true;
  $i82 := $M.5;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7523, 30} true;
  assume {:verifier.code 0} true;
  $i83 := $eq.i32($i82, 2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7523, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i83} true;
  goto $bb94, $bb95;
$bb94:
  assume ($i83 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7524, 21} true;
  assume {:verifier.code 0} true;
  $p84 := $M.10;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7524, 7} true;
  assume {:verifier.code 0} true;
  call $i85 := atmtcp_v_send($p84, $p8);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7525, 28} true;
  assume {:verifier.code 0} true;
  $M.5 := 2;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7526, 5} true;
  assume {:verifier.code 0} true;
  goto $bb96;
$bb95:
  assume !(($i83 == 1));
  assume {:verifier.code 0} true;
  goto $bb96;
$bb96:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7529, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb97:
  assume ($i87 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7532, 22} true;
  assume {:verifier.code 0} true;
  $p88 := $M.10;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7532, 7} true;
  assume {:verifier.code 0} true;
  call atmtcp_v_close($p88);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7533, 28} true;
  assume {:verifier.code 0} true;
  $M.5 := 1;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7534, 5} true;
  assume {:verifier.code 0} true;
  goto $bb99;
$bb98:
  assume !(($i87 == 1));
  assume {:verifier.code 0} true;
  goto $bb99;
$bb99:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7537, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb100:
  assume ($i90 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7540, 36} true;
  assume {:verifier.code 0} true;
  $p91 := $M.10;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7540, 22} true;
  assume {:verifier.code 0} true;
  call $i92 := atmtcp_v_open($p91);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7540, 20} true;
  assume {:verifier.code 0} true;
  $M.17 := $i92;
  call {:cexpr "ldv_retval_1"} boogie_si_record_i32($i92);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7541, 11} true;
  assume {:verifier.code 0} true;
  $i93 := $M.17;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7541, 24} true;
  assume {:verifier.code 0} true;
  $i94 := $eq.i32($i93, 0);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7541, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i94} true;
  goto $bb102, $bb103;
$bb101:
  assume !(($i90 == 1));
  assume {:verifier.code 0} true;
  goto $bb105;
$bb102:
  assume ($i94 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7542, 30} true;
  assume {:verifier.code 0} true;
  $M.5 := 2;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7543, 19} true;
  assume {:verifier.code 0} true;
  $i95 := $M.13;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7543, 27} true;
  assume {:verifier.code 0} true;
  $i96 := $add.i32($i95, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7543, 17} true;
  assume {:verifier.code 0} true;
  $M.13 := $i96;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i96);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7544, 7} true;
  assume {:verifier.code 0} true;
  goto $bb104;
$bb103:
  assume !(($i94 == 1));
  assume {:verifier.code 0} true;
  goto $bb104;
$bb104:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7547, 5} true;
  assume {:verifier.code 0} true;
  goto $bb105;
$bb105:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7550, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb106:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7552, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7553, 5} true;
  assume {:verifier.code 0} true;
  goto $bb107;
$bb107:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7553, 5} true;
  assume {:verifier.code 0} true;
  goto $bb78;
$bb108:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7558, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb109:
  assume ($i98 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7561, 15} true;
  assume {:verifier.code 1} true;
  call $i99 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i99);
  // WARNING: %163 = call i32 @__VERIFIER_nondet_int(), !dbg !8260, !verifier.code !8050
  call {:cexpr "tmp___9"} boogie_si_record_i32($i99);
  assume {:verifier.code 0} true;
  goto $bb111;
$bb110:
  assume !(($i98 == 1));
  assume {:verifier.code 0} true;
  goto $bb136;
$bb111:
  assume {:verifier.code 0} true;
  $i100 := $slt.i32($i99, 1);
  assume {:verifier.code 0} true;
  assume {:branchcond $i100} true;
  goto $bb112, $bb113;
$bb112:
  assume ($i100 == 1);
  assume {:verifier.code 0} true;
  $i103 := $eq.i32($i99, 0);
  assume {:verifier.code 0} true;
  assume {:branchcond $i103} true;
  goto $bb119, $bb120;
$bb113:
  assume !(($i100 == 1));
  assume {:verifier.code 0} true;
  $i101 := $slt.i32($i99, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i101} true;
  goto $bb114, $bb115;
$bb114:
  assume ($i101 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7578, 9} true;
  assume {:verifier.code 0} true;
  $i112 := $M.15;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7578, 30} true;
  assume {:verifier.code 0} true;
  $i113 := $eq.i32($i112, 2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7578, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i113} true;
  goto $bb128, $bb129;
$bb115:
  assume !(($i101 == 1));
  assume {:verifier.code 0} true;
  $i102 := $eq.i32($i99, 2);
  assume {:verifier.code 0} true;
  assume {:branchcond $i102} true;
  goto $bb116, $bb117;
$bb116:
  assume ($i102 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7586, 9} true;
  assume {:verifier.code 0} true;
  $i115 := $M.15;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7586, 30} true;
  assume {:verifier.code 0} true;
  $i116 := $eq.i32($i115, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7586, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i116} true;
  goto $bb131, $bb132;
$bb117:
  assume {:verifier.code 0} true;
  assume !(($i102 == 1));
  goto $bb118;
$bb118:
  assume {:verifier.code 0} true;
  goto $bb134;
$bb119:
  assume ($i103 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7564, 9} true;
  assume {:verifier.code 0} true;
  $i104 := $M.15;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7564, 30} true;
  assume {:verifier.code 0} true;
  $i105 := $eq.i32($i104, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7564, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i105} true;
  goto $bb121, $bb122;
$bb120:
  assume {:verifier.code 0} true;
  assume !(($i103 == 1));
  goto $bb118;
$bb121:
  assume ($i105 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7565, 21} true;
  assume {:verifier.code 0} true;
  $p106 := $M.18;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7565, 7} true;
  assume {:verifier.code 0} true;
  call $i107 := atmtcp_c_send($p106, $p11);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7566, 28} true;
  assume {:verifier.code 0} true;
  $M.15 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7567, 5} true;
  assume {:verifier.code 0} true;
  goto $bb123;
$bb122:
  assume !(($i105 == 1));
  assume {:verifier.code 0} true;
  goto $bb123;
$bb123:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7570, 9} true;
  assume {:verifier.code 0} true;
  $i108 := $M.15;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7570, 30} true;
  assume {:verifier.code 0} true;
  $i109 := $eq.i32($i108, 2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7570, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i109} true;
  goto $bb124, $bb125;
$bb124:
  assume ($i109 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7571, 21} true;
  assume {:verifier.code 0} true;
  $p110 := $M.18;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7571, 7} true;
  assume {:verifier.code 0} true;
  call $i111 := atmtcp_c_send($p110, $p11);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7572, 28} true;
  assume {:verifier.code 0} true;
  $M.15 := 2;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7573, 5} true;
  assume {:verifier.code 0} true;
  goto $bb126;
$bb125:
  assume !(($i109 == 1));
  assume {:verifier.code 0} true;
  goto $bb126;
$bb126:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7576, 5} true;
  assume {:verifier.code 0} true;
  goto $bb127;
$bb127:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7598, 3} true;
  assume {:verifier.code 0} true;
  goto $bb136;
$bb128:
  assume ($i113 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7579, 22} true;
  assume {:verifier.code 0} true;
  $p114 := $M.18;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7579, 7} true;
  assume {:verifier.code 0} true;
  call atmtcp_c_close($p114);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7580, 28} true;
  assume {:verifier.code 0} true;
  $M.15 := 1;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7581, 5} true;
  assume {:verifier.code 0} true;
  goto $bb130;
$bb129:
  assume !(($i113 == 1));
  assume {:verifier.code 0} true;
  goto $bb130;
$bb130:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7584, 5} true;
  assume {:verifier.code 0} true;
  goto $bb127;
$bb131:
  assume ($i116 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7587, 7} true;
  assume {:verifier.code 0} true;
  call $i117 := ldv_open_2();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7588, 28} true;
  assume {:verifier.code 0} true;
  $M.15 := 2;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7589, 17} true;
  assume {:verifier.code 0} true;
  $i118 := $M.13;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7589, 25} true;
  assume {:verifier.code 0} true;
  $i119 := $add.i32($i118, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7589, 15} true;
  assume {:verifier.code 0} true;
  $M.13 := $i119;
  call {:cexpr "ref_cnt"} boogie_si_record_i32($i119);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7590, 5} true;
  assume {:verifier.code 0} true;
  goto $bb133;
$bb132:
  assume !(($i116 == 1));
  assume {:verifier.code 0} true;
  goto $bb133;
$bb133:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7593, 5} true;
  assume {:verifier.code 0} true;
  goto $bb127;
$bb134:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7595, 5} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7596, 5} true;
  assume {:verifier.code 0} true;
  goto $bb135;
$bb135:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7596, 5} true;
  assume {:verifier.code 0} true;
  goto $bb127;
$bb136:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7601, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb137:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7603, 3} true;
  assume {:verifier.code 0} true;
  call ldv_stop();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7604, 3} true;
  assume {:verifier.code 0} true;
  goto $bb138;
$bb138:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7604, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
}
const ldv_initialize: ref;
axiom (ldv_initialize == $sub.ref(0, 120665));
procedure  ldv_initialize();
const ldv_stop: ref;
axiom (ldv_stop == $sub.ref(0, 121697));
procedure  ldv_stop()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6278, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6280, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 6282, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atmtcp_exit: ref;
axiom (atmtcp_exit == $sub.ref(0, 122729));
procedure  atmtcp_exit()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7336, 3} true;
  assume {:verifier.code 0} true;
  call deregister_atm_ioctl(atmtcp_ioctl_ops);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7337, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const atmtcp_init: ref;
axiom (atmtcp_init == $sub.ref(0, 123761));
procedure  atmtcp_init()
  returns ($r: i32)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7327, 3} true;
  assume {:verifier.code 0} true;
  call register_atm_ioctl(atmtcp_ioctl_ops);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7328, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const ldv_open_2: ref;
axiom (ldv_open_2 == $sub.ref(0, 124793));
procedure  ldv_open_2()
  returns ($r: i32);
const ldv_check_final_state: ref;
axiom (ldv_check_final_state == $sub.ref(0, 125825));
procedure  ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7797, 7} true;
  assume {:verifier.code 0} true;
  $i0 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7797, 29} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7797, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7798, 5} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7799, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/linux-4.2-rc1.tar.xz-08_1a-drivers--atm--atmtcp.ko-entry_point_false-unreach-call.cil.out-0faBs0.c", 7802, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const register_atm_ioctl: ref;
axiom (register_atm_ioctl == $sub.ref(0, 126857));
procedure  register_atm_ioctl($p0: ref);
const deregister_atm_ioctl: ref;
axiom (deregister_atm_ioctl == $sub.ref(0, 127889));
procedure  deregister_atm_ioctl($p0: ref);
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 128921));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !9971, metadata !8006), !dbg !9972, !verifier.code !8008
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 34, 21} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 35, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 129953));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 130985));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 261, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_error: ref;
axiom (__VERIFIER_error == $sub.ref(0, 132017));
procedure  __VERIFIER_error()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 47, 3} true;
  assume {:verifier.code 1} true;
  assert false;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 51, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 133049));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 134081));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 135113));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 136145));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 137177));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 138209));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 139241));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 140273));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 141305));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 120, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
  // WARNING: %1 = call i32 @__SMACK_nondet_int(), !dbg !8005, !verifier.code !8006
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.i32($i0, 2147483647);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i2);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 122, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 142337));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 143369));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 144401));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __VERIFIER_nondet_unsigned_int: ref;
axiom (__VERIFIER_nondet_unsigned_int == $sub.ref(0, 145433));
procedure  __VERIFIER_nondet_unsigned_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 138, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
  // WARNING: %1 = call i32 @__SMACK_nondet_unsigned_int(), !dbg !8005, !verifier.code !8006
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 139, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $uge.i32($i0, 0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 139, 28} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 139, 33} true;
  assume {:verifier.code 1} true;
  $i3 := $ule.i32($i0, 4294967295);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 139, 28} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 139, 28} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i2);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 139, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 140, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 146465));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 147497));
procedure  __SMACK_nondet_long()
  returns ($r: i64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 148529));
procedure  __SMACK_nondet_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 149561));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 150593));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 151625));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 152657));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 153689));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 154721));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 155753));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 156785));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 157817));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 158849));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const __VERIFIER_nondet_uint: ref;
axiom (__VERIFIER_nondet_uint == $sub.ref(0, 159881));
procedure  __VERIFIER_nondet_uint()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 233, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_unsigned_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
  // WARNING: %1 = call i32 @__VERIFIER_nondet_unsigned_int(), !dbg !8005, !verifier.code !8006
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 234, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const calloc: ref;
axiom (calloc == $sub.ref(0, 160913));
procedure  calloc($i0: i64, $i1: i64)
  returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !10021, metadata !8006), !dbg !10022, !verifier.code !8008
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 248, 7} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 248, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 248, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 250, 3} true;
  assume {:verifier.code 0} true;
  $p4 := $0.ref;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 251, 22} true;
  assume {:verifier.code 0} true;
  $i5 := $mul.i64($i0, $i1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 251, 11} true;
  assume {:verifier.code 0} true;
  call $p6 := malloc($i5);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 252, 24} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.i64($i0, $i1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 252, 5} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p6, 0, $i7, $zext.i32.i64(1), (0 == 1));
  assume {:verifier.code 0} true;
  $p4 := $p6;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 254, 3} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 161945));
function {:inline} $bitcast.ref.ref(i: ref) returns (ref) {i}
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $min.bv128(i1: bv128, i2: bv128) returns (bv128) {if $slt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv96(i1: bv96, i2: bv96) returns (bv96) {if $slt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv88(i1: bv88, i2: bv88) returns (bv88) {if $slt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv64(i1: bv64, i2: bv64) returns (bv64) {if $slt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv56(i1: bv56, i2: bv56) returns (bv56) {if $slt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv48(i1: bv48, i2: bv48) returns (bv48) {if $slt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv40(i1: bv40, i2: bv40) returns (bv40) {if $slt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv32(i1: bv32, i2: bv32) returns (bv32) {if $slt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv24(i1: bv24, i2: bv24) returns (bv24) {if $slt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv16(i1: bv16, i2: bv16) returns (bv16) {if $slt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv8(i1: bv8, i2: bv8) returns (bv8) {if $slt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv128(i1: bv128, i2: bv128) returns (bv128) {if $sgt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv96(i1: bv96, i2: bv96) returns (bv96) {if $sgt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv88(i1: bv88, i2: bv88) returns (bv88) {if $sgt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv64(i1: bv64, i2: bv64) returns (bv64) {if $sgt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv56(i1: bv56, i2: bv56) returns (bv56) {if $sgt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv48(i1: bv48, i2: bv48) returns (bv48) {if $sgt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv40(i1: bv40, i2: bv40) returns (bv40) {if $sgt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv32(i1: bv32, i2: bv32) returns (bv32) {if $sgt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv24(i1: bv24, i2: bv24) returns (bv24) {if $sgt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv16(i1: bv16, i2: bv16) returns (bv16) {if $sgt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv8(i1: bv8, i2: bv8) returns (bv8) {if $sgt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ult.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ult.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ult.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ult.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ult.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ult.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ult.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ult.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ult.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ult.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ult.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ugt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ugt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ugt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ugt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ugt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ugt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ugt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ugt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ugt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ugt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ugt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then i1 else i2}
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) returns (bv128);
function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) returns (bv96);
function {:bvbuiltin "bvnot"} $not.bv88(i: bv88) returns (bv88);
function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) returns (bv64);
function {:bvbuiltin "bvnot"} $not.bv56(i: bv56) returns (bv56);
function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) returns (bv48);
function {:bvbuiltin "bvnot"} $not.bv40(i: bv40) returns (bv40);
function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) returns (bv32);
function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) returns (bv24);
function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) returns (bv16);
function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) returns (bv8);
function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) returns (bv1);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 == i2} function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 == i2} function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 == i2} function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 == i2} function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 == i2} function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 == i2} function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 == i2} function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 == i2} function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 == i2} function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 == i2} function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 == i2} function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 == i2} function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 != i2} function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 != i2} function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 != i2} function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 != i2} function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 != i2} function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 != i2} function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 != i2} function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 != i2} function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 != i2} function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 != i2} function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 != i2} function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 != i2} function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ule.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ule.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ule.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ule.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ule.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ule.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ule.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ule.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ule.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ule.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ule.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ule.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ult.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ult.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ult.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ult.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ult.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ult.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ult.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ult.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ult.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ult.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ult.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $uge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $uge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $uge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $uge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $uge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $uge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $uge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $uge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $uge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $uge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $uge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $uge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ugt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ugt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ugt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ugt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ugt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ugt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ugt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ugt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ugt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ugt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ugt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sle.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sle.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sle.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sle.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sle.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sle.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sle.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sle.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sle.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sle.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sle.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sle.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $slt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $slt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $slt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $slt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $slt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $slt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $slt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $slt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $slt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $slt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $slt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sgt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sgt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sgt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sgt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sgt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sgt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sgt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sgt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sgt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sgt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sgt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:inline} $trunc.bv128.bv96(i: bv128) returns (bv96) {i[96:0]}
function {:inline} $trunc.bv128.bv88(i: bv128) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv128.bv64(i: bv128) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv128.bv56(i: bv128) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv128.bv48(i: bv128) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv128.bv40(i: bv128) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv128.bv32(i: bv128) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv128.bv24(i: bv128) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv128.bv16(i: bv128) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv128.bv8(i: bv128) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv128.bv1(i: bv128) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv96.bv88(i: bv96) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv96.bv64(i: bv96) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv96.bv56(i: bv96) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv96.bv48(i: bv96) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv96.bv40(i: bv96) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv96.bv32(i: bv96) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv96.bv24(i: bv96) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv96.bv16(i: bv96) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv96.bv8(i: bv96) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv96.bv1(i: bv96) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv88.bv64(i: bv88) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv88.bv56(i: bv88) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv88.bv48(i: bv88) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv88.bv40(i: bv88) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv88.bv32(i: bv88) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv88.bv24(i: bv88) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv88.bv16(i: bv88) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv88.bv8(i: bv88) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv88.bv1(i: bv88) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv64.bv56(i: bv64) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv64.bv48(i: bv64) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv64.bv40(i: bv64) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv64.bv32(i: bv64) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv64.bv24(i: bv64) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv64.bv16(i: bv64) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv64.bv8(i: bv64) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv64.bv1(i: bv64) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv56.bv48(i: bv56) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv56.bv40(i: bv56) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv56.bv32(i: bv56) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv56.bv24(i: bv56) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv56.bv16(i: bv56) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv56.bv8(i: bv56) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv56.bv1(i: bv56) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv48.bv32(i: bv48) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv48.bv24(i: bv48) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv48.bv16(i: bv48) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv48.bv8(i: bv48) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv48.bv1(i: bv48) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv40.bv32(i: bv40) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv40.bv24(i: bv40) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv40.bv16(i: bv40) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv40.bv8(i: bv40) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv40.bv1(i: bv40) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv32.bv24(i: bv32) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv32.bv16(i: bv32) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv32.bv8(i: bv32) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv32.bv1(i: bv32) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv24.bv16(i: bv24) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv24.bv8(i: bv24) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv24.bv1(i: bv24) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv16.bv8(i: bv16) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv16.bv1(i: bv16) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv8.bv1(i: bv8) returns (bv1) {i[1:0]}
function {:inline} $zext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 1bv8}
function {:inline} $zext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 1bv16}
function {:inline} $zext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 1bv24}
function {:inline} $zext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 1bv32}
function {:inline} $zext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1bv40}
function {:inline} $zext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 1bv48}
function {:inline} $zext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 1bv56}
function {:inline} $zext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 1bv64}
function {:inline} $zext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 1bv88}
function {:inline} $zext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 1bv96}
function {:inline} $zext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 1bv128}
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $sext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 255bv8}
function {:inline} $sext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 65535bv16}
function {:inline} $sext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 16777215bv24}
function {:inline} $sext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 4294967295bv32}
function {:inline} $sext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1099511627775bv40}
function {:inline} $sext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 281474976710655bv48}
function {:inline} $sext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 72057594037927935bv56}
function {:inline} $sext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 18446744073709551615bv64}
function {:inline} $sext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88}
function {:inline} $sext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96}
function {:inline} $sext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128}
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) {i1 + i2}
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) {i1 + i2}
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) {i1 + i2}
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) {i1 + i2}
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) {i1 + i2}
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) {i1 + i2}
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) {i1 + i2}
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) {i1 + i2}
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) {i1 + i2}
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) {i1 + i2}
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) {i1 + i2}
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) {i1 + i2}
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) {i1 - i2}
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) {i1 - i2}
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) {i1 - i2}
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) {i1 - i2}
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) {i1 - i2}
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) {i1 - i2}
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) {i1 - i2}
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) {i1 - i2}
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) {i1 - i2}
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) {i1 - i2}
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) {i1 - i2}
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) {i1 - i2}
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) {i1 * i2}
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) {i1 * i2}
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) {i1 * i2}
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) {i1 * i2}
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) {i1 * i2}
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) {i1 * i2}
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) {i1 * i2}
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) {i1 * i2}
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) {i1 * i2}
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) {i1 * i2}
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) {i1 * i2}
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) {i1 * i2}
function {:builtin "div"} $div(i1: int, i2: int) returns (int);
function {:builtin "mod"} $mod(i1: int, i2: int) returns (int);
function {:builtin "rem"} $rem(i1: int, i2: int) returns (int);
function {:inline} $min(i1: int, i2: int) returns (int) {if i1 < i2 then i1 else i2}
function {:inline} $max(i1: int, i2: int) returns (int) {if i1 > i2 then i1 else i2}
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $not.i128(i: i128) returns (i128);
function $not.i96(i: i96) returns (i96);
function $not.i88(i: i88) returns (i88);
function $not.i64(i: i64) returns (i64);
function $not.i56(i: i56) returns (i56);
function $not.i48(i: i48) returns (i48);
function $not.i40(i: i40) returns (i40);
function $not.i32(i: i32) returns (i32);
function $not.i24(i: i24) returns (i24);
function $not.i16(i: i16) returns (i16);
function $not.i8(i: i8) returns (i8);
function $not.i1(i: i1) returns (i1);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) {i1 == i2} function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) {i1 == i2} function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) {i1 == i2} function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) {i1 == i2} function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) {i1 == i2} function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) {i1 == i2} function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) {i1 == i2} function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) {i1 == i2} function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) {i1 == i2} function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) {i1 == i2} function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) {i1 == i2} function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) {i1 == i2} function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) {i1 != i2} function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) {i1 != i2} function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) {i1 != i2} function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) {i1 != i2} function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) {i1 != i2} function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) {i1 != i2} function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) {i1 != i2} function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) {i1 != i2} function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) {i1 != i2} function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) {i1 != i2} function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) {i1 != i2} function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) {i1 != i2} function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
axiom $and.i1(0,0) == 0;
axiom $and.i1(0,1) == 0;
axiom $and.i1(1,0) == 0;
axiom $and.i1(1,1) == 1;
axiom $or.i1(0,0) == 0;
axiom $or.i1(0,1) == 1;
axiom $or.i1(1,0) == 1;
axiom $or.i1(1,1) == 1;
axiom $xor.i1(0,0) == 0;
axiom $xor.i1(0,1) == 1;
axiom $xor.i1(1,0) == 1;
axiom $xor.i1(1,1) == 0;
axiom($and.i32(32, 16) == 0);
function {:inline} $trunc.i128.i96(i: i128) returns (i96) {i}
function {:inline} $trunc.i128.i88(i: i128) returns (i88) {i}
function {:inline} $trunc.i128.i64(i: i128) returns (i64) {i}
function {:inline} $trunc.i128.i56(i: i128) returns (i56) {i}
function {:inline} $trunc.i128.i48(i: i128) returns (i48) {i}
function {:inline} $trunc.i128.i40(i: i128) returns (i40) {i}
function {:inline} $trunc.i128.i32(i: i128) returns (i32) {i}
function {:inline} $trunc.i128.i24(i: i128) returns (i24) {i}
function {:inline} $trunc.i128.i16(i: i128) returns (i16) {i}
function {:inline} $trunc.i128.i8(i: i128) returns (i8) {i}
function {:inline} $trunc.i128.i1(i: i128) returns (i1) {i}
function {:inline} $trunc.i96.i64(i: i96) returns (i64) {i}
function {:inline} $trunc.i96.i88(i: i96) returns (i88) {i}
function {:inline} $trunc.i96.i56(i: i96) returns (i56) {i}
function {:inline} $trunc.i96.i48(i: i96) returns (i48) {i}
function {:inline} $trunc.i96.i40(i: i96) returns (i40) {i}
function {:inline} $trunc.i96.i32(i: i96) returns (i32) {i}
function {:inline} $trunc.i96.i24(i: i96) returns (i24) {i}
function {:inline} $trunc.i96.i16(i: i96) returns (i16) {i}
function {:inline} $trunc.i96.i8(i: i96) returns (i8) {i}
function {:inline} $trunc.i96.i1(i: i96) returns (i1) {i}
function {:inline} $trunc.i88.i64(i: i88) returns (i64) {i}
function {:inline} $trunc.i88.i88(i: i88) returns (i88) {i}
function {:inline} $trunc.i88.i56(i: i88) returns (i56) {i}
function {:inline} $trunc.i88.i48(i: i88) returns (i48) {i}
function {:inline} $trunc.i88.i40(i: i88) returns (i40) {i}
function {:inline} $trunc.i88.i32(i: i88) returns (i32) {i}
function {:inline} $trunc.i88.i24(i: i88) returns (i24) {i}
function {:inline} $trunc.i88.i16(i: i88) returns (i16) {i}
function {:inline} $trunc.i88.i8(i: i88) returns (i8) {i}
function {:inline} $trunc.i88.i1(i: i88) returns (i1) {i}
function {:inline} $trunc.i64.i56(i: i64) returns (i56) {i}
function {:inline} $trunc.i64.i48(i: i64) returns (i48) {i}
function {:inline} $trunc.i64.i40(i: i64) returns (i40) {i}
function {:inline} $trunc.i64.i32(i: i64) returns (i32) {i}
function {:inline} $trunc.i64.i24(i: i64) returns (i24) {i}
function {:inline} $trunc.i64.i16(i: i64) returns (i16) {i}
function {:inline} $trunc.i64.i8(i: i64) returns (i8) {i}
function {:inline} $trunc.i64.i1(i: i64) returns (i1) {i}
function {:inline} $trunc.i56.i48(i: i56) returns (i48) {i}
function {:inline} $trunc.i56.i40(i: i56) returns (i40) {i}
function {:inline} $trunc.i56.i32(i: i56) returns (i32) {i}
function {:inline} $trunc.i56.i24(i: i56) returns (i24) {i}
function {:inline} $trunc.i56.i16(i: i56) returns (i16) {i}
function {:inline} $trunc.i56.i8(i: i56) returns (i8) {i}
function {:inline} $trunc.i56.i1(i: i56) returns (i1) {i}
function {:inline} $trunc.i48.i40(i: i48) returns (i40) {i}
function {:inline} $trunc.i48.i32(i: i48) returns (i32) {i}
function {:inline} $trunc.i48.i24(i: i48) returns (i24) {i}
function {:inline} $trunc.i48.i16(i: i48) returns (i16) {i}
function {:inline} $trunc.i48.i8(i: i48) returns (i8) {i}
function {:inline} $trunc.i48.i1(i: i48) returns (i1) {i}
function {:inline} $trunc.i40.i32(i: i40) returns (i32) {i}
function {:inline} $trunc.i40.i24(i: i40) returns (i24) {i}
function {:inline} $trunc.i40.i16(i: i40) returns (i16) {i}
function {:inline} $trunc.i40.i8(i: i40) returns (i8) {i}
function {:inline} $trunc.i40.i1(i: i40) returns (i1) {i}
function {:inline} $trunc.i32.i24(i: i32) returns (i24) {i}
function {:inline} $trunc.i32.i16(i: i32) returns (i16) {i}
function {:inline} $trunc.i32.i8(i: i32) returns (i8) {i}
function {:inline} $trunc.i32.i1(i: i32) returns (i1) {i}
function {:inline} $trunc.i24.i16(i: i24) returns (i16) {i}
function {:inline} $trunc.i24.i8(i: i24) returns (i8) {i}
function {:inline} $trunc.i24.i1(i: i24) returns (i1) {i}
function {:inline} $trunc.i16.i8(i: i16) returns (i8) {i}
function {:inline} $trunc.i16.i1(i: i16) returns (i1) {i}
function {:inline} $trunc.i8.i1(i: i8) returns (i1) {i}
function {:inline} $zext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $zext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $zext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $zext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $zext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $zext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $zext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $zext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $zext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $zext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $zext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $zext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $zext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $zext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $zext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $zext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $zext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $zext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $zext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $zext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $zext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $zext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $zext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $zext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $zext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $zext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $zext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $zext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $zext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $zext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $zext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $zext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $zext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $zext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $zext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $zext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $zext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $zext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $zext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $zext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $zext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $zext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $zext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $zext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $zext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $zext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $zext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $zext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $zext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $zext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $zext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $zext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $zext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $zext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $zext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $zext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $zext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $zext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $zext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $zext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $zext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $zext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $zext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $zext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $zext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $zext.i96.i128(i: i96) returns (i128) {i}
function {:inline} $sext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $sext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $sext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $sext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $sext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $sext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $sext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $sext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $sext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $sext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $sext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $sext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $sext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $sext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $sext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $sext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $sext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $sext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $sext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $sext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $sext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $sext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $sext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $sext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $sext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $sext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $sext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $sext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $sext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $sext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $sext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $sext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $sext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $sext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $sext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $sext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $sext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $sext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $sext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $sext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $sext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $sext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $sext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $sext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $sext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $sext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $sext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $sext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $sext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $sext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $sext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $sext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $sext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $sext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $sext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $sext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $sext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $sext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $sext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $sext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $sext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $sext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $sext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $sext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $sext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $sext.i96.i128(i: i96) returns (i128) {i}
function $fp(ipart:int, fpart:int, epart:int) returns (float);
function $fadd.float(f1:float, f2:float) returns (float);
function $fsub.float(f1:float, f2:float) returns (float);
function $fmul.float(f1:float, f2:float) returns (float);
function $fdiv.float(f1:float, f2:float) returns (float);
function $frem.float(f1:float, f2:float) returns (float);
function $ffalse.float(f1:float, f2:float) returns (i1);
function $ftrue.float(f1:float, f2:float) returns (i1);
function {:inline} $foeq.float(f1:float, f2:float) returns (i1) { if $foeq.bool(f1,f2) then 1 else 0 }
function $foeq.bool(f1:float, f2:float) returns (bool);
function $foge.float(f1:float, f2:float) returns (i1);
function $fogt.float(f1:float, f2:float) returns (i1);
function $fole.float(f1:float, f2:float) returns (i1);
function $folt.float(f1:float, f2:float) returns (i1);
function $fone.float(f1:float, f2:float) returns (i1);
function $ford.float(f1:float, f2:float) returns (i1);
function $fueq.float(f1:float, f2:float) returns (i1);
function $fuge.float(f1:float, f2:float) returns (i1);
function $fugt.float(f1:float, f2:float) returns (i1);
function $fule.float(f1:float, f2:float) returns (i1);
function $fult.float(f1:float, f2:float) returns (i1);
function $fune.float(f1:float, f2:float) returns (i1);
function $funo.float(f1:float, f2:float) returns (i1);
function $fp2si.float.i128(f:float) returns (i128);
function $fp2ui.float.i128(f:float) returns (i128);
function $si2fp.i128.float(i:i128) returns (float);
function $ui2fp.i128.float(i:i128) returns (float);
function $fp2si.float.i96(f:float) returns (i96);
function $fp2ui.float.i96(f:float) returns (i96);
function $si2fp.i96.float(i:i96) returns (float);
function $ui2fp.i96.float(i:i96) returns (float);
function $fp2si.float.i88(f:float) returns (i88);
function $fp2ui.float.i88(f:float) returns (i88);
function $si2fp.i88.float(i:i88) returns (float);
function $ui2fp.i88.float(i:i88) returns (float);
function $fp2si.float.i64(f:float) returns (i64);
function $fp2ui.float.i64(f:float) returns (i64);
function $si2fp.i64.float(i:i64) returns (float);
function $ui2fp.i64.float(i:i64) returns (float);
function $fp2si.float.i56(f:float) returns (i56);
function $fp2ui.float.i56(f:float) returns (i56);
function $si2fp.i56.float(i:i56) returns (float);
function $ui2fp.i56.float(i:i56) returns (float);
function $fp2si.float.i48(f:float) returns (i48);
function $fp2ui.float.i48(f:float) returns (i48);
function $si2fp.i48.float(i:i48) returns (float);
function $ui2fp.i48.float(i:i48) returns (float);
function $fp2si.float.i40(f:float) returns (i40);
function $fp2ui.float.i40(f:float) returns (i40);
function $si2fp.i40.float(i:i40) returns (float);
function $ui2fp.i40.float(i:i40) returns (float);
function $fp2si.float.i32(f:float) returns (i32);
function $fp2ui.float.i32(f:float) returns (i32);
function $si2fp.i32.float(i:i32) returns (float);
function $ui2fp.i32.float(i:i32) returns (float);
function $fp2si.float.i24(f:float) returns (i24);
function $fp2ui.float.i24(f:float) returns (i24);
function $si2fp.i24.float(i:i24) returns (float);
function $ui2fp.i24.float(i:i24) returns (float);
function $fp2si.float.i16(f:float) returns (i16);
function $fp2ui.float.i16(f:float) returns (i16);
function $si2fp.i16.float(i:i16) returns (float);
function $ui2fp.i16.float(i:i16) returns (float);
function $fp2si.float.i8(f:float) returns (i8);
function $fp2ui.float.i8(f:float) returns (i8);
function $si2fp.i8.float(i:i8) returns (float);
function $ui2fp.i8.float(i:i8) returns (float);
function $fptrunc.float.float(f:float) returns (float);
function $fpext.float.float(f:float) returns (float);
function $fp2si.float.bv128(f:float) returns (bv128);
function $fp2ui.float.bv128(f:float) returns (bv128);
function $si2fp.bv128.float(i:bv128) returns (float);
function $ui2fp.bv128.float(i:bv128) returns (float);
function $fp2si.float.bv96(f:float) returns (bv96);
function $fp2ui.float.bv96(f:float) returns (bv96);
function $si2fp.bv96.float(i:bv96) returns (float);
function $ui2fp.bv96.float(i:bv96) returns (float);
function $fp2si.float.bv88(f:float) returns (bv88);
function $fp2ui.float.bv88(f:float) returns (bv88);
function $si2fp.bv88.float(i:bv88) returns (float);
function $ui2fp.bv88.float(i:bv88) returns (float);
function $fp2si.float.bv64(f:float) returns (bv64);
function $fp2ui.float.bv64(f:float) returns (bv64);
function $si2fp.bv64.float(i:bv64) returns (float);
function $ui2fp.bv64.float(i:bv64) returns (float);
function $fp2si.float.bv56(f:float) returns (bv56);
function $fp2ui.float.bv56(f:float) returns (bv56);
function $si2fp.bv56.float(i:bv56) returns (float);
function $ui2fp.bv56.float(i:bv56) returns (float);
function $fp2si.float.bv48(f:float) returns (bv48);
function $fp2ui.float.bv48(f:float) returns (bv48);
function $si2fp.bv48.float(i:bv48) returns (float);
function $ui2fp.bv48.float(i:bv48) returns (float);
function $fp2si.float.bv40(f:float) returns (bv40);
function $fp2ui.float.bv40(f:float) returns (bv40);
function $si2fp.bv40.float(i:bv40) returns (float);
function $ui2fp.bv40.float(i:bv40) returns (float);
function $fp2si.float.bv32(f:float) returns (bv32);
function $fp2ui.float.bv32(f:float) returns (bv32);
function $si2fp.bv32.float(i:bv32) returns (float);
function $ui2fp.bv32.float(i:bv32) returns (float);
function $fp2si.float.bv24(f:float) returns (bv24);
function $fp2ui.float.bv24(f:float) returns (bv24);
function $si2fp.bv24.float(i:bv24) returns (float);
function $ui2fp.bv24.float(i:bv24) returns (float);
function $fp2si.float.bv16(f:float) returns (bv16);
function $fp2ui.float.bv16(f:float) returns (bv16);
function $si2fp.bv16.float(i:bv16) returns (float);
function $ui2fp.bv16.float(i:bv16) returns (float);
function $fp2si.float.bv8(f:float) returns (bv8);
function $fp2ui.float.bv8(f:float) returns (bv8);
function $si2fp.bv8.float(i:bv8) returns (float);
function $ui2fp.bv8.float(i:bv8) returns (float);
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;
function {:inline} $isExternal(p: ref) returns (bool) {$slt.ref.bool(p,$EXTERNS_BOTTOM)}
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) { M[p] }
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) { M[p] }
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) { M[p] }
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) { M[p] }
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) { M[p] }
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) { M[p] }
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) { M[p] }
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) { M[p] }
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) { M[p] }
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) { M[p] }
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128){ $load.bytes.bv64(M, $add.ref(p, $8.ref)) ++ $load.bytes.bv64(M, p) }
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96){ $load.bytes.bv64(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88){ $load.bytes.bv56(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64){ $load.bytes.bv32(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56){ $load.bytes.bv24(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48){ $load.bytes.bv16(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40){ M[$add.ref(p, $4.ref)] ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32){ M[$add.ref(p, $3.ref)] ++ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24){ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16){ M[$add.ref(p, $1.ref)] ++ M[p] }
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, v: i128) returns ([ref] i128) { M[p := v] }
function {:inline} $store.i96(M: [ref] i96, p: ref, v: i96) returns ([ref] i96) { M[p := v] }
function {:inline} $store.i88(M: [ref] i88, p: ref, v: i88) returns ([ref] i88) { M[p := v] }
function {:inline} $store.i64(M: [ref] i64, p: ref, v: i64) returns ([ref] i64) { M[p := v] }
function {:inline} $store.i56(M: [ref] i56, p: ref, v: i56) returns ([ref] i56) { M[p := v] }
function {:inline} $store.i48(M: [ref] i48, p: ref, v: i48) returns ([ref] i48) { M[p := v] }
function {:inline} $store.i40(M: [ref] i40, p: ref, v: i40) returns ([ref] i40) { M[p := v] }
function {:inline} $store.i32(M: [ref] i32, p: ref, v: i32) returns ([ref] i32) { M[p := v] }
function {:inline} $store.i24(M: [ref] i24, p: ref, v: i24) returns ([ref] i24) { M[p := v] }
function {:inline} $store.i16(M: [ref] i16, p: ref, v: i16) returns ([ref] i16) { M[p := v] }
function {:inline} $store.i8(M: [ref] i8, p: ref, v: i8) returns ([ref] i8) { M[p := v] }
function {:inline} $store.bv128(M: [ref] bv128, p: ref, v: bv128) returns ([ref] bv128) { M[p := v] }
function {:inline} $store.bv96(M: [ref] bv96, p: ref, v: bv96) returns ([ref] bv96) { M[p := v] }
function {:inline} $store.bv88(M: [ref] bv88, p: ref, v: bv88) returns ([ref] bv88) { M[p := v] }
function {:inline} $store.bv64(M: [ref] bv64, p: ref, v: bv64) returns ([ref] bv64) { M[p := v] }
function {:inline} $store.bv56(M: [ref] bv56, p: ref, v: bv56) returns ([ref] bv56) { M[p := v] }
function {:inline} $store.bv48(M: [ref] bv48, p: ref, v: bv48) returns ([ref] bv48) { M[p := v] }
function {:inline} $store.bv40(M: [ref] bv40, p: ref, v: bv40) returns ([ref] bv40) { M[p := v] }
function {:inline} $store.bv32(M: [ref] bv32, p: ref, v: bv32) returns ([ref] bv32) { M[p := v] }
function {:inline} $store.bv24(M: [ref] bv24, p: ref, v: bv24) returns ([ref] bv24) { M[p := v] }
function {:inline} $store.bv16(M: [ref] bv16, p: ref, v: bv16) returns ([ref] bv16) { M[p := v] }
function {:inline} $store.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) { M[p := v] }
function {:inline} $store.bytes.bv128(M:[ref]bv8, p:ref, v:bv128) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]][$add.ref(p, $11.ref) := v[104:96]][$add.ref(p, $12.ref) := v[112:104]][$add.ref(p, $13.ref) := v[120:112]][$add.ref(p, $14.ref) := v[128:120]]}
function {:inline} $store.bytes.bv96(M:[ref]bv8, p:ref, v:bv96) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]]}
function {:inline} $store.bytes.bv88(M:[ref]bv8, p:ref, v:bv88) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]]}
function {:inline} $store.bytes.bv64(M:[ref]bv8, p:ref, v:bv64) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]]}
function {:inline} $store.bytes.bv56(M:[ref]bv8, p:ref, v:bv56) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]]}
function {:inline} $store.bytes.bv48(M:[ref]bv8, p:ref, v:bv48) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]]}
function {:inline} $store.bytes.bv40(M:[ref]bv8, p:ref, v:bv40) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]]}
function {:inline} $store.bytes.bv32(M:[ref]bv8, p:ref, v:bv32) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]]}
function {:inline} $store.bytes.bv24(M:[ref]bv8, p:ref, v:bv24) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]]}
function {:inline} $store.bytes.bv16(M:[ref]bv8, p:ref, v:bv16) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]]}
function {:inline} $store.bytes.bv8(M:[ref]bv8, p:ref, v:bv8) returns ([ref]bv8) {M[p := v]}
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, v: ref) returns ([ref] ref) { M[p := v] }
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, v: float) returns ([ref] float) { M[p := v] }
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
procedure  boogie_si_record_bool(i: bool);
procedure  boogie_si_record_i1(i: i1);
procedure  boogie_si_record_i8(i: i8);
procedure  boogie_si_record_i16(i: i16);
procedure  boogie_si_record_i24(i: i24);
procedure  boogie_si_record_i32(i: i32);
procedure  boogie_si_record_i40(i: i40);
procedure  boogie_si_record_i48(i: i48);
procedure  boogie_si_record_i56(i: i56);
procedure  boogie_si_record_i64(i: i64);
procedure  boogie_si_record_i88(i: i88);
procedure  boogie_si_record_i96(i: i96);
procedure  boogie_si_record_i128(i: i128);
procedure  boogie_si_record_bv1(i: bv1);
procedure  boogie_si_record_bv8(i: bv8);
procedure  boogie_si_record_bv16(i: bv16);
procedure  boogie_si_record_bv24(i: bv24);
procedure  boogie_si_record_bv32(i: bv32);
procedure  boogie_si_record_bv40(i: bv40);
procedure  boogie_si_record_bv48(i: bv48);
procedure  boogie_si_record_bv56(i: bv56);
procedure  boogie_si_record_bv64(i: bv64);
procedure  boogie_si_record_bv88(i: bv88);
procedure  boogie_si_record_bv96(i: bv96);
procedure  boogie_si_record_bv128(i: bv128);
procedure  boogie_si_record_ref(i: ref);
procedure  boogie_si_record_float(i: float);
var $exn: bool;
var $exnv: int;
function $extractvalue(p: int, i: int) returns (int);

procedure  $alloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 162977));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 164009));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1782, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1787, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 165041));
procedure  llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 166073));
procedure  __SMACK_static_init()
{
$bb0:
  $M.19 := 1;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
  $M.9 := $0.ref;
  $M.10 := $0.ref;
  $M.18 := $0.ref;
  $M.12 := 0;
  call {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
  $M.13 := 0;
  call {:cexpr "ref_cnt"} boogie_si_record_i32(0);
  $M.14 := 0;
  call {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
  $M.5 := 0;
  call {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
  $M.15 := 0;
  call {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
  $M.16 := 0;
  call {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
  $M.17 := 0;
  call {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
  $M.6 := 1;
  call {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
  $M.0 := $store.ref($M.0, atmtcp_ioctl_ops, __this_module);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_ioctl_ops, 8), atmtcp_ioctl);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_ioctl_ops, 16), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_ioctl_ops, 16), 8), $0.ref);
  $M.0 := $store.ref($M.0, atmtcp_c_dev_ops, $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_c_dev_ops, 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_c_dev_ops, 16), atmtcp_c_close);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_c_dev_ops, 24), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_c_dev_ops, 32), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_c_dev_ops, 40), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_c_dev_ops, 48), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_c_dev_ops, 56), atmtcp_c_send);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_c_dev_ops, 64), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_c_dev_ops, 72), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_c_dev_ops, 80), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_c_dev_ops, 88), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_c_dev_ops, 96), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_c_dev_ops, 104), $0.ref);
  $M.0 := $store.ref($M.0, atmtcp_control_dev, atmtcp_c_dev_ops);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_control_dev, 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_control_dev, 16), .str.1);
  $M.0 := $store.i32($M.0, $add.ref(atmtcp_control_dev, 24), 999);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_control_dev, 32), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_control_dev, 40), $0.ref);
  $M.0 := $store.i64($M.0, $add.ref(atmtcp_control_dev, 48), 0);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_control_dev, 56), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 56), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_control_dev, 72), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 72), 8), $0.ref);
  $M.0 := $store.i8($M.0, $add.ref(atmtcp_control_dev, 88), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(atmtcp_control_dev, 88), 1), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(atmtcp_control_dev, 88), 2), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(atmtcp_control_dev, 88), 3), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(atmtcp_control_dev, 88), 4), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(atmtcp_control_dev, 88), 5), 0);
  $M.0 := $store.i8($M.0, $add.ref(atmtcp_control_dev, 94), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(atmtcp_control_dev, 94), 1), 0);
  $M.0 := $store.i32($M.0, $add.ref(atmtcp_control_dev, 96), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(atmtcp_control_dev, 96), 4), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(atmtcp_control_dev, 96), 8), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(atmtcp_control_dev, 96), 12), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(atmtcp_control_dev, 96), 16), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(atmtcp_control_dev, 96), 20), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 96), 20), 4), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 96), 20), 8), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 96), 20), 12), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 96), 20), 16), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(atmtcp_control_dev, 96), 40), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 96), 40), 4), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 96), 40), 8), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 96), 40), 12), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 96), 40), 16), 0);
  $M.0 := $store.i8($M.0, $add.ref(atmtcp_control_dev, 156), 0);
  $M.0 := $store.i32($M.0, $add.ref(atmtcp_control_dev, 160), 0);
  $M.0 := $store.i32($M.0, $add.ref(atmtcp_control_dev, 164), 0);
  $M.0 := $store.i32($M.0, $add.ref(atmtcp_control_dev, 168), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(atmtcp_control_dev, 168), 4), $sub.i32(0, 559067475));
  $M.0 := $store.i32($M.0, $add.ref($add.ref(atmtcp_control_dev, 168), 8), $sub.i32(0, 1));
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 168), 16), $i2p.i64.ref($sub.i64(0, 1)));
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 168), 24), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 168), 24), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 168), 24), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 168), 24), 24), .str.2);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 168), 24), 32), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 168), 24), 40), 0);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_control_dev, 240), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_control_dev, 248), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_control_dev, 256), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 16), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 24), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 32), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 40), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 48), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 56), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 24), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 32), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 32), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 32), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 32), 24), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 32), 32), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 32), 40), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 8), $0.ref);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 16), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 24), $0.ref);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 32), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 40), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 44), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 48), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 56), $0.ref);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 64), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 64), 1), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 64), 2), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 64), 3), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 64), 4), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 64), 5), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 64), 6), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 64), 7), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 64), 8), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 64), 9), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 64), 10), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 64), 11), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 64), 12), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 64), 13), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 64), 14), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 64), 15), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 80), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 80), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 80), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 80), 24), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 80), 32), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 80), 80), 40), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 208), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 64), 216), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 16), 288), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 312), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 320), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 328), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 8), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 8), 4), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 8), 8), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 8), 16), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 8), 24), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 8), 24), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 8), 24), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 8), 24), 24), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 8), 24), 32), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 8), 24), 40), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 80), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 80), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 96), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 104), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 112), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 112), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 112), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 112), 24), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 112), 32), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 328), 112), 40), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 488), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 496), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 504), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 512), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 520), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 4), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 5), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 6), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 7), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 8), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 9), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 10), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 11), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 16), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 16), 4), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 16), 8), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 16), 16), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 16), 24), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 16), 24), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 16), 24), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 16), 24), 24), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 16), 24), 32), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 16), 24), 40), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 88), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 88), 8), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 104), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 104), 8), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 104), 8), 4), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 104), 8), 8), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 104), 8), 16), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 104), 8), 24), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 104), 8), 24), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 104), 8), 24), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 104), 8), 24), 24), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 104), 8), 24), 32), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 104), 8), 24), 40), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 104), 8), 72), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 104), 8), 72), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 200), $0.ref);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 208), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 209), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 8), $0.ref);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 16), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 24), $0.ref);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 32), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 40), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 44), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 48), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 56), $0.ref);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 64), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 64), 1), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 64), 2), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 64), 3), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 64), 4), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 64), 5), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 64), 6), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 64), 7), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 64), 8), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 64), 9), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 64), 10), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 64), 11), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 64), 12), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 64), 13), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 64), 14), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 64), 15), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 80), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 80), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 80), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 80), 24), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 80), 32), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 216), 80), 40), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 344), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 352), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 352), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 352), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 352), 24), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 352), 32), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 352), 32), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 352), 32), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 352), 32), 24), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 352), 32), 32), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 352), 32), 40), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 432), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 432), 4), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 432), 8), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 432), 16), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 432), 24), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 432), 24), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 432), 24), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 432), 24), 24), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 432), 24), 32), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 432), 24), 40), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 432), 72), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 432), 72), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 520), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 528), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 532), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 536), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 537), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 540), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 544), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 548), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 552), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 560), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 568), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 576), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 584), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 592), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 600), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 520), 608), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1136), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1144), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1152), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1160), $0.ref);
  $M.0 := $store.i64($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1168), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1176), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1184), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1192), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 1192), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1208), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1216), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1224), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 1224), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1240), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1248), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1256), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1260), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1264), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 1264), 4), 0);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 1264), 8), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 1264), 16), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 1264), 24), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 1264), 24), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 1264), 24), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 1264), 24), 24), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 1264), 24), 32), 0);
  $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 1264), 24), 40), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1336), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 1336), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1352), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 1352), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 1352), 8), 8), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(atmtcp_control_dev, 256), 1352), 24), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1384), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1392), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1400), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1408), $0.ref);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1416), 0);
  $M.0 := $store.i8($M.0, $add.ref($add.ref(atmtcp_control_dev, 256), 1417), 0);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_control_dev, 1680), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(atmtcp_control_dev, 1680), 8), $0.ref);
  $M.0 := $store.ref($M.0, atmtcp_v_dev_ops, atmtcp_v_dev_close);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_v_dev_ops, 8), atmtcp_v_open);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_v_dev_ops, 16), atmtcp_v_close);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_v_dev_ops, 24), atmtcp_v_ioctl);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_v_dev_ops, 32), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_v_dev_ops, 40), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_v_dev_ops, 48), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_v_dev_ops, 56), atmtcp_v_send);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_v_dev_ops, 64), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_v_dev_ops, 72), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_v_dev_ops, 80), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_v_dev_ops, 88), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_v_dev_ops, 96), atmtcp_v_proc);
  $M.0 := $store.ref($M.0, $add.ref(atmtcp_v_dev_ops, 104), __this_module);
  $M.20 := $store.i8($M.20, .str.4, 101);
  $M.20 := $store.i8($M.20, $add.ref(.str.4, 1), 112);
  $M.20 := $store.i8($M.20, $add.ref(.str.4, 2), 104);
  $M.20 := $store.i8($M.20, $add.ref(.str.4, 3), 101);
  $M.20 := $store.i8($M.20, $add.ref(.str.4, 4), 109);
  $M.20 := $store.i8($M.20, $add.ref(.str.4, 5), 101);
  $M.20 := $store.i8($M.20, $add.ref(.str.4, 6), 114);
  $M.20 := $store.i8($M.20, $add.ref(.str.4, 7), 97);
  $M.20 := $store.i8($M.20, $add.ref(.str.4, 8), 108);
  $M.20 := $store.i8($M.20, $add.ref(.str.4, 9), 10);
  $M.20 := $store.i8($M.20, $add.ref(.str.4, 10), 0);
  $M.21 := $store.i8($M.21, .str.6, 0);
  $M.21 := $store.i8($M.21, .str.7, 100);
  $M.21 := $store.i8($M.21, $add.ref(.str.7, 1), 105);
  $M.21 := $store.i8($M.21, $add.ref(.str.7, 2), 115);
  $M.21 := $store.i8($M.21, $add.ref(.str.7, 3), 0);
  $M.22 := $store.i8($M.22, .str.5, 112);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 1), 101);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 2), 114);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 3), 115);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 4), 105);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 5), 115);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 6), 116);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 7), 101);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 8), 110);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 9), 116);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 10), 44);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 11), 32);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 12), 37);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 13), 115);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 14), 99);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 15), 111);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 16), 110);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 17), 110);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 18), 101);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 19), 99);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 20), 116);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 21), 101);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 22), 100);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 23), 10);
  $M.22 := $store.i8($M.22, $add.ref(.str.5, 24), 0);
  $M.0 := $store.i8($M.0, .str.1, 97);
  $M.0 := $store.i8($M.0, $add.ref(.str.1, 1), 116);
  $M.0 := $store.i8($M.0, $add.ref(.str.1, 2), 109);
  $M.0 := $store.i8($M.0, $add.ref(.str.1, 3), 116);
  $M.0 := $store.i8($M.0, $add.ref(.str.1, 4), 99);
  $M.0 := $store.i8($M.0, $add.ref(.str.1, 5), 112);
  $M.0 := $store.i8($M.0, $add.ref(.str.1, 6), 0);
  $M.0 := $store.i8($M.0, .str.2, 97);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 1), 116);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 2), 109);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 3), 116);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 4), 99);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 5), 112);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 6), 95);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 7), 99);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 8), 111);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 9), 110);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 10), 116);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 11), 114);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 12), 111);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 13), 108);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 14), 95);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 15), 100);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 16), 101);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 17), 118);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 18), 46);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 19), 108);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 20), 111);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 21), 99);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 22), 107);
  $M.0 := $store.i8($M.0, $add.ref(.str.2, 23), 0);
  $exn := false;
  return;
}
const devirtbounce: ref;
axiom (devirtbounce == $sub.ref(0, 167105));
procedure  devirtbounce(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.1: ref;
axiom (devirtbounce.1 == $sub.ref(0, 168137));
procedure  devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.2: ref;
axiom (devirtbounce.2 == $sub.ref(0, 169169));
procedure  devirtbounce.2(funcPtr: ref, arg: i32)
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i4 := $eq.ref(__builtinx_memcpy, $p0);
  assume {:branchcond $i4} true;
  goto $bb3, $bb5;
$bb2:
  assume ($i3 == 1);
  call $i1 := __builtinx_object_size();
  $r := $i1;
  $exn := false;
  return;
$bb3:
  assume ($i4 == 1);
  call $i2 := __builtinx_memcpy();
  $r := $i2;
  $exn := false;
  return;
$bb4:
  assume !(($i3 == 1));
  assume false;
$bb5:
  assume !(($i4 == 1));
  $i3 := $eq.ref(__builtinx_object_size, $p0);
  assume {:branchcond $i3} true;
  goto $bb2, $bb4;
}
const devirtbounce.3: ref;
axiom (devirtbounce.3 == $sub.ref(0, 170201));
procedure  devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.4: ref;
axiom (devirtbounce.4 == $sub.ref(0, 171233));
procedure  devirtbounce.4(funcPtr: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.5: ref;
axiom (devirtbounce.5 == $sub.ref(0, 172265));
procedure  devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
  returns ($r: i64)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.6: ref;
axiom (devirtbounce.6 == $sub.ref(0, 173297));
procedure  devirtbounce.6(funcPtr: ref, arg: ref)
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.7: ref;
axiom (devirtbounce.7 == $sub.ref(0, 174329));
procedure  devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64)
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i4 := $eq.ref(__builtinx_memcpy, $p0);
  assume {:branchcond $i4} true;
  goto $bb3, $bb5;
$bb2:
  assume ($i3 == 1);
  call $i1 := __builtinx_object_size();
  $r := $i1;
  $exn := false;
  return;
$bb3:
  assume ($i4 == 1);
  call $i2 := __builtinx_memcpy();
  $r := $i2;
  $exn := false;
  return;
$bb4:
  assume !(($i3 == 1));
  assume false;
$bb5:
  assume !(($i4 == 1));
  $i3 := $eq.ref(__builtinx_object_size, $p0);
  assume {:branchcond $i3} true;
  goto $bb2, $bb4;
}
const devirtbounce.8: ref;
axiom (devirtbounce.8 == $sub.ref(0, 175361));
procedure  devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.9: ref;
axiom (devirtbounce.9 == $sub.ref(0, 176393));
procedure  devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.10: ref;
axiom (devirtbounce.10 == $sub.ref(0, 177425));
procedure  devirtbounce.10(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i5 := $eq.ref(atmtcp_c_close, $p0);
  assume {:branchcond $i5} true;
  goto $bb4, $bb7;
$bb2:
  assume ($i3 == 1);
  call atmtcp_v_dev_close(arg);
  $exn := false;
  return;
$bb3:
  assume ($i4 == 1);
  $p1 := $bitcast.ref.ref(arg);
  call atmtcp_v_close($p1);
  $exn := false;
  return;
$bb4:
  assume ($i5 == 1);
  $p2 := $bitcast.ref.ref(arg);
  call atmtcp_c_close($p2);
  $exn := false;
  return;
$bb5:
  assume !(($i3 == 1));
  assume false;
$bb6:
  assume !(($i4 == 1));
  $i3 := $eq.ref(atmtcp_v_dev_close, $p0);
  assume {:branchcond $i3} true;
  goto $bb2, $bb5;
$bb7:
  assume !(($i5 == 1));
  $i4 := $eq.ref(atmtcp_v_close, $p0);
  assume {:branchcond $i4} true;
  goto $bb3, $bb6;
}
const devirtbounce.11: ref;
axiom (devirtbounce.11 == $sub.ref(0, 178457));
procedure  devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
procedure  $memcpy.i8(M.dst: [ref] i8, M.src: [ref] i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src,dst),x)]);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M.dst[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M.dst[x]);
}

procedure  $memset.i8(M: [ref] i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == val);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M[x]);
}

procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
