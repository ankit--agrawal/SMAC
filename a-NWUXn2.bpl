// generated by SMACK version 1.9.0 for corral
// via /mnt/local/smack-project/smack/bin/smack -x=svcomp --time-limit 1800 /proj/SMACK/sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c --verifier-options  /bopt:boolControlVC /bopt:z3opt:SMT.MBQI=true /bopt:z3opt:SMT.MBQI.MAX_ITERATIONS=13660 /deepAsserts /di /noInitPruning /nonUniformUnfolding /staticInlining /trackAllVars /useArrayTheory --unroll 16

// Basic types
type i1 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type ref = i64;
type float = i32;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $2.ref: ref;
axiom ($2.ref == 2);
const $3.ref: ref;
axiom ($3.ref == 3);
const $4.ref: ref;
axiom ($4.ref == 4);
const $5.ref: ref;
axiom ($5.ref == 5);
const $6.ref: ref;
axiom ($6.ref == 6);
const $7.ref: ref;
axiom ($7.ref == 7);
const $8.ref: ref;
axiom ($8.ref == 8);
const $9.ref: ref;
axiom ($9.ref == 9);
const $10.ref: ref;
axiom ($10.ref == 10);
const $11.ref: ref;
axiom ($11.ref == 11);
const $12.ref: ref;
axiom ($12.ref == 12);
const $13.ref: ref;
axiom ($13.ref == 13);
const $14.ref: ref;
axiom ($14.ref == 14);
const $1024.ref: ref;
axiom ($1024.ref == 1024);

// Memory maps (9 regions)
var $M.0: i32;
var $M.1: [ref] i8;
var $M.2: i32;
var $M.3: [ref] ref;
var $M.4: [ref] i64;
var $M.5: [ref] i64;
var $M.6: [ref] ref;
var $M.7: [ref] ref;
var $M.8: [ref] ref;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 117340));
axiom ($EXTERNS_BOTTOM == $sub.ref(0, 32784));
axiom ($MALLOC_TOP == 9223372036854775807);

// Bitstd::vector-integer conversions
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2int"} $bv2int.64(i: bv64) returns (i64);

// Pointer-number conversions
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { if $eq.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { if $ne.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { if $ugt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { if $uge.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { if $ult.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { if $ule.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { if $sgt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { if $sge.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { if $slt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { if $sle.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

const LDV_IN_INTERRUPT: ref;
axiom (LDV_IN_INTERRUPT == $sub.ref(0, 1028));
const ldv_spin: ref;
axiom (ldv_spin == $sub.ref(0, 2056));
const mtdblks_lock: ref;
axiom (mtdblks_lock == $sub.ref(0, 3248));
const mtdblock_tr: ref;
axiom (mtdblock_tr == $sub.ref(0, 4416));
const .str: ref;
axiom (.str == $sub.ref(0, 5449));
const {:count 16} .str.16: ref;
axiom (.str.16 == $sub.ref(0, 6489));
const {:count 175} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 7688));
const {:count 45} .str.17: ref;
axiom (.str.17 == $sub.ref(0, 8757));
const {:count 18} .str.10: ref;
axiom (.str.10 == $sub.ref(0, 9799));
const {:count 60} .str.11: ref;
axiom (.str.11 == $sub.ref(0, 10883));
const {:count 8} .str.12: ref;
axiom (.str.12 == $sub.ref(0, 11915));
const {:count 59} .str.13: ref;
axiom (.str.13 == $sub.ref(0, 12998));
const current_task: ref;
axiom (current_task == $sub.ref(0, 32776));
const {:count 15} .str.14: ref;
axiom (.str.14 == $sub.ref(0, 14037));
const {:count 44} .str.15: ref;
axiom (.str.15 == $sub.ref(0, 15105));
const {:count 17} .str.8: ref;
axiom (.str.8 == $sub.ref(0, 16146));
const {:count 18} .str.9: ref;
axiom (.str.9 == $sub.ref(0, 17188));
const {:count 4} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 18216));
const {:count 14} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 19254));
const {:count 15} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 20293));
const {:count 21} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 21338));
const __this_module: ref;
axiom (__this_module == $sub.ref(0, 32784));
const {:count 23} .str.6: ref;
axiom (.str.6 == $sub.ref(0, 22385));
const {:count 13} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 23422));
const {:count 14} .str.2.22: ref;
axiom (.str.2.22 == $sub.ref(0, 24460));
const main: ref;
axiom (main == $sub.ref(0, 25492));
procedure {:entrypoint} main()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i16: i32;
  var $i2: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
$bb0:
  call $initialize();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4512, 20} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4512, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := 1;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4513, 3} true;
  assume {:verifier.code 0} true;
  call ldv_initialize();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4514, 9} true;
  assume {:verifier.code 0} true;
  call $i0 := init_mtdblock();
  // WARNING: %1 = call i32 @init_mtdblock(), !dbg !3702, !verifier.code !3697
  call {:cexpr "tmp"} boogie_si_record_i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4516, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4516, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4517, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4628, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_final_state();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4630, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4521, 3} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  goto $bb5;
$bb5:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4611, 13} true;
  assume {:verifier.code 1} true;
  call $i23 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i23);
  // WARNING: %69 = call i32 @__VERIFIER_nondet_int(), !dbg !3801, !verifier.code !3713
  call {:cexpr "tmp___1"} boogie_si_record_i32($i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4613, 15} true;
  assume {:verifier.code 0} true;
  $i24 := $ne.i32($i23, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4613, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb52, $bb53;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4524, 13} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
  // WARNING: %7 = call i32 @__VERIFIER_nondet_int(), !dbg !3711, !verifier.code !3713
  call {:cexpr "tmp___0"} boogie_si_record_i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4526, 15} true;
  assume {:verifier.code 0} true;
  $i4 := $eq.i32($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4526, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4527, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i4 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4529, 15} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i3, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4529, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb10, $bb11;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4551, 46} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4551, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb32, $bb33;
$bb10:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4530, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume !(($i5 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4532, 15} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i32($i3, 2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4532, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb13, $bb14;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4567, 46} true;
  assume {:verifier.code 0} true;
  $i17 := $eq.i32($i2, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4567, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb40, $bb41;
$bb13:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4533, 5} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume !(($i6 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4535, 15} true;
  assume {:verifier.code 0} true;
  $i7 := $eq.i32($i3, 3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4535, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb16, $bb17;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4578, 7} true;
  assume {:verifier.code 0} true;
  call $i20 := mtdblock_flush($u0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4580, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $i2;
  goto $bb39;
$bb16:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4536, 5} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb17:
  assume !(($i7 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4538, 15} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.i32($i3, 4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4538, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb19, $bb20;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4583, 7} true;
  assume {:verifier.code 0} true;
  call $i21 := mtdblock_readsect($u0, $u1, $u2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4585, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $i2;
  goto $bb39;
$bb19:
  assume ($i8 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4539, 5} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume !(($i8 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4541, 15} true;
  assume {:verifier.code 0} true;
  $i9 := $eq.i32($i3, 5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4541, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb22, $bb23;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4588, 7} true;
  assume {:verifier.code 0} true;
  call $i22 := mtdblock_writesect($u0, $u1, $u2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4590, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $i2;
  goto $bb39;
$bb22:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4542, 5} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb23:
  assume !(($i9 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4544, 15} true;
  assume {:verifier.code 0} true;
  $i10 := $eq.i32($i3, 6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4544, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb25, $bb26;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4593, 7} true;
  assume {:verifier.code 0} true;
  call mtdblock_add_mtd($u3, $u4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4595, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $i2;
  goto $bb39;
$bb25:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4545, 5} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb26:
  assume !(($i10 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4548, 5} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4598, 7} true;
  assume {:verifier.code 0} true;
  call mtdblock_remove_dev($u0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4600, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $i2;
  goto $bb39;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4602, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $i2;
  goto $bb39;
$bb29:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4549, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb30, $bb31;
$bb30:
  assume (0 == 1);
  assume {:verifier.code 0} true;
  assume false;
$bb31:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4603, 12} true;
  assume {:verifier.code 0} true;
  goto $bb43;
$bb32:
  assume ($i11 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4553, 31} true;
  assume {:verifier.code 0} true;
  call $i12 := mtdblock_open($u0);
  // WARNING: %34 = call i32 @mtdblock_open(%struct.mtd_blktrans_dev* undef), !dbg !3760, !verifier.code !3697
  call {:cexpr "res_mtdblock_open_7"} boogie_si_record_i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4554, 9} true;
  assume {:verifier.code 0} true;
  call ldv_check_return_value($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4556, 33} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i32($i12, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4556, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb34, $bb35;
$bb33:
  assume !(($i11 == 1));
  assume {:verifier.code 0} true;
  $i15 := $i2;
  goto $bb38;
$bb34:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4557, 11} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb35:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb37;
$bb36:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4624, 3} true;
  assume {:verifier.code 0} true;
  call cleanup_mtdblock();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4625, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb37:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4561, 81} true;
  assume {:verifier.code 0} true;
  $i14 := $add.i32($i2, 1);
  // WARNING: %39 = add nsw i32 %.3, 1, !dbg !3771, !verifier.code !3697
  call {:cexpr "ldv_s_mtdblock_tr_mtd_blktrans_ops"} boogie_si_record_i32($i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4562, 7} true;
  assume {:verifier.code 0} true;
  $i15 := $i14;
  goto $bb38;
$bb38:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4565, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $i15;
  goto $bb39;
$bb39:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4526, 18} true;
  assume {:verifier.code 0} true;
  $i2 := $i16;
  goto $bb5;
$bb40:
  assume ($i17 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4569, 9} true;
  assume {:verifier.code 0} true;
  call $i18 := mtdblock_release($u0);
  // WARNING: %45 = call i32 @mtdblock_release(%struct.mtd_blktrans_dev* undef), !dbg !3777, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4572, 7} true;
  assume {:verifier.code 0} true;
  $i19 := 0;
  goto $bb42;
$bb41:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  $i19 := $i2;
  goto $bb42;
$bb42:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4575, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $i19;
  goto $bb39;
$bb43:
  assume {:verifier.code 0} true;
  goto $bb44;
$bb44:
  assume {:verifier.code 0} true;
  goto $bb45;
$bb45:
  assume {:verifier.code 0} true;
  goto $bb46;
$bb46:
  assume {:verifier.code 0} true;
  goto $bb47;
$bb47:
  assume {:verifier.code 0} true;
  goto $bb48;
$bb48:
  assume {:verifier.code 0} true;
  goto $bb49;
$bb49:
  assume {:verifier.code 0} true;
  goto $bb50;
$bb50:
  assume {:verifier.code 0} true;
  goto $bb51;
$bb51:
  assume {:verifier.code 0} true;
  assume false;
$bb52:
  assume ($i24 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4614, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb53:
  assume !(($i24 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4616, 42} true;
  assume {:verifier.code 0} true;
  $i25 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4616, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb54, $bb55;
$bb54:
  assume ($i25 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4617, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb55:
  assume !(($i25 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4619, 5} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb56:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4613, 18} true;
  assume {:verifier.code 0} true;
  goto $bb36;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 26524));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const ldv_initialize: ref;
axiom (ldv_initialize == $sub.ref(0, 27556));
procedure  ldv_initialize();
const init_mtdblock: ref;
axiom (init_mtdblock == $sub.ref(0, 28588));
procedure  init_mtdblock()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4475, 9} true;
  assume {:verifier.code 0} true;
  call $i0 := register_mtd_blktrans(mtdblock_tr);
  // WARNING: %1 = call i32 @register_mtd_blktrans(%struct.mtd_blktrans_ops* @mtdblock_tr), !dbg !3694, !verifier.code !3697
  call {:cexpr "tmp"} boogie_si_record_i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4477, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const mtdblock_open: ref;
axiom (mtdblock_open == $sub.ref(0, 29620));
procedure  mtdblock_open($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i32;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $i93: i64;
  var $i94: i64;
  var $p95: ref;
  var $i96: i64;
  var $i97: i64;
  var $p98: ref;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $i105: i8;
  var $i106: i64;
  var $i107: i64;
  var $i108: i32;
  var $i109: i64;
  var $i110: i1;
  var $i111: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4036, 12} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4038, 3} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4038, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p5, .str);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4039, 17} true;
  assume {:verifier.code 0} true;
  $i6 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4039, 48} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i64($i6, 8);
  // WARNING: %8 = add i64 %7, 8, !dbg !3725, !verifier.code !3694
  call {:cexpr "__cil_tmp10"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4040, 5} true;
  assume {:verifier.code 0} true;
  $p8 := $i2p.i64.ref($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4040, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p8, .str.1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4041, 17} true;
  assume {:verifier.code 0} true;
  $i9 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4041, 48} true;
  assume {:verifier.code 0} true;
  $i10 := $add.i64($i9, 16);
  // WARNING: %11 = add i64 %10, 16, !dbg !3731, !verifier.code !3694
  call {:cexpr "__cil_tmp11"} boogie_si_record_i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4042, 5} true;
  assume {:verifier.code 0} true;
  $p11 := $i2p.i64.ref($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4042, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p11, .str.2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4043, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4043, 48} true;
  assume {:verifier.code 0} true;
  $i13 := $add.i64($i12, 24);
  // WARNING: %14 = add i64 %13, 24, !dbg !3737, !verifier.code !3694
  call {:cexpr "__cil_tmp12"} boogie_si_record_i64($i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4044, 5} true;
  assume {:verifier.code 0} true;
  $p14 := $i2p.i64.ref($i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4044, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p14, .str.3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4045, 17} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4045, 48} true;
  assume {:verifier.code 0} true;
  $i16 := $add.i64($i15, 32);
  // WARNING: %17 = add i64 %16, 32, !dbg !3743, !verifier.code !3694
  call {:cexpr "__cil_tmp13"} boogie_si_record_i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4046, 5} true;
  assume {:verifier.code 0} true;
  $p17 := $i2p.i64.ref($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4046, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p17, 301);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4047, 17} true;
  assume {:verifier.code 0} true;
  $i18 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4047, 48} true;
  assume {:verifier.code 0} true;
  $i19 := $add.i64($i18, 35);
  // WARNING: %20 = add i64 %19, 35, !dbg !3749, !verifier.code !3694
  call {:cexpr "__cil_tmp14"} boogie_si_record_i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4048, 5} true;
  assume {:verifier.code 0} true;
  $p20 := $i2p.i64.ref($i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4048, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i8($M.1, $p20, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4049, 17} true;
  assume {:verifier.code 0} true;
  $i21 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4049, 48} true;
  assume {:verifier.code 0} true;
  $i22 := $add.i64($i21, 35);
  // WARNING: %23 = add i64 %22, 35, !dbg !3755, !verifier.code !3694
  call {:cexpr "__cil_tmp15"} boogie_si_record_i64($i22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4050, 19} true;
  assume {:verifier.code 0} true;
  $p23 := $i2p.i64.ref($i22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4050, 17} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i8($M.1, $p23);
  // WARNING: %25 = load i8, i8* %24, align 1, !dbg !3759, !verifier.code !3694
  call {:cexpr "__cil_tmp16"} boogie_si_record_i8($i24);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4051, 17} true;
  assume {:verifier.code 0} true;
  $i25 := $zext.i8.i64($i24);
  // WARNING: %26 = zext i8 %25 to i64, !dbg !3762, !verifier.code !3694
  call {:cexpr "__cil_tmp17"} boogie_si_record_i64($i25);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4052, 29} true;
  assume {:verifier.code 0} true;
  $i26 := $and.i64($i25, 1);
  // WARNING: %27 = and i64 %26, 1, !dbg !3765, !verifier.code !3694
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i26);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4053, 9} true;
  assume {:verifier.code 0} true;
  call $i27 := __builtinx_expect.i64.i64($i26, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4053, 9} true;
  assume {:verifier.code 0} true;
  $i28 := $sext.i32.i64($i27);
  // WARNING: %29 = sext i32 %28 to i64, !dbg !3768, !verifier.code !3694
  call {:cexpr "tmp"} boogie_si_record_i64($i28);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4055, 11} true;
  assume {:verifier.code 0} true;
  $i29 := $ne.i64($i28, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4055, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i29 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4057, 5} true;
  assume {:verifier.code 0} true;
  call $i30 := __dynamic_pr_debug.ref.ref($p1, .str.3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4059, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4063, 3} true;
  assume {:verifier.code 0} true;
  call mutex_lock_nested(mtdblks_lock, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4066, 17} true;
  assume {:verifier.code 0} true;
  $i31 := $p2i.ref.i64($p4);
  // WARNING: %35 = ptrtoint %struct.mtdblk_dev* %5 to i64, !dbg !3780, !verifier.code !3694
  call {:cexpr "__cil_tmp19"} boogie_si_record_i64($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4067, 29} true;
  assume {:verifier.code 0} true;
  $i32 := $add.i64($i31, 352);
  // WARNING: %36 = add i64 %35, 352, !dbg !3784, !verifier.code !3694
  call {:cexpr "__cil_tmp20"} boogie_si_record_i64($i32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4068, 19} true;
  assume {:verifier.code 0} true;
  $p33 := $i2p.i64.ref($i32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4068, 17} true;
  assume {:verifier.code 0} true;
  $i34 := $load.i32($M.1, $p33);
  // WARNING: %38 = load i32, i32* %37, align 4, !dbg !3788, !verifier.code !3694
  call {:cexpr "__cil_tmp21"} boogie_si_record_i32($i34);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4069, 19} true;
  assume {:verifier.code 0} true;
  $i35 := $ne.i32($i34, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4069, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i35 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4071, 19} true;
  assume {:verifier.code 0} true;
  $i36 := $p2i.ref.i64($p4);
  // WARNING: %41 = ptrtoint %struct.mtdblk_dev* %5 to i64, !dbg !3794, !verifier.code !3694
  call {:cexpr "__cil_tmp22"} boogie_si_record_i64($i36);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4072, 31} true;
  assume {:verifier.code 0} true;
  $i37 := $add.i64($i36, 352);
  // WARNING: %42 = add i64 %41, 352, !dbg !3799, !verifier.code !3694
  call {:cexpr "__cil_tmp23"} boogie_si_record_i64($i37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4073, 19} true;
  assume {:verifier.code 0} true;
  $i38 := $p2i.ref.i64($p4);
  // WARNING: %43 = ptrtoint %struct.mtdblk_dev* %5 to i64, !dbg !3802, !verifier.code !3694
  call {:cexpr "__cil_tmp24"} boogie_si_record_i64($i38);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4074, 31} true;
  assume {:verifier.code 0} true;
  $i39 := $add.i64($i38, 352);
  // WARNING: %44 = add i64 %43, 352, !dbg !3805, !verifier.code !3694
  call {:cexpr "__cil_tmp25"} boogie_si_record_i64($i39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4075, 21} true;
  assume {:verifier.code 0} true;
  $p40 := $i2p.i64.ref($i39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4075, 19} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i32($M.1, $p40);
  // WARNING: %46 = load i32, i32* %45, align 4, !dbg !3809, !verifier.code !3694
  call {:cexpr "__cil_tmp26"} boogie_si_record_i32($i41);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4076, 41} true;
  assume {:verifier.code 0} true;
  $i42 := $add.i32($i41, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4076, 7} true;
  assume {:verifier.code 0} true;
  $p43 := $i2p.i64.ref($i37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4076, 27} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p43, $i42);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4077, 5} true;
  assume {:verifier.code 0} true;
  call mutex_unlock(mtdblks_lock);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4079, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4161, 1} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4085, 17} true;
  assume {:verifier.code 0} true;
  $i44 := $p2i.ref.i64($p4);
  // WARNING: %51 = ptrtoint %struct.mtdblk_dev* %5 to i64, !dbg !3817, !verifier.code !3694
  call {:cexpr "__cil_tmp27"} boogie_si_record_i64($i44);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4086, 29} true;
  assume {:verifier.code 0} true;
  $i45 := $add.i64($i44, 352);
  // WARNING: %52 = add i64 %51, 352, !dbg !3821, !verifier.code !3694
  call {:cexpr "__cil_tmp28"} boogie_si_record_i64($i45);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4087, 5} true;
  assume {:verifier.code 0} true;
  $p46 := $i2p.i64.ref($i45);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4087, 25} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p46, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4088, 17} true;
  assume {:verifier.code 0} true;
  $i47 := $p2i.ref.i64($p4);
  // WARNING: %54 = ptrtoint %struct.mtdblk_dev* %5 to i64, !dbg !3826, !verifier.code !3694
  call {:cexpr "__cil_tmp29"} boogie_si_record_i64($i47);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4089, 29} true;
  assume {:verifier.code 0} true;
  $i48 := $add.i64($i47, 360);
  // WARNING: %55 = add i64 %54, 360, !dbg !3829, !verifier.code !3694
  call {:cexpr "__cil_tmp30"} boogie_si_record_i64($i48);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4090, 17} true;
  assume {:verifier.code 0} true;
  $p49 := $i2p.i64.ref($i48);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4091, 3} true;
  assume {:verifier.code 0} true;
  call __mutex_init($p49, .str.4, $p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4092, 17} true;
  assume {:verifier.code 0} true;
  $i50 := $p2i.ref.i64($p4);
  // WARNING: %57 = ptrtoint %struct.mtdblk_dev* %5 to i64, !dbg !3836, !verifier.code !3694
  call {:cexpr "__cil_tmp32"} boogie_si_record_i64($i50);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4093, 29} true;
  assume {:verifier.code 0} true;
  $i51 := $add.i64($i50, 548);
  // WARNING: %58 = add i64 %57, 548, !dbg !3839, !verifier.code !3694
  call {:cexpr "__cil_tmp33"} boogie_si_record_i64($i51);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4094, 5} true;
  assume {:verifier.code 0} true;
  $p52 := $i2p.i64.ref($i51);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4094, 36} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p52, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4097, 17} true;
  assume {:verifier.code 0} true;
  $i53 := $p2i.ref.i64($p0);
  // WARNING: %60 = ptrtoint %struct.mtd_blktrans_dev* %0 to i64, !dbg !3844, !verifier.code !3694
  call {:cexpr "__cil_tmp34"} boogie_si_record_i64($i53);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4098, 29} true;
  assume {:verifier.code 0} true;
  $i54 := $add.i64($i53, 24);
  // WARNING: %61 = add i64 %60, 24, !dbg !3848, !verifier.code !3694
  call {:cexpr "__cil_tmp35"} boogie_si_record_i64($i54);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4099, 19} true;
  assume {:verifier.code 0} true;
  $p55 := $i2p.i64.ref($i54);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4099, 17} true;
  assume {:verifier.code 0} true;
  $p56 := $load.ref($M.1, $p55);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4100, 17} true;
  assume {:verifier.code 0} true;
  $i57 := $p2i.ref.i64($p56);
  // WARNING: %64 = ptrtoint %struct.mtd_info* %63 to i64, !dbg !3855, !verifier.code !3694
  call {:cexpr "__cil_tmp37"} boogie_si_record_i64($i57);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4101, 29} true;
  assume {:verifier.code 0} true;
  $i58 := $add.i64($i57, 4);
  // WARNING: %65 = add i64 %64, 4, !dbg !3858, !verifier.code !3694
  call {:cexpr "__cil_tmp38"} boogie_si_record_i64($i58);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4102, 19} true;
  assume {:verifier.code 0} true;
  $p59 := $i2p.i64.ref($i58);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4102, 17} true;
  assume {:verifier.code 0} true;
  $i60 := $load.i32($M.1, $p59);
  // WARNING: %67 = load i32, i32* %66, align 4, !dbg !3862, !verifier.code !3694
  call {:cexpr "__cil_tmp39"} boogie_si_record_i32($i60);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4103, 29} true;
  assume {:verifier.code 0} true;
  $i61 := $and.i32($i60, 4096);
  // WARNING: %68 = and i32 %67, 4096, !dbg !3865, !verifier.code !3694
  call {:cexpr "__cil_tmp40"} boogie_si_record_i32($i61);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4104, 19} true;
  assume {:verifier.code 0} true;
  $i62 := $eq.i32($i61, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4104, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i62} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i62 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4106, 19} true;
  assume {:verifier.code 0} true;
  $i63 := $p2i.ref.i64($p0);
  // WARNING: %71 = ptrtoint %struct.mtd_blktrans_dev* %0 to i64, !dbg !3871, !verifier.code !3694
  call {:cexpr "__cil_tmp41"} boogie_si_record_i64($i63);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4107, 31} true;
  assume {:verifier.code 0} true;
  $i64 := $add.i64($i63, 24);
  // WARNING: %72 = add i64 %71, 24, !dbg !3876, !verifier.code !3694
  call {:cexpr "__cil_tmp42"} boogie_si_record_i64($i64);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4108, 21} true;
  assume {:verifier.code 0} true;
  $p65 := $i2p.i64.ref($i64);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4108, 19} true;
  assume {:verifier.code 0} true;
  $p66 := $load.ref($M.1, $p65);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4109, 19} true;
  assume {:verifier.code 0} true;
  $i67 := $p2i.ref.i64($p66);
  // WARNING: %75 = ptrtoint %struct.mtd_info* %74 to i64, !dbg !3883, !verifier.code !3694
  call {:cexpr "__cil_tmp44"} boogie_si_record_i64($i67);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4110, 31} true;
  assume {:verifier.code 0} true;
  $i68 := $add.i64($i67, 16);
  // WARNING: %76 = add i64 %75, 16, !dbg !3886, !verifier.code !3694
  call {:cexpr "__cil_tmp45"} boogie_si_record_i64($i68);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4111, 21} true;
  assume {:verifier.code 0} true;
  $p69 := $i2p.i64.ref($i68);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4111, 19} true;
  assume {:verifier.code 0} true;
  $i70 := $load.i32($M.1, $p69);
  // WARNING: %78 = load i32, i32* %77, align 4, !dbg !3890, !verifier.code !3694
  call {:cexpr "__cil_tmp46"} boogie_si_record_i32($i70);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4112, 21} true;
  assume {:verifier.code 0} true;
  $i71 := $ne.i32($i70, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4112, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i71} true;
  goto $bb10, $bb11;
$bb9:
  assume !(($i62 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb10:
  assume ($i71 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4113, 21} true;
  assume {:verifier.code 0} true;
  $i72 := $p2i.ref.i64($p4);
  // WARNING: %81 = ptrtoint %struct.mtdblk_dev* %5 to i64, !dbg !3896, !verifier.code !3694
  call {:cexpr "__cil_tmp47"} boogie_si_record_i64($i72);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4114, 33} true;
  assume {:verifier.code 0} true;
  $i73 := $add.i64($i72, 544);
  // WARNING: %82 = add i64 %81, 544, !dbg !3900, !verifier.code !3694
  call {:cexpr "__cil_tmp48"} boogie_si_record_i64($i73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4115, 21} true;
  assume {:verifier.code 0} true;
  $i74 := $p2i.ref.i64($p0);
  // WARNING: %83 = ptrtoint %struct.mtd_blktrans_dev* %0 to i64, !dbg !3903, !verifier.code !3694
  call {:cexpr "__cil_tmp49"} boogie_si_record_i64($i74);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4116, 33} true;
  assume {:verifier.code 0} true;
  $i75 := $add.i64($i74, 24);
  // WARNING: %84 = add i64 %83, 24, !dbg !3906, !verifier.code !3694
  call {:cexpr "__cil_tmp50"} boogie_si_record_i64($i75);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4117, 23} true;
  assume {:verifier.code 0} true;
  $p76 := $i2p.i64.ref($i75);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4117, 21} true;
  assume {:verifier.code 0} true;
  $p77 := $load.ref($M.1, $p76);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4118, 21} true;
  assume {:verifier.code 0} true;
  $i78 := $p2i.ref.i64($p77);
  // WARNING: %87 = ptrtoint %struct.mtd_info* %86 to i64, !dbg !3913, !verifier.code !3694
  call {:cexpr "__cil_tmp52"} boogie_si_record_i64($i78);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4119, 33} true;
  assume {:verifier.code 0} true;
  $i79 := $add.i64($i78, 16);
  // WARNING: %88 = add i64 %87, 16, !dbg !3916, !verifier.code !3694
  call {:cexpr "__cil_tmp53"} boogie_si_record_i64($i79);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4120, 42} true;
  assume {:verifier.code 0} true;
  $p80 := $i2p.i64.ref($i79);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4120, 40} true;
  assume {:verifier.code 0} true;
  $i81 := $load.i32($M.1, $p80);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4120, 9} true;
  assume {:verifier.code 0} true;
  $p82 := $i2p.i64.ref($i73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4120, 38} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p82, $i81);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4121, 21} true;
  assume {:verifier.code 0} true;
  $i83 := $p2i.ref.i64($p4);
  // WARNING: %92 = ptrtoint %struct.mtdblk_dev* %5 to i64, !dbg !3923, !verifier.code !3694
  call {:cexpr "__cil_tmp54"} boogie_si_record_i64($i83);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4122, 33} true;
  assume {:verifier.code 0} true;
  $i84 := $add.i64($i83, 528);
  // WARNING: %93 = add i64 %92, 528, !dbg !3926, !verifier.code !3694
  call {:cexpr "__cil_tmp55"} boogie_si_record_i64($i84);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4123, 9} true;
  assume {:verifier.code 0} true;
  $p85 := $i2p.i64.ref($i84);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4123, 40} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p85, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4124, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume !(($i71 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4128, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4133, 3} true;
  assume {:verifier.code 0} true;
  call mutex_unlock(mtdblks_lock);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4135, 3} true;
  assume {:verifier.code 0} true;
  $p86 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4135, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p86, .str);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4136, 17} true;
  assume {:verifier.code 0} true;
  $i87 := $p2i.ref.i64($p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4136, 52} true;
  assume {:verifier.code 0} true;
  $i88 := $add.i64($i87, 8);
  // WARNING: %101 = add i64 %100, 8, !dbg !3940, !verifier.code !3694
  call {:cexpr "__cil_tmp57"} boogie_si_record_i64($i88);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4137, 5} true;
  assume {:verifier.code 0} true;
  $p89 := $i2p.i64.ref($i88);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4137, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p89, .str.1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4138, 17} true;
  assume {:verifier.code 0} true;
  $i90 := $p2i.ref.i64($p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4138, 52} true;
  assume {:verifier.code 0} true;
  $i91 := $add.i64($i90, 16);
  // WARNING: %104 = add i64 %103, 16, !dbg !3946, !verifier.code !3694
  call {:cexpr "__cil_tmp58"} boogie_si_record_i64($i91);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4139, 5} true;
  assume {:verifier.code 0} true;
  $p92 := $i2p.i64.ref($i91);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4139, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p92, .str.2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4140, 17} true;
  assume {:verifier.code 0} true;
  $i93 := $p2i.ref.i64($p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4140, 52} true;
  assume {:verifier.code 0} true;
  $i94 := $add.i64($i93, 24);
  // WARNING: %107 = add i64 %106, 24, !dbg !3952, !verifier.code !3694
  call {:cexpr "__cil_tmp59"} boogie_si_record_i64($i94);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4141, 5} true;
  assume {:verifier.code 0} true;
  $p95 := $i2p.i64.ref($i94);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4141, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p95, .str.5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4142, 17} true;
  assume {:verifier.code 0} true;
  $i96 := $p2i.ref.i64($p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4142, 52} true;
  assume {:verifier.code 0} true;
  $i97 := $add.i64($i96, 32);
  // WARNING: %110 = add i64 %109, 32, !dbg !3958, !verifier.code !3694
  call {:cexpr "__cil_tmp60"} boogie_si_record_i64($i97);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4143, 5} true;
  assume {:verifier.code 0} true;
  $p98 := $i2p.i64.ref($i97);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4143, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p98, 321);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4144, 17} true;
  assume {:verifier.code 0} true;
  $i99 := $p2i.ref.i64($p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4144, 52} true;
  assume {:verifier.code 0} true;
  $i100 := $add.i64($i99, 35);
  // WARNING: %113 = add i64 %112, 35, !dbg !3964, !verifier.code !3694
  call {:cexpr "__cil_tmp61"} boogie_si_record_i64($i100);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4145, 5} true;
  assume {:verifier.code 0} true;
  $p101 := $i2p.i64.ref($i100);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4145, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i8($M.1, $p101, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4146, 17} true;
  assume {:verifier.code 0} true;
  $i102 := $p2i.ref.i64($p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4146, 52} true;
  assume {:verifier.code 0} true;
  $i103 := $add.i64($i102, 35);
  // WARNING: %116 = add i64 %115, 35, !dbg !3970, !verifier.code !3694
  call {:cexpr "__cil_tmp62"} boogie_si_record_i64($i103);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4147, 19} true;
  assume {:verifier.code 0} true;
  $p104 := $i2p.i64.ref($i103);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4147, 17} true;
  assume {:verifier.code 0} true;
  $i105 := $load.i8($M.1, $p104);
  // WARNING: %118 = load i8, i8* %117, align 1, !dbg !3974, !verifier.code !3694
  call {:cexpr "__cil_tmp63"} boogie_si_record_i8($i105);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4148, 17} true;
  assume {:verifier.code 0} true;
  $i106 := $zext.i8.i64($i105);
  // WARNING: %119 = zext i8 %118 to i64, !dbg !3977, !verifier.code !3694
  call {:cexpr "__cil_tmp64"} boogie_si_record_i64($i106);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4149, 29} true;
  assume {:verifier.code 0} true;
  $i107 := $and.i64($i106, 1);
  // WARNING: %120 = and i64 %119, 1, !dbg !3980, !verifier.code !3694
  call {:cexpr "__cil_tmp65"} boogie_si_record_i64($i107);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4150, 13} true;
  assume {:verifier.code 0} true;
  call $i108 := __builtinx_expect.i64.i64($i107, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4150, 13} true;
  assume {:verifier.code 0} true;
  $i109 := $sext.i32.i64($i108);
  // WARNING: %122 = sext i32 %121 to i64, !dbg !3983, !verifier.code !3694
  call {:cexpr "tmp___0"} boogie_si_record_i64($i109);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4152, 15} true;
  assume {:verifier.code 0} true;
  $i110 := $ne.i64($i109, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4152, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i110} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i110 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4154, 5} true;
  assume {:verifier.code 0} true;
  call $i111 := __dynamic_pr_debug.ref.ref($p3, .str.5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4156, 3} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i110 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4159, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
}
const ldv_check_return_value: ref;
axiom (ldv_check_return_value == $sub.ref(0, 30652));
procedure  ldv_check_return_value($i0: i32);
const mtdblock_release: ref;
axiom (mtdblock_release == $sub.ref(0, 31684));
procedure  mtdblock_release($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i32;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $i71: i64;
  var $i72: i64;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $i83: i8;
  var $i84: i64;
  var $i85: i64;
  var $i86: i32;
  var $i87: i64;
  var $i88: i1;
  var $i89: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4218, 12} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4220, 3} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4220, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p4, .str);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4221, 16} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4221, 47} true;
  assume {:verifier.code 0} true;
  $i6 := $add.i64($i5, 8);
  // WARNING: %7 = add i64 %6, 8, !dbg !3723, !verifier.code !3694
  call {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4222, 5} true;
  assume {:verifier.code 0} true;
  $p7 := $i2p.i64.ref($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4222, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p7, .str.8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4223, 17} true;
  assume {:verifier.code 0} true;
  $i8 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4223, 48} true;
  assume {:verifier.code 0} true;
  $i9 := $add.i64($i8, 16);
  // WARNING: %10 = add i64 %9, 16, !dbg !3729, !verifier.code !3694
  call {:cexpr "__cil_tmp10"} boogie_si_record_i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4224, 5} true;
  assume {:verifier.code 0} true;
  $p10 := $i2p.i64.ref($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4224, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p10, .str.2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4225, 17} true;
  assume {:verifier.code 0} true;
  $i11 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4225, 48} true;
  assume {:verifier.code 0} true;
  $i12 := $add.i64($i11, 24);
  // WARNING: %13 = add i64 %12, 24, !dbg !3735, !verifier.code !3694
  call {:cexpr "__cil_tmp11"} boogie_si_record_i64($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4226, 5} true;
  assume {:verifier.code 0} true;
  $p13 := $i2p.i64.ref($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4226, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p13, .str.9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4227, 17} true;
  assume {:verifier.code 0} true;
  $i14 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4227, 48} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i64($i14, 32);
  // WARNING: %16 = add i64 %15, 32, !dbg !3741, !verifier.code !3694
  call {:cexpr "__cil_tmp12"} boogie_si_record_i64($i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4228, 5} true;
  assume {:verifier.code 0} true;
  $p16 := $i2p.i64.ref($i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4228, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p16, 330);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4229, 17} true;
  assume {:verifier.code 0} true;
  $i17 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4229, 48} true;
  assume {:verifier.code 0} true;
  $i18 := $add.i64($i17, 35);
  // WARNING: %19 = add i64 %18, 35, !dbg !3747, !verifier.code !3694
  call {:cexpr "__cil_tmp13"} boogie_si_record_i64($i18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4230, 5} true;
  assume {:verifier.code 0} true;
  $p19 := $i2p.i64.ref($i18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4230, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i8($M.1, $p19, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4231, 17} true;
  assume {:verifier.code 0} true;
  $i20 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4231, 48} true;
  assume {:verifier.code 0} true;
  $i21 := $add.i64($i20, 35);
  // WARNING: %22 = add i64 %21, 35, !dbg !3753, !verifier.code !3694
  call {:cexpr "__cil_tmp14"} boogie_si_record_i64($i21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4232, 19} true;
  assume {:verifier.code 0} true;
  $p22 := $i2p.i64.ref($i21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4232, 17} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i8($M.1, $p22);
  // WARNING: %24 = load i8, i8* %23, align 1, !dbg !3757, !verifier.code !3694
  call {:cexpr "__cil_tmp15"} boogie_si_record_i8($i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4233, 17} true;
  assume {:verifier.code 0} true;
  $i24 := $zext.i8.i64($i23);
  // WARNING: %25 = zext i8 %24 to i64, !dbg !3760, !verifier.code !3694
  call {:cexpr "__cil_tmp16"} boogie_si_record_i64($i24);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4234, 29} true;
  assume {:verifier.code 0} true;
  $i25 := $and.i64($i24, 1);
  // WARNING: %26 = and i64 %25, 1, !dbg !3763, !verifier.code !3694
  call {:cexpr "__cil_tmp17"} boogie_si_record_i64($i25);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4235, 9} true;
  assume {:verifier.code 0} true;
  call $i26 := __builtinx_expect.i64.i64($i25, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4235, 9} true;
  assume {:verifier.code 0} true;
  $i27 := $sext.i32.i64($i26);
  // WARNING: %28 = sext i32 %27 to i64, !dbg !3766, !verifier.code !3694
  call {:cexpr "tmp"} boogie_si_record_i64($i27);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4237, 11} true;
  assume {:verifier.code 0} true;
  $i28 := $ne.i64($i27, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4237, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i28 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4239, 5} true;
  assume {:verifier.code 0} true;
  call $i29 := __dynamic_pr_debug.ref.ref($p1, .str.9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4241, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i28 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4245, 3} true;
  assume {:verifier.code 0} true;
  call mutex_lock_nested(mtdblks_lock, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4246, 17} true;
  assume {:verifier.code 0} true;
  $i30 := $p2i.ref.i64($p3);
  // WARNING: %34 = ptrtoint %struct.mtdblk_dev* %4 to i64, !dbg !3778, !verifier.code !3694
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i30);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4247, 29} true;
  assume {:verifier.code 0} true;
  $i31 := $add.i64($i30, 360);
  // WARNING: %35 = add i64 %34, 360, !dbg !3781, !verifier.code !3694
  call {:cexpr "__cil_tmp19"} boogie_si_record_i64($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4248, 17} true;
  assume {:verifier.code 0} true;
  $p32 := $i2p.i64.ref($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4249, 3} true;
  assume {:verifier.code 0} true;
  call mutex_lock_nested($p32, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4250, 3} true;
  assume {:verifier.code 0} true;
  call $i33 := write_cached_data($p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4251, 17} true;
  assume {:verifier.code 0} true;
  $i34 := $p2i.ref.i64($p3);
  // WARNING: %38 = ptrtoint %struct.mtdblk_dev* %4 to i64, !dbg !3789, !verifier.code !3694
  call {:cexpr "__cil_tmp21"} boogie_si_record_i64($i34);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4252, 29} true;
  assume {:verifier.code 0} true;
  $i35 := $add.i64($i34, 360);
  // WARNING: %39 = add i64 %38, 360, !dbg !3792, !verifier.code !3694
  call {:cexpr "__cil_tmp22"} boogie_si_record_i64($i35);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4253, 17} true;
  assume {:verifier.code 0} true;
  $p36 := $i2p.i64.ref($i35);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4254, 3} true;
  assume {:verifier.code 0} true;
  call mutex_unlock($p36);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4255, 17} true;
  assume {:verifier.code 0} true;
  $i37 := $p2i.ref.i64($p3);
  // WARNING: %41 = ptrtoint %struct.mtdblk_dev* %4 to i64, !dbg !3799, !verifier.code !3694
  call {:cexpr "__cil_tmp24"} boogie_si_record_i64($i37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4256, 29} true;
  assume {:verifier.code 0} true;
  $i38 := $add.i64($i37, 352);
  // WARNING: %42 = add i64 %41, 352, !dbg !3802, !verifier.code !3694
  call {:cexpr "__cil_tmp25"} boogie_si_record_i64($i38);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4257, 17} true;
  assume {:verifier.code 0} true;
  $i39 := $p2i.ref.i64($p3);
  // WARNING: %43 = ptrtoint %struct.mtdblk_dev* %4 to i64, !dbg !3805, !verifier.code !3694
  call {:cexpr "__cil_tmp26"} boogie_si_record_i64($i39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4258, 29} true;
  assume {:verifier.code 0} true;
  $i40 := $add.i64($i39, 352);
  // WARNING: %44 = add i64 %43, 352, !dbg !3808, !verifier.code !3694
  call {:cexpr "__cil_tmp27"} boogie_si_record_i64($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4259, 19} true;
  assume {:verifier.code 0} true;
  $p41 := $i2p.i64.ref($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4259, 17} true;
  assume {:verifier.code 0} true;
  $i42 := $load.i32($M.1, $p41);
  // WARNING: %46 = load i32, i32* %45, align 4, !dbg !3812, !verifier.code !3694
  call {:cexpr "__cil_tmp28"} boogie_si_record_i32($i42);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4260, 39} true;
  assume {:verifier.code 0} true;
  $i43 := $sub.i32($i42, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4260, 5} true;
  assume {:verifier.code 0} true;
  $p44 := $i2p.i64.ref($i38);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4260, 25} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p44, $i43);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4263, 17} true;
  assume {:verifier.code 0} true;
  $i45 := $p2i.ref.i64($p3);
  // WARNING: %49 = ptrtoint %struct.mtdblk_dev* %4 to i64, !dbg !3818, !verifier.code !3694
  call {:cexpr "__cil_tmp29"} boogie_si_record_i64($i45);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4264, 29} true;
  assume {:verifier.code 0} true;
  $i46 := $add.i64($i45, 352);
  // WARNING: %50 = add i64 %49, 352, !dbg !3822, !verifier.code !3694
  call {:cexpr "__cil_tmp30"} boogie_si_record_i64($i46);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4265, 19} true;
  assume {:verifier.code 0} true;
  $p47 := $i2p.i64.ref($i46);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4265, 17} true;
  assume {:verifier.code 0} true;
  $i48 := $load.i32($M.1, $p47);
  // WARNING: %52 = load i32, i32* %51, align 4, !dbg !3826, !verifier.code !3694
  call {:cexpr "__cil_tmp31"} boogie_si_record_i32($i48);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4266, 19} true;
  assume {:verifier.code 0} true;
  $i49 := $eq.i32($i48, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4266, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i49 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4268, 19} true;
  assume {:verifier.code 0} true;
  $i50 := $p2i.ref.i64($p0);
  // WARNING: %55 = ptrtoint %struct.mtd_blktrans_dev* %0 to i64, !dbg !3832, !verifier.code !3694
  call {:cexpr "__cil_tmp32"} boogie_si_record_i64($i50);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4269, 31} true;
  assume {:verifier.code 0} true;
  $i51 := $add.i64($i50, 344);
  // WARNING: %56 = add i64 %55, 344, !dbg !3837, !verifier.code !3694
  call {:cexpr "__cil_tmp33"} boogie_si_record_i64($i51);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4270, 21} true;
  assume {:verifier.code 0} true;
  $p52 := $i2p.i64.ref($i51);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4270, 19} true;
  assume {:verifier.code 0} true;
  $i53 := $load.i32($M.1, $p52);
  // WARNING: %58 = load i32, i32* %57, align 4, !dbg !3841, !verifier.code !3694
  call {:cexpr "__cil_tmp34"} boogie_si_record_i32($i53);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4271, 31} true;
  assume {:verifier.code 0} true;
  $i54 := $and.i32($i53, 2);
  // WARNING: %59 = and i32 %58, 2, !dbg !3844, !verifier.code !3694
  call {:cexpr "__cil_tmp35"} boogie_si_record_i32($i54);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4272, 21} true;
  assume {:verifier.code 0} true;
  $i55 := $ne.i32($i54, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4272, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i55} true;
  goto $bb6, $bb7;
$bb5:
  assume !(($i49 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb6:
  assume ($i55 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4274, 21} true;
  assume {:verifier.code 0} true;
  $i56 := $p2i.ref.i64($p0);
  // WARNING: %62 = ptrtoint %struct.mtd_blktrans_dev* %0 to i64, !dbg !3850, !verifier.code !3694
  call {:cexpr "__cil_tmp36"} boogie_si_record_i64($i56);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4275, 33} true;
  assume {:verifier.code 0} true;
  $i57 := $add.i64($i56, 24);
  // WARNING: %63 = add i64 %62, 24, !dbg !3855, !verifier.code !3694
  call {:cexpr "__cil_tmp37"} boogie_si_record_i64($i57);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4276, 23} true;
  assume {:verifier.code 0} true;
  $p58 := $i2p.i64.ref($i57);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4276, 21} true;
  assume {:verifier.code 0} true;
  $p59 := $load.ref($M.1, $p58);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4277, 7} true;
  assume {:verifier.code 0} true;
  call mtd_sync($p59);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4279, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !(($i55 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4284, 19} true;
  assume {:verifier.code 0} true;
  $i60 := $p2i.ref.i64($p3);
  // WARNING: %68 = ptrtoint %struct.mtdblk_dev* %4 to i64, !dbg !3864, !verifier.code !3694
  call {:cexpr "__cil_tmp39"} boogie_si_record_i64($i60);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4285, 31} true;
  assume {:verifier.code 0} true;
  $i61 := $add.i64($i60, 528);
  // WARNING: %69 = add i64 %68, 528, !dbg !3868, !verifier.code !3694
  call {:cexpr "__cil_tmp40"} boogie_si_record_i64($i61);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4286, 21} true;
  assume {:verifier.code 0} true;
  $p62 := $i2p.i64.ref($i61);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4286, 19} true;
  assume {:verifier.code 0} true;
  $p63 := $load.ref($M.1, $p62);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4288, 5} true;
  assume {:verifier.code 0} true;
  call vfree($p63);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4290, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4295, 3} true;
  assume {:verifier.code 0} true;
  call mutex_unlock(mtdblks_lock);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4297, 3} true;
  assume {:verifier.code 0} true;
  $p64 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4297, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p64, .str);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4298, 17} true;
  assume {:verifier.code 0} true;
  $i65 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4298, 52} true;
  assume {:verifier.code 0} true;
  $i66 := $add.i64($i65, 8);
  // WARNING: %76 = add i64 %75, 8, !dbg !3886, !verifier.code !3694
  call {:cexpr "__cil_tmp44"} boogie_si_record_i64($i66);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4299, 5} true;
  assume {:verifier.code 0} true;
  $p67 := $i2p.i64.ref($i66);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4299, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p67, .str.8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4300, 17} true;
  assume {:verifier.code 0} true;
  $i68 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4300, 52} true;
  assume {:verifier.code 0} true;
  $i69 := $add.i64($i68, 16);
  // WARNING: %79 = add i64 %78, 16, !dbg !3892, !verifier.code !3694
  call {:cexpr "__cil_tmp45"} boogie_si_record_i64($i69);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4301, 5} true;
  assume {:verifier.code 0} true;
  $p70 := $i2p.i64.ref($i69);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4301, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p70, .str.2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4302, 17} true;
  assume {:verifier.code 0} true;
  $i71 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4302, 52} true;
  assume {:verifier.code 0} true;
  $i72 := $add.i64($i71, 24);
  // WARNING: %82 = add i64 %81, 24, !dbg !3898, !verifier.code !3694
  call {:cexpr "__cil_tmp46"} boogie_si_record_i64($i72);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4303, 5} true;
  assume {:verifier.code 0} true;
  $p73 := $i2p.i64.ref($i72);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4303, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p73, .str.5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4304, 17} true;
  assume {:verifier.code 0} true;
  $i74 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4304, 52} true;
  assume {:verifier.code 0} true;
  $i75 := $add.i64($i74, 32);
  // WARNING: %85 = add i64 %84, 32, !dbg !3904, !verifier.code !3694
  call {:cexpr "__cil_tmp47"} boogie_si_record_i64($i75);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4305, 5} true;
  assume {:verifier.code 0} true;
  $p76 := $i2p.i64.ref($i75);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4305, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p76, 350);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4306, 17} true;
  assume {:verifier.code 0} true;
  $i77 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4306, 52} true;
  assume {:verifier.code 0} true;
  $i78 := $add.i64($i77, 35);
  // WARNING: %88 = add i64 %87, 35, !dbg !3910, !verifier.code !3694
  call {:cexpr "__cil_tmp48"} boogie_si_record_i64($i78);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4307, 5} true;
  assume {:verifier.code 0} true;
  $p79 := $i2p.i64.ref($i78);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4307, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i8($M.1, $p79, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4308, 17} true;
  assume {:verifier.code 0} true;
  $i80 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4308, 52} true;
  assume {:verifier.code 0} true;
  $i81 := $add.i64($i80, 35);
  // WARNING: %91 = add i64 %90, 35, !dbg !3916, !verifier.code !3694
  call {:cexpr "__cil_tmp49"} boogie_si_record_i64($i81);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4309, 19} true;
  assume {:verifier.code 0} true;
  $p82 := $i2p.i64.ref($i81);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4309, 17} true;
  assume {:verifier.code 0} true;
  $i83 := $load.i8($M.1, $p82);
  // WARNING: %93 = load i8, i8* %92, align 1, !dbg !3920, !verifier.code !3694
  call {:cexpr "__cil_tmp50"} boogie_si_record_i8($i83);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4310, 17} true;
  assume {:verifier.code 0} true;
  $i84 := $zext.i8.i64($i83);
  // WARNING: %94 = zext i8 %93 to i64, !dbg !3923, !verifier.code !3694
  call {:cexpr "__cil_tmp51"} boogie_si_record_i64($i84);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4311, 29} true;
  assume {:verifier.code 0} true;
  $i85 := $and.i64($i84, 1);
  // WARNING: %95 = and i64 %94, 1, !dbg !3926, !verifier.code !3694
  call {:cexpr "__cil_tmp52"} boogie_si_record_i64($i85);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4312, 13} true;
  assume {:verifier.code 0} true;
  call $i86 := __builtinx_expect.i64.i64($i85, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4312, 13} true;
  assume {:verifier.code 0} true;
  $i87 := $sext.i32.i64($i86);
  // WARNING: %97 = sext i32 %96 to i64, !dbg !3929, !verifier.code !3694
  call {:cexpr "tmp___0"} boogie_si_record_i64($i87);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4314, 15} true;
  assume {:verifier.code 0} true;
  $i88 := $ne.i64($i87, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4314, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i88} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i88 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4316, 5} true;
  assume {:verifier.code 0} true;
  call $i89 := __dynamic_pr_debug.ref.ref($p2, .str.5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4318, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume !(($i88 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4321, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const mtdblock_flush: ref;
axiom (mtdblock_flush == $sub.ref(0, 32716));
procedure  mtdblock_flush($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4340, 12} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4341, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p1);
  // WARNING: %3 = ptrtoint %struct.mtdblk_dev* %2 to i64, !dbg !3705, !verifier.code !3697
  call {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4342, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $add.i64($i2, 360);
  // WARNING: %4 = add i64 %3, 360, !dbg !3708, !verifier.code !3697
  call {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4343, 16} true;
  assume {:verifier.code 0} true;
  $p4 := $i2p.i64.ref($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4344, 3} true;
  assume {:verifier.code 0} true;
  call mutex_lock_nested($p4, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4345, 3} true;
  assume {:verifier.code 0} true;
  call $i5 := write_cached_data($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4346, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $p2i.ref.i64($p1);
  // WARNING: %7 = ptrtoint %struct.mtdblk_dev* %2 to i64, !dbg !3716, !verifier.code !3697
  call {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4347, 27} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i64($i6, 360);
  // WARNING: %8 = add i64 %7, 360, !dbg !3719, !verifier.code !3697
  call {:cexpr "__cil_tmp8"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4348, 16} true;
  assume {:verifier.code 0} true;
  $p8 := $i2p.i64.ref($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4349, 3} true;
  assume {:verifier.code 0} true;
  call mutex_unlock($p8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4350, 17} true;
  assume {:verifier.code 0} true;
  $i9 := $p2i.ref.i64($p0);
  // WARNING: %10 = ptrtoint %struct.mtd_blktrans_dev* %0 to i64, !dbg !3726, !verifier.code !3697
  call {:cexpr "__cil_tmp10"} boogie_si_record_i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4351, 29} true;
  assume {:verifier.code 0} true;
  $i10 := $add.i64($i9, 24);
  // WARNING: %11 = add i64 %10, 24, !dbg !3729, !verifier.code !3697
  call {:cexpr "__cil_tmp11"} boogie_si_record_i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4352, 19} true;
  assume {:verifier.code 0} true;
  $p11 := $i2p.i64.ref($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4352, 17} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.1, $p11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4353, 3} true;
  assume {:verifier.code 0} true;
  call mtd_sync($p12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4355, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const mtdblock_readsect: ref;
axiom (mtdblock_readsect == $sub.ref(0, 33748));
procedure  mtdblock_readsect($p0: ref, $i1: i64, $p2: ref)
  returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.mtd_blktrans_dev* %0, i64 0, metadata !4412, metadata !3695), !dbg !4413, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3855, 12} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3856, 22} true;
  assume {:verifier.code 0} true;
  $i4 := $shl.i64($i1, 9);
  // WARNING: %5 = shl i64 %1, 9, !dbg !3709, !verifier.code !3697
  call {:cexpr "__cil_tmp7"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3857, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := do_cached_read($p3, $i4, 512, $p2);
  // WARNING: %6 = call i32 @do_cached_read(%struct.mtdblk_dev* %4, i64 %5, i32 512, i8* %2), !dbg !3712, !verifier.code !3697
  call {:cexpr "tmp"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3859, 3} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const mtdblock_writesect: ref;
axiom (mtdblock_writesect == $sub.ref(0, 34780));
procedure  mtdblock_writesect($p0: ref, $i1: i64, $p2: ref)
  returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i32;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i32;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i47: i64;
  var $i48: i32;
  var $i46: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.mtd_blktrans_dev* %0, i64 0, metadata !4433, metadata !3695), !dbg !4434, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3905, 12} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3907, 17} true;
  assume {:verifier.code 0} true;
  $i4 := $p2i.ref.i64($0.ref);
  // WARNING: %5 = ptrtoint i8* null to i64, !dbg !3711, !verifier.code !3697
  call {:cexpr "__cil_tmp11"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3908, 17} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p3);
  // WARNING: %6 = ptrtoint %struct.mtdblk_dev* %4 to i64, !dbg !3714, !verifier.code !3697
  call {:cexpr "__cil_tmp12"} boogie_si_record_i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3909, 29} true;
  assume {:verifier.code 0} true;
  $i6 := $add.i64($i5, 528);
  // WARNING: %7 = add i64 %6, 528, !dbg !3717, !verifier.code !3697
  call {:cexpr "__cil_tmp13"} boogie_si_record_i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3910, 19} true;
  assume {:verifier.code 0} true;
  $p7 := $i2p.i64.ref($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3910, 17} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.1, $p7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3911, 17} true;
  assume {:verifier.code 0} true;
  $i9 := $p2i.ref.i64($p8);
  // WARNING: %10 = ptrtoint i8* %9 to i64, !dbg !3724, !verifier.code !3697
  call {:cexpr "__cil_tmp15"} boogie_si_record_i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3912, 29} true;
  assume {:verifier.code 0} true;
  $i10 := $eq.i64($i9, $i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3912, 29} true;
  assume {:verifier.code 0} true;
  $i11 := $zext.i1.i32($i10);
  // WARNING: %12 = zext i1 %11 to i32, !dbg !3727, !verifier.code !3697
  call {:cexpr "__cil_tmp16"} boogie_si_record_i32($i11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3913, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $sext.i32.i64($i11);
  // WARNING: %13 = sext i32 %12 to i64, !dbg !3730, !verifier.code !3697
  call {:cexpr "__cil_tmp17"} boogie_si_record_i64($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3914, 13} true;
  assume {:verifier.code 0} true;
  call $i13 := __builtinx_expect.i64.i64($i12, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3914, 13} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.i32.i64($i13);
  // WARNING: %15 = sext i32 %14 to i64, !dbg !3733, !verifier.code !3697
  call {:cexpr "tmp___0"} boogie_si_record_i64($i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3916, 15} true;
  assume {:verifier.code 0} true;
  $i15 := $ne.i64($i14, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3916, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i15 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3918, 19} true;
  assume {:verifier.code 0} true;
  $i16 := $p2i.ref.i64($p3);
  // WARNING: %18 = ptrtoint %struct.mtdblk_dev* %4 to i64, !dbg !3739, !verifier.code !3697
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3919, 31} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i64($i16, 544);
  // WARNING: %19 = add i64 %18, 544, !dbg !3744, !verifier.code !3697
  call {:cexpr "__cil_tmp19"} boogie_si_record_i64($i17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3920, 21} true;
  assume {:verifier.code 0} true;
  $p18 := $i2p.i64.ref($i17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3920, 19} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i32($M.1, $p18);
  // WARNING: %21 = load i32, i32* %20, align 4, !dbg !3748, !verifier.code !3697
  call {:cexpr "__cil_tmp20"} boogie_si_record_i32($i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3921, 31} true;
  assume {:verifier.code 0} true;
  $i20 := $ne.i32($i19, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3921, 31} true;
  assume {:verifier.code 0} true;
  $i21 := $zext.i1.i32($i20);
  // WARNING: %23 = zext i1 %22 to i32, !dbg !3751, !verifier.code !3697
  call {:cexpr "__cil_tmp21"} boogie_si_record_i32($i21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3922, 19} true;
  assume {:verifier.code 0} true;
  $i22 := $sext.i32.i64($i21);
  // WARNING: %24 = sext i32 %23 to i64, !dbg !3754, !verifier.code !3697
  call {:cexpr "__cil_tmp22"} boogie_si_record_i64($i22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3923, 15} true;
  assume {:verifier.code 0} true;
  call $i23 := __builtinx_expect.i64.i64($i22, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3923, 15} true;
  assume {:verifier.code 0} true;
  $i24 := $sext.i32.i64($i23);
  // WARNING: %26 = sext i32 %25 to i64, !dbg !3757, !verifier.code !3697
  call {:cexpr "tmp___1"} boogie_si_record_i64($i24);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3925, 17} true;
  assume {:verifier.code 0} true;
  $i25 := $ne.i64($i24, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3925, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i15 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb3:
  assume ($i25 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3928, 21} true;
  assume {:verifier.code 0} true;
  $i26 := $p2i.ref.i64($p3);
  // WARNING: %29 = ptrtoint %struct.mtdblk_dev* %4 to i64, !dbg !3765, !verifier.code !3697
  call {:cexpr "__cil_tmp24"} boogie_si_record_i64($i26);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3929, 33} true;
  assume {:verifier.code 0} true;
  $i27 := $add.i64($i26, 24);
  // WARNING: %30 = add i64 %29, 24, !dbg !3770, !verifier.code !3697
  call {:cexpr "__cil_tmp25"} boogie_si_record_i64($i27);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3930, 23} true;
  assume {:verifier.code 0} true;
  $p28 := $i2p.i64.ref($i27);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3930, 21} true;
  assume {:verifier.code 0} true;
  $p29 := $load.ref($M.1, $p28);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3931, 21} true;
  assume {:verifier.code 0} true;
  $i30 := $p2i.ref.i64($p29);
  // WARNING: %33 = ptrtoint %struct.mtd_info* %32 to i64, !dbg !3777, !verifier.code !3697
  call {:cexpr "__cil_tmp27"} boogie_si_record_i64($i30);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3932, 33} true;
  assume {:verifier.code 0} true;
  $i31 := $add.i64($i30, 16);
  // WARNING: %34 = add i64 %33, 16, !dbg !3780, !verifier.code !3697
  call {:cexpr "__cil_tmp28"} boogie_si_record_i64($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3933, 23} true;
  assume {:verifier.code 0} true;
  $p32 := $i2p.i64.ref($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3933, 21} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i32($M.1, $p32);
  // WARNING: %36 = load i32, i32* %35, align 4, !dbg !3784, !verifier.code !3697
  call {:cexpr "__cil_tmp29"} boogie_si_record_i32($i33);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3934, 21} true;
  assume {:verifier.code 0} true;
  $i34 := $zext.i32.i64($i33);
  // WARNING: %37 = zext i32 %36 to i64, !dbg !3787, !verifier.code !3697
  call {:cexpr "__cil_tmp30"} boogie_si_record_i64($i34);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3935, 13} true;
  assume {:verifier.code 0} true;
  call $p35 := ldv_vmalloc_19($i34);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3936, 21} true;
  assume {:verifier.code 0} true;
  $i36 := $p2i.ref.i64($p3);
  // WARNING: %39 = ptrtoint %struct.mtdblk_dev* %4 to i64, !dbg !3793, !verifier.code !3697
  call {:cexpr "__cil_tmp31"} boogie_si_record_i64($i36);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3937, 33} true;
  assume {:verifier.code 0} true;
  $i37 := $add.i64($i36, 528);
  // WARNING: %40 = add i64 %39, 528, !dbg !3796, !verifier.code !3697
  call {:cexpr "__cil_tmp32"} boogie_si_record_i64($i37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3938, 9} true;
  assume {:verifier.code 0} true;
  $p38 := $i2p.i64.ref($i37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3938, 40} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p38, $p35);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3942, 21} true;
  assume {:verifier.code 0} true;
  $i39 := $p2i.ref.i64($0.ref);
  // WARNING: %42 = ptrtoint i8* null to i64, !dbg !3803, !verifier.code !3697
  call {:cexpr "__cil_tmp34"} boogie_si_record_i64($i39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3943, 21} true;
  assume {:verifier.code 0} true;
  $i40 := $p2i.ref.i64($p3);
  // WARNING: %43 = ptrtoint %struct.mtdblk_dev* %4 to i64, !dbg !3807, !verifier.code !3697
  call {:cexpr "__cil_tmp35"} boogie_si_record_i64($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3944, 33} true;
  assume {:verifier.code 0} true;
  $i41 := $add.i64($i40, 528);
  // WARNING: %44 = add i64 %43, 528, !dbg !3810, !verifier.code !3697
  call {:cexpr "__cil_tmp36"} boogie_si_record_i64($i41);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3945, 23} true;
  assume {:verifier.code 0} true;
  $p42 := $i2p.i64.ref($i41);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3945, 21} true;
  assume {:verifier.code 0} true;
  $p43 := $load.ref($M.1, $p42);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3946, 21} true;
  assume {:verifier.code 0} true;
  $i44 := $p2i.ref.i64($p43);
  // WARNING: %47 = ptrtoint i8* %46 to i64, !dbg !3817, !verifier.code !3697
  call {:cexpr "__cil_tmp38"} boogie_si_record_i64($i44);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3947, 23} true;
  assume {:verifier.code 0} true;
  $i45 := $eq.i64($i44, $i39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3947, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb5, $bb6;
$bb4:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb5:
  assume ($i45 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3948, 9} true;
  assume {:verifier.code 0} true;
  $i46 := $sub.i32(0, 4);
  goto $bb7;
$bb6:
  assume !(($i45 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3966, 1} true;
  assume {:verifier.code 0} true;
  $r := $i46;
  $exn := false;
  return;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3953, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3956, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3960, 23} true;
  assume {:verifier.code 0} true;
  $i47 := $shl.i64($i1, 9);
  // WARNING: %56 = shl i64 %1, 9, !dbg !3827, !verifier.code !3697
  call {:cexpr "__cil_tmp39"} boogie_si_record_i64($i47);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3962, 13} true;
  assume {:verifier.code 0} true;
  call $i48 := do_cached_write($p3, $i47, 512, $p2);
  // WARNING: %57 = call i32 @do_cached_write(%struct.mtdblk_dev* %4, i64 %56, i32 512, i8* %2), !dbg !3833, !verifier.code !3697
  call {:cexpr "tmp___2"} boogie_si_record_i32($i48);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3964, 3} true;
  assume {:verifier.code 0} true;
  $i46 := $i48;
  goto $bb7;
}
const mtdblock_add_mtd: ref;
axiom (mtdblock_add_mtd == $sub.ref(0, 35812));
procedure  mtdblock_add_mtd($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4392, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := kzalloc(552, 208);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4393, 9} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4397, 16} true;
  assume {:verifier.code 0} true;
  $i4 := $p2i.ref.i64($0.ref);
  // WARNING: %5 = ptrtoint %struct.mtdblk_dev* null to i64, !dbg !3710, !verifier.code !3697
  call {:cexpr "__cil_tmp7"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4398, 16} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p3);
  // WARNING: %6 = ptrtoint %struct.mtdblk_dev* %4 to i64, !dbg !3714, !verifier.code !3697
  call {:cexpr "__cil_tmp8"} boogie_si_record_i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4399, 18} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i64($i5, $i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4399, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4400, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4452, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4406, 17} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p3);
  // WARNING: %11 = ptrtoint %struct.mtdblk_dev* %4 to i64, !dbg !3724, !verifier.code !3697
  call {:cexpr "__cil_tmp10"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4407, 29} true;
  assume {:verifier.code 0} true;
  $i8 := $add.i64($i7, 24);
  // WARNING: %12 = add i64 %11, 24, !dbg !3727, !verifier.code !3697
  call {:cexpr "__cil_tmp11"} boogie_si_record_i64($i8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4408, 5} true;
  assume {:verifier.code 0} true;
  $p9 := $i2p.i64.ref($i8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4408, 38} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p9, $p1);
  // WARNING: store %struct.mtd_info* %1, %struct.mtd_info** %13, align 8, !dbg !3731, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4410, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $p2i.ref.i64($p3);
  // WARNING: %14 = ptrtoint %struct.mtdblk_dev* %4 to i64, !dbg !3734, !verifier.code !3697
  call {:cexpr "__cil_tmp13"} boogie_si_record_i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4411, 29} true;
  assume {:verifier.code 0} true;
  $i11 := $add.i64($i10, 200);
  // WARNING: %15 = add i64 %14, 200, !dbg !3737, !verifier.code !3697
  call {:cexpr "__cil_tmp14"} boogie_si_record_i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4412, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $p2i.ref.i64($p1);
  // WARNING: %16 = ptrtoint %struct.mtd_info* %1 to i64, !dbg !3740, !verifier.code !3697
  call {:cexpr "__cil_tmp15"} boogie_si_record_i64($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4413, 29} true;
  assume {:verifier.code 0} true;
  $i13 := $add.i64($i12, 64);
  // WARNING: %17 = add i64 %16, 64, !dbg !3743, !verifier.code !3697
  call {:cexpr "__cil_tmp16"} boogie_si_record_i64($i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4414, 29} true;
  assume {:verifier.code 0} true;
  $p14 := $i2p.i64.ref($i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4414, 27} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i32($M.1, $p14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4414, 5} true;
  assume {:verifier.code 0} true;
  $p16 := $i2p.i64.ref($i11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4414, 25} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p16, $i15);
  // WARNING: store i32 %19, i32* %20, align 4, !dbg !3749, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4416, 17} true;
  assume {:verifier.code 0} true;
  $i17 := $p2i.ref.i64($p3);
  // WARNING: %21 = ptrtoint %struct.mtdblk_dev* %4 to i64, !dbg !3752, !verifier.code !3697
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4417, 29} true;
  assume {:verifier.code 0} true;
  $i18 := $add.i64($i17, 208);
  // WARNING: %22 = add i64 %21, 208, !dbg !3755, !verifier.code !3697
  call {:cexpr "__cil_tmp19"} boogie_si_record_i64($i18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4418, 17} true;
  assume {:verifier.code 0} true;
  $i19 := $p2i.ref.i64($p1);
  // WARNING: %23 = ptrtoint %struct.mtd_info* %1 to i64, !dbg !3758, !verifier.code !3697
  call {:cexpr "__cil_tmp20"} boogie_si_record_i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4419, 29} true;
  assume {:verifier.code 0} true;
  $i20 := $add.i64($i19, 8);
  // WARNING: %24 = add i64 %23, 8, !dbg !3761, !verifier.code !3697
  call {:cexpr "__cil_tmp21"} boogie_si_record_i64($i20);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4420, 19} true;
  assume {:verifier.code 0} true;
  $p21 := $i2p.i64.ref($i20);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4420, 17} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i64($M.1, $p21);
  // WARNING: %26 = load i64, i64* %25, align 8, !dbg !3765, !verifier.code !3697
  call {:cexpr "__cil_tmp22"} boogie_si_record_i64($i22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4421, 29} true;
  assume {:verifier.code 0} true;
  $i23 := $lshr.i64($i22, 9);
  // WARNING: %27 = lshr i64 %26, 9, !dbg !3768, !verifier.code !3697
  call {:cexpr "__cil_tmp23"} boogie_si_record_i64($i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4422, 5} true;
  assume {:verifier.code 0} true;
  $p24 := $i2p.i64.ref($i18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4422, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i64($M.1, $p24, $i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4423, 3} true;
  assume {:verifier.code 0} true;
  $p25 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4423, 38} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p25, $p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4425, 17} true;
  assume {:verifier.code 0} true;
  $i26 := $p2i.ref.i64($p1);
  // WARNING: %30 = ptrtoint %struct.mtd_info* %1 to i64, !dbg !3775, !verifier.code !3697
  call {:cexpr "__cil_tmp24"} boogie_si_record_i64($i26);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4426, 29} true;
  assume {:verifier.code 0} true;
  $i27 := $add.i64($i26, 4);
  // WARNING: %31 = add i64 %30, 4, !dbg !3779, !verifier.code !3697
  call {:cexpr "__cil_tmp25"} boogie_si_record_i64($i27);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4427, 19} true;
  assume {:verifier.code 0} true;
  $p28 := $i2p.i64.ref($i27);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4427, 17} true;
  assume {:verifier.code 0} true;
  $i29 := $load.i32($M.1, $p28);
  // WARNING: %33 = load i32, i32* %32, align 4, !dbg !3783, !verifier.code !3697
  call {:cexpr "__cil_tmp26"} boogie_si_record_i32($i29);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4428, 29} true;
  assume {:verifier.code 0} true;
  $i30 := $and.i32($i29, 1024);
  // WARNING: %34 = and i32 %33, 1024, !dbg !3786, !verifier.code !3697
  call {:cexpr "__cil_tmp27"} boogie_si_record_i32($i30);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4429, 19} true;
  assume {:verifier.code 0} true;
  $i31 := $eq.i32($i30, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4429, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i31 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4431, 19} true;
  assume {:verifier.code 0} true;
  $i32 := $p2i.ref.i64($p3);
  // WARNING: %37 = ptrtoint %struct.mtdblk_dev* %4 to i64, !dbg !3794, !verifier.code !3697
  call {:cexpr "__cil_tmp29"} boogie_si_record_i64($i32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4432, 31} true;
  assume {:verifier.code 0} true;
  $i33 := $add.i64($i32, 216);
  // WARNING: %38 = add i64 %37, 216, !dbg !3798, !verifier.code !3697
  call {:cexpr "__cil_tmp30"} boogie_si_record_i64($i33);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4433, 7} true;
  assume {:verifier.code 0} true;
  $p34 := $i2p.i64.ref($i33);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4433, 27} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p34, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4434, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i31 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4439, 17} true;
  assume {:verifier.code 0} true;
  $p35 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4440, 13} true;
  assume {:verifier.code 0} true;
  call $i36 := add_mtd_blktrans_dev($p35);
  // WARNING: %43 = call i32 @add_mtd_blktrans_dev(%struct.mtd_blktrans_dev* %42), !dbg !3808, !verifier.code !3697
  call {:cexpr "tmp___0"} boogie_si_record_i32($i36);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4442, 15} true;
  assume {:verifier.code 0} true;
  $i37 := $ne.i32($i36, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4442, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i37 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4444, 19} true;
  assume {:verifier.code 0} true;
  $p38 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4445, 5} true;
  assume {:verifier.code 0} true;
  call kfree($p38);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4447, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i37 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4450, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const mtdblock_remove_dev: ref;
axiom (mtdblock_remove_dev == $sub.ref(0, 36844));
procedure  mtdblock_remove_dev($p0: ref)
{
  var $i1: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4458, 3} true;
  assume {:verifier.code 0} true;
  call $i1 := del_mtd_blktrans_dev($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4460, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const cleanup_mtdblock: ref;
axiom (cleanup_mtdblock == $sub.ref(0, 37876));
procedure  cleanup_mtdblock()
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4485, 3} true;
  assume {:verifier.code 0} true;
  call $i0 := deregister_mtd_blktrans(mtdblock_tr);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4487, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_check_final_state: ref;
axiom (ldv_check_final_state == $sub.ref(0, 38908));
procedure  ldv_check_final_state();
const deregister_mtd_blktrans: ref;
axiom (deregister_mtd_blktrans == $sub.ref(0, 39940));
procedure  deregister_mtd_blktrans($p0: ref)
  returns ($r: i32);
const del_mtd_blktrans_dev: ref;
axiom (del_mtd_blktrans_dev == $sub.ref(0, 40972));
procedure  del_mtd_blktrans_dev($p0: ref)
  returns ($r: i32);
const kzalloc: ref;
axiom (kzalloc == $sub.ref(0, 42004));
procedure  kzalloc($i0: i64, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !4718, metadata !3695), !dbg !4719, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4743, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_alloc_flags($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4744, 9} true;
  assume {:verifier.code 1} true;
  call $p2 := __VERIFIER_nondet_pointer();
  call {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4746, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const add_mtd_blktrans_dev: ref;
axiom (add_mtd_blktrans_dev == $sub.ref(0, 43036));
procedure  add_mtd_blktrans_dev($p0: ref)
  returns ($r: i32);
const kfree: ref;
axiom (kfree == $sub.ref(0, 44068));
procedure  kfree($p0: ref);
const ldv_check_alloc_flags: ref;
axiom (ldv_check_alloc_flags == $sub.ref(0, 45100));
procedure  ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4646, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $M.2;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4646, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4646, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4647, 15} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i0, 32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4647, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4649, 7} true;
  assume {:verifier.code 0} true;
  call ldv_blast_assert();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4651, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4654, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4657, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_blast_assert: ref;
axiom (ldv_blast_assert == $sub.ref(0, 46132));
procedure  ldv_blast_assert()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4636, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4637, 10} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4639, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __builtinx_expect: ref;
axiom (__builtinx_expect == $sub.ref(0, 47164));
procedure  __builtinx_expect.i64.i64(p.0: i64, p.1: i64)
  returns ($r: i32);
const ldv_vmalloc_19: ref;
axiom (ldv_vmalloc_19 == $sub.ref(0, 48196));
procedure  ldv_vmalloc_19($i0: i64)
  returns ($r: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4754, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_alloc_nonatomic();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4755, 3} true;
  assume {:verifier.code 0} true;
  call $p1 := vmalloc($i0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4757, 3} true;
  assume {:verifier.code 0} true;
  $r := $0.ref;
  $exn := false;
  return;
}
const do_cached_write: ref;
axiom (do_cached_write == $sub.ref(0, 49228));
procedure  do_cached_write($p0: ref, $i1: i64, $i2: i32, $p3: ref)
  returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i8;
  var $i34: i64;
  var $i35: i64;
  var $i36: i32;
  var $i37: i64;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i64;
  var $i46: i32;
  var $i48: i1;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i64;
  var $i102: i64;
  var $i103: i1;
  var $i104: i64;
  var $i105: i64;
  var $p106: ref;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $p112: ref;
  var $i113: i64;
  var $i114: i64;
  var $i115: i64;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i64;
  var $i122: i64;
  var $p123: ref;
  var $p66: ref;
  var $i124: i64;
  var $p125: ref;
  var $i126: i64;
  var $i127: i64;
  var $i128: i32;
  var $i129: i1;
  var $i49: i64;
  var $i50: i32;
  var $p51: ref;
  var $i47: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata %struct.mtdblk_dev* %0, i64 0, metadata !4767, metadata !3695), !dbg !4768, !verifier.code !3697
  // WARNING: call void @llvm.dbg.value(metadata i64 %1, i64 0, metadata !4769, metadata !3695), !dbg !4770, !verifier.code !3697
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: call void @llvm.dbg.declare(metadata %struct._ddebug* %6, metadata !4777, metadata !3695), !dbg !4778, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3455, 17} true;
  assume {:verifier.code 0} true;
  $i6 := $p2i.ref.i64($p0);
  // WARNING: %7 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3720, !verifier.code !3696
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3456, 29} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i64($i6, 24);
  // WARNING: %8 = add i64 %7, 24, !dbg !3725, !verifier.code !3696
  call {:cexpr "__cil_tmp19"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3457, 11} true;
  assume {:verifier.code 0} true;
  $p8 := $i2p.i64.ref($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3457, 9} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.1, $p8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3458, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $p2i.ref.i64($p0);
  // WARNING: %11 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3732, !verifier.code !3696
  call {:cexpr "__cil_tmp20"} boogie_si_record_i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3459, 29} true;
  assume {:verifier.code 0} true;
  $i11 := $add.i64($i10, 544);
  // WARNING: %12 = add i64 %11, 544, !dbg !3735, !verifier.code !3696
  call {:cexpr "__cil_tmp21"} boogie_si_record_i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3460, 17} true;
  assume {:verifier.code 0} true;
  $p12 := $i2p.i64.ref($i11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3460, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.1, $p12);
  // WARNING: %14 = load i32, i32* %13, align 4, !dbg !3739, !verifier.code !3696
  call {:cexpr "sect_size"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3462, 3} true;
  assume {:verifier.code 0} true;
  $p14 := $bitcast.ref.ref($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3462, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p14, .str);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3463, 17} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3463, 48} true;
  assume {:verifier.code 0} true;
  $i16 := $add.i64($i15, 8);
  // WARNING: %17 = add i64 %16, 8, !dbg !3748, !verifier.code !3696
  call {:cexpr "__cil_tmp23"} boogie_si_record_i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3464, 5} true;
  assume {:verifier.code 0} true;
  $p17 := $i2p.i64.ref($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3464, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p17, .str.16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3465, 17} true;
  assume {:verifier.code 0} true;
  $i18 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3465, 48} true;
  assume {:verifier.code 0} true;
  $i19 := $add.i64($i18, 16);
  // WARNING: %20 = add i64 %19, 16, !dbg !3754, !verifier.code !3696
  call {:cexpr "__cil_tmp24"} boogie_si_record_i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3466, 5} true;
  assume {:verifier.code 0} true;
  $p20 := $i2p.i64.ref($i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3466, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p20, .str.2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3467, 17} true;
  assume {:verifier.code 0} true;
  $i21 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3467, 48} true;
  assume {:verifier.code 0} true;
  $i22 := $add.i64($i21, 24);
  // WARNING: %23 = add i64 %22, 24, !dbg !3760, !verifier.code !3696
  call {:cexpr "__cil_tmp25"} boogie_si_record_i64($i22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3468, 5} true;
  assume {:verifier.code 0} true;
  $p23 := $i2p.i64.ref($i22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3468, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p23, .str.17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3469, 17} true;
  assume {:verifier.code 0} true;
  $i24 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3469, 48} true;
  assume {:verifier.code 0} true;
  $i25 := $add.i64($i24, 32);
  // WARNING: %26 = add i64 %25, 32, !dbg !3766, !verifier.code !3696
  call {:cexpr "__cil_tmp26"} boogie_si_record_i64($i25);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3470, 5} true;
  assume {:verifier.code 0} true;
  $p26 := $i2p.i64.ref($i25);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3470, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p26, 167);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3471, 17} true;
  assume {:verifier.code 0} true;
  $i27 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3471, 48} true;
  assume {:verifier.code 0} true;
  $i28 := $add.i64($i27, 35);
  // WARNING: %29 = add i64 %28, 35, !dbg !3772, !verifier.code !3696
  call {:cexpr "__cil_tmp27"} boogie_si_record_i64($i28);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3472, 5} true;
  assume {:verifier.code 0} true;
  $p29 := $i2p.i64.ref($i28);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3472, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i8($M.1, $p29, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3473, 17} true;
  assume {:verifier.code 0} true;
  $i30 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3473, 48} true;
  assume {:verifier.code 0} true;
  $i31 := $add.i64($i30, 35);
  // WARNING: %32 = add i64 %31, 35, !dbg !3778, !verifier.code !3696
  call {:cexpr "__cil_tmp28"} boogie_si_record_i64($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3474, 19} true;
  assume {:verifier.code 0} true;
  $p32 := $i2p.i64.ref($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3474, 17} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i8($M.1, $p32);
  // WARNING: %34 = load i8, i8* %33, align 1, !dbg !3782, !verifier.code !3696
  call {:cexpr "__cil_tmp29"} boogie_si_record_i8($i33);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3475, 17} true;
  assume {:verifier.code 0} true;
  $i34 := $zext.i8.i64($i33);
  // WARNING: %35 = zext i8 %34 to i64, !dbg !3785, !verifier.code !3696
  call {:cexpr "__cil_tmp30"} boogie_si_record_i64($i34);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3476, 29} true;
  assume {:verifier.code 0} true;
  $i35 := $and.i64($i34, 1);
  // WARNING: %36 = and i64 %35, 1, !dbg !3788, !verifier.code !3696
  call {:cexpr "__cil_tmp31"} boogie_si_record_i64($i35);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3477, 9} true;
  assume {:verifier.code 0} true;
  call $i36 := __builtinx_expect.i64.i64($i35, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3477, 9} true;
  assume {:verifier.code 0} true;
  $i37 := $sext.i32.i64($i36);
  // WARNING: %38 = sext i32 %37 to i64, !dbg !3791, !verifier.code !3696
  call {:cexpr "tmp"} boogie_si_record_i64($i37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3479, 11} true;
  assume {:verifier.code 0} true;
  $i38 := $ne.i64($i37, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3479, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i38 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3481, 19} true;
  assume {:verifier.code 0} true;
  $i39 := $p2i.ref.i64($p9);
  // WARNING: %41 = ptrtoint %struct.mtd_info* %10 to i64, !dbg !3797, !verifier.code !3696
  call {:cexpr "__cil_tmp32"} boogie_si_record_i64($i39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3482, 31} true;
  assume {:verifier.code 0} true;
  $i40 := $add.i64($i39, 56);
  // WARNING: %42 = add i64 %41, 56, !dbg !3802, !verifier.code !3696
  call {:cexpr "__cil_tmp33"} boogie_si_record_i64($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3483, 21} true;
  assume {:verifier.code 0} true;
  $p41 := $i2p.i64.ref($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3483, 19} true;
  assume {:verifier.code 0} true;
  $p42 := $load.ref($M.1, $p41);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3484, 5} true;
  assume {:verifier.code 0} true;
  call $i43 := __dynamic_pr_debug.ref.ref.ref.i64.i32($p5, .str.17, $p42, $i1, $i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3487, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i38 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3490, 17} true;
  assume {:verifier.code 0} true;
  $i44 := $eq.i32($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3490, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i44 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3493, 19} true;
  assume {:verifier.code 0} true;
  $i45 := $sext.i32.i64($i2);
  // WARNING: %50 = sext i32 %2 to i64, !dbg !3816, !verifier.code !3696
  call {:cexpr "__cil_tmp36"} boogie_si_record_i64($i45);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3495, 15} true;
  assume {:verifier.code 0} true;
  call $i46 := mtd_write($p9, $i1, $i45, $p4, $p3);
  // WARNING: %51 = call i32 @mtd_write(%struct.mtd_info* %10, i64 %1, i64 %50, i64* %5, i8* %3), !dbg !3823, !verifier.code !3696
  call {:cexpr "tmp___0"} boogie_si_record_i32($i46);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3497, 5} true;
  assume {:verifier.code 0} true;
  $i47 := $i46;
  goto $bb6;
$bb5:
  assume !(($i44 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3643, 1} true;
  assume {:verifier.code 0} true;
  $r := $i47;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3635, 11} true;
  assume {:verifier.code 0} true;
  $i48 := $sgt.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3635, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i48} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i48 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3635, 7} true;
  assume {:verifier.code 0} true;
  $i49, $i50, $p51 := $i1, $i2, $p3;
  goto $bb11;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3635, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i48 == 1));
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3638, 5} true;
  assume {:verifier.code 0} true;
  goto $bb46;
$bb11:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3636, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3503, 17} true;
  assume {:verifier.code 0} true;
  $i52 := $zext.i32.i64($i13);
  // WARNING: %56 = zext i32 %14 to i64, !dbg !3830, !verifier.code !3696
  call {:cexpr "__cil_tmp38"} boogie_si_record_i64($i52);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3504, 17} true;
  assume {:verifier.code 0} true;
  $i53 := $zext.i32.i64($i13);
  // WARNING: %57 = zext i32 %14 to i64, !dbg !3833, !verifier.code !3696
  call {:cexpr "__cil_tmp39"} boogie_si_record_i64($i53);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3505, 21} true;
  assume {:verifier.code 0} true;
  $i54 := $udiv.i64($i49, $i53);
  // WARNING: %58 = udiv i64 %.0211, %57, !dbg !3836, !verifier.code !3696
  call {:cexpr "__cil_tmp40"} boogie_si_record_i64($i54);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3506, 28} true;
  assume {:verifier.code 0} true;
  $i55 := $mul.i64($i54, $i52);
  // WARNING: %59 = mul i64 %58, %56, !dbg !3839, !verifier.code !3696
  call {:cexpr "sect_start"} boogie_si_record_i64($i55);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3507, 17} true;
  assume {:verifier.code 0} true;
  $i56 := $trunc.i64.i32($i55);
  // WARNING: %60 = trunc i64 %59 to i32, !dbg !3842, !verifier.code !3696
  call {:cexpr "__cil_tmp41"} boogie_si_record_i32($i56);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3508, 17} true;
  assume {:verifier.code 0} true;
  $i57 := $trunc.i64.i32($i49);
  // WARNING: %61 = trunc i64 %.0211 to i32, !dbg !3845, !verifier.code !3696
  call {:cexpr "__cil_tmp42"} boogie_si_record_i32($i57);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3509, 24} true;
  assume {:verifier.code 0} true;
  $i58 := $sub.i32($i57, $i56);
  // WARNING: %62 = sub i32 %61, %60, !dbg !3848, !verifier.code !3696
  call {:cexpr "offset"} boogie_si_record_i32($i58);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3510, 20} true;
  assume {:verifier.code 0} true;
  $i59 := $sub.i32($i13, $i58);
  // WARNING: %63 = sub i32 %14, %62, !dbg !3851, !verifier.code !3696
  call {:cexpr "size"} boogie_si_record_i32($i59);
  // WARNING: call void @llvm.dbg.value(metadata i32 %63, i64 0, metadata !4912, metadata !3695), !dbg !4913, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3513, 19} true;
  assume {:verifier.code 0} true;
  $i60 := $ult.i32($i50, $i59);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3513, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i60} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i60 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3515, 3} true;
  assume {:verifier.code 0} true;
  $i61 := $i50;
  goto $bb15;
$bb14:
  assume !(($i60 == 1));
  assume {:verifier.code 0} true;
  $i61 := $i59;
  goto $bb15;
$bb15:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3519, 12} true;
  assume {:verifier.code 0} true;
  $i62 := $eq.i32($i61, $i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3519, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i62} true;
  goto $bb16, $bb17;
$bb16:
  assume ($i62 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3522, 11} true;
  assume {:verifier.code 0} true;
  call $i63 := erase_write($p9, $i49, $i61, $p51);
  // WARNING: %70 = call i32 @erase_write(%struct.mtd_info* %10, i64 %.0211, i32 %.01, i8* %.048), !dbg !3867, !verifier.code !3696
  call {:cexpr "ret"} boogie_si_record_i32($i63);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3524, 13} true;
  assume {:verifier.code 0} true;
  $i64 := $ne.i32($i63, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3524, 9} true;
  assume {:verifier.code 0} true;
  $i65 := $i63;
  assume {:branchcond $i64} true;
  goto $bb18, $bb19;
$bb17:
  assume !(($i62 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3531, 19} true;
  assume {:verifier.code 0} true;
  $i67 := $p2i.ref.i64($p0);
  // WARNING: %76 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3878, !verifier.code !3696
  call {:cexpr "__cil_tmp45"} boogie_si_record_i64($i67);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3532, 31} true;
  assume {:verifier.code 0} true;
  $i68 := $add.i64($i67, 548);
  // WARNING: %77 = add i64 %76, 548, !dbg !3883, !verifier.code !3696
  call {:cexpr "__cil_tmp46"} boogie_si_record_i64($i68);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3533, 21} true;
  assume {:verifier.code 0} true;
  $p69 := $i2p.i64.ref($i68);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3533, 19} true;
  assume {:verifier.code 0} true;
  $i70 := $load.i32($M.1, $p69);
  // WARNING: %79 = load i32, i32* %78, align 4, !dbg !3887, !verifier.code !3696
  call {:cexpr "__cil_tmp47"} boogie_si_record_i32($i70);
  // WARNING: call void @llvm.dbg.value(metadata i32 %79, i64 0, metadata !4948, metadata !3695), !dbg !4949, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3535, 21} true;
  assume {:verifier.code 0} true;
  $i71 := $eq.i32($i70, 2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3535, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i71} true;
  goto $bb22, $bb23;
$bb18:
  assume ($i64 == 1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3525, 7} true;
  assume {:verifier.code 0} true;
  $i47 := $i65;
  goto $bb6;
$bb19:
  assume !(($i64 == 1));
  assume {:verifier.code 0} true;
  goto $bb20;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3529, 3} true;
  assume {:verifier.code 0} true;
  $p66 := $p51;
  goto $bb21;
$bb21:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3627, 17} true;
  assume {:verifier.code 0} true;
  $i124 := $zext.i32.i64($i61);
  // WARNING: %154 = zext i32 %.01 to i64, !dbg !4058, !verifier.code !3696
  call {:cexpr "__cil_tmp84"} boogie_si_record_i64($i124);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3628, 13} true;
  assume {:verifier.code 0} true;
  $p125 := $add.ref($p66, $mul.ref($i124, 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3629, 17} true;
  assume {:verifier.code 0} true;
  $i126 := $zext.i32.i64($i61);
  // WARNING: %156 = zext i32 %.01 to i64, !dbg !4062, !verifier.code !3696
  call {:cexpr "__cil_tmp85"} boogie_si_record_i64($i126);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3630, 21} true;
  assume {:verifier.code 0} true;
  $i127 := $add.i64($i126, $i49);
  // WARNING: %157 = add i64 %156, %.0211, !dbg !4065, !verifier.code !3696
  call {:cexpr "pos"} boogie_si_record_i64($i127);
  // WARNING: call void @llvm.dbg.value(metadata i64 %157, i64 0, metadata !4769, metadata !3695), !dbg !4770, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3632, 29} true;
  assume {:verifier.code 0} true;
  $i128 := $sub.i32($i50, $i61);
  // WARNING: %158 = sub i32 %.0310, %.01, !dbg !4068, !verifier.code !3696
  call {:cexpr "__cil_tmp87"} boogie_si_record_i32($i128);
  // WARNING: call void @llvm.dbg.value(metadata i32 %158, i64 0, metadata !5129, metadata !3695), !dbg !5130, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3635, 11} true;
  assume {:verifier.code 0} true;
  $i129 := $sgt.i32($i128, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3635, 7} true;
  assume {:verifier.code 0} true;
  $i49, $i50, $p51 := $i127, $i128, $p125;
  assume {:branchcond $i129} true;
  goto $bb44, $bb45;
$bb22:
  assume ($i71 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3537, 21} true;
  assume {:verifier.code 0} true;
  $i72 := $p2i.ref.i64($p0);
  // WARNING: %82 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3895, !verifier.code !3696
  call {:cexpr "__cil_tmp49"} boogie_si_record_i64($i72);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3538, 33} true;
  assume {:verifier.code 0} true;
  $i73 := $add.i64($i72, 536);
  // WARNING: %83 = add i64 %82, 536, !dbg !3900, !verifier.code !3696
  call {:cexpr "__cil_tmp50"} boogie_si_record_i64($i73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3539, 23} true;
  assume {:verifier.code 0} true;
  $p74 := $i2p.i64.ref($i73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3539, 21} true;
  assume {:verifier.code 0} true;
  $i75 := $load.i64($M.1, $p74);
  // WARNING: %85 = load i64, i64* %84, align 8, !dbg !3904, !verifier.code !3696
  call {:cexpr "__cil_tmp51"} boogie_si_record_i64($i75);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3540, 23} true;
  assume {:verifier.code 0} true;
  $i76 := $ne.i64($i75, $i55);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3540, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i76} true;
  goto $bb24, $bb25;
$bb23:
  assume !(($i71 == 1));
  assume {:verifier.code 0} true;
  goto $bb30;
$bb24:
  assume ($i76 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3542, 15} true;
  assume {:verifier.code 0} true;
  call $i77 := write_cached_data($p0);
  // WARNING: %88 = call i32 @write_cached_data(%struct.mtdblk_dev* %0), !dbg !3910, !verifier.code !3696
  call {:cexpr "ret"} boogie_si_record_i32($i77);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3544, 17} true;
  assume {:verifier.code 0} true;
  $i78 := $ne.i32($i77, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3544, 13} true;
  assume {:verifier.code 0} true;
  $i79 := $i77;
  assume {:branchcond $i78} true;
  goto $bb26, $bb27;
$bb25:
  assume !(($i76 == 1));
  assume {:verifier.code 0} true;
  goto $bb29;
$bb26:
  assume ($i78 == 1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3545, 11} true;
  assume {:verifier.code 0} true;
  $i47 := $i79;
  goto $bb6;
$bb27:
  assume !(($i78 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3549, 7} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb29:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3553, 5} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3558, 19} true;
  assume {:verifier.code 0} true;
  $i80 := $p2i.ref.i64($p0);
  // WARNING: %97 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3920, !verifier.code !3696
  call {:cexpr "__cil_tmp52"} boogie_si_record_i64($i80);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3559, 31} true;
  assume {:verifier.code 0} true;
  $i81 := $add.i64($i80, 548);
  // WARNING: %98 = add i64 %97, 548, !dbg !3924, !verifier.code !3696
  call {:cexpr "__cil_tmp53"} boogie_si_record_i64($i81);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3560, 21} true;
  assume {:verifier.code 0} true;
  $p82 := $i2p.i64.ref($i81);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3560, 19} true;
  assume {:verifier.code 0} true;
  $i83 := $load.i32($M.1, $p82);
  // WARNING: %100 = load i32, i32* %99, align 4, !dbg !3928, !verifier.code !3696
  call {:cexpr "__cil_tmp54"} boogie_si_record_i32($i83);
  // WARNING: call void @llvm.dbg.value(metadata i32 %100, i64 0, metadata !4989, metadata !3695), !dbg !4990, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3562, 21} true;
  assume {:verifier.code 0} true;
  $i84 := $eq.i32($i83, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3562, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i84} true;
  goto $bb31, $bb32;
$bb31:
  assume ($i84 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3563, 7} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb32:
  assume !(($i84 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3566, 21} true;
  assume {:verifier.code 0} true;
  $i85 := $p2i.ref.i64($p0);
  // WARNING: %104 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3938, !verifier.code !3696
  call {:cexpr "__cil_tmp56"} boogie_si_record_i64($i85);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3567, 33} true;
  assume {:verifier.code 0} true;
  $i86 := $add.i64($i85, 536);
  // WARNING: %105 = add i64 %104, 536, !dbg !3943, !verifier.code !3696
  call {:cexpr "__cil_tmp57"} boogie_si_record_i64($i86);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3568, 23} true;
  assume {:verifier.code 0} true;
  $p87 := $i2p.i64.ref($i86);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3568, 21} true;
  assume {:verifier.code 0} true;
  $i88 := $load.i64($M.1, $p87);
  // WARNING: %107 = load i64, i64* %106, align 8, !dbg !3947, !verifier.code !3696
  call {:cexpr "__cil_tmp58"} boogie_si_record_i64($i88);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3569, 23} true;
  assume {:verifier.code 0} true;
  $i89 := $ne.i64($i88, $i55);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3569, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i89} true;
  goto $bb34, $bb35;
$bb33:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3572, 23} true;
  assume {:verifier.code 0} true;
  $i90 := $p2i.ref.i64($p0);
  // WARNING: %111 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3955, !verifier.code !3696
  call {:cexpr "__cil_tmp59"} boogie_si_record_i64($i90);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3573, 35} true;
  assume {:verifier.code 0} true;
  $i91 := $add.i64($i90, 548);
  // WARNING: %112 = add i64 %111, 548, !dbg !3960, !verifier.code !3696
  call {:cexpr "__cil_tmp60"} boogie_si_record_i64($i91);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3574, 11} true;
  assume {:verifier.code 0} true;
  $p92 := $i2p.i64.ref($i91);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3574, 42} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p92, 0);
  // WARNING: store i32 0, i32* %113, align 4, !dbg !3964, !verifier.code !3696
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3576, 23} true;
  assume {:verifier.code 0} true;
  $i93 := $zext.i32.i64($i13);
  // WARNING: %114 = zext i32 %14 to i64, !dbg !3967, !verifier.code !3696
  call {:cexpr "__cil_tmp62"} boogie_si_record_i64($i93);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3577, 23} true;
  assume {:verifier.code 0} true;
  $i94 := $p2i.ref.i64($p0);
  // WARNING: %115 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3970, !verifier.code !3696
  call {:cexpr "__cil_tmp63"} boogie_si_record_i64($i94);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3578, 35} true;
  assume {:verifier.code 0} true;
  $i95 := $add.i64($i94, 528);
  // WARNING: %116 = add i64 %115, 528, !dbg !3973, !verifier.code !3696
  call {:cexpr "__cil_tmp64"} boogie_si_record_i64($i95);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3579, 25} true;
  assume {:verifier.code 0} true;
  $p96 := $i2p.i64.ref($i95);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3579, 23} true;
  assume {:verifier.code 0} true;
  $p97 := $load.ref($M.1, $p96);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3580, 15} true;
  assume {:verifier.code 0} true;
  call $i98 := mtd_read($p9, $i55, $i93, $p4, $p97);
  // WARNING: %119 = call i32 @mtd_read(%struct.mtd_info* %10, i64 %59, i64 %114, i64* %5, i8* %118), !dbg !3980, !verifier.code !3696
  call {:cexpr "ret"} boogie_si_record_i32($i98);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3582, 17} true;
  assume {:verifier.code 0} true;
  $i99 := $ne.i32($i98, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3582, 13} true;
  assume {:verifier.code 0} true;
  $i100 := $i98;
  assume {:branchcond $i99} true;
  goto $bb36, $bb37;
$bb34:
  assume ($i89 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3569, 38} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb35:
  assume !(($i89 == 1));
  assume {:verifier.code 0} true;
  goto $bb42;
$bb36:
  assume ($i99 == 1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3583, 11} true;
  assume {:verifier.code 0} true;
  $i47 := $i100;
  goto $bb6;
$bb37:
  assume !(($i99 == 1));
  assume {:verifier.code 0} true;
  goto $bb38;
$bb38:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3589, 23} true;
  assume {:verifier.code 0} true;
  $i101 := $load.i64($M.1, $p4);
  // WARNING: %124 = load i64, i64* %5, align 8, !dbg !3988, !verifier.code !3696
  call {:cexpr "__cil_tmp67"} boogie_si_record_i64($i101);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3590, 23} true;
  assume {:verifier.code 0} true;
  $i102 := $zext.i32.i64($i13);
  // WARNING: %125 = zext i32 %14 to i64, !dbg !3992, !verifier.code !3696
  call {:cexpr "__cil_tmp68"} boogie_si_record_i64($i102);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3591, 25} true;
  assume {:verifier.code 0} true;
  $i103 := $ne.i64($i102, $i101);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3591, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i103} true;
  goto $bb39, $bb40;
$bb39:
  assume ($i103 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3592, 11} true;
  assume {:verifier.code 0} true;
  $i47 := $sub.i32(0, 5);
  goto $bb6;
$bb40:
  assume !(($i103 == 1));
  assume {:verifier.code 0} true;
  goto $bb41;
$bb41:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3597, 23} true;
  assume {:verifier.code 0} true;
  $i104 := $p2i.ref.i64($p0);
  // WARNING: %130 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !4000, !verifier.code !3696
  call {:cexpr "__cil_tmp69"} boogie_si_record_i64($i104);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3598, 35} true;
  assume {:verifier.code 0} true;
  $i105 := $add.i64($i104, 536);
  // WARNING: %131 = add i64 %130, 536, !dbg !4003, !verifier.code !3696
  call {:cexpr "__cil_tmp70"} boogie_si_record_i64($i105);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3599, 11} true;
  assume {:verifier.code 0} true;
  $p106 := $i2p.i64.ref($i105);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3599, 41} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i64($M.1, $p106, $i55);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3600, 23} true;
  assume {:verifier.code 0} true;
  $i107 := $p2i.ref.i64($p0);
  // WARNING: %133 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !4008, !verifier.code !3696
  call {:cexpr "__cil_tmp71"} boogie_si_record_i64($i107);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3601, 35} true;
  assume {:verifier.code 0} true;
  $i108 := $add.i64($i107, 544);
  // WARNING: %134 = add i64 %133, 544, !dbg !4011, !verifier.code !3696
  call {:cexpr "__cil_tmp72"} boogie_si_record_i64($i108);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3602, 11} true;
  assume {:verifier.code 0} true;
  $p109 := $i2p.i64.ref($i108);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3602, 40} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p109, $i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3603, 23} true;
  assume {:verifier.code 0} true;
  $i110 := $p2i.ref.i64($p0);
  // WARNING: %136 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !4016, !verifier.code !3696
  call {:cexpr "__cil_tmp73"} boogie_si_record_i64($i110);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3604, 35} true;
  assume {:verifier.code 0} true;
  $i111 := $add.i64($i110, 548);
  // WARNING: %137 = add i64 %136, 548, !dbg !4019, !verifier.code !3696
  call {:cexpr "__cil_tmp74"} boogie_si_record_i64($i111);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3605, 11} true;
  assume {:verifier.code 0} true;
  $p112 := $i2p.i64.ref($i111);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3605, 42} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p112, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3606, 7} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb42:
  assume {:verifier.code 0} true;
  goto $bb43;
$bb43:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3613, 13} true;
  assume {:verifier.code 0} true;
  $i113 := $zext.i32.i64($i61);
  // WARNING: %142 = zext i32 %.01 to i64, !dbg !4025, !verifier.code !3696
  call {:cexpr "__len"} boogie_si_record_i64($i113);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3614, 19} true;
  assume {:verifier.code 0} true;
  $i114 := $zext.i32.i64($i58);
  // WARNING: %143 = zext i32 %62 to i64, !dbg !4029, !verifier.code !3696
  call {:cexpr "__cil_tmp75"} boogie_si_record_i64($i114);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3615, 19} true;
  assume {:verifier.code 0} true;
  $i115 := $p2i.ref.i64($p0);
  // WARNING: %144 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !4032, !verifier.code !3696
  call {:cexpr "__cil_tmp76"} boogie_si_record_i64($i115);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3616, 31} true;
  assume {:verifier.code 0} true;
  $i116 := $add.i64($i115, 528);
  // WARNING: %145 = add i64 %144, 528, !dbg !4035, !verifier.code !3696
  call {:cexpr "__cil_tmp77"} boogie_si_record_i64($i116);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3617, 21} true;
  assume {:verifier.code 0} true;
  $p117 := $i2p.i64.ref($i116);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3617, 19} true;
  assume {:verifier.code 0} true;
  $p118 := $load.ref($M.1, $p117);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3619, 31} true;
  assume {:verifier.code 0} true;
  $p119 := $add.ref($p118, $mul.ref($i114, 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3621, 13} true;
  assume {:verifier.code 0} true;
  call $i120 := __builtinx_memcpy.ref.ref.i64($p119, $p51, $i113);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3622, 19} true;
  assume {:verifier.code 0} true;
  $i121 := $p2i.ref.i64($p0);
  // WARNING: %150 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !4050, !verifier.code !3696
  call {:cexpr "__cil_tmp82"} boogie_si_record_i64($i121);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3623, 31} true;
  assume {:verifier.code 0} true;
  $i122 := $add.i64($i121, 548);
  // WARNING: %151 = add i64 %150, 548, !dbg !4053, !verifier.code !3696
  call {:cexpr "__cil_tmp83"} boogie_si_record_i64($i122);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3624, 7} true;
  assume {:verifier.code 0} true;
  $p123 := $i2p.i64.ref($i122);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3624, 38} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p123, 2);
  assume {:verifier.code 0} true;
  $p66 := $p51;
  goto $bb21;
$bb44:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3635, 7} true;
  assume {:verifier.code 0} true;
  assume ($i129 == 1);
  goto $bb11;
$bb45:
  assume !(($i129 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3635, 7} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb46:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3641, 3} true;
  assume {:verifier.code 0} true;
  $i47 := 0;
  goto $bb6;
}
const __dynamic_pr_debug: ref;
axiom (__dynamic_pr_debug == $sub.ref(0, 50260));
procedure  __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref)
  returns ($r: i32);
procedure  __dynamic_pr_debug.ref.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: i32)
  returns ($r: i32);
const mtd_write: ref;
axiom (mtd_write == $sub.ref(0, 51292));
procedure  mtd_write($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref)
  returns ($r: i32);
const erase_write: ref;
axiom (erase_write == $sub.ref(0, 52324));
procedure  erase_write($p0: ref, $i1: i64, $i2: i32, $p3: ref)
  returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $i62: i64;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $i66: i64;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i81: i64;
  var $i82: i32;
  var $i83: i1;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $i80: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(88, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(88, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata %struct.mtd_info* %0, i64 0, metadata !5140, metadata !3695), !dbg !5141, !verifier.code !3697
  // WARNING: call void @llvm.dbg.value(metadata i64 %1, i64 0, metadata !5142, metadata !3695), !dbg !5143, !verifier.code !3697
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3069, 9} true;
  assume {:verifier.code 0} true;
  call $p11 := get_current();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3071, 3} true;
  assume {:verifier.code 0} true;
  $p12 := $bitcast.ref.ref($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3071, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p12, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3072, 17} true;
  assume {:verifier.code 0} true;
  $i13 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3072, 42} true;
  assume {:verifier.code 0} true;
  $i14 := $add.i64($i13, 8);
  // WARNING: %15 = add i64 %14, 8, !dbg !3730, !verifier.code !3696
  call {:cexpr "__cil_tmp23"} boogie_si_record_i64($i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3073, 29} true;
  assume {:verifier.code 0} true;
  $p15 := $bitcast.ref.ref($p11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3073, 5} true;
  assume {:verifier.code 0} true;
  $p16 := $i2p.i64.ref($i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3073, 27} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p16, $p11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3074, 17} true;
  assume {:verifier.code 0} true;
  $i17 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3074, 42} true;
  assume {:verifier.code 0} true;
  $i18 := $add.i64($i17, 16);
  // WARNING: %19 = add i64 %18, 16, !dbg !3737, !verifier.code !3696
  call {:cexpr "__cil_tmp24"} boogie_si_record_i64($i18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3075, 5} true;
  assume {:verifier.code 0} true;
  $p19 := $i2p.i64.ref($i18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3075, 77} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p19, default_wake_function);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3076, 17} true;
  assume {:verifier.code 0} true;
  $i20 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3076, 42} true;
  assume {:verifier.code 0} true;
  $i21 := $add.i64($i20, 24);
  // WARNING: %22 = add i64 %21, 24, !dbg !3743, !verifier.code !3696
  call {:cexpr "__cil_tmp25"} boogie_si_record_i64($i21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3077, 5} true;
  assume {:verifier.code 0} true;
  $p22 := $i2p.i64.ref($i21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3077, 39} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p22, $0.ref);
  // WARNING: store %struct.list_head* null, %struct.list_head** %23, align 8, !dbg !3747, !verifier.code !3696
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3079, 17} true;
  assume {:verifier.code 0} true;
  $i23 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3079, 42} true;
  assume {:verifier.code 0} true;
  $i24 := $add.i64($i23, 32);
  // WARNING: %25 = add i64 %24, 32, !dbg !3751, !verifier.code !3696
  call {:cexpr "__cil_tmp27"} boogie_si_record_i64($i24);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3080, 5} true;
  assume {:verifier.code 0} true;
  $p25 := $i2p.i64.ref($i24);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3080, 39} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p25, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3081, 3} true;
  assume {:verifier.code 0} true;
  call __init_waitqueue_head($p6, .str.12, $p8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3083, 3} true;
  assume {:verifier.code 0} true;
  $p26 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3083, 38} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p26, $p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3084, 17} true;
  assume {:verifier.code 0} true;
  $i27 := $p2i.ref.i64($p4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3084, 43} true;
  assume {:verifier.code 0} true;
  $i28 := $add.i64($i27, 56);
  // WARNING: %29 = add i64 %28, 56, !dbg !3762, !verifier.code !3696
  call {:cexpr "__cil_tmp29"} boogie_si_record_i64($i28);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3085, 5} true;
  assume {:verifier.code 0} true;
  $p29 := $i2p.i64.ref($i28);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3085, 51} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p29, erase_callback);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3086, 17} true;
  assume {:verifier.code 0} true;
  $i30 := $p2i.ref.i64($p4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3086, 43} true;
  assume {:verifier.code 0} true;
  $i31 := $add.i64($i30, 8);
  // WARNING: %32 = add i64 %31, 8, !dbg !3768, !verifier.code !3696
  call {:cexpr "__cil_tmp30"} boogie_si_record_i64($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3087, 5} true;
  assume {:verifier.code 0} true;
  $p32 := $i2p.i64.ref($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3087, 30} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i64($M.1, $p32, $i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3088, 17} true;
  assume {:verifier.code 0} true;
  $i33 := $p2i.ref.i64($p4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3088, 43} true;
  assume {:verifier.code 0} true;
  $i34 := $add.i64($i33, 16);
  // WARNING: %35 = add i64 %34, 16, !dbg !3774, !verifier.code !3696
  call {:cexpr "__cil_tmp31"} boogie_si_record_i64($i34);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3089, 32} true;
  assume {:verifier.code 0} true;
  $i35 := $sext.i32.i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3089, 5} true;
  assume {:verifier.code 0} true;
  $p36 := $i2p.i64.ref($i34);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3089, 30} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i64($M.1, $p36, $i35);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3090, 17} true;
  assume {:verifier.code 0} true;
  $i37 := $p2i.ref.i64($p4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3090, 43} true;
  assume {:verifier.code 0} true;
  $i38 := $add.i64($i37, 64);
  // WARNING: %39 = add i64 %38, 64, !dbg !3781, !verifier.code !3696
  call {:cexpr "__cil_tmp32"} boogie_si_record_i64($i38);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3091, 30} true;
  assume {:verifier.code 0} true;
  $i39 := $p2i.ref.i64($p6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3091, 5} true;
  assume {:verifier.code 0} true;
  $p40 := $i2p.i64.ref($i38);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3091, 28} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i64($M.1, $p40, $i39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3092, 9} true;
  assume {:verifier.code 0} true;
  $M.4 := $store.i64($M.4, $p9, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3103, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb1, $bb2;
$bb1:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3104, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !((1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3107, 5} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3132, 17} true;
  assume {:verifier.code 0} true;
  call $p53 := get_current();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3133, 7} true;
  assume {:verifier.code 0} true;
  $i54 := $load.i64($M.4, $p9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3133, 67} true;
  assume {:verifier.code 0} true;
  $p55 := $bitcast.ref.ref($p53);
  call $i56 := devirtbounce(0, $p55, $i54, $p55);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3133, 7} true;
  assume {:verifier.code 0} true;
  $M.4 := $store.i64($M.4, $p9, $i56);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3136, 7} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3139, 7} true;
  assume {:verifier.code 0} true;
  call __xchg_wrong_size();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3141, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3108, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb6, $bb7;
$bb6:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3108, 12} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3141, 12} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3111, 17} true;
  assume {:verifier.code 0} true;
  call $p41 := get_current();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3112, 7} true;
  assume {:verifier.code 0} true;
  $i42 := $load.i64($M.4, $p9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3112, 67} true;
  assume {:verifier.code 0} true;
  $p43 := $bitcast.ref.ref($p41);
  call $i44 := devirtbounce(0, $p43, $i42, $p43);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3112, 7} true;
  assume {:verifier.code 0} true;
  $M.4 := $store.i64($M.4, $p9, $i44);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3115, 7} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3148, 3} true;
  assume {:verifier.code 0} true;
  call add_wait_queue($p6, $p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3149, 9} true;
  assume {:verifier.code 0} true;
  call $i57 := mtd_erase($p0, $p4);
  // WARNING: %72 = call i32 @mtd_erase(%struct.mtd_info* %0, %struct.erase_info* %5), !dbg !3838, !verifier.code !3696
  call {:cexpr "ret"} boogie_si_record_i32($i57);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3151, 11} true;
  assume {:verifier.code 0} true;
  $i58 := $ne.i32($i57, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3151, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i58} true;
  goto $bb15, $bb16;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3118, 17} true;
  assume {:verifier.code 0} true;
  call $p45 := get_current();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3119, 7} true;
  assume {:verifier.code 0} true;
  $i46 := $load.i64($M.4, $p9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3119, 67} true;
  assume {:verifier.code 0} true;
  $p47 := $bitcast.ref.ref($p45);
  call $i48 := devirtbounce(0, $p47, $i46, $p47);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3119, 7} true;
  assume {:verifier.code 0} true;
  $M.4 := $store.i64($M.4, $p9, $i48);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3122, 7} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3125, 17} true;
  assume {:verifier.code 0} true;
  call $p49 := get_current();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3126, 7} true;
  assume {:verifier.code 0} true;
  $i50 := $load.i64($M.4, $p9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3126, 66} true;
  assume {:verifier.code 0} true;
  $p51 := $bitcast.ref.ref($p49);
  call $i52 := devirtbounce(0, $p51, $i50, $p51);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3126, 7} true;
  assume {:verifier.code 0} true;
  $M.4 := $store.i64($M.4, $p9, $i52);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3129, 7} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb12:
  assume {:verifier.code 0} true;
  goto $bb14;
$bb13:
  assume {:verifier.code 0} true;
  goto $bb12;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3094, 12} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb15:
  assume ($i58 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3152, 15} true;
  assume {:verifier.code 0} true;
  $M.5 := $store.i64($M.5, $p10, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3162, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb17, $bb18;
$bb16:
  assume !(($i58 == 1));
  assume {:verifier.code 0} true;
  goto $bb32;
$bb17:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3163, 7} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb18:
  assume !((1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3166, 7} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3191, 19} true;
  assume {:verifier.code 0} true;
  call $p71 := get_current();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3192, 9} true;
  assume {:verifier.code 0} true;
  $i72 := $load.i64($M.5, $p10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3192, 73} true;
  assume {:verifier.code 0} true;
  $p73 := $bitcast.ref.ref($p71);
  call $i74 := devirtbounce(0, $p73, $i72, $p73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3192, 9} true;
  assume {:verifier.code 0} true;
  $M.5 := $store.i64($M.5, $p10, $i74);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3195, 9} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3198, 9} true;
  assume {:verifier.code 0} true;
  call __xchg_wrong_size();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3200, 7} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3167, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb22, $bb23;
$bb22:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3167, 14} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb23:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3200, 14} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3170, 19} true;
  assume {:verifier.code 0} true;
  call $p59 := get_current();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3171, 9} true;
  assume {:verifier.code 0} true;
  $i60 := $load.i64($M.5, $p10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3171, 73} true;
  assume {:verifier.code 0} true;
  $p61 := $bitcast.ref.ref($p59);
  call $i62 := devirtbounce(0, $p61, $i60, $p61);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3171, 9} true;
  assume {:verifier.code 0} true;
  $M.5 := $store.i64($M.5, $p10, $i62);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3174, 9} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3207, 5} true;
  assume {:verifier.code 0} true;
  call remove_wait_queue($p6, $p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3208, 19} true;
  assume {:verifier.code 0} true;
  $i75 := $p2i.ref.i64($p0);
  // WARNING: %105 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !3896, !verifier.code !3696
  call {:cexpr "__cil_tmp33"} boogie_si_record_i64($i75);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3209, 31} true;
  assume {:verifier.code 0} true;
  $i76 := $add.i64($i75, 56);
  // WARNING: %106 = add i64 %105, 56, !dbg !3899, !verifier.code !3696
  call {:cexpr "__cil_tmp34"} boogie_si_record_i64($i76);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3210, 21} true;
  assume {:verifier.code 0} true;
  $p77 := $i2p.i64.ref($i76);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3210, 19} true;
  assume {:verifier.code 0} true;
  $p78 := $load.ref($M.1, $p77);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3211, 5} true;
  assume {:verifier.code 0} true;
  call $i79 := printk.ref.i64.i32.ref(.str.13, $i1, $i2, $p78);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3214, 5} true;
  assume {:verifier.code 0} true;
  $i80 := $i57;
  goto $bb31;
$bb26:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3177, 19} true;
  assume {:verifier.code 0} true;
  call $p63 := get_current();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3178, 9} true;
  assume {:verifier.code 0} true;
  $i64 := $load.i64($M.5, $p10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3178, 73} true;
  assume {:verifier.code 0} true;
  $p65 := $bitcast.ref.ref($p63);
  call $i66 := devirtbounce(0, $p65, $i64, $p65);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3178, 9} true;
  assume {:verifier.code 0} true;
  $M.5 := $store.i64($M.5, $p10, $i66);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3181, 9} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3184, 19} true;
  assume {:verifier.code 0} true;
  call $p67 := get_current();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3185, 9} true;
  assume {:verifier.code 0} true;
  $i68 := $load.i64($M.5, $p10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3185, 72} true;
  assume {:verifier.code 0} true;
  $p69 := $bitcast.ref.ref($p67);
  call $i70 := devirtbounce(0, $p69, $i68, $p69);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3185, 9} true;
  assume {:verifier.code 0} true;
  $M.5 := $store.i64($M.5, $p10, $i70);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3188, 9} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb28:
  assume {:verifier.code 0} true;
  goto $bb30;
$bb29:
  assume {:verifier.code 0} true;
  goto $bb28;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3153, 14} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb31:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3243, 1} true;
  assume {:verifier.code 0} true;
  $r := $i80;
  $exn := false;
  return;
$bb32:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3219, 3} true;
  assume {:verifier.code 0} true;
  call schedule();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3220, 3} true;
  assume {:verifier.code 0} true;
  call remove_wait_queue($p6, $p5);
  // WARNING: call void @remove_wait_queue(%struct.__wait_queue_head* %7, %struct.__wait_queue* %6), !dbg !3910, !verifier.code !3696
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3222, 17} true;
  assume {:verifier.code 0} true;
  $i81 := $sext.i32.i64($i2);
  // WARNING: %112 = sext i32 %2 to i64, !dbg !3913, !verifier.code !3696
  call {:cexpr "__cil_tmp37"} boogie_si_record_i64($i81);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3224, 9} true;
  assume {:verifier.code 0} true;
  call $i82 := mtd_write($p0, $i1, $i81, $p7, $p3);
  // WARNING: %113 = call i32 @mtd_write(%struct.mtd_info* %0, i64 %1, i64 %112, i64* %8, i8* %3), !dbg !3918, !verifier.code !3696
  call {:cexpr "ret"} boogie_si_record_i32($i82);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3226, 11} true;
  assume {:verifier.code 0} true;
  $i83 := $ne.i32($i82, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3226, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i83} true;
  goto $bb33, $bb34;
$bb33:
  assume ($i83 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3227, 5} true;
  assume {:verifier.code 0} true;
  $i80 := $i82;
  goto $bb31;
$bb34:
  assume !(($i83 == 1));
  assume {:verifier.code 0} true;
  goto $bb35;
$bb35:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3233, 17} true;
  assume {:verifier.code 0} true;
  $i84 := $load.i64($M.1, $p7);
  // WARNING: %118 = load i64, i64* %8, align 8, !dbg !3926, !verifier.code !3696
  call {:cexpr "__cil_tmp40"} boogie_si_record_i64($i84);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3234, 17} true;
  assume {:verifier.code 0} true;
  $i85 := $sext.i32.i64($i2);
  // WARNING: %119 = sext i32 %2 to i64, !dbg !3930, !verifier.code !3696
  call {:cexpr "__cil_tmp41"} boogie_si_record_i64($i85);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3235, 19} true;
  assume {:verifier.code 0} true;
  $i86 := $ne.i64($i85, $i84);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3235, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i86} true;
  goto $bb36, $bb37;
$bb36:
  assume ($i86 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3236, 5} true;
  assume {:verifier.code 0} true;
  $i80 := $sub.i32(0, 5);
  goto $bb31;
$bb37:
  assume !(($i86 == 1));
  assume {:verifier.code 0} true;
  goto $bb38;
$bb38:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3241, 3} true;
  assume {:verifier.code 0} true;
  $i80 := 0;
  goto $bb31;
}
const write_cached_data: ref;
axiom (write_cached_data == $sub.ref(0, 53356));
procedure  write_cached_data($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i8;
  var $i32: i64;
  var $i33: i64;
  var $i34: i32;
  var $i35: i64;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $i11: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: call void @llvm.dbg.declare(metadata %struct._ddebug* %2, metadata !5387, metadata !3695), !dbg !5388, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3291, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p0);
  // WARNING: %3 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3712, !verifier.code !3696
  call {:cexpr "__cil_tmp7"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3292, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $add.i64($i2, 24);
  // WARNING: %4 = add i64 %3, 24, !dbg !3716, !verifier.code !3696
  call {:cexpr "__cil_tmp8"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3293, 11} true;
  assume {:verifier.code 0} true;
  $p4 := $i2p.i64.ref($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3293, 9} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.1, $p4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3295, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $p2i.ref.i64($p0);
  // WARNING: %7 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3723, !verifier.code !3696
  call {:cexpr "__cil_tmp9"} boogie_si_record_i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3296, 28} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i64($i6, 548);
  // WARNING: %8 = add i64 %7, 548, !dbg !3727, !verifier.code !3696
  call {:cexpr "__cil_tmp10"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3297, 19} true;
  assume {:verifier.code 0} true;
  $p8 := $i2p.i64.ref($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3297, 17} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i32($M.1, $p8);
  // WARNING: %10 = load i32, i32* %9, align 4, !dbg !3731, !verifier.code !3696
  call {:cexpr "__cil_tmp11"} boogie_si_record_i32($i9);
  // WARNING: call void @llvm.dbg.value(metadata i32 %10, i64 0, metadata !5411, metadata !3695), !dbg !5412, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3299, 19} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3299, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3300, 5} true;
  assume {:verifier.code 0} true;
  $i11 := 0;
  goto $bb3;
$bb2:
  assume !(($i10 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3365, 1} true;
  assume {:verifier.code 0} true;
  $r := $i11;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3307, 3} true;
  assume {:verifier.code 0} true;
  $p12 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3307, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p12, .str);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3308, 17} true;
  assume {:verifier.code 0} true;
  $i13 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3308, 48} true;
  assume {:verifier.code 0} true;
  $i14 := $add.i64($i13, 8);
  // WARNING: %17 = add i64 %16, 8, !dbg !3748, !verifier.code !3696
  call {:cexpr "__cil_tmp14"} boogie_si_record_i64($i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3309, 5} true;
  assume {:verifier.code 0} true;
  $p15 := $i2p.i64.ref($i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3309, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p15, .str.10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3310, 17} true;
  assume {:verifier.code 0} true;
  $i16 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3310, 48} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i64($i16, 16);
  // WARNING: %20 = add i64 %19, 16, !dbg !3754, !verifier.code !3696
  call {:cexpr "__cil_tmp15"} boogie_si_record_i64($i17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3311, 5} true;
  assume {:verifier.code 0} true;
  $p18 := $i2p.i64.ref($i17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3311, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p18, .str.2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3312, 17} true;
  assume {:verifier.code 0} true;
  $i19 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3312, 48} true;
  assume {:verifier.code 0} true;
  $i20 := $add.i64($i19, 24);
  // WARNING: %23 = add i64 %22, 24, !dbg !3760, !verifier.code !3696
  call {:cexpr "__cil_tmp16"} boogie_si_record_i64($i20);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3313, 5} true;
  assume {:verifier.code 0} true;
  $p21 := $i2p.i64.ref($i20);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3313, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p21, .str.11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3314, 17} true;
  assume {:verifier.code 0} true;
  $i22 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3314, 48} true;
  assume {:verifier.code 0} true;
  $i23 := $add.i64($i22, 32);
  // WARNING: %26 = add i64 %25, 32, !dbg !3766, !verifier.code !3696
  call {:cexpr "__cil_tmp17"} boogie_si_record_i64($i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3315, 5} true;
  assume {:verifier.code 0} true;
  $p24 := $i2p.i64.ref($i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3315, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p24, 139);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3316, 17} true;
  assume {:verifier.code 0} true;
  $i25 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3316, 48} true;
  assume {:verifier.code 0} true;
  $i26 := $add.i64($i25, 35);
  // WARNING: %29 = add i64 %28, 35, !dbg !3772, !verifier.code !3696
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i26);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3317, 5} true;
  assume {:verifier.code 0} true;
  $p27 := $i2p.i64.ref($i26);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3317, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i8($M.1, $p27, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3318, 17} true;
  assume {:verifier.code 0} true;
  $i28 := $p2i.ref.i64($p1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3318, 48} true;
  assume {:verifier.code 0} true;
  $i29 := $add.i64($i28, 35);
  // WARNING: %32 = add i64 %31, 35, !dbg !3778, !verifier.code !3696
  call {:cexpr "__cil_tmp19"} boogie_si_record_i64($i29);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3319, 19} true;
  assume {:verifier.code 0} true;
  $p30 := $i2p.i64.ref($i29);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3319, 17} true;
  assume {:verifier.code 0} true;
  $i31 := $load.i8($M.1, $p30);
  // WARNING: %34 = load i8, i8* %33, align 1, !dbg !3782, !verifier.code !3696
  call {:cexpr "__cil_tmp20"} boogie_si_record_i8($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3320, 17} true;
  assume {:verifier.code 0} true;
  $i32 := $zext.i8.i64($i31);
  // WARNING: %35 = zext i8 %34 to i64, !dbg !3785, !verifier.code !3696
  call {:cexpr "__cil_tmp21"} boogie_si_record_i64($i32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3321, 29} true;
  assume {:verifier.code 0} true;
  $i33 := $and.i64($i32, 1);
  // WARNING: %36 = and i64 %35, 1, !dbg !3788, !verifier.code !3696
  call {:cexpr "__cil_tmp22"} boogie_si_record_i64($i33);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3322, 9} true;
  assume {:verifier.code 0} true;
  call $i34 := __builtinx_expect.i64.i64($i33, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3322, 9} true;
  assume {:verifier.code 0} true;
  $i35 := $sext.i32.i64($i34);
  // WARNING: %38 = sext i32 %37 to i64, !dbg !3791, !verifier.code !3696
  call {:cexpr "tmp"} boogie_si_record_i64($i35);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3324, 11} true;
  assume {:verifier.code 0} true;
  $i36 := $ne.i64($i35, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3324, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i36 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3326, 19} true;
  assume {:verifier.code 0} true;
  $i37 := $p2i.ref.i64($p5);
  // WARNING: %41 = ptrtoint %struct.mtd_info* %6 to i64, !dbg !3797, !verifier.code !3696
  call {:cexpr "__cil_tmp23"} boogie_si_record_i64($i37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3327, 31} true;
  assume {:verifier.code 0} true;
  $i38 := $add.i64($i37, 56);
  // WARNING: %42 = add i64 %41, 56, !dbg !3802, !verifier.code !3696
  call {:cexpr "__cil_tmp24"} boogie_si_record_i64($i38);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3328, 21} true;
  assume {:verifier.code 0} true;
  $p39 := $i2p.i64.ref($i38);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3328, 19} true;
  assume {:verifier.code 0} true;
  $p40 := $load.ref($M.1, $p39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3329, 19} true;
  assume {:verifier.code 0} true;
  $i41 := $p2i.ref.i64($p0);
  // WARNING: %45 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3809, !verifier.code !3696
  call {:cexpr "__cil_tmp26"} boogie_si_record_i64($i41);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3330, 31} true;
  assume {:verifier.code 0} true;
  $i42 := $add.i64($i41, 536);
  // WARNING: %46 = add i64 %45, 536, !dbg !3812, !verifier.code !3696
  call {:cexpr "__cil_tmp27"} boogie_si_record_i64($i42);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3331, 21} true;
  assume {:verifier.code 0} true;
  $p43 := $i2p.i64.ref($i42);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3331, 19} true;
  assume {:verifier.code 0} true;
  $i44 := $load.i64($M.1, $p43);
  // WARNING: %48 = load i64, i64* %47, align 8, !dbg !3816, !verifier.code !3696
  call {:cexpr "__cil_tmp28"} boogie_si_record_i64($i44);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3332, 19} true;
  assume {:verifier.code 0} true;
  $i45 := $p2i.ref.i64($p0);
  // WARNING: %49 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3819, !verifier.code !3696
  call {:cexpr "__cil_tmp29"} boogie_si_record_i64($i45);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3333, 31} true;
  assume {:verifier.code 0} true;
  $i46 := $add.i64($i45, 544);
  // WARNING: %50 = add i64 %49, 544, !dbg !3822, !verifier.code !3696
  call {:cexpr "__cil_tmp30"} boogie_si_record_i64($i46);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3334, 21} true;
  assume {:verifier.code 0} true;
  $p47 := $i2p.i64.ref($i46);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3334, 19} true;
  assume {:verifier.code 0} true;
  $i48 := $load.i32($M.1, $p47);
  // WARNING: %52 = load i32, i32* %51, align 4, !dbg !3826, !verifier.code !3696
  call {:cexpr "__cil_tmp31"} boogie_si_record_i32($i48);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3335, 5} true;
  assume {:verifier.code 0} true;
  call $i49 := __dynamic_pr_debug.ref.ref.ref.i64.i32($p1, .str.11, $p40, $i44, $i48);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3338, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i36 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3342, 17} true;
  assume {:verifier.code 0} true;
  $i50 := $p2i.ref.i64($p0);
  // WARNING: %56 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3831, !verifier.code !3696
  call {:cexpr "__cil_tmp32"} boogie_si_record_i64($i50);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3343, 29} true;
  assume {:verifier.code 0} true;
  $i51 := $add.i64($i50, 536);
  // WARNING: %57 = add i64 %56, 536, !dbg !3835, !verifier.code !3696
  call {:cexpr "__cil_tmp33"} boogie_si_record_i64($i51);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3344, 19} true;
  assume {:verifier.code 0} true;
  $p52 := $i2p.i64.ref($i51);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3344, 17} true;
  assume {:verifier.code 0} true;
  $i53 := $load.i64($M.1, $p52);
  // WARNING: %59 = load i64, i64* %58, align 8, !dbg !3839, !verifier.code !3696
  call {:cexpr "__cil_tmp34"} boogie_si_record_i64($i53);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3345, 17} true;
  assume {:verifier.code 0} true;
  $i54 := $p2i.ref.i64($p0);
  // WARNING: %60 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3842, !verifier.code !3696
  call {:cexpr "__cil_tmp35"} boogie_si_record_i64($i54);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3346, 29} true;
  assume {:verifier.code 0} true;
  $i55 := $add.i64($i54, 544);
  // WARNING: %61 = add i64 %60, 544, !dbg !3845, !verifier.code !3696
  call {:cexpr "__cil_tmp36"} boogie_si_record_i64($i55);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3347, 19} true;
  assume {:verifier.code 0} true;
  $p56 := $i2p.i64.ref($i55);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3347, 17} true;
  assume {:verifier.code 0} true;
  $i57 := $load.i32($M.1, $p56);
  // WARNING: %63 = load i32, i32* %62, align 4, !dbg !3849, !verifier.code !3696
  call {:cexpr "__cil_tmp37"} boogie_si_record_i32($i57);
  // WARNING: call void @llvm.dbg.value(metadata i32 %63, i64 0, metadata !5528, metadata !3695), !dbg !5529, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3349, 17} true;
  assume {:verifier.code 0} true;
  $i58 := $p2i.ref.i64($p0);
  // WARNING: %64 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3854, !verifier.code !3696
  call {:cexpr "__cil_tmp39"} boogie_si_record_i64($i58);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3350, 29} true;
  assume {:verifier.code 0} true;
  $i59 := $add.i64($i58, 528);
  // WARNING: %65 = add i64 %64, 528, !dbg !3857, !verifier.code !3696
  call {:cexpr "__cil_tmp40"} boogie_si_record_i64($i59);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3351, 19} true;
  assume {:verifier.code 0} true;
  $p60 := $i2p.i64.ref($i59);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3351, 17} true;
  assume {:verifier.code 0} true;
  $p61 := $load.ref($M.1, $p60);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3353, 9} true;
  assume {:verifier.code 0} true;
  call $i62 := erase_write($p5, $i53, $i57, $p61);
  // WARNING: %68 = call i32 @erase_write(%struct.mtd_info* %6, i64 %59, i32 %63, i8* %67), !dbg !3866, !verifier.code !3696
  call {:cexpr "ret"} boogie_si_record_i32($i62);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3355, 11} true;
  assume {:verifier.code 0} true;
  $i63 := $ne.i32($i62, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3355, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i63} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i63 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3356, 5} true;
  assume {:verifier.code 0} true;
  $i11 := $i62;
  goto $bb3;
$bb9:
  assume !(($i63 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3360, 17} true;
  assume {:verifier.code 0} true;
  $i64 := $p2i.ref.i64($p0);
  // WARNING: %73 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3874, !verifier.code !3696
  call {:cexpr "__cil_tmp43"} boogie_si_record_i64($i64);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3361, 29} true;
  assume {:verifier.code 0} true;
  $i65 := $add.i64($i64, 548);
  // WARNING: %74 = add i64 %73, 548, !dbg !3877, !verifier.code !3696
  call {:cexpr "__cil_tmp44"} boogie_si_record_i64($i65);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3362, 5} true;
  assume {:verifier.code 0} true;
  $p66 := $i2p.i64.ref($i65);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3362, 36} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p66, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3363, 3} true;
  assume {:verifier.code 0} true;
  $i11 := 0;
  goto $bb3;
}
const mtd_read: ref;
axiom (mtd_read == $sub.ref(0, 54388));
procedure  mtd_read($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref)
  returns ($r: i32);
const __builtinx_memcpy: ref;
axiom (__builtinx_memcpy == $sub.ref(0, 55420));
procedure  __builtinx_memcpy.ref.ref.i64(p.0: ref, p.1: ref, p.2: i64)
  returns ($r: i32);
const get_current: ref;
axiom (get_current == $sub.ref(0, 56452));
procedure  get_current()
  returns ($r: ref)
{
  var $p0: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p1: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2907, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb1, $bb2;
$bb1:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2908, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !((1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2911, 5} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  call $p4 := devirtbounce.1(0, current_task);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2924, 7} true;
  assume {:verifier.code 0} true;
  $p1 := $p4;
  goto $bb9;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2927, 7} true;
  assume {:verifier.code 0} true;
  call __bad_percpu_size();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2929, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2912, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb6, $bb7;
$bb6:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2912, 12} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2929, 12} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb8:
  call $p0 := devirtbounce.1(0, current_task);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2914, 7} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $u5, $p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2915, 7} true;
  assume {:verifier.code 0} true;
  $p1 := $u6;
  goto $bb9;
$bb9:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2935, 3} true;
  assume {:verifier.code 0} true;
  $r := $p1;
  $exn := false;
  return;
$bb10:
  call $p2 := devirtbounce.1(0, current_task);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2917, 7} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $u5, $p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2918, 7} true;
  assume {:verifier.code 0} true;
  $p1 := $u6;
  goto $bb9;
$bb11:
  call $p3 := devirtbounce.1(0, current_task);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2920, 7} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $u5, $p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2921, 7} true;
  assume {:verifier.code 0} true;
  $p1 := $u6;
  goto $bb9;
$bb12:
  assume {:verifier.code 0} true;
  goto $bb14;
$bb13:
  assume {:verifier.code 0} true;
  goto $bb12;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2898, 12} true;
  assume {:verifier.code 0} true;
  $p1 := $u6;
  goto $bb9;
}
const default_wake_function: ref;
axiom (default_wake_function == $sub.ref(0, 57484));
procedure  default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref)
  returns ($r: i32);
const __init_waitqueue_head: ref;
axiom (__init_waitqueue_head == $sub.ref(0, 58516));
procedure  __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
const erase_callback: ref;
axiom (erase_callback == $sub.ref(0, 59548));
procedure  erase_callback($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3018, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  // WARNING: %2 = ptrtoint %struct.erase_info* %0 to i64, !dbg !3698, !verifier.code !3697
  call {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3019, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $add.i64($i1, 64);
  // WARNING: %3 = add i64 %2, 64, !dbg !3703, !verifier.code !3697
  call {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3020, 18} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.i64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3020, 16} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i64($M.1, $p3);
  // WARNING: %5 = load i64, i64* %4, align 8, !dbg !3707, !verifier.code !3697
  call {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3021, 12} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.i64.ref($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3023, 3} true;
  assume {:verifier.code 0} true;
  call __wake_up($p5, 3, 1, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3025, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __xchg_wrong_size: ref;
axiom (__xchg_wrong_size == $sub.ref(0, 60580));
procedure  __xchg_wrong_size();
const add_wait_queue: ref;
axiom (add_wait_queue == $sub.ref(0, 61612));
procedure  add_wait_queue($p0: ref, $p1: ref);
const mtd_erase: ref;
axiom (mtd_erase == $sub.ref(0, 62644));
procedure  mtd_erase($p0: ref, $p1: ref)
  returns ($r: i32);
const remove_wait_queue: ref;
axiom (remove_wait_queue == $sub.ref(0, 63676));
procedure  remove_wait_queue($p0: ref, $p1: ref);
const printk: ref;
axiom (printk == $sub.ref(0, 64708));
procedure  printk.ref.i64.i32.ref($p0: ref, p.1: i64, p.2: i32, p.3: ref)
  returns ($r: i32);
const schedule: ref;
axiom (schedule == $sub.ref(0, 65740));
procedure  schedule();
const __wake_up: ref;
axiom (__wake_up == $sub.ref(0, 66772));
procedure  __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
const __bad_percpu_size: ref;
axiom (__bad_percpu_size == $sub.ref(0, 67804));
procedure  __bad_percpu_size();
const ldv_check_alloc_nonatomic: ref;
axiom (ldv_check_alloc_nonatomic == $sub.ref(0, 68836));
procedure  ldv_check_alloc_nonatomic()
{
  var $i0: i32;
  var $i1: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4686, 7} true;
  assume {:verifier.code 0} true;
  $i0 := $M.2;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4686, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4686, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4688, 5} true;
  assume {:verifier.code 0} true;
  call ldv_blast_assert();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4690, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 4693, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const vmalloc: ref;
axiom (vmalloc == $sub.ref(0, 69868));
procedure  vmalloc($i0: i64)
  returns ($r: ref);
const do_cached_read: ref;
axiom (do_cached_read == $sub.ref(0, 70900));
procedure  do_cached_read($p0: ref, $i1: i64, $i2: i32, $p3: ref)
  returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i8;
  var $i34: i64;
  var $i35: i64;
  var $i36: i32;
  var $i37: i64;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i64;
  var $i46: i32;
  var $i48: i1;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i82: i64;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $i80: i64;
  var $p81: ref;
  var $i89: i64;
  var $p90: ref;
  var $i91: i64;
  var $i92: i64;
  var $i93: i32;
  var $i94: i1;
  var $i49: i64;
  var $i50: i32;
  var $p51: ref;
  var $i47: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata %struct.mtdblk_dev* %0, i64 0, metadata !5632, metadata !3695), !dbg !5633, !verifier.code !3697
  // WARNING: call void @llvm.dbg.value(metadata i64 %1, i64 0, metadata !5634, metadata !3695), !dbg !5635, !verifier.code !3697
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: call void @llvm.dbg.declare(metadata %struct._ddebug* %6, metadata !5642, metadata !3695), !dbg !5643, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3713, 17} true;
  assume {:verifier.code 0} true;
  $i6 := $p2i.ref.i64($p0);
  // WARNING: %7 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3720, !verifier.code !3696
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3714, 29} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i64($i6, 24);
  // WARNING: %8 = add i64 %7, 24, !dbg !3725, !verifier.code !3696
  call {:cexpr "__cil_tmp19"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3715, 11} true;
  assume {:verifier.code 0} true;
  $p8 := $i2p.i64.ref($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3715, 9} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.1, $p8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3716, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $p2i.ref.i64($p0);
  // WARNING: %11 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3732, !verifier.code !3696
  call {:cexpr "__cil_tmp20"} boogie_si_record_i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3717, 29} true;
  assume {:verifier.code 0} true;
  $i11 := $add.i64($i10, 544);
  // WARNING: %12 = add i64 %11, 544, !dbg !3735, !verifier.code !3696
  call {:cexpr "__cil_tmp21"} boogie_si_record_i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3718, 17} true;
  assume {:verifier.code 0} true;
  $p12 := $i2p.i64.ref($i11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3718, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.1, $p12);
  // WARNING: %14 = load i32, i32* %13, align 4, !dbg !3739, !verifier.code !3696
  call {:cexpr "sect_size"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3720, 3} true;
  assume {:verifier.code 0} true;
  $p14 := $bitcast.ref.ref($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3720, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p14, .str);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3721, 17} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3721, 48} true;
  assume {:verifier.code 0} true;
  $i16 := $add.i64($i15, 8);
  // WARNING: %17 = add i64 %16, 8, !dbg !3748, !verifier.code !3696
  call {:cexpr "__cil_tmp23"} boogie_si_record_i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3722, 5} true;
  assume {:verifier.code 0} true;
  $p17 := $i2p.i64.ref($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3722, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p17, .str.14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3723, 17} true;
  assume {:verifier.code 0} true;
  $i18 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3723, 48} true;
  assume {:verifier.code 0} true;
  $i19 := $add.i64($i18, 16);
  // WARNING: %20 = add i64 %19, 16, !dbg !3754, !verifier.code !3696
  call {:cexpr "__cil_tmp24"} boogie_si_record_i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3724, 5} true;
  assume {:verifier.code 0} true;
  $p20 := $i2p.i64.ref($i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3724, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p20, .str.2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3725, 17} true;
  assume {:verifier.code 0} true;
  $i21 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3725, 48} true;
  assume {:verifier.code 0} true;
  $i22 := $add.i64($i21, 24);
  // WARNING: %23 = add i64 %22, 24, !dbg !3760, !verifier.code !3696
  call {:cexpr "__cil_tmp25"} boogie_si_record_i64($i22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3726, 5} true;
  assume {:verifier.code 0} true;
  $p23 := $i2p.i64.ref($i22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3726, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p23, .str.15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3727, 17} true;
  assume {:verifier.code 0} true;
  $i24 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3727, 48} true;
  assume {:verifier.code 0} true;
  $i25 := $add.i64($i24, 32);
  // WARNING: %26 = add i64 %25, 32, !dbg !3766, !verifier.code !3696
  call {:cexpr "__cil_tmp26"} boogie_si_record_i64($i25);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3728, 5} true;
  assume {:verifier.code 0} true;
  $p26 := $i2p.i64.ref($i25);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3728, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p26, 237);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3729, 17} true;
  assume {:verifier.code 0} true;
  $i27 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3729, 48} true;
  assume {:verifier.code 0} true;
  $i28 := $add.i64($i27, 35);
  // WARNING: %29 = add i64 %28, 35, !dbg !3772, !verifier.code !3696
  call {:cexpr "__cil_tmp27"} boogie_si_record_i64($i28);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3730, 5} true;
  assume {:verifier.code 0} true;
  $p29 := $i2p.i64.ref($i28);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3730, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i8($M.1, $p29, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3731, 17} true;
  assume {:verifier.code 0} true;
  $i30 := $p2i.ref.i64($p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3731, 48} true;
  assume {:verifier.code 0} true;
  $i31 := $add.i64($i30, 35);
  // WARNING: %32 = add i64 %31, 35, !dbg !3778, !verifier.code !3696
  call {:cexpr "__cil_tmp28"} boogie_si_record_i64($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3732, 19} true;
  assume {:verifier.code 0} true;
  $p32 := $i2p.i64.ref($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3732, 17} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i8($M.1, $p32);
  // WARNING: %34 = load i8, i8* %33, align 1, !dbg !3782, !verifier.code !3696
  call {:cexpr "__cil_tmp29"} boogie_si_record_i8($i33);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3733, 17} true;
  assume {:verifier.code 0} true;
  $i34 := $zext.i8.i64($i33);
  // WARNING: %35 = zext i8 %34 to i64, !dbg !3785, !verifier.code !3696
  call {:cexpr "__cil_tmp30"} boogie_si_record_i64($i34);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3734, 29} true;
  assume {:verifier.code 0} true;
  $i35 := $and.i64($i34, 1);
  // WARNING: %36 = and i64 %35, 1, !dbg !3788, !verifier.code !3696
  call {:cexpr "__cil_tmp31"} boogie_si_record_i64($i35);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3735, 9} true;
  assume {:verifier.code 0} true;
  call $i36 := __builtinx_expect.i64.i64($i35, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3735, 9} true;
  assume {:verifier.code 0} true;
  $i37 := $sext.i32.i64($i36);
  // WARNING: %38 = sext i32 %37 to i64, !dbg !3791, !verifier.code !3696
  call {:cexpr "tmp"} boogie_si_record_i64($i37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3737, 11} true;
  assume {:verifier.code 0} true;
  $i38 := $ne.i64($i37, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3737, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i38 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3739, 19} true;
  assume {:verifier.code 0} true;
  $i39 := $p2i.ref.i64($p9);
  // WARNING: %41 = ptrtoint %struct.mtd_info* %10 to i64, !dbg !3797, !verifier.code !3696
  call {:cexpr "__cil_tmp32"} boogie_si_record_i64($i39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3740, 31} true;
  assume {:verifier.code 0} true;
  $i40 := $add.i64($i39, 56);
  // WARNING: %42 = add i64 %41, 56, !dbg !3802, !verifier.code !3696
  call {:cexpr "__cil_tmp33"} boogie_si_record_i64($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3741, 21} true;
  assume {:verifier.code 0} true;
  $p41 := $i2p.i64.ref($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3741, 19} true;
  assume {:verifier.code 0} true;
  $p42 := $load.ref($M.1, $p41);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3742, 5} true;
  assume {:verifier.code 0} true;
  call $i43 := __dynamic_pr_debug.ref.ref.ref.i64.i32($p5, .str.15, $p42, $i1, $i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3745, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i38 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3748, 17} true;
  assume {:verifier.code 0} true;
  $i44 := $eq.i32($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3748, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i44 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3751, 19} true;
  assume {:verifier.code 0} true;
  $i45 := $sext.i32.i64($i2);
  // WARNING: %50 = sext i32 %2 to i64, !dbg !3816, !verifier.code !3696
  call {:cexpr "__cil_tmp36"} boogie_si_record_i64($i45);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3753, 15} true;
  assume {:verifier.code 0} true;
  call $i46 := mtd_read($p9, $i1, $i45, $p4, $p3);
  // WARNING: %51 = call i32 @mtd_read(%struct.mtd_info* %10, i64 %1, i64 %50, i64* %5, i8* %3), !dbg !3823, !verifier.code !3696
  call {:cexpr "tmp___0"} boogie_si_record_i32($i46);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3755, 5} true;
  assume {:verifier.code 0} true;
  $i47 := $i46;
  goto $bb6;
$bb5:
  assume !(($i44 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3844, 1} true;
  assume {:verifier.code 0} true;
  $r := $i47;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3836, 11} true;
  assume {:verifier.code 0} true;
  $i48 := $sgt.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3836, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i48} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i48 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3836, 7} true;
  assume {:verifier.code 0} true;
  $i49, $i50, $p51 := $i1, $i2, $p3;
  goto $bb11;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3836, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i48 == 1));
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3839, 5} true;
  assume {:verifier.code 0} true;
  goto $bb31;
$bb11:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3837, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3761, 17} true;
  assume {:verifier.code 0} true;
  $i52 := $zext.i32.i64($i13);
  // WARNING: %56 = zext i32 %14 to i64, !dbg !3830, !verifier.code !3696
  call {:cexpr "__cil_tmp38"} boogie_si_record_i64($i52);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3762, 17} true;
  assume {:verifier.code 0} true;
  $i53 := $zext.i32.i64($i13);
  // WARNING: %57 = zext i32 %14 to i64, !dbg !3833, !verifier.code !3696
  call {:cexpr "__cil_tmp39"} boogie_si_record_i64($i53);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3763, 21} true;
  assume {:verifier.code 0} true;
  $i54 := $udiv.i64($i49, $i53);
  // WARNING: %58 = udiv i64 %.029, %57, !dbg !3836, !verifier.code !3696
  call {:cexpr "__cil_tmp40"} boogie_si_record_i64($i54);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3764, 28} true;
  assume {:verifier.code 0} true;
  $i55 := $mul.i64($i54, $i52);
  // WARNING: %59 = mul i64 %58, %56, !dbg !3839, !verifier.code !3696
  call {:cexpr "sect_start"} boogie_si_record_i64($i55);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3765, 17} true;
  assume {:verifier.code 0} true;
  $i56 := $trunc.i64.i32($i55);
  // WARNING: %60 = trunc i64 %59 to i32, !dbg !3842, !verifier.code !3696
  call {:cexpr "__cil_tmp41"} boogie_si_record_i32($i56);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3766, 17} true;
  assume {:verifier.code 0} true;
  $i57 := $trunc.i64.i32($i49);
  // WARNING: %61 = trunc i64 %.029 to i32, !dbg !3845, !verifier.code !3696
  call {:cexpr "__cil_tmp42"} boogie_si_record_i32($i57);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3767, 24} true;
  assume {:verifier.code 0} true;
  $i58 := $sub.i32($i57, $i56);
  // WARNING: %62 = sub i32 %61, %60, !dbg !3848, !verifier.code !3696
  call {:cexpr "offset"} boogie_si_record_i32($i58);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3768, 20} true;
  assume {:verifier.code 0} true;
  $i59 := $sub.i32($i13, $i58);
  // WARNING: %63 = sub i32 %14, %62, !dbg !3851, !verifier.code !3696
  call {:cexpr "size"} boogie_si_record_i32($i59);
  // WARNING: call void @llvm.dbg.value(metadata i32 %63, i64 0, metadata !5777, metadata !3695), !dbg !5778, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3771, 19} true;
  assume {:verifier.code 0} true;
  $i60 := $ult.i32($i50, $i59);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3771, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i60} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i60 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3773, 3} true;
  assume {:verifier.code 0} true;
  $i61 := $i50;
  goto $bb15;
$bb14:
  assume !(($i60 == 1));
  assume {:verifier.code 0} true;
  $i61 := $i59;
  goto $bb15;
$bb15:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3778, 17} true;
  assume {:verifier.code 0} true;
  $i62 := $p2i.ref.i64($p0);
  // WARNING: %68 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3862, !verifier.code !3696
  call {:cexpr "__cil_tmp44"} boogie_si_record_i64($i62);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3779, 29} true;
  assume {:verifier.code 0} true;
  $i63 := $add.i64($i62, 548);
  // WARNING: %69 = add i64 %68, 548, !dbg !3866, !verifier.code !3696
  call {:cexpr "__cil_tmp45"} boogie_si_record_i64($i63);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3780, 19} true;
  assume {:verifier.code 0} true;
  $p64 := $i2p.i64.ref($i63);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3780, 17} true;
  assume {:verifier.code 0} true;
  $i65 := $load.i32($M.1, $p64);
  // WARNING: %71 = load i32, i32* %70, align 4, !dbg !3870, !verifier.code !3696
  call {:cexpr "__cil_tmp46"} boogie_si_record_i32($i65);
  // WARNING: call void @llvm.dbg.value(metadata i32 %71, i64 0, metadata !5796, metadata !3695), !dbg !5797, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3782, 19} true;
  assume {:verifier.code 0} true;
  $i66 := $ne.i32($i65, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3782, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i66} true;
  goto $bb16, $bb17;
$bb16:
  assume ($i66 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3784, 19} true;
  assume {:verifier.code 0} true;
  $i67 := $p2i.ref.i64($p0);
  // WARNING: %74 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3878, !verifier.code !3696
  call {:cexpr "__cil_tmp48"} boogie_si_record_i64($i67);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3785, 31} true;
  assume {:verifier.code 0} true;
  $i68 := $add.i64($i67, 536);
  // WARNING: %75 = add i64 %74, 536, !dbg !3883, !verifier.code !3696
  call {:cexpr "__cil_tmp49"} boogie_si_record_i64($i68);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3786, 21} true;
  assume {:verifier.code 0} true;
  $p69 := $i2p.i64.ref($i68);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3786, 19} true;
  assume {:verifier.code 0} true;
  $i70 := $load.i64($M.1, $p69);
  // WARNING: %77 = load i64, i64* %76, align 8, !dbg !3887, !verifier.code !3696
  call {:cexpr "__cil_tmp50"} boogie_si_record_i64($i70);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3787, 21} true;
  assume {:verifier.code 0} true;
  $i71 := $eq.i64($i70, $i55);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3787, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i71} true;
  goto $bb18, $bb19;
$bb17:
  assume !(($i66 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3803, 10} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb18:
  assume ($i71 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3789, 15} true;
  assume {:verifier.code 0} true;
  $i72 := $zext.i32.i64($i61);
  // WARNING: %80 = zext i32 %.01 to i64, !dbg !3893, !verifier.code !3696
  call {:cexpr "__len"} boogie_si_record_i64($i72);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3791, 21} true;
  assume {:verifier.code 0} true;
  $i73 := $zext.i32.i64($i58);
  // WARNING: %81 = zext i32 %62 to i64, !dbg !3900, !verifier.code !3696
  call {:cexpr "__cil_tmp52"} boogie_si_record_i64($i73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3792, 21} true;
  assume {:verifier.code 0} true;
  $i74 := $p2i.ref.i64($p0);
  // WARNING: %82 = ptrtoint %struct.mtdblk_dev* %0 to i64, !dbg !3903, !verifier.code !3696
  call {:cexpr "__cil_tmp53"} boogie_si_record_i64($i74);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3793, 33} true;
  assume {:verifier.code 0} true;
  $i75 := $add.i64($i74, 528);
  // WARNING: %83 = add i64 %82, 528, !dbg !3906, !verifier.code !3696
  call {:cexpr "__cil_tmp54"} boogie_si_record_i64($i75);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3794, 23} true;
  assume {:verifier.code 0} true;
  $p76 := $i2p.i64.ref($i75);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3794, 21} true;
  assume {:verifier.code 0} true;
  $p77 := $load.ref($M.1, $p76);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3796, 33} true;
  assume {:verifier.code 0} true;
  $p78 := $add.ref($p77, $mul.ref($i73, 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3797, 15} true;
  assume {:verifier.code 0} true;
  call $i79 := __builtinx_memcpy.ref.ref.i64($p51, $p78, $i72);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3799, 5} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb19:
  assume !(($i71 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3800, 7} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3803, 3} true;
  assume {:verifier.code 0} true;
  $i80, $p81 := $i49, $p51;
  goto $bb22;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3807, 19} true;
  assume {:verifier.code 0} true;
  $i82 := $zext.i32.i64($i61);
  // WARNING: %92 = zext i32 %.01 to i64, !dbg !3927, !verifier.code !3696
  call {:cexpr "__cil_tmp59"} boogie_si_record_i64($i82);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3809, 11} true;
  assume {:verifier.code 0} true;
  call $i83 := mtd_read($p9, $i49, $i82, $p4, $p51);
  // WARNING: %93 = call i32 @mtd_read(%struct.mtd_info* %10, i64 %.029, i64 %92, i64* %5, i8* %.046), !dbg !3934, !verifier.code !3696
  call {:cexpr "ret"} boogie_si_record_i32($i83);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3811, 13} true;
  assume {:verifier.code 0} true;
  $i84 := $ne.i32($i83, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3811, 9} true;
  assume {:verifier.code 0} true;
  $i85 := $i83;
  assume {:branchcond $i84} true;
  goto $bb23, $bb24;
$bb22:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3828, 17} true;
  assume {:verifier.code 0} true;
  $i89 := $zext.i32.i64($i61);
  // WARNING: %105 = zext i32 %.01 to i64, !dbg !3956, !verifier.code !3696
  call {:cexpr "__cil_tmp64"} boogie_si_record_i64($i89);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3829, 13} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($p81, $mul.ref($i89, 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3830, 17} true;
  assume {:verifier.code 0} true;
  $i91 := $zext.i32.i64($i61);
  // WARNING: %107 = zext i32 %.01 to i64, !dbg !3960, !verifier.code !3696
  call {:cexpr "__cil_tmp65"} boogie_si_record_i64($i91);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3831, 21} true;
  assume {:verifier.code 0} true;
  $i92 := $add.i64($i91, $i80);
  // WARNING: %108 = add i64 %107, %.0210, !dbg !3963, !verifier.code !3696
  call {:cexpr "pos"} boogie_si_record_i64($i92);
  // WARNING: call void @llvm.dbg.value(metadata i64 %108, i64 0, metadata !5634, metadata !3695), !dbg !5635, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3833, 29} true;
  assume {:verifier.code 0} true;
  $i93 := $sub.i32($i50, $i61);
  // WARNING: %109 = sub i32 %.038, %.01, !dbg !3966, !verifier.code !3696
  call {:cexpr "__cil_tmp67"} boogie_si_record_i32($i93);
  // WARNING: call void @llvm.dbg.value(metadata i32 %109, i64 0, metadata !5892, metadata !3695), !dbg !5893, !verifier.code !3697
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3836, 11} true;
  assume {:verifier.code 0} true;
  $i94 := $sgt.i32($i93, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3836, 7} true;
  assume {:verifier.code 0} true;
  $i49, $i50, $p51 := $i92, $i93, $p90;
  assume {:branchcond $i94} true;
  goto $bb29, $bb30;
$bb23:
  assume ($i84 == 1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3812, 7} true;
  assume {:verifier.code 0} true;
  $i47 := $i85;
  goto $bb6;
$bb24:
  assume !(($i84 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3818, 19} true;
  assume {:verifier.code 0} true;
  $i86 := $load.i64($M.1, $p4);
  // WARNING: %98 = load i64, i64* %5, align 8, !dbg !3944, !verifier.code !3696
  call {:cexpr "__cil_tmp62"} boogie_si_record_i64($i86);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3819, 19} true;
  assume {:verifier.code 0} true;
  $i87 := $zext.i32.i64($i61);
  // WARNING: %99 = zext i32 %.01 to i64, !dbg !3948, !verifier.code !3696
  call {:cexpr "__cil_tmp63"} boogie_si_record_i64($i87);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3820, 21} true;
  assume {:verifier.code 0} true;
  $i88 := $ne.i64($i87, $i86);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3820, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i88} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i88 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3821, 7} true;
  assume {:verifier.code 0} true;
  $i47 := $sub.i32(0, 5);
  goto $bb6;
$bb27:
  assume !(($i88 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:verifier.code 0} true;
  $i80, $p81 := $i49, $p51;
  goto $bb22;
$bb29:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3836, 7} true;
  assume {:verifier.code 0} true;
  assume ($i94 == 1);
  goto $bb11;
$bb30:
  assume !(($i94 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3836, 7} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb31:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 3842, 3} true;
  assume {:verifier.code 0} true;
  $i47 := 0;
  goto $bb6;
}
const mutex_lock_nested: ref;
axiom (mutex_lock_nested == $sub.ref(0, 71932));
procedure  mutex_lock_nested($p0: ref, $i1: i32);
const mutex_unlock: ref;
axiom (mutex_unlock == $sub.ref(0, 72964));
procedure  mutex_unlock($p0: ref);
const mtd_sync: ref;
axiom (mtd_sync == $sub.ref(0, 73996));
procedure  mtd_sync($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2977, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($0.ref);
  // WARNING: %2 = ptrtoint void (%struct.mtd_info*)* null to i64, !dbg !3700, !verifier.code !3697
  call {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2978, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p0);
  // WARNING: %3 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !3705, !verifier.code !3697
  call {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2979, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $add.i64($i2, 224);
  // WARNING: %4 = add i64 %3, 224, !dbg !3708, !verifier.code !3697
  call {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2980, 18} true;
  assume {:verifier.code 0} true;
  $p4 := $i2p.i64.ref($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2980, 16} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.1, $p4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2981, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $p2i.ref.i64($p5);
  // WARNING: %7 = ptrtoint void (%struct.mtd_info*)* %6 to i64, !dbg !3715, !verifier.code !3697
  call {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2982, 18} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.i64($i6, $i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2982, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2984, 18} true;
  assume {:verifier.code 0} true;
  $i8 := $p2i.ref.i64($p0);
  // WARNING: %10 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !3721, !verifier.code !3697
  call {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2985, 29} true;
  assume {:verifier.code 0} true;
  $i9 := $add.i64($i8, 224);
  // WARNING: %11 = add i64 %10, 224, !dbg !3726, !verifier.code !3697
  call {:cexpr "__cil_tmp9"} boogie_si_record_i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2986, 21} true;
  assume {:verifier.code 0} true;
  $p10 := $i2p.i64.ref($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2986, 19} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.1, $p10);
  call devirtbounce.2($p11, $p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2989, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--mtd--mtdblock.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-zVwqz_.c", 2993, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const vfree: ref;
axiom (vfree == $sub.ref(0, 75028));
procedure  vfree($p0: ref);
const __mutex_init: ref;
axiom (__mutex_init == $sub.ref(0, 76060));
procedure  __mutex_init($p0: ref, $p1: ref, $p2: ref);
const register_mtd_blktrans: ref;
axiom (register_mtd_blktrans == $sub.ref(0, 77092));
procedure  register_mtd_blktrans($p0: ref)
  returns ($r: i32);
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 78124));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !5941, metadata !3695), !dbg !5942, !verifier.code !3697
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 34, 21} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 35, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 79156));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 80188));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 261, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_error: ref;
axiom (__VERIFIER_error == $sub.ref(0, 81220));
procedure  __VERIFIER_error()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 47, 3} true;
  assume {:verifier.code 1} true;
  assert false;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 51, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 82252));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 83284));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 84316));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 85348));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 86380));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 87412));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 88444));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 89476));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 90508));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 120, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
  // WARNING: %1 = call i32 @__SMACK_nondet_int(), !dbg !3694, !verifier.code !3695
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.i32($i0, 2147483647);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i2);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 122, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 91540));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 92572));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 93604));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 94636));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 95668));
procedure  __SMACK_nondet_long()
  returns ($r: i64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 96700));
procedure  __SMACK_nondet_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 97732));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 98764));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 99796));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 100828));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 101860));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 102892));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 103924));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 104956));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 105988));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 107020));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const __VERIFIER_nondet_pointer: ref;
axiom (__VERIFIER_nondet_pointer == $sub.ref(0, 108052));
procedure  __VERIFIER_nondet_pointer()
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 243, 10} true;
  assume {:verifier.code 1} true;
  call $p0 := __VERIFIER_nondet();
  call {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 243, 3} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const __VERIFIER_nondet: ref;
axiom (__VERIFIER_nondet == $sub.ref(0, 109084));
procedure  __VERIFIER_nondet()
  returns ($r: ref);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 110116));
function {:inline} $bitcast.ref.ref(i: ref) returns (ref) {i}
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $min.bv128(i1: bv128, i2: bv128) returns (bv128) {if $slt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv96(i1: bv96, i2: bv96) returns (bv96) {if $slt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv88(i1: bv88, i2: bv88) returns (bv88) {if $slt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv64(i1: bv64, i2: bv64) returns (bv64) {if $slt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv56(i1: bv56, i2: bv56) returns (bv56) {if $slt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv48(i1: bv48, i2: bv48) returns (bv48) {if $slt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv40(i1: bv40, i2: bv40) returns (bv40) {if $slt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv32(i1: bv32, i2: bv32) returns (bv32) {if $slt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv24(i1: bv24, i2: bv24) returns (bv24) {if $slt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv16(i1: bv16, i2: bv16) returns (bv16) {if $slt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv8(i1: bv8, i2: bv8) returns (bv8) {if $slt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv128(i1: bv128, i2: bv128) returns (bv128) {if $sgt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv96(i1: bv96, i2: bv96) returns (bv96) {if $sgt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv88(i1: bv88, i2: bv88) returns (bv88) {if $sgt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv64(i1: bv64, i2: bv64) returns (bv64) {if $sgt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv56(i1: bv56, i2: bv56) returns (bv56) {if $sgt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv48(i1: bv48, i2: bv48) returns (bv48) {if $sgt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv40(i1: bv40, i2: bv40) returns (bv40) {if $sgt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv32(i1: bv32, i2: bv32) returns (bv32) {if $sgt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv24(i1: bv24, i2: bv24) returns (bv24) {if $sgt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv16(i1: bv16, i2: bv16) returns (bv16) {if $sgt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv8(i1: bv8, i2: bv8) returns (bv8) {if $sgt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ult.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ult.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ult.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ult.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ult.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ult.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ult.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ult.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ult.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ult.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ult.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ugt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ugt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ugt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ugt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ugt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ugt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ugt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ugt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ugt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ugt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ugt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then i1 else i2}
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) returns (bv128);
function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) returns (bv96);
function {:bvbuiltin "bvnot"} $not.bv88(i: bv88) returns (bv88);
function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) returns (bv64);
function {:bvbuiltin "bvnot"} $not.bv56(i: bv56) returns (bv56);
function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) returns (bv48);
function {:bvbuiltin "bvnot"} $not.bv40(i: bv40) returns (bv40);
function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) returns (bv32);
function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) returns (bv24);
function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) returns (bv16);
function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) returns (bv8);
function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) returns (bv1);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 == i2} function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 == i2} function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 == i2} function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 == i2} function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 == i2} function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 == i2} function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 == i2} function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 == i2} function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 == i2} function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 == i2} function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 == i2} function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 == i2} function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 != i2} function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 != i2} function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 != i2} function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 != i2} function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 != i2} function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 != i2} function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 != i2} function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 != i2} function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 != i2} function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 != i2} function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 != i2} function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 != i2} function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ule.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ule.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ule.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ule.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ule.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ule.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ule.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ule.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ule.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ule.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ule.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ule.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ult.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ult.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ult.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ult.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ult.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ult.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ult.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ult.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ult.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ult.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ult.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $uge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $uge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $uge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $uge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $uge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $uge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $uge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $uge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $uge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $uge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $uge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $uge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ugt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ugt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ugt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ugt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ugt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ugt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ugt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ugt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ugt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ugt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ugt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sle.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sle.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sle.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sle.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sle.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sle.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sle.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sle.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sle.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sle.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sle.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sle.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $slt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $slt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $slt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $slt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $slt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $slt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $slt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $slt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $slt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $slt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $slt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sgt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sgt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sgt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sgt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sgt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sgt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sgt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sgt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sgt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sgt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sgt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:inline} $trunc.bv128.bv96(i: bv128) returns (bv96) {i[96:0]}
function {:inline} $trunc.bv128.bv88(i: bv128) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv128.bv64(i: bv128) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv128.bv56(i: bv128) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv128.bv48(i: bv128) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv128.bv40(i: bv128) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv128.bv32(i: bv128) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv128.bv24(i: bv128) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv128.bv16(i: bv128) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv128.bv8(i: bv128) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv128.bv1(i: bv128) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv96.bv88(i: bv96) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv96.bv64(i: bv96) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv96.bv56(i: bv96) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv96.bv48(i: bv96) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv96.bv40(i: bv96) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv96.bv32(i: bv96) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv96.bv24(i: bv96) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv96.bv16(i: bv96) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv96.bv8(i: bv96) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv96.bv1(i: bv96) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv88.bv64(i: bv88) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv88.bv56(i: bv88) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv88.bv48(i: bv88) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv88.bv40(i: bv88) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv88.bv32(i: bv88) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv88.bv24(i: bv88) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv88.bv16(i: bv88) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv88.bv8(i: bv88) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv88.bv1(i: bv88) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv64.bv56(i: bv64) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv64.bv48(i: bv64) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv64.bv40(i: bv64) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv64.bv32(i: bv64) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv64.bv24(i: bv64) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv64.bv16(i: bv64) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv64.bv8(i: bv64) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv64.bv1(i: bv64) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv56.bv48(i: bv56) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv56.bv40(i: bv56) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv56.bv32(i: bv56) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv56.bv24(i: bv56) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv56.bv16(i: bv56) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv56.bv8(i: bv56) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv56.bv1(i: bv56) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv48.bv32(i: bv48) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv48.bv24(i: bv48) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv48.bv16(i: bv48) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv48.bv8(i: bv48) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv48.bv1(i: bv48) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv40.bv32(i: bv40) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv40.bv24(i: bv40) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv40.bv16(i: bv40) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv40.bv8(i: bv40) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv40.bv1(i: bv40) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv32.bv24(i: bv32) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv32.bv16(i: bv32) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv32.bv8(i: bv32) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv32.bv1(i: bv32) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv24.bv16(i: bv24) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv24.bv8(i: bv24) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv24.bv1(i: bv24) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv16.bv8(i: bv16) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv16.bv1(i: bv16) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv8.bv1(i: bv8) returns (bv1) {i[1:0]}
function {:inline} $zext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 1bv8}
function {:inline} $zext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 1bv16}
function {:inline} $zext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 1bv24}
function {:inline} $zext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 1bv32}
function {:inline} $zext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1bv40}
function {:inline} $zext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 1bv48}
function {:inline} $zext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 1bv56}
function {:inline} $zext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 1bv64}
function {:inline} $zext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 1bv88}
function {:inline} $zext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 1bv96}
function {:inline} $zext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 1bv128}
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $sext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 255bv8}
function {:inline} $sext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 65535bv16}
function {:inline} $sext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 16777215bv24}
function {:inline} $sext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 4294967295bv32}
function {:inline} $sext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1099511627775bv40}
function {:inline} $sext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 281474976710655bv48}
function {:inline} $sext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 72057594037927935bv56}
function {:inline} $sext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 18446744073709551615bv64}
function {:inline} $sext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88}
function {:inline} $sext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96}
function {:inline} $sext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128}
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) {i1 + i2}
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) {i1 + i2}
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) {i1 + i2}
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) {i1 + i2}
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) {i1 + i2}
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) {i1 + i2}
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) {i1 + i2}
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) {i1 + i2}
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) {i1 + i2}
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) {i1 + i2}
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) {i1 + i2}
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) {i1 + i2}
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) {i1 - i2}
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) {i1 - i2}
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) {i1 - i2}
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) {i1 - i2}
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) {i1 - i2}
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) {i1 - i2}
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) {i1 - i2}
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) {i1 - i2}
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) {i1 - i2}
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) {i1 - i2}
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) {i1 - i2}
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) {i1 - i2}
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) {i1 * i2}
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) {i1 * i2}
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) {i1 * i2}
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) {i1 * i2}
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) {i1 * i2}
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) {i1 * i2}
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) {i1 * i2}
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) {i1 * i2}
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) {i1 * i2}
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) {i1 * i2}
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) {i1 * i2}
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) {i1 * i2}
function {:builtin "div"} $div(i1: int, i2: int) returns (int);
function {:builtin "mod"} $mod(i1: int, i2: int) returns (int);
function {:builtin "rem"} $rem(i1: int, i2: int) returns (int);
function {:inline} $min(i1: int, i2: int) returns (int) {if i1 < i2 then i1 else i2}
function {:inline} $max(i1: int, i2: int) returns (int) {if i1 > i2 then i1 else i2}
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $not.i128(i: i128) returns (i128);
function $not.i96(i: i96) returns (i96);
function $not.i88(i: i88) returns (i88);
function $not.i64(i: i64) returns (i64);
function $not.i56(i: i56) returns (i56);
function $not.i48(i: i48) returns (i48);
function $not.i40(i: i40) returns (i40);
function $not.i32(i: i32) returns (i32);
function $not.i24(i: i24) returns (i24);
function $not.i16(i: i16) returns (i16);
function $not.i8(i: i8) returns (i8);
function $not.i1(i: i1) returns (i1);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) {i1 == i2} function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) {i1 == i2} function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) {i1 == i2} function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) {i1 == i2} function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) {i1 == i2} function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) {i1 == i2} function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) {i1 == i2} function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) {i1 == i2} function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) {i1 == i2} function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) {i1 == i2} function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) {i1 == i2} function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) {i1 == i2} function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) {i1 != i2} function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) {i1 != i2} function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) {i1 != i2} function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) {i1 != i2} function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) {i1 != i2} function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) {i1 != i2} function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) {i1 != i2} function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) {i1 != i2} function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) {i1 != i2} function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) {i1 != i2} function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) {i1 != i2} function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) {i1 != i2} function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
axiom $and.i1(0,0) == 0;
axiom $and.i1(0,1) == 0;
axiom $and.i1(1,0) == 0;
axiom $and.i1(1,1) == 1;
axiom $or.i1(0,0) == 0;
axiom $or.i1(0,1) == 1;
axiom $or.i1(1,0) == 1;
axiom $or.i1(1,1) == 1;
axiom $xor.i1(0,0) == 0;
axiom $xor.i1(0,1) == 1;
axiom $xor.i1(1,0) == 1;
axiom $xor.i1(1,1) == 0;
axiom($and.i32(32, 16) == 0);
function {:inline} $trunc.i128.i96(i: i128) returns (i96) {i}
function {:inline} $trunc.i128.i88(i: i128) returns (i88) {i}
function {:inline} $trunc.i128.i64(i: i128) returns (i64) {i}
function {:inline} $trunc.i128.i56(i: i128) returns (i56) {i}
function {:inline} $trunc.i128.i48(i: i128) returns (i48) {i}
function {:inline} $trunc.i128.i40(i: i128) returns (i40) {i}
function {:inline} $trunc.i128.i32(i: i128) returns (i32) {i}
function {:inline} $trunc.i128.i24(i: i128) returns (i24) {i}
function {:inline} $trunc.i128.i16(i: i128) returns (i16) {i}
function {:inline} $trunc.i128.i8(i: i128) returns (i8) {i}
function {:inline} $trunc.i128.i1(i: i128) returns (i1) {i}
function {:inline} $trunc.i96.i64(i: i96) returns (i64) {i}
function {:inline} $trunc.i96.i88(i: i96) returns (i88) {i}
function {:inline} $trunc.i96.i56(i: i96) returns (i56) {i}
function {:inline} $trunc.i96.i48(i: i96) returns (i48) {i}
function {:inline} $trunc.i96.i40(i: i96) returns (i40) {i}
function {:inline} $trunc.i96.i32(i: i96) returns (i32) {i}
function {:inline} $trunc.i96.i24(i: i96) returns (i24) {i}
function {:inline} $trunc.i96.i16(i: i96) returns (i16) {i}
function {:inline} $trunc.i96.i8(i: i96) returns (i8) {i}
function {:inline} $trunc.i96.i1(i: i96) returns (i1) {i}
function {:inline} $trunc.i88.i64(i: i88) returns (i64) {i}
function {:inline} $trunc.i88.i88(i: i88) returns (i88) {i}
function {:inline} $trunc.i88.i56(i: i88) returns (i56) {i}
function {:inline} $trunc.i88.i48(i: i88) returns (i48) {i}
function {:inline} $trunc.i88.i40(i: i88) returns (i40) {i}
function {:inline} $trunc.i88.i32(i: i88) returns (i32) {i}
function {:inline} $trunc.i88.i24(i: i88) returns (i24) {i}
function {:inline} $trunc.i88.i16(i: i88) returns (i16) {i}
function {:inline} $trunc.i88.i8(i: i88) returns (i8) {i}
function {:inline} $trunc.i88.i1(i: i88) returns (i1) {i}
function {:inline} $trunc.i64.i56(i: i64) returns (i56) {i}
function {:inline} $trunc.i64.i48(i: i64) returns (i48) {i}
function {:inline} $trunc.i64.i40(i: i64) returns (i40) {i}
function {:inline} $trunc.i64.i32(i: i64) returns (i32) {i}
function {:inline} $trunc.i64.i24(i: i64) returns (i24) {i}
function {:inline} $trunc.i64.i16(i: i64) returns (i16) {i}
function {:inline} $trunc.i64.i8(i: i64) returns (i8) {i}
function {:inline} $trunc.i64.i1(i: i64) returns (i1) {i}
function {:inline} $trunc.i56.i48(i: i56) returns (i48) {i}
function {:inline} $trunc.i56.i40(i: i56) returns (i40) {i}
function {:inline} $trunc.i56.i32(i: i56) returns (i32) {i}
function {:inline} $trunc.i56.i24(i: i56) returns (i24) {i}
function {:inline} $trunc.i56.i16(i: i56) returns (i16) {i}
function {:inline} $trunc.i56.i8(i: i56) returns (i8) {i}
function {:inline} $trunc.i56.i1(i: i56) returns (i1) {i}
function {:inline} $trunc.i48.i40(i: i48) returns (i40) {i}
function {:inline} $trunc.i48.i32(i: i48) returns (i32) {i}
function {:inline} $trunc.i48.i24(i: i48) returns (i24) {i}
function {:inline} $trunc.i48.i16(i: i48) returns (i16) {i}
function {:inline} $trunc.i48.i8(i: i48) returns (i8) {i}
function {:inline} $trunc.i48.i1(i: i48) returns (i1) {i}
function {:inline} $trunc.i40.i32(i: i40) returns (i32) {i}
function {:inline} $trunc.i40.i24(i: i40) returns (i24) {i}
function {:inline} $trunc.i40.i16(i: i40) returns (i16) {i}
function {:inline} $trunc.i40.i8(i: i40) returns (i8) {i}
function {:inline} $trunc.i40.i1(i: i40) returns (i1) {i}
function {:inline} $trunc.i32.i24(i: i32) returns (i24) {i}
function {:inline} $trunc.i32.i16(i: i32) returns (i16) {i}
function {:inline} $trunc.i32.i8(i: i32) returns (i8) {i}
function {:inline} $trunc.i32.i1(i: i32) returns (i1) {i}
function {:inline} $trunc.i24.i16(i: i24) returns (i16) {i}
function {:inline} $trunc.i24.i8(i: i24) returns (i8) {i}
function {:inline} $trunc.i24.i1(i: i24) returns (i1) {i}
function {:inline} $trunc.i16.i8(i: i16) returns (i8) {i}
function {:inline} $trunc.i16.i1(i: i16) returns (i1) {i}
function {:inline} $trunc.i8.i1(i: i8) returns (i1) {i}
function {:inline} $zext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $zext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $zext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $zext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $zext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $zext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $zext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $zext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $zext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $zext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $zext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $zext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $zext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $zext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $zext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $zext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $zext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $zext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $zext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $zext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $zext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $zext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $zext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $zext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $zext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $zext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $zext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $zext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $zext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $zext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $zext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $zext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $zext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $zext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $zext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $zext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $zext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $zext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $zext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $zext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $zext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $zext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $zext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $zext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $zext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $zext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $zext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $zext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $zext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $zext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $zext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $zext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $zext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $zext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $zext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $zext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $zext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $zext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $zext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $zext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $zext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $zext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $zext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $zext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $zext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $zext.i96.i128(i: i96) returns (i128) {i}
function {:inline} $sext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $sext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $sext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $sext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $sext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $sext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $sext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $sext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $sext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $sext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $sext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $sext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $sext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $sext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $sext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $sext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $sext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $sext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $sext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $sext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $sext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $sext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $sext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $sext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $sext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $sext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $sext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $sext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $sext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $sext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $sext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $sext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $sext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $sext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $sext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $sext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $sext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $sext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $sext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $sext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $sext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $sext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $sext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $sext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $sext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $sext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $sext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $sext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $sext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $sext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $sext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $sext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $sext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $sext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $sext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $sext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $sext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $sext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $sext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $sext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $sext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $sext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $sext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $sext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $sext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $sext.i96.i128(i: i96) returns (i128) {i}
function $fp(ipart:int, fpart:int, epart:int) returns (float);
function $fadd.float(f1:float, f2:float) returns (float);
function $fsub.float(f1:float, f2:float) returns (float);
function $fmul.float(f1:float, f2:float) returns (float);
function $fdiv.float(f1:float, f2:float) returns (float);
function $frem.float(f1:float, f2:float) returns (float);
function $ffalse.float(f1:float, f2:float) returns (i1);
function $ftrue.float(f1:float, f2:float) returns (i1);
function {:inline} $foeq.float(f1:float, f2:float) returns (i1) { if $foeq.bool(f1,f2) then 1 else 0 }
function $foeq.bool(f1:float, f2:float) returns (bool);
function $foge.float(f1:float, f2:float) returns (i1);
function $fogt.float(f1:float, f2:float) returns (i1);
function $fole.float(f1:float, f2:float) returns (i1);
function $folt.float(f1:float, f2:float) returns (i1);
function $fone.float(f1:float, f2:float) returns (i1);
function $ford.float(f1:float, f2:float) returns (i1);
function $fueq.float(f1:float, f2:float) returns (i1);
function $fuge.float(f1:float, f2:float) returns (i1);
function $fugt.float(f1:float, f2:float) returns (i1);
function $fule.float(f1:float, f2:float) returns (i1);
function $fult.float(f1:float, f2:float) returns (i1);
function $fune.float(f1:float, f2:float) returns (i1);
function $funo.float(f1:float, f2:float) returns (i1);
function $fp2si.float.i128(f:float) returns (i128);
function $fp2ui.float.i128(f:float) returns (i128);
function $si2fp.i128.float(i:i128) returns (float);
function $ui2fp.i128.float(i:i128) returns (float);
function $fp2si.float.i96(f:float) returns (i96);
function $fp2ui.float.i96(f:float) returns (i96);
function $si2fp.i96.float(i:i96) returns (float);
function $ui2fp.i96.float(i:i96) returns (float);
function $fp2si.float.i88(f:float) returns (i88);
function $fp2ui.float.i88(f:float) returns (i88);
function $si2fp.i88.float(i:i88) returns (float);
function $ui2fp.i88.float(i:i88) returns (float);
function $fp2si.float.i64(f:float) returns (i64);
function $fp2ui.float.i64(f:float) returns (i64);
function $si2fp.i64.float(i:i64) returns (float);
function $ui2fp.i64.float(i:i64) returns (float);
function $fp2si.float.i56(f:float) returns (i56);
function $fp2ui.float.i56(f:float) returns (i56);
function $si2fp.i56.float(i:i56) returns (float);
function $ui2fp.i56.float(i:i56) returns (float);
function $fp2si.float.i48(f:float) returns (i48);
function $fp2ui.float.i48(f:float) returns (i48);
function $si2fp.i48.float(i:i48) returns (float);
function $ui2fp.i48.float(i:i48) returns (float);
function $fp2si.float.i40(f:float) returns (i40);
function $fp2ui.float.i40(f:float) returns (i40);
function $si2fp.i40.float(i:i40) returns (float);
function $ui2fp.i40.float(i:i40) returns (float);
function $fp2si.float.i32(f:float) returns (i32);
function $fp2ui.float.i32(f:float) returns (i32);
function $si2fp.i32.float(i:i32) returns (float);
function $ui2fp.i32.float(i:i32) returns (float);
function $fp2si.float.i24(f:float) returns (i24);
function $fp2ui.float.i24(f:float) returns (i24);
function $si2fp.i24.float(i:i24) returns (float);
function $ui2fp.i24.float(i:i24) returns (float);
function $fp2si.float.i16(f:float) returns (i16);
function $fp2ui.float.i16(f:float) returns (i16);
function $si2fp.i16.float(i:i16) returns (float);
function $ui2fp.i16.float(i:i16) returns (float);
function $fp2si.float.i8(f:float) returns (i8);
function $fp2ui.float.i8(f:float) returns (i8);
function $si2fp.i8.float(i:i8) returns (float);
function $ui2fp.i8.float(i:i8) returns (float);
function $fptrunc.float.float(f:float) returns (float);
function $fpext.float.float(f:float) returns (float);
function $fp2si.float.bv128(f:float) returns (bv128);
function $fp2ui.float.bv128(f:float) returns (bv128);
function $si2fp.bv128.float(i:bv128) returns (float);
function $ui2fp.bv128.float(i:bv128) returns (float);
function $fp2si.float.bv96(f:float) returns (bv96);
function $fp2ui.float.bv96(f:float) returns (bv96);
function $si2fp.bv96.float(i:bv96) returns (float);
function $ui2fp.bv96.float(i:bv96) returns (float);
function $fp2si.float.bv88(f:float) returns (bv88);
function $fp2ui.float.bv88(f:float) returns (bv88);
function $si2fp.bv88.float(i:bv88) returns (float);
function $ui2fp.bv88.float(i:bv88) returns (float);
function $fp2si.float.bv64(f:float) returns (bv64);
function $fp2ui.float.bv64(f:float) returns (bv64);
function $si2fp.bv64.float(i:bv64) returns (float);
function $ui2fp.bv64.float(i:bv64) returns (float);
function $fp2si.float.bv56(f:float) returns (bv56);
function $fp2ui.float.bv56(f:float) returns (bv56);
function $si2fp.bv56.float(i:bv56) returns (float);
function $ui2fp.bv56.float(i:bv56) returns (float);
function $fp2si.float.bv48(f:float) returns (bv48);
function $fp2ui.float.bv48(f:float) returns (bv48);
function $si2fp.bv48.float(i:bv48) returns (float);
function $ui2fp.bv48.float(i:bv48) returns (float);
function $fp2si.float.bv40(f:float) returns (bv40);
function $fp2ui.float.bv40(f:float) returns (bv40);
function $si2fp.bv40.float(i:bv40) returns (float);
function $ui2fp.bv40.float(i:bv40) returns (float);
function $fp2si.float.bv32(f:float) returns (bv32);
function $fp2ui.float.bv32(f:float) returns (bv32);
function $si2fp.bv32.float(i:bv32) returns (float);
function $ui2fp.bv32.float(i:bv32) returns (float);
function $fp2si.float.bv24(f:float) returns (bv24);
function $fp2ui.float.bv24(f:float) returns (bv24);
function $si2fp.bv24.float(i:bv24) returns (float);
function $ui2fp.bv24.float(i:bv24) returns (float);
function $fp2si.float.bv16(f:float) returns (bv16);
function $fp2ui.float.bv16(f:float) returns (bv16);
function $si2fp.bv16.float(i:bv16) returns (float);
function $ui2fp.bv16.float(i:bv16) returns (float);
function $fp2si.float.bv8(f:float) returns (bv8);
function $fp2ui.float.bv8(f:float) returns (bv8);
function $si2fp.bv8.float(i:bv8) returns (float);
function $ui2fp.bv8.float(i:bv8) returns (float);
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;
function {:inline} $isExternal(p: ref) returns (bool) {$slt.ref.bool(p,$EXTERNS_BOTTOM)}
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) { M[p] }
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) { M[p] }
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) { M[p] }
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) { M[p] }
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) { M[p] }
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) { M[p] }
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) { M[p] }
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) { M[p] }
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) { M[p] }
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) { M[p] }
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128){ $load.bytes.bv64(M, $add.ref(p, $8.ref)) ++ $load.bytes.bv64(M, p) }
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96){ $load.bytes.bv64(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88){ $load.bytes.bv56(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64){ $load.bytes.bv32(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56){ $load.bytes.bv24(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48){ $load.bytes.bv16(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40){ M[$add.ref(p, $4.ref)] ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32){ M[$add.ref(p, $3.ref)] ++ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24){ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16){ M[$add.ref(p, $1.ref)] ++ M[p] }
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, v: i128) returns ([ref] i128) { M[p := v] }
function {:inline} $store.i96(M: [ref] i96, p: ref, v: i96) returns ([ref] i96) { M[p := v] }
function {:inline} $store.i88(M: [ref] i88, p: ref, v: i88) returns ([ref] i88) { M[p := v] }
function {:inline} $store.i64(M: [ref] i64, p: ref, v: i64) returns ([ref] i64) { M[p := v] }
function {:inline} $store.i56(M: [ref] i56, p: ref, v: i56) returns ([ref] i56) { M[p := v] }
function {:inline} $store.i48(M: [ref] i48, p: ref, v: i48) returns ([ref] i48) { M[p := v] }
function {:inline} $store.i40(M: [ref] i40, p: ref, v: i40) returns ([ref] i40) { M[p := v] }
function {:inline} $store.i32(M: [ref] i32, p: ref, v: i32) returns ([ref] i32) { M[p := v] }
function {:inline} $store.i24(M: [ref] i24, p: ref, v: i24) returns ([ref] i24) { M[p := v] }
function {:inline} $store.i16(M: [ref] i16, p: ref, v: i16) returns ([ref] i16) { M[p := v] }
function {:inline} $store.i8(M: [ref] i8, p: ref, v: i8) returns ([ref] i8) { M[p := v] }
function {:inline} $store.bv128(M: [ref] bv128, p: ref, v: bv128) returns ([ref] bv128) { M[p := v] }
function {:inline} $store.bv96(M: [ref] bv96, p: ref, v: bv96) returns ([ref] bv96) { M[p := v] }
function {:inline} $store.bv88(M: [ref] bv88, p: ref, v: bv88) returns ([ref] bv88) { M[p := v] }
function {:inline} $store.bv64(M: [ref] bv64, p: ref, v: bv64) returns ([ref] bv64) { M[p := v] }
function {:inline} $store.bv56(M: [ref] bv56, p: ref, v: bv56) returns ([ref] bv56) { M[p := v] }
function {:inline} $store.bv48(M: [ref] bv48, p: ref, v: bv48) returns ([ref] bv48) { M[p := v] }
function {:inline} $store.bv40(M: [ref] bv40, p: ref, v: bv40) returns ([ref] bv40) { M[p := v] }
function {:inline} $store.bv32(M: [ref] bv32, p: ref, v: bv32) returns ([ref] bv32) { M[p := v] }
function {:inline} $store.bv24(M: [ref] bv24, p: ref, v: bv24) returns ([ref] bv24) { M[p := v] }
function {:inline} $store.bv16(M: [ref] bv16, p: ref, v: bv16) returns ([ref] bv16) { M[p := v] }
function {:inline} $store.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) { M[p := v] }
function {:inline} $store.bytes.bv128(M:[ref]bv8, p:ref, v:bv128) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]][$add.ref(p, $11.ref) := v[104:96]][$add.ref(p, $12.ref) := v[112:104]][$add.ref(p, $13.ref) := v[120:112]][$add.ref(p, $14.ref) := v[128:120]]}
function {:inline} $store.bytes.bv96(M:[ref]bv8, p:ref, v:bv96) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]]}
function {:inline} $store.bytes.bv88(M:[ref]bv8, p:ref, v:bv88) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]]}
function {:inline} $store.bytes.bv64(M:[ref]bv8, p:ref, v:bv64) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]]}
function {:inline} $store.bytes.bv56(M:[ref]bv8, p:ref, v:bv56) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]]}
function {:inline} $store.bytes.bv48(M:[ref]bv8, p:ref, v:bv48) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]]}
function {:inline} $store.bytes.bv40(M:[ref]bv8, p:ref, v:bv40) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]]}
function {:inline} $store.bytes.bv32(M:[ref]bv8, p:ref, v:bv32) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]]}
function {:inline} $store.bytes.bv24(M:[ref]bv8, p:ref, v:bv24) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]]}
function {:inline} $store.bytes.bv16(M:[ref]bv8, p:ref, v:bv16) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]]}
function {:inline} $store.bytes.bv8(M:[ref]bv8, p:ref, v:bv8) returns ([ref]bv8) {M[p := v]}
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, v: ref) returns ([ref] ref) { M[p := v] }
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, v: float) returns ([ref] float) { M[p := v] }
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
procedure  boogie_si_record_bool(i: bool);
procedure  boogie_si_record_i1(i: i1);
procedure  boogie_si_record_i8(i: i8);
procedure  boogie_si_record_i16(i: i16);
procedure  boogie_si_record_i24(i: i24);
procedure  boogie_si_record_i32(i: i32);
procedure  boogie_si_record_i40(i: i40);
procedure  boogie_si_record_i48(i: i48);
procedure  boogie_si_record_i56(i: i56);
procedure  boogie_si_record_i64(i: i64);
procedure  boogie_si_record_i88(i: i88);
procedure  boogie_si_record_i96(i: i96);
procedure  boogie_si_record_i128(i: i128);
procedure  boogie_si_record_bv1(i: bv1);
procedure  boogie_si_record_bv8(i: bv8);
procedure  boogie_si_record_bv16(i: bv16);
procedure  boogie_si_record_bv24(i: bv24);
procedure  boogie_si_record_bv32(i: bv32);
procedure  boogie_si_record_bv40(i: bv40);
procedure  boogie_si_record_bv48(i: bv48);
procedure  boogie_si_record_bv56(i: bv56);
procedure  boogie_si_record_bv64(i: bv64);
procedure  boogie_si_record_bv88(i: bv88);
procedure  boogie_si_record_bv96(i: bv96);
procedure  boogie_si_record_bv128(i: bv128);
procedure  boogie_si_record_ref(i: ref);
procedure  boogie_si_record_float(i: float);
var $exn: bool;
var $exnv: int;
function $extractvalue(p: int, i: int) returns (int);

procedure  $alloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 111148));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 112180));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1782, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1787, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 113212));
procedure  llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 114244));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := 0;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
  $M.2 := 0;
  call {:cexpr "ldv_spin"} boogie_si_record_i32(0);
  $M.1 := $store.i32($M.1, mtdblks_lock, 1);
  $M.1 := $store.i32($M.1, $add.ref(mtdblks_lock, 8), 0);
  $M.1 := $store.i32($M.1, $add.ref($add.ref(mtdblks_lock, 8), 4), $sub.i32(0, 559067475));
  $M.1 := $store.i32($M.1, $add.ref($add.ref(mtdblks_lock, 8), 8), $sub.i32(0, 1));
  $M.1 := $store.ref($M.1, $add.ref($add.ref(mtdblks_lock, 8), 16), $i2p.i64.ref($sub.i64(0, 1)));
  $M.1 := $store.ref($M.1, $add.ref($add.ref(mtdblks_lock, 8), 24), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtdblks_lock, 8), 24), 8), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtdblks_lock, 8), 24), 8), 8), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtdblks_lock, 8), 24), 24), .str.6);
  $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mtdblks_lock, 8), 24), 32), 0);
  $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mtdblks_lock, 8), 24), 40), 0);
  $M.1 := $store.ref($M.1, $add.ref(mtdblks_lock, 80), $add.ref(mtdblks_lock, 80));
  $M.1 := $store.ref($M.1, $add.ref($add.ref(mtdblks_lock, 80), 8), $add.ref(mtdblks_lock, 80));
  $M.1 := $store.ref($M.1, $add.ref(mtdblks_lock, 96), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(mtdblks_lock, 104), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(mtdblks_lock, 112), mtdblks_lock);
  $M.1 := $store.ref($M.1, $add.ref(mtdblks_lock, 120), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(mtdblks_lock, 120), 8), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtdblks_lock, 120), 8), 8), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(mtdblks_lock, 120), 24), .str.7);
  $M.1 := $store.i32($M.1, $add.ref($add.ref(mtdblks_lock, 120), 32), 0);
  $M.1 := $store.i64($M.1, $add.ref($add.ref(mtdblks_lock, 120), 40), 0);
  $M.1 := $store.ref($M.1, mtdblock_tr, .str);
  $M.1 := $store.i32($M.1, $add.ref(mtdblock_tr, 8), 31);
  $M.1 := $store.i32($M.1, $add.ref(mtdblock_tr, 12), 0);
  $M.1 := $store.i32($M.1, $add.ref(mtdblock_tr, 16), 512);
  $M.1 := $store.i32($M.1, $add.ref(mtdblock_tr, 20), 0);
  $M.1 := $store.ref($M.1, $add.ref(mtdblock_tr, 24), mtdblock_readsect);
  $M.1 := $store.ref($M.1, $add.ref(mtdblock_tr, 32), mtdblock_writesect);
  $M.1 := $store.ref($M.1, $add.ref(mtdblock_tr, 40), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(mtdblock_tr, 48), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(mtdblock_tr, 56), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(mtdblock_tr, 64), mtdblock_flush);
  $M.1 := $store.ref($M.1, $add.ref(mtdblock_tr, 72), mtdblock_open);
  $M.1 := $store.ref($M.1, $add.ref(mtdblock_tr, 80), mtdblock_release);
  $M.1 := $store.ref($M.1, $add.ref(mtdblock_tr, 88), mtdblock_add_mtd);
  $M.1 := $store.ref($M.1, $add.ref(mtdblock_tr, 96), mtdblock_remove_dev);
  $M.1 := $store.ref($M.1, $add.ref(mtdblock_tr, 104), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(mtdblock_tr, 104), 8), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(mtdblock_tr, 120), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(mtdblock_tr, 120), 8), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(mtdblock_tr, 136), __this_module);
  $exn := false;
  return;
}
const devirtbounce: ref;
axiom (devirtbounce == $sub.ref(0, 115276));
procedure  devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
  returns ($r: i64)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.1: ref;
axiom (devirtbounce.1 == $sub.ref(0, 116308));
procedure  devirtbounce.1(funcPtr: ref, arg: ref)
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.2: ref;
axiom (devirtbounce.2 == $sub.ref(0, 117340));
procedure  devirtbounce.2(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i4 := $eq.ref(erase_callback, $p0);
  assume {:branchcond $i4} true;
  goto $bb3, $bb5;
$bb2:
  assume ($i3 == 1);
  $p1 := $bitcast.ref.ref(arg);
  call mtdblock_remove_dev($p1);
  $exn := false;
  return;
$bb3:
  assume ($i4 == 1);
  $p2 := $bitcast.ref.ref(arg);
  call erase_callback($p2);
  $exn := false;
  return;
$bb4:
  assume !(($i3 == 1));
  assume false;
$bb5:
  assume !(($i4 == 1));
  $i3 := $eq.ref(mtdblock_remove_dev, $p0);
  assume {:branchcond $i3} true;
  goto $bb2, $bb4;
}
const $u0: ref;
const $u1: i64;
const $u2: ref;
const $u3: ref;
const $u4: ref;
const $u5: ref;
const $u6: ref;
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
