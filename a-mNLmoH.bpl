// generated by SMACK version 1.9.0 for corral
// via /home/ankit/smack/smack/bin/smack -x=svcomp --time-limit 1800 /sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c --bit-precise --verifier-options  /bopt:boolControlVC /bopt:z3opt:SMT.MBQI=false /deepAsserts /di /noCallTreeReuse /nonUniformUnfolding /useArrayTheory --unroll 16

// Basic types
type i1 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type ref = i64;
type float = bv32;

// Basic constants
const $0: bv32;
axiom ($0 == 0bv32);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $2.ref: ref;
axiom ($2.ref == 2);
const $3.ref: ref;
axiom ($3.ref == 3);
const $4.ref: ref;
axiom ($4.ref == 4);
const $5.ref: ref;
axiom ($5.ref == 5);
const $6.ref: ref;
axiom ($6.ref == 6);
const $7.ref: ref;
axiom ($7.ref == 7);
const $8.ref: ref;
axiom ($8.ref == 8);
const $9.ref: ref;
axiom ($9.ref == 9);
const $10.ref: ref;
axiom ($10.ref == 10);
const $11.ref: ref;
axiom ($11.ref == 11);
const $12.ref: ref;
axiom ($12.ref == 12);
const $13.ref: ref;
axiom ($13.ref == 13);
const $14.ref: ref;
axiom ($14.ref == 14);
const $1024.ref: ref;
axiom ($1024.ref == 1024);

// Memory maps (13 regions)
var $M.0: [ref] bv8;
var $M.1: ref;
var $M.2: bv32;
var $M.3: bv32;
var $M.4: bv32;
var $M.5: bv32;
var $M.6: ref;
var $M.7: ref;
var $M.8: ref;
var $M.9: bv32;
var $M.10: bv64;
var $M.11: bv32;
var $M.12: bv32;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 141156));
axiom ($EXTERNS_BOTTOM == $sub.ref(0, 32776));
axiom ($MALLOC_TOP == 9223372036854775807);

// Bitstd::vector-integer conversions
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2int"} $bv2uint.64(i: bv64) returns (i64);
function {:inline} $bv2int.64(i: bv64) returns (i64) { if $slt.bv64.bool(i, 0bv64) then $sub.i64($bv2uint.64(i), 18446744073709551616) else $bv2uint.64(i) }
// Bytewise pointer storage
function {:inline} $load.bytes.ref(M: [ref] bv8, p: ref) returns (ref) { $i2p.bv64.ref($load.bytes.bv64(M, p)) }
function {:inline} $store.bytes.ref(M: [ref] bv8, p: ref, v: ref)returns ([ref] bv8) { $store.bytes.bv64(M,p,$p2i.ref.bv64(v)) }
// Pointer-number conversions
function {:inline} $p2i.ref.bv8(p: ref) returns (bv8) { $trunc.bv64.bv8($int2bv.64(p)) }
function {:inline} $i2p.bv8.ref(i: bv8) returns (ref) { $bv2int.64($zext.bv8.bv64(i)) }
function {:inline} $p2i.ref.bv16(p: ref) returns (bv16) { $trunc.bv64.bv16($int2bv.64(p)) }
function {:inline} $i2p.bv16.ref(i: bv16) returns (ref) { $bv2int.64($zext.bv16.bv64(i)) }
function {:inline} $p2i.ref.bv32(p: ref) returns (bv32) { $trunc.bv64.bv32($int2bv.64(p)) }
function {:inline} $i2p.bv32.ref(i: bv32) returns (ref) { $bv2int.64($zext.bv32.bv64(i)) }
function {:inline} $p2i.ref.bv64(p: ref) returns (bv64) { $int2bv.64(p) }
function {:inline} $i2p.bv64.ref(i: bv64) returns (ref) { $bv2int.64(i) }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (bv1) { if $eq.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (bv1) { if $ne.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (bv1) { if $ugt.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (bv1) { if $uge.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (bv1) { if $ult.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (bv1) { if $ule.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (bv1) { if $sgt.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (bv1) { if $sge.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (bv1) { if $slt.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (bv1) { if $sle.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

const LDV_IN_INTERRUPT: ref;
axiom (LDV_IN_INTERRUPT == $sub.ref(0, 1028));
const ldv_mutex: ref;
axiom (ldv_mutex == $sub.ref(0, 2056));
const {:count 6} llvm.used: ref;
axiom (llvm.used == $sub.ref(0, 3128));
const __param_dev: ref;
axiom (__param_dev == $sub.ref(0, 4184));
const {:count 17} __mod_devtype34: ref;
axiom (__mod_devtype34 == $sub.ref(0, 5225));
const {:count 34} __mod_dev35: ref;
axiom (__mod_dev35 == $sub.ref(0, 6283));
const {:count 32} __mod_description527: ref;
axiom (__mod_description527 == $sub.ref(0, 7339));
const {:count 21} __mod_author528: ref;
axiom (__mod_author528 == $sub.ref(0, 8384));
const {:count 12} __mod_license529: ref;
axiom (__mod_license529 == $sub.ref(0, 9420));
const {:count 4} __param_str_dev: ref;
axiom (__param_str_dev == $sub.ref(0, 10448));
const param_ops_int: ref;
axiom (param_ops_int == $sub.ref(0, 32776));
const dev: ref;
axiom (dev == $sub.ref(0, 11476));
const errcnt: ref;
axiom (errcnt == $sub.ref(0, 12504));
const bbt: ref;
axiom (bbt == $sub.ref(0, 13536));
const next: ref;
axiom (next == $sub.ref(0, 14568));
const readbuf: ref;
axiom (readbuf == $sub.ref(0, 15600));
const writebuf: ref;
axiom (writebuf == $sub.ref(0, 16632));
const bufsize: ref;
axiom (bufsize == $sub.ref(0, 17660));
const pgcnt: ref;
axiom (pgcnt == $sub.ref(0, 18688));
const ebcnt: ref;
axiom (ebcnt == $sub.ref(0, 19716));
const subpgsize: ref;
axiom (subpgsize == $sub.ref(0, 20744));
const mtd: ref;
axiom (mtd == $sub.ref(0, 21776));
const .str: ref;
axiom (.str == $sub.ref(0, 22805));
const {:count 54} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 23883));
const {:count 75} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 24982));
const {:count 67} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 26073));
const {:count 36} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 27133));
const {:count 50} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 28207));
const {:count 51} .str.6: ref;
axiom (.str.6 == $sub.ref(0, 29282));
const {:count 156} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 30462));
const {:count 51} .str.8: ref;
axiom (.str.8 == $sub.ref(0, 31537));
const {:count 42} .str.9: ref;
axiom (.str.9 == $sub.ref(0, 32603));
const {:count 49} .str.10: ref;
axiom (.str.10 == $sub.ref(0, 33676));
const {:count 192} .str.11: ref;
axiom (.str.11 == $sub.ref(0, 34892));
const {:count 44} .str.12: ref;
axiom (.str.12 == $sub.ref(0, 35960));
const {:count 47} .str.13: ref;
axiom (.str.13 == $sub.ref(0, 37031));
const {:count 50} .str.14: ref;
axiom (.str.14 == $sub.ref(0, 38105));
const {:count 45} .str.15: ref;
axiom (.str.15 == $sub.ref(0, 39174));
const {:count 45} .str.16: ref;
axiom (.str.16 == $sub.ref(0, 40243));
const {:count 39} .str.17: ref;
axiom (.str.17 == $sub.ref(0, 41306));
const {:count 45} .str.28: ref;
axiom (.str.28 == $sub.ref(0, 42375));
const {:count 49} .str.29: ref;
axiom (.str.29 == $sub.ref(0, 43448));
const {:count 51} .str.30: ref;
axiom (.str.30 == $sub.ref(0, 44523));
const {:count 50} .str.25: ref;
axiom (.str.25 == $sub.ref(0, 45597));
const {:count 39} .str.26: ref;
axiom (.str.26 == $sub.ref(0, 46660));
const {:count 39} .str.38: ref;
axiom (.str.38 == $sub.ref(0, 47723));
const {:count 56} .str.36: ref;
axiom (.str.36 == $sub.ref(0, 48803));
const {:count 56} .str.37: ref;
axiom (.str.37 == $sub.ref(0, 49883));
const {:count 59} .str.31: ref;
axiom (.str.31 == $sub.ref(0, 50966));
const {:count 59} .str.32: ref;
axiom (.str.32 == $sub.ref(0, 52049));
const {:count 59} .str.33: ref;
axiom (.str.33 == $sub.ref(0, 53132));
const {:count 5} .str.34: ref;
axiom (.str.34 == $sub.ref(0, 54161));
const {:count 2} .str.35: ref;
axiom (.str.35 == $sub.ref(0, 55187));
const {:count 37} .str.27: ref;
axiom (.str.27 == $sub.ref(0, 56248));
const {:count 42} .str.21: ref;
axiom (.str.21 == $sub.ref(0, 57314));
const {:count 43} .str.22: ref;
axiom (.str.22 == $sub.ref(0, 58381));
const {:count 50} .str.23: ref;
axiom (.str.23 == $sub.ref(0, 59455));
const {:count 56} .str.24: ref;
axiom (.str.24 == $sub.ref(0, 60535));
const {:count 50} .str.18: ref;
axiom (.str.18 == $sub.ref(0, 61609));
const {:count 56} .str.19: ref;
axiom (.str.19 == $sub.ref(0, 62689));
const {:count 37} .str.20: ref;
axiom (.str.20 == $sub.ref(0, 63750));
const {:count 14} .str.2.43: ref;
axiom (.str.2.43 == $sub.ref(0, 64788));
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 65820));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const mtd_subpagetest_init: ref;
axiom (mtd_subpagetest_init == $sub.ref(0, 66852));
procedure  mtd_subpagetest_init()
  returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv32;
  var $i2: bv32;
  var $i3: bv1;
  var $i4: bv32;
  var $i5: bv32;
  var $i7: bv32;
  var $i8: bv32;
  var $p9: ref;
  var $i10: bv32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: bv64;
  var $i15: bv1;
  var $p16: ref;
  var $p17: ref;
  var $i18: bv64;
  var $i19: bv32;
  var $i20: bv32;
  var $p21: ref;
  var $p22: ref;
  var $i23: bv8;
  var $i24: bv32;
  var $i25: bv1;
  var $i26: bv32;
  var $p28: ref;
  var $i29: bv64;
  var $i30: bv64;
  var $p31: ref;
  var $i32: bv32;
  var $p33: ref;
  var $i34: bv64;
  var $i35: bv64;
  var $p36: ref;
  var $i37: bv32;
  var $i38: bv32;
  var $p39: ref;
  var $i40: bv64;
  var $i41: bv64;
  var $p42: ref;
  var $i43: bv64;
  var $p44: ref;
  var $i45: bv64;
  var $i46: bv64;
  var $p47: ref;
  var $i48: bv32;
  var $i49: bv64;
  var $i50: bv64;
  var $i51: bv32;
  var $p52: ref;
  var $i53: bv64;
  var $i54: bv64;
  var $p55: ref;
  var $i56: bv32;
  var $p57: ref;
  var $i58: bv64;
  var $i59: bv64;
  var $p60: ref;
  var $i61: bv32;
  var $i62: bv32;
  var $p63: ref;
  var $i64: bv64;
  var $i65: bv64;
  var $p66: ref;
  var $i67: bv64;
  var $p68: ref;
  var $i69: bv64;
  var $i70: bv64;
  var $p71: ref;
  var $i72: bv32;
  var $p73: ref;
  var $i74: bv64;
  var $i75: bv64;
  var $p76: ref;
  var $i77: bv32;
  var $p78: ref;
  var $i79: bv64;
  var $i80: bv64;
  var $p81: ref;
  var $i82: bv32;
  var $i83: bv32;
  var $i84: bv32;
  var $i85: bv32;
  var $i86: bv32;
  var $i87: bv32;
  var $i88: bv32;
  var $i89: bv32;
  var $i90: bv64;
  var $p91: ref;
  var $p92: ref;
  var $i93: bv1;
  var $i94: bv32;
  var $i95: bv32;
  var $i96: bv64;
  var $p97: ref;
  var $p98: ref;
  var $i99: bv1;
  var $i100: bv32;
  var $i101: bv32;
  var $i102: bv1;
  var $i103: bv32;
  var $i104: bv1;
  var $i105: bv32;
  var $i106: bv32;
  var $i107: bv32;
  var $i108: bv1;
  var $i109: bv32;
  var $p110: ref;
  var $i111: bv64;
  var $p112: ref;
  var $i113: bv8;
  var $i114: bv1;
  var $i115: bv32;
  var $i116: bv1;
  var $i117: bv1;
  var $i118: bv32;
  var $i119: bv1;
  var $i120: bv1;
  var $i121: bv32;
  var $i122: bv64;
  var $i123: bv64;
  var $i124: bv1;
  var $i125: bv32;
  var $i126: bv32;
  var $i127: bv1;
  var $i128: bv32;
  var $i129: bv32;
  var $i130: bv32;
  var $i131: bv32;
  var $i132: bv32;
  var $i133: bv32;
  var $i134: bv32;
  var $i135: bv1;
  var $i136: bv32;
  var $p137: ref;
  var $i138: bv64;
  var $p139: ref;
  var $i140: bv8;
  var $i141: bv1;
  var $i142: bv32;
  var $i143: bv1;
  var $i144: bv1;
  var $i145: bv32;
  var $i146: bv1;
  var $i147: bv1;
  var $i148: bv32;
  var $i149: bv64;
  var $i150: bv64;
  var $i151: bv1;
  var $i152: bv32;
  var $i153: bv32;
  var $i154: bv1;
  var $i155: bv32;
  var $i156: bv32;
  var $i157: bv32;
  var $i158: bv32;
  var $i159: bv32;
  var $i160: bv1;
  var $i161: bv32;
  var $i162: bv1;
  var $i163: bv32;
  var $i164: bv32;
  var $i165: bv32;
  var $i166: bv1;
  var $i167: bv32;
  var $p168: ref;
  var $i169: bv64;
  var $p170: ref;
  var $i171: bv8;
  var $i172: bv1;
  var $i173: bv32;
  var $i174: bv1;
  var $i175: bv1;
  var $i176: bv32;
  var $i177: bv1;
  var $i178: bv1;
  var $i179: bv32;
  var $i180: bv64;
  var $i181: bv64;
  var $i182: bv1;
  var $i183: bv32;
  var $i184: bv32;
  var $i185: bv1;
  var $i186: bv32;
  var $i187: bv32;
  var $i188: bv32;
  var $i189: bv32;
  var $i190: bv32;
  var $i191: bv32;
  var $i192: bv32;
  var $i193: bv1;
  var $i194: bv32;
  var $p195: ref;
  var $i196: bv64;
  var $p197: ref;
  var $i198: bv8;
  var $i199: bv1;
  var $i200: bv32;
  var $i201: bv1;
  var $i202: bv1;
  var $i203: bv32;
  var $i204: bv1;
  var $i205: bv1;
  var $i206: bv32;
  var $i207: bv64;
  var $i208: bv64;
  var $i209: bv1;
  var $i210: bv32;
  var $i211: bv32;
  var $i212: bv1;
  var $i213: bv32;
  var $i214: bv32;
  var $i215: bv32;
  var $i216: bv32;
  var $i217: bv32;
  var $i218: bv1;
  var $i219: bv32;
  var $i220: bv1;
  var $i221: bv32;
  var $i222: bv32;
  var $i27: bv32;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i227: bv1;
  var $i228: bv32;
  var $i229: bv32;
  var $i6: bv32;
$bb0:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3518, 3} true;
  assume {:verifier.code 0} true;
  call $i0 := printk.ref(.str);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3519, 3} true;
  assume {:verifier.code 0} true;
  call $i1 := printk.ref(.str.1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3523, 17} true;
  assume {:verifier.code 0} true;
  $i2 := $load.bytes.bv32($M.0, dev);
  // WARNING: %3 = load i32, i32* @dev, align 4, !dbg !2400, !verifier.code !2393
  call {:cexpr "__cil_tmp15"} boogie_si_record_bv32($i2);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3524, 19} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.bv32($i2, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3524, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3526, 5} true;
  assume {:verifier.code 0} true;
  call $i4 := printk.ref(.str.2);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3527, 5} true;
  assume {:verifier.code 0} true;
  call $i5 := printk.ref(.str.3);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3529, 5} true;
  assume {:verifier.code 0} true;
  $i6 := $sub.bv32(0bv32, 22bv32);
  goto $bb3;
$bb2:
  assume !(($i3 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3944, 1} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3536, 17} true;
  assume {:verifier.code 0} true;
  $i7 := $load.bytes.bv32($M.0, dev);
  // WARNING: %10 = load i32, i32* @dev, align 4, !dbg !2414, !verifier.code !2393
  call {:cexpr "__cil_tmp17"} boogie_si_record_bv32($i7);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3537, 3} true;
  assume {:verifier.code 0} true;
  call $i8 := printk.ref.bv32(.str.4, $i7);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3539, 17} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($0.ref);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3541, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $load.bytes.bv32($M.0, dev);
  // WARNING: %13 = load i32, i32* @dev, align 4, !dbg !2426, !verifier.code !2393
  call {:cexpr "__cil_tmp21"} boogie_si_record_bv32($i10);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3542, 9} true;
  assume {:verifier.code 0} true;
  call $p11 := get_mtd_device($p9, $i10);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3542, 7} true;
  assume {:verifier.code 0} true;
  $M.1 := $p11;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3543, 33} true;
  assume {:verifier.code 0} true;
  $p12 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3543, 17} true;
  assume {:verifier.code 0} true;
  $p13 := $bitcast.ref.ref($p12);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3544, 20} true;
  assume {:verifier.code 0} true;
  call $i14 := IS_ERR($p13);
  // WARNING: %17 = call i64 @IS_ERR(i8* %16), !dbg !2435, !verifier.code !2393
  call {:cexpr "tmp___9"} boogie_si_record_bv64($i14);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3546, 7} true;
  assume {:verifier.code 0} true;
  $i15 := $ne.bv64($i14, 0bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3546, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i15 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3548, 35} true;
  assume {:verifier.code 0} true;
  $p16 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3548, 19} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p16);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3549, 22} true;
  assume {:verifier.code 0} true;
  call $i18 := PTR_ERR($p17);
  // WARNING: %22 = call i64 @PTR_ERR(i8* %21), !dbg !2447, !verifier.code !2393
  call {:cexpr "tmp___8"} boogie_si_record_bv64($i18);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3550, 11} true;
  assume {:verifier.code 0} true;
  $i19 := $trunc.bv64.bv32($i18);
  // WARNING: %23 = trunc i64 %22 to i32, !dbg !2450, !verifier.code !2393
  call {:cexpr "err"} boogie_si_record_bv32($i19);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3551, 5} true;
  assume {:verifier.code 0} true;
  call $i20 := printk.ref(.str.5);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3553, 5} true;
  assume {:verifier.code 0} true;
  $i6 := $i19;
  goto $bb3;
$bb6:
  assume !(($i15 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3558, 29} true;
  assume {:verifier.code 0} true;
  $p21 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3558, 17} true;
  assume {:verifier.code 0} true;
  $p22 := $bitcast.ref.ref($p21);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3558, 17} true;
  assume {:verifier.code 0} true;
  $i23 := $load.bytes.bv8($M.0, $p22);
  // WARNING: %29 = load i8, i8* %28, align 1, !dbg !2455, !verifier.code !2393
  call {:cexpr "__cil_tmp24"} boogie_si_record_bv8($i23);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3559, 17} true;
  assume {:verifier.code 0} true;
  $i24 := $zext.bv8.bv32($i23);
  // WARNING: %30 = zext i8 %29 to i32, !dbg !2458, !verifier.code !2393
  call {:cexpr "__cil_tmp25"} boogie_si_record_bv32($i24);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3560, 19} true;
  assume {:verifier.code 0} true;
  $i25 := $ne.bv32($i24, 4bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3560, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i25 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3562, 5} true;
  assume {:verifier.code 0} true;
  call $i26 := printk.ref(.str.6);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3564, 5} true;
  assume {:verifier.code 0} true;
  $i27 := 0bv32;
  goto $bb10;
$bb9:
  assume !(($i25 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3924, 33} true;
  assume {:verifier.code 0} true;
  $p223 := $M.8;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3925, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p223);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3926, 33} true;
  assume {:verifier.code 0} true;
  $p224 := $M.7;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3927, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p224);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3928, 33} true;
  assume {:verifier.code 0} true;
  $p225 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3929, 3} true;
  assume {:verifier.code 0} true;
  call kfree($p225);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3930, 18} true;
  assume {:verifier.code 0} true;
  $p226 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3930, 3} true;
  assume {:verifier.code 0} true;
  call put_mtd_device($p226);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3932, 7} true;
  assume {:verifier.code 0} true;
  $i227 := $ne.bv32($i27, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3932, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i227} true;
  goto $bb100, $bb101;
$bb11:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3570, 33} true;
  assume {:verifier.code 0} true;
  $p28 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3570, 17} true;
  assume {:verifier.code 0} true;
  $i29 := $p2i.ref.bv64($p28);
  // WARNING: %37 = ptrtoint %struct.mtd_info* %36 to i64, !dbg !2470, !verifier.code !2393
  call {:cexpr "__cil_tmp26"} boogie_si_record_bv64($i29);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3571, 29} true;
  assume {:verifier.code 0} true;
  $i30 := $add.bv64($i29, 352bv64);
  // WARNING: %38 = add i64 %37, 352, !dbg !2473, !verifier.code !2393
  call {:cexpr "__cil_tmp27"} boogie_si_record_bv64($i30);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3572, 19} true;
  assume {:verifier.code 0} true;
  $p31 := $i2p.bv64.ref($i30);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3572, 17} true;
  assume {:verifier.code 0} true;
  $i32 := $load.bytes.bv32($M.0, $p31);
  // WARNING: %40 = load i32, i32* %39, align 4, !dbg !2477, !verifier.code !2393
  call {:cexpr "__cil_tmp28"} boogie_si_record_bv32($i32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3573, 33} true;
  assume {:verifier.code 0} true;
  $p33 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3573, 17} true;
  assume {:verifier.code 0} true;
  $i34 := $p2i.ref.bv64($p33);
  // WARNING: %42 = ptrtoint %struct.mtd_info* %41 to i64, !dbg !2481, !verifier.code !2393
  call {:cexpr "__cil_tmp29"} boogie_si_record_bv64($i34);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3574, 29} true;
  assume {:verifier.code 0} true;
  $i35 := $add.bv64($i34, 20bv64);
  // WARNING: %43 = add i64 %42, 20, !dbg !2484, !verifier.code !2393
  call {:cexpr "__cil_tmp30"} boogie_si_record_bv64($i35);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3575, 19} true;
  assume {:verifier.code 0} true;
  $p36 := $i2p.bv64.ref($i35);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3575, 17} true;
  assume {:verifier.code 0} true;
  $i37 := $load.bytes.bv32($M.0, $p36);
  // WARNING: %45 = load i32, i32* %44, align 4, !dbg !2488, !verifier.code !2393
  call {:cexpr "__cil_tmp31"} boogie_si_record_bv32($i37);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3576, 29} true;
  assume {:verifier.code 0} true;
  $i38 := $lshr.bv32($i37, $i32);
  // WARNING: %46 = lshr i32 %45, %40, !dbg !2491, !verifier.code !2393
  call {:cexpr "__cil_tmp32"} boogie_si_record_bv32($i38);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3577, 13} true;
  assume {:verifier.code 0} true;
  $M.2 := $i38;
  call {:cexpr "subpgsize"} boogie_si_record_bv32($i38);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3578, 33} true;
  assume {:verifier.code 0} true;
  $p39 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3578, 17} true;
  assume {:verifier.code 0} true;
  $i40 := $p2i.ref.bv64($p39);
  // WARNING: %48 = ptrtoint %struct.mtd_info* %47 to i64, !dbg !2496, !verifier.code !2393
  call {:cexpr "__cil_tmp33"} boogie_si_record_bv64($i40);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3579, 29} true;
  assume {:verifier.code 0} true;
  $i41 := $add.bv64($i40, 8bv64);
  // WARNING: %49 = add i64 %48, 8, !dbg !2499, !verifier.code !2393
  call {:cexpr "__cil_tmp34"} boogie_si_record_bv64($i41);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3580, 15} true;
  assume {:verifier.code 0} true;
  $p42 := $i2p.bv64.ref($i41);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3580, 13} true;
  assume {:verifier.code 0} true;
  $i43 := $load.bytes.bv64($M.0, $p42);
  // WARNING: %51 = load i64, i64* %50, align 8, !dbg !2503, !verifier.code !2393
  call {:cexpr "tmp___7"} boogie_si_record_bv64($i43);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3581, 33} true;
  assume {:verifier.code 0} true;
  $p44 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3581, 17} true;
  assume {:verifier.code 0} true;
  $i45 := $p2i.ref.bv64($p44);
  // WARNING: %53 = ptrtoint %struct.mtd_info* %52 to i64, !dbg !2507, !verifier.code !2393
  call {:cexpr "__cil_tmp35"} boogie_si_record_bv64($i45);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3582, 29} true;
  assume {:verifier.code 0} true;
  $i46 := $add.bv64($i45, 16bv64);
  // WARNING: %54 = add i64 %53, 16, !dbg !2510, !verifier.code !2393
  call {:cexpr "__cil_tmp36"} boogie_si_record_bv64($i46);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3583, 14} true;
  assume {:verifier.code 0} true;
  $p47 := $i2p.bv64.ref($i46);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3583, 12} true;
  assume {:verifier.code 0} true;
  $i48 := $load.bytes.bv32($M.0, $p47);
  // WARNING: %56 = load i32, i32* %55, align 4, !dbg !2514, !verifier.code !2393
  call {:cexpr "__base"} boogie_si_record_bv32($i48);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3587, 17} true;
  assume {:verifier.code 0} true;
  $i49 := $zext.bv32.bv64($i48);
  // WARNING: %57 = zext i32 %56 to i64, !dbg !2521, !verifier.code !2393
  call {:cexpr "__cil_tmp39"} boogie_si_record_bv64($i49);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3588, 21} true;
  assume {:verifier.code 0} true;
  $i50 := $udiv.bv64($i43, $i49);
  // WARNING: %58 = udiv i64 %51, %57, !dbg !2524, !verifier.code !2393
  call {:cexpr "tmp___7"} boogie_si_record_bv64($i50);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3589, 11} true;
  assume {:verifier.code 0} true;
  $i51 := $trunc.bv64.bv32($i50);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3589, 9} true;
  assume {:verifier.code 0} true;
  $M.3 := $i51;
  call {:cexpr "ebcnt"} boogie_si_record_bv32($i51);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3590, 33} true;
  assume {:verifier.code 0} true;
  $p52 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3590, 17} true;
  assume {:verifier.code 0} true;
  $i53 := $p2i.ref.bv64($p52);
  // WARNING: %61 = ptrtoint %struct.mtd_info* %60 to i64, !dbg !2528, !verifier.code !2393
  call {:cexpr "__cil_tmp40"} boogie_si_record_bv64($i53);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3591, 29} true;
  assume {:verifier.code 0} true;
  $i54 := $add.bv64($i53, 20bv64);
  // WARNING: %62 = add i64 %61, 20, !dbg !2531, !verifier.code !2393
  call {:cexpr "__cil_tmp41"} boogie_si_record_bv64($i54);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3592, 19} true;
  assume {:verifier.code 0} true;
  $p55 := $i2p.bv64.ref($i54);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3592, 17} true;
  assume {:verifier.code 0} true;
  $i56 := $load.bytes.bv32($M.0, $p55);
  // WARNING: %64 = load i32, i32* %63, align 4, !dbg !2535, !verifier.code !2393
  call {:cexpr "__cil_tmp42"} boogie_si_record_bv32($i56);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3593, 33} true;
  assume {:verifier.code 0} true;
  $p57 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3593, 17} true;
  assume {:verifier.code 0} true;
  $i58 := $p2i.ref.bv64($p57);
  // WARNING: %66 = ptrtoint %struct.mtd_info* %65 to i64, !dbg !2539, !verifier.code !2393
  call {:cexpr "__cil_tmp43"} boogie_si_record_bv64($i58);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3594, 29} true;
  assume {:verifier.code 0} true;
  $i59 := $add.bv64($i58, 16bv64);
  // WARNING: %67 = add i64 %66, 16, !dbg !2542, !verifier.code !2393
  call {:cexpr "__cil_tmp44"} boogie_si_record_bv64($i59);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3595, 19} true;
  assume {:verifier.code 0} true;
  $p60 := $i2p.bv64.ref($i59);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3595, 17} true;
  assume {:verifier.code 0} true;
  $i61 := $load.bytes.bv32($M.0, $p60);
  // WARNING: %69 = load i32, i32* %68, align 4, !dbg !2546, !verifier.code !2393
  call {:cexpr "__cil_tmp45"} boogie_si_record_bv32($i61);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3596, 29} true;
  assume {:verifier.code 0} true;
  $i62 := $udiv.bv32($i61, $i56);
  // WARNING: %70 = udiv i32 %69, %64, !dbg !2549, !verifier.code !2393
  call {:cexpr "__cil_tmp46"} boogie_si_record_bv32($i62);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3597, 9} true;
  assume {:verifier.code 0} true;
  $M.4 := $i62;
  call {:cexpr "pgcnt"} boogie_si_record_bv32($i62);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3598, 33} true;
  assume {:verifier.code 0} true;
  $p63 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3598, 17} true;
  assume {:verifier.code 0} true;
  $i64 := $p2i.ref.bv64($p63);
  // WARNING: %72 = ptrtoint %struct.mtd_info* %71 to i64, !dbg !2554, !verifier.code !2393
  call {:cexpr "__cil_tmp47"} boogie_si_record_bv64($i64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3599, 29} true;
  assume {:verifier.code 0} true;
  $i65 := $add.bv64($i64, 8bv64);
  // WARNING: %73 = add i64 %72, 8, !dbg !2557, !verifier.code !2393
  call {:cexpr "__cil_tmp48"} boogie_si_record_bv64($i65);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3600, 19} true;
  assume {:verifier.code 0} true;
  $p66 := $i2p.bv64.ref($i65);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3600, 17} true;
  assume {:verifier.code 0} true;
  $i67 := $load.bytes.bv64($M.0, $p66);
  // WARNING: %75 = load i64, i64* %74, align 8, !dbg !2561, !verifier.code !2393
  call {:cexpr "__cil_tmp49"} boogie_si_record_bv64($i67);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3601, 33} true;
  assume {:verifier.code 0} true;
  $p68 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3601, 17} true;
  assume {:verifier.code 0} true;
  $i69 := $p2i.ref.bv64($p68);
  // WARNING: %77 = ptrtoint %struct.mtd_info* %76 to i64, !dbg !2565, !verifier.code !2393
  call {:cexpr "__cil_tmp50"} boogie_si_record_bv64($i69);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3602, 29} true;
  assume {:verifier.code 0} true;
  $i70 := $add.bv64($i69, 16bv64);
  // WARNING: %78 = add i64 %77, 16, !dbg !2568, !verifier.code !2393
  call {:cexpr "__cil_tmp51"} boogie_si_record_bv64($i70);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3603, 19} true;
  assume {:verifier.code 0} true;
  $p71 := $i2p.bv64.ref($i70);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3603, 17} true;
  assume {:verifier.code 0} true;
  $i72 := $load.bytes.bv32($M.0, $p71);
  // WARNING: %80 = load i32, i32* %79, align 4, !dbg !2572, !verifier.code !2393
  call {:cexpr "__cil_tmp52"} boogie_si_record_bv32($i72);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3604, 33} true;
  assume {:verifier.code 0} true;
  $p73 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3604, 17} true;
  assume {:verifier.code 0} true;
  $i74 := $p2i.ref.bv64($p73);
  // WARNING: %82 = ptrtoint %struct.mtd_info* %81 to i64, !dbg !2576, !verifier.code !2393
  call {:cexpr "__cil_tmp53"} boogie_si_record_bv64($i74);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3605, 29} true;
  assume {:verifier.code 0} true;
  $i75 := $add.bv64($i74, 20bv64);
  // WARNING: %83 = add i64 %82, 20, !dbg !2579, !verifier.code !2393
  call {:cexpr "__cil_tmp54"} boogie_si_record_bv64($i75);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3606, 19} true;
  assume {:verifier.code 0} true;
  $p76 := $i2p.bv64.ref($i75);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3606, 17} true;
  assume {:verifier.code 0} true;
  $i77 := $load.bytes.bv32($M.0, $p76);
  // WARNING: %85 = load i32, i32* %84, align 4, !dbg !2583, !verifier.code !2393
  call {:cexpr "__cil_tmp55"} boogie_si_record_bv32($i77);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3607, 33} true;
  assume {:verifier.code 0} true;
  $p78 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3607, 17} true;
  assume {:verifier.code 0} true;
  $i79 := $p2i.ref.bv64($p78);
  // WARNING: %87 = ptrtoint %struct.mtd_info* %86 to i64, !dbg !2587, !verifier.code !2393
  call {:cexpr "__cil_tmp56"} boogie_si_record_bv64($i79);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3608, 29} true;
  assume {:verifier.code 0} true;
  $i80 := $add.bv64($i79, 28bv64);
  // WARNING: %88 = add i64 %87, 28, !dbg !2590, !verifier.code !2393
  call {:cexpr "__cil_tmp57"} boogie_si_record_bv64($i80);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3609, 19} true;
  assume {:verifier.code 0} true;
  $p81 := $i2p.bv64.ref($i80);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3609, 17} true;
  assume {:verifier.code 0} true;
  $i82 := $load.bytes.bv32($M.0, $p81);
  // WARNING: %90 = load i32, i32* %89, align 4, !dbg !2594, !verifier.code !2393
  call {:cexpr "__cil_tmp58"} boogie_si_record_bv32($i82);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3611, 49} true;
  assume {:verifier.code 0} true;
  $i83 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3611, 60} true;
  assume {:verifier.code 0} true;
  $i84 := $M.3;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3611, 67} true;
  assume {:verifier.code 0} true;
  $i85 := $M.4;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3610, 3} true;
  assume {:verifier.code 0} true;
  call $i86 := printk.ref.bv64.bv32.bv32.bv32.bv32.bv32.bv32(.str.7, $i67, $i72, $i77, $i83, $i84, $i85, $i82);
  // WARNING: %94 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([156 x i8], [156 x i8]* @.str.7, i32 0, i32 0), i64 %75, i32 %80, i32 %85, i32 %91, i32 %92, i32 %93, i32 %90), !dbg !2600, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3613, 13} true;
  assume {:verifier.code 0} true;
  $i87 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3613, 23} true;
  assume {:verifier.code 0} true;
  $i88 := $mul.bv32($i87, 32bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3613, 11} true;
  assume {:verifier.code 0} true;
  $M.5 := $i88;
  call {:cexpr "bufsize"} boogie_si_record_bv32($i88);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3614, 26} true;
  assume {:verifier.code 0} true;
  $i89 := $M.5;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3614, 17} true;
  assume {:verifier.code 0} true;
  $i90 := $sext.bv32.bv64($i89);
  // WARNING: %98 = sext i32 %97 to i64, !dbg !2605, !verifier.code !2393
  call {:cexpr "__cil_tmp59"} boogie_si_record_bv64($i90);
  // WARNING: call void @llvm.dbg.value(metadata i64 %98, i64 0, metadata !2606, metadata !2391), !dbg !2607, !verifier.code !2393
  // WARNING: call void @llvm.dbg.value(metadata i64 %98, i64 0, metadata !2608, metadata !2391), !dbg !2612, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2085, 13} true;
  assume {:verifier.code 0} true;
  call $p91 := __kmalloc($i90, 208bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3616, 12} true;
  assume {:verifier.code 0} true;
  $M.6 := $p91;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3618, 9} true;
  assume {:verifier.code 0} true;
  $p92 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3618, 9} true;
  assume {:verifier.code 0} true;
  $i93 := $ne.ref($p92, $0.ref);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3618, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i93} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i93 == 1bv1);
  assume {:verifier.code 0} true;
  goto $bb14;
$bb13:
  assume !(($i93 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3620, 5} true;
  assume {:verifier.code 0} true;
  call $i94 := printk.ref(.str.8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3622, 5} true;
  assume {:verifier.code 0} true;
  $i27 := $sub.bv32(0bv32, 12bv32);
  goto $bb10;
$bb14:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3627, 26} true;
  assume {:verifier.code 0} true;
  $i95 := $M.5;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3627, 17} true;
  assume {:verifier.code 0} true;
  $i96 := $sext.bv32.bv64($i95);
  // WARNING: %107 = sext i32 %106 to i64, !dbg !2633, !verifier.code !2393
  call {:cexpr "__cil_tmp60"} boogie_si_record_bv64($i96);
  // WARNING: call void @llvm.dbg.value(metadata i64 %107, i64 0, metadata !2634, metadata !2391), !dbg !2635, !verifier.code !2393
  // WARNING: call void @llvm.dbg.value(metadata i64 %107, i64 0, metadata !2608, metadata !2391), !dbg !2636, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2085, 13} true;
  assume {:verifier.code 0} true;
  call $p97 := __kmalloc($i96, 208bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3629, 11} true;
  assume {:verifier.code 0} true;
  $M.7 := $p97;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3631, 9} true;
  assume {:verifier.code 0} true;
  $p98 := $M.7;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3631, 9} true;
  assume {:verifier.code 0} true;
  $i99 := $ne.ref($p98, $0.ref);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3631, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i99} true;
  goto $bb15, $bb16;
$bb15:
  assume ($i99 == 1bv1);
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume !(($i99 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3633, 5} true;
  assume {:verifier.code 0} true;
  call $i100 := printk.ref(.str.8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3635, 5} true;
  assume {:verifier.code 0} true;
  $i27 := $sub.bv32(0bv32, 12bv32);
  goto $bb10;
$bb17:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3640, 9} true;
  assume {:verifier.code 0} true;
  call $i101 := scan_for_bad_eraseblocks();
  // WARNING: %115 = call i32 @scan_for_bad_eraseblocks(), !dbg !2651, !verifier.code !2393
  call {:cexpr "err"} boogie_si_record_bv32($i101);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3642, 7} true;
  assume {:verifier.code 0} true;
  $i102 := $ne.bv32($i101, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3642, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i102} true;
  goto $bb18, $bb19;
$bb18:
  assume ($i102 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3643, 5} true;
  assume {:verifier.code 0} true;
  $i27 := $i101;
  goto $bb10;
$bb19:
  assume !(($i102 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb20;
$bb20:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3648, 9} true;
  assume {:verifier.code 0} true;
  call $i103 := erase_whole_device();
  // WARNING: %120 = call i32 @erase_whole_device(), !dbg !2658, !verifier.code !2393
  call {:cexpr "err"} boogie_si_record_bv32($i103);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3650, 7} true;
  assume {:verifier.code 0} true;
  $i104 := $ne.bv32($i103, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3650, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i104} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i104 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3651, 5} true;
  assume {:verifier.code 0} true;
  $i27 := $i103;
  goto $bb10;
$bb22:
  assume !(($i104 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3656, 3} true;
  assume {:verifier.code 0} true;
  call $i105 := printk.ref(.str.9);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3657, 3} true;
  assume {:verifier.code 0} true;
  call simple_srand(1bv64);
  // WARNING: call void @simple_srand(i64 1), !dbg !2667, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3661, 3} true;
  assume {:verifier.code 0} true;
  $i106 := 0bv32;
  goto $bb24;
$bb24:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3661, 13} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3664, 30} true;
  assume {:verifier.code 0} true;
  $i107 := $M.3;
  // WARNING: %128 = load i32, i32* @ebcnt, align 4, !dbg !2674, !verifier.code !2393
  call {:cexpr "__cil_tmp61"} boogie_si_record_bv32($i107);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3665, 11} true;
  assume {:verifier.code 0} true;
  $i108 := $ult.bv32($i106, $i107);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3665, 9} true;
  assume {:verifier.code 0} true;
  $i109 := $i106;
  assume {:branchcond $i108} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i108 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3667, 5} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume !(($i108 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3668, 7} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb28:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3672, 19} true;
  assume {:verifier.code 0} true;
  $p110 := $M.8;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3672, 23} true;
  assume {:verifier.code 0} true;
  $i111 := $zext.bv32.bv64($i106);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3672, 23} true;
  assume {:verifier.code 0} true;
  $p112 := $add.ref($p110, $mul.ref($bv2int.64($i111), 1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3673, 9} true;
  assume {:verifier.code 0} true;
  $i113 := $load.bytes.bv8($M.0, $p112);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3673, 9} true;
  assume {:verifier.code 0} true;
  $i114 := $ne.bv8($i113, 0bv8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3673, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i114} true;
  goto $bb30, $bb31;
$bb29:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3713, 3} true;
  assume {:verifier.code 0} true;
  call $i131 := printk.ref.bv32(.str.12, $i109);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3714, 3} true;
  assume {:verifier.code 0} true;
  call simple_srand(1bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3715, 3} true;
  assume {:verifier.code 0} true;
  call $i132 := printk.ref(.str.13);
  // WARNING: %165 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.13, i32 0, i32 0)), !dbg !2739, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3719, 3} true;
  assume {:verifier.code 0} true;
  $i133 := 0bv32;
  goto $bb40;
$bb30:
  assume ($i114 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3674, 7} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb31:
  assume !(($i114 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb33;
$bb32:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3708, 11} true;
  assume {:verifier.code 0} true;
  $i130 := $add.bv32($i106, 1bv32);
  // WARNING: %162 = add i32 %.0, 1, !dbg !2732, !verifier.code !2393
  call {:cexpr "i"} boogie_si_record_bv32($i130);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3661, 3} true;
  assume {:verifier.code 0} true;
  $i106 := $i130;
  goto $bb24;
$bb33:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3681, 11} true;
  assume {:verifier.code 0} true;
  call $i115 := write_eraseblock($i106);
  // WARNING: %141 = call i32 @write_eraseblock(i32 %.0), !dbg !2698, !verifier.code !2393
  call {:cexpr "err"} boogie_si_record_bv32($i115);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3682, 19} true;
  assume {:verifier.code 0} true;
  $i116 := $ne.bv32($i115, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3682, 19} true;
  assume {:verifier.code 0} true;
  $i117 := $xor.bv1($i116, 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3682, 19} true;
  assume {:verifier.code 0} true;
  $i118 := $zext.bv1.bv32($i117);
  // WARNING: %144 = zext i1 %143 to i32, !dbg !2700, !verifier.code !2393
  call {:cexpr "__cil_tmp64"} boogie_si_record_bv32($i118);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3683, 19} true;
  assume {:verifier.code 0} true;
  $i119 := $ne.bv32($i118, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3683, 19} true;
  assume {:verifier.code 0} true;
  $i120 := $xor.bv1($i119, 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3683, 19} true;
  assume {:verifier.code 0} true;
  $i121 := $zext.bv1.bv32($i120);
  // WARNING: %147 = zext i1 %146 to i32, !dbg !2703, !verifier.code !2393
  call {:cexpr "__cil_tmp65"} boogie_si_record_bv32($i121);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3684, 19} true;
  assume {:verifier.code 0} true;
  $i122 := $sext.bv32.bv64($i121);
  // WARNING: %148 = sext i32 %147 to i64, !dbg !2706, !verifier.code !2393
  call {:cexpr "__cil_tmp66"} boogie_si_record_bv64($i122);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3685, 16} true;
  assume {:verifier.code 0} true;
  call $i123 := ldv__builtin_expect($i122, 0bv64);
  // WARNING: %149 = call i64 @ldv__builtin_expect(i64 %148, i64 0), !dbg !2709, !verifier.code !2393
  call {:cexpr "tmp___12"} boogie_si_record_bv64($i123);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3687, 9} true;
  assume {:verifier.code 0} true;
  $i124 := $ne.bv64($i123, 0bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3687, 9} true;
  assume {:verifier.code 0} true;
  $i125 := $i115;
  assume {:branchcond $i124} true;
  goto $bb34, $bb35;
$bb34:
  assume ($i124 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3688, 7} true;
  assume {:verifier.code 0} true;
  $i27 := $i125;
  goto $bb10;
$bb35:
  assume !(($i124 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb36;
$bb36:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3693, 21} true;
  assume {:verifier.code 0} true;
  $i126 := $urem.bv32($i106, 256bv32);
  // WARNING: %154 = urem i32 %.0, 256, !dbg !2717, !verifier.code !2393
  call {:cexpr "__cil_tmp67"} boogie_si_record_bv32($i126);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3694, 21} true;
  assume {:verifier.code 0} true;
  $i127 := $eq.bv32($i126, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3694, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i127} true;
  goto $bb37, $bb38;
$bb37:
  assume ($i127 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3696, 7} true;
  assume {:verifier.code 0} true;
  call $i128 := printk.ref.bv32(.str.10, $i106);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3698, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb38:
  assume !(($i127 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb39;
$bb39:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3703, 5} true;
  assume {:verifier.code 0} true;
  call __might_sleep(.str.11, 443bv32, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3705, 5} true;
  assume {:verifier.code 0} true;
  call $i129 := _cond_resched();
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3706, 5} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb40:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3719, 13} true;
  assume {:verifier.code 0} true;
  goto $bb41;
$bb41:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3722, 30} true;
  assume {:verifier.code 0} true;
  $i134 := $M.3;
  // WARNING: %168 = load i32, i32* @ebcnt, align 4, !dbg !2744, !verifier.code !2393
  call {:cexpr "__cil_tmp68"} boogie_si_record_bv32($i134);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3723, 11} true;
  assume {:verifier.code 0} true;
  $i135 := $ult.bv32($i133, $i134);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3723, 9} true;
  assume {:verifier.code 0} true;
  $i136 := $i133;
  assume {:branchcond $i135} true;
  goto $bb42, $bb43;
$bb42:
  assume ($i135 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3725, 5} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb43:
  assume !(($i135 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3726, 7} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb44:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3730, 19} true;
  assume {:verifier.code 0} true;
  $p137 := $M.8;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3730, 23} true;
  assume {:verifier.code 0} true;
  $i138 := $zext.bv32.bv64($i133);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3730, 23} true;
  assume {:verifier.code 0} true;
  $p139 := $add.ref($p137, $mul.ref($bv2int.64($i138), 1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3731, 9} true;
  assume {:verifier.code 0} true;
  $i140 := $load.bytes.bv8($M.0, $p139);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3731, 9} true;
  assume {:verifier.code 0} true;
  $i141 := $ne.bv8($i140, 0bv8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3731, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i141} true;
  goto $bb46, $bb47;
$bb45:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3771, 3} true;
  assume {:verifier.code 0} true;
  call $i158 := printk.ref.bv32(.str.15, $i136);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3772, 9} true;
  assume {:verifier.code 0} true;
  call $i159 := erase_whole_device();
  // WARNING: %205 = call i32 @erase_whole_device(), !dbg !2808, !verifier.code !2393
  call {:cexpr "err"} boogie_si_record_bv32($i159);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3774, 7} true;
  assume {:verifier.code 0} true;
  $i160 := $ne.bv32($i159, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3774, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i160} true;
  goto $bb56, $bb57;
$bb46:
  assume ($i141 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3732, 7} true;
  assume {:verifier.code 0} true;
  goto $bb48;
$bb47:
  assume !(($i141 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb49;
$bb48:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3766, 11} true;
  assume {:verifier.code 0} true;
  $i157 := $add.bv32($i133, 1bv32);
  // WARNING: %202 = add i32 %.1, 1, !dbg !2802, !verifier.code !2393
  call {:cexpr "i"} boogie_si_record_bv32($i157);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3719, 3} true;
  assume {:verifier.code 0} true;
  $i133 := $i157;
  goto $bb40;
$bb49:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3739, 11} true;
  assume {:verifier.code 0} true;
  call $i142 := verify_eraseblock($i133);
  // WARNING: %181 = call i32 @verify_eraseblock(i32 %.1), !dbg !2768, !verifier.code !2393
  call {:cexpr "err"} boogie_si_record_bv32($i142);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3740, 19} true;
  assume {:verifier.code 0} true;
  $i143 := $ne.bv32($i142, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3740, 19} true;
  assume {:verifier.code 0} true;
  $i144 := $xor.bv1($i143, 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3740, 19} true;
  assume {:verifier.code 0} true;
  $i145 := $zext.bv1.bv32($i144);
  // WARNING: %184 = zext i1 %183 to i32, !dbg !2770, !verifier.code !2393
  call {:cexpr "__cil_tmp71"} boogie_si_record_bv32($i145);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3741, 19} true;
  assume {:verifier.code 0} true;
  $i146 := $ne.bv32($i145, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3741, 19} true;
  assume {:verifier.code 0} true;
  $i147 := $xor.bv1($i146, 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3741, 19} true;
  assume {:verifier.code 0} true;
  $i148 := $zext.bv1.bv32($i147);
  // WARNING: %187 = zext i1 %186 to i32, !dbg !2773, !verifier.code !2393
  call {:cexpr "__cil_tmp72"} boogie_si_record_bv32($i148);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3742, 19} true;
  assume {:verifier.code 0} true;
  $i149 := $sext.bv32.bv64($i148);
  // WARNING: %188 = sext i32 %187 to i64, !dbg !2776, !verifier.code !2393
  call {:cexpr "__cil_tmp73"} boogie_si_record_bv64($i149);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3743, 16} true;
  assume {:verifier.code 0} true;
  call $i150 := ldv__builtin_expect($i149, 0bv64);
  // WARNING: %189 = call i64 @ldv__builtin_expect(i64 %188, i64 0), !dbg !2779, !verifier.code !2393
  call {:cexpr "tmp___13"} boogie_si_record_bv64($i150);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3745, 9} true;
  assume {:verifier.code 0} true;
  $i151 := $ne.bv64($i150, 0bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3745, 9} true;
  assume {:verifier.code 0} true;
  $i152 := $i142;
  assume {:branchcond $i151} true;
  goto $bb50, $bb51;
$bb50:
  assume ($i151 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3746, 7} true;
  assume {:verifier.code 0} true;
  $i27 := $i152;
  goto $bb10;
$bb51:
  assume !(($i151 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb52;
$bb52:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3751, 21} true;
  assume {:verifier.code 0} true;
  $i153 := $urem.bv32($i133, 256bv32);
  // WARNING: %194 = urem i32 %.1, 256, !dbg !2787, !verifier.code !2393
  call {:cexpr "__cil_tmp74"} boogie_si_record_bv32($i153);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3752, 21} true;
  assume {:verifier.code 0} true;
  $i154 := $eq.bv32($i153, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3752, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i154} true;
  goto $bb53, $bb54;
$bb53:
  assume ($i154 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3754, 7} true;
  assume {:verifier.code 0} true;
  call $i155 := printk.ref.bv32(.str.14, $i133);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3756, 5} true;
  assume {:verifier.code 0} true;
  goto $bb55;
$bb54:
  assume !(($i154 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb55;
$bb55:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3761, 5} true;
  assume {:verifier.code 0} true;
  call __might_sleep(.str.11, 457bv32, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3763, 5} true;
  assume {:verifier.code 0} true;
  call $i156 := _cond_resched();
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3764, 5} true;
  assume {:verifier.code 0} true;
  goto $bb48;
$bb56:
  assume ($i160 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3775, 5} true;
  assume {:verifier.code 0} true;
  $i27 := $i159;
  goto $bb10;
$bb57:
  assume !(($i160 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb58;
$bb58:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3780, 9} true;
  assume {:verifier.code 0} true;
  call $i161 := verify_all_eraseblocks_ff();
  // WARNING: %210 = call i32 @verify_all_eraseblocks_ff(), !dbg !2814, !verifier.code !2393
  call {:cexpr "err"} boogie_si_record_bv32($i161);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3782, 7} true;
  assume {:verifier.code 0} true;
  $i162 := $ne.bv32($i161, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3782, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i162} true;
  goto $bb59, $bb60;
$bb59:
  assume ($i162 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3783, 5} true;
  assume {:verifier.code 0} true;
  $i27 := $i161;
  goto $bb10;
$bb60:
  assume !(($i162 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb61;
$bb61:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3788, 3} true;
  assume {:verifier.code 0} true;
  call simple_srand(3bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3789, 3} true;
  assume {:verifier.code 0} true;
  call $i163 := printk.ref(.str.9);
  // WARNING: %215 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.9, i32 0, i32 0)), !dbg !2823, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3793, 3} true;
  assume {:verifier.code 0} true;
  $i164 := 0bv32;
  goto $bb62;
$bb62:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3793, 13} true;
  assume {:verifier.code 0} true;
  goto $bb63;
$bb63:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3796, 30} true;
  assume {:verifier.code 0} true;
  $i165 := $M.3;
  // WARNING: %218 = load i32, i32* @ebcnt, align 4, !dbg !2828, !verifier.code !2393
  call {:cexpr "__cil_tmp75"} boogie_si_record_bv32($i165);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3797, 11} true;
  assume {:verifier.code 0} true;
  $i166 := $ult.bv32($i164, $i165);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3797, 9} true;
  assume {:verifier.code 0} true;
  $i167 := $i164;
  assume {:branchcond $i166} true;
  goto $bb64, $bb65;
$bb64:
  assume ($i166 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3799, 5} true;
  assume {:verifier.code 0} true;
  goto $bb66;
$bb65:
  assume !(($i166 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3800, 7} true;
  assume {:verifier.code 0} true;
  goto $bb67;
$bb66:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3804, 19} true;
  assume {:verifier.code 0} true;
  $p168 := $M.8;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3804, 23} true;
  assume {:verifier.code 0} true;
  $i169 := $zext.bv32.bv64($i164);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3804, 23} true;
  assume {:verifier.code 0} true;
  $p170 := $add.ref($p168, $mul.ref($bv2int.64($i169), 1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3805, 9} true;
  assume {:verifier.code 0} true;
  $i171 := $load.bytes.bv8($M.0, $p170);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3805, 9} true;
  assume {:verifier.code 0} true;
  $i172 := $ne.bv8($i171, 0bv8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3805, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i172} true;
  goto $bb68, $bb69;
$bb67:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3845, 3} true;
  assume {:verifier.code 0} true;
  call $i189 := printk.ref.bv32(.str.12, $i167);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3846, 3} true;
  assume {:verifier.code 0} true;
  call simple_srand(3bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3847, 3} true;
  assume {:verifier.code 0} true;
  call $i190 := printk.ref(.str.13);
  // WARNING: %255 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.13, i32 0, i32 0)), !dbg !2893, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3851, 3} true;
  assume {:verifier.code 0} true;
  $i191 := 0bv32;
  goto $bb78;
$bb68:
  assume ($i172 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3806, 7} true;
  assume {:verifier.code 0} true;
  goto $bb70;
$bb69:
  assume !(($i172 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb71;
$bb70:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3840, 11} true;
  assume {:verifier.code 0} true;
  $i188 := $add.bv32($i164, 1bv32);
  // WARNING: %252 = add i32 %.2, 1, !dbg !2886, !verifier.code !2393
  call {:cexpr "i"} boogie_si_record_bv32($i188);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3793, 3} true;
  assume {:verifier.code 0} true;
  $i164 := $i188;
  goto $bb62;
$bb71:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3813, 11} true;
  assume {:verifier.code 0} true;
  call $i173 := write_eraseblock2($i164);
  // WARNING: %231 = call i32 @write_eraseblock2(i32 %.2), !dbg !2852, !verifier.code !2393
  call {:cexpr "err"} boogie_si_record_bv32($i173);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3814, 19} true;
  assume {:verifier.code 0} true;
  $i174 := $ne.bv32($i173, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3814, 19} true;
  assume {:verifier.code 0} true;
  $i175 := $xor.bv1($i174, 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3814, 19} true;
  assume {:verifier.code 0} true;
  $i176 := $zext.bv1.bv32($i175);
  // WARNING: %234 = zext i1 %233 to i32, !dbg !2854, !verifier.code !2393
  call {:cexpr "__cil_tmp78"} boogie_si_record_bv32($i176);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3815, 19} true;
  assume {:verifier.code 0} true;
  $i177 := $ne.bv32($i176, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3815, 19} true;
  assume {:verifier.code 0} true;
  $i178 := $xor.bv1($i177, 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3815, 19} true;
  assume {:verifier.code 0} true;
  $i179 := $zext.bv1.bv32($i178);
  // WARNING: %237 = zext i1 %236 to i32, !dbg !2857, !verifier.code !2393
  call {:cexpr "__cil_tmp79"} boogie_si_record_bv32($i179);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3816, 19} true;
  assume {:verifier.code 0} true;
  $i180 := $sext.bv32.bv64($i179);
  // WARNING: %238 = sext i32 %237 to i64, !dbg !2860, !verifier.code !2393
  call {:cexpr "__cil_tmp80"} boogie_si_record_bv64($i180);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3817, 16} true;
  assume {:verifier.code 0} true;
  call $i181 := ldv__builtin_expect($i180, 0bv64);
  // WARNING: %239 = call i64 @ldv__builtin_expect(i64 %238, i64 0), !dbg !2863, !verifier.code !2393
  call {:cexpr "tmp___14"} boogie_si_record_bv64($i181);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3819, 9} true;
  assume {:verifier.code 0} true;
  $i182 := $ne.bv64($i181, 0bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3819, 9} true;
  assume {:verifier.code 0} true;
  $i183 := $i173;
  assume {:branchcond $i182} true;
  goto $bb72, $bb73;
$bb72:
  assume ($i182 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3820, 7} true;
  assume {:verifier.code 0} true;
  $i27 := $i183;
  goto $bb10;
$bb73:
  assume !(($i182 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb74;
$bb74:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3825, 21} true;
  assume {:verifier.code 0} true;
  $i184 := $urem.bv32($i164, 256bv32);
  // WARNING: %244 = urem i32 %.2, 256, !dbg !2871, !verifier.code !2393
  call {:cexpr "__cil_tmp81"} boogie_si_record_bv32($i184);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3826, 21} true;
  assume {:verifier.code 0} true;
  $i185 := $eq.bv32($i184, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3826, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i185} true;
  goto $bb75, $bb76;
$bb75:
  assume ($i185 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3828, 7} true;
  assume {:verifier.code 0} true;
  call $i186 := printk.ref.bv32(.str.10, $i164);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3830, 5} true;
  assume {:verifier.code 0} true;
  goto $bb77;
$bb76:
  assume !(($i185 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb77;
$bb77:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3835, 5} true;
  assume {:verifier.code 0} true;
  call __might_sleep(.str.11, 480bv32, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3837, 5} true;
  assume {:verifier.code 0} true;
  call $i187 := _cond_resched();
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3838, 5} true;
  assume {:verifier.code 0} true;
  goto $bb70;
$bb78:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3851, 13} true;
  assume {:verifier.code 0} true;
  goto $bb79;
$bb79:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3854, 30} true;
  assume {:verifier.code 0} true;
  $i192 := $M.3;
  // WARNING: %258 = load i32, i32* @ebcnt, align 4, !dbg !2898, !verifier.code !2393
  call {:cexpr "__cil_tmp82"} boogie_si_record_bv32($i192);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3855, 11} true;
  assume {:verifier.code 0} true;
  $i193 := $ult.bv32($i191, $i192);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3855, 9} true;
  assume {:verifier.code 0} true;
  $i194 := $i191;
  assume {:branchcond $i193} true;
  goto $bb80, $bb81;
$bb80:
  assume ($i193 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3857, 5} true;
  assume {:verifier.code 0} true;
  goto $bb82;
$bb81:
  assume !(($i193 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3858, 7} true;
  assume {:verifier.code 0} true;
  goto $bb83;
$bb82:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3862, 19} true;
  assume {:verifier.code 0} true;
  $p195 := $M.8;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3862, 23} true;
  assume {:verifier.code 0} true;
  $i196 := $zext.bv32.bv64($i191);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3862, 23} true;
  assume {:verifier.code 0} true;
  $p197 := $add.ref($p195, $mul.ref($bv2int.64($i196), 1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3863, 9} true;
  assume {:verifier.code 0} true;
  $i198 := $load.bytes.bv8($M.0, $p197);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3863, 9} true;
  assume {:verifier.code 0} true;
  $i199 := $ne.bv8($i198, 0bv8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3863, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i199} true;
  goto $bb84, $bb85;
$bb83:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3903, 3} true;
  assume {:verifier.code 0} true;
  call $i216 := printk.ref.bv32(.str.15, $i194);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3904, 9} true;
  assume {:verifier.code 0} true;
  call $i217 := erase_whole_device();
  // WARNING: %295 = call i32 @erase_whole_device(), !dbg !2962, !verifier.code !2393
  call {:cexpr "err"} boogie_si_record_bv32($i217);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3906, 7} true;
  assume {:verifier.code 0} true;
  $i218 := $ne.bv32($i217, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3906, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i218} true;
  goto $bb94, $bb95;
$bb84:
  assume ($i199 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3864, 7} true;
  assume {:verifier.code 0} true;
  goto $bb86;
$bb85:
  assume !(($i199 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb87;
$bb86:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3898, 11} true;
  assume {:verifier.code 0} true;
  $i215 := $add.bv32($i191, 1bv32);
  // WARNING: %292 = add i32 %.3, 1, !dbg !2956, !verifier.code !2393
  call {:cexpr "i"} boogie_si_record_bv32($i215);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3851, 3} true;
  assume {:verifier.code 0} true;
  $i191 := $i215;
  goto $bb78;
$bb87:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3871, 11} true;
  assume {:verifier.code 0} true;
  call $i200 := verify_eraseblock2($i191);
  // WARNING: %271 = call i32 @verify_eraseblock2(i32 %.3), !dbg !2922, !verifier.code !2393
  call {:cexpr "err"} boogie_si_record_bv32($i200);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3872, 19} true;
  assume {:verifier.code 0} true;
  $i201 := $ne.bv32($i200, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3872, 19} true;
  assume {:verifier.code 0} true;
  $i202 := $xor.bv1($i201, 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3872, 19} true;
  assume {:verifier.code 0} true;
  $i203 := $zext.bv1.bv32($i202);
  // WARNING: %274 = zext i1 %273 to i32, !dbg !2924, !verifier.code !2393
  call {:cexpr "__cil_tmp85"} boogie_si_record_bv32($i203);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3873, 19} true;
  assume {:verifier.code 0} true;
  $i204 := $ne.bv32($i203, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3873, 19} true;
  assume {:verifier.code 0} true;
  $i205 := $xor.bv1($i204, 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3873, 19} true;
  assume {:verifier.code 0} true;
  $i206 := $zext.bv1.bv32($i205);
  // WARNING: %277 = zext i1 %276 to i32, !dbg !2927, !verifier.code !2393
  call {:cexpr "__cil_tmp86"} boogie_si_record_bv32($i206);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3874, 19} true;
  assume {:verifier.code 0} true;
  $i207 := $sext.bv32.bv64($i206);
  // WARNING: %278 = sext i32 %277 to i64, !dbg !2930, !verifier.code !2393
  call {:cexpr "__cil_tmp87"} boogie_si_record_bv64($i207);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3875, 16} true;
  assume {:verifier.code 0} true;
  call $i208 := ldv__builtin_expect($i207, 0bv64);
  // WARNING: %279 = call i64 @ldv__builtin_expect(i64 %278, i64 0), !dbg !2933, !verifier.code !2393
  call {:cexpr "tmp___15"} boogie_si_record_bv64($i208);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3877, 9} true;
  assume {:verifier.code 0} true;
  $i209 := $ne.bv64($i208, 0bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3877, 9} true;
  assume {:verifier.code 0} true;
  $i210 := $i200;
  assume {:branchcond $i209} true;
  goto $bb88, $bb89;
$bb88:
  assume ($i209 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3878, 7} true;
  assume {:verifier.code 0} true;
  $i27 := $i210;
  goto $bb10;
$bb89:
  assume !(($i209 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb90;
$bb90:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3883, 21} true;
  assume {:verifier.code 0} true;
  $i211 := $urem.bv32($i191, 256bv32);
  // WARNING: %284 = urem i32 %.3, 256, !dbg !2941, !verifier.code !2393
  call {:cexpr "__cil_tmp88"} boogie_si_record_bv32($i211);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3884, 21} true;
  assume {:verifier.code 0} true;
  $i212 := $eq.bv32($i211, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3884, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i212} true;
  goto $bb91, $bb92;
$bb91:
  assume ($i212 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3886, 7} true;
  assume {:verifier.code 0} true;
  call $i213 := printk.ref.bv32(.str.14, $i191);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3888, 5} true;
  assume {:verifier.code 0} true;
  goto $bb93;
$bb92:
  assume !(($i212 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb93;
$bb93:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3893, 5} true;
  assume {:verifier.code 0} true;
  call __might_sleep(.str.11, 495bv32, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3895, 5} true;
  assume {:verifier.code 0} true;
  call $i214 := _cond_resched();
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3896, 5} true;
  assume {:verifier.code 0} true;
  goto $bb86;
$bb94:
  assume ($i218 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3907, 5} true;
  assume {:verifier.code 0} true;
  $i27 := $i217;
  goto $bb10;
$bb95:
  assume !(($i218 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb96;
$bb96:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3912, 9} true;
  assume {:verifier.code 0} true;
  call $i219 := verify_all_eraseblocks_ff();
  // WARNING: %300 = call i32 @verify_all_eraseblocks_ff(), !dbg !2968, !verifier.code !2393
  call {:cexpr "err"} boogie_si_record_bv32($i219);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3914, 7} true;
  assume {:verifier.code 0} true;
  $i220 := $ne.bv32($i219, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3914, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i220} true;
  goto $bb97, $bb98;
$bb97:
  assume ($i220 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3915, 5} true;
  assume {:verifier.code 0} true;
  $i27 := $i219;
  goto $bb10;
$bb98:
  assume !(($i220 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb99;
$bb99:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3920, 59} true;
  assume {:verifier.code 0} true;
  $i221 := $M.9;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3920, 3} true;
  assume {:verifier.code 0} true;
  call $i222 := printk.ref.bv32(.str.16, $i221);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3921, 3} true;
  assume {:verifier.code 0} true;
  $i27 := $i219;
  goto $bb10;
$bb100:
  assume ($i227 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3934, 5} true;
  assume {:verifier.code 0} true;
  call $i228 := printk.ref.bv32(.str.17, $i27);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3936, 3} true;
  assume {:verifier.code 0} true;
  goto $bb102;
$bb101:
  assume !(($i227 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb102;
$bb102:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3940, 3} true;
  assume {:verifier.code 0} true;
  call $i229 := printk.ref(.str.1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3942, 3} true;
  assume {:verifier.code 0} true;
  $i6 := $i27;
  goto $bb3;
}
const printk: ref;
axiom (printk == $sub.ref(0, 67884));
procedure  printk.ref.bv32($p0: ref, p.1: bv32)
  returns ($r: bv32);
procedure  printk.ref.bv32.bv32($p0: ref, p.1: bv32, p.2: bv32)
  returns ($r: bv32);
procedure  printk.ref($p0: ref)
  returns ($r: bv32);
procedure  printk.ref.bv64($p0: ref, p.1: bv64)
  returns ($r: bv32);
procedure  printk.ref.bv64.bv32.bv32.bv32.bv32.bv32.bv32($p0: ref, p.1: bv64, p.2: bv32, p.3: bv32, p.4: bv32, p.5: bv32, p.6: bv32, p.7: bv32)
  returns ($r: bv32);
const get_mtd_device: ref;
axiom (get_mtd_device == $sub.ref(0, 68916));
procedure  get_mtd_device($p0: ref, $i1: bv32)
  returns ($r: ref);
const IS_ERR: ref;
axiom (IS_ERR == $sub.ref(0, 69948));
procedure  IS_ERR($p0: ref)
  returns ($r: bv64)
{
  var $i1: bv64;
  var $i2: bv1;
  var $i3: bv32;
  var $i4: bv1;
  var $i5: bv1;
  var $i6: bv32;
  var $i7: bv1;
  var $i8: bv1;
  var $i9: bv32;
  var $i10: bv64;
  var $i11: bv64;
$bb0:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2040, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.bv64($p0);
  // WARNING: %2 = ptrtoint i8* %0 to i64, !dbg !2396, !verifier.code !2395
  call {:cexpr "__cil_tmp3"} boogie_si_record_bv64($i1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2041, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $uge.bv64($i1, 18446744073709547521bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2041, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.bv1.bv32($i2);
  // WARNING: %4 = zext i1 %3 to i32, !dbg !2401, !verifier.code !2395
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv32($i3);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2042, 16} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.bv32($i3, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2042, 16} true;
  assume {:verifier.code 0} true;
  $i5 := $xor.bv1($i4, 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2042, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.bv1.bv32($i5);
  // WARNING: %7 = zext i1 %6 to i32, !dbg !2404, !verifier.code !2395
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv32($i6);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2043, 16} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.bv32($i6, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2043, 16} true;
  assume {:verifier.code 0} true;
  $i8 := $xor.bv1($i7, 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2043, 16} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.bv1.bv32($i8);
  // WARNING: %10 = zext i1 %9 to i32, !dbg !2407, !verifier.code !2395
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv32($i9);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2044, 16} true;
  assume {:verifier.code 0} true;
  $i10 := $sext.bv32.bv64($i9);
  // WARNING: %11 = sext i32 %10 to i64, !dbg !2410, !verifier.code !2395
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv64($i10);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2045, 9} true;
  assume {:verifier.code 0} true;
  call $i11 := ldv__builtin_expect($i10, 0bv64);
  // WARNING: %12 = call i64 @ldv__builtin_expect(i64 %11, i64 0), !dbg !2413, !verifier.code !2395
  call {:cexpr "tmp"} boogie_si_record_bv64($i11);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2047, 3} true;
  assume {:verifier.code 0} true;
  $r := $i11;
  $exn := false;
  return;
}
const PTR_ERR: ref;
axiom (PTR_ERR == $sub.ref(0, 70980));
procedure  PTR_ERR($p0: ref)
  returns ($r: bv64)
{
  var $i1: bv64;
$bb0:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2026, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.bv64($p0);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2026, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const __kmalloc: ref;
axiom (__kmalloc == $sub.ref(0, 72012));
procedure  __kmalloc($i0: bv64, $i1: bv32)
  returns ($r: ref);
const scan_for_bad_eraseblocks: ref;
axiom (scan_for_bad_eraseblocks == $sub.ref(0, 73044));
procedure  scan_for_bad_eraseblocks()
  returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv64;
  var $p2: ref;
  var $p3: ref;
  var $i4: bv1;
  var $i5: bv32;
  var $i7: bv32;
  var $i8: bv32;
  var $i9: bv32;
  var $i10: bv32;
  var $i11: bv1;
  var $i12: bv32;
  var $i13: bv32;
  var $i14: bv32;
  var $i15: bv1;
  var $p16: ref;
  var $i17: bv64;
  var $p18: ref;
  var $p19: ref;
  var $i20: bv64;
  var $p21: ref;
  var $p22: ref;
  var $i23: bv64;
  var $p24: ref;
  var $i25: bv8;
  var $i26: bv1;
  var $i27: bv32;
  var $i28: bv32;
  var $i29: bv32;
  var $i30: bv32;
  var $i31: bv32;
  var $i6: bv32;
$bb0:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3364, 25} true;
  assume {:verifier.code 0} true;
  $i0 := $M.3;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3364, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $sext.bv32.bv64($i0);
  // WARNING: %2 = sext i32 %1 to i64, !dbg !2397, !verifier.code !2393
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv64($i1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3365, 13} true;
  assume {:verifier.code 0} true;
  call $p2 := kzalloc($i1, 208bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3366, 7} true;
  assume {:verifier.code 0} true;
  $M.8 := $p2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3368, 9} true;
  assume {:verifier.code 0} true;
  $p3 := $M.8;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3368, 9} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.ref($p3, $0.ref);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3368, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1bv1);
  assume {:verifier.code 0} true;
  goto $bb4;
$bb2:
  assume !(($i4 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3370, 5} true;
  assume {:verifier.code 0} true;
  call $i5 := printk.ref(.str.8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3372, 5} true;
  assume {:verifier.code 0} true;
  $i6 := $sub.bv32(0bv32, 12bv32);
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3420, 1} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3377, 3} true;
  assume {:verifier.code 0} true;
  call $i7 := printk.ref(.str.18);
  // WARNING: %10 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.18, i32 0, i32 0)), !dbg !2411, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3381, 3} true;
  assume {:verifier.code 0} true;
  $i8, $i9 := 0bv32, 0bv32;
  goto $bb5;
$bb5:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3381, 13} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3383, 13} true;
  assume {:verifier.code 0} true;
  $i10 := $M.3;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3383, 11} true;
  assume {:verifier.code 0} true;
  $i11 := $slt.bv32($i9, $i10);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3383, 9} true;
  assume {:verifier.code 0} true;
  $i12, $i13 := $i8, $i9;
  assume {:branchcond $i11} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i11 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3385, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i11 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3386, 7} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3389, 15} true;
  assume {:verifier.code 0} true;
  call $i14 := is_block_bad($i9);
  // WARNING: %18 = call i32 @is_block_bad(i32 %.01), !dbg !2428, !verifier.code !2393
  call {:cexpr "tmp___9"} boogie_si_record_bv32($i14);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3391, 9} true;
  assume {:verifier.code 0} true;
  $i15 := $ne.bv32($i14, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3391, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb11, $bb12;
$bb10:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3416, 3} true;
  assume {:verifier.code 0} true;
  call $i31 := printk.ref.bv32.bv32(.str.19, $i13, $i12);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3418, 3} true;
  assume {:verifier.code 0} true;
  $i6 := 0bv32;
  goto $bb3;
$bb11:
  assume ($i15 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3392, 20} true;
  assume {:verifier.code 0} true;
  $p16 := $M.8;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3392, 24} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.bv32.bv64($i9);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3392, 24} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p16, $mul.ref($bv2int.64($i17), 1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3393, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv8($M.0, $p18, 1bv8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3394, 5} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume !(($i15 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3395, 20} true;
  assume {:verifier.code 0} true;
  $p19 := $M.8;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3395, 24} true;
  assume {:verifier.code 0} true;
  $i20 := $sext.bv32.bv64($i9);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3395, 24} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p19, $mul.ref($bv2int.64($i20), 1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3396, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv8($M.0, $p21, 0bv8);
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3399, 18} true;
  assume {:verifier.code 0} true;
  $p22 := $M.8;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3399, 22} true;
  assume {:verifier.code 0} true;
  $i23 := $sext.bv32.bv64($i9);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3399, 22} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p22, $mul.ref($bv2int.64($i23), 1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3400, 9} true;
  assume {:verifier.code 0} true;
  $i25 := $load.bytes.bv8($M.0, $p24);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3400, 9} true;
  assume {:verifier.code 0} true;
  $i26 := $ne.bv8($i25, 0bv8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3400, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i26 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3401, 17} true;
  assume {:verifier.code 0} true;
  $i27 := $add.bv32($i8, 1bv32);
  // WARNING: %35 = add nsw i32 %.02, 1, !dbg !2456, !verifier.code !2393
  call {:cexpr "bad"} boogie_si_record_bv32($i27);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3402, 5} true;
  assume {:verifier.code 0} true;
  $i28 := $i27;
  goto $bb16;
$bb15:
  assume !(($i26 == 1bv1));
  assume {:verifier.code 0} true;
  $i28 := $i8;
  goto $bb16;
$bb16:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3407, 5} true;
  assume {:verifier.code 0} true;
  call __might_sleep(.str.11, 365bv32, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3409, 5} true;
  assume {:verifier.code 0} true;
  call $i29 := _cond_resched();
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3410, 11} true;
  assume {:verifier.code 0} true;
  $i30 := $add.bv32($i9, 1bv32);
  // WARNING: %39 = add nsw i32 %.01, 1, !dbg !2462, !verifier.code !2393
  call {:cexpr "i"} boogie_si_record_bv32($i30);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3381, 3} true;
  assume {:verifier.code 0} true;
  $i8, $i9 := $i28, $i30;
  goto $bb5;
}
const erase_whole_device: ref;
axiom (erase_whole_device == $sub.ref(0, 74076));
procedure  erase_whole_device()
  returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv32;
  var $i2: bv32;
  var $i3: bv1;
  var $i4: bv32;
  var $p5: ref;
  var $i6: bv64;
  var $p7: ref;
  var $i8: bv8;
  var $i9: bv1;
  var $i10: bv32;
  var $i11: bv1;
  var $i12: bv32;
  var $i14: bv32;
  var $i15: bv32;
  var $i16: bv32;
  var $i13: bv32;
$bb0:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2275, 3} true;
  assume {:verifier.code 0} true;
  call $i0 := printk.ref(.str.21);
  // WARNING: %1 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.21, i32 0, i32 0)), !dbg !2390, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2279, 3} true;
  assume {:verifier.code 0} true;
  $i1 := 0bv32;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2279, 13} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2282, 33} true;
  assume {:verifier.code 0} true;
  $i2 := $M.3;
  // WARNING: %4 = load i32, i32* @ebcnt, align 4, !dbg !2401, !verifier.code !2393
  call {:cexpr "__cil_tmp3"} boogie_si_record_bv32($i2);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2283, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $ult.bv32($i1, $i2);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2283, 9} true;
  assume {:verifier.code 0} true;
  $i4 := $i1;
  assume {:branchcond $i3} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2285, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i3 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2286, 7} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2290, 18} true;
  assume {:verifier.code 0} true;
  $p5 := $M.8;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2290, 22} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.bv32.bv64($i1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2290, 22} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p5, $mul.ref($bv2int.64($i6), 1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2291, 9} true;
  assume {:verifier.code 0} true;
  $i8 := $load.bytes.bv8($M.0, $p7);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2291, 9} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.bv8($i8, 0bv8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2291, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb7, $bb8;
$bb6:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2317, 3} true;
  assume {:verifier.code 0} true;
  call $i16 := printk.ref.bv32(.str.22, $i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2319, 3} true;
  assume {:verifier.code 0} true;
  $i13 := 0bv32;
  goto $bb13;
$bb7:
  assume ($i9 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2292, 7} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i9 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2312, 11} true;
  assume {:verifier.code 0} true;
  $i15 := $add.bv32($i1, 1bv32);
  // WARNING: %24 = add i32 %.01, 1, !dbg !2438, !verifier.code !2393
  call {:cexpr "i"} boogie_si_record_bv32($i15);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2279, 3} true;
  assume {:verifier.code 0} true;
  $i1 := $i15;
  goto $bb1;
$bb10:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2299, 11} true;
  assume {:verifier.code 0} true;
  call $i10 := erase_eraseblock($i1);
  // WARNING: %17 = call i32 @erase_eraseblock(i32 %.01), !dbg !2425, !verifier.code !2393
  call {:cexpr "err"} boogie_si_record_bv32($i10);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2301, 9} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.bv32($i10, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2301, 9} true;
  assume {:verifier.code 0} true;
  $i12 := $i10;
  assume {:branchcond $i11} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i11 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2302, 7} true;
  assume {:verifier.code 0} true;
  $i13 := $i12;
  goto $bb13;
$bb12:
  assume !(($i11 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb14;
$bb13:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2321, 1} true;
  assume {:verifier.code 0} true;
  $r := $i13;
  $exn := false;
  return;
$bb14:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2307, 5} true;
  assume {:verifier.code 0} true;
  call __might_sleep(.str.11, 111bv32, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2309, 5} true;
  assume {:verifier.code 0} true;
  call $i14 := _cond_resched();
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2310, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
}
const simple_srand: ref;
axiom (simple_srand == $sub.ref(0, 75108));
procedure  simple_srand($i0: bv64)
{
$bb0:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2158, 8} true;
  assume {:verifier.code 0} true;
  $M.10 := $i0;
  call {:cexpr "next"} boogie_si_record_bv64($i0);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2159, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const write_eraseblock: ref;
axiom (write_eraseblock == $sub.ref(0, 76140));
procedure  write_eraseblock($i0: bv32)
  returns ($r: bv32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: bv64;
  var $i4: bv64;
  var $p5: ref;
  var $i6: bv32;
  var $i7: bv32;
  var $i8: bv64;
  var $i9: bv32;
  var $i10: bv64;
  var $p11: ref;
  var $i12: bv32;
  var $i13: bv64;
  var $p14: ref;
  var $p15: ref;
  var $i16: bv32;
  var $i17: bv1;
  var $i19: bv32;
  var $i20: bv64;
  var $i21: bv64;
  var $i22: bv1;
  var $i23: bv32;
  var $i18: bv32;
  var $i24: bv64;
  var $i25: bv64;
  var $i26: bv1;
  var $i27: bv32;
  var $i28: bv32;
  var $i29: bv64;
  var $i30: bv64;
  var $i31: bv1;
  var $i32: bv32;
  var $i33: bv32;
  var $i34: bv64;
  var $i35: bv32;
  var $i36: bv1;
  var $i37: bv32;
  var $i39: bv32;
  var $i40: bv64;
  var $i41: bv64;
  var $i42: bv32;
  var $i43: bv64;
  var $p44: ref;
  var $i45: bv32;
  var $i46: bv64;
  var $p47: ref;
  var $p48: ref;
  var $i49: bv32;
  var $i50: bv1;
  var $i52: bv32;
  var $i53: bv64;
  var $i54: bv64;
  var $i55: bv1;
  var $i56: bv32;
  var $i51: bv32;
  var $i57: bv64;
  var $i58: bv64;
  var $i59: bv1;
  var $i60: bv32;
  var $i61: bv32;
  var $i62: bv64;
  var $i63: bv64;
  var $i64: bv1;
  var $i65: bv32;
  var $i66: bv32;
  var $i67: bv64;
  var $i68: bv32;
  var $i69: bv1;
  var $i70: bv32;
  var $i38: bv32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $bv2int.64($zext.bv32.bv64(1bv32))));
  // WARNING: %2 = alloca i64, align 8, !verifier.code !2392
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: call void @llvm.dbg.declare(metadata i64* %2, metadata !3182, metadata !2391), !dbg !3183, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2366, 33} true;
  assume {:verifier.code 0} true;
  $p2 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2366, 17} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.bv64($p2);
  // WARNING: %4 = ptrtoint %struct.mtd_info* %3 to i64, !dbg !2403, !verifier.code !2392
  call {:cexpr "__cil_tmp11"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2367, 29} true;
  assume {:verifier.code 0} true;
  $i4 := $add.bv64($i3, 16bv64);
  // WARNING: %5 = add i64 %4, 16, !dbg !2406, !verifier.code !2392
  call {:cexpr "__cil_tmp12"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2368, 19} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.bv64.ref($i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2368, 17} true;
  assume {:verifier.code 0} true;
  $i6 := $load.bytes.bv32($M.0, $p5);
  // WARNING: %7 = load i32, i32* %6, align 4, !dbg !2410, !verifier.code !2392
  call {:cexpr "__cil_tmp13"} boogie_si_record_bv32($i6);
  // WARNING: call void @llvm.dbg.value(metadata i32 %7, i64 0, metadata !3197, metadata !2391), !dbg !3198, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2370, 29} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.bv32($i0, $i6);
  // WARNING: %8 = mul i32 %0, %7, !dbg !2415, !verifier.code !2392
  call {:cexpr "__cil_tmp15"} boogie_si_record_bv32($i7);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2371, 10} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.bv32.bv64($i7);
  // WARNING: %9 = zext i32 %8 to i64, !dbg !2418, !verifier.code !2392
  call {:cexpr "addr"} boogie_si_record_bv64($i8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2372, 26} true;
  assume {:verifier.code 0} true;
  $i9 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2372, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $sext.bv32.bv64($i9);
  // WARNING: %11 = sext i32 %10 to i64, !dbg !2422, !verifier.code !2392
  call {:cexpr "__cil_tmp16"} boogie_si_record_bv64($i10);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2373, 19} true;
  assume {:verifier.code 0} true;
  $p11 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2373, 3} true;
  assume {:verifier.code 0} true;
  call set_random_data($p11, $i10);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2374, 26} true;
  assume {:verifier.code 0} true;
  $i12 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2374, 17} true;
  assume {:verifier.code 0} true;
  $i13 := $sext.bv32.bv64($i12);
  // WARNING: %14 = sext i32 %13 to i64, !dbg !2428, !verifier.code !2392
  call {:cexpr "__cil_tmp17"} boogie_si_record_bv64($i13);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2375, 35} true;
  assume {:verifier.code 0} true;
  $p14 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2376, 19} true;
  assume {:verifier.code 0} true;
  $p15 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2376, 9} true;
  assume {:verifier.code 0} true;
  call $i16 := mtd_write($p15, $i8, $i13, $p1, $p14);
  // WARNING: %17 = call i32 @mtd_write(%struct.mtd_info* %16, i64 %9, i64 %14, i64* %2, i8* %15), !dbg !2435, !verifier.code !2392
  call {:cexpr "err"} boogie_si_record_bv32($i16);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2378, 7} true;
  assume {:verifier.code 0} true;
  $i17 := $ne.bv32($i16, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2378, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i17 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2380, 3} true;
  assume {:verifier.code 0} true;
  $i18 := 1bv32;
  goto $bb3;
$bb2:
  assume !(($i17 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2382, 28} true;
  assume {:verifier.code 0} true;
  $i19 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2382, 19} true;
  assume {:verifier.code 0} true;
  $i20 := $sext.bv32.bv64($i19);
  // WARNING: %22 = sext i32 %21 to i64, !dbg !2446, !verifier.code !2392
  call {:cexpr "__cil_tmp19"} boogie_si_record_bv64($i20);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2384, 19} true;
  assume {:verifier.code 0} true;
  $i21 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %23 = load i64, i64* %2, align 8, !dbg !2451, !verifier.code !2392
  call {:cexpr "__cil_tmp21"} boogie_si_record_bv64($i21);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2385, 21} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.bv64($i21, $i20);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2385, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb4, $bb5;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2393, 17} true;
  assume {:verifier.code 0} true;
  $i24 := $sext.bv32.bv64($i18);
  // WARNING: %29 = sext i32 %.14 to i64, !dbg !2459, !verifier.code !2392
  call {:cexpr "__cil_tmp22"} boogie_si_record_bv64($i24);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2394, 13} true;
  assume {:verifier.code 0} true;
  call $i25 := ldv__builtin_expect($i24, 0bv64);
  // WARNING: %30 = call i64 @ldv__builtin_expect(i64 %29, i64 0), !dbg !2463, !verifier.code !2392
  call {:cexpr "tmp___9"} boogie_si_record_bv64($i25);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2396, 7} true;
  assume {:verifier.code 0} true;
  $i26 := $ne.bv64($i25, 0bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2396, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb7, $bb8;
$bb4:
  assume ($i22 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2387, 5} true;
  assume {:verifier.code 0} true;
  $i23 := 1bv32;
  goto $bb6;
$bb5:
  assume !(($i22 == 1bv1));
  assume {:verifier.code 0} true;
  $i23 := 0bv32;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i18 := $i23;
  goto $bb3;
$bb7:
  assume ($i26 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2398, 5} true;
  assume {:verifier.code 0} true;
  call $i27 := printk.ref.bv64(.str.25, $i8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2401, 28} true;
  assume {:verifier.code 0} true;
  $i28 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2401, 19} true;
  assume {:verifier.code 0} true;
  $i29 := $sext.bv32.bv64($i28);
  // WARNING: %35 = sext i32 %34 to i64, !dbg !2474, !verifier.code !2392
  call {:cexpr "__cil_tmp23"} boogie_si_record_bv64($i29);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2403, 19} true;
  assume {:verifier.code 0} true;
  $i30 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %36 = load i64, i64* %2, align 8, !dbg !2479, !verifier.code !2392
  call {:cexpr "__cil_tmp25"} boogie_si_record_bv64($i30);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2404, 21} true;
  assume {:verifier.code 0} true;
  $i31 := $ne.bv64($i30, $i29);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2404, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb9, $bb10;
$bb8:
  assume !(($i26 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb9:
  assume ($i31 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2406, 57} true;
  assume {:verifier.code 0} true;
  $i32 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2406, 7} true;
  assume {:verifier.code 0} true;
  call $i33 := printk.ref.bv32(.str.26, $i32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2408, 21} true;
  assume {:verifier.code 0} true;
  $i34 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %41 = load i64, i64* %2, align 8, !dbg !2491, !verifier.code !2392
  call {:cexpr "__cil_tmp27"} boogie_si_record_bv64($i34);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2409, 7} true;
  assume {:verifier.code 0} true;
  call $i35 := printk.ref.bv64(.str.27, $i34);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2411, 5} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume !(($i31 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2415, 9} true;
  assume {:verifier.code 0} true;
  $i36 := $ne.bv32($i16, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2415, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i36 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2417, 5} true;
  assume {:verifier.code 0} true;
  $i37 := $i16;
  goto $bb14;
$bb13:
  assume !(($i36 == 1bv1));
  assume {:verifier.code 0} true;
  $i37 := $sub.bv32(0bv32, 1bv32);
  goto $bb14;
$bb14:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2420, 5} true;
  assume {:verifier.code 0} true;
  $i38 := $i37;
  goto $bb15;
$bb15:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2481, 1} true;
  assume {:verifier.code 0} true;
  $r := $i38;
  $exn := false;
  return;
$bb16:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2425, 26} true;
  assume {:verifier.code 0} true;
  $i39 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2425, 17} true;
  assume {:verifier.code 0} true;
  $i40 := $sext.bv32.bv64($i39);
  // WARNING: %52 = sext i32 %51 to i64, !dbg !2506, !verifier.code !2392
  call {:cexpr "__cil_tmp28"} boogie_si_record_bv64($i40);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2426, 15} true;
  assume {:verifier.code 0} true;
  $i41 := $add.bv64($i8, $i40);
  // WARNING: %53 = add nsw i64 %9, %52, !dbg !2509, !verifier.code !2392
  call {:cexpr "addr"} boogie_si_record_bv64($i41);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2427, 26} true;
  assume {:verifier.code 0} true;
  $i42 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2427, 17} true;
  assume {:verifier.code 0} true;
  $i43 := $sext.bv32.bv64($i42);
  // WARNING: %55 = sext i32 %54 to i64, !dbg !2511, !verifier.code !2392
  call {:cexpr "__cil_tmp29"} boogie_si_record_bv64($i43);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2428, 19} true;
  assume {:verifier.code 0} true;
  $p44 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2428, 3} true;
  assume {:verifier.code 0} true;
  call set_random_data($p44, $i43);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2429, 26} true;
  assume {:verifier.code 0} true;
  $i45 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2429, 17} true;
  assume {:verifier.code 0} true;
  $i46 := $sext.bv32.bv64($i45);
  // WARNING: %58 = sext i32 %57 to i64, !dbg !2517, !verifier.code !2392
  call {:cexpr "__cil_tmp30"} boogie_si_record_bv64($i46);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2430, 35} true;
  assume {:verifier.code 0} true;
  $p47 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2431, 19} true;
  assume {:verifier.code 0} true;
  $p48 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2431, 9} true;
  assume {:verifier.code 0} true;
  call $i49 := mtd_write($p48, $i41, $i46, $p1, $p47);
  // WARNING: %61 = call i32 @mtd_write(%struct.mtd_info* %60, i64 %53, i64 %58, i64* %2, i8* %59), !dbg !2524, !verifier.code !2392
  call {:cexpr "err"} boogie_si_record_bv32($i49);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2433, 7} true;
  assume {:verifier.code 0} true;
  $i50 := $ne.bv32($i49, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2433, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i50} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i50 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2435, 3} true;
  assume {:verifier.code 0} true;
  $i51 := 1bv32;
  goto $bb19;
$bb18:
  assume !(($i50 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2437, 28} true;
  assume {:verifier.code 0} true;
  $i52 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2437, 19} true;
  assume {:verifier.code 0} true;
  $i53 := $sext.bv32.bv64($i52);
  // WARNING: %66 = sext i32 %65 to i64, !dbg !2535, !verifier.code !2392
  call {:cexpr "__cil_tmp32"} boogie_si_record_bv64($i53);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2439, 19} true;
  assume {:verifier.code 0} true;
  $i54 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %67 = load i64, i64* %2, align 8, !dbg !2540, !verifier.code !2392
  call {:cexpr "__cil_tmp34"} boogie_si_record_bv64($i54);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2440, 21} true;
  assume {:verifier.code 0} true;
  $i55 := $ne.bv64($i54, $i53);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2440, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i55} true;
  goto $bb20, $bb21;
$bb19:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2448, 17} true;
  assume {:verifier.code 0} true;
  $i57 := $sext.bv32.bv64($i51);
  // WARNING: %73 = sext i32 %.1 to i64, !dbg !2548, !verifier.code !2392
  call {:cexpr "__cil_tmp35"} boogie_si_record_bv64($i57);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2449, 14} true;
  assume {:verifier.code 0} true;
  call $i58 := ldv__builtin_expect($i57, 0bv64);
  // WARNING: %74 = call i64 @ldv__builtin_expect(i64 %73, i64 0), !dbg !2552, !verifier.code !2392
  call {:cexpr "tmp___12"} boogie_si_record_bv64($i58);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2451, 7} true;
  assume {:verifier.code 0} true;
  $i59 := $ne.bv64($i58, 0bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2451, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i59} true;
  goto $bb23, $bb24;
$bb20:
  assume ($i55 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2442, 5} true;
  assume {:verifier.code 0} true;
  $i56 := 1bv32;
  goto $bb22;
$bb21:
  assume !(($i55 == 1bv1));
  assume {:verifier.code 0} true;
  $i56 := 0bv32;
  goto $bb22;
$bb22:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i51 := $i56;
  goto $bb19;
$bb23:
  assume ($i59 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2453, 5} true;
  assume {:verifier.code 0} true;
  call $i60 := printk.ref.bv64(.str.25, $i41);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2456, 28} true;
  assume {:verifier.code 0} true;
  $i61 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2456, 19} true;
  assume {:verifier.code 0} true;
  $i62 := $sext.bv32.bv64($i61);
  // WARNING: %79 = sext i32 %78 to i64, !dbg !2563, !verifier.code !2392
  call {:cexpr "__cil_tmp36"} boogie_si_record_bv64($i62);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2458, 19} true;
  assume {:verifier.code 0} true;
  $i63 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %80 = load i64, i64* %2, align 8, !dbg !2568, !verifier.code !2392
  call {:cexpr "__cil_tmp38"} boogie_si_record_bv64($i63);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2459, 21} true;
  assume {:verifier.code 0} true;
  $i64 := $ne.bv64($i63, $i62);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2459, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i64} true;
  goto $bb25, $bb26;
$bb24:
  assume !(($i59 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb31;
$bb25:
  assume ($i64 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2461, 57} true;
  assume {:verifier.code 0} true;
  $i65 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2461, 7} true;
  assume {:verifier.code 0} true;
  call $i66 := printk.ref.bv32(.str.26, $i65);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2463, 21} true;
  assume {:verifier.code 0} true;
  $i67 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %85 = load i64, i64* %2, align 8, !dbg !2580, !verifier.code !2392
  call {:cexpr "__cil_tmp40"} boogie_si_record_bv64($i67);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2464, 7} true;
  assume {:verifier.code 0} true;
  call $i68 := printk.ref.bv64(.str.27, $i67);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2466, 5} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb26:
  assume !(($i64 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb27;
$bb27:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2470, 9} true;
  assume {:verifier.code 0} true;
  $i69 := $ne.bv32($i49, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2470, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i69} true;
  goto $bb28, $bb29;
$bb28:
  assume ($i69 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2472, 5} true;
  assume {:verifier.code 0} true;
  $i70 := $i49;
  goto $bb30;
$bb29:
  assume !(($i69 == 1bv1));
  assume {:verifier.code 0} true;
  $i70 := $sub.bv32(0bv32, 1bv32);
  goto $bb30;
$bb30:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2475, 5} true;
  assume {:verifier.code 0} true;
  $i38 := $i70;
  goto $bb15;
$bb31:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2479, 3} true;
  assume {:verifier.code 0} true;
  $i38 := $i49;
  goto $bb15;
}
const ldv__builtin_expect: ref;
axiom (ldv__builtin_expect == $sub.ref(0, 77172));
procedure  ldv__builtin_expect($i0: bv64, $i1: bv64)
  returns ($r: bv64)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !3384, metadata !2391), !dbg !3385, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4199, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __might_sleep: ref;
axiom (__might_sleep == $sub.ref(0, 78204));
procedure  __might_sleep($p0: ref, $i1: bv32, $i2: bv32);
const _cond_resched: ref;
axiom (_cond_resched == $sub.ref(0, 79236));
procedure  _cond_resched()
  returns ($r: bv32);
const verify_eraseblock: ref;
axiom (verify_eraseblock == $sub.ref(0, 80268));
procedure  verify_eraseblock($i0: bv32)
  returns ($r: bv32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: bv64;
  var $i4: bv64;
  var $p5: ref;
  var $i6: bv32;
  var $i7: bv32;
  var $i8: bv64;
  var $i9: bv32;
  var $i10: bv64;
  var $p11: ref;
  var $i12: bv32;
  var $i13: bv64;
  var $p14: ref;
  var $i15: bv32;
  var $i16: bv64;
  var $p17: ref;
  var $p18: ref;
  var $i19: bv32;
  var $i20: bv1;
  var $i22: bv32;
  var $i23: bv64;
  var $i24: bv64;
  var $i25: bv1;
  var $i26: bv32;
  var $i21: bv32;
  var $i27: bv64;
  var $i28: bv64;
  var $i29: bv1;
  var $i30: bv32;
  var $i31: bv1;
  var $i32: bv32;
  var $i33: bv64;
  var $i34: bv64;
  var $i35: bv1;
  var $i36: bv32;
  var $i37: bv32;
  var $i38: bv1;
  var $i39: bv32;
  var $p41: ref;
  var $p42: ref;
  var $i43: bv32;
  var $i44: bv64;
  var $i45: bv32;
  var $i46: bv1;
  var $i47: bv32;
  var $i48: bv64;
  var $i49: bv64;
  var $i50: bv1;
  var $i51: bv32;
  var $i52: bv32;
  var $p53: ref;
  var $i54: bv32;
  var $p55: ref;
  var $i56: bv32;
  var $i57: bv32;
  var $i58: bv32;
  var $i59: bv32;
  var $i60: bv64;
  var $i61: bv64;
  var $i62: bv32;
  var $i63: bv64;
  var $p64: ref;
  var $i65: bv32;
  var $i66: bv64;
  var $p67: ref;
  var $i68: bv32;
  var $i69: bv64;
  var $p70: ref;
  var $p71: ref;
  var $i72: bv32;
  var $i73: bv1;
  var $i75: bv32;
  var $i76: bv64;
  var $i77: bv64;
  var $i78: bv1;
  var $i79: bv32;
  var $i74: bv32;
  var $i80: bv64;
  var $i81: bv64;
  var $i82: bv1;
  var $i83: bv32;
  var $i84: bv1;
  var $i85: bv32;
  var $i86: bv64;
  var $i87: bv64;
  var $i88: bv1;
  var $i89: bv32;
  var $i90: bv32;
  var $i91: bv1;
  var $i92: bv32;
  var $i93: bv32;
  var $p94: ref;
  var $p95: ref;
  var $i96: bv32;
  var $i97: bv64;
  var $i98: bv32;
  var $i99: bv1;
  var $i100: bv32;
  var $i101: bv64;
  var $i102: bv64;
  var $i103: bv1;
  var $i104: bv32;
  var $i105: bv32;
  var $p106: ref;
  var $i107: bv32;
  var $p108: ref;
  var $i109: bv32;
  var $i110: bv32;
  var $i111: bv32;
  var $i40: bv32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $bv2int.64($zext.bv32.bv64(1bv32))));
  // WARNING: %2 = alloca i64, align 8, !verifier.code !2392
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: call void @llvm.dbg.declare(metadata i64* %2, metadata !3393, metadata !2391), !dbg !3394, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2732, 33} true;
  assume {:verifier.code 0} true;
  $p2 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2732, 17} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.bv64($p2);
  // WARNING: %4 = ptrtoint %struct.mtd_info* %3 to i64, !dbg !2403, !verifier.code !2392
  call {:cexpr "__cil_tmp19"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2733, 29} true;
  assume {:verifier.code 0} true;
  $i4 := $add.bv64($i3, 16bv64);
  // WARNING: %5 = add i64 %4, 16, !dbg !2406, !verifier.code !2392
  call {:cexpr "__cil_tmp20"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2734, 19} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.bv64.ref($i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2734, 17} true;
  assume {:verifier.code 0} true;
  $i6 := $load.bytes.bv32($M.0, $p5);
  // WARNING: %7 = load i32, i32* %6, align 4, !dbg !2410, !verifier.code !2392
  call {:cexpr "__cil_tmp21"} boogie_si_record_bv32($i6);
  // WARNING: call void @llvm.dbg.value(metadata i32 %7, i64 0, metadata !3408, metadata !2391), !dbg !3409, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2736, 29} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.bv32($i0, $i6);
  // WARNING: %8 = mul i32 %0, %7, !dbg !2415, !verifier.code !2392
  call {:cexpr "__cil_tmp23"} boogie_si_record_bv32($i7);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2737, 10} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.bv32.bv64($i7);
  // WARNING: %9 = zext i32 %8 to i64, !dbg !2418, !verifier.code !2392
  call {:cexpr "addr"} boogie_si_record_bv64($i8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2738, 26} true;
  assume {:verifier.code 0} true;
  $i9 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2738, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $sext.bv32.bv64($i9);
  // WARNING: %11 = sext i32 %10 to i64, !dbg !2422, !verifier.code !2392
  call {:cexpr "__cil_tmp24"} boogie_si_record_bv64($i10);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2739, 19} true;
  assume {:verifier.code 0} true;
  $p11 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2739, 3} true;
  assume {:verifier.code 0} true;
  call set_random_data($p11, $i10);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2740, 26} true;
  assume {:verifier.code 0} true;
  $i12 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2740, 17} true;
  assume {:verifier.code 0} true;
  $i13 := $sext.bv32.bv64($i12);
  // WARNING: %14 = sext i32 %13 to i64, !dbg !2428, !verifier.code !2392
  call {:cexpr "__cil_tmp25"} boogie_si_record_bv64($i13);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2741, 14} true;
  assume {:verifier.code 0} true;
  $p14 := $M.7;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2741, 3} true;
  assume {:verifier.code 0} true;
  call clear_data($p14, $i13);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2742, 26} true;
  assume {:verifier.code 0} true;
  $i15 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2742, 17} true;
  assume {:verifier.code 0} true;
  $i16 := $sext.bv32.bv64($i15);
  // WARNING: %17 = sext i32 %16 to i64, !dbg !2434, !verifier.code !2392
  call {:cexpr "__cil_tmp26"} boogie_si_record_bv64($i16);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2743, 18} true;
  assume {:verifier.code 0} true;
  $p17 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2743, 50} true;
  assume {:verifier.code 0} true;
  $p18 := $M.7;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2743, 9} true;
  assume {:verifier.code 0} true;
  call $i19 := mtd_read($p17, $i8, $i16, $p1, $p18);
  // WARNING: %20 = call i32 @mtd_read(%struct.mtd_info* %18, i64 %9, i64 %17, i64* %2, i8* %19), !dbg !2439, !verifier.code !2392
  call {:cexpr "err"} boogie_si_record_bv32($i19);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2745, 7} true;
  assume {:verifier.code 0} true;
  $i20 := $ne.bv32($i19, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2745, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i20 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2747, 3} true;
  assume {:verifier.code 0} true;
  $i21 := 1bv32;
  goto $bb3;
$bb2:
  assume !(($i20 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2749, 28} true;
  assume {:verifier.code 0} true;
  $i22 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2749, 19} true;
  assume {:verifier.code 0} true;
  $i23 := $sext.bv32.bv64($i22);
  // WARNING: %25 = sext i32 %24 to i64, !dbg !2450, !verifier.code !2392
  call {:cexpr "__cil_tmp27"} boogie_si_record_bv64($i23);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2751, 19} true;
  assume {:verifier.code 0} true;
  $i24 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %26 = load i64, i64* %2, align 8, !dbg !2455, !verifier.code !2392
  call {:cexpr "__cil_tmp29"} boogie_si_record_bv64($i24);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2752, 21} true;
  assume {:verifier.code 0} true;
  $i25 := $ne.bv64($i24, $i23);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2752, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb4, $bb5;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2760, 17} true;
  assume {:verifier.code 0} true;
  $i27 := $sext.bv32.bv64($i21);
  // WARNING: %32 = sext i32 %.16 to i64, !dbg !2463, !verifier.code !2392
  call {:cexpr "__cil_tmp30"} boogie_si_record_bv64($i27);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2761, 14} true;
  assume {:verifier.code 0} true;
  call $i28 := ldv__builtin_expect($i27, 0bv64);
  // WARNING: %33 = call i64 @ldv__builtin_expect(i64 %32, i64 0), !dbg !2467, !verifier.code !2392
  call {:cexpr "tmp___10"} boogie_si_record_bv64($i28);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2763, 7} true;
  assume {:verifier.code 0} true;
  $i29 := $ne.bv64($i28, 0bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2763, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb7, $bb8;
$bb4:
  assume ($i25 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2754, 5} true;
  assume {:verifier.code 0} true;
  $i26 := 1bv32;
  goto $bb6;
$bb5:
  assume !(($i25 == 1bv1));
  assume {:verifier.code 0} true;
  $i26 := 0bv32;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i21 := $i26;
  goto $bb3;
$bb7:
  assume ($i29 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2765, 15} true;
  assume {:verifier.code 0} true;
  call $i30 := mtd_is_bitflip($i19);
  // WARNING: %36 = call i32 @mtd_is_bitflip(i32 %20), !dbg !2473, !verifier.code !2392
  call {:cexpr "tmp___8"} boogie_si_record_bv32($i30);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2767, 9} true;
  assume {:verifier.code 0} true;
  $i31 := $ne.bv32($i30, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2767, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb9, $bb10;
$bb8:
  assume !(($i29 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb20;
$bb9:
  assume ($i31 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2769, 30} true;
  assume {:verifier.code 0} true;
  $i32 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2769, 21} true;
  assume {:verifier.code 0} true;
  $i33 := $sext.bv32.bv64($i32);
  // WARNING: %40 = sext i32 %39 to i64, !dbg !2484, !verifier.code !2392
  call {:cexpr "__cil_tmp31"} boogie_si_record_bv64($i33);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2771, 21} true;
  assume {:verifier.code 0} true;
  $i34 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %41 = load i64, i64* %2, align 8, !dbg !2489, !verifier.code !2392
  call {:cexpr "__cil_tmp33"} boogie_si_record_bv64($i34);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2772, 23} true;
  assume {:verifier.code 0} true;
  $i35 := $eq.bv64($i34, $i33);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2772, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb11, $bb12;
$bb10:
  assume !(($i31 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2781, 12} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb11:
  assume ($i35 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2774, 9} true;
  assume {:verifier.code 0} true;
  call $i36 := printk.ref.bv64(.str.28, $i8);
  // WARNING: %44 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.28, i32 0, i32 0), i64 %9), !dbg !2495, !verifier.code !2392
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2777, 7} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume !(($i35 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2778, 9} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb13:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2781, 5} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2784, 7} true;
  assume {:verifier.code 0} true;
  call $i37 := printk.ref.bv64(.str.29, $i8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2786, 11} true;
  assume {:verifier.code 0} true;
  $i38 := $ne.bv32($i19, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2786, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb16, $bb17;
$bb15:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2793, 3} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb16:
  assume ($i38 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2788, 7} true;
  assume {:verifier.code 0} true;
  $i39 := $i19;
  goto $bb18;
$bb17:
  assume !(($i38 == 1bv1));
  assume {:verifier.code 0} true;
  $i39 := $sub.bv32(0bv32, 1bv32);
  goto $bb18;
$bb18:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2791, 7} true;
  assume {:verifier.code 0} true;
  $i40 := $i39;
  goto $bb19;
$bb19:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2915, 1} true;
  assume {:verifier.code 0} true;
  $r := $i40;
  $exn := false;
  return;
$bb20:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2797, 33} true;
  assume {:verifier.code 0} true;
  $p41 := $M.7;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2798, 33} true;
  assume {:verifier.code 0} true;
  $p42 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2799, 33} true;
  assume {:verifier.code 0} true;
  $i43 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2799, 17} true;
  assume {:verifier.code 0} true;
  $i44 := $sext.bv32.bv64($i43);
  // WARNING: %60 = sext i32 %59 to i64, !dbg !2524, !verifier.code !2392
  call {:cexpr "__cil_tmp36"} boogie_si_record_bv64($i44);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2800, 14} true;
  assume {:verifier.code 0} true;
  call $i45 := memcmp($p41, $p42, $i44);
  // WARNING: %61 = call i32 @memcmp(i8* %57, i8* %58, i64 %60), !dbg !2527, !verifier.code !2392
  call {:cexpr "tmp___11"} boogie_si_record_bv32($i45);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2802, 7} true;
  assume {:verifier.code 0} true;
  $i46 := $ne.bv32($i45, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2802, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i46 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2804, 3} true;
  assume {:verifier.code 0} true;
  $i47 := 1bv32;
  goto $bb23;
$bb22:
  assume !(($i46 == 1bv1));
  assume {:verifier.code 0} true;
  $i47 := 0bv32;
  goto $bb23;
$bb23:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2808, 17} true;
  assume {:verifier.code 0} true;
  $i48 := $sext.bv32.bv64($i47);
  // WARNING: %66 = sext i32 %.08 to i64, !dbg !2537, !verifier.code !2392
  call {:cexpr "__cil_tmp37"} boogie_si_record_bv64($i48);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2809, 14} true;
  assume {:verifier.code 0} true;
  call $i49 := ldv__builtin_expect($i48, 0bv64);
  // WARNING: %67 = call i64 @ldv__builtin_expect(i64 %66, i64 0), !dbg !2541, !verifier.code !2392
  call {:cexpr "tmp___13"} boogie_si_record_bv64($i49);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2811, 7} true;
  assume {:verifier.code 0} true;
  $i50 := $ne.bv64($i49, 0bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2811, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i50} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i50 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2813, 5} true;
  assume {:verifier.code 0} true;
  call $i51 := printk.ref.bv64(.str.30, $i8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2814, 5} true;
  assume {:verifier.code 0} true;
  call $i52 := printk.ref(.str.31);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2815, 19} true;
  assume {:verifier.code 0} true;
  $p53 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2815, 5} true;
  assume {:verifier.code 0} true;
  call print_subpage($p53);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2816, 5} true;
  assume {:verifier.code 0} true;
  call $i54 := printk.ref(.str.32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2817, 19} true;
  assume {:verifier.code 0} true;
  $p55 := $M.7;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2817, 5} true;
  assume {:verifier.code 0} true;
  call print_subpage($p55);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2818, 5} true;
  assume {:verifier.code 0} true;
  call $i56 := printk.ref(.str.33);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2819, 14} true;
  assume {:verifier.code 0} true;
  $i57 := $M.9;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2819, 21} true;
  assume {:verifier.code 0} true;
  $i58 := $add.bv32($i57, 1bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2819, 12} true;
  assume {:verifier.code 0} true;
  $M.9 := $i58;
  call {:cexpr "errcnt"} boogie_si_record_bv32($i58);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2821, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb25:
  assume !(($i50 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb26;
$bb26:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2825, 26} true;
  assume {:verifier.code 0} true;
  $i59 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2825, 17} true;
  assume {:verifier.code 0} true;
  $i60 := $sext.bv32.bv64($i59);
  // WARNING: %81 = sext i32 %80 to i64, !dbg !2563, !verifier.code !2392
  call {:cexpr "__cil_tmp38"} boogie_si_record_bv64($i60);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2826, 15} true;
  assume {:verifier.code 0} true;
  $i61 := $add.bv64($i8, $i60);
  // WARNING: %82 = add nsw i64 %9, %81, !dbg !2566, !verifier.code !2392
  call {:cexpr "addr"} boogie_si_record_bv64($i61);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2827, 26} true;
  assume {:verifier.code 0} true;
  $i62 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2827, 17} true;
  assume {:verifier.code 0} true;
  $i63 := $sext.bv32.bv64($i62);
  // WARNING: %84 = sext i32 %83 to i64, !dbg !2568, !verifier.code !2392
  call {:cexpr "__cil_tmp39"} boogie_si_record_bv64($i63);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2828, 19} true;
  assume {:verifier.code 0} true;
  $p64 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2828, 3} true;
  assume {:verifier.code 0} true;
  call set_random_data($p64, $i63);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2829, 26} true;
  assume {:verifier.code 0} true;
  $i65 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2829, 17} true;
  assume {:verifier.code 0} true;
  $i66 := $sext.bv32.bv64($i65);
  // WARNING: %87 = sext i32 %86 to i64, !dbg !2574, !verifier.code !2392
  call {:cexpr "__cil_tmp40"} boogie_si_record_bv64($i66);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2830, 14} true;
  assume {:verifier.code 0} true;
  $p67 := $M.7;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2830, 3} true;
  assume {:verifier.code 0} true;
  call clear_data($p67, $i66);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2831, 26} true;
  assume {:verifier.code 0} true;
  $i68 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2831, 17} true;
  assume {:verifier.code 0} true;
  $i69 := $sext.bv32.bv64($i68);
  // WARNING: %90 = sext i32 %89 to i64, !dbg !2580, !verifier.code !2392
  call {:cexpr "__cil_tmp41"} boogie_si_record_bv64($i69);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2832, 18} true;
  assume {:verifier.code 0} true;
  $p70 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2832, 50} true;
  assume {:verifier.code 0} true;
  $p71 := $M.7;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2832, 9} true;
  assume {:verifier.code 0} true;
  call $i72 := mtd_read($p70, $i61, $i69, $p1, $p71);
  // WARNING: %93 = call i32 @mtd_read(%struct.mtd_info* %91, i64 %82, i64 %90, i64* %2, i8* %92), !dbg !2585, !verifier.code !2392
  call {:cexpr "err"} boogie_si_record_bv32($i72);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2834, 7} true;
  assume {:verifier.code 0} true;
  $i73 := $ne.bv32($i72, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2834, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i73} true;
  goto $bb27, $bb28;
$bb27:
  assume ($i73 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2836, 3} true;
  assume {:verifier.code 0} true;
  $i74 := 1bv32;
  goto $bb29;
$bb28:
  assume !(($i73 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2838, 28} true;
  assume {:verifier.code 0} true;
  $i75 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2838, 19} true;
  assume {:verifier.code 0} true;
  $i76 := $sext.bv32.bv64($i75);
  // WARNING: %98 = sext i32 %97 to i64, !dbg !2596, !verifier.code !2392
  call {:cexpr "__cil_tmp42"} boogie_si_record_bv64($i76);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2840, 19} true;
  assume {:verifier.code 0} true;
  $i77 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %99 = load i64, i64* %2, align 8, !dbg !2601, !verifier.code !2392
  call {:cexpr "__cil_tmp44"} boogie_si_record_bv64($i77);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2841, 21} true;
  assume {:verifier.code 0} true;
  $i78 := $ne.bv64($i77, $i76);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2841, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i78} true;
  goto $bb30, $bb31;
$bb29:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2849, 17} true;
  assume {:verifier.code 0} true;
  $i80 := $sext.bv32.bv64($i74);
  // WARNING: %105 = sext i32 %.1 to i64, !dbg !2609, !verifier.code !2392
  call {:cexpr "__cil_tmp45"} boogie_si_record_bv64($i80);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2850, 14} true;
  assume {:verifier.code 0} true;
  call $i81 := ldv__builtin_expect($i80, 0bv64);
  // WARNING: %106 = call i64 @ldv__builtin_expect(i64 %105, i64 0), !dbg !2613, !verifier.code !2392
  call {:cexpr "tmp___17"} boogie_si_record_bv64($i81);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2852, 7} true;
  assume {:verifier.code 0} true;
  $i82 := $ne.bv64($i81, 0bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2852, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i82} true;
  goto $bb33, $bb34;
$bb30:
  assume ($i78 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2843, 5} true;
  assume {:verifier.code 0} true;
  $i79 := 1bv32;
  goto $bb32;
$bb31:
  assume !(($i78 == 1bv1));
  assume {:verifier.code 0} true;
  $i79 := 0bv32;
  goto $bb32;
$bb32:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i74 := $i79;
  goto $bb29;
$bb33:
  assume ($i82 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2854, 16} true;
  assume {:verifier.code 0} true;
  call $i83 := mtd_is_bitflip($i72);
  // WARNING: %109 = call i32 @mtd_is_bitflip(i32 %93), !dbg !2619, !verifier.code !2392
  call {:cexpr "tmp___15"} boogie_si_record_bv32($i83);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2856, 9} true;
  assume {:verifier.code 0} true;
  $i84 := $ne.bv32($i83, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2856, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i84} true;
  goto $bb35, $bb36;
$bb34:
  assume !(($i82 == 1bv1));
  assume {:verifier.code 0} true;
  $i93 := $i72;
  goto $bb45;
$bb35:
  assume ($i84 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2858, 30} true;
  assume {:verifier.code 0} true;
  $i85 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2858, 21} true;
  assume {:verifier.code 0} true;
  $i86 := $sext.bv32.bv64($i85);
  // WARNING: %113 = sext i32 %112 to i64, !dbg !2630, !verifier.code !2392
  call {:cexpr "__cil_tmp46"} boogie_si_record_bv64($i86);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2860, 21} true;
  assume {:verifier.code 0} true;
  $i87 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %114 = load i64, i64* %2, align 8, !dbg !2635, !verifier.code !2392
  call {:cexpr "__cil_tmp48"} boogie_si_record_bv64($i87);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2861, 23} true;
  assume {:verifier.code 0} true;
  $i88 := $eq.bv64($i87, $i86);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2861, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i88} true;
  goto $bb37, $bb38;
$bb36:
  assume !(($i84 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2870, 12} true;
  assume {:verifier.code 0} true;
  goto $bb40;
$bb37:
  assume ($i88 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2863, 9} true;
  assume {:verifier.code 0} true;
  call $i89 := printk.ref.bv64(.str.28, $i61);
  // WARNING: %117 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.28, i32 0, i32 0), i64 %82), !dbg !2641, !verifier.code !2392
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2866, 7} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb38:
  assume !(($i88 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2867, 9} true;
  assume {:verifier.code 0} true;
  goto $bb40;
$bb39:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2870, 5} true;
  assume {:verifier.code 0} true;
  goto $bb41;
$bb40:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2873, 7} true;
  assume {:verifier.code 0} true;
  call $i90 := printk.ref.bv64(.str.29, $i61);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2875, 11} true;
  assume {:verifier.code 0} true;
  $i91 := $ne.bv32($i72, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2875, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i91} true;
  goto $bb42, $bb43;
$bb41:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2882, 3} true;
  assume {:verifier.code 0} true;
  $i93 := 0bv32;
  goto $bb45;
$bb42:
  assume ($i91 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2877, 7} true;
  assume {:verifier.code 0} true;
  $i92 := $i72;
  goto $bb44;
$bb43:
  assume !(($i91 == 1bv1));
  assume {:verifier.code 0} true;
  $i92 := $sub.bv32(0bv32, 1bv32);
  goto $bb44;
$bb44:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2880, 7} true;
  assume {:verifier.code 0} true;
  $i40 := $i92;
  goto $bb19;
$bb45:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2886, 33} true;
  assume {:verifier.code 0} true;
  $p94 := $M.7;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2887, 33} true;
  assume {:verifier.code 0} true;
  $p95 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2888, 33} true;
  assume {:verifier.code 0} true;
  $i96 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2888, 17} true;
  assume {:verifier.code 0} true;
  $i97 := $sext.bv32.bv64($i96);
  // WARNING: %133 = sext i32 %132 to i64, !dbg !2670, !verifier.code !2392
  call {:cexpr "__cil_tmp51"} boogie_si_record_bv64($i97);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2889, 14} true;
  assume {:verifier.code 0} true;
  call $i98 := memcmp($p94, $p95, $i97);
  // WARNING: %134 = call i32 @memcmp(i8* %130, i8* %131, i64 %133), !dbg !2673, !verifier.code !2392
  call {:cexpr "tmp___18"} boogie_si_record_bv32($i98);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2891, 7} true;
  assume {:verifier.code 0} true;
  $i99 := $ne.bv32($i98, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2891, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i99} true;
  goto $bb46, $bb47;
$bb46:
  assume ($i99 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2893, 3} true;
  assume {:verifier.code 0} true;
  $i100 := 1bv32;
  goto $bb48;
$bb47:
  assume !(($i99 == 1bv1));
  assume {:verifier.code 0} true;
  $i100 := 0bv32;
  goto $bb48;
$bb48:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2897, 17} true;
  assume {:verifier.code 0} true;
  $i101 := $sext.bv32.bv64($i100);
  // WARNING: %139 = sext i32 %.01 to i64, !dbg !2683, !verifier.code !2392
  call {:cexpr "__cil_tmp52"} boogie_si_record_bv64($i101);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2898, 14} true;
  assume {:verifier.code 0} true;
  call $i102 := ldv__builtin_expect($i101, 0bv64);
  // WARNING: %140 = call i64 @ldv__builtin_expect(i64 %139, i64 0), !dbg !2687, !verifier.code !2392
  call {:cexpr "tmp___20"} boogie_si_record_bv64($i102);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2900, 7} true;
  assume {:verifier.code 0} true;
  $i103 := $ne.bv64($i102, 0bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2900, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i103} true;
  goto $bb49, $bb50;
$bb49:
  assume ($i103 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2902, 5} true;
  assume {:verifier.code 0} true;
  call $i104 := printk.ref.bv64(.str.30, $i61);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2903, 5} true;
  assume {:verifier.code 0} true;
  call $i105 := printk.ref(.str.31);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2904, 19} true;
  assume {:verifier.code 0} true;
  $p106 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2904, 5} true;
  assume {:verifier.code 0} true;
  call print_subpage($p106);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2905, 5} true;
  assume {:verifier.code 0} true;
  call $i107 := printk.ref(.str.32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2906, 19} true;
  assume {:verifier.code 0} true;
  $p108 := $M.7;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2906, 5} true;
  assume {:verifier.code 0} true;
  call print_subpage($p108);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2907, 5} true;
  assume {:verifier.code 0} true;
  call $i109 := printk.ref(.str.33);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2908, 14} true;
  assume {:verifier.code 0} true;
  $i110 := $M.9;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2908, 21} true;
  assume {:verifier.code 0} true;
  $i111 := $add.bv32($i110, 1bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2908, 12} true;
  assume {:verifier.code 0} true;
  $M.9 := $i111;
  call {:cexpr "errcnt"} boogie_si_record_bv32($i111);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2910, 3} true;
  assume {:verifier.code 0} true;
  goto $bb51;
$bb50:
  assume !(($i103 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb51;
$bb51:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2913, 3} true;
  assume {:verifier.code 0} true;
  $i40 := $i93;
  goto $bb19;
}
const verify_all_eraseblocks_ff: ref;
axiom (verify_all_eraseblocks_ff == $sub.ref(0, 81300));
procedure  verify_all_eraseblocks_ff()
  returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv32;
  var $i2: bv32;
  var $i3: bv1;
  var $i4: bv32;
  var $p5: ref;
  var $i6: bv64;
  var $p7: ref;
  var $i8: bv8;
  var $i9: bv1;
  var $i10: bv32;
  var $i11: bv1;
  var $i12: bv32;
  var $i14: bv32;
  var $i15: bv1;
  var $i16: bv32;
  var $i17: bv32;
  var $i18: bv32;
  var $i19: bv32;
  var $i13: bv32;
$bb0:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3265, 3} true;
  assume {:verifier.code 0} true;
  call $i0 := printk.ref(.str.36);
  // WARNING: %1 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.36, i32 0, i32 0)), !dbg !2390, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3269, 3} true;
  assume {:verifier.code 0} true;
  $i1 := 0bv32;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3269, 13} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3272, 33} true;
  assume {:verifier.code 0} true;
  $i2 := $M.3;
  // WARNING: %4 = load i32, i32* @ebcnt, align 4, !dbg !2401, !verifier.code !2393
  call {:cexpr "__cil_tmp3"} boogie_si_record_bv32($i2);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3273, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $ult.bv32($i1, $i2);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3273, 9} true;
  assume {:verifier.code 0} true;
  $i4 := $i1;
  assume {:branchcond $i3} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3275, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i3 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3276, 7} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3280, 18} true;
  assume {:verifier.code 0} true;
  $p5 := $M.8;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3280, 22} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.bv32.bv64($i1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3280, 22} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p5, $mul.ref($bv2int.64($i6), 1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3281, 9} true;
  assume {:verifier.code 0} true;
  $i8 := $load.bytes.bv8($M.0, $p7);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3281, 9} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.bv8($i8, 0bv8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3281, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb7, $bb8;
$bb6:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3317, 3} true;
  assume {:verifier.code 0} true;
  call $i19 := printk.ref.bv32(.str.15, $i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3319, 3} true;
  assume {:verifier.code 0} true;
  $i13 := 0bv32;
  goto $bb13;
$bb7:
  assume ($i9 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3282, 7} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i9 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3312, 11} true;
  assume {:verifier.code 0} true;
  $i18 := $add.bv32($i1, 1bv32);
  // WARNING: %30 = add i32 %.01, 1, !dbg !2449, !verifier.code !2393
  call {:cexpr "i"} boogie_si_record_bv32($i18);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3269, 3} true;
  assume {:verifier.code 0} true;
  $i1 := $i18;
  goto $bb1;
$bb10:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3289, 11} true;
  assume {:verifier.code 0} true;
  call $i10 := verify_eraseblock_ff($i1);
  // WARNING: %17 = call i32 @verify_eraseblock_ff(i32 %.01), !dbg !2425, !verifier.code !2393
  call {:cexpr "err"} boogie_si_record_bv32($i10);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3291, 9} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.bv32($i10, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3291, 9} true;
  assume {:verifier.code 0} true;
  $i12 := $i10;
  assume {:branchcond $i11} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i11 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3292, 7} true;
  assume {:verifier.code 0} true;
  $i13 := $i12;
  goto $bb13;
$bb12:
  assume !(($i11 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb14;
$bb13:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3321, 1} true;
  assume {:verifier.code 0} true;
  $r := $i13;
  $exn := false;
  return;
$bb14:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3297, 20} true;
  assume {:verifier.code 0} true;
  $i14 := $urem.bv32($i1, 256bv32);
  // WARNING: %22 = urem i32 %.01, 256, !dbg !2434, !verifier.code !2393
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv32($i14);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3298, 20} true;
  assume {:verifier.code 0} true;
  $i15 := $eq.bv32($i14, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3298, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb15, $bb16;
$bb15:
  assume ($i15 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3300, 7} true;
  assume {:verifier.code 0} true;
  call $i16 := printk.ref.bv32(.str.14, $i1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3302, 5} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume !(($i15 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb17;
$bb17:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3307, 5} true;
  assume {:verifier.code 0} true;
  call __might_sleep(.str.11, 333bv32, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3309, 5} true;
  assume {:verifier.code 0} true;
  call $i17 := _cond_resched();
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3310, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
}
const write_eraseblock2: ref;
axiom (write_eraseblock2 == $sub.ref(0, 82332));
procedure  write_eraseblock2($i0: bv32)
  returns ($r: bv32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: bv64;
  var $i4: bv64;
  var $p5: ref;
  var $i6: bv32;
  var $i7: bv32;
  var $i8: bv64;
  var $i9: bv64;
  var $i10: bv32;
  var $i11: bv32;
  var $i12: bv1;
  var $i13: bv32;
  var $p15: ref;
  var $i16: bv64;
  var $i17: bv64;
  var $p18: ref;
  var $i19: bv32;
  var $i20: bv32;
  var $i21: bv32;
  var $i22: bv64;
  var $i23: bv32;
  var $i24: bv32;
  var $i25: bv64;
  var $i26: bv64;
  var $i27: bv1;
  var $i28: bv32;
  var $i29: bv32;
  var $i30: bv32;
  var $i31: bv64;
  var $p32: ref;
  var $i33: bv32;
  var $i34: bv32;
  var $i35: bv64;
  var $p36: ref;
  var $p37: ref;
  var $i38: bv32;
  var $i39: bv1;
  var $i41: bv32;
  var $i42: bv32;
  var $i43: bv64;
  var $i44: bv64;
  var $i45: bv1;
  var $i46: bv32;
  var $i40: bv32;
  var $i47: bv64;
  var $i48: bv64;
  var $i49: bv1;
  var $i50: bv64;
  var $i51: bv32;
  var $i52: bv32;
  var $i53: bv32;
  var $i54: bv32;
  var $i55: bv64;
  var $i56: bv64;
  var $i57: bv1;
  var $i58: bv32;
  var $i59: bv32;
  var $i60: bv32;
  var $i61: bv64;
  var $i62: bv32;
  var $i63: bv1;
  var $i64: bv32;
  var $i66: bv32;
  var $i67: bv32;
  var $i68: bv64;
  var $i69: bv64;
  var $i70: bv32;
  var $i14: bv32;
  var $i65: bv32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $bv2int.64($zext.bv32.bv64(1bv32))));
  // WARNING: %2 = alloca i64, align 8, !verifier.code !2392
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: call void @llvm.dbg.declare(metadata i64* %2, metadata !3775, metadata !2391), !dbg !3776, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2526, 32} true;
  assume {:verifier.code 0} true;
  $p2 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2526, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.bv64($p2);
  // WARNING: %4 = ptrtoint %struct.mtd_info* %3 to i64, !dbg !2402, !verifier.code !2392
  call {:cexpr "__cil_tmp9"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2527, 28} true;
  assume {:verifier.code 0} true;
  $i4 := $add.bv64($i3, 16bv64);
  // WARNING: %5 = add i64 %4, 16, !dbg !2405, !verifier.code !2392
  call {:cexpr "__cil_tmp10"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2528, 19} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.bv64.ref($i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2528, 17} true;
  assume {:verifier.code 0} true;
  $i6 := $load.bytes.bv32($M.0, $p5);
  // WARNING: %7 = load i32, i32* %6, align 4, !dbg !2409, !verifier.code !2392
  call {:cexpr "__cil_tmp11"} boogie_si_record_bv32($i6);
  // WARNING: call void @llvm.dbg.value(metadata i32 %7, i64 0, metadata !3789, metadata !2391), !dbg !3790, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2530, 29} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.bv32($i0, $i6);
  // WARNING: %8 = mul i32 %0, %7, !dbg !2414, !verifier.code !2392
  call {:cexpr "__cil_tmp13"} boogie_si_record_bv32($i7);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2531, 10} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.bv32.bv64($i7);
  // WARNING: %9 = zext i32 %8 to i64, !dbg !2417, !verifier.code !2392
  call {:cexpr "addr"} boogie_si_record_bv64($i8);
  // WARNING: call void @llvm.dbg.value(metadata i64 %9, i64 0, metadata !3797, metadata !2391), !dbg !3798, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2534, 3} true;
  assume {:verifier.code 0} true;
  $i9, $i10, $i11 := $i8, 1bv32, 0bv32;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2534, 13} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2536, 11} true;
  assume {:verifier.code 0} true;
  $i12 := $slt.bv32($i10, 33bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2536, 9} true;
  assume {:verifier.code 0} true;
  $i13 := $i11;
  assume {:branchcond $i12} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i12 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2538, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i12 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2539, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $i13;
  goto $bb6;
$bb5:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2542, 35} true;
  assume {:verifier.code 0} true;
  $p15 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2542, 19} true;
  assume {:verifier.code 0} true;
  $i16 := $p2i.ref.bv64($p15);
  // WARNING: %17 = ptrtoint %struct.mtd_info* %16 to i64, !dbg !2436, !verifier.code !2392
  call {:cexpr "__cil_tmp14"} boogie_si_record_bv64($i16);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2543, 31} true;
  assume {:verifier.code 0} true;
  $i17 := $add.bv64($i16, 16bv64);
  // WARNING: %18 = add i64 %17, 16, !dbg !2439, !verifier.code !2392
  call {:cexpr "__cil_tmp15"} boogie_si_record_bv64($i17);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2544, 21} true;
  assume {:verifier.code 0} true;
  $p18 := $i2p.bv64.ref($i17);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2544, 19} true;
  assume {:verifier.code 0} true;
  $i19 := $load.bytes.bv32($M.0, $p18);
  // WARNING: %20 = load i32, i32* %19, align 4, !dbg !2443, !verifier.code !2392
  call {:cexpr "__cil_tmp16"} boogie_si_record_bv32($i19);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2545, 25} true;
  assume {:verifier.code 0} true;
  $i20 := $add.bv32($i0, 1bv32);
  // WARNING: %21 = add nsw i32 %0, 1, !dbg !2446, !verifier.code !2392
  call {:cexpr "__cil_tmp17"} boogie_si_record_bv32($i20);
  // WARNING: call void @llvm.dbg.value(metadata i32 %21, i64 0, metadata !3826, metadata !2391), !dbg !3827, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2547, 31} true;
  assume {:verifier.code 0} true;
  $i21 := $mul.bv32($i20, $i19);
  // WARNING: %22 = mul i32 %21, %20, !dbg !2451, !verifier.code !2392
  call {:cexpr "__cil_tmp19"} boogie_si_record_bv32($i21);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2548, 19} true;
  assume {:verifier.code 0} true;
  $i22 := $zext.bv32.bv64($i21);
  // WARNING: %23 = zext i32 %22 to i64, !dbg !2454, !verifier.code !2392
  call {:cexpr "__cil_tmp20"} boogie_si_record_bv64($i22);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2549, 19} true;
  assume {:verifier.code 0} true;
  $i23 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2549, 29} true;
  assume {:verifier.code 0} true;
  $i24 := $mul.bv32($i23, $i10);
  // WARNING: %25 = mul nsw i32 %24, %.03, !dbg !2458, !verifier.code !2392
  call {:cexpr "__cil_tmp21"} boogie_si_record_bv32($i24);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2550, 19} true;
  assume {:verifier.code 0} true;
  $i25 := $sext.bv32.bv64($i24);
  // WARNING: %26 = sext i32 %25 to i64, !dbg !2461, !verifier.code !2392
  call {:cexpr "__cil_tmp22"} boogie_si_record_bv64($i25);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2551, 24} true;
  assume {:verifier.code 0} true;
  $i26 := $add.bv64($i9, $i25);
  // WARNING: %27 = add nsw i64 %.04, %26, !dbg !2464, !verifier.code !2392
  call {:cexpr "__cil_tmp23"} boogie_si_record_bv64($i26);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2552, 21} true;
  assume {:verifier.code 0} true;
  $i27 := $sgt.bv64($i26, $i22);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2552, 9} true;
  assume {:verifier.code 0} true;
  $i28 := $i11;
  assume {:branchcond $i27} true;
  goto $bb7, $bb8;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2622, 3} true;
  assume {:verifier.code 0} true;
  $i65 := $i14;
  goto $bb24;
$bb7:
  assume ($i27 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2553, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $i28;
  goto $bb6;
$bb8:
  assume !(($i27 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2559, 19} true;
  assume {:verifier.code 0} true;
  $i29 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2559, 29} true;
  assume {:verifier.code 0} true;
  $i30 := $mul.bv32($i29, $i10);
  // WARNING: %33 = mul nsw i32 %32, %.03, !dbg !2474, !verifier.code !2392
  call {:cexpr "__cil_tmp24"} boogie_si_record_bv32($i30);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2560, 19} true;
  assume {:verifier.code 0} true;
  $i31 := $sext.bv32.bv64($i30);
  // WARNING: %34 = sext i32 %33 to i64, !dbg !2477, !verifier.code !2392
  call {:cexpr "__cil_tmp25"} boogie_si_record_bv64($i31);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2561, 21} true;
  assume {:verifier.code 0} true;
  $p32 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2561, 5} true;
  assume {:verifier.code 0} true;
  call set_random_data($p32, $i31);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2562, 19} true;
  assume {:verifier.code 0} true;
  $i33 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2562, 29} true;
  assume {:verifier.code 0} true;
  $i34 := $mul.bv32($i33, $i10);
  // WARNING: %37 = mul nsw i32 %36, %.03, !dbg !2483, !verifier.code !2392
  call {:cexpr "__cil_tmp26"} boogie_si_record_bv32($i34);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2563, 19} true;
  assume {:verifier.code 0} true;
  $i35 := $sext.bv32.bv64($i34);
  // WARNING: %38 = sext i32 %37 to i64, !dbg !2486, !verifier.code !2392
  call {:cexpr "__cil_tmp27"} boogie_si_record_bv64($i35);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2564, 37} true;
  assume {:verifier.code 0} true;
  $p36 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2565, 21} true;
  assume {:verifier.code 0} true;
  $p37 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2565, 11} true;
  assume {:verifier.code 0} true;
  call $i38 := mtd_write($p37, $i9, $i35, $p1, $p36);
  // WARNING: %41 = call i32 @mtd_write(%struct.mtd_info* %40, i64 %.04, i64 %38, i64* %2, i8* %39), !dbg !2493, !verifier.code !2392
  call {:cexpr "err"} boogie_si_record_bv32($i38);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2567, 9} true;
  assume {:verifier.code 0} true;
  $i39 := $ne.bv32($i38, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2567, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i39 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2569, 5} true;
  assume {:verifier.code 0} true;
  $i40 := 1bv32;
  goto $bb12;
$bb11:
  assume !(($i39 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2571, 21} true;
  assume {:verifier.code 0} true;
  $i41 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2571, 31} true;
  assume {:verifier.code 0} true;
  $i42 := $mul.bv32($i41, $i10);
  // WARNING: %46 = mul nsw i32 %45, %.03, !dbg !2504, !verifier.code !2392
  call {:cexpr "__cil_tmp29"} boogie_si_record_bv32($i42);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2572, 21} true;
  assume {:verifier.code 0} true;
  $i43 := $sext.bv32.bv64($i42);
  // WARNING: %47 = sext i32 %46 to i64, !dbg !2507, !verifier.code !2392
  call {:cexpr "__cil_tmp30"} boogie_si_record_bv64($i43);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2574, 21} true;
  assume {:verifier.code 0} true;
  $i44 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %48 = load i64, i64* %2, align 8, !dbg !2512, !verifier.code !2392
  call {:cexpr "__cil_tmp32"} boogie_si_record_bv64($i44);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2575, 23} true;
  assume {:verifier.code 0} true;
  $i45 := $ne.bv64($i44, $i43);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2575, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb13, $bb14;
$bb12:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2583, 19} true;
  assume {:verifier.code 0} true;
  $i47 := $sext.bv32.bv64($i40);
  // WARNING: %54 = sext i32 %.1 to i64, !dbg !2520, !verifier.code !2392
  call {:cexpr "__cil_tmp33"} boogie_si_record_bv64($i47);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2584, 15} true;
  assume {:verifier.code 0} true;
  call $i48 := ldv__builtin_expect($i47, 0bv64);
  // WARNING: %55 = call i64 @ldv__builtin_expect(i64 %54, i64 0), !dbg !2524, !verifier.code !2392
  call {:cexpr "tmp___9"} boogie_si_record_bv64($i48);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2586, 9} true;
  assume {:verifier.code 0} true;
  $i49 := $ne.bv64($i48, 0bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2586, 9} true;
  assume {:verifier.code 0} true;
  $i50, $i51, $i52 := $i9, $i10, $i38;
  assume {:branchcond $i49} true;
  goto $bb16, $bb17;
$bb13:
  assume ($i45 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2577, 7} true;
  assume {:verifier.code 0} true;
  $i46 := 1bv32;
  goto $bb15;
$bb14:
  assume !(($i45 == 1bv1));
  assume {:verifier.code 0} true;
  $i46 := 0bv32;
  goto $bb15;
$bb15:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i40 := $i46;
  goto $bb12;
$bb16:
  assume ($i49 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2588, 7} true;
  assume {:verifier.code 0} true;
  call $i53 := printk.ref.bv64(.str.25, $i50);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2591, 30} true;
  assume {:verifier.code 0} true;
  $i54 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2591, 21} true;
  assume {:verifier.code 0} true;
  $i55 := $sext.bv32.bv64($i54);
  // WARNING: %60 = sext i32 %59 to i64, !dbg !2535, !verifier.code !2392
  call {:cexpr "__cil_tmp34"} boogie_si_record_bv64($i55);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2593, 21} true;
  assume {:verifier.code 0} true;
  $i56 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %61 = load i64, i64* %2, align 8, !dbg !2540, !verifier.code !2392
  call {:cexpr "__cil_tmp36"} boogie_si_record_bv64($i56);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2594, 23} true;
  assume {:verifier.code 0} true;
  $i57 := $ne.bv64($i56, $i55);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2594, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i57} true;
  goto $bb18, $bb19;
$bb17:
  assume !(($i49 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb18:
  assume ($i57 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2596, 23} true;
  assume {:verifier.code 0} true;
  $i58 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2596, 33} true;
  assume {:verifier.code 0} true;
  $i59 := $mul.bv32($i58, $i51);
  // WARNING: %65 = mul nsw i32 %64, %.03.lcssa10, !dbg !2549, !verifier.code !2392
  call {:cexpr "__cil_tmp37"} boogie_si_record_bv32($i59);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2597, 9} true;
  assume {:verifier.code 0} true;
  call $i60 := printk.ref.bv32(.str.26, $i59);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2599, 23} true;
  assume {:verifier.code 0} true;
  $i61 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %67 = load i64, i64* %2, align 8, !dbg !2555, !verifier.code !2392
  call {:cexpr "__cil_tmp39"} boogie_si_record_bv64($i61);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2600, 9} true;
  assume {:verifier.code 0} true;
  call $i62 := printk.ref.bv64(.str.38, $i61);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2602, 7} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb19:
  assume !(($i57 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb20;
$bb20:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2606, 11} true;
  assume {:verifier.code 0} true;
  $i63 := $ne.bv32($i52, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2606, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i63} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i63 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2608, 7} true;
  assume {:verifier.code 0} true;
  $i64 := $i52;
  goto $bb23;
$bb22:
  assume !(($i63 == 1bv1));
  assume {:verifier.code 0} true;
  $i64 := $sub.bv32(0bv32, 1bv32);
  goto $bb23;
$bb23:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2611, 7} true;
  assume {:verifier.code 0} true;
  $i65 := $i64;
  goto $bb24;
$bb24:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2624, 1} true;
  assume {:verifier.code 0} true;
  $r := $i65;
  $exn := false;
  return;
$bb25:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2615, 19} true;
  assume {:verifier.code 0} true;
  $i66 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2615, 29} true;
  assume {:verifier.code 0} true;
  $i67 := $mul.bv32($i66, $i10);
  // WARNING: %78 = mul nsw i32 %77, %.03, !dbg !2569, !verifier.code !2392
  call {:cexpr "__cil_tmp40"} boogie_si_record_bv32($i67);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2616, 19} true;
  assume {:verifier.code 0} true;
  $i68 := $sext.bv32.bv64($i67);
  // WARNING: %79 = sext i32 %78 to i64, !dbg !2572, !verifier.code !2392
  call {:cexpr "__cil_tmp41"} boogie_si_record_bv64($i68);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2617, 17} true;
  assume {:verifier.code 0} true;
  $i69 := $add.bv64($i9, $i68);
  // WARNING: %80 = add nsw i64 %.04, %79, !dbg !2575, !verifier.code !2392
  call {:cexpr "addr"} boogie_si_record_bv64($i69);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2618, 11} true;
  assume {:verifier.code 0} true;
  $i70 := $add.bv32($i10, 1bv32);
  // WARNING: %81 = add nsw i32 %.03, 1, !dbg !2576, !verifier.code !2392
  call {:cexpr "k"} boogie_si_record_bv32($i70);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2534, 3} true;
  assume {:verifier.code 0} true;
  $i9, $i10, $i11 := $i69, $i70, $i38;
  goto $bb1;
}
const verify_eraseblock2: ref;
axiom (verify_eraseblock2 == $sub.ref(0, 83364));
procedure  verify_eraseblock2($i0: bv32)
  returns ($r: bv32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: bv64;
  var $i4: bv64;
  var $p5: ref;
  var $i6: bv32;
  var $i7: bv32;
  var $i8: bv64;
  var $i9: bv64;
  var $i10: bv32;
  var $i11: bv32;
  var $i12: bv1;
  var $i13: bv32;
  var $p15: ref;
  var $i16: bv64;
  var $i17: bv64;
  var $p18: ref;
  var $i19: bv32;
  var $i20: bv32;
  var $i21: bv32;
  var $i22: bv64;
  var $i23: bv32;
  var $i24: bv32;
  var $i25: bv64;
  var $i26: bv64;
  var $i27: bv1;
  var $i28: bv32;
  var $i29: bv32;
  var $i30: bv32;
  var $i31: bv64;
  var $p32: ref;
  var $i33: bv32;
  var $i34: bv32;
  var $i35: bv64;
  var $p36: ref;
  var $i37: bv32;
  var $i38: bv32;
  var $i39: bv64;
  var $p40: ref;
  var $p41: ref;
  var $i42: bv32;
  var $i43: bv1;
  var $i45: bv32;
  var $i46: bv32;
  var $i47: bv64;
  var $i48: bv64;
  var $i49: bv1;
  var $i50: bv32;
  var $i44: bv32;
  var $i51: bv64;
  var $i52: bv64;
  var $i53: bv1;
  var $i54: bv32;
  var $i55: bv1;
  var $i58: bv32;
  var $i59: bv32;
  var $i60: bv64;
  var $i61: bv64;
  var $i62: bv1;
  var $i65: bv32;
  var $i63: bv64;
  var $i64: bv32;
  var $i56: bv64;
  var $i57: bv32;
  var $i66: bv64;
  var $i67: bv32;
  var $i68: bv32;
  var $i69: bv1;
  var $i70: bv32;
  var $i72: bv32;
  var $p73: ref;
  var $p74: ref;
  var $i75: bv32;
  var $i76: bv32;
  var $i77: bv64;
  var $i78: bv32;
  var $i79: bv1;
  var $i80: bv32;
  var $i81: bv64;
  var $i82: bv64;
  var $i83: bv1;
  var $i84: bv32;
  var $i85: bv32;
  var $i86: bv32;
  var $i87: bv32;
  var $i88: bv32;
  var $i89: bv64;
  var $i90: bv64;
  var $i91: bv32;
  var $i14: bv32;
  var $i71: bv32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $bv2int.64($zext.bv32.bv64(1bv32))));
  // WARNING: %2 = alloca i64, align 8, !verifier.code !2392
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: call void @llvm.dbg.declare(metadata i64* %2, metadata !3964, metadata !2391), !dbg !3965, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2968, 33} true;
  assume {:verifier.code 0} true;
  $p2 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2968, 17} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.bv64($p2);
  // WARNING: %4 = ptrtoint %struct.mtd_info* %3 to i64, !dbg !2402, !verifier.code !2392
  call {:cexpr "__cil_tmp13"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2969, 29} true;
  assume {:verifier.code 0} true;
  $i4 := $add.bv64($i3, 16bv64);
  // WARNING: %5 = add i64 %4, 16, !dbg !2405, !verifier.code !2392
  call {:cexpr "__cil_tmp14"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2970, 19} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.bv64.ref($i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2970, 17} true;
  assume {:verifier.code 0} true;
  $i6 := $load.bytes.bv32($M.0, $p5);
  // WARNING: %7 = load i32, i32* %6, align 4, !dbg !2409, !verifier.code !2392
  call {:cexpr "__cil_tmp15"} boogie_si_record_bv32($i6);
  // WARNING: call void @llvm.dbg.value(metadata i32 %7, i64 0, metadata !3978, metadata !2391), !dbg !3979, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2972, 29} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.bv32($i0, $i6);
  // WARNING: %8 = mul i32 %0, %7, !dbg !2414, !verifier.code !2392
  call {:cexpr "__cil_tmp17"} boogie_si_record_bv32($i7);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2973, 10} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.bv32.bv64($i7);
  // WARNING: %9 = zext i32 %8 to i64, !dbg !2417, !verifier.code !2392
  call {:cexpr "addr"} boogie_si_record_bv64($i8);
  // WARNING: call void @llvm.dbg.value(metadata i64 %9, i64 0, metadata !3986, metadata !2391), !dbg !3987, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2976, 3} true;
  assume {:verifier.code 0} true;
  $i9, $i10, $i11 := $i8, 1bv32, 0bv32;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2976, 13} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2978, 11} true;
  assume {:verifier.code 0} true;
  $i12 := $slt.bv32($i10, 33bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2978, 9} true;
  assume {:verifier.code 0} true;
  $i13 := $i11;
  assume {:branchcond $i12} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i12 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2980, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i12 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2981, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $i13;
  goto $bb6;
$bb5:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2984, 35} true;
  assume {:verifier.code 0} true;
  $p15 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2984, 19} true;
  assume {:verifier.code 0} true;
  $i16 := $p2i.ref.bv64($p15);
  // WARNING: %17 = ptrtoint %struct.mtd_info* %16 to i64, !dbg !2436, !verifier.code !2392
  call {:cexpr "__cil_tmp18"} boogie_si_record_bv64($i16);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2985, 31} true;
  assume {:verifier.code 0} true;
  $i17 := $add.bv64($i16, 16bv64);
  // WARNING: %18 = add i64 %17, 16, !dbg !2439, !verifier.code !2392
  call {:cexpr "__cil_tmp19"} boogie_si_record_bv64($i17);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2986, 21} true;
  assume {:verifier.code 0} true;
  $p18 := $i2p.bv64.ref($i17);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2986, 19} true;
  assume {:verifier.code 0} true;
  $i19 := $load.bytes.bv32($M.0, $p18);
  // WARNING: %20 = load i32, i32* %19, align 4, !dbg !2443, !verifier.code !2392
  call {:cexpr "__cil_tmp20"} boogie_si_record_bv32($i19);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2987, 25} true;
  assume {:verifier.code 0} true;
  $i20 := $add.bv32($i0, 1bv32);
  // WARNING: %21 = add nsw i32 %0, 1, !dbg !2446, !verifier.code !2392
  call {:cexpr "__cil_tmp21"} boogie_si_record_bv32($i20);
  // WARNING: call void @llvm.dbg.value(metadata i32 %21, i64 0, metadata !4015, metadata !2391), !dbg !4016, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2989, 31} true;
  assume {:verifier.code 0} true;
  $i21 := $mul.bv32($i20, $i19);
  // WARNING: %22 = mul i32 %21, %20, !dbg !2451, !verifier.code !2392
  call {:cexpr "__cil_tmp23"} boogie_si_record_bv32($i21);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2990, 19} true;
  assume {:verifier.code 0} true;
  $i22 := $zext.bv32.bv64($i21);
  // WARNING: %23 = zext i32 %22 to i64, !dbg !2454, !verifier.code !2392
  call {:cexpr "__cil_tmp24"} boogie_si_record_bv64($i22);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2991, 19} true;
  assume {:verifier.code 0} true;
  $i23 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2991, 29} true;
  assume {:verifier.code 0} true;
  $i24 := $mul.bv32($i23, $i10);
  // WARNING: %25 = mul nsw i32 %24, %.03, !dbg !2458, !verifier.code !2392
  call {:cexpr "__cil_tmp25"} boogie_si_record_bv32($i24);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2992, 19} true;
  assume {:verifier.code 0} true;
  $i25 := $sext.bv32.bv64($i24);
  // WARNING: %26 = sext i32 %25 to i64, !dbg !2461, !verifier.code !2392
  call {:cexpr "__cil_tmp26"} boogie_si_record_bv64($i25);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2993, 24} true;
  assume {:verifier.code 0} true;
  $i26 := $add.bv64($i9, $i25);
  // WARNING: %27 = add nsw i64 %.04, %26, !dbg !2464, !verifier.code !2392
  call {:cexpr "__cil_tmp27"} boogie_si_record_bv64($i26);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2994, 21} true;
  assume {:verifier.code 0} true;
  $i27 := $sgt.bv64($i26, $i22);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2994, 9} true;
  assume {:verifier.code 0} true;
  $i28 := $i11;
  assume {:branchcond $i27} true;
  goto $bb7, $bb8;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3095, 3} true;
  assume {:verifier.code 0} true;
  $i71 := $i14;
  goto $bb28;
$bb7:
  assume ($i27 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2995, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $i28;
  goto $bb6;
$bb8:
  assume !(($i27 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3001, 19} true;
  assume {:verifier.code 0} true;
  $i29 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3001, 29} true;
  assume {:verifier.code 0} true;
  $i30 := $mul.bv32($i29, $i10);
  // WARNING: %33 = mul nsw i32 %32, %.03, !dbg !2474, !verifier.code !2392
  call {:cexpr "__cil_tmp28"} boogie_si_record_bv32($i30);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3002, 19} true;
  assume {:verifier.code 0} true;
  $i31 := $sext.bv32.bv64($i30);
  // WARNING: %34 = sext i32 %33 to i64, !dbg !2477, !verifier.code !2392
  call {:cexpr "__cil_tmp29"} boogie_si_record_bv64($i31);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3003, 21} true;
  assume {:verifier.code 0} true;
  $p32 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3003, 5} true;
  assume {:verifier.code 0} true;
  call set_random_data($p32, $i31);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3004, 19} true;
  assume {:verifier.code 0} true;
  $i33 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3004, 29} true;
  assume {:verifier.code 0} true;
  $i34 := $mul.bv32($i33, $i10);
  // WARNING: %37 = mul nsw i32 %36, %.03, !dbg !2483, !verifier.code !2392
  call {:cexpr "__cil_tmp30"} boogie_si_record_bv32($i34);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3005, 19} true;
  assume {:verifier.code 0} true;
  $i35 := $sext.bv32.bv64($i34);
  // WARNING: %38 = sext i32 %37 to i64, !dbg !2486, !verifier.code !2392
  call {:cexpr "__cil_tmp31"} boogie_si_record_bv64($i35);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3006, 16} true;
  assume {:verifier.code 0} true;
  $p36 := $M.7;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3006, 5} true;
  assume {:verifier.code 0} true;
  call clear_data($p36, $i35);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3007, 19} true;
  assume {:verifier.code 0} true;
  $i37 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3007, 29} true;
  assume {:verifier.code 0} true;
  $i38 := $mul.bv32($i37, $i10);
  // WARNING: %41 = mul nsw i32 %40, %.03, !dbg !2492, !verifier.code !2392
  call {:cexpr "__cil_tmp32"} boogie_si_record_bv32($i38);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3008, 19} true;
  assume {:verifier.code 0} true;
  $i39 := $sext.bv32.bv64($i38);
  // WARNING: %42 = sext i32 %41 to i64, !dbg !2495, !verifier.code !2392
  call {:cexpr "__cil_tmp33"} boogie_si_record_bv64($i39);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3009, 20} true;
  assume {:verifier.code 0} true;
  $p40 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3009, 52} true;
  assume {:verifier.code 0} true;
  $p41 := $M.7;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3009, 11} true;
  assume {:verifier.code 0} true;
  call $i42 := mtd_read($p40, $i9, $i39, $p1, $p41);
  // WARNING: %45 = call i32 @mtd_read(%struct.mtd_info* %43, i64 %.04, i64 %42, i64* %2, i8* %44), !dbg !2500, !verifier.code !2392
  call {:cexpr "err"} boogie_si_record_bv32($i42);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3011, 9} true;
  assume {:verifier.code 0} true;
  $i43 := $ne.bv32($i42, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3011, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i43} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i43 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3013, 5} true;
  assume {:verifier.code 0} true;
  $i44 := 1bv32;
  goto $bb12;
$bb11:
  assume !(($i43 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3015, 21} true;
  assume {:verifier.code 0} true;
  $i45 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3015, 31} true;
  assume {:verifier.code 0} true;
  $i46 := $mul.bv32($i45, $i10);
  // WARNING: %50 = mul nsw i32 %49, %.03, !dbg !2511, !verifier.code !2392
  call {:cexpr "__cil_tmp34"} boogie_si_record_bv32($i46);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3016, 21} true;
  assume {:verifier.code 0} true;
  $i47 := $sext.bv32.bv64($i46);
  // WARNING: %51 = sext i32 %50 to i64, !dbg !2514, !verifier.code !2392
  call {:cexpr "__cil_tmp35"} boogie_si_record_bv64($i47);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3018, 21} true;
  assume {:verifier.code 0} true;
  $i48 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %52 = load i64, i64* %2, align 8, !dbg !2519, !verifier.code !2392
  call {:cexpr "__cil_tmp37"} boogie_si_record_bv64($i48);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3019, 23} true;
  assume {:verifier.code 0} true;
  $i49 := $ne.bv64($i48, $i47);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3019, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb13, $bb14;
$bb12:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3027, 19} true;
  assume {:verifier.code 0} true;
  $i51 := $sext.bv32.bv64($i44);
  // WARNING: %58 = sext i32 %.17 to i64, !dbg !2527, !verifier.code !2392
  call {:cexpr "__cil_tmp38"} boogie_si_record_bv64($i51);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3028, 16} true;
  assume {:verifier.code 0} true;
  call $i52 := ldv__builtin_expect($i51, 0bv64);
  // WARNING: %59 = call i64 @ldv__builtin_expect(i64 %58, i64 0), !dbg !2531, !verifier.code !2392
  call {:cexpr "tmp___10"} boogie_si_record_bv64($i52);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3030, 9} true;
  assume {:verifier.code 0} true;
  $i53 := $ne.bv64($i52, 0bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3030, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i53} true;
  goto $bb16, $bb17;
$bb13:
  assume ($i49 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3021, 7} true;
  assume {:verifier.code 0} true;
  $i50 := 1bv32;
  goto $bb15;
$bb14:
  assume !(($i49 == 1bv1));
  assume {:verifier.code 0} true;
  $i50 := 0bv32;
  goto $bb15;
$bb15:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i44 := $i50;
  goto $bb12;
$bb16:
  assume ($i53 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3032, 17} true;
  assume {:verifier.code 0} true;
  call $i54 := mtd_is_bitflip($i42);
  // WARNING: %62 = call i32 @mtd_is_bitflip(i32 %45), !dbg !2537, !verifier.code !2392
  call {:cexpr "tmp___8"} boogie_si_record_bv32($i54);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3034, 11} true;
  assume {:verifier.code 0} true;
  $i55 := $ne.bv32($i54, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3034, 11} true;
  assume {:verifier.code 0} true;
  $i56, $i57 := $i9, $i42;
  assume {:branchcond $i55} true;
  goto $bb18, $bb19;
$bb17:
  assume !(($i53 == 1bv1));
  assume {:verifier.code 0} true;
  $i72 := $i42;
  goto $bb29;
$bb18:
  assume ($i55 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3036, 23} true;
  assume {:verifier.code 0} true;
  $i58 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3036, 33} true;
  assume {:verifier.code 0} true;
  $i59 := $mul.bv32($i58, $i10);
  // WARNING: %66 = mul nsw i32 %65, %.03, !dbg !2548, !verifier.code !2392
  call {:cexpr "__cil_tmp39"} boogie_si_record_bv32($i59);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3037, 23} true;
  assume {:verifier.code 0} true;
  $i60 := $sext.bv32.bv64($i59);
  // WARNING: %67 = sext i32 %66 to i64, !dbg !2551, !verifier.code !2392
  call {:cexpr "__cil_tmp40"} boogie_si_record_bv64($i60);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3039, 23} true;
  assume {:verifier.code 0} true;
  $i61 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %68 = load i64, i64* %2, align 8, !dbg !2556, !verifier.code !2392
  call {:cexpr "__cil_tmp42"} boogie_si_record_bv64($i61);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3040, 25} true;
  assume {:verifier.code 0} true;
  $i62 := $eq.bv64($i61, $i60);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3040, 13} true;
  assume {:verifier.code 0} true;
  $i63, $i64 := $i9, $i42;
  assume {:branchcond $i62} true;
  goto $bb20, $bb21;
$bb19:
  assume !(($i55 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3049, 14} true;
  assume {:verifier.code 0} true;
  $i66, $i67 := $i56, $i57;
  goto $bb23;
$bb20:
  assume ($i62 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3042, 11} true;
  assume {:verifier.code 0} true;
  call $i65 := printk.ref.bv64(.str.28, $i9);
  // WARNING: %71 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.28, i32 0, i32 0), i64 %.04), !dbg !2562, !verifier.code !2392
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3045, 9} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb21:
  assume !(($i62 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3046, 11} true;
  assume {:verifier.code 0} true;
  $i66, $i67 := $i63, $i64;
  goto $bb23;
$bb22:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3049, 7} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb23:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3052, 9} true;
  assume {:verifier.code 0} true;
  call $i68 := printk.ref.bv64(.str.29, $i66);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3054, 13} true;
  assume {:verifier.code 0} true;
  $i69 := $ne.bv32($i67, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3054, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i69} true;
  goto $bb25, $bb26;
$bb24:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3061, 5} true;
  assume {:verifier.code 0} true;
  $i72 := 0bv32;
  goto $bb29;
$bb25:
  assume ($i69 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3056, 9} true;
  assume {:verifier.code 0} true;
  $i70 := $i67;
  goto $bb27;
$bb26:
  assume !(($i69 == 1bv1));
  assume {:verifier.code 0} true;
  $i70 := $sub.bv32(0bv32, 1bv32);
  goto $bb27;
$bb27:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3059, 9} true;
  assume {:verifier.code 0} true;
  $i71 := $i70;
  goto $bb28;
$bb28:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3097, 1} true;
  assume {:verifier.code 0} true;
  $r := $i71;
  $exn := false;
  return;
$bb29:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3065, 35} true;
  assume {:verifier.code 0} true;
  $p73 := $M.7;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3066, 35} true;
  assume {:verifier.code 0} true;
  $p74 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3067, 19} true;
  assume {:verifier.code 0} true;
  $i75 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3067, 29} true;
  assume {:verifier.code 0} true;
  $i76 := $mul.bv32($i75, $i10);
  // WARNING: %88 = mul nsw i32 %87, %.03, !dbg !2591, !verifier.code !2392
  call {:cexpr "__cil_tmp45"} boogie_si_record_bv32($i76);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3068, 19} true;
  assume {:verifier.code 0} true;
  $i77 := $sext.bv32.bv64($i76);
  // WARNING: %89 = sext i32 %88 to i64, !dbg !2594, !verifier.code !2392
  call {:cexpr "__cil_tmp46"} boogie_si_record_bv64($i77);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3069, 16} true;
  assume {:verifier.code 0} true;
  call $i78 := memcmp($p73, $p74, $i77);
  // WARNING: %90 = call i32 @memcmp(i8* %85, i8* %86, i64 %89), !dbg !2597, !verifier.code !2392
  call {:cexpr "tmp___11"} boogie_si_record_bv32($i78);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3071, 9} true;
  assume {:verifier.code 0} true;
  $i79 := $ne.bv32($i78, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3071, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i79} true;
  goto $bb30, $bb31;
$bb30:
  assume ($i79 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3073, 5} true;
  assume {:verifier.code 0} true;
  $i80 := 1bv32;
  goto $bb32;
$bb31:
  assume !(($i79 == 1bv1));
  assume {:verifier.code 0} true;
  $i80 := 0bv32;
  goto $bb32;
$bb32:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3077, 19} true;
  assume {:verifier.code 0} true;
  $i81 := $sext.bv32.bv64($i80);
  // WARNING: %95 = sext i32 %.01 to i64, !dbg !2607, !verifier.code !2392
  call {:cexpr "__cil_tmp47"} boogie_si_record_bv64($i81);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3078, 16} true;
  assume {:verifier.code 0} true;
  call $i82 := ldv__builtin_expect($i81, 0bv64);
  // WARNING: %96 = call i64 @ldv__builtin_expect(i64 %95, i64 0), !dbg !2611, !verifier.code !2392
  call {:cexpr "tmp___13"} boogie_si_record_bv64($i82);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3080, 9} true;
  assume {:verifier.code 0} true;
  $i83 := $ne.bv64($i82, 0bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3080, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i83} true;
  goto $bb33, $bb34;
$bb33:
  assume ($i83 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3082, 7} true;
  assume {:verifier.code 0} true;
  call $i84 := printk.ref.bv64(.str.30, $i9);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3083, 16} true;
  assume {:verifier.code 0} true;
  $i85 := $M.9;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3083, 23} true;
  assume {:verifier.code 0} true;
  $i86 := $add.bv32($i85, 1bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3083, 14} true;
  assume {:verifier.code 0} true;
  $M.9 := $i86;
  call {:cexpr "errcnt"} boogie_si_record_bv32($i86);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3085, 5} true;
  assume {:verifier.code 0} true;
  goto $bb35;
$bb34:
  assume !(($i83 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb35;
$bb35:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3088, 19} true;
  assume {:verifier.code 0} true;
  $i87 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3088, 29} true;
  assume {:verifier.code 0} true;
  $i88 := $mul.bv32($i87, $i10);
  // WARNING: %105 = mul nsw i32 %104, %.03, !dbg !2625, !verifier.code !2392
  call {:cexpr "__cil_tmp48"} boogie_si_record_bv32($i88);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3089, 19} true;
  assume {:verifier.code 0} true;
  $i89 := $sext.bv32.bv64($i88);
  // WARNING: %106 = sext i32 %105 to i64, !dbg !2628, !verifier.code !2392
  call {:cexpr "__cil_tmp49"} boogie_si_record_bv64($i89);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3090, 17} true;
  assume {:verifier.code 0} true;
  $i90 := $add.bv64($i9, $i89);
  // WARNING: %107 = add nsw i64 %.04, %106, !dbg !2631, !verifier.code !2392
  call {:cexpr "addr"} boogie_si_record_bv64($i90);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3091, 11} true;
  assume {:verifier.code 0} true;
  $i91 := $add.bv32($i10, 1bv32);
  // WARNING: %108 = add nsw i32 %.03, 1, !dbg !2632, !verifier.code !2392
  call {:cexpr "k"} boogie_si_record_bv32($i91);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2976, 3} true;
  assume {:verifier.code 0} true;
  $i9, $i10, $i11 := $i90, $i91, $i72;
  goto $bb1;
}
const kfree: ref;
axiom (kfree == $sub.ref(0, 84396));
procedure  kfree($p0: ref);
const put_mtd_device: ref;
axiom (put_mtd_device == $sub.ref(0, 85428));
procedure  put_mtd_device($p0: ref);
const set_random_data: ref;
axiom (set_random_data == $sub.ref(0, 86460));
procedure  set_random_data($p0: ref, $i1: bv64)
{
  var $i2: bv64;
  var $i3: bv1;
  var $i4: bv32;
  var $p5: ref;
  var $i6: bv8;
  var $i7: bv64;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %0, i64 0, metadata !4209, metadata !2391), !dbg !4210, !verifier.code !2393
  // WARNING: call void @llvm.dbg.value(metadata i64 %1, i64 0, metadata !4211, metadata !2391), !dbg !4212, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2170, 3} true;
  assume {:verifier.code 0} true;
  $i2 := 0bv64;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2170, 13} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2172, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $ult.bv64($i2, $i1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2172, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2174, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i3 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2175, 7} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2178, 15} true;
  assume {:verifier.code 0} true;
  call $i4 := simple_rand();
  // WARNING: %9 = call i32 @simple_rand(), !dbg !2413, !verifier.code !2395
  call {:cexpr "tmp___7"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2179, 22} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, $mul.ref($bv2int.64($i2), 1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2180, 19} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.bv32.bv8($i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2180, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv8($M.0, $p5, $i6);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2181, 11} true;
  assume {:verifier.code 0} true;
  $i7 := $add.bv64($i2, 1bv64);
  // WARNING: %12 = add i64 %.0, 1, !dbg !2422, !verifier.code !2395
  call {:cexpr "i"} boogie_si_record_bv64($i7);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2170, 3} true;
  assume {:verifier.code 0} true;
  $i2 := $i7;
  goto $bb1;
$bb6:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2186, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const clear_data: ref;
axiom (clear_data == $sub.ref(0, 87492));
procedure  clear_data($p0: ref, $i1: bv64)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %0, i64 0, metadata !4243, metadata !2391), !dbg !4244, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2196, 3} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.bv8($M.0, $p0, 0bv8, $bv2int.64($i1), $bv2int.64($zext.bv32.bv64(1bv32)), (0bv1 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2198, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const mtd_read: ref;
axiom (mtd_read == $sub.ref(0, 88524));
procedure  mtd_read($p0: ref, $i1: bv64, $i2: bv64, $p3: ref, $p4: ref)
  returns ($r: bv32);
const mtd_is_bitflip: ref;
axiom (mtd_is_bitflip == $sub.ref(0, 89556));
procedure  mtd_is_bitflip($i0: bv32)
  returns ($r: bv32)
{
  var $i1: bv1;
  var $i2: bv32;
$bb0:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2072, 15} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.bv32($i0, $sub.bv32(0bv32, 117bv32));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2072, 15} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.bv1.bv32($i1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2072, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const memcmp: ref;
axiom (memcmp == $sub.ref(0, 90588));
procedure  memcmp($p0: ref, $p1: ref, $i2: bv64)
  returns ($r: bv32);
const llvm.memset.p0i8.i64: ref;
axiom (llvm.memset.p0i8.i64 == $sub.ref(0, 91620));
procedure  llvm.memset.p0i8.i64($p0: ref, $i1: bv8, $i2: bv64, $i3: bv32, $i4: bv1);
const simple_rand: ref;
axiom (simple_rand == $sub.ref(0, 92652));
procedure  simple_rand()
  returns ($r: bv32)
{
  var $i0: bv64;
  var $i1: bv64;
  var $i2: bv64;
  var $i3: bv64;
  var $i4: bv64;
  var $i5: bv64;
  var $i6: bv32;
$bb0:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2144, 16} true;
  assume {:verifier.code 0} true;
  $i0 := $M.10;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2144, 21} true;
  assume {:verifier.code 0} true;
  $i1 := $mul.bv64($i0, 1103515245bv64);
  // WARNING: %2 = mul i64 %1, 1103515245, !dbg !2395, !verifier.code !2394
  call {:cexpr "__cil_tmp1"} boogie_si_record_bv64($i1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2145, 21} true;
  assume {:verifier.code 0} true;
  $i2 := $add.bv64($i1, 12345bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2145, 8} true;
  assume {:verifier.code 0} true;
  $M.10 := $i2;
  call {:cexpr "next"} boogie_si_record_bv64($i2);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2147, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $M.10;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2147, 21} true;
  assume {:verifier.code 0} true;
  $i4 := $udiv.bv64($i3, 65536bv64);
  // WARNING: %5 = udiv i64 %4, 65536, !dbg !2403, !verifier.code !2394
  call {:cexpr "__cil_tmp2"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2148, 27} true;
  assume {:verifier.code 0} true;
  $i5 := $urem.bv64($i4, 32768bv64);
  // WARNING: %6 = urem i64 %5, 32768, !dbg !2406, !verifier.code !2394
  call {:cexpr "__cil_tmp3"} boogie_si_record_bv64($i5);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2149, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.bv64.bv32($i5);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2149, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const mtd_write: ref;
axiom (mtd_write == $sub.ref(0, 93684));
procedure  mtd_write($p0: ref, $i1: bv64, $i2: bv64, $p3: ref, $p4: ref)
  returns ($r: bv32);
const verify_eraseblock_ff: ref;
axiom (verify_eraseblock_ff == $sub.ref(0, 94716));
procedure  verify_eraseblock_ff($i0: bv32)
  returns ($r: bv32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: bv64;
  var $i4: bv64;
  var $p5: ref;
  var $i6: bv32;
  var $i7: bv32;
  var $i8: bv64;
  var $p9: ref;
  var $i10: bv32;
  var $i11: bv64;
  var $i12: bv64;
  var $i13: bv32;
  var $i14: bv32;
  var $i15: bv32;
  var $p16: ref;
  var $i17: bv64;
  var $i18: bv64;
  var $p19: ref;
  var $i20: bv32;
  var $i21: bv32;
  var $i22: bv1;
  var $i23: bv32;
  var $i24: bv32;
  var $i25: bv64;
  var $p26: ref;
  var $i27: bv32;
  var $i28: bv64;
  var $p29: ref;
  var $p30: ref;
  var $i31: bv32;
  var $i32: bv1;
  var $i34: bv32;
  var $i35: bv64;
  var $i36: bv64;
  var $i37: bv1;
  var $i38: bv32;
  var $i33: bv32;
  var $i39: bv64;
  var $i40: bv64;
  var $i41: bv1;
  var $i42: bv32;
  var $i43: bv1;
  var $i46: bv32;
  var $i47: bv64;
  var $i48: bv64;
  var $i49: bv1;
  var $i52: bv32;
  var $i50: bv64;
  var $i51: bv32;
  var $i44: bv64;
  var $i45: bv32;
  var $i53: bv64;
  var $i54: bv32;
  var $i55: bv32;
  var $i56: bv1;
  var $i57: bv32;
  var $i59: bv32;
  var $p60: ref;
  var $p61: ref;
  var $i62: bv32;
  var $i63: bv64;
  var $i64: bv32;
  var $i65: bv1;
  var $i66: bv32;
  var $i67: bv64;
  var $i68: bv64;
  var $i69: bv1;
  var $i70: bv32;
  var $i71: bv32;
  var $i72: bv32;
  var $i73: bv32;
  var $i74: bv64;
  var $i75: bv64;
  var $i76: bv32;
  var $i58: bv32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $bv2int.64($zext.bv32.bv64(1bv32))));
  // WARNING: %2 = alloca i64, align 8, !verifier.code !2392
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: call void @llvm.dbg.declare(metadata i64* %2, metadata !4282, metadata !2391), !dbg !4283, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3140, 33} true;
  assume {:verifier.code 0} true;
  $p2 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3140, 17} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.bv64($p2);
  // WARNING: %4 = ptrtoint %struct.mtd_info* %3 to i64, !dbg !2403, !verifier.code !2392
  call {:cexpr "__cil_tmp13"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3141, 29} true;
  assume {:verifier.code 0} true;
  $i4 := $add.bv64($i3, 16bv64);
  // WARNING: %5 = add i64 %4, 16, !dbg !2406, !verifier.code !2392
  call {:cexpr "__cil_tmp14"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3142, 19} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.bv64.ref($i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3142, 17} true;
  assume {:verifier.code 0} true;
  $i6 := $load.bytes.bv32($M.0, $p5);
  // WARNING: %7 = load i32, i32* %6, align 4, !dbg !2410, !verifier.code !2392
  call {:cexpr "__cil_tmp15"} boogie_si_record_bv32($i6);
  // WARNING: call void @llvm.dbg.value(metadata i32 %7, i64 0, metadata !4297, metadata !2391), !dbg !4298, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3144, 29} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.bv32($i0, $i6);
  // WARNING: %8 = mul i32 %0, %7, !dbg !2415, !verifier.code !2392
  call {:cexpr "__cil_tmp17"} boogie_si_record_bv32($i7);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3145, 10} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.bv32.bv64($i7);
  // WARNING: %9 = zext i32 %8 to i64, !dbg !2418, !verifier.code !2392
  call {:cexpr "addr"} boogie_si_record_bv64($i8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3146, 25} true;
  assume {:verifier.code 0} true;
  $p9 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3147, 26} true;
  assume {:verifier.code 0} true;
  $i10 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3147, 17} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.bv32.bv64($i10);
  // WARNING: %12 = sext i32 %11 to i64, !dbg !2425, !verifier.code !2392
  call {:cexpr "__cil_tmp19"} boogie_si_record_bv64($i11);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3148, 3} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.bv8($M.0, $p9, $sub.bv8(0bv8, 1bv8), $bv2int.64($i11), $bv2int.64($zext.bv32.bv64(1bv32)), (0bv1 == 1bv1));
  // WARNING: call void @llvm.memset.p0i8.i64(i8* %10, i8 -1, i64 %12, i32 1, i1 false), !dbg !2428, !verifier.code !2392
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3152, 3} true;
  assume {:verifier.code 0} true;
  $i12, $i13, $i14 := $i8, 0bv32, 0bv32;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3152, 13} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3155, 30} true;
  assume {:verifier.code 0} true;
  $i15 := $M.2;
  // WARNING: %15 = load i32, i32* @subpgsize, align 4, !dbg !2435, !verifier.code !2392
  call {:cexpr "__cil_tmp20"} boogie_si_record_bv32($i15);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3156, 35} true;
  assume {:verifier.code 0} true;
  $p16 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3156, 19} true;
  assume {:verifier.code 0} true;
  $i17 := $p2i.ref.bv64($p16);
  // WARNING: %17 = ptrtoint %struct.mtd_info* %16 to i64, !dbg !2441, !verifier.code !2392
  call {:cexpr "__cil_tmp21"} boogie_si_record_bv64($i17);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3157, 31} true;
  assume {:verifier.code 0} true;
  $i18 := $add.bv64($i17, 16bv64);
  // WARNING: %18 = add i64 %17, 16, !dbg !2444, !verifier.code !2392
  call {:cexpr "__cil_tmp22"} boogie_si_record_bv64($i18);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3158, 21} true;
  assume {:verifier.code 0} true;
  $p19 := $i2p.bv64.ref($i18);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3158, 19} true;
  assume {:verifier.code 0} true;
  $i20 := $load.bytes.bv32($M.0, $p19);
  // WARNING: %20 = load i32, i32* %19, align 4, !dbg !2448, !verifier.code !2392
  call {:cexpr "__cil_tmp23"} boogie_si_record_bv32($i20);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3159, 31} true;
  assume {:verifier.code 0} true;
  $i21 := $udiv.bv32($i20, $i15);
  // WARNING: %21 = udiv i32 %20, %15, !dbg !2451, !verifier.code !2392
  call {:cexpr "__cil_tmp24"} boogie_si_record_bv32($i21);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3160, 11} true;
  assume {:verifier.code 0} true;
  $i22 := $ult.bv32($i14, $i21);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3160, 9} true;
  assume {:verifier.code 0} true;
  $i23 := $i13;
  assume {:branchcond $i22} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i22 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3162, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i22 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3163, 7} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3167, 28} true;
  assume {:verifier.code 0} true;
  $i24 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3167, 19} true;
  assume {:verifier.code 0} true;
  $i25 := $sext.bv32.bv64($i24);
  // WARNING: %27 = sext i32 %26 to i64, !dbg !2463, !verifier.code !2392
  call {:cexpr "__cil_tmp25"} boogie_si_record_bv64($i25);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3168, 16} true;
  assume {:verifier.code 0} true;
  $p26 := $M.7;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3168, 5} true;
  assume {:verifier.code 0} true;
  call clear_data($p26, $i25);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3169, 28} true;
  assume {:verifier.code 0} true;
  $i27 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3169, 19} true;
  assume {:verifier.code 0} true;
  $i28 := $sext.bv32.bv64($i27);
  // WARNING: %30 = sext i32 %29 to i64, !dbg !2469, !verifier.code !2392
  call {:cexpr "__cil_tmp26"} boogie_si_record_bv64($i28);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3170, 20} true;
  assume {:verifier.code 0} true;
  $p29 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3170, 52} true;
  assume {:verifier.code 0} true;
  $p30 := $M.7;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3170, 11} true;
  assume {:verifier.code 0} true;
  call $i31 := mtd_read($p29, $i12, $i28, $p1, $p30);
  // WARNING: %33 = call i32 @mtd_read(%struct.mtd_info* %31, i64 %.04, i64 %30, i64* %2, i8* %32), !dbg !2474, !verifier.code !2392
  call {:cexpr "err"} boogie_si_record_bv32($i31);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3172, 9} true;
  assume {:verifier.code 0} true;
  $i32 := $ne.bv32($i31, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3172, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb7, $bb8;
$bb6:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3252, 3} true;
  assume {:verifier.code 0} true;
  $i58 := $i23;
  goto $bb25;
$bb7:
  assume ($i32 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3174, 5} true;
  assume {:verifier.code 0} true;
  $i33 := 1bv32;
  goto $bb9;
$bb8:
  assume !(($i32 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3176, 30} true;
  assume {:verifier.code 0} true;
  $i34 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3176, 21} true;
  assume {:verifier.code 0} true;
  $i35 := $sext.bv32.bv64($i34);
  // WARNING: %38 = sext i32 %37 to i64, !dbg !2485, !verifier.code !2392
  call {:cexpr "__cil_tmp27"} boogie_si_record_bv64($i35);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3178, 21} true;
  assume {:verifier.code 0} true;
  $i36 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %39 = load i64, i64* %2, align 8, !dbg !2490, !verifier.code !2392
  call {:cexpr "__cil_tmp29"} boogie_si_record_bv64($i36);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3179, 23} true;
  assume {:verifier.code 0} true;
  $i37 := $ne.bv64($i36, $i35);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3179, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb10, $bb11;
$bb9:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3187, 19} true;
  assume {:verifier.code 0} true;
  $i39 := $sext.bv32.bv64($i33);
  // WARNING: %45 = sext i32 %.17 to i64, !dbg !2498, !verifier.code !2392
  call {:cexpr "__cil_tmp30"} boogie_si_record_bv64($i39);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3188, 16} true;
  assume {:verifier.code 0} true;
  call $i40 := ldv__builtin_expect($i39, 0bv64);
  // WARNING: %46 = call i64 @ldv__builtin_expect(i64 %45, i64 0), !dbg !2502, !verifier.code !2392
  call {:cexpr "tmp___10"} boogie_si_record_bv64($i40);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3190, 9} true;
  assume {:verifier.code 0} true;
  $i41 := $ne.bv64($i40, 0bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3190, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb13, $bb14;
$bb10:
  assume ($i37 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3181, 7} true;
  assume {:verifier.code 0} true;
  $i38 := 1bv32;
  goto $bb12;
$bb11:
  assume !(($i37 == 1bv1));
  assume {:verifier.code 0} true;
  $i38 := 0bv32;
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i33 := $i38;
  goto $bb9;
$bb13:
  assume ($i41 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3192, 17} true;
  assume {:verifier.code 0} true;
  call $i42 := mtd_is_bitflip($i31);
  // WARNING: %49 = call i32 @mtd_is_bitflip(i32 %33), !dbg !2508, !verifier.code !2392
  call {:cexpr "tmp___8"} boogie_si_record_bv32($i42);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3194, 11} true;
  assume {:verifier.code 0} true;
  $i43 := $ne.bv32($i42, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3194, 11} true;
  assume {:verifier.code 0} true;
  $i44, $i45 := $i12, $i31;
  assume {:branchcond $i43} true;
  goto $bb15, $bb16;
$bb14:
  assume !(($i41 == 1bv1));
  assume {:verifier.code 0} true;
  $i59 := $i31;
  goto $bb26;
$bb15:
  assume ($i43 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3196, 32} true;
  assume {:verifier.code 0} true;
  $i46 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3196, 23} true;
  assume {:verifier.code 0} true;
  $i47 := $sext.bv32.bv64($i46);
  // WARNING: %53 = sext i32 %52 to i64, !dbg !2519, !verifier.code !2392
  call {:cexpr "__cil_tmp31"} boogie_si_record_bv64($i47);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3198, 23} true;
  assume {:verifier.code 0} true;
  $i48 := $load.bytes.bv64($M.0, $p1);
  // WARNING: %54 = load i64, i64* %2, align 8, !dbg !2524, !verifier.code !2392
  call {:cexpr "__cil_tmp33"} boogie_si_record_bv64($i48);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3199, 25} true;
  assume {:verifier.code 0} true;
  $i49 := $eq.bv64($i48, $i47);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3199, 13} true;
  assume {:verifier.code 0} true;
  $i50, $i51 := $i12, $i31;
  assume {:branchcond $i49} true;
  goto $bb17, $bb18;
$bb16:
  assume !(($i43 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3208, 14} true;
  assume {:verifier.code 0} true;
  $i53, $i54 := $i44, $i45;
  goto $bb20;
$bb17:
  assume ($i49 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3201, 11} true;
  assume {:verifier.code 0} true;
  call $i52 := printk.ref.bv64(.str.28, $i12);
  // WARNING: %57 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.28, i32 0, i32 0), i64 %.04), !dbg !2530, !verifier.code !2392
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3204, 9} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb18:
  assume !(($i49 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3205, 11} true;
  assume {:verifier.code 0} true;
  $i53, $i54 := $i50, $i51;
  goto $bb20;
$bb19:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3208, 7} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3211, 9} true;
  assume {:verifier.code 0} true;
  call $i55 := printk.ref.bv64(.str.29, $i53);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3213, 13} true;
  assume {:verifier.code 0} true;
  $i56 := $ne.bv32($i54, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3213, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb22, $bb23;
$bb21:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3220, 5} true;
  assume {:verifier.code 0} true;
  $i59 := 0bv32;
  goto $bb26;
$bb22:
  assume ($i56 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3215, 9} true;
  assume {:verifier.code 0} true;
  $i57 := $i54;
  goto $bb24;
$bb23:
  assume !(($i56 == 1bv1));
  assume {:verifier.code 0} true;
  $i57 := $sub.bv32(0bv32, 1bv32);
  goto $bb24;
$bb24:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3218, 9} true;
  assume {:verifier.code 0} true;
  $i58 := $i57;
  goto $bb25;
$bb25:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3254, 1} true;
  assume {:verifier.code 0} true;
  $r := $i58;
  $exn := false;
  return;
$bb26:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3224, 35} true;
  assume {:verifier.code 0} true;
  $p60 := $M.7;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3225, 35} true;
  assume {:verifier.code 0} true;
  $p61 := $M.6;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3226, 35} true;
  assume {:verifier.code 0} true;
  $i62 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3226, 19} true;
  assume {:verifier.code 0} true;
  $i63 := $sext.bv32.bv64($i62);
  // WARNING: %74 = sext i32 %73 to i64, !dbg !2559, !verifier.code !2392
  call {:cexpr "__cil_tmp36"} boogie_si_record_bv64($i63);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3227, 16} true;
  assume {:verifier.code 0} true;
  call $i64 := memcmp($p60, $p61, $i63);
  // WARNING: %75 = call i32 @memcmp(i8* %71, i8* %72, i64 %74), !dbg !2562, !verifier.code !2392
  call {:cexpr "tmp___11"} boogie_si_record_bv32($i64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3229, 9} true;
  assume {:verifier.code 0} true;
  $i65 := $ne.bv32($i64, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3229, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i65} true;
  goto $bb27, $bb28;
$bb27:
  assume ($i65 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3231, 5} true;
  assume {:verifier.code 0} true;
  $i66 := 1bv32;
  goto $bb29;
$bb28:
  assume !(($i65 == 1bv1));
  assume {:verifier.code 0} true;
  $i66 := 0bv32;
  goto $bb29;
$bb29:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3235, 19} true;
  assume {:verifier.code 0} true;
  $i67 := $sext.bv32.bv64($i66);
  // WARNING: %80 = sext i32 %.01 to i64, !dbg !2572, !verifier.code !2392
  call {:cexpr "__cil_tmp37"} boogie_si_record_bv64($i67);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3236, 16} true;
  assume {:verifier.code 0} true;
  call $i68 := ldv__builtin_expect($i67, 0bv64);
  // WARNING: %81 = call i64 @ldv__builtin_expect(i64 %80, i64 0), !dbg !2576, !verifier.code !2392
  call {:cexpr "tmp___13"} boogie_si_record_bv64($i68);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3238, 9} true;
  assume {:verifier.code 0} true;
  $i69 := $ne.bv64($i68, 0bv64);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3238, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i69} true;
  goto $bb30, $bb31;
$bb30:
  assume ($i69 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3240, 7} true;
  assume {:verifier.code 0} true;
  call $i70 := printk.ref.bv64(.str.37, $i12);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3241, 16} true;
  assume {:verifier.code 0} true;
  $i71 := $M.9;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3241, 23} true;
  assume {:verifier.code 0} true;
  $i72 := $add.bv32($i71, 1bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3241, 14} true;
  assume {:verifier.code 0} true;
  $M.9 := $i72;
  call {:cexpr "errcnt"} boogie_si_record_bv32($i72);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3243, 5} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb31:
  assume !(($i69 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb32;
$bb32:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3246, 28} true;
  assume {:verifier.code 0} true;
  $i73 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3246, 19} true;
  assume {:verifier.code 0} true;
  $i74 := $sext.bv32.bv64($i73);
  // WARNING: %90 = sext i32 %89 to i64, !dbg !2590, !verifier.code !2392
  call {:cexpr "__cil_tmp38"} boogie_si_record_bv64($i74);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3247, 17} true;
  assume {:verifier.code 0} true;
  $i75 := $add.bv64($i12, $i74);
  // WARNING: %91 = add nsw i64 %.04, %90, !dbg !2593, !verifier.code !2392
  call {:cexpr "addr"} boogie_si_record_bv64($i75);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3248, 11} true;
  assume {:verifier.code 0} true;
  $i76 := $add.bv32($i14, 1bv32);
  // WARNING: %92 = add i32 %.02, 1, !dbg !2594, !verifier.code !2392
  call {:cexpr "j"} boogie_si_record_bv32($i76);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3152, 3} true;
  assume {:verifier.code 0} true;
  $i12, $i13, $i14 := $i75, $i59, $i76;
  goto $bb1;
}
const print_subpage: ref;
axiom (print_subpage == $sub.ref(0, 95748));
procedure  print_subpage($p0: ref)
{
  var $i1: bv32;
  var $p2: ref;
  var $i3: bv32;
  var $i4: bv1;
  var $i5: bv32;
  var $i6: bv32;
  var $p7: ref;
  var $i8: bv32;
  var $i9: bv1;
  var $i12: bv1;
  var $i13: bv32;
  var $p14: ref;
  var $i10: bv32;
  var $p11: ref;
  var $p17: ref;
  var $i18: bv8;
  var $i19: bv32;
  var $i20: bv32;
  var $i21: bv32;
  var $i22: bv32;
  var $i15: bv32;
  var $p16: ref;
  var $i23: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %0, i64 0, metadata !4489, metadata !2391), !dbg !4490, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2635, 3} true;
  assume {:verifier.code 0} true;
  $i1, $p2 := 0bv32, $p0;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2635, 13} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2637, 13} true;
  assume {:verifier.code 0} true;
  $i3 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2637, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $slt.bv32($i1, $i3);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2637, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i4 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2639, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i4 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2640, 7} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2644, 5} true;
  assume {:verifier.code 0} true;
  $i5, $i6, $p7 := 0bv32, $i1, $p2;
  goto $bb7;
$bb6:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2673, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb7:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2644, 15} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2646, 15} true;
  assume {:verifier.code 0} true;
  $i8 := $M.2;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2646, 13} true;
  assume {:verifier.code 0} true;
  $i9 := $slt.bv32($i6, $i8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2646, 11} true;
  assume {:verifier.code 0} true;
  $i10, $p11 := $i6, $p7;
  assume {:branchcond $i9} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i9 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2647, 15} true;
  assume {:verifier.code 0} true;
  $i12 := $slt.bv32($i5, 32bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2647, 13} true;
  assume {:verifier.code 0} true;
  $i13, $p14 := $i6, $p7;
  assume {:branchcond $i12} true;
  goto $bb11, $bb12;
$bb10:
  assume !(($i9 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2653, 9} true;
  assume {:verifier.code 0} true;
  $i15, $p16 := $i10, $p11;
  goto $bb14;
$bb11:
  assume ($i12 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2649, 9} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume !(($i12 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2650, 11} true;
  assume {:verifier.code 0} true;
  $i15, $p16 := $i13, $p14;
  goto $bb14;
$bb13:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2652, 7} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2668, 5} true;
  assume {:verifier.code 0} true;
  call $i23 := printk.ref(.str.35);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2635, 3} true;
  assume {:verifier.code 0} true;
  $i1, $p2 := $i15, $p16;
  goto $bb1;
$bb15:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2657, 13} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p7, 1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2658, 20} true;
  assume {:verifier.code 0} true;
  $i18 := $load.bytes.bv8($M.0, $p7);
  // WARNING: %21 = load i8, i8* %.1, align 1, !dbg !2438, !verifier.code !2395
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv8($i18);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2659, 20} true;
  assume {:verifier.code 0} true;
  $i19 := $zext.bv8.bv32($i18);
  // WARNING: %22 = zext i8 %21 to i32, !dbg !2441, !verifier.code !2395
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv32($i19);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2660, 7} true;
  assume {:verifier.code 0} true;
  call $i20 := printk.ref.bv32(.str.34, $i19);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2661, 13} true;
  assume {:verifier.code 0} true;
  $i21 := $add.bv32($i6, 1bv32);
  // WARNING: %24 = add nsw i32 %.12, 1, !dbg !2445, !verifier.code !2395
  call {:cexpr "i"} boogie_si_record_bv32($i21);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2662, 13} true;
  assume {:verifier.code 0} true;
  $i22 := $add.bv32($i5, 1bv32);
  // WARNING: %25 = add nsw i32 %.03, 1, !dbg !2446, !verifier.code !2395
  call {:cexpr "j"} boogie_si_record_bv32($i22);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2644, 5} true;
  assume {:verifier.code 0} true;
  $i5, $i6, $p7 := $i22, $i21, $p17;
  goto $bb7;
}
const erase_eraseblock: ref;
axiom (erase_eraseblock == $sub.ref(0, 96780));
procedure  erase_eraseblock($i0: bv32)
  returns ($r: bv32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: bv64;
  var $i4: bv64;
  var $p5: ref;
  var $i6: bv32;
  var $i7: bv32;
  var $i8: bv64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: bv64;
  var $i13: bv64;
  var $p14: ref;
  var $i15: bv64;
  var $i16: bv64;
  var $p17: ref;
  var $i18: bv64;
  var $i19: bv64;
  var $p20: ref;
  var $i21: bv32;
  var $i22: bv64;
  var $p23: ref;
  var $p24: ref;
  var $i25: bv32;
  var $i26: bv1;
  var $i27: bv32;
  var $i29: bv64;
  var $i30: bv64;
  var $p31: ref;
  var $i32: bv8;
  var $i33: bv32;
  var $i34: bv1;
  var $i35: bv32;
  var $i28: bv32;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(88, $bv2int.64($zext.bv32.bv64(1bv32))));
  // WARNING: %2 = alloca %struct.erase_info, align 8, !verifier.code !2392
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2223, 32} true;
  assume {:verifier.code 0} true;
  $p2 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2223, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.bv64($p2);
  // WARNING: %4 = ptrtoint %struct.mtd_info* %3 to i64, !dbg !2401, !verifier.code !2392
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2224, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $add.bv64($i3, 16bv64);
  // WARNING: %5 = add i64 %4, 16, !dbg !2404, !verifier.code !2392
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2225, 18} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.bv64.ref($i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2225, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $load.bytes.bv32($M.0, $p5);
  // WARNING: %7 = load i32, i32* %6, align 4, !dbg !2408, !verifier.code !2392
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv32($i6);
  // WARNING: call void @llvm.dbg.value(metadata i32 %7, i64 0, metadata !4567, metadata !2391), !dbg !4568, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2227, 27} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.bv32($i0, $i6);
  // WARNING: %8 = mul i32 %0, %7, !dbg !2413, !verifier.code !2392
  call {:cexpr "__cil_tmp9"} boogie_si_record_bv32($i7);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2228, 10} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.bv32.bv64($i7);
  // WARNING: %9 = zext i32 %8 to i64, !dbg !2416, !verifier.code !2392
  call {:cexpr "addr"} boogie_si_record_bv64($i8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2229, 17} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2230, 3} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.bv8($M.0, $p9, 0bv8, $bv2int.64(88bv64), $bv2int.64($zext.bv32.bv64(1bv32)), (0bv1 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2232, 40} true;
  assume {:verifier.code 0} true;
  $p10 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2232, 3} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2232, 38} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p11, $p10);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2233, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $p2i.ref.bv64($p1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2233, 40} true;
  assume {:verifier.code 0} true;
  $i13 := $add.bv64($i12, 8bv64);
  // WARNING: %14 = add i64 %13, 8, !dbg !2429, !verifier.code !2392
  call {:cexpr "__cil_tmp12"} boogie_si_record_bv64($i13);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2234, 5} true;
  assume {:verifier.code 0} true;
  $p14 := $i2p.bv64.ref($i13);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2234, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv64($M.0, $p14, $i8);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2235, 17} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.bv64($p1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2235, 40} true;
  assume {:verifier.code 0} true;
  $i16 := $add.bv64($i15, 16bv64);
  // WARNING: %17 = add i64 %16, 16, !dbg !2435, !verifier.code !2392
  call {:cexpr "__cil_tmp13"} boogie_si_record_bv64($i16);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2236, 33} true;
  assume {:verifier.code 0} true;
  $p17 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2236, 17} true;
  assume {:verifier.code 0} true;
  $i18 := $p2i.ref.bv64($p17);
  // WARNING: %19 = ptrtoint %struct.mtd_info* %18 to i64, !dbg !2439, !verifier.code !2392
  call {:cexpr "__cil_tmp14"} boogie_si_record_bv64($i18);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2237, 29} true;
  assume {:verifier.code 0} true;
  $i19 := $add.bv64($i18, 16bv64);
  // WARNING: %20 = add i64 %19, 16, !dbg !2442, !verifier.code !2392
  call {:cexpr "__cil_tmp15"} boogie_si_record_bv64($i19);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2238, 19} true;
  assume {:verifier.code 0} true;
  $p20 := $i2p.bv64.ref($i19);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2238, 17} true;
  assume {:verifier.code 0} true;
  $i21 := $load.bytes.bv32($M.0, $p20);
  // WARNING: %22 = load i32, i32* %21, align 4, !dbg !2446, !verifier.code !2392
  call {:cexpr "__cil_tmp16"} boogie_si_record_bv32($i21);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2239, 32} true;
  assume {:verifier.code 0} true;
  $i22 := $zext.bv32.bv64($i21);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2239, 5} true;
  assume {:verifier.code 0} true;
  $p23 := $i2p.bv64.ref($i16);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2239, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv64($M.0, $p23, $i22);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2240, 19} true;
  assume {:verifier.code 0} true;
  $p24 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2240, 9} true;
  assume {:verifier.code 0} true;
  call $i25 := mtd_erase($p24, $p1);
  // WARNING: %26 = call i32 @mtd_erase(%struct.mtd_info* %25, %struct.erase_info* %2), !dbg !2453, !verifier.code !2392
  call {:cexpr "err"} boogie_si_record_bv32($i25);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2242, 7} true;
  assume {:verifier.code 0} true;
  $i26 := $ne.bv32($i25, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2242, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i26 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2244, 5} true;
  assume {:verifier.code 0} true;
  call $i27 := printk.ref.bv32.bv32(.str.23, $i25, $i0);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2246, 5} true;
  assume {:verifier.code 0} true;
  $i28 := $i25;
  goto $bb3;
$bb2:
  assume !(($i26 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2265, 1} true;
  assume {:verifier.code 0} true;
  $r := $i28;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2251, 17} true;
  assume {:verifier.code 0} true;
  $i29 := $p2i.ref.bv64($p1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2251, 40} true;
  assume {:verifier.code 0} true;
  $i30 := $add.bv64($i29, 72bv64);
  // WARNING: %33 = add i64 %32, 72, !dbg !2465, !verifier.code !2392
  call {:cexpr "__cil_tmp17"} boogie_si_record_bv64($i30);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2252, 19} true;
  assume {:verifier.code 0} true;
  $p31 := $i2p.bv64.ref($i30);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2252, 17} true;
  assume {:verifier.code 0} true;
  $i32 := $load.bytes.bv8($M.0, $p31);
  // WARNING: %35 = load i8, i8* %34, align 1, !dbg !2469, !verifier.code !2392
  call {:cexpr "__cil_tmp18"} boogie_si_record_bv8($i32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2253, 17} true;
  assume {:verifier.code 0} true;
  $i33 := $zext.bv8.bv32($i32);
  // WARNING: %36 = zext i8 %35 to i32, !dbg !2472, !verifier.code !2392
  call {:cexpr "__cil_tmp19"} boogie_si_record_bv32($i33);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2254, 19} true;
  assume {:verifier.code 0} true;
  $i34 := $eq.bv32($i33, 16bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2254, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i34 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2256, 5} true;
  assume {:verifier.code 0} true;
  call $i35 := printk.ref.bv32(.str.24, $i0);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2258, 5} true;
  assume {:verifier.code 0} true;
  $i28 := $sub.bv32(0bv32, 5bv32);
  goto $bb3;
$bb6:
  assume !(($i34 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2263, 3} true;
  assume {:verifier.code 0} true;
  $i28 := 0bv32;
  goto $bb3;
}
const mtd_erase: ref;
axiom (mtd_erase == $sub.ref(0, 97812));
procedure  mtd_erase($p0: ref, $p1: ref)
  returns ($r: bv32);
const kzalloc: ref;
axiom (kzalloc == $sub.ref(0, 98844));
procedure  kzalloc($i0: bv64, $i1: bv32)
  returns ($r: ref)
{
  var $i2: bv32;
  var $p3: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !4643, metadata !2391), !dbg !4644, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2097, 22} true;
  assume {:verifier.code 0} true;
  $i2 := $or.bv32($i1, 32768bv32);
  // WARNING: %3 = or i32 %1, 32768, !dbg !2398, !verifier.code !2395
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv32($i2);
  // WARNING: call void @llvm.dbg.value(metadata i32 %3, i64 0, metadata !4650, metadata !2391), !dbg !4651, !verifier.code !2393
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !2608, metadata !2391), !dbg !4652, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2085, 13} true;
  assume {:verifier.code 0} true;
  call $p3 := __kmalloc($i0, $i2);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 2100, 3} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const is_block_bad: ref;
axiom (is_block_bad == $sub.ref(0, 99876));
procedure  is_block_bad($i0: bv32)
  returns ($r: bv32)
{
  var $p1: ref;
  var $i2: bv64;
  var $i3: bv64;
  var $p4: ref;
  var $i5: bv32;
  var $i6: bv32;
  var $i7: bv64;
  var $p8: ref;
  var $i9: bv32;
  var $i10: bv1;
  var $i11: bv32;
$bb0:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3333, 32} true;
  assume {:verifier.code 0} true;
  $p1 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3333, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.bv64($p1);
  // WARNING: %3 = ptrtoint %struct.mtd_info* %2 to i64, !dbg !2399, !verifier.code !2395
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv64($i2);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3334, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $add.bv64($i2, 16bv64);
  // WARNING: %4 = add i64 %3, 16, !dbg !2402, !verifier.code !2395
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3335, 18} true;
  assume {:verifier.code 0} true;
  $p4 := $i2p.bv64.ref($i3);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3335, 16} true;
  assume {:verifier.code 0} true;
  $i5 := $load.bytes.bv32($M.0, $p4);
  // WARNING: %6 = load i32, i32* %5, align 4, !dbg !2406, !verifier.code !2395
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv32($i5);
  // WARNING: call void @llvm.dbg.value(metadata i32 %6, i64 0, metadata !4674, metadata !2391), !dbg !4675, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3337, 27} true;
  assume {:verifier.code 0} true;
  $i6 := $mul.bv32($i0, $i5);
  // WARNING: %7 = mul i32 %0, %6, !dbg !2411, !verifier.code !2395
  call {:cexpr "__cil_tmp8"} boogie_si_record_bv32($i6);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3338, 10} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.bv32.bv64($i6);
  // WARNING: %8 = zext i32 %7 to i64, !dbg !2414, !verifier.code !2395
  call {:cexpr "addr"} boogie_si_record_bv64($i7);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3339, 25} true;
  assume {:verifier.code 0} true;
  $p8 := $M.1;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3339, 9} true;
  assume {:verifier.code 0} true;
  call $i9 := mtd_block_isbad($p8, $i7);
  // WARNING: %10 = call i32 @mtd_block_isbad(%struct.mtd_info* %9, i64 %8), !dbg !2418, !verifier.code !2395
  call {:cexpr "ret"} boogie_si_record_bv32($i9);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3341, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.bv32($i9, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3341, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3343, 5} true;
  assume {:verifier.code 0} true;
  call $i11 := printk.ref.bv32(.str.20, $i0);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3345, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i10 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3348, 3} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
}
const mtd_block_isbad: ref;
axiom (mtd_block_isbad == $sub.ref(0, 100908));
procedure  mtd_block_isbad($p0: ref, $i1: bv64)
  returns ($r: bv32);
const mtd_subpagetest_exit: ref;
axiom (mtd_subpagetest_exit == $sub.ref(0, 101940));
procedure  mtd_subpagetest_exit()
{
$bb0:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 3961, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 102972));
procedure {:entrypoint} main()
{
  var $i0: bv32;
  var $i1: bv1;
  var $i2: bv32;
  var $i3: bv1;
  var $i4: bv32;
$bb0:
  call $initialize();
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4008, 20} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4008, 20} true;
  assume {:verifier.code 0} true;
  $M.11 := 1bv32;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_bv32(1bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4009, 3} true;
  assume {:verifier.code 0} true;
  call ldv_initialize();
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4010, 13} true;
  assume {:verifier.code 0} true;
  call $i0 := mtd_subpagetest_init();
  // WARNING: %1 = call i32 @mtd_subpagetest_init(), !dbg !2395, !verifier.code !2393
  call {:cexpr "tmp___7"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4012, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.bv32($i0, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4012, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4013, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4048, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_final_state();
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4050, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4018, 3} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4018, 13} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4021, 15} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i2);
  // WARNING: %8 = call i32 @__VERIFIER_nondet_int(), !dbg !2408, !verifier.code !2411
  call {:cexpr "tmp___9"} boogie_si_record_bv32($i2);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4023, 9} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.bv32($i2, 0bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4023, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4025, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i3 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4026, 7} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4029, 15} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i4);
  // WARNING: %13 = call i32 @__VERIFIER_nondet_int(), !dbg !2421, !verifier.code !2411
  call {:cexpr "tmp___8"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4032, 5} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4044, 3} true;
  assume {:verifier.code 0} true;
  call mtd_subpagetest_exit();
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4045, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb11:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4035, 7} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb12:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4033, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0bv1} true;
  goto $bb13, $bb14;
$bb13:
  assume (0bv1 == 1bv1);
  assume {:verifier.code 0} true;
  assume false;
$bb14:
  assume !((0bv1 == 1bv1));
  assume {:verifier.code 0} true;
  assume false;
$bb15:
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4018, 3} true;
  assume {:verifier.code 0} true;
  goto $bb5;
}
const ldv_initialize: ref;
axiom (ldv_initialize == $sub.ref(0, 104004));
procedure  ldv_initialize();
const ldv_check_final_state: ref;
axiom (ldv_check_final_state == $sub.ref(0, 105036));
procedure  ldv_check_final_state()
{
  var $i0: bv32;
  var $i1: bv1;
$bb0:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4185, 7} true;
  assume {:verifier.code 0} true;
  $i0 := $M.12;
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4185, 17} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.bv32($i0, 1bv32);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4185, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4187, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1bv1));
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4189, 5} true;
  assume {:verifier.code 0} true;
  call ldv_blast_assert();
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4192, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_blast_assert: ref;
axiom (ldv_blast_assert == $sub.ref(0, 106068));
procedure  ldv_blast_assert()
{
$bb0:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4056, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4057, 10} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "/home/ankit/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--tests--mtd_subpagetest.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-65sDmu.c", 4059, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 107100));
procedure  __VERIFIER_assume($i0: bv32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !4766, metadata !2391), !dbg !4767, !verifier.code !2393
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 34, 21} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 35, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 108132));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.bv32($p0: ref, p.1: bv32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 109164));
procedure  __SMACK_dummy($i0: bv32)
{
$bb0:
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 261, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_error: ref;
axiom (__VERIFIER_error == $sub.ref(0, 110196));
procedure  __VERIFIER_error()
{
$bb0:
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 47, 3} true;
  assume {:verifier.code 1} true;
  assert false;
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 51, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 111228));
procedure  __SMACK_nondet_char()
  returns ($r: bv8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 112260));
procedure  __SMACK_nondet_signed_char()
  returns ($r: bv8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 113292));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: bv8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 114324));
procedure  __SMACK_nondet_short()
  returns ($r: bv16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 115356));
procedure  __SMACK_nondet_signed_short()
  returns ($r: bv16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 116388));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: bv16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 117420));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: bv16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 118452));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: bv16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 119484));
procedure  __VERIFIER_nondet_int()
  returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv1;
  var $i3: bv1;
  var $i2: bv1;
  var $i4: bv32;
$bb0:
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 120, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_bv32($i0);
  // WARNING: %1 = call i32 @__SMACK_nondet_int(), !dbg !2390, !verifier.code !2391
  call {:cexpr "x"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 121, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.bv32($i0, $sub.bv32(0bv32, 2147483648bv32));
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0bv1;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 121, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.bv32($i0, 2147483647bv32);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1bv1));
  goto $bb3;
$bb3:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.bv1.bv32($i2);
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 121, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 122, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 120516));
procedure  __SMACK_nondet_int()
  returns ($r: bv32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 121548));
procedure  __SMACK_nondet_signed_int()
  returns ($r: bv32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 122580));
procedure  __SMACK_nondet_unsigned()
  returns ($r: bv32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 123612));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: bv32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 124644));
procedure  __SMACK_nondet_long()
  returns ($r: bv64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 125676));
procedure  __SMACK_nondet_long_int()
  returns ($r: bv64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 126708));
procedure  __SMACK_nondet_signed_long()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 127740));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 128772));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 129804));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: bv64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 130836));
procedure  __SMACK_nondet_long_long()
  returns ($r: bv64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 131868));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 132900));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 133932));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 134964));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 135996));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: bv64);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 137028));
function {:inline} $bitcast.ref.ref(i: ref) returns (ref) {i}
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $min.bv128(i1: bv128, i2: bv128) returns (bv128) {if $slt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv96(i1: bv96, i2: bv96) returns (bv96) {if $slt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv88(i1: bv88, i2: bv88) returns (bv88) {if $slt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv64(i1: bv64, i2: bv64) returns (bv64) {if $slt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv56(i1: bv56, i2: bv56) returns (bv56) {if $slt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv48(i1: bv48, i2: bv48) returns (bv48) {if $slt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv40(i1: bv40, i2: bv40) returns (bv40) {if $slt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv32(i1: bv32, i2: bv32) returns (bv32) {if $slt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv24(i1: bv24, i2: bv24) returns (bv24) {if $slt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv16(i1: bv16, i2: bv16) returns (bv16) {if $slt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv8(i1: bv8, i2: bv8) returns (bv8) {if $slt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv128(i1: bv128, i2: bv128) returns (bv128) {if $sgt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv96(i1: bv96, i2: bv96) returns (bv96) {if $sgt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv88(i1: bv88, i2: bv88) returns (bv88) {if $sgt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv64(i1: bv64, i2: bv64) returns (bv64) {if $sgt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv56(i1: bv56, i2: bv56) returns (bv56) {if $sgt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv48(i1: bv48, i2: bv48) returns (bv48) {if $sgt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv40(i1: bv40, i2: bv40) returns (bv40) {if $sgt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv32(i1: bv32, i2: bv32) returns (bv32) {if $sgt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv24(i1: bv24, i2: bv24) returns (bv24) {if $sgt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv16(i1: bv16, i2: bv16) returns (bv16) {if $sgt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv8(i1: bv8, i2: bv8) returns (bv8) {if $sgt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ult.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ult.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ult.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ult.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ult.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ult.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ult.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ult.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ult.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ult.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ult.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ugt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ugt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ugt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ugt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ugt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ugt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ugt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ugt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ugt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ugt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ugt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then i1 else i2}
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) returns (bv128);
function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) returns (bv96);
function {:bvbuiltin "bvnot"} $not.bv88(i: bv88) returns (bv88);
function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) returns (bv64);
function {:bvbuiltin "bvnot"} $not.bv56(i: bv56) returns (bv56);
function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) returns (bv48);
function {:bvbuiltin "bvnot"} $not.bv40(i: bv40) returns (bv40);
function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) returns (bv32);
function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) returns (bv24);
function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) returns (bv16);
function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) returns (bv8);
function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) returns (bv1);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 == i2} function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 == i2} function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 == i2} function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 == i2} function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 == i2} function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 == i2} function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 == i2} function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 == i2} function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 == i2} function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 == i2} function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 == i2} function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 == i2} function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 != i2} function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 != i2} function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 != i2} function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 != i2} function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 != i2} function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 != i2} function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 != i2} function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 != i2} function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 != i2} function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 != i2} function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 != i2} function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 != i2} function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ule.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ule.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ule.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ule.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ule.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ule.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ule.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ule.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ule.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ule.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ule.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ule.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ult.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ult.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ult.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ult.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ult.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ult.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ult.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ult.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ult.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ult.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ult.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $uge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $uge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $uge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $uge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $uge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $uge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $uge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $uge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $uge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $uge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $uge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $uge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ugt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ugt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ugt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ugt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ugt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ugt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ugt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ugt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ugt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ugt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ugt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sle.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sle.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sle.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sle.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sle.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sle.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sle.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sle.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sle.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sle.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sle.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sle.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $slt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $slt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $slt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $slt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $slt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $slt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $slt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $slt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $slt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $slt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $slt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sgt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sgt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sgt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sgt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sgt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sgt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sgt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sgt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sgt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sgt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sgt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:inline} $trunc.bv128.bv96(i: bv128) returns (bv96) {i[96:0]}
function {:inline} $trunc.bv128.bv88(i: bv128) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv128.bv64(i: bv128) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv128.bv56(i: bv128) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv128.bv48(i: bv128) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv128.bv40(i: bv128) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv128.bv32(i: bv128) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv128.bv24(i: bv128) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv128.bv16(i: bv128) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv128.bv8(i: bv128) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv128.bv1(i: bv128) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv96.bv88(i: bv96) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv96.bv64(i: bv96) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv96.bv56(i: bv96) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv96.bv48(i: bv96) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv96.bv40(i: bv96) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv96.bv32(i: bv96) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv96.bv24(i: bv96) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv96.bv16(i: bv96) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv96.bv8(i: bv96) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv96.bv1(i: bv96) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv88.bv64(i: bv88) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv88.bv56(i: bv88) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv88.bv48(i: bv88) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv88.bv40(i: bv88) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv88.bv32(i: bv88) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv88.bv24(i: bv88) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv88.bv16(i: bv88) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv88.bv8(i: bv88) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv88.bv1(i: bv88) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv64.bv56(i: bv64) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv64.bv48(i: bv64) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv64.bv40(i: bv64) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv64.bv32(i: bv64) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv64.bv24(i: bv64) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv64.bv16(i: bv64) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv64.bv8(i: bv64) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv64.bv1(i: bv64) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv56.bv48(i: bv56) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv56.bv40(i: bv56) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv56.bv32(i: bv56) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv56.bv24(i: bv56) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv56.bv16(i: bv56) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv56.bv8(i: bv56) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv56.bv1(i: bv56) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv48.bv32(i: bv48) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv48.bv24(i: bv48) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv48.bv16(i: bv48) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv48.bv8(i: bv48) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv48.bv1(i: bv48) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv40.bv32(i: bv40) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv40.bv24(i: bv40) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv40.bv16(i: bv40) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv40.bv8(i: bv40) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv40.bv1(i: bv40) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv32.bv24(i: bv32) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv32.bv16(i: bv32) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv32.bv8(i: bv32) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv32.bv1(i: bv32) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv24.bv16(i: bv24) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv24.bv8(i: bv24) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv24.bv1(i: bv24) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv16.bv8(i: bv16) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv16.bv1(i: bv16) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv8.bv1(i: bv8) returns (bv1) {i[1:0]}
function {:inline} $zext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 1bv8}
function {:inline} $zext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 1bv16}
function {:inline} $zext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 1bv24}
function {:inline} $zext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 1bv32}
function {:inline} $zext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1bv40}
function {:inline} $zext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 1bv48}
function {:inline} $zext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 1bv56}
function {:inline} $zext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 1bv64}
function {:inline} $zext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 1bv88}
function {:inline} $zext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 1bv96}
function {:inline} $zext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 1bv128}
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $sext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 255bv8}
function {:inline} $sext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 65535bv16}
function {:inline} $sext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 16777215bv24}
function {:inline} $sext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 4294967295bv32}
function {:inline} $sext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1099511627775bv40}
function {:inline} $sext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 281474976710655bv48}
function {:inline} $sext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 72057594037927935bv56}
function {:inline} $sext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 18446744073709551615bv64}
function {:inline} $sext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88}
function {:inline} $sext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96}
function {:inline} $sext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128}
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) {i1 + i2}
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) {i1 + i2}
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) {i1 + i2}
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) {i1 + i2}
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) {i1 + i2}
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) {i1 + i2}
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) {i1 + i2}
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) {i1 + i2}
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) {i1 + i2}
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) {i1 + i2}
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) {i1 + i2}
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) {i1 + i2}
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) {i1 - i2}
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) {i1 - i2}
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) {i1 - i2}
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) {i1 - i2}
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) {i1 - i2}
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) {i1 - i2}
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) {i1 - i2}
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) {i1 - i2}
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) {i1 - i2}
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) {i1 - i2}
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) {i1 - i2}
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) {i1 - i2}
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) {i1 * i2}
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) {i1 * i2}
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) {i1 * i2}
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) {i1 * i2}
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) {i1 * i2}
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) {i1 * i2}
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) {i1 * i2}
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) {i1 * i2}
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) {i1 * i2}
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) {i1 * i2}
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) {i1 * i2}
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) {i1 * i2}
function {:builtin "div"} $div(i1: int, i2: int) returns (int);
function {:builtin "mod"} $mod(i1: int, i2: int) returns (int);
function {:builtin "rem"} $rem(i1: int, i2: int) returns (int);
function {:inline} $min(i1: int, i2: int) returns (int) {if i1 < i2 then i1 else i2}
function {:inline} $max(i1: int, i2: int) returns (int) {if i1 > i2 then i1 else i2}
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $not.i128(i: i128) returns (i128);
function $not.i96(i: i96) returns (i96);
function $not.i88(i: i88) returns (i88);
function $not.i64(i: i64) returns (i64);
function $not.i56(i: i56) returns (i56);
function $not.i48(i: i48) returns (i48);
function $not.i40(i: i40) returns (i40);
function $not.i32(i: i32) returns (i32);
function $not.i24(i: i24) returns (i24);
function $not.i16(i: i16) returns (i16);
function $not.i8(i: i8) returns (i8);
function $not.i1(i: i1) returns (i1);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) {i1 == i2} function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) {i1 == i2} function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) {i1 == i2} function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) {i1 == i2} function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) {i1 == i2} function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) {i1 == i2} function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) {i1 == i2} function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) {i1 == i2} function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) {i1 == i2} function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) {i1 == i2} function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) {i1 == i2} function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) {i1 == i2} function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) {i1 != i2} function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) {i1 != i2} function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) {i1 != i2} function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) {i1 != i2} function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) {i1 != i2} function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) {i1 != i2} function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) {i1 != i2} function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) {i1 != i2} function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) {i1 != i2} function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) {i1 != i2} function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) {i1 != i2} function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) {i1 != i2} function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
axiom $and.i1(0,0) == 0;
axiom $and.i1(0,1) == 0;
axiom $and.i1(1,0) == 0;
axiom $and.i1(1,1) == 1;
axiom $or.i1(0,0) == 0;
axiom $or.i1(0,1) == 1;
axiom $or.i1(1,0) == 1;
axiom $or.i1(1,1) == 1;
axiom $xor.i1(0,0) == 0;
axiom $xor.i1(0,1) == 1;
axiom $xor.i1(1,0) == 1;
axiom $xor.i1(1,1) == 0;
axiom($and.i32(32, 16) == 0);
function {:inline} $trunc.i128.i96(i: i128) returns (i96) {i}
function {:inline} $trunc.i128.i88(i: i128) returns (i88) {i}
function {:inline} $trunc.i128.i64(i: i128) returns (i64) {i}
function {:inline} $trunc.i128.i56(i: i128) returns (i56) {i}
function {:inline} $trunc.i128.i48(i: i128) returns (i48) {i}
function {:inline} $trunc.i128.i40(i: i128) returns (i40) {i}
function {:inline} $trunc.i128.i32(i: i128) returns (i32) {i}
function {:inline} $trunc.i128.i24(i: i128) returns (i24) {i}
function {:inline} $trunc.i128.i16(i: i128) returns (i16) {i}
function {:inline} $trunc.i128.i8(i: i128) returns (i8) {i}
function {:inline} $trunc.i128.i1(i: i128) returns (i1) {i}
function {:inline} $trunc.i96.i64(i: i96) returns (i64) {i}
function {:inline} $trunc.i96.i88(i: i96) returns (i88) {i}
function {:inline} $trunc.i96.i56(i: i96) returns (i56) {i}
function {:inline} $trunc.i96.i48(i: i96) returns (i48) {i}
function {:inline} $trunc.i96.i40(i: i96) returns (i40) {i}
function {:inline} $trunc.i96.i32(i: i96) returns (i32) {i}
function {:inline} $trunc.i96.i24(i: i96) returns (i24) {i}
function {:inline} $trunc.i96.i16(i: i96) returns (i16) {i}
function {:inline} $trunc.i96.i8(i: i96) returns (i8) {i}
function {:inline} $trunc.i96.i1(i: i96) returns (i1) {i}
function {:inline} $trunc.i88.i64(i: i88) returns (i64) {i}
function {:inline} $trunc.i88.i88(i: i88) returns (i88) {i}
function {:inline} $trunc.i88.i56(i: i88) returns (i56) {i}
function {:inline} $trunc.i88.i48(i: i88) returns (i48) {i}
function {:inline} $trunc.i88.i40(i: i88) returns (i40) {i}
function {:inline} $trunc.i88.i32(i: i88) returns (i32) {i}
function {:inline} $trunc.i88.i24(i: i88) returns (i24) {i}
function {:inline} $trunc.i88.i16(i: i88) returns (i16) {i}
function {:inline} $trunc.i88.i8(i: i88) returns (i8) {i}
function {:inline} $trunc.i88.i1(i: i88) returns (i1) {i}
function {:inline} $trunc.i64.i56(i: i64) returns (i56) {i}
function {:inline} $trunc.i64.i48(i: i64) returns (i48) {i}
function {:inline} $trunc.i64.i40(i: i64) returns (i40) {i}
function {:inline} $trunc.i64.i32(i: i64) returns (i32) {i}
function {:inline} $trunc.i64.i24(i: i64) returns (i24) {i}
function {:inline} $trunc.i64.i16(i: i64) returns (i16) {i}
function {:inline} $trunc.i64.i8(i: i64) returns (i8) {i}
function {:inline} $trunc.i64.i1(i: i64) returns (i1) {i}
function {:inline} $trunc.i56.i48(i: i56) returns (i48) {i}
function {:inline} $trunc.i56.i40(i: i56) returns (i40) {i}
function {:inline} $trunc.i56.i32(i: i56) returns (i32) {i}
function {:inline} $trunc.i56.i24(i: i56) returns (i24) {i}
function {:inline} $trunc.i56.i16(i: i56) returns (i16) {i}
function {:inline} $trunc.i56.i8(i: i56) returns (i8) {i}
function {:inline} $trunc.i56.i1(i: i56) returns (i1) {i}
function {:inline} $trunc.i48.i40(i: i48) returns (i40) {i}
function {:inline} $trunc.i48.i32(i: i48) returns (i32) {i}
function {:inline} $trunc.i48.i24(i: i48) returns (i24) {i}
function {:inline} $trunc.i48.i16(i: i48) returns (i16) {i}
function {:inline} $trunc.i48.i8(i: i48) returns (i8) {i}
function {:inline} $trunc.i48.i1(i: i48) returns (i1) {i}
function {:inline} $trunc.i40.i32(i: i40) returns (i32) {i}
function {:inline} $trunc.i40.i24(i: i40) returns (i24) {i}
function {:inline} $trunc.i40.i16(i: i40) returns (i16) {i}
function {:inline} $trunc.i40.i8(i: i40) returns (i8) {i}
function {:inline} $trunc.i40.i1(i: i40) returns (i1) {i}
function {:inline} $trunc.i32.i24(i: i32) returns (i24) {i}
function {:inline} $trunc.i32.i16(i: i32) returns (i16) {i}
function {:inline} $trunc.i32.i8(i: i32) returns (i8) {i}
function {:inline} $trunc.i32.i1(i: i32) returns (i1) {i}
function {:inline} $trunc.i24.i16(i: i24) returns (i16) {i}
function {:inline} $trunc.i24.i8(i: i24) returns (i8) {i}
function {:inline} $trunc.i24.i1(i: i24) returns (i1) {i}
function {:inline} $trunc.i16.i8(i: i16) returns (i8) {i}
function {:inline} $trunc.i16.i1(i: i16) returns (i1) {i}
function {:inline} $trunc.i8.i1(i: i8) returns (i1) {i}
function {:inline} $zext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $zext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $zext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $zext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $zext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $zext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $zext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $zext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $zext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $zext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $zext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $zext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $zext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $zext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $zext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $zext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $zext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $zext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $zext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $zext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $zext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $zext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $zext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $zext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $zext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $zext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $zext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $zext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $zext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $zext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $zext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $zext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $zext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $zext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $zext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $zext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $zext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $zext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $zext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $zext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $zext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $zext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $zext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $zext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $zext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $zext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $zext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $zext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $zext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $zext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $zext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $zext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $zext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $zext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $zext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $zext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $zext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $zext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $zext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $zext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $zext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $zext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $zext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $zext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $zext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $zext.i96.i128(i: i96) returns (i128) {i}
function {:inline} $sext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $sext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $sext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $sext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $sext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $sext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $sext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $sext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $sext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $sext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $sext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $sext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $sext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $sext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $sext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $sext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $sext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $sext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $sext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $sext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $sext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $sext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $sext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $sext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $sext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $sext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $sext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $sext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $sext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $sext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $sext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $sext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $sext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $sext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $sext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $sext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $sext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $sext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $sext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $sext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $sext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $sext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $sext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $sext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $sext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $sext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $sext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $sext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $sext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $sext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $sext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $sext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $sext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $sext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $sext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $sext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $sext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $sext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $sext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $sext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $sext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $sext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $sext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $sext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $sext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $sext.i96.i128(i: i96) returns (i128) {i}
function $fp(ipart:int, fpart:int, epart:int) returns (float);
function $fadd.float(f1:float, f2:float) returns (float);
function $fsub.float(f1:float, f2:float) returns (float);
function $fmul.float(f1:float, f2:float) returns (float);
function $fdiv.float(f1:float, f2:float) returns (float);
function $frem.float(f1:float, f2:float) returns (float);
function $ffalse.float(f1:float, f2:float) returns (i1);
function $ftrue.float(f1:float, f2:float) returns (i1);
function {:inline} $foeq.float(f1:float, f2:float) returns (i1) { if $foeq.bool(f1,f2) then 1 else 0 }
function $foeq.bool(f1:float, f2:float) returns (bool);
function $foge.float(f1:float, f2:float) returns (i1);
function $fogt.float(f1:float, f2:float) returns (i1);
function $fole.float(f1:float, f2:float) returns (i1);
function $folt.float(f1:float, f2:float) returns (i1);
function $fone.float(f1:float, f2:float) returns (i1);
function $ford.float(f1:float, f2:float) returns (i1);
function $fueq.float(f1:float, f2:float) returns (i1);
function $fuge.float(f1:float, f2:float) returns (i1);
function $fugt.float(f1:float, f2:float) returns (i1);
function $fule.float(f1:float, f2:float) returns (i1);
function $fult.float(f1:float, f2:float) returns (i1);
function $fune.float(f1:float, f2:float) returns (i1);
function $funo.float(f1:float, f2:float) returns (i1);
function $fp2si.float.i128(f:float) returns (i128);
function $fp2ui.float.i128(f:float) returns (i128);
function $si2fp.i128.float(i:i128) returns (float);
function $ui2fp.i128.float(i:i128) returns (float);
function $fp2si.float.i96(f:float) returns (i96);
function $fp2ui.float.i96(f:float) returns (i96);
function $si2fp.i96.float(i:i96) returns (float);
function $ui2fp.i96.float(i:i96) returns (float);
function $fp2si.float.i88(f:float) returns (i88);
function $fp2ui.float.i88(f:float) returns (i88);
function $si2fp.i88.float(i:i88) returns (float);
function $ui2fp.i88.float(i:i88) returns (float);
function $fp2si.float.i64(f:float) returns (i64);
function $fp2ui.float.i64(f:float) returns (i64);
function $si2fp.i64.float(i:i64) returns (float);
function $ui2fp.i64.float(i:i64) returns (float);
function $fp2si.float.i56(f:float) returns (i56);
function $fp2ui.float.i56(f:float) returns (i56);
function $si2fp.i56.float(i:i56) returns (float);
function $ui2fp.i56.float(i:i56) returns (float);
function $fp2si.float.i48(f:float) returns (i48);
function $fp2ui.float.i48(f:float) returns (i48);
function $si2fp.i48.float(i:i48) returns (float);
function $ui2fp.i48.float(i:i48) returns (float);
function $fp2si.float.i40(f:float) returns (i40);
function $fp2ui.float.i40(f:float) returns (i40);
function $si2fp.i40.float(i:i40) returns (float);
function $ui2fp.i40.float(i:i40) returns (float);
function $fp2si.float.i32(f:float) returns (i32);
function $fp2ui.float.i32(f:float) returns (i32);
function $si2fp.i32.float(i:i32) returns (float);
function $ui2fp.i32.float(i:i32) returns (float);
function $fp2si.float.i24(f:float) returns (i24);
function $fp2ui.float.i24(f:float) returns (i24);
function $si2fp.i24.float(i:i24) returns (float);
function $ui2fp.i24.float(i:i24) returns (float);
function $fp2si.float.i16(f:float) returns (i16);
function $fp2ui.float.i16(f:float) returns (i16);
function $si2fp.i16.float(i:i16) returns (float);
function $ui2fp.i16.float(i:i16) returns (float);
function $fp2si.float.i8(f:float) returns (i8);
function $fp2ui.float.i8(f:float) returns (i8);
function $si2fp.i8.float(i:i8) returns (float);
function $ui2fp.i8.float(i:i8) returns (float);
function $fptrunc.float.float(f:float) returns (float);
function $fpext.float.float(f:float) returns (float);
function $fp2si.float.bv128(f:float) returns (bv128);
function $fp2ui.float.bv128(f:float) returns (bv128);
function $si2fp.bv128.float(i:bv128) returns (float);
function $ui2fp.bv128.float(i:bv128) returns (float);
function $fp2si.float.bv96(f:float) returns (bv96);
function $fp2ui.float.bv96(f:float) returns (bv96);
function $si2fp.bv96.float(i:bv96) returns (float);
function $ui2fp.bv96.float(i:bv96) returns (float);
function $fp2si.float.bv88(f:float) returns (bv88);
function $fp2ui.float.bv88(f:float) returns (bv88);
function $si2fp.bv88.float(i:bv88) returns (float);
function $ui2fp.bv88.float(i:bv88) returns (float);
function $fp2si.float.bv64(f:float) returns (bv64);
function $fp2ui.float.bv64(f:float) returns (bv64);
function $si2fp.bv64.float(i:bv64) returns (float);
function $ui2fp.bv64.float(i:bv64) returns (float);
function $fp2si.float.bv56(f:float) returns (bv56);
function $fp2ui.float.bv56(f:float) returns (bv56);
function $si2fp.bv56.float(i:bv56) returns (float);
function $ui2fp.bv56.float(i:bv56) returns (float);
function $fp2si.float.bv48(f:float) returns (bv48);
function $fp2ui.float.bv48(f:float) returns (bv48);
function $si2fp.bv48.float(i:bv48) returns (float);
function $ui2fp.bv48.float(i:bv48) returns (float);
function $fp2si.float.bv40(f:float) returns (bv40);
function $fp2ui.float.bv40(f:float) returns (bv40);
function $si2fp.bv40.float(i:bv40) returns (float);
function $ui2fp.bv40.float(i:bv40) returns (float);
function $fp2si.float.bv32(f:float) returns (bv32);
function $fp2ui.float.bv32(f:float) returns (bv32);
function $si2fp.bv32.float(i:bv32) returns (float);
function $ui2fp.bv32.float(i:bv32) returns (float);
function $fp2si.float.bv24(f:float) returns (bv24);
function $fp2ui.float.bv24(f:float) returns (bv24);
function $si2fp.bv24.float(i:bv24) returns (float);
function $ui2fp.bv24.float(i:bv24) returns (float);
function $fp2si.float.bv16(f:float) returns (bv16);
function $fp2ui.float.bv16(f:float) returns (bv16);
function $si2fp.bv16.float(i:bv16) returns (float);
function $ui2fp.bv16.float(i:bv16) returns (float);
function $fp2si.float.bv8(f:float) returns (bv8);
function $fp2ui.float.bv8(f:float) returns (bv8);
function $si2fp.bv8.float(i:bv8) returns (float);
function $ui2fp.bv8.float(i:bv8) returns (float);
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;
function {:inline} $isExternal(p: ref) returns (bool) {$slt.ref.bool(p,$EXTERNS_BOTTOM)}
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) { M[p] }
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) { M[p] }
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) { M[p] }
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) { M[p] }
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) { M[p] }
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) { M[p] }
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) { M[p] }
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) { M[p] }
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) { M[p] }
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) { M[p] }
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128){ $load.bytes.bv64(M, $add.ref(p, $8.ref)) ++ $load.bytes.bv64(M, p) }
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96){ $load.bytes.bv64(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88){ $load.bytes.bv56(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64){ $load.bytes.bv32(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56){ $load.bytes.bv24(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48){ $load.bytes.bv16(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40){ M[$add.ref(p, $4.ref)] ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32){ M[$add.ref(p, $3.ref)] ++ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24){ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16){ M[$add.ref(p, $1.ref)] ++ M[p] }
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, v: i128) returns ([ref] i128) { M[p := v] }
function {:inline} $store.i96(M: [ref] i96, p: ref, v: i96) returns ([ref] i96) { M[p := v] }
function {:inline} $store.i88(M: [ref] i88, p: ref, v: i88) returns ([ref] i88) { M[p := v] }
function {:inline} $store.i64(M: [ref] i64, p: ref, v: i64) returns ([ref] i64) { M[p := v] }
function {:inline} $store.i56(M: [ref] i56, p: ref, v: i56) returns ([ref] i56) { M[p := v] }
function {:inline} $store.i48(M: [ref] i48, p: ref, v: i48) returns ([ref] i48) { M[p := v] }
function {:inline} $store.i40(M: [ref] i40, p: ref, v: i40) returns ([ref] i40) { M[p := v] }
function {:inline} $store.i32(M: [ref] i32, p: ref, v: i32) returns ([ref] i32) { M[p := v] }
function {:inline} $store.i24(M: [ref] i24, p: ref, v: i24) returns ([ref] i24) { M[p := v] }
function {:inline} $store.i16(M: [ref] i16, p: ref, v: i16) returns ([ref] i16) { M[p := v] }
function {:inline} $store.i8(M: [ref] i8, p: ref, v: i8) returns ([ref] i8) { M[p := v] }
function {:inline} $store.bv128(M: [ref] bv128, p: ref, v: bv128) returns ([ref] bv128) { M[p := v] }
function {:inline} $store.bv96(M: [ref] bv96, p: ref, v: bv96) returns ([ref] bv96) { M[p := v] }
function {:inline} $store.bv88(M: [ref] bv88, p: ref, v: bv88) returns ([ref] bv88) { M[p := v] }
function {:inline} $store.bv64(M: [ref] bv64, p: ref, v: bv64) returns ([ref] bv64) { M[p := v] }
function {:inline} $store.bv56(M: [ref] bv56, p: ref, v: bv56) returns ([ref] bv56) { M[p := v] }
function {:inline} $store.bv48(M: [ref] bv48, p: ref, v: bv48) returns ([ref] bv48) { M[p := v] }
function {:inline} $store.bv40(M: [ref] bv40, p: ref, v: bv40) returns ([ref] bv40) { M[p := v] }
function {:inline} $store.bv32(M: [ref] bv32, p: ref, v: bv32) returns ([ref] bv32) { M[p := v] }
function {:inline} $store.bv24(M: [ref] bv24, p: ref, v: bv24) returns ([ref] bv24) { M[p := v] }
function {:inline} $store.bv16(M: [ref] bv16, p: ref, v: bv16) returns ([ref] bv16) { M[p := v] }
function {:inline} $store.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) { M[p := v] }
function {:inline} $store.bytes.bv128(M:[ref]bv8, p:ref, v:bv128) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]][$add.ref(p, $11.ref) := v[104:96]][$add.ref(p, $12.ref) := v[112:104]][$add.ref(p, $13.ref) := v[120:112]][$add.ref(p, $14.ref) := v[128:120]]}
function {:inline} $store.bytes.bv96(M:[ref]bv8, p:ref, v:bv96) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]]}
function {:inline} $store.bytes.bv88(M:[ref]bv8, p:ref, v:bv88) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]]}
function {:inline} $store.bytes.bv64(M:[ref]bv8, p:ref, v:bv64) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]]}
function {:inline} $store.bytes.bv56(M:[ref]bv8, p:ref, v:bv56) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]]}
function {:inline} $store.bytes.bv48(M:[ref]bv8, p:ref, v:bv48) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]]}
function {:inline} $store.bytes.bv40(M:[ref]bv8, p:ref, v:bv40) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]]}
function {:inline} $store.bytes.bv32(M:[ref]bv8, p:ref, v:bv32) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]]}
function {:inline} $store.bytes.bv24(M:[ref]bv8, p:ref, v:bv24) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]]}
function {:inline} $store.bytes.bv16(M:[ref]bv8, p:ref, v:bv16) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]]}
function {:inline} $store.bytes.bv8(M:[ref]bv8, p:ref, v:bv8) returns ([ref]bv8) {M[p := v]}
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, v: ref) returns ([ref] ref) { M[p := v] }
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, v: float) returns ([ref] float) { M[p := v] }
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
procedure  boogie_si_record_bool(i: bool);
procedure  boogie_si_record_i1(i: i1);
procedure  boogie_si_record_i8(i: i8);
procedure  boogie_si_record_i16(i: i16);
procedure  boogie_si_record_i24(i: i24);
procedure  boogie_si_record_i32(i: i32);
procedure  boogie_si_record_i40(i: i40);
procedure  boogie_si_record_i48(i: i48);
procedure  boogie_si_record_i56(i: i56);
procedure  boogie_si_record_i64(i: i64);
procedure  boogie_si_record_i88(i: i88);
procedure  boogie_si_record_i96(i: i96);
procedure  boogie_si_record_i128(i: i128);
procedure  boogie_si_record_bv1(i: bv1);
procedure  boogie_si_record_bv8(i: bv8);
procedure  boogie_si_record_bv16(i: bv16);
procedure  boogie_si_record_bv24(i: bv24);
procedure  boogie_si_record_bv32(i: bv32);
procedure  boogie_si_record_bv40(i: bv40);
procedure  boogie_si_record_bv48(i: bv48);
procedure  boogie_si_record_bv56(i: bv56);
procedure  boogie_si_record_bv64(i: bv64);
procedure  boogie_si_record_bv88(i: bv88);
procedure  boogie_si_record_bv96(i: bv96);
procedure  boogie_si_record_bv128(i: bv128);
procedure  boogie_si_record_ref(i: ref);
procedure  boogie_si_record_float(i: float);
var $exn: bool;
var $exnv: int;
function $extractvalue(p: int, i: int) returns (int);

procedure  $alloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 138060));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 139092));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 1782, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/home/ankit/smack/smack/share/smack/lib/smack.c", 1787, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 140124));
procedure  llvm.dbg.value($p0: ref, $i1: bv64, $p2: ref, $p3: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 141156));
procedure  __SMACK_static_init()
{
$bb0:
  $M.11 := 0bv32;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_bv32(0bv32);
  $M.12 := 1bv32;
  call {:cexpr "ldv_mutex"} boogie_si_record_bv32(1bv32);
  $M.0 := $store.bytes.ref($M.0, llvm.used, __param_dev);
  $M.0 := $store.bytes.ref($M.0, $add.ref(llvm.used, 8), __mod_devtype34);
  $M.0 := $store.bytes.ref($M.0, $add.ref(llvm.used, 16), __mod_dev35);
  $M.0 := $store.bytes.ref($M.0, $add.ref(llvm.used, 24), __mod_description527);
  $M.0 := $store.bytes.ref($M.0, $add.ref(llvm.used, 32), __mod_author528);
  $M.0 := $store.bytes.ref($M.0, $add.ref(llvm.used, 40), __mod_license529);
  $M.0 := $store.bytes.ref($M.0, __param_dev, __param_str_dev);
  $M.0 := $store.bytes.ref($M.0, $add.ref(__param_dev, 8), param_ops_int);
  $M.0 := $store.bytes.bv16($M.0, $add.ref(__param_dev, 16), 292bv16);
  $M.0 := $store.bytes.bv16($M.0, $add.ref(__param_dev, 18), 0bv16);
  $M.0 := $store.bytes.ref($M.0, $add.ref(__param_dev, 24), dev);
  $M.0 := $store.bytes.bv8($M.0, __mod_devtype34, 112bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_devtype34, 1), 97bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_devtype34, 2), 114bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_devtype34, 3), 109bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_devtype34, 4), 116bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_devtype34, 5), 121bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_devtype34, 6), 112bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_devtype34, 7), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_devtype34, 8), 61bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_devtype34, 9), 100bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_devtype34, 10), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_devtype34, 11), 118bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_devtype34, 12), 58bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_devtype34, 13), 105bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_devtype34, 14), 110bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_devtype34, 15), 116bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_devtype34, 16), 0bv8);
  $M.0 := $store.bytes.bv8($M.0, __mod_dev35, 112bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 1), 97bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 2), 114bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 3), 109bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 4), 61bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 5), 100bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 6), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 7), 118bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 8), 58bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 9), 77bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 10), 84bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 11), 68bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 12), 32bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 13), 100bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 14), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 15), 118bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 16), 105bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 17), 99bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 18), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 19), 32bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 20), 110bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 21), 117bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 22), 109bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 23), 98bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 24), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 25), 114bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 26), 32bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 27), 116bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 28), 111bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 29), 32bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 30), 117bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 31), 115bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 32), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_dev35, 33), 0bv8);
  $M.0 := $store.bytes.bv8($M.0, __mod_description527, 100bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 1), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 2), 115bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 3), 99bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 4), 114bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 5), 105bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 6), 112bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 7), 116bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 8), 105bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 9), 111bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 10), 110bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 11), 61bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 12), 83bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 13), 117bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 14), 98bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 15), 112bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 16), 97bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 17), 103bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 18), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 19), 32bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 20), 116bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 21), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 22), 115bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 23), 116bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 24), 32bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 25), 109bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 26), 111bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 27), 100bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 28), 117bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 29), 108bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 30), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_description527, 31), 0bv8);
  $M.0 := $store.bytes.bv8($M.0, __mod_author528, 97bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 1), 117bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 2), 116bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 3), 104bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 4), 111bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 5), 114bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 6), 61bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 7), 65bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 8), 100bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 9), 114bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 10), 105bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 11), 97bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 12), 110bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 13), 32bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 14), 72bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 15), 117bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 16), 110bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 17), 116bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 18), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 19), 114bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_author528, 20), 0bv8);
  $M.0 := $store.bytes.bv8($M.0, __mod_license529, 108bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license529, 1), 105bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license529, 2), 99bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license529, 3), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license529, 4), 110bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license529, 5), 115bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license529, 6), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license529, 7), 61bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license529, 8), 71bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license529, 9), 80bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license529, 10), 76bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license529, 11), 0bv8);
  $M.0 := $store.bytes.bv8($M.0, __param_str_dev, 100bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__param_str_dev, 1), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__param_str_dev, 2), 118bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__param_str_dev, 3), 0bv8);
  $M.0 := $store.bytes.bv32($M.0, dev, $sub.bv32(0bv32, 22bv32));
  call {:cexpr "dev"} boogie_si_record_bv32($sub.bv32(0bv32, 22bv32));
  $M.9 := 0bv32;
  call {:cexpr "errcnt"} boogie_si_record_bv32(0bv32);
  $M.8 := $0.ref;
  $M.10 := 1bv64;
  call {:cexpr "next"} boogie_si_record_bv64(1bv64);
  $M.7 := $0.ref;
  $M.6 := $0.ref;
  $M.5 := 0bv32;
  call {:cexpr "bufsize"} boogie_si_record_bv32(0bv32);
  $M.4 := 0bv32;
  call {:cexpr "pgcnt"} boogie_si_record_bv32(0bv32);
  $M.3 := 0bv32;
  call {:cexpr "ebcnt"} boogie_si_record_bv32(0bv32);
  $M.2 := 0bv32;
  call {:cexpr "subpgsize"} boogie_si_record_bv32(0bv32);
  $M.1 := $0.ref;
  $exn := false;
  return;
}
procedure  $memset.bv8(M: [ref] bv8, dst: ref, val: bv8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref] bv8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == val);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M[x]);
}

procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
