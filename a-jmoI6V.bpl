// generated by SMACK version 1.9.0 for corral
// via /mnt/local/smack-project/smack/bin/smack -x=svcomp --time-limit 1800 /proj/SMACK/sv-benchmarks/c/ldv-commit-tester/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36.c --bit-precise --verifier-options  /bopt:z3opt:SMT.MBQI=false /noCallTreeReuse /nonUniformUnfolding /trackAllVars /noArrayTheory --unroll 16

// Basic types
type i1 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type ref = i64;
type float = bv32;

// Basic constants
const $0: bv32;
axiom ($0 == 0bv32);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $2.ref: ref;
axiom ($2.ref == 2);
const $3.ref: ref;
axiom ($3.ref == 3);
const $4.ref: ref;
axiom ($4.ref == 4);
const $5.ref: ref;
axiom ($5.ref == 5);
const $6.ref: ref;
axiom ($6.ref == 6);
const $7.ref: ref;
axiom ($7.ref == 7);
const $8.ref: ref;
axiom ($8.ref == 8);
const $9.ref: ref;
axiom ($9.ref == 9);
const $10.ref: ref;
axiom ($10.ref == 10);
const $11.ref: ref;
axiom ($11.ref == 11);
const $12.ref: ref;
axiom ($12.ref == 12);
const $13.ref: ref;
axiom ($13.ref == 13);
const $14.ref: ref;
axiom ($14.ref == 14);
const $1024.ref: ref;
axiom ($1024.ref == 1024);

// Memory maps (9 regions)
var $M.0: [ref] bv8;
var $M.1: bv32;
var $M.2: bv32;
var $M.3: bv32;
var $M.4: bv32;
var $M.5: bv32;
var $M.6: bv32;
var $M.7: bv32;
var $M.8: bv64;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 108982));
axiom ($EXTERNS_BOTTOM == $sub.ref(0, 32800));
axiom ($MALLOC_TOP == 9223372036854775807);

// Bitstd::vector-integer conversions
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2int"} $bv2uint.64(i: bv64) returns (i64);
function {:inline} $bv2int.64(i: bv64) returns (i64) { if $slt.bv64.bool(i, 0bv64) then $sub.i64($bv2uint.64(i), 18446744073709551616) else $bv2uint.64(i) }
// Bytewise pointer storage
function {:inline} $load.bytes.ref(M: [ref] bv8, p: ref) returns (ref) { $i2p.bv64.ref($load.bytes.bv64(M, p)) }
function {:inline} $store.bytes.ref(M: [ref] bv8, p: ref, v: ref)returns ([ref] bv8) { $store.bytes.bv64(M,p,$p2i.ref.bv64(v)) }
// Pointer-number conversions
function {:inline} $p2i.ref.bv8(p: ref) returns (bv8) { $trunc.bv64.bv8($int2bv.64(p)) }
function {:inline} $i2p.bv8.ref(i: bv8) returns (ref) { $bv2int.64($zext.bv8.bv64(i)) }
function {:inline} $p2i.ref.bv16(p: ref) returns (bv16) { $trunc.bv64.bv16($int2bv.64(p)) }
function {:inline} $i2p.bv16.ref(i: bv16) returns (ref) { $bv2int.64($zext.bv16.bv64(i)) }
function {:inline} $p2i.ref.bv32(p: ref) returns (bv32) { $trunc.bv64.bv32($int2bv.64(p)) }
function {:inline} $i2p.bv32.ref(i: bv32) returns (ref) { $bv2int.64($zext.bv32.bv64(i)) }
function {:inline} $p2i.ref.bv64(p: ref) returns (bv64) { $int2bv.64(p) }
function {:inline} $i2p.bv64.ref(i: bv64) returns (ref) { $bv2int.64(i) }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (bv1) { if $eq.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (bv1) { if $ne.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (bv1) { if $ugt.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (bv1) { if $uge.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (bv1) { if $ult.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (bv1) { if $ule.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (bv1) { if $sgt.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (bv1) { if $sge.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (bv1) { if $slt.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (bv1) { if $sle.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

const LDV_IN_INTERRUPT: ref;
axiom (LDV_IN_INTERRUPT == $sub.ref(0, 1028));
const __mod_pci_device_table: ref;
axiom (__mod_pci_device_table == $sub.ref(0, 2084));
const {:count 2} ni6527_boards: ref;
axiom (ni6527_boards == $sub.ref(0, 3140));
const {:count 3} ni6527_pci_table: ref;
axiom (ni6527_pci_table == $sub.ref(0, 4260));
const driver_ni6527_pci_driver: ref;
axiom (driver_ni6527_pci_driver == $sub.ref(0, 5572));
const driver_ni6527: ref;
axiom (driver_ni6527 == $sub.ref(0, 6660));
const {:count 7} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 7691));
const __this_module: ref;
axiom (__this_module == $sub.ref(0, 32776));
const {:count 21} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 8736));
const {:count 34} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 9794));
const {:count 32} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 10850));
const range_unipolar5: ref;
axiom (range_unipolar5 == $sub.ref(0, 32784));
const range_unknown: ref;
axiom (range_unknown == $sub.ref(0, 32792));
const {:count 35} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 11909));
const {:count 40} .str.9: ref;
axiom (.str.9 == $sub.ref(0, 12973));
const mite_devices: ref;
axiom (mite_devices == $sub.ref(0, 32800));
const {:count 33} .str.6: ref;
axiom (.str.6 == $sub.ref(0, 14030));
const {:count 9} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 15063));
const {:count 9} .str.8: ref;
axiom (.str.8 == $sub.ref(0, 16096));
const .str: ref;
axiom (.str == $sub.ref(0, 17128));
const {:count 14} .str.2.14: ref;
axiom (.str.2.14 == $sub.ref(0, 18166));
const ldv_module_author: ref;
axiom (ldv_module_author == $sub.ref(0, 19198));
procedure  ldv_module_author()
  returns ($r: bv32)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2363, 3} true;
  assume {:verifier.code 0} true;
  $r := 1bv32;
  $exn := false;
  return;
}
const ni6527_attach: ref;
axiom (ni6527_attach == $sub.ref(0, 20230));
procedure  ni6527_attach($p0: ref, $p1: ref)
  returns ($r: bv32)
{
  var $p2: ref;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv32;
  var $i6: bv1;
  var $p8: ref;
  var $p9: ref;
  var $i10: bv32;
  var $p11: ref;
  var $p12: ref;
  var $i13: bv32;
  var $i14: bv32;
  var $i15: bv1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: bv32;
  var $i22: bv1;
  var $i23: bv32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: bv8;
  var $p39: ref;
  var $p40: ref;
  var $i41: bv32;
  var $i42: bv32;
  var $i43: bv32;
  var $i44: bv1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: bv32;
  var $p123: ref;
  var $i124: bv32;
  var $i125: bv1;
  var $i126: bv32;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: bv32;
  var $p133: ref;
  var $i7: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2155, 40} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2155, 40} true;
  assume {:verifier.code 0} true;
  $i3 := $load.bytes.bv32($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2155, 3} true;
  assume {:verifier.code 0} true;
  call $i4 := printk.ref.bv32(.str.2, $i3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2156, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := alloc_private($p0, 16bv32);
  // WARNING: %6 = call i32 @alloc_private(%struct.comedi_device* %0, i32 16), !dbg !1837, !verifier.code !1831
  call {:cexpr "ret"} boogie_si_record_bv32($i5);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2157, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $slt.bv32($i5, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2157, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2158, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $i5;
  goto $bb3;
$bb2:
  assume !(($i6 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2225, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2162, 37} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p1, 20);
  $p9 := $add.ref($p1, 20);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2162, 33} true;
  assume {:verifier.code 0} true;
  $i10 := $load.bytes.bv32($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2162, 53} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p1, 20);
  $p12 := $add.ref($add.ref($p1, 20), 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2162, 49} true;
  assume {:verifier.code 0} true;
  $i13 := $load.bytes.bv32($M.0, $p12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2162, 9} true;
  assume {:verifier.code 0} true;
  call $i14 := ni6527_find_device($p0, $i10, $i13);
  // WARNING: %17 = call i32 @ni6527_find_device(%struct.comedi_device* %0, i32 %13, i32 %16), !dbg !1849, !verifier.code !1831
  call {:cexpr "ret"} boogie_si_record_bv32($i14);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2163, 11} true;
  assume {:verifier.code 0} true;
  $i15 := $slt.bv32($i14, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2163, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i15 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2164, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $i14;
  goto $bb3;
$bb6:
  assume !(($i15 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2168, 51} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2168, 51} true;
  assume {:verifier.code 0} true;
  $p17 := $load.bytes.ref($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2168, 21} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p17);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2168, 61} true;
  assume {:verifier.code 0} true;
  $p19 := $p18;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2168, 61} true;
  assume {:verifier.code 0} true;
  $p20 := $load.bytes.ref($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2168, 9} true;
  assume {:verifier.code 0} true;
  call $i21 := mite_setup($p20);
  // WARNING: %27 = call i32 @mite_setup(%struct.mite_struct* %26), !dbg !1858, !verifier.code !1831
  call {:cexpr "ret"} boogie_si_record_bv32($i21);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2169, 11} true;
  assume {:verifier.code 0} true;
  $i22 := $slt.bv32($i21, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2169, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i22 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2170, 5} true;
  assume {:verifier.code 0} true;
  call $i23 := printk.ref(.str.3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2171, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $i21;
  goto $bb3;
$bb9:
  assume !(($i22 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2175, 58} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p0, 56);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2175, 58} true;
  assume {:verifier.code 0} true;
  $p25 := $load.bytes.ref($M.0, $p24);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2175, 22} true;
  assume {:verifier.code 0} true;
  $p26 := $bitcast.ref.ref($p25);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2175, 70} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p26, 8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2175, 70} true;
  assume {:verifier.code 0} true;
  $p28 := $load.bytes.ref($M.0, $p27);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2175, 8} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p0, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2175, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p29, $p28);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2176, 72} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2176, 72} true;
  assume {:verifier.code 0} true;
  $p31 := $load.bytes.ref($M.0, $p30);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2176, 42} true;
  assume {:verifier.code 0} true;
  $p32 := $bitcast.ref.ref($p31);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2176, 82} true;
  assume {:verifier.code 0} true;
  $p33 := $p32;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2176, 82} true;
  assume {:verifier.code 0} true;
  $p34 := $load.bytes.ref($M.0, $p33);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2176, 89} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($p34, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2176, 89} true;
  assume {:verifier.code 0} true;
  $p36 := $load.bytes.ref($M.0, $p35);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2176, 101} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p36, 6);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2176, 9} true;
  assume {:verifier.code 0} true;
  call $i38 := readb($p37);
  // WARNING: %47 = call zeroext i8 @readb(i8* %46), !dbg !1875, !verifier.code !1831
  call {:cexpr "tmp"} boogie_si_record_bv8($i38);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2177, 51} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p0, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2177, 51} true;
  assume {:verifier.code 0} true;
  $p40 := $load.bytes.ref($M.0, $p39);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2177, 63} true;
  assume {:verifier.code 0} true;
  $i41 := $zext.bv8.bv32($i38);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2177, 3} true;
  assume {:verifier.code 0} true;
  call $i42 := printk.ref.ref.bv32(.str.4, $p40, $i41);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2178, 9} true;
  assume {:verifier.code 0} true;
  call $i43 := alloc_subdevices($p0, 3bv32);
  // WARNING: %52 = call i32 @alloc_subdevices(%struct.comedi_device* %0, i32 3), !dbg !1881, !verifier.code !1831
  call {:cexpr "ret"} boogie_si_record_bv32($i43);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2179, 11} true;
  assume {:verifier.code 0} true;
  $i44 := $slt.bv32($i43, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2179, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i44 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2180, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $i43;
  goto $bb3;
$bb12:
  assume !(($i44 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2184, 12} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($p0, 320);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2184, 12} true;
  assume {:verifier.code 0} true;
  $p46 := $load.bytes.ref($M.0, $p45);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2185, 6} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($p46, 8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2185, 11} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p47, 3bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2186, 6} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($p46, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2186, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p48, 65536bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2187, 6} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($p46, 12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2187, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p49, 24bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2188, 6} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($p46, 176);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2188, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p50, range_unipolar5);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2189, 6} true;
  assume {:verifier.code 0} true;
  $p51 := $add.ref($p46, 140);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2189, 14} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p51, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2190, 6} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($p46, 224);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2190, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p52, ni6527_di_insn_config);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2191, 6} true;
  assume {:verifier.code 0} true;
  $p53 := $add.ref($p46, 216);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2191, 16} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p53, ni6527_di_insn_bits);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2192, 12} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($p0, 320);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2192, 12} true;
  assume {:verifier.code 0} true;
  $p55 := $load.bytes.ref($M.0, $p54);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2192, 23} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($p55, 304);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2193, 6} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($add.ref($p55, 304), 8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2193, 11} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p57, 4bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2194, 6} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($add.ref($p55, 304), 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2194, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p58, 196608bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2195, 6} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($add.ref($p55, 304), 12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2195, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p59, 24bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2196, 6} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($add.ref($p55, 304), 176);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2196, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p60, range_unknown);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2197, 6} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($add.ref($p55, 304), 140);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2197, 14} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p61, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2198, 6} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p55, 304), 216);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2198, 16} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p62, ni6527_do_insn_bits);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2199, 12} true;
  assume {:verifier.code 0} true;
  $p63 := $add.ref($p0, 320);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2199, 12} true;
  assume {:verifier.code 0} true;
  $p64 := $load.bytes.ref($M.0, $p63);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2199, 23} true;
  assume {:verifier.code 0} true;
  $p65 := $add.ref($p64, 608);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2200, 8} true;
  assume {:verifier.code 0} true;
  $p66 := $add.ref($p0, 344);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2200, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p66, $p65);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2201, 6} true;
  assume {:verifier.code 0} true;
  $p67 := $add.ref($add.ref($p64, 608), 8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2201, 11} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p67, 3bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2202, 6} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($add.ref($p64, 608), 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2202, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p68, 98304bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2203, 6} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($add.ref($p64, 608), 12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2203, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p69, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2204, 6} true;
  assume {:verifier.code 0} true;
  $p70 := $add.ref($add.ref($p64, 608), 176);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2204, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p70, range_unknown);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2205, 6} true;
  assume {:verifier.code 0} true;
  $p71 := $add.ref($add.ref($p64, 608), 140);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2205, 14} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p71, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2206, 6} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($add.ref($p64, 608), 240);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2206, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p72, ni6527_intr_cmdtest);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2207, 6} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($add.ref($p64, 608), 232);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2207, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p73, ni6527_intr_cmd);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2208, 6} true;
  assume {:verifier.code 0} true;
  $p74 := $add.ref($add.ref($p64, 608), 256);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2208, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p74, ni6527_intr_cancel);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2209, 6} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($add.ref($p64, 608), 216);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2209, 16} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p75, ni6527_intr_insn_bits);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2210, 6} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($add.ref($p64, 608), 224);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2210, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p76, ni6527_intr_insn_config);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2211, 64} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2211, 64} true;
  assume {:verifier.code 0} true;
  $p78 := $load.bytes.ref($M.0, $p77);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2211, 34} true;
  assume {:verifier.code 0} true;
  $p79 := $bitcast.ref.ref($p78);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2211, 74} true;
  assume {:verifier.code 0} true;
  $p80 := $p79;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2211, 74} true;
  assume {:verifier.code 0} true;
  $p81 := $load.bytes.ref($M.0, $p80);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2211, 81} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($p81, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2211, 81} true;
  assume {:verifier.code 0} true;
  $p83 := $load.bytes.ref($M.0, $p82);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2211, 93} true;
  assume {:verifier.code 0} true;
  $p84 := $add.ref($p83, 12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2211, 3} true;
  assume {:verifier.code 0} true;
  call writeb(0bv8, $p84);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2212, 64} true;
  assume {:verifier.code 0} true;
  $p85 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2212, 64} true;
  assume {:verifier.code 0} true;
  $p86 := $load.bytes.ref($M.0, $p85);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2212, 34} true;
  assume {:verifier.code 0} true;
  $p87 := $bitcast.ref.ref($p86);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2212, 74} true;
  assume {:verifier.code 0} true;
  $p88 := $p87;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2212, 74} true;
  assume {:verifier.code 0} true;
  $p89 := $load.bytes.ref($M.0, $p88);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2212, 81} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($p89, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2212, 81} true;
  assume {:verifier.code 0} true;
  $p91 := $load.bytes.ref($M.0, $p90);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2212, 93} true;
  assume {:verifier.code 0} true;
  $p92 := $add.ref($p91, 13);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2212, 3} true;
  assume {:verifier.code 0} true;
  call writeb(0bv8, $p92);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2213, 64} true;
  assume {:verifier.code 0} true;
  $p93 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2213, 64} true;
  assume {:verifier.code 0} true;
  $p94 := $load.bytes.ref($M.0, $p93);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2213, 34} true;
  assume {:verifier.code 0} true;
  $p95 := $bitcast.ref.ref($p94);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2213, 74} true;
  assume {:verifier.code 0} true;
  $p96 := $p95;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2213, 74} true;
  assume {:verifier.code 0} true;
  $p97 := $load.bytes.ref($M.0, $p96);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2213, 81} true;
  assume {:verifier.code 0} true;
  $p98 := $add.ref($p97, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2213, 81} true;
  assume {:verifier.code 0} true;
  $p99 := $load.bytes.ref($M.0, $p98);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2213, 93} true;
  assume {:verifier.code 0} true;
  $p100 := $add.ref($p99, 14);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2213, 3} true;
  assume {:verifier.code 0} true;
  call writeb(0bv8, $p100);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2214, 65} true;
  assume {:verifier.code 0} true;
  $p101 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2214, 65} true;
  assume {:verifier.code 0} true;
  $p102 := $load.bytes.ref($M.0, $p101);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2214, 35} true;
  assume {:verifier.code 0} true;
  $p103 := $bitcast.ref.ref($p102);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2214, 75} true;
  assume {:verifier.code 0} true;
  $p104 := $p103;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2214, 75} true;
  assume {:verifier.code 0} true;
  $p105 := $load.bytes.ref($M.0, $p104);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2214, 82} true;
  assume {:verifier.code 0} true;
  $p106 := $add.ref($p105, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2214, 82} true;
  assume {:verifier.code 0} true;
  $p107 := $load.bytes.ref($M.0, $p106);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2214, 94} true;
  assume {:verifier.code 0} true;
  $p108 := $add.ref($p107, 7);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2214, 3} true;
  assume {:verifier.code 0} true;
  call writeb(15bv8, $p108);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2215, 64} true;
  assume {:verifier.code 0} true;
  $p109 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2215, 64} true;
  assume {:verifier.code 0} true;
  $p110 := $load.bytes.ref($M.0, $p109);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2215, 34} true;
  assume {:verifier.code 0} true;
  $p111 := $bitcast.ref.ref($p110);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2215, 74} true;
  assume {:verifier.code 0} true;
  $p112 := $p111;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2215, 74} true;
  assume {:verifier.code 0} true;
  $p113 := $load.bytes.ref($M.0, $p112);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2215, 81} true;
  assume {:verifier.code 0} true;
  $p114 := $add.ref($p113, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2215, 81} true;
  assume {:verifier.code 0} true;
  $p115 := $load.bytes.ref($M.0, $p114);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2215, 93} true;
  assume {:verifier.code 0} true;
  $p116 := $add.ref($p115, 21);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2215, 3} true;
  assume {:verifier.code 0} true;
  call writeb(0bv8, $p116);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2216, 53} true;
  assume {:verifier.code 0} true;
  $p117 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2216, 53} true;
  assume {:verifier.code 0} true;
  $p118 := $load.bytes.ref($M.0, $p117);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2216, 23} true;
  assume {:verifier.code 0} true;
  $p119 := $bitcast.ref.ref($p118);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2216, 63} true;
  assume {:verifier.code 0} true;
  $p120 := $p119;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2216, 63} true;
  assume {:verifier.code 0} true;
  $p121 := $load.bytes.ref($M.0, $p120);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2216, 13} true;
  assume {:verifier.code 0} true;
  call $i122 := mite_irq($p121);
  // WARNING: %134 = call i32 @mite_irq(%struct.mite_struct* %133), !dbg !1975, !verifier.code !1831
  call {:cexpr "tmp___0"} boogie_si_record_bv32($i122);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2217, 67} true;
  assume {:verifier.code 0} true;
  $p123 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2217, 9} true;
  assume {:verifier.code 0} true;
  call $i124 := request_irq($i122, ni6527_interrupt, 128bv64, .str.1, $p123);
  // WARNING: %136 = call i32 @request_irq(i32 %134, i32 (i32, i8*)* @ni6527_interrupt, i64 128, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %135), !dbg !1979, !verifier.code !1831
  call {:cexpr "ret"} boogie_si_record_bv32($i124);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2218, 11} true;
  assume {:verifier.code 0} true;
  $i125 := $slt.bv32($i124, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2218, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i125} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i125 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2219, 5} true;
  assume {:verifier.code 0} true;
  call $i126 := printk.ref(.str.5);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2220, 3} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i125 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2221, 56} true;
  assume {:verifier.code 0} true;
  $p127 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2221, 56} true;
  assume {:verifier.code 0} true;
  $p128 := $load.bytes.ref($M.0, $p127);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2221, 26} true;
  assume {:verifier.code 0} true;
  $p129 := $bitcast.ref.ref($p128);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2221, 66} true;
  assume {:verifier.code 0} true;
  $p130 := $p129;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2221, 66} true;
  assume {:verifier.code 0} true;
  $p131 := $load.bytes.ref($M.0, $p130);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2221, 16} true;
  assume {:verifier.code 0} true;
  call $i132 := mite_irq($p131);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2221, 10} true;
  assume {:verifier.code 0} true;
  $p133 := $add.ref($p0, 336);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2221, 14} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p133, $i132);
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2223, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 0bv32;
  goto $bb3;
}
const ni6527_detach: ref;
axiom (ni6527_detach == $sub.ref(0, 21262));
procedure  ni6527_detach($p0: ref)
  returns ($r: bv32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: bv64;
  var $i4: bv1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: bv64;
  var $i11: bv1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: bv64;
  var $i20: bv1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: bv32;
  var $i31: bv1;
  var $p32: ref;
  var $i33: bv32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: bv64;
  var $i38: bv1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: bv64;
  var $i45: bv1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 29} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 29} true;
  assume {:verifier.code 0} true;
  $p2 := $load.bytes.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 8} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.bv64($p2);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 37} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.bv64($i3, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 68} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 118} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 118} true;
  assume {:verifier.code 0} true;
  $p6 := $load.bytes.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 88} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p6);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 128} true;
  assume {:verifier.code 0} true;
  $p8 := $p7;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 128} true;
  assume {:verifier.code 0} true;
  $p9 := $load.bytes.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 71} true;
  assume {:verifier.code 0} true;
  $i10 := $p2i.ref.bv64($p9);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 133} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.bv64($i10, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 179} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 68} true;
  assume {:verifier.code 0} true;
  assume !(($i4 == 1bv1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb8;
$bb4:
  assume ($i11 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 230} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 230} true;
  assume {:verifier.code 0} true;
  $p13 := $load.bytes.ref($M.0, $p12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 200} true;
  assume {:verifier.code 0} true;
  $p14 := $bitcast.ref.ref($p13);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 240} true;
  assume {:verifier.code 0} true;
  $p15 := $p14;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 240} true;
  assume {:verifier.code 0} true;
  $p16 := $load.bytes.ref($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 247} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p16, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 247} true;
  assume {:verifier.code 0} true;
  $p18 := $load.bytes.ref($M.0, $p17);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 182} true;
  assume {:verifier.code 0} true;
  $i19 := $p2i.ref.bv64($p18);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 259} true;
  assume {:verifier.code 0} true;
  $i20 := $ne.bv64($i19, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb6, $bb7;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 179} true;
  assume {:verifier.code 0} true;
  assume !(($i11 == 1bv1));
  goto $bb3;
$bb6:
  assume ($i20 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2232, 66} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2232, 66} true;
  assume {:verifier.code 0} true;
  $p22 := $load.bytes.ref($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2232, 36} true;
  assume {:verifier.code 0} true;
  $p23 := $bitcast.ref.ref($p22);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2232, 76} true;
  assume {:verifier.code 0} true;
  $p24 := $p23;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2232, 76} true;
  assume {:verifier.code 0} true;
  $p25 := $load.bytes.ref($M.0, $p24);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2232, 83} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p25, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2232, 83} true;
  assume {:verifier.code 0} true;
  $p27 := $load.bytes.ref($M.0, $p26);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2232, 95} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p27, 21);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2232, 5} true;
  assume {:verifier.code 0} true;
  call writeb(0bv8, $p28);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2233, 3} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2231, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i20 == 1bv1));
  goto $bb3;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2236, 12} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p0, 336);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2236, 12} true;
  assume {:verifier.code 0} true;
  $i30 := $load.bytes.bv32($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2236, 16} true;
  assume {:verifier.code 0} true;
  $i31 := $ne.bv32($i30, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2236, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i31 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2237, 19} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p0, 336);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2237, 19} true;
  assume {:verifier.code 0} true;
  $i33 := $load.bytes.bv32($M.0, $p32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2237, 24} true;
  assume {:verifier.code 0} true;
  $p34 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2237, 5} true;
  assume {:verifier.code 0} true;
  call free_irq($i33, $p34);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2238, 3} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume !(($i31 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2241, 28} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2241, 28} true;
  assume {:verifier.code 0} true;
  $p36 := $load.bytes.ref($M.0, $p35);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2241, 7} true;
  assume {:verifier.code 0} true;
  $i37 := $p2i.ref.bv64($p36);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2241, 36} true;
  assume {:verifier.code 0} true;
  $i38 := $ne.bv64($i37, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2241, 67} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb12, $bb13;
$bb12:
  assume ($i38 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2241, 117} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2241, 117} true;
  assume {:verifier.code 0} true;
  $p40 := $load.bytes.ref($M.0, $p39);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2241, 87} true;
  assume {:verifier.code 0} true;
  $p41 := $bitcast.ref.ref($p40);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2241, 127} true;
  assume {:verifier.code 0} true;
  $p42 := $p41;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2241, 127} true;
  assume {:verifier.code 0} true;
  $p43 := $load.bytes.ref($M.0, $p42);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2241, 70} true;
  assume {:verifier.code 0} true;
  $i44 := $p2i.ref.bv64($p43);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2241, 132} true;
  assume {:verifier.code 0} true;
  $i45 := $ne.bv64($i44, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2241, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb15, $bb16;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2241, 67} true;
  assume {:verifier.code 0} true;
  assume !(($i38 == 1bv1));
  goto $bb14;
$bb14:
  assume {:verifier.code 0} true;
  goto $bb17;
$bb15:
  assume ($i45 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2242, 49} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2242, 49} true;
  assume {:verifier.code 0} true;
  $p47 := $load.bytes.ref($M.0, $p46);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2242, 19} true;
  assume {:verifier.code 0} true;
  $p48 := $bitcast.ref.ref($p47);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2242, 59} true;
  assume {:verifier.code 0} true;
  $p49 := $p48;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2242, 59} true;
  assume {:verifier.code 0} true;
  $p50 := $load.bytes.ref($M.0, $p49);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2242, 5} true;
  assume {:verifier.code 0} true;
  call mite_unsetup($p50);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2243, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2241, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i45 == 1bv1));
  goto $bb14;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2246, 3} true;
  assume {:verifier.code 0} true;
  $r := 0bv32;
  $exn := false;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 22294));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const writeb: ref;
axiom (writeb == $sub.ref(0, 23326));
procedure  writeb($i0: bv8, $p1: ref)
{
$bb0:
  call devirtbounce(0, $i0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1769, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const free_irq: ref;
axiom (free_irq == $sub.ref(0, 24358));
procedure  free_irq($i0: bv32, $p1: ref);
const mite_unsetup: ref;
axiom (mite_unsetup == $sub.ref(0, 25390));
procedure  mite_unsetup($p0: ref);
const printk: ref;
axiom (printk == $sub.ref(0, 26422));
procedure  printk.ref($p0: ref)
  returns ($r: bv32);
procedure  printk.ref.ref.bv32($p0: ref, p.1: ref, p.2: bv32)
  returns ($r: bv32);
procedure  printk.ref.bv32($p0: ref, p.1: bv32)
  returns ($r: bv32);
const alloc_private: ref;
axiom (alloc_private == $sub.ref(0, 27454));
procedure  alloc_private($p0: ref, $i1: bv32)
  returns ($r: bv32)
{
  var $i2: bv64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: bv64;
  var $i8: bv1;
  var $i9: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.comedi_device* %0, i64 0, metadata !2070, metadata !1833), !dbg !2071, !verifier.code !1830
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1817, 26} true;
  assume {:verifier.code 0} true;
  $i2 := $sext.bv32.bv64($i1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1817, 18} true;
  assume {:verifier.code 0} true;
  call $p3 := kzalloc($i2, 208bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1817, 8} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1817, 16} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p4, $p3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1818, 28} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1818, 28} true;
  assume {:verifier.code 0} true;
  $p6 := $load.bytes.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1818, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.bv64($p6);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1818, 36} true;
  assume {:verifier.code 0} true;
  $i8 := $eq.bv64($i7, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1818, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1819, 5} true;
  assume {:verifier.code 0} true;
  $i9 := $sub.bv32(0bv32, 12bv32);
  goto $bb3;
$bb2:
  assume !(($i8 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1825, 1} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1823, 3} true;
  assume {:verifier.code 0} true;
  $i9 := 0bv32;
  goto $bb3;
}
const ni6527_find_device: ref;
axiom (ni6527_find_device == $sub.ref(0, 28486));
procedure  ni6527_find_device($p0: ref, $i1: bv32, $i2: bv32)
  returns ($r: bv32)
{
  var $p3: ref;
  var $i4: bv64;
  var $i5: bv1;
  var $p7: ref;
  var $i8: bv32;
  var $i9: bv1;
  var $i11: bv1;
  var $i12: bv1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: bv8;
  var $i19: bv32;
  var $i20: bv1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: bv32;
  var $i25: bv32;
  var $i26: bv32;
  var $i27: bv1;
  var $i29: bv32;
  var $i30: bv64;
  var $p31: ref;
  var $p32: ref;
  var $i33: bv32;
  var $i34: bv1;
  var $p35: ref;
  var $i36: bv32;
  var $i37: bv64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i45: bv32;
  var $i46: bv1;
  var $i28: bv32;
  var $p10: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: bv64;
  var $i50: bv1;
  var $p6: ref;
  var $i51: bv32;
  var $i44: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.comedi_device* %0, i64 0, metadata !2091, metadata !1833), !dbg !2092, !verifier.code !1830
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !2093, metadata !1833), !dbg !2094, !verifier.code !1830
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2256, 10} true;
  assume {:verifier.code 0} true;
  $p3 := $load.bytes.ref($M.0, mite_devices);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2295, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $p2i.ref.bv64($p3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2295, 28} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.bv64($i4, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2295, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2295, 7} true;
  assume {:verifier.code 0} true;
  $p6 := $p3;
  goto $bb4;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2295, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1bv1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb33;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2296, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2259, 13} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p6, 8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2259, 13} true;
  assume {:verifier.code 0} true;
  $i8 := $load.bytes.bv32($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2259, 18} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.bv32($i8, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2259, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i9 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2260, 5} true;
  assume {:verifier.code 0} true;
  $p10 := $p6;
  goto $bb8;
$bb7:
  assume !(($i9 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2293, 16} true;
  assume {:verifier.code 0} true;
  $p47 := $p10;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2293, 16} true;
  assume {:verifier.code 0} true;
  $p48 := $load.bytes.ref($M.0, $p47);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2295, 7} true;
  assume {:verifier.code 0} true;
  $i49 := $p2i.ref.bv64($p48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2295, 28} true;
  assume {:verifier.code 0} true;
  $i50 := $ne.bv64($i49, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2295, 7} true;
  assume {:verifier.code 0} true;
  $p6 := $p48;
  assume {:branchcond $i50} true;
  goto $bb31, $bb32;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2264, 11} true;
  assume {:verifier.code 0} true;
  $i11 := $ne.bv32($i1, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2264, 16} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb10, $bb12;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2264, 16} true;
  assume {:verifier.code 0} true;
  assume ($i11 == 1bv1);
  goto $bb11;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 23} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p6, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 23} true;
  assume {:verifier.code 0} true;
  $p14 := $load.bytes.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 32} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p14, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 32} true;
  assume {:verifier.code 0} true;
  $p16 := $load.bytes.ref($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 38} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p16, 152);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 38} true;
  assume {:verifier.code 0} true;
  $i18 := $load.bytes.bv8($M.0, $p17);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 9} true;
  assume {:verifier.code 0} true;
  $i19 := $zext.bv8.bv32($i18);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 45} true;
  assume {:verifier.code 0} true;
  $i20 := $ne.bv32($i19, $i1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 52} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb15, $bb17;
$bb12:
  assume !(($i11 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2264, 24} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.bv32($i2, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2264, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb13, $bb14;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2264, 7} true;
  assume {:verifier.code 0} true;
  assume ($i12 == 1bv1);
  goto $bb11;
$bb14:
  assume !(($i12 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb21;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 52} true;
  assume {:verifier.code 0} true;
  assume ($i20 == 1bv1);
  goto $bb16;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2266, 7} true;
  assume {:verifier.code 0} true;
  $p10 := $p6;
  goto $bb8;
$bb17:
  assume !(($i20 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 87} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p6, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 87} true;
  assume {:verifier.code 0} true;
  $p22 := $load.bytes.ref($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 96} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p22, 56);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 96} true;
  assume {:verifier.code 0} true;
  $i24 := $load.bytes.bv32($M.0, $p23);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 102} true;
  assume {:verifier.code 0} true;
  $i25 := $lshr.bv32($i24, 3bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 108} true;
  assume {:verifier.code 0} true;
  $i26 := $and.bv32($i25, 31bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 75} true;
  assume {:verifier.code 0} true;
  $i27 := $ne.bv32($i2, $i26);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb18, $bb19;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2265, 9} true;
  assume {:verifier.code 0} true;
  assume ($i27 == 1bv1);
  goto $bb16;
$bb19:
  assume !(($i27 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb20;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2270, 3} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2286, 7} true;
  assume {:verifier.code 0} true;
  $i28 := 0bv32;
  goto $bb22;
$bb22:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2287, 5} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2276, 9} true;
  assume {:verifier.code 0} true;
  call $i29 := mite_device_id($p6);
  // WARNING: %40 = call i32 @mite_device_id(%struct.mite_struct* %.026), !dbg !1879, !verifier.code !1833
  call {:cexpr "tmp"} boogie_si_record_bv32($i29);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2277, 29} true;
  assume {:verifier.code 0} true;
  $i30 := $sext.bv32.bv64($i28);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2277, 29} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref(ni6527_boards, $mul.ref($bv2int.64($i30), 16));
  $p32 := $add.ref(ni6527_boards, $mul.ref($bv2int.64($i30), 16));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2277, 46} true;
  assume {:verifier.code 0} true;
  $i33 := $load.bytes.bv32($M.0, $p32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2277, 11} true;
  assume {:verifier.code 0} true;
  $i34 := $eq.bv32($i29, $i33);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2277, 7} true;
  assume {:verifier.code 0} true;
  $p35, $i36 := $p6, $i28;
  assume {:branchcond $i34} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i34 == 1bv1);
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2278, 58} true;
  assume {:verifier.code 0} true;
  $i37 := $sext.bv32.bv64($i36);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2278, 56} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref(ni6527_boards, $mul.ref($bv2int.64($i37), 1));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2278, 10} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p0, 56);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2278, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p39, $p38);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2279, 36} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2279, 36} true;
  assume {:verifier.code 0} true;
  $p41 := $load.bytes.ref($M.0, $p40);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2279, 6} true;
  assume {:verifier.code 0} true;
  $p42 := $bitcast.ref.ref($p41);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2279, 46} true;
  assume {:verifier.code 0} true;
  $p43 := $p42;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2279, 51} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p43, $p35);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2280, 5} true;
  assume {:verifier.code 0} true;
  $i44 := 0bv32;
  goto $bb26;
$bb25:
  assume !(($i34 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb27;
$bb26:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2304, 1} true;
  assume {:verifier.code 0} true;
  $r := $i44;
  $exn := false;
  return;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2284, 9} true;
  assume {:verifier.code 0} true;
  $i45 := $add.bv32($i28, 1bv32);
  // WARNING: %56 = add nsw i32 %.015, 1, !dbg !1897, !verifier.code !1833
  call {:cexpr "i"} boogie_si_record_bv32($i45);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2286, 24} true;
  assume {:verifier.code 0} true;
  $i46 := $ule.bv32($i45, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2286, 7} true;
  assume {:verifier.code 0} true;
  $i28 := $i45;
  assume {:branchcond $i46} true;
  goto $bb28, $bb29;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2286, 7} true;
  assume {:verifier.code 0} true;
  assume ($i46 == 1bv1);
  goto $bb22;
$bb29:
  assume !(($i46 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb30;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2286, 27} true;
  assume {:verifier.code 0} true;
  $p10 := $p6;
  goto $bb8;
$bb31:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2295, 7} true;
  assume {:verifier.code 0} true;
  assume ($i50 == 1bv1);
  goto $bb4;
$bb32:
  assume !(($i50 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2295, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb33:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2300, 3} true;
  assume {:verifier.code 0} true;
  call $i51 := printk.ref(.str.6);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2301, 3} true;
  assume {:verifier.code 0} true;
  call mite_list_devices();
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2302, 3} true;
  assume {:verifier.code 0} true;
  $i44 := $sub.bv32(0bv32, 5bv32);
  goto $bb26;
}
const mite_setup: ref;
axiom (mite_setup == $sub.ref(0, 29518));
procedure  mite_setup($p0: ref)
  returns ($r: bv32);
const readb: ref;
axiom (readb == $sub.ref(0, 30550));
procedure  readb($p0: ref)
  returns ($r: bv8)
{
  var $i1: bv8;
$bb0:
  call $i1 := devirtbounce.1(0, $p0);
  // WARNING: %2 = call i8 @devirtbounce.1(i8 (i8*)* asm sideeffect "movb $1,$0", "=q,*m,~{memory},~{dirflag},~{fpsr},~{flags}", i8* %0)
  call {:cexpr "ret"} boogie_si_record_bv8($i1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1760, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const alloc_subdevices: ref;
axiom (alloc_subdevices == $sub.ref(0, 31582));
procedure  alloc_subdevices($p0: ref, $i1: bv32)
  returns ($r: bv32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: bv64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: bv64;
  var $i11: bv1;
  var $i13: bv1;
  var $p15: ref;
  var $p16: ref;
  var $i17: bv64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: bv64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: bv64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: bv64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: bv64;
  var $p41: ref;
  var $p42: ref;
  var $i43: bv32;
  var $i44: bv1;
  var $i14: bv32;
  var $i12: bv32;
$bb0:
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $bv2int.64($zext.bv32.bv64(1bv32))));
  // WARNING: call void @llvm.dbg.value(metadata %struct.comedi_device* %0, i64 0, metadata !2182, metadata !1833), !dbg !2183, !verifier.code !1830
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1784, 8} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0, 316);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1784, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p3, $i1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1785, 17} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.bv32.bv64($i1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1785, 9} true;
  assume {:verifier.code 0} true;
  call $p5 := kcalloc($i4, 304bv64, 208bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1786, 21} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p5);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1786, 8} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p0, 320);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1786, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p7, $p5);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1787, 28} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 320);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1787, 28} true;
  assume {:verifier.code 0} true;
  $p9 := $load.bytes.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1787, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $p2i.ref.bv64($p9);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1787, 39} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.bv64($i10, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1787, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i11 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1788, 5} true;
  assume {:verifier.code 0} true;
  $i12 := $sub.bv32(0bv32, 12bv32);
  goto $bb3;
$bb2:
  assume !(($i11 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1811, 1} true;
  assume {:verifier.code 0} true;
  $r := $i12;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1803, 9} true;
  assume {:verifier.code 0} true;
  $i13 := $ult.bv32(0bv32, $i1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1803, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i13 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1803, 7} true;
  assume {:verifier.code 0} true;
  $i14 := 0bv32;
  goto $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1803, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i13 == 1bv1));
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  goto $bb12;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1804, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1795, 9} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p0, 320);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1795, 9} true;
  assume {:verifier.code 0} true;
  $p16 := $load.bytes.ref($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1795, 22} true;
  assume {:verifier.code 0} true;
  $i17 := $zext.bv32.bv64($i14);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1795, 20} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p16, $mul.ref($bv2int.64($i17), 304));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1795, 42} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p16, $mul.ref($bv2int.64($i17), 304));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1795, 49} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p19, $p0);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1796, 9} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p0, 320);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1796, 9} true;
  assume {:verifier.code 0} true;
  $p21 := $load.bytes.ref($M.0, $p20);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1796, 22} true;
  assume {:verifier.code 0} true;
  $i22 := $zext.bv32.bv64($i14);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1796, 20} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p21, $mul.ref($bv2int.64($i22), 304));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1796, 42} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($add.ref($p21, $mul.ref($bv2int.64($i22), 304)), 280);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1796, 56} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p24, 3bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1797, 26} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p0, 320);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1797, 26} true;
  assume {:verifier.code 0} true;
  $p26 := $load.bytes.ref($M.0, $p25);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1797, 39} true;
  assume {:verifier.code 0} true;
  $i27 := $zext.bv32.bv64($i14);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1797, 37} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p26, $mul.ref($bv2int.64($i27), 304));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1797, 59} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($add.ref($p26, $mul.ref($bv2int.64($i27), 304)), 64);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1797, 3} true;
  assume {:verifier.code 0} true;
  call $p30 := spinlock_check($p29);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1798, 32} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p0, 320);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1798, 32} true;
  assume {:verifier.code 0} true;
  $p32 := $load.bytes.ref($M.0, $p31);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1798, 45} true;
  assume {:verifier.code 0} true;
  $i33 := $zext.bv32.bv64($i14);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1798, 43} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p32, $mul.ref($bv2int.64($i33), 304));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1798, 65} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p32, $mul.ref($bv2int.64($i33), 304)), 64);
  $p36 := $add.ref($add.ref($p32, $mul.ref($bv2int.64($i33), 304)), 64);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1798, 84} true;
  assume {:verifier.code 0} true;
  $p37 := $bitcast.ref.ref($p36);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1798, 3} true;
  assume {:verifier.code 0} true;
  call __raw_spin_lock_init($p37, .str.9, $p2);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1800, 9} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p0, 320);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1800, 9} true;
  assume {:verifier.code 0} true;
  $p39 := $load.bytes.ref($M.0, $p38);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1800, 22} true;
  assume {:verifier.code 0} true;
  $i40 := $zext.bv32.bv64($i14);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1800, 20} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($p39, $mul.ref($bv2int.64($i40), 304));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1800, 42} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($add.ref($p39, $mul.ref($bv2int.64($i40), 304)), 296);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1800, 48} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p42, $sub.bv32(0bv32, 1bv32));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1801, 9} true;
  assume {:verifier.code 0} true;
  $i43 := $add.bv32($i14, 1bv32);
  // WARNING: %46 = add i32 %.012, 1, !dbg !1886, !verifier.code !1830
  call {:cexpr "i"} boogie_si_record_bv32($i43);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1803, 9} true;
  assume {:verifier.code 0} true;
  $i44 := $ult.bv32($i43, $i1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1803, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $i43;
  assume {:branchcond $i44} true;
  goto $bb10, $bb11;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1803, 7} true;
  assume {:verifier.code 0} true;
  assume ($i44 == 1bv1);
  goto $bb8;
$bb11:
  assume !(($i44 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1803, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1809, 3} true;
  assume {:verifier.code 0} true;
  $i12 := 0bv32;
  goto $bb3;
}
const ni6527_di_insn_config: ref;
axiom (ni6527_di_insn_config == $sub.ref(0, 32614));
procedure  ni6527_di_insn_config($p0: ref, $p1: ref, $p2: ref, $p3: ref)
  returns ($r: bv32)
{
  var $p4: ref;
  var $i5: bv32;
  var $i6: bv32;
  var $p7: ref;
  var $i8: bv32;
  var $i9: bv1;
  var $i11: bv32;
  var $i12: bv1;
  var $p13: ref;
  var $i14: bv32;
  var $i15: bv1;
  var $p16: ref;
  var $i17: bv32;
  var $i18: bv32;
  var $i19: bv32;
  var $i20: bv32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: bv32;
  var $i27: bv1;
  var $i28: bv8;
  var $i29: bv32;
  var $i30: bv8;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: bv32;
  var $i40: bv8;
  var $i41: bv32;
  var $i42: bv8;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: bv32;
  var $i52: bv8;
  var $i53: bv32;
  var $i54: bv32;
  var $i55: bv8;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: bv32;
  var $i81: bv32;
  var $i82: bv32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: bv32;
  var $i92: bv32;
  var $i93: bv32;
  var $i94: bv32;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: bv32;
  var $i104: bv8;
  var $i105: bv32;
  var $i106: bv8;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: bv32;
  var $i120: bv32;
  var $i121: bv8;
  var $i122: bv32;
  var $i123: bv8;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: bv32;
  var $i137: bv32;
  var $i138: bv8;
  var $i139: bv32;
  var $i140: bv8;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i10: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1869, 22} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p2, 20);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1869, 22} true;
  assume {:verifier.code 0} true;
  $i5 := $load.bytes.bv32($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1869, 31} true;
  assume {:verifier.code 0} true;
  $i6 := $and.bv32($i5, 65535bv32);
  // WARNING: %7 = and i32 %6, 65535, !dbg !1840, !verifier.code !1831
  call {:cexpr "chan"} boogie_si_record_bv32($i6);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1870, 13} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p2, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1870, 13} true;
  assume {:verifier.code 0} true;
  $i8 := $load.bytes.bv32($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1870, 15} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.bv32($i8, 2bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1870, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1871, 5} true;
  assume {:verifier.code 0} true;
  $i10 := $sub.bv32(0bv32, 22bv32);
  goto $bb3;
$bb2:
  assume !(($i9 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1904, 1} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1875, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $load.bytes.bv32($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1875, 13} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.bv32($i11, 24bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1875, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i12 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1876, 5} true;
  assume {:verifier.code 0} true;
  $i10 := $sub.bv32(0bv32, 22bv32);
  goto $bb3;
$bb6:
  assume !(($i12 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1880, 14} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p3, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1880, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $load.bytes.bv32($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1880, 21} true;
  assume {:verifier.code 0} true;
  $i15 := $ne.bv32($i14, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1880, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i15 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1881, 24} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p3, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1881, 17} true;
  assume {:verifier.code 0} true;
  $i17 := $load.bytes.bv32($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1881, 31} true;
  assume {:verifier.code 0} true;
  $i18 := $add.bv32($i17, 100bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1881, 39} true;
  assume {:verifier.code 0} true;
  $i19 := $udiv.bv32($i18, 200bv32);
  // WARNING: %26 = udiv i32 %25, 200, !dbg !1864, !verifier.code !1831
  call {:cexpr "interval"} boogie_si_record_bv32($i19);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1882, 30} true;
  assume {:verifier.code 0} true;
  $i20 := $mul.bv32($i19, 200bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1882, 12} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p3, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1882, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p21, $i20);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1883, 40} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1883, 40} true;
  assume {:verifier.code 0} true;
  $p23 := $load.bytes.ref($M.0, $p22);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1883, 10} true;
  assume {:verifier.code 0} true;
  $p24 := $bitcast.ref.ref($p23);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1883, 50} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p24, 8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1883, 50} true;
  assume {:verifier.code 0} true;
  $i26 := $load.bytes.bv32($M.0, $p25);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1883, 66} true;
  assume {:verifier.code 0} true;
  $i27 := $ne.bv32($i26, $i19);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1883, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb10, $bb11;
$bb9:
  assume !(($i15 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1894, 93} true;
  assume {:verifier.code 0} true;
  $p87 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1894, 93} true;
  assume {:verifier.code 0} true;
  $p88 := $load.bytes.ref($M.0, $p87);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1894, 63} true;
  assume {:verifier.code 0} true;
  $p89 := $bitcast.ref.ref($p88);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1894, 103} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($p89, 12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1894, 103} true;
  assume {:verifier.code 0} true;
  $i91 := $load.bytes.bv32($M.0, $p90);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1894, 140} true;
  assume {:verifier.code 0} true;
  $i92 := $shl.bv32(1bv32, $i6);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1894, 135} true;
  assume {:verifier.code 0} true;
  $i93 := $xor.bv32($i92, $sub.bv32(0bv32, 1bv32));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1894, 117} true;
  assume {:verifier.code 0} true;
  $i94 := $and.bv32($i91, $i93);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1894, 36} true;
  assume {:verifier.code 0} true;
  $p95 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1894, 36} true;
  assume {:verifier.code 0} true;
  $p96 := $load.bytes.ref($M.0, $p95);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1894, 6} true;
  assume {:verifier.code 0} true;
  $p97 := $bitcast.ref.ref($p96);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1894, 46} true;
  assume {:verifier.code 0} true;
  $p98 := $add.ref($p97, 12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1894, 60} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p98, $i94);
  assume {:verifier.code 0} true;
  goto $bb13;
$bb10:
  assume ($i27 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1884, 21} true;
  assume {:verifier.code 0} true;
  $i28 := $trunc.bv32.bv8($i19);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1884, 14} true;
  assume {:verifier.code 0} true;
  $i29 := $zext.bv8.bv32($i28);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1884, 14} true;
  assume {:verifier.code 0} true;
  $i30 := $trunc.bv32.bv8($i29);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1884, 99} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1884, 99} true;
  assume {:verifier.code 0} true;
  $p32 := $load.bytes.ref($M.0, $p31);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1884, 69} true;
  assume {:verifier.code 0} true;
  $p33 := $bitcast.ref.ref($p32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1884, 109} true;
  assume {:verifier.code 0} true;
  $p34 := $p33;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1884, 109} true;
  assume {:verifier.code 0} true;
  $p35 := $load.bytes.ref($M.0, $p34);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1884, 116} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p35, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1884, 116} true;
  assume {:verifier.code 0} true;
  $p37 := $load.bytes.ref($M.0, $p36);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1884, 128} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p37, 8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1884, 7} true;
  assume {:verifier.code 0} true;
  call writeb($i30, $p38);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1885, 47} true;
  assume {:verifier.code 0} true;
  $i39 := $lshr.bv32($i19, 8bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1885, 21} true;
  assume {:verifier.code 0} true;
  $i40 := $trunc.bv32.bv8($i39);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1885, 14} true;
  assume {:verifier.code 0} true;
  $i41 := $zext.bv8.bv32($i40);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1885, 14} true;
  assume {:verifier.code 0} true;
  $i42 := $trunc.bv32.bv8($i41);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1885, 106} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1885, 106} true;
  assume {:verifier.code 0} true;
  $p44 := $load.bytes.ref($M.0, $p43);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1885, 76} true;
  assume {:verifier.code 0} true;
  $p45 := $bitcast.ref.ref($p44);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1885, 116} true;
  assume {:verifier.code 0} true;
  $p46 := $p45;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1885, 116} true;
  assume {:verifier.code 0} true;
  $p47 := $load.bytes.ref($M.0, $p46);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1885, 123} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($p47, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1885, 123} true;
  assume {:verifier.code 0} true;
  $p49 := $load.bytes.ref($M.0, $p48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1885, 135} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($p49, 9);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1885, 7} true;
  assume {:verifier.code 0} true;
  call writeb($i42, $p50);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1886, 47} true;
  assume {:verifier.code 0} true;
  $i51 := $lshr.bv32($i19, 16bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1886, 21} true;
  assume {:verifier.code 0} true;
  $i52 := $trunc.bv32.bv8($i51);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1886, 14} true;
  assume {:verifier.code 0} true;
  $i53 := $zext.bv8.bv32($i52);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1886, 55} true;
  assume {:verifier.code 0} true;
  $i54 := $and.bv32($i53, 15bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1886, 14} true;
  assume {:verifier.code 0} true;
  $i55 := $trunc.bv32.bv8($i54);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1886, 112} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1886, 112} true;
  assume {:verifier.code 0} true;
  $p57 := $load.bytes.ref($M.0, $p56);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1886, 82} true;
  assume {:verifier.code 0} true;
  $p58 := $bitcast.ref.ref($p57);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1886, 122} true;
  assume {:verifier.code 0} true;
  $p59 := $p58;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1886, 122} true;
  assume {:verifier.code 0} true;
  $p60 := $load.bytes.ref($M.0, $p59);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1886, 129} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($p60, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1886, 129} true;
  assume {:verifier.code 0} true;
  $p62 := $load.bytes.ref($M.0, $p61);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1886, 141} true;
  assume {:verifier.code 0} true;
  $p63 := $add.ref($p62, 10);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1886, 7} true;
  assume {:verifier.code 0} true;
  call writeb($i55, $p63);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1887, 68} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1887, 68} true;
  assume {:verifier.code 0} true;
  $p65 := $load.bytes.ref($M.0, $p64);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1887, 38} true;
  assume {:verifier.code 0} true;
  $p66 := $bitcast.ref.ref($p65);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1887, 78} true;
  assume {:verifier.code 0} true;
  $p67 := $p66;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1887, 78} true;
  assume {:verifier.code 0} true;
  $p68 := $load.bytes.ref($M.0, $p67);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1887, 85} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($p68, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1887, 85} true;
  assume {:verifier.code 0} true;
  $p70 := $load.bytes.ref($M.0, $p69);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1887, 97} true;
  assume {:verifier.code 0} true;
  $p71 := $add.ref($p70, 7);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1887, 7} true;
  assume {:verifier.code 0} true;
  call writeb(1bv8, $p71);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1888, 38} true;
  assume {:verifier.code 0} true;
  $p72 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1888, 38} true;
  assume {:verifier.code 0} true;
  $p73 := $load.bytes.ref($M.0, $p72);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1888, 8} true;
  assume {:verifier.code 0} true;
  $p74 := $bitcast.ref.ref($p73);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1888, 48} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($p74, 8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1888, 64} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p75, $i19);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1889, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume !(($i27 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1892, 93} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1892, 93} true;
  assume {:verifier.code 0} true;
  $p77 := $load.bytes.ref($M.0, $p76);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1892, 63} true;
  assume {:verifier.code 0} true;
  $p78 := $bitcast.ref.ref($p77);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1892, 103} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($p78, 12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1892, 103} true;
  assume {:verifier.code 0} true;
  $i80 := $load.bytes.bv32($M.0, $p79);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1892, 137} true;
  assume {:verifier.code 0} true;
  $i81 := $shl.bv32(1bv32, $i6);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1892, 117} true;
  assume {:verifier.code 0} true;
  $i82 := $or.bv32($i80, $i81);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1892, 36} true;
  assume {:verifier.code 0} true;
  $p83 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1892, 36} true;
  assume {:verifier.code 0} true;
  $p84 := $load.bytes.ref($M.0, $p83);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1892, 6} true;
  assume {:verifier.code 0} true;
  $p85 := $bitcast.ref.ref($p84);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1892, 46} true;
  assume {:verifier.code 0} true;
  $p86 := $add.ref($p85, 12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1892, 60} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p86, $i82);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1893, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1896, 64} true;
  assume {:verifier.code 0} true;
  $p99 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1896, 64} true;
  assume {:verifier.code 0} true;
  $p100 := $load.bytes.ref($M.0, $p99);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1896, 34} true;
  assume {:verifier.code 0} true;
  $p101 := $bitcast.ref.ref($p100);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1896, 74} true;
  assume {:verifier.code 0} true;
  $p102 := $add.ref($p101, 12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1896, 74} true;
  assume {:verifier.code 0} true;
  $i103 := $load.bytes.bv32($M.0, $p102);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1896, 17} true;
  assume {:verifier.code 0} true;
  $i104 := $trunc.bv32.bv8($i103);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1896, 10} true;
  assume {:verifier.code 0} true;
  $i105 := $zext.bv8.bv32($i104);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1896, 10} true;
  assume {:verifier.code 0} true;
  $i106 := $trunc.bv32.bv8($i105);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1897, 61} true;
  assume {:verifier.code 0} true;
  $p107 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1897, 61} true;
  assume {:verifier.code 0} true;
  $p108 := $load.bytes.ref($M.0, $p107);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1897, 31} true;
  assume {:verifier.code 0} true;
  $p109 := $bitcast.ref.ref($p108);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1897, 71} true;
  assume {:verifier.code 0} true;
  $p110 := $p109;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1897, 71} true;
  assume {:verifier.code 0} true;
  $p111 := $load.bytes.ref($M.0, $p110);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1897, 78} true;
  assume {:verifier.code 0} true;
  $p112 := $add.ref($p111, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1897, 78} true;
  assume {:verifier.code 0} true;
  $p113 := $load.bytes.ref($M.0, $p112);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1897, 90} true;
  assume {:verifier.code 0} true;
  $p114 := $add.ref($p113, 12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1896, 3} true;
  assume {:verifier.code 0} true;
  call writeb($i106, $p114);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1898, 65} true;
  assume {:verifier.code 0} true;
  $p115 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1898, 65} true;
  assume {:verifier.code 0} true;
  $p116 := $load.bytes.ref($M.0, $p115);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1898, 35} true;
  assume {:verifier.code 0} true;
  $p117 := $bitcast.ref.ref($p116);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1898, 75} true;
  assume {:verifier.code 0} true;
  $p118 := $add.ref($p117, 12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1898, 75} true;
  assume {:verifier.code 0} true;
  $i119 := $load.bytes.bv32($M.0, $p118);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1898, 89} true;
  assume {:verifier.code 0} true;
  $i120 := $lshr.bv32($i119, 8bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1898, 17} true;
  assume {:verifier.code 0} true;
  $i121 := $trunc.bv32.bv8($i120);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1898, 10} true;
  assume {:verifier.code 0} true;
  $i122 := $zext.bv8.bv32($i121);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1898, 10} true;
  assume {:verifier.code 0} true;
  $i123 := $trunc.bv32.bv8($i122);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1899, 61} true;
  assume {:verifier.code 0} true;
  $p124 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1899, 61} true;
  assume {:verifier.code 0} true;
  $p125 := $load.bytes.ref($M.0, $p124);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1899, 31} true;
  assume {:verifier.code 0} true;
  $p126 := $bitcast.ref.ref($p125);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1899, 71} true;
  assume {:verifier.code 0} true;
  $p127 := $p126;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1899, 71} true;
  assume {:verifier.code 0} true;
  $p128 := $load.bytes.ref($M.0, $p127);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1899, 78} true;
  assume {:verifier.code 0} true;
  $p129 := $add.ref($p128, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1899, 78} true;
  assume {:verifier.code 0} true;
  $p130 := $load.bytes.ref($M.0, $p129);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1899, 90} true;
  assume {:verifier.code 0} true;
  $p131 := $add.ref($p130, 13);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1898, 3} true;
  assume {:verifier.code 0} true;
  call writeb($i123, $p131);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1900, 65} true;
  assume {:verifier.code 0} true;
  $p132 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1900, 65} true;
  assume {:verifier.code 0} true;
  $p133 := $load.bytes.ref($M.0, $p132);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1900, 35} true;
  assume {:verifier.code 0} true;
  $p134 := $bitcast.ref.ref($p133);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1900, 75} true;
  assume {:verifier.code 0} true;
  $p135 := $add.ref($p134, 12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1900, 75} true;
  assume {:verifier.code 0} true;
  $i136 := $load.bytes.bv32($M.0, $p135);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1900, 89} true;
  assume {:verifier.code 0} true;
  $i137 := $lshr.bv32($i136, 16bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1900, 17} true;
  assume {:verifier.code 0} true;
  $i138 := $trunc.bv32.bv8($i137);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1900, 10} true;
  assume {:verifier.code 0} true;
  $i139 := $zext.bv8.bv32($i138);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1900, 10} true;
  assume {:verifier.code 0} true;
  $i140 := $trunc.bv32.bv8($i139);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1901, 61} true;
  assume {:verifier.code 0} true;
  $p141 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1901, 61} true;
  assume {:verifier.code 0} true;
  $p142 := $load.bytes.ref($M.0, $p141);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1901, 31} true;
  assume {:verifier.code 0} true;
  $p143 := $bitcast.ref.ref($p142);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1901, 71} true;
  assume {:verifier.code 0} true;
  $p144 := $p143;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1901, 71} true;
  assume {:verifier.code 0} true;
  $p145 := $load.bytes.ref($M.0, $p144);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1901, 78} true;
  assume {:verifier.code 0} true;
  $p146 := $add.ref($p145, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1901, 78} true;
  assume {:verifier.code 0} true;
  $p147 := $load.bytes.ref($M.0, $p146);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1901, 90} true;
  assume {:verifier.code 0} true;
  $p148 := $add.ref($p147, 14);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1900, 3} true;
  assume {:verifier.code 0} true;
  call writeb($i140, $p148);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1902, 3} true;
  assume {:verifier.code 0} true;
  $i10 := 2bv32;
  goto $bb3;
}
const ni6527_di_insn_bits: ref;
axiom (ni6527_di_insn_bits == $sub.ref(0, 33646));
procedure  ni6527_di_insn_bits($p0: ref, $p1: ref, $p2: ref, $p3: ref)
  returns ($r: bv32)
{
  var $p4: ref;
  var $i5: bv32;
  var $i6: bv1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: bv8;
  var $i16: bv32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: bv8;
  var $p27: ref;
  var $i28: bv32;
  var $i29: bv32;
  var $i30: bv32;
  var $i31: bv32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: bv8;
  var $p42: ref;
  var $i43: bv32;
  var $i44: bv32;
  var $i45: bv32;
  var $i46: bv32;
  var $p47: ref;
  var $i7: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1913, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p2, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1913, 13} true;
  assume {:verifier.code 0} true;
  $i5 := $load.bytes.bv32($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1913, 15} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.bv32($i5, 2bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1913, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1914, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.bv32(0bv32, 22bv32);
  goto $bb3;
$bb2:
  assume !(($i6 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1926, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1918, 72} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1918, 72} true;
  assume {:verifier.code 0} true;
  $p9 := $load.bytes.ref($M.0, $p8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1918, 42} true;
  assume {:verifier.code 0} true;
  $p10 := $bitcast.ref.ref($p9);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1918, 82} true;
  assume {:verifier.code 0} true;
  $p11 := $p10;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1918, 82} true;
  assume {:verifier.code 0} true;
  $p12 := $load.bytes.ref($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1918, 89} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p12, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1918, 89} true;
  assume {:verifier.code 0} true;
  $p14 := $load.bytes.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1918, 9} true;
  assume {:verifier.code 0} true;
  call $i15 := readb($p14);
  // WARNING: %18 = call zeroext i8 @readb(i8* %17), !dbg !1849, !verifier.code !1831
  call {:cexpr "tmp"} boogie_si_record_bv8($i15);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1919, 19} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.bv8.bv32($i15);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1919, 10} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p3, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1919, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p17, $i16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1920, 76} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1920, 76} true;
  assume {:verifier.code 0} true;
  $p19 := $load.bytes.ref($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1920, 46} true;
  assume {:verifier.code 0} true;
  $p20 := $bitcast.ref.ref($p19);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1920, 86} true;
  assume {:verifier.code 0} true;
  $p21 := $p20;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1920, 86} true;
  assume {:verifier.code 0} true;
  $p22 := $load.bytes.ref($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1920, 93} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p22, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1920, 93} true;
  assume {:verifier.code 0} true;
  $p24 := $load.bytes.ref($M.0, $p23);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1920, 105} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p24, 1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1920, 13} true;
  assume {:verifier.code 0} true;
  call $i26 := readb($p25);
  // WARNING: %29 = call zeroext i8 @readb(i8* %28), !dbg !1860, !verifier.code !1831
  call {:cexpr "tmp___0"} boogie_si_record_bv8($i26);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1921, 26} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p3, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1921, 19} true;
  assume {:verifier.code 0} true;
  $i28 := $load.bytes.bv32($M.0, $p27);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1921, 51} true;
  assume {:verifier.code 0} true;
  $i29 := $zext.bv8.bv32($i26);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1921, 65} true;
  assume {:verifier.code 0} true;
  $i30 := $shl.bv32($i29, 8bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1921, 33} true;
  assume {:verifier.code 0} true;
  $i31 := $or.bv32($i28, $i30);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1921, 10} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p3, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1921, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p32, $i31);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1922, 76} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1922, 76} true;
  assume {:verifier.code 0} true;
  $p34 := $load.bytes.ref($M.0, $p33);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1922, 46} true;
  assume {:verifier.code 0} true;
  $p35 := $bitcast.ref.ref($p34);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1922, 86} true;
  assume {:verifier.code 0} true;
  $p36 := $p35;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1922, 86} true;
  assume {:verifier.code 0} true;
  $p37 := $load.bytes.ref($M.0, $p36);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1922, 93} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p37, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1922, 93} true;
  assume {:verifier.code 0} true;
  $p39 := $load.bytes.ref($M.0, $p38);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1922, 105} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p39, 2);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1922, 13} true;
  assume {:verifier.code 0} true;
  call $i41 := readb($p40);
  // WARNING: %44 = call zeroext i8 @readb(i8* %43), !dbg !1875, !verifier.code !1831
  call {:cexpr "tmp___1"} boogie_si_record_bv8($i41);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1923, 26} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($p3, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1923, 19} true;
  assume {:verifier.code 0} true;
  $i43 := $load.bytes.bv32($M.0, $p42);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1923, 51} true;
  assume {:verifier.code 0} true;
  $i44 := $zext.bv8.bv32($i41);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1923, 65} true;
  assume {:verifier.code 0} true;
  $i45 := $shl.bv32($i44, 16bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1923, 33} true;
  assume {:verifier.code 0} true;
  $i46 := $or.bv32($i43, $i45);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1923, 10} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($p3, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1923, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p47, $i46);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1924, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 2bv32;
  goto $bb3;
}
const ni6527_do_insn_bits: ref;
axiom (ni6527_do_insn_bits == $sub.ref(0, 34678));
procedure  ni6527_do_insn_bits($p0: ref, $p1: ref, $p2: ref, $p3: ref)
  returns ($r: bv32)
{
  var $p4: ref;
  var $i5: bv32;
  var $i6: bv1;
  var $i8: bv32;
  var $i9: bv1;
  var $p10: ref;
  var $i11: bv32;
  var $i12: bv32;
  var $i13: bv32;
  var $i14: bv32;
  var $p15: ref;
  var $p16: ref;
  var $i17: bv32;
  var $i18: bv32;
  var $p19: ref;
  var $i20: bv32;
  var $i21: bv32;
  var $i22: bv32;
  var $p23: ref;
  var $i24: bv32;
  var $i25: bv32;
  var $i26: bv1;
  var $p27: ref;
  var $i28: bv32;
  var $i29: bv8;
  var $i30: bv32;
  var $i31: bv32;
  var $i32: bv8;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: bv32;
  var $i42: bv32;
  var $i43: bv1;
  var $p44: ref;
  var $i45: bv32;
  var $i46: bv32;
  var $i47: bv8;
  var $i48: bv32;
  var $i49: bv32;
  var $i50: bv8;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: bv32;
  var $i60: bv32;
  var $i61: bv1;
  var $p62: ref;
  var $i63: bv32;
  var $i64: bv32;
  var $i65: bv8;
  var $i66: bv32;
  var $i67: bv32;
  var $i68: bv8;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: bv32;
  var $p79: ref;
  var $i7: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1933, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p2, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1933, 13} true;
  assume {:verifier.code 0} true;
  $i5 := $load.bytes.bv32($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1933, 15} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.bv32($i5, 2bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1933, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1934, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.bv32(0bv32, 22bv32);
  goto $bb3;
$bb2:
  assume !(($i6 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1962, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1938, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $load.bytes.bv32($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1938, 13} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.bv32($i8, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1938, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i9 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1939, 19} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p1, 284);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1939, 19} true;
  assume {:verifier.code 0} true;
  $i11 := $load.bytes.bv32($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1939, 29} true;
  assume {:verifier.code 0} true;
  $i12 := $load.bytes.bv32($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1939, 27} true;
  assume {:verifier.code 0} true;
  $i13 := $xor.bv32($i12, $sub.bv32(0bv32, 1bv32));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1939, 25} true;
  assume {:verifier.code 0} true;
  $i14 := $and.bv32($i11, $i13);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1939, 8} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p1, 284);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1939, 14} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p15, $i14);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1940, 19} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p1, 284);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1940, 19} true;
  assume {:verifier.code 0} true;
  $i17 := $load.bytes.bv32($M.0, $p16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1940, 28} true;
  assume {:verifier.code 0} true;
  $i18 := $load.bytes.bv32($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1940, 43} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p3, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1940, 36} true;
  assume {:verifier.code 0} true;
  $i20 := $load.bytes.bv32($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1940, 34} true;
  assume {:verifier.code 0} true;
  $i21 := $and.bv32($i18, $i20);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1940, 25} true;
  assume {:verifier.code 0} true;
  $i22 := $or.bv32($i17, $i21);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1940, 8} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p1, 284);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1940, 14} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p23, $i22);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1941, 10} true;
  assume {:verifier.code 0} true;
  $i24 := $load.bytes.bv32($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1941, 16} true;
  assume {:verifier.code 0} true;
  $i25 := $and.bv32($i24, 255bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1941, 24} true;
  assume {:verifier.code 0} true;
  $i26 := $ne.bv32($i25, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1941, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb7, $bb8;
$bb6:
  assume !(($i9 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb7:
  assume ($i26 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1942, 43} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p1, 284);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1942, 43} true;
  assume {:verifier.code 0} true;
  $i28 := $load.bytes.bv32($M.0, $p27);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1942, 24} true;
  assume {:verifier.code 0} true;
  $i29 := $trunc.bv32.bv8($i28);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1942, 17} true;
  assume {:verifier.code 0} true;
  $i30 := $zext.bv8.bv32($i29);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1942, 14} true;
  assume {:verifier.code 0} true;
  $i31 := $xor.bv32($i30, $sub.bv32(0bv32, 1bv32));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1942, 14} true;
  assume {:verifier.code 0} true;
  $i32 := $trunc.bv32.bv8($i31);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1942, 103} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1942, 103} true;
  assume {:verifier.code 0} true;
  $p34 := $load.bytes.ref($M.0, $p33);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1942, 73} true;
  assume {:verifier.code 0} true;
  $p35 := $bitcast.ref.ref($p34);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1942, 113} true;
  assume {:verifier.code 0} true;
  $p36 := $p35;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1942, 113} true;
  assume {:verifier.code 0} true;
  $p37 := $load.bytes.ref($M.0, $p36);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1942, 120} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p37, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1942, 120} true;
  assume {:verifier.code 0} true;
  $p39 := $load.bytes.ref($M.0, $p38);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1942, 132} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p39, 3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1942, 7} true;
  assume {:verifier.code 0} true;
  call writeb($i32, $p40);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1943, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i26 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1946, 10} true;
  assume {:verifier.code 0} true;
  $i41 := $load.bytes.bv32($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1946, 16} true;
  assume {:verifier.code 0} true;
  $i42 := $and.bv32($i41, 65280bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1946, 26} true;
  assume {:verifier.code 0} true;
  $i43 := $ne.bv32($i42, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1946, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i43} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i43 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1947, 44} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($p1, 284);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1947, 44} true;
  assume {:verifier.code 0} true;
  $i45 := $load.bytes.bv32($M.0, $p44);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1947, 50} true;
  assume {:verifier.code 0} true;
  $i46 := $lshr.bv32($i45, 8bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1947, 24} true;
  assume {:verifier.code 0} true;
  $i47 := $trunc.bv32.bv8($i46);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1947, 17} true;
  assume {:verifier.code 0} true;
  $i48 := $zext.bv8.bv32($i47);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1947, 14} true;
  assume {:verifier.code 0} true;
  $i49 := $xor.bv32($i48, $sub.bv32(0bv32, 1bv32));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1947, 14} true;
  assume {:verifier.code 0} true;
  $i50 := $trunc.bv32.bv8($i49);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1947, 110} true;
  assume {:verifier.code 0} true;
  $p51 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1947, 110} true;
  assume {:verifier.code 0} true;
  $p52 := $load.bytes.ref($M.0, $p51);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1947, 80} true;
  assume {:verifier.code 0} true;
  $p53 := $bitcast.ref.ref($p52);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1947, 120} true;
  assume {:verifier.code 0} true;
  $p54 := $p53;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1947, 120} true;
  assume {:verifier.code 0} true;
  $p55 := $load.bytes.ref($M.0, $p54);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1947, 127} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($p55, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1947, 127} true;
  assume {:verifier.code 0} true;
  $p57 := $load.bytes.ref($M.0, $p56);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1947, 139} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($p57, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1947, 7} true;
  assume {:verifier.code 0} true;
  call writeb($i50, $p58);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1948, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume !(($i43 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1951, 10} true;
  assume {:verifier.code 0} true;
  $i59 := $load.bytes.bv32($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1951, 16} true;
  assume {:verifier.code 0} true;
  $i60 := $and.bv32($i59, 16711680bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1951, 29} true;
  assume {:verifier.code 0} true;
  $i61 := $ne.bv32($i60, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1951, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i61} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i61 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1952, 44} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($p1, 284);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1952, 44} true;
  assume {:verifier.code 0} true;
  $i63 := $load.bytes.bv32($M.0, $p62);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1952, 50} true;
  assume {:verifier.code 0} true;
  $i64 := $lshr.bv32($i63, 16bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1952, 24} true;
  assume {:verifier.code 0} true;
  $i65 := $trunc.bv32.bv8($i64);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1952, 17} true;
  assume {:verifier.code 0} true;
  $i66 := $zext.bv8.bv32($i65);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1952, 14} true;
  assume {:verifier.code 0} true;
  $i67 := $xor.bv32($i66, $sub.bv32(0bv32, 1bv32));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1952, 14} true;
  assume {:verifier.code 0} true;
  $i68 := $trunc.bv32.bv8($i67);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1952, 111} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1952, 111} true;
  assume {:verifier.code 0} true;
  $p70 := $load.bytes.ref($M.0, $p69);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1952, 81} true;
  assume {:verifier.code 0} true;
  $p71 := $bitcast.ref.ref($p70);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1952, 121} true;
  assume {:verifier.code 0} true;
  $p72 := $p71;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1952, 121} true;
  assume {:verifier.code 0} true;
  $p73 := $load.bytes.ref($M.0, $p72);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1952, 128} true;
  assume {:verifier.code 0} true;
  $p74 := $add.ref($p73, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1952, 128} true;
  assume {:verifier.code 0} true;
  $p75 := $load.bytes.ref($M.0, $p74);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1952, 140} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($p75, 5);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1952, 7} true;
  assume {:verifier.code 0} true;
  call writeb($i68, $p76);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1953, 5} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume !(($i61 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1956, 3} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1959, 22} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($p1, 284);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1959, 22} true;
  assume {:verifier.code 0} true;
  $i78 := $load.bytes.bv32($M.0, $p77);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1959, 10} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($p3, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1959, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p79, $i78);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1960, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 2bv32;
  goto $bb3;
}
const ni6527_intr_cmdtest: ref;
axiom (ni6527_intr_cmdtest == $sub.ref(0, 35710));
procedure  ni6527_intr_cmdtest($p0: ref, $p1: ref, $p2: ref)
  returns ($r: bv32)
{
  var $p3: ref;
  var $i4: bv32;
  var $p5: ref;
  var $i6: bv32;
  var $i7: bv32;
  var $p8: ref;
  var $p9: ref;
  var $i10: bv32;
  var $i11: bv1;
  var $p12: ref;
  var $i13: bv32;
  var $i14: bv1;
  var $i15: bv32;
  var $i16: bv32;
  var $p17: ref;
  var $i18: bv32;
  var $p19: ref;
  var $i20: bv32;
  var $i21: bv32;
  var $p22: ref;
  var $p23: ref;
  var $i24: bv32;
  var $i25: bv1;
  var $p26: ref;
  var $i27: bv32;
  var $i28: bv1;
  var $i29: bv32;
  var $i30: bv32;
  var $p31: ref;
  var $i32: bv32;
  var $p33: ref;
  var $i34: bv32;
  var $i35: bv32;
  var $p36: ref;
  var $p37: ref;
  var $i38: bv32;
  var $i39: bv1;
  var $p40: ref;
  var $i41: bv32;
  var $i42: bv1;
  var $i43: bv32;
  var $i44: bv32;
  var $p45: ref;
  var $i46: bv32;
  var $p47: ref;
  var $i48: bv32;
  var $i49: bv32;
  var $p50: ref;
  var $p51: ref;
  var $i52: bv32;
  var $i53: bv1;
  var $p54: ref;
  var $i55: bv32;
  var $i56: bv1;
  var $i57: bv32;
  var $i58: bv32;
  var $p59: ref;
  var $i60: bv32;
  var $p61: ref;
  var $i62: bv32;
  var $i63: bv32;
  var $p64: ref;
  var $p65: ref;
  var $i66: bv32;
  var $i67: bv1;
  var $p68: ref;
  var $i69: bv32;
  var $i70: bv1;
  var $i71: bv32;
  var $i72: bv32;
  var $i73: bv1;
  var $i75: bv1;
  var $p76: ref;
  var $i77: bv32;
  var $i78: bv1;
  var $p79: ref;
  var $i80: bv32;
  var $i81: bv32;
  var $p82: ref;
  var $i83: bv32;
  var $i84: bv1;
  var $p85: ref;
  var $i86: bv32;
  var $i87: bv32;
  var $p88: ref;
  var $i89: bv32;
  var $i90: bv1;
  var $p91: ref;
  var $i92: bv32;
  var $i93: bv32;
  var $p94: ref;
  var $i95: bv32;
  var $i96: bv1;
  var $p97: ref;
  var $i98: bv32;
  var $i99: bv32;
  var $p100: ref;
  var $i101: bv32;
  var $i102: bv1;
  var $p103: ref;
  var $i104: bv32;
  var $i105: bv32;
  var $i106: bv1;
  var $i107: bv1;
  var $i74: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.comedi_cmd* %2, i64 0, metadata !2542, metadata !1833), !dbg !2543, !verifier.code !1830
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2000, 20} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2000, 20} true;
  assume {:verifier.code 0} true;
  $i4 := $load.bytes.bv32($M.0, $p3);
  // WARNING: %5 = load i32, i32* %4, align 8, !dbg !1838, !verifier.code !1831
  call {:cexpr "tmp"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2001, 25} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p2, 8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2001, 25} true;
  assume {:verifier.code 0} true;
  $i6 := $load.bytes.bv32($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2001, 35} true;
  assume {:verifier.code 0} true;
  $i7 := $and.bv32($i6, 2bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2001, 8} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p2, 8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2001, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p8, $i7);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2002, 12} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p2, 8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2002, 12} true;
  assume {:verifier.code 0} true;
  $i10 := $load.bytes.bv32($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2002, 22} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.bv32($i10, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2002, 28} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2002, 28} true;
  assume {:verifier.code 0} true;
  assume ($i11 == 1bv1);
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2003, 15} true;
  assume {:verifier.code 0} true;
  $i15 := $add.bv32(0bv32, 1bv32);
  // WARNING: %18 = add nsw i32 0, 1, !dbg !1854, !verifier.code !1831
  call {:cexpr "err"} boogie_si_record_bv32($i15);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2004, 3} true;
  assume {:verifier.code 0} true;
  $i16 := $i15;
  goto $bb6;
$bb3:
  assume !(($i11 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2002, 58} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p2, 8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2002, 58} true;
  assume {:verifier.code 0} true;
  $i13 := $load.bytes.bv32($M.0, $p12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2002, 50} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.bv32($i4, $i13);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2002, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb4, $bb5;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2002, 7} true;
  assume {:verifier.code 0} true;
  assume ($i14 == 1bv1);
  goto $bb2;
$bb5:
  assume !(($i14 == 1bv1));
  assume {:verifier.code 0} true;
  $i16 := 0bv32;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2007, 20} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p2, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2007, 20} true;
  assume {:verifier.code 0} true;
  $i18 := $load.bytes.bv32($M.0, $p17);
  // WARNING: %22 = load i32, i32* %21, align 8, !dbg !1857, !verifier.code !1831
  call {:cexpr "tmp"} boogie_si_record_bv32($i18);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2008, 30} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p2, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2008, 30} true;
  assume {:verifier.code 0} true;
  $i20 := $load.bytes.bv32($M.0, $p19);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2008, 45} true;
  assume {:verifier.code 0} true;
  $i21 := $and.bv32($i20, 256bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2008, 8} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p2, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2008, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p22, $i21);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2009, 12} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p2, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2009, 12} true;
  assume {:verifier.code 0} true;
  $i24 := $load.bytes.bv32($M.0, $p23);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2009, 27} true;
  assume {:verifier.code 0} true;
  $i25 := $eq.bv32($i24, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2009, 33} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb7, $bb9;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2009, 33} true;
  assume {:verifier.code 0} true;
  assume ($i25 == 1bv1);
  goto $bb8;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2010, 15} true;
  assume {:verifier.code 0} true;
  $i29 := $add.bv32($i16, 1bv32);
  // WARNING: %35 = add nsw i32 %.01, 1, !dbg !1870, !verifier.code !1831
  call {:cexpr "err"} boogie_si_record_bv32($i29);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2011, 3} true;
  assume {:verifier.code 0} true;
  $i30 := $i29;
  goto $bb12;
$bb9:
  assume !(($i25 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2009, 63} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p2, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2009, 63} true;
  assume {:verifier.code 0} true;
  $i27 := $load.bytes.bv32($M.0, $p26);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2009, 55} true;
  assume {:verifier.code 0} true;
  $i28 := $ne.bv32($i18, $i27);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2009, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb10, $bb11;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2009, 7} true;
  assume {:verifier.code 0} true;
  assume ($i28 == 1bv1);
  goto $bb8;
$bb11:
  assume !(($i28 == 1bv1));
  assume {:verifier.code 0} true;
  $i30 := $i16;
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2014, 20} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p2, 24);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2014, 20} true;
  assume {:verifier.code 0} true;
  $i32 := $load.bytes.bv32($M.0, $p31);
  // WARNING: %39 = load i32, i32* %38, align 8, !dbg !1873, !verifier.code !1831
  call {:cexpr "tmp"} boogie_si_record_bv32($i32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2015, 27} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p2, 24);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2015, 27} true;
  assume {:verifier.code 0} true;
  $i34 := $load.bytes.bv32($M.0, $p33);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2015, 39} true;
  assume {:verifier.code 0} true;
  $i35 := $and.bv32($i34, 4bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2015, 8} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p2, 24);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2015, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p36, $i35);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2016, 12} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p2, 24);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2016, 12} true;
  assume {:verifier.code 0} true;
  $i38 := $load.bytes.bv32($M.0, $p37);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2016, 24} true;
  assume {:verifier.code 0} true;
  $i39 := $eq.bv32($i38, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2016, 30} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb13, $bb15;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2016, 30} true;
  assume {:verifier.code 0} true;
  assume ($i39 == 1bv1);
  goto $bb14;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2017, 15} true;
  assume {:verifier.code 0} true;
  $i43 := $add.bv32($i30, 1bv32);
  // WARNING: %52 = add nsw i32 %.1, 1, !dbg !1886, !verifier.code !1831
  call {:cexpr "err"} boogie_si_record_bv32($i43);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2018, 3} true;
  assume {:verifier.code 0} true;
  $i44 := $i43;
  goto $bb18;
$bb15:
  assume !(($i39 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2016, 60} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p2, 24);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2016, 60} true;
  assume {:verifier.code 0} true;
  $i41 := $load.bytes.bv32($M.0, $p40);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2016, 52} true;
  assume {:verifier.code 0} true;
  $i42 := $ne.bv32($i32, $i41);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2016, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i42} true;
  goto $bb16, $bb17;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2016, 7} true;
  assume {:verifier.code 0} true;
  assume ($i42 == 1bv1);
  goto $bb14;
$bb17:
  assume !(($i42 == 1bv1));
  assume {:verifier.code 0} true;
  $i44 := $i30;
  goto $bb18;
$bb18:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2021, 20} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($p2, 32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2021, 20} true;
  assume {:verifier.code 0} true;
  $i46 := $load.bytes.bv32($M.0, $p45);
  // WARNING: %56 = load i32, i32* %55, align 8, !dbg !1889, !verifier.code !1831
  call {:cexpr "tmp"} boogie_si_record_bv32($i46);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2022, 28} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($p2, 32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2022, 28} true;
  assume {:verifier.code 0} true;
  $i48 := $load.bytes.bv32($M.0, $p47);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2022, 41} true;
  assume {:verifier.code 0} true;
  $i49 := $and.bv32($i48, 32bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2022, 8} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($p2, 32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2022, 21} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p50, $i49);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2023, 12} true;
  assume {:verifier.code 0} true;
  $p51 := $add.ref($p2, 32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2023, 12} true;
  assume {:verifier.code 0} true;
  $i52 := $load.bytes.bv32($M.0, $p51);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2023, 25} true;
  assume {:verifier.code 0} true;
  $i53 := $eq.bv32($i52, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2023, 31} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i53} true;
  goto $bb19, $bb21;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2023, 31} true;
  assume {:verifier.code 0} true;
  assume ($i53 == 1bv1);
  goto $bb20;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2024, 15} true;
  assume {:verifier.code 0} true;
  $i57 := $add.bv32($i44, 1bv32);
  // WARNING: %69 = add nsw i32 %.2, 1, !dbg !1902, !verifier.code !1831
  call {:cexpr "err"} boogie_si_record_bv32($i57);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2025, 3} true;
  assume {:verifier.code 0} true;
  $i58 := $i57;
  goto $bb24;
$bb21:
  assume !(($i53 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2023, 61} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($p2, 32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2023, 61} true;
  assume {:verifier.code 0} true;
  $i55 := $load.bytes.bv32($M.0, $p54);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2023, 53} true;
  assume {:verifier.code 0} true;
  $i56 := $ne.bv32($i46, $i55);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2023, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb22, $bb23;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2023, 7} true;
  assume {:verifier.code 0} true;
  assume ($i56 == 1bv1);
  goto $bb20;
$bb23:
  assume !(($i56 == 1bv1));
  assume {:verifier.code 0} true;
  $i58 := $i44;
  goto $bb24;
$bb24:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2028, 20} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($p2, 40);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2028, 20} true;
  assume {:verifier.code 0} true;
  $i60 := $load.bytes.bv32($M.0, $p59);
  // WARNING: %73 = load i32, i32* %72, align 8, !dbg !1905, !verifier.code !1831
  call {:cexpr "tmp"} boogie_si_record_bv32($i60);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2029, 24} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($p2, 40);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2029, 24} true;
  assume {:verifier.code 0} true;
  $i62 := $load.bytes.bv32($M.0, $p61);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2029, 33} true;
  assume {:verifier.code 0} true;
  $i63 := $and.bv32($i62, 32bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2029, 8} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($p2, 40);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2029, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p64, $i63);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2030, 12} true;
  assume {:verifier.code 0} true;
  $p65 := $add.ref($p2, 40);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2030, 12} true;
  assume {:verifier.code 0} true;
  $i66 := $load.bytes.bv32($M.0, $p65);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2030, 21} true;
  assume {:verifier.code 0} true;
  $i67 := $eq.bv32($i66, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2030, 27} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i67} true;
  goto $bb25, $bb27;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2030, 27} true;
  assume {:verifier.code 0} true;
  assume ($i67 == 1bv1);
  goto $bb26;
$bb26:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2031, 15} true;
  assume {:verifier.code 0} true;
  $i71 := $add.bv32($i58, 1bv32);
  // WARNING: %86 = add nsw i32 %.3, 1, !dbg !1918, !verifier.code !1831
  call {:cexpr "err"} boogie_si_record_bv32($i71);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2032, 3} true;
  assume {:verifier.code 0} true;
  $i72 := $i71;
  goto $bb30;
$bb27:
  assume !(($i67 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2030, 57} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($p2, 40);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2030, 57} true;
  assume {:verifier.code 0} true;
  $i69 := $load.bytes.bv32($M.0, $p68);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2030, 49} true;
  assume {:verifier.code 0} true;
  $i70 := $ne.bv32($i60, $i69);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2030, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i70} true;
  goto $bb28, $bb29;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2030, 7} true;
  assume {:verifier.code 0} true;
  assume ($i70 == 1bv1);
  goto $bb26;
$bb29:
  assume !(($i70 == 1bv1));
  assume {:verifier.code 0} true;
  $i72 := $i58;
  goto $bb30;
$bb30:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2035, 11} true;
  assume {:verifier.code 0} true;
  $i73 := $ne.bv32($i72, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2035, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i73} true;
  goto $bb31, $bb32;
$bb31:
  assume ($i73 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2036, 5} true;
  assume {:verifier.code 0} true;
  $i74 := 1bv32;
  goto $bb33;
$bb32:
  assume !(($i73 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb34;
$bb33:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2087, 1} true;
  assume {:verifier.code 0} true;
  $r := $i74;
  $exn := false;
  return;
$bb34:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2040, 11} true;
  assume {:verifier.code 0} true;
  $i75 := $ne.bv32($i72, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2040, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i75} true;
  goto $bb35, $bb36;
$bb35:
  assume ($i75 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2041, 5} true;
  assume {:verifier.code 0} true;
  $i74 := 2bv32;
  goto $bb33;
$bb36:
  assume !(($i75 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb37;
$bb37:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2045, 12} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($p2, 12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2045, 12} true;
  assume {:verifier.code 0} true;
  $i77 := $load.bytes.bv32($M.0, $p76);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2045, 22} true;
  assume {:verifier.code 0} true;
  $i78 := $ne.bv32($i77, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2045, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i78} true;
  goto $bb38, $bb39;
$bb38:
  assume ($i78 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2046, 10} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($p2, 12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2046, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p79, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2047, 15} true;
  assume {:verifier.code 0} true;
  $i80 := $add.bv32($i72, 1bv32);
  // WARNING: %102 = add nsw i32 %.4, 1, !dbg !1938, !verifier.code !1831
  call {:cexpr "err"} boogie_si_record_bv32($i80);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2048, 3} true;
  assume {:verifier.code 0} true;
  $i81 := $i80;
  goto $bb40;
$bb39:
  assume !(($i78 == 1bv1));
  assume {:verifier.code 0} true;
  $i81 := $i72;
  goto $bb40;
$bb40:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2051, 12} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($p2, 20);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2051, 12} true;
  assume {:verifier.code 0} true;
  $i83 := $load.bytes.bv32($M.0, $p82);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2051, 27} true;
  assume {:verifier.code 0} true;
  $i84 := $ne.bv32($i83, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2051, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i84} true;
  goto $bb41, $bb42;
$bb41:
  assume ($i84 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2052, 10} true;
  assume {:verifier.code 0} true;
  $p85 := $add.ref($p2, 20);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2052, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p85, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2053, 15} true;
  assume {:verifier.code 0} true;
  $i86 := $add.bv32($i81, 1bv32);
  // WARNING: %110 = add nsw i32 %.5, 1, !dbg !1947, !verifier.code !1831
  call {:cexpr "err"} boogie_si_record_bv32($i86);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2054, 3} true;
  assume {:verifier.code 0} true;
  $i87 := $i86;
  goto $bb43;
$bb42:
  assume !(($i84 == 1bv1));
  assume {:verifier.code 0} true;
  $i87 := $i81;
  goto $bb43;
$bb43:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2057, 12} true;
  assume {:verifier.code 0} true;
  $p88 := $add.ref($p2, 28);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2057, 12} true;
  assume {:verifier.code 0} true;
  $i89 := $load.bytes.bv32($M.0, $p88);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2057, 24} true;
  assume {:verifier.code 0} true;
  $i90 := $ne.bv32($i89, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2057, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i90} true;
  goto $bb44, $bb45;
$bb44:
  assume ($i90 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2058, 10} true;
  assume {:verifier.code 0} true;
  $p91 := $add.ref($p2, 28);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2058, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p91, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2059, 15} true;
  assume {:verifier.code 0} true;
  $i92 := $add.bv32($i87, 1bv32);
  // WARNING: %118 = add nsw i32 %.6, 1, !dbg !1956, !verifier.code !1831
  call {:cexpr "err"} boogie_si_record_bv32($i92);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2060, 3} true;
  assume {:verifier.code 0} true;
  $i93 := $i92;
  goto $bb46;
$bb45:
  assume !(($i90 == 1bv1));
  assume {:verifier.code 0} true;
  $i93 := $i87;
  goto $bb46;
$bb46:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2063, 12} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($p2, 36);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2063, 12} true;
  assume {:verifier.code 0} true;
  $i95 := $load.bytes.bv32($M.0, $p94);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2063, 25} true;
  assume {:verifier.code 0} true;
  $i96 := $ne.bv32($i95, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2063, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i96} true;
  goto $bb47, $bb48;
$bb47:
  assume ($i96 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2064, 10} true;
  assume {:verifier.code 0} true;
  $p97 := $add.ref($p2, 36);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2064, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p97, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2065, 15} true;
  assume {:verifier.code 0} true;
  $i98 := $add.bv32($i93, 1bv32);
  // WARNING: %126 = add nsw i32 %.7, 1, !dbg !1965, !verifier.code !1831
  call {:cexpr "err"} boogie_si_record_bv32($i98);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2066, 3} true;
  assume {:verifier.code 0} true;
  $i99 := $i98;
  goto $bb49;
$bb48:
  assume !(($i96 == 1bv1));
  assume {:verifier.code 0} true;
  $i99 := $i93;
  goto $bb49;
$bb49:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2069, 12} true;
  assume {:verifier.code 0} true;
  $p100 := $add.ref($p2, 44);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2069, 12} true;
  assume {:verifier.code 0} true;
  $i101 := $load.bytes.bv32($M.0, $p100);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2069, 21} true;
  assume {:verifier.code 0} true;
  $i102 := $ne.bv32($i101, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2069, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i102} true;
  goto $bb50, $bb51;
$bb50:
  assume ($i102 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2070, 10} true;
  assume {:verifier.code 0} true;
  $p103 := $add.ref($p2, 44);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2070, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p103, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2071, 15} true;
  assume {:verifier.code 0} true;
  $i104 := $add.bv32($i99, 1bv32);
  // WARNING: %134 = add nsw i32 %.8, 1, !dbg !1974, !verifier.code !1831
  call {:cexpr "err"} boogie_si_record_bv32($i104);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2072, 3} true;
  assume {:verifier.code 0} true;
  $i105 := $i104;
  goto $bb52;
$bb51:
  assume !(($i102 == 1bv1));
  assume {:verifier.code 0} true;
  $i105 := $i99;
  goto $bb52;
$bb52:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2075, 11} true;
  assume {:verifier.code 0} true;
  $i106 := $ne.bv32($i105, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2075, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i106} true;
  goto $bb53, $bb54;
$bb53:
  assume ($i106 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2076, 5} true;
  assume {:verifier.code 0} true;
  $i74 := 3bv32;
  goto $bb33;
$bb54:
  assume !(($i106 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb55;
$bb55:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2080, 11} true;
  assume {:verifier.code 0} true;
  $i107 := $ne.bv32($i105, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2080, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i107} true;
  goto $bb56, $bb57;
$bb56:
  assume ($i107 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2081, 5} true;
  assume {:verifier.code 0} true;
  $i74 := 4bv32;
  goto $bb33;
$bb57:
  assume !(($i107 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb58;
$bb58:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2085, 3} true;
  assume {:verifier.code 0} true;
  $i74 := 0bv32;
  goto $bb33;
}
const ni6527_intr_cmd: ref;
axiom (ni6527_intr_cmd == $sub.ref(0, 36742));
procedure  ni6527_intr_cmd($p0: ref, $p1: ref)
  returns ($r: bv32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2093, 65} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2093, 65} true;
  assume {:verifier.code 0} true;
  $p3 := $load.bytes.ref($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2093, 35} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2093, 75} true;
  assume {:verifier.code 0} true;
  $p5 := $p4;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2093, 75} true;
  assume {:verifier.code 0} true;
  $p6 := $load.bytes.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2093, 82} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p6, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2093, 82} true;
  assume {:verifier.code 0} true;
  $p8 := $load.bytes.ref($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2093, 94} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p8, 7);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2093, 3} true;
  assume {:verifier.code 0} true;
  call writeb(12bv8, $p9);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2094, 65} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2094, 65} true;
  assume {:verifier.code 0} true;
  $p11 := $load.bytes.ref($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2094, 35} true;
  assume {:verifier.code 0} true;
  $p12 := $bitcast.ref.ref($p11);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2094, 75} true;
  assume {:verifier.code 0} true;
  $p13 := $p12;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2094, 75} true;
  assume {:verifier.code 0} true;
  $p14 := $load.bytes.ref($M.0, $p13);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2094, 82} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p14, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2094, 82} true;
  assume {:verifier.code 0} true;
  $p16 := $load.bytes.ref($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2094, 94} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p16, 21);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2094, 3} true;
  assume {:verifier.code 0} true;
  call writeb(29bv8, $p17);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2095, 3} true;
  assume {:verifier.code 0} true;
  $r := 0bv32;
  $exn := false;
  return;
}
const ni6527_intr_cancel: ref;
axiom (ni6527_intr_cancel == $sub.ref(0, 37774));
procedure  ni6527_intr_cancel($p0: ref, $p1: ref)
  returns ($r: bv32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2103, 64} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2103, 64} true;
  assume {:verifier.code 0} true;
  $p3 := $load.bytes.ref($M.0, $p2);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2103, 34} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2103, 74} true;
  assume {:verifier.code 0} true;
  $p5 := $p4;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2103, 74} true;
  assume {:verifier.code 0} true;
  $p6 := $load.bytes.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2103, 81} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p6, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2103, 81} true;
  assume {:verifier.code 0} true;
  $p8 := $load.bytes.ref($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2103, 93} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p8, 21);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2103, 3} true;
  assume {:verifier.code 0} true;
  call writeb(0bv8, $p9);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2104, 3} true;
  assume {:verifier.code 0} true;
  $r := 0bv32;
  $exn := false;
  return;
}
const ni6527_intr_insn_bits: ref;
axiom (ni6527_intr_insn_bits == $sub.ref(0, 38806));
procedure  ni6527_intr_insn_bits($p0: ref, $p1: ref, $p2: ref, $p3: ref)
  returns ($r: bv32)
{
  var $p4: ref;
  var $i5: bv32;
  var $i6: bv1;
  var $p8: ref;
  var $i7: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2113, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p2, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2113, 13} true;
  assume {:verifier.code 0} true;
  $i5 := $load.bytes.bv32($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2113, 15} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.bv32($i5, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2113, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2114, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.bv32(0bv32, 22bv32);
  goto $bb3;
$bb2:
  assume !(($i6 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2121, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2118, 10} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p3, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2118, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p8, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2119, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 2bv32;
  goto $bb3;
}
const ni6527_intr_insn_config: ref;
axiom (ni6527_intr_insn_config == $sub.ref(0, 39838));
procedure  ni6527_intr_insn_config($p0: ref, $p1: ref, $p2: ref, $p3: ref)
  returns ($r: bv32)
{
  var $p4: ref;
  var $i5: bv32;
  var $i6: bv1;
  var $i8: bv32;
  var $i9: bv1;
  var $p10: ref;
  var $i11: bv32;
  var $i12: bv8;
  var $i13: bv32;
  var $i14: bv8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: bv32;
  var $i25: bv32;
  var $i26: bv8;
  var $i27: bv32;
  var $i28: bv8;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: bv32;
  var $i39: bv32;
  var $i40: bv8;
  var $i41: bv32;
  var $i42: bv8;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: bv32;
  var $i53: bv8;
  var $i54: bv32;
  var $i55: bv8;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: bv32;
  var $i66: bv32;
  var $i67: bv8;
  var $i68: bv32;
  var $i69: bv8;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: bv32;
  var $i80: bv32;
  var $i81: bv8;
  var $i82: bv32;
  var $i83: bv8;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i7: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2128, 13} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p2, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2128, 13} true;
  assume {:verifier.code 0} true;
  $i5 := $load.bytes.bv32($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2128, 15} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.bv32($i5, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2128, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2129, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.bv32(0bv32, 22bv32);
  goto $bb3;
$bb2:
  assume !(($i6 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2146, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2133, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $load.bytes.bv32($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2133, 13} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.bv32($i8, 25bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2133, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i9 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2134, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.bv32(0bv32, 22bv32);
  goto $bb3;
$bb6:
  assume !(($i9 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2138, 40} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p3, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2138, 33} true;
  assume {:verifier.code 0} true;
  $i11 := $load.bytes.bv32($M.0, $p10);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2138, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $trunc.bv32.bv8($i11);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2138, 10} true;
  assume {:verifier.code 0} true;
  $i13 := $zext.bv8.bv32($i12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2138, 10} true;
  assume {:verifier.code 0} true;
  $i14 := $trunc.bv32.bv8($i13);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2138, 100} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2138, 100} true;
  assume {:verifier.code 0} true;
  $p16 := $load.bytes.ref($M.0, $p15);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2138, 70} true;
  assume {:verifier.code 0} true;
  $p17 := $bitcast.ref.ref($p16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2138, 110} true;
  assume {:verifier.code 0} true;
  $p18 := $p17;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2138, 110} true;
  assume {:verifier.code 0} true;
  $p19 := $load.bytes.ref($M.0, $p18);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2138, 117} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p19, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2138, 117} true;
  assume {:verifier.code 0} true;
  $p21 := $load.bytes.ref($M.0, $p20);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2138, 129} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p21, 24);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2138, 3} true;
  assume {:verifier.code 0} true;
  call writeb($i14, $p22);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2139, 41} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p3, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2139, 34} true;
  assume {:verifier.code 0} true;
  $i24 := $load.bytes.bv32($M.0, $p23);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2139, 48} true;
  assume {:verifier.code 0} true;
  $i25 := $lshr.bv32($i24, 8bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2139, 17} true;
  assume {:verifier.code 0} true;
  $i26 := $trunc.bv32.bv8($i25);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2139, 10} true;
  assume {:verifier.code 0} true;
  $i27 := $zext.bv8.bv32($i26);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2139, 10} true;
  assume {:verifier.code 0} true;
  $i28 := $trunc.bv32.bv8($i27);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2139, 107} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2139, 107} true;
  assume {:verifier.code 0} true;
  $p30 := $load.bytes.ref($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2139, 77} true;
  assume {:verifier.code 0} true;
  $p31 := $bitcast.ref.ref($p30);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2139, 117} true;
  assume {:verifier.code 0} true;
  $p32 := $p31;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2139, 117} true;
  assume {:verifier.code 0} true;
  $p33 := $load.bytes.ref($M.0, $p32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2139, 124} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p33, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2139, 124} true;
  assume {:verifier.code 0} true;
  $p35 := $load.bytes.ref($M.0, $p34);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2139, 136} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p35, 25);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2139, 3} true;
  assume {:verifier.code 0} true;
  call writeb($i28, $p36);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2140, 41} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p3, 4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2140, 34} true;
  assume {:verifier.code 0} true;
  $i38 := $load.bytes.bv32($M.0, $p37);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2140, 48} true;
  assume {:verifier.code 0} true;
  $i39 := $lshr.bv32($i38, 16bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2140, 17} true;
  assume {:verifier.code 0} true;
  $i40 := $trunc.bv32.bv8($i39);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2140, 10} true;
  assume {:verifier.code 0} true;
  $i41 := $zext.bv8.bv32($i40);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2140, 10} true;
  assume {:verifier.code 0} true;
  $i42 := $trunc.bv32.bv8($i41);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2140, 108} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2140, 108} true;
  assume {:verifier.code 0} true;
  $p44 := $load.bytes.ref($M.0, $p43);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2140, 78} true;
  assume {:verifier.code 0} true;
  $p45 := $bitcast.ref.ref($p44);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2140, 118} true;
  assume {:verifier.code 0} true;
  $p46 := $p45;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2140, 118} true;
  assume {:verifier.code 0} true;
  $p47 := $load.bytes.ref($M.0, $p46);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2140, 125} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($p47, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2140, 125} true;
  assume {:verifier.code 0} true;
  $p49 := $load.bytes.ref($M.0, $p48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2140, 137} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($p49, 26);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2140, 3} true;
  assume {:verifier.code 0} true;
  call writeb($i42, $p50);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2141, 40} true;
  assume {:verifier.code 0} true;
  $p51 := $add.ref($p3, 8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2141, 33} true;
  assume {:verifier.code 0} true;
  $i52 := $load.bytes.bv32($M.0, $p51);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2141, 17} true;
  assume {:verifier.code 0} true;
  $i53 := $trunc.bv32.bv8($i52);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2141, 10} true;
  assume {:verifier.code 0} true;
  $i54 := $zext.bv8.bv32($i53);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2141, 10} true;
  assume {:verifier.code 0} true;
  $i55 := $trunc.bv32.bv8($i54);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2141, 100} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2141, 100} true;
  assume {:verifier.code 0} true;
  $p57 := $load.bytes.ref($M.0, $p56);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2141, 70} true;
  assume {:verifier.code 0} true;
  $p58 := $bitcast.ref.ref($p57);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2141, 110} true;
  assume {:verifier.code 0} true;
  $p59 := $p58;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2141, 110} true;
  assume {:verifier.code 0} true;
  $p60 := $load.bytes.ref($M.0, $p59);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2141, 117} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($p60, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2141, 117} true;
  assume {:verifier.code 0} true;
  $p62 := $load.bytes.ref($M.0, $p61);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2141, 129} true;
  assume {:verifier.code 0} true;
  $p63 := $add.ref($p62, 32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2141, 3} true;
  assume {:verifier.code 0} true;
  call writeb($i55, $p63);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2142, 41} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($p3, 8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2142, 34} true;
  assume {:verifier.code 0} true;
  $i65 := $load.bytes.bv32($M.0, $p64);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2142, 48} true;
  assume {:verifier.code 0} true;
  $i66 := $lshr.bv32($i65, 8bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2142, 17} true;
  assume {:verifier.code 0} true;
  $i67 := $trunc.bv32.bv8($i66);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2142, 10} true;
  assume {:verifier.code 0} true;
  $i68 := $zext.bv8.bv32($i67);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2142, 10} true;
  assume {:verifier.code 0} true;
  $i69 := $trunc.bv32.bv8($i68);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2142, 107} true;
  assume {:verifier.code 0} true;
  $p70 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2142, 107} true;
  assume {:verifier.code 0} true;
  $p71 := $load.bytes.ref($M.0, $p70);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2142, 77} true;
  assume {:verifier.code 0} true;
  $p72 := $bitcast.ref.ref($p71);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2142, 117} true;
  assume {:verifier.code 0} true;
  $p73 := $p72;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2142, 117} true;
  assume {:verifier.code 0} true;
  $p74 := $load.bytes.ref($M.0, $p73);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2142, 124} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($p74, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2142, 124} true;
  assume {:verifier.code 0} true;
  $p76 := $load.bytes.ref($M.0, $p75);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2142, 136} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($p76, 33);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2142, 3} true;
  assume {:verifier.code 0} true;
  call writeb($i69, $p77);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2143, 41} true;
  assume {:verifier.code 0} true;
  $p78 := $add.ref($p3, 8);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2143, 34} true;
  assume {:verifier.code 0} true;
  $i79 := $load.bytes.bv32($M.0, $p78);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2143, 48} true;
  assume {:verifier.code 0} true;
  $i80 := $lshr.bv32($i79, 16bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2143, 17} true;
  assume {:verifier.code 0} true;
  $i81 := $trunc.bv32.bv8($i80);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2143, 10} true;
  assume {:verifier.code 0} true;
  $i82 := $zext.bv8.bv32($i81);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2143, 10} true;
  assume {:verifier.code 0} true;
  $i83 := $trunc.bv32.bv8($i82);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2143, 108} true;
  assume {:verifier.code 0} true;
  $p84 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2143, 108} true;
  assume {:verifier.code 0} true;
  $p85 := $load.bytes.ref($M.0, $p84);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2143, 78} true;
  assume {:verifier.code 0} true;
  $p86 := $bitcast.ref.ref($p85);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2143, 118} true;
  assume {:verifier.code 0} true;
  $p87 := $p86;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2143, 118} true;
  assume {:verifier.code 0} true;
  $p88 := $load.bytes.ref($M.0, $p87);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2143, 125} true;
  assume {:verifier.code 0} true;
  $p89 := $add.ref($p88, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2143, 125} true;
  assume {:verifier.code 0} true;
  $p90 := $load.bytes.ref($M.0, $p89);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2143, 137} true;
  assume {:verifier.code 0} true;
  $p91 := $add.ref($p90, 34);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2143, 3} true;
  assume {:verifier.code 0} true;
  call writeb($i83, $p91);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2144, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 2bv32;
  goto $bb3;
}
const mite_irq: ref;
axiom (mite_irq == $sub.ref(0, 40870));
procedure  mite_irq($p0: ref)
  returns ($r: bv32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1837, 18} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1837, 18} true;
  assume {:verifier.code 0} true;
  $p2 := $load.bytes.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1837, 27} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 1252);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1837, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $load.bytes.bv32($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1837, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const ni6527_interrupt: ref;
axiom (ni6527_interrupt == $sub.ref(0, 41902));
procedure  ni6527_interrupt($i0: bv32, $p1: ref)
  returns ($r: bv32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: bv8;
  var $i15: bv32;
  var $i16: bv32;
  var $i17: bv1;
  var $i19: bv32;
  var $i20: bv1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: bv32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: bv32;
  var $i36: bv32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i18: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1971, 9} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1972, 12} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 320);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1972, 12} true;
  assume {:verifier.code 0} true;
  $p4 := $load.bytes.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1972, 23} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p4, 608);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1973, 72} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p2, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1973, 72} true;
  assume {:verifier.code 0} true;
  $p7 := $load.bytes.ref($M.0, $p6);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1973, 42} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1973, 82} true;
  assume {:verifier.code 0} true;
  $p9 := $p8;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1973, 82} true;
  assume {:verifier.code 0} true;
  $p10 := $load.bytes.ref($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1973, 89} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p10, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1973, 89} true;
  assume {:verifier.code 0} true;
  $p12 := $load.bytes.ref($M.0, $p11);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1973, 101} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p12, 20);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1973, 9} true;
  assume {:verifier.code 0} true;
  call $i14 := readb($p13);
  // WARNING: %15 = call zeroext i8 @readb(i8* %14), !dbg !1850, !verifier.code !1834
  call {:cexpr "tmp"} boogie_si_record_bv8($i14);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1974, 12} true;
  assume {:verifier.code 0} true;
  $i15 := $zext.bv8.bv32($i14);
  // WARNING: %16 = zext i8 %15 to i32, !dbg !1853, !verifier.code !1834
  call {:cexpr "status"} boogie_si_record_bv32($i15);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1975, 15} true;
  assume {:verifier.code 0} true;
  $i16 := $and.bv32($i15, 4bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1975, 21} true;
  assume {:verifier.code 0} true;
  $i17 := $eq.bv32($i16, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1975, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i17 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1976, 5} true;
  assume {:verifier.code 0} true;
  $i18 := 0bv32;
  goto $bb3;
$bb2:
  assume !(($i17 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1991, 1} true;
  assume {:verifier.code 0} true;
  $r := $i18;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1980, 15} true;
  assume {:verifier.code 0} true;
  $i19 := $and.bv32($i15, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1980, 21} true;
  assume {:verifier.code 0} true;
  $i20 := $eq.bv32($i19, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1980, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i20 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1981, 5} true;
  assume {:verifier.code 0} true;
  $i18 := 0bv32;
  goto $bb3;
$bb6:
  assume !(($i20 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1985, 65} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p2, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1985, 65} true;
  assume {:verifier.code 0} true;
  $p22 := $load.bytes.ref($M.0, $p21);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1985, 35} true;
  assume {:verifier.code 0} true;
  $p23 := $bitcast.ref.ref($p22);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1985, 75} true;
  assume {:verifier.code 0} true;
  $p24 := $p23;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1985, 75} true;
  assume {:verifier.code 0} true;
  $p25 := $load.bytes.ref($M.0, $p24);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1985, 82} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p25, 48);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1985, 82} true;
  assume {:verifier.code 0} true;
  $p27 := $load.bytes.ref($M.0, $p26);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1985, 94} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p27, 7);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1985, 3} true;
  assume {:verifier.code 0} true;
  call writeb(12bv8, $p28);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1986, 21} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($add.ref($p4, 608), 32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1986, 21} true;
  assume {:verifier.code 0} true;
  $p30 := $load.bytes.ref($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1986, 3} true;
  assume {:verifier.code 0} true;
  call $i31 := comedi_buf_put($p30, 0bv16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1987, 28} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($add.ref($p4, 608), 32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1987, 28} true;
  assume {:verifier.code 0} true;
  $p33 := $load.bytes.ref($M.0, $p32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1987, 36} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p33, 88);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1987, 36} true;
  assume {:verifier.code 0} true;
  $i35 := $load.bytes.bv32($M.0, $p34);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1987, 43} true;
  assume {:verifier.code 0} true;
  $i36 := $or.bv32($i35, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1987, 7} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($add.ref($p4, 608), 32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1987, 7} true;
  assume {:verifier.code 0} true;
  $p38 := $load.bytes.ref($M.0, $p37);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1987, 15} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($p38, 88);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1987, 22} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p39, $i36);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1988, 3} true;
  assume {:verifier.code 0} true;
  call comedi_event($p2, $p5);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1989, 3} true;
  assume {:verifier.code 0} true;
  $i18 := 1bv32;
  goto $bb3;
}
const request_irq: ref;
axiom (request_irq == $sub.ref(0, 42934));
procedure  request_irq($i0: bv32, $p1: ref, $i2: bv64, $p3: ref, $p4: ref)
  returns ($r: bv32)
{
  var $i5: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 (i32, i8*)* %1, i64 0, metadata !2907, metadata !1833), !dbg !2908, !verifier.code !1830
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1457, 9} true;
  assume {:verifier.code 0} true;
  call $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
  // WARNING: %6 = call i32 @request_threaded_irq(i32 %0, i32 (i32, i8*)* %1, i32 (i32, i8*)* null, i64 %2, i8* %3, i8* %4), !dbg !1846, !verifier.code !1837
  call {:cexpr "tmp"} boogie_si_record_bv32($i5);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1458, 3} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const request_threaded_irq: ref;
axiom (request_threaded_irq == $sub.ref(0, 43966));
procedure  request_threaded_irq($i0: bv32, $p1: ref, $p2: ref, $i3: bv64, $p4: ref, $p5: ref)
  returns ($r: bv32);
const comedi_buf_put: ref;
axiom (comedi_buf_put == $sub.ref(0, 44998));
procedure  comedi_buf_put($p0: ref, $i1: bv16)
  returns ($r: bv32);
const comedi_event: ref;
axiom (comedi_event == $sub.ref(0, 46030));
procedure  comedi_event($p0: ref, $p1: ref);
const kcalloc: ref;
axiom (kcalloc == $sub.ref(0, 47062));
procedure  kcalloc($i0: bv64, $i1: bv64, $i2: bv32)
  returns ($r: ref)
{
  var $i3: bv1;
  var $i4: bv64;
  var $i5: bv1;
  var $i7: bv64;
  var $i8: bv32;
  var $p9: ref;
  var $p6: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !2923, metadata !1833), !dbg !2924, !verifier.code !1830
  // WARNING: call void @llvm.dbg.value(metadata i64 %1, i64 0, metadata !2925, metadata !1833), !dbg !2926, !verifier.code !1830
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1736, 12} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.bv64($i1, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1736, 19} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1736, 43} true;
  assume {:verifier.code 0} true;
  $i4 := $udiv.bv64($sub.bv64(0bv64, 1bv64), $i1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1736, 50} true;
  assume {:verifier.code 0} true;
  $i5 := $ult.bv64($i4, $i0);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1736, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1736, 19} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1bv1));
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  goto $bb7;
$bb4:
  assume ($i5 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1737, 5} true;
  assume {:verifier.code 0} true;
  $p6 := $0.ref;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1736, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1bv1));
  goto $bb3;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1744, 1} true;
  assume {:verifier.code 0} true;
  $r := $p6;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1741, 21} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.bv64($i0, $i1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1741, 35} true;
  assume {:verifier.code 0} true;
  $i8 := $or.bv32($i2, 32768bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1741, 9} true;
  assume {:verifier.code 0} true;
  call $p9 := __kmalloc($i7, $i8);
  assume $isExternal($p9);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1742, 3} true;
  assume {:verifier.code 0} true;
  $p6 := $p9;
  goto $bb6;
}
const spinlock_check: ref;
axiom (spinlock_check == $sub.ref(0, 48094));
procedure  spinlock_check($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1427, 19} true;
  assume {:verifier.code 0} true;
  $p1 := $p0;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1427, 28} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1427, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const __raw_spin_lock_init: ref;
axiom (__raw_spin_lock_init == $sub.ref(0, 49126));
procedure  __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
const __kmalloc: ref;
axiom (__kmalloc == $sub.ref(0, 50158));
procedure  __kmalloc($i0: bv64, $i1: bv32)
  returns ($r: ref);
const mite_device_id: ref;
axiom (mite_device_id == $sub.ref(0, 51190));
procedure  mite_device_id($p0: ref)
  returns ($r: bv32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: bv16;
  var $i5: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1845, 33} true;
  assume {:verifier.code 0} true;
  $p1 := $add.ref($p0, 16);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1845, 33} true;
  assume {:verifier.code 0} true;
  $p2 := $load.bytes.ref($M.0, $p1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1845, 42} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, 62);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1845, 42} true;
  assume {:verifier.code 0} true;
  $i4 := $load.bytes.bv16($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1845, 11} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.bv16.bv32($i4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1845, 3} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const mite_list_devices: ref;
axiom (mite_list_devices == $sub.ref(0, 52222));
procedure  mite_list_devices();
const kzalloc: ref;
axiom (kzalloc == $sub.ref(0, 53254));
procedure  kzalloc($i0: bv64, $i1: bv32)
  returns ($r: ref)
{
  var $i2: bv32;
  var $p3: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !2969, metadata !1833), !dbg !2970, !verifier.code !1830
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1750, 29} true;
  assume {:verifier.code 0} true;
  $i2 := $or.bv32($i1, 32768bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1750, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := kmalloc($i0, $i2);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1751, 3} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const kmalloc: ref;
axiom (kmalloc == $sub.ref(0, 54286));
procedure  kmalloc($i0: bv64, $i1: bv32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !2980, metadata !1833), !dbg !2981, !verifier.code !1830
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1727, 13} true;
  assume {:verifier.code 0} true;
  call $p2 := __kmalloc($i0, $i1);
  assume $isExternal($p2);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 1728, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const driver_ni6527_pci_probe: ref;
axiom (driver_ni6527_pci_probe == $sub.ref(0, 55318));
procedure  driver_ni6527_pci_probe($p0: ref, $p1: ref)
  returns ($r: bv32)
{
  var $p2: ref;
  var $i3: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2310, 51} true;
  assume {:verifier.code 0} true;
  $p2 := $load.bytes.ref($M.0, $add.ref(driver_ni6527, 8));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2310, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := comedi_pci_auto_config($p0, $p2);
  // WARNING: %4 = call i32 @comedi_pci_auto_config(%struct.pci_dev* %0, i8* %3), !dbg !1836, !verifier.code !1831
  call {:cexpr "tmp"} boogie_si_record_bv32($i3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2311, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const driver_ni6527_pci_remove: ref;
axiom (driver_ni6527_pci_remove == $sub.ref(0, 56350));
procedure  driver_ni6527_pci_remove($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2319, 3} true;
  assume {:verifier.code 0} true;
  call comedi_pci_auto_unconfig($p0);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2320, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const comedi_pci_auto_unconfig: ref;
axiom (comedi_pci_auto_unconfig == $sub.ref(0, 57382));
procedure  comedi_pci_auto_unconfig($p0: ref);
const comedi_pci_auto_config: ref;
axiom (comedi_pci_auto_config == $sub.ref(0, 58414));
procedure  comedi_pci_auto_config($p0: ref, $p1: ref)
  returns ($r: bv32);
const ldv_module_description: ref;
axiom (ldv_module_description == $sub.ref(0, 59446));
procedure  ldv_module_description()
  returns ($r: bv32)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2371, 3} true;
  assume {:verifier.code 0} true;
  $r := 1bv32;
  $exn := false;
  return;
}
const ldv_module_license: ref;
axiom (ldv_module_license == $sub.ref(0, 60478));
procedure  ldv_module_license()
  returns ($r: bv32)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2379, 3} true;
  assume {:verifier.code 0} true;
  $r := 1bv32;
  $exn := false;
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 61510));
procedure {:entrypoint} main()
  returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv1;
  var $i2: bv32;
  var $i3: bv1;
  var $i4: bv32;
  var $i5: bv1;
  var $i6: bv1;
  var $i7: bv1;
  var $i8: bv1;
  var $i9: bv32;
  var $i10: bv32;
  var $i11: bv32;
  var $i12: bv32;
  var $i13: bv1;
$bb0:
  call $initialize();
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2398, 20} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2398, 20} true;
  assume {:verifier.code 0} true;
  $M.1 := 1bv32;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_bv32(1bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2399, 3} true;
  assume {:verifier.code 0} true;
  call ldv_initialize();
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2400, 3} true;
  assume {:verifier.code 0} true;
  call ldv_handler_precall();
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2401, 9} true;
  assume {:verifier.code 0} true;
  call $i0 := driver_ni6527_init_module();
  // WARNING: %1 = call i32 @driver_ni6527_init_module(), !dbg !1833, !verifier.code !1830
  call {:cexpr "tmp"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2402, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.bv32($i0, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2402, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2403, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2440, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_final_state();
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2441, 3} true;
  assume {:verifier.code 0} true;
  $r := 0bv32;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2430, 13} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i2);
  // WARNING: %6 = call i32 @__VERIFIER_nondet_int(), !dbg !1842, !verifier.code !1843
  call {:cexpr "tmp___1"} boogie_si_record_bv32($i2);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2431, 15} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.bv32($i2, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2431, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2431, 7} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2431, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1bv1));
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  goto $bb24;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2432, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2409, 13} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i4);
  // WARNING: %9 = call i32 @__VERIFIER_nondet_int(), !dbg !1849, !verifier.code !1843
  call {:cexpr "tmp___0"} boogie_si_record_bv32($i4);
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:verifier.code 0} true;
  $i5 := $slt.bv32($i4, 1bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i5 == 1bv1);
  assume {:verifier.code 0} true;
  $i8 := $eq.bv32($i4, 0bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb18, $bb19;
$bb12:
  assume !(($i5 == 1bv1));
  assume {:verifier.code 0} true;
  $i6 := $slt.bv32($i4, 2bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i6 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2416, 3} true;
  assume {:verifier.code 0} true;
  call ldv_handler_precall();
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2417, 3} true;
  assume {:verifier.code 0} true;
  call $i10 := ni6527_detach($u0);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2418, 3} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb14:
  assume !(($i6 == 1bv1));
  assume {:verifier.code 0} true;
  $i7 := $eq.bv32($i4, 2bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb15, $bb16;
$bb15:
  assume ($i7 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2420, 20} true;
  assume {:verifier.code 0} true;
  $M.1 := 2bv32;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_bv32(2bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2421, 3} true;
  assume {:verifier.code 0} true;
  call ldv_handler_precall();
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2422, 3} true;
  assume {:verifier.code 0} true;
  call $i11 := ni6527_interrupt($u2, $u3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2423, 20} true;
  assume {:verifier.code 0} true;
  $M.1 := 1bv32;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_bv32(1bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2424, 3} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb16:
  assume {:verifier.code 0} true;
  assume !(($i7 == 1bv1));
  goto $bb17;
$bb17:
  assume {:verifier.code 0} true;
  goto $bb21;
$bb18:
  assume ($i8 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2412, 3} true;
  assume {:verifier.code 0} true;
  call ldv_handler_precall();
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2413, 3} true;
  assume {:verifier.code 0} true;
  call $i9 := ni6527_attach($u0, $u1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2414, 3} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb19:
  assume {:verifier.code 0} true;
  assume !(($i8 == 1bv1));
  goto $bb17;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2430, 13} true;
  assume {:verifier.code 1} true;
  call $i12 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i12);
  // WARNING: %18 = call i32 @__VERIFIER_nondet_int(), !dbg !1842, !verifier.code !1843
  call {:cexpr "tmp___1"} boogie_si_record_bv32($i12);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2431, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.bv32($i12, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2431, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb22, $bb23;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2426, 3} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2431, 7} true;
  assume {:verifier.code 0} true;
  assume ($i13 == 1bv1);
  goto $bb8;
$bb23:
  assume !(($i13 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2431, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2437, 3} true;
  assume {:verifier.code 0} true;
  call ldv_handler_precall();
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2438, 3} true;
  assume {:verifier.code 0} true;
  call driver_ni6527_cleanup_module();
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2438, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const ldv_initialize: ref;
axiom (ldv_initialize == $sub.ref(0, 62542));
procedure  ldv_initialize();
const ldv_handler_precall: ref;
axiom (ldv_handler_precall == $sub.ref(0, 63574));
procedure  ldv_handler_precall();
const driver_ni6527_init_module: ref;
axiom (driver_ni6527_init_module == $sub.ref(0, 64606));
procedure  driver_ni6527_init_module()
  returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv1;
  var $p3: ref;
  var $i4: bv32;
  var $i2: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2337, 12} true;
  assume {:verifier.code 0} true;
  call $i0 := comedi_driver_register(driver_ni6527);
  // WARNING: %1 = call i32 @comedi_driver_register(%struct.comedi_driver* @driver_ni6527), !dbg !1828, !verifier.code !1830
  call {:cexpr "retval"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2338, 14} true;
  assume {:verifier.code 0} true;
  $i1 := $slt.bv32($i0, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2338, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2339, 5} true;
  assume {:verifier.code 0} true;
  $i2 := $i0;
  goto $bb3;
$bb2:
  assume !(($i1 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2347, 1} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2343, 49} true;
  assume {:verifier.code 0} true;
  $p3 := $load.bytes.ref($M.0, $add.ref(driver_ni6527, 8));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2343, 33} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527_pci_driver, 16), $p3);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2344, 9} true;
  assume {:verifier.code 0} true;
  call $i4 := __pci_register_driver(driver_ni6527_pci_driver, __this_module, .str);
  // WARNING: %7 = call i32 @__pci_register_driver(%struct.pci_driver* @driver_ni6527_pci_driver, %struct.module* @__this_module, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0)), !dbg !1841, !verifier.code !1830
  call {:cexpr "tmp"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2345, 3} true;
  assume {:verifier.code 0} true;
  $i2 := $i4;
  goto $bb3;
}
const driver_ni6527_cleanup_module: ref;
axiom (driver_ni6527_cleanup_module == $sub.ref(0, 65638));
procedure  driver_ni6527_cleanup_module()
{
  var $i0: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2353, 3} true;
  assume {:verifier.code 0} true;
  call pci_unregister_driver(driver_ni6527_pci_driver);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2354, 3} true;
  assume {:verifier.code 0} true;
  call $i0 := comedi_driver_unregister(driver_ni6527);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2355, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_check_final_state: ref;
axiom (ldv_check_final_state == $sub.ref(0, 66670));
procedure  ldv_check_final_state()
{
  var $i0: bv32;
  var $i1: bv1;
  var $i2: bv32;
  var $i3: bv1;
  var $i4: bv32;
  var $i5: bv1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2467, 9} true;
  assume {:verifier.code 0} true;
  call $i0 := ldv_module_license();
  // WARNING: %1 = call i32 @ldv_module_license(), !dbg !1828, !verifier.code !1830
  call {:cexpr "tmp"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2468, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.bv32($i0, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2468, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2470, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2471, 5} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2473, 13} true;
  assume {:verifier.code 0} true;
  call $i2 := ldv_module_author();
  // WARNING: %6 = call i32 @ldv_module_author(), !dbg !1841, !verifier.code !1830
  call {:cexpr "tmp___0"} boogie_si_record_bv32($i2);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2474, 15} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.bv32($i2, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2474, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2476, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i3 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2477, 5} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2479, 13} true;
  assume {:verifier.code 0} true;
  call $i4 := ldv_module_description();
  // WARNING: %11 = call i32 @ldv_module_description(), !dbg !1851, !verifier.code !1830
  call {:cexpr "tmp___1"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2480, 15} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.bv32($i4, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2480, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i5 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2482, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i5 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2483, 5} true;
  assume {:verifier.code 0} true;
  call ldv_error();
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2485, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_error: ref;
axiom (ldv_error == $sub.ref(0, 67702));
procedure  ldv_error()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2448, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2449, 10} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "/proj/SMACK/smac/m0_true-unreach-call_drivers-staging-comedi-drivers-ni_6527-ko--107_1a--adbbc36-3hVZAD.c", 2451, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const pci_unregister_driver: ref;
axiom (pci_unregister_driver == $sub.ref(0, 68734));
procedure  pci_unregister_driver($p0: ref);
const comedi_driver_unregister: ref;
axiom (comedi_driver_unregister == $sub.ref(0, 69766));
procedure  comedi_driver_unregister($p0: ref)
  returns ($r: bv32);
const comedi_driver_register: ref;
axiom (comedi_driver_register == $sub.ref(0, 70798));
procedure  comedi_driver_register($p0: ref)
  returns ($r: bv32);
const __pci_register_driver: ref;
axiom (__pci_register_driver == $sub.ref(0, 71830));
procedure  __pci_register_driver($p0: ref, $p1: ref, $p2: ref)
  returns ($r: bv32);
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 72862));
procedure  __VERIFIER_assume($i0: bv32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !3117, metadata !1833), !dbg !3118, !verifier.code !1830
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 34, 21} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 35, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 73894));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.bv32($p0: ref, p.1: bv32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 74926));
procedure  __SMACK_dummy($i0: bv32)
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 261, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_error: ref;
axiom (__VERIFIER_error == $sub.ref(0, 75958));
procedure  __VERIFIER_error()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 47, 3} true;
  assume {:verifier.code 1} true;
  assert false;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 51, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 76990));
procedure  __SMACK_nondet_char()
  returns ($r: bv8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 78022));
procedure  __SMACK_nondet_signed_char()
  returns ($r: bv8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 79054));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: bv8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 80086));
procedure  __SMACK_nondet_short()
  returns ($r: bv16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 81118));
procedure  __SMACK_nondet_signed_short()
  returns ($r: bv16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 82150));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: bv16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 83182));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: bv16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 84214));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: bv16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 85246));
procedure  __VERIFIER_nondet_int()
  returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv1;
  var $i3: bv1;
  var $i2: bv1;
  var $i4: bv32;
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 120, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_bv32($i0);
  // WARNING: %1 = call i32 @__SMACK_nondet_int(), !dbg !1828, !verifier.code !1829
  call {:cexpr "x"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.bv32($i0, $sub.bv32(0bv32, 2147483648bv32));
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0bv1;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.bv32($i0, 2147483647bv32);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1bv1));
  goto $bb3;
$bb3:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.bv1.bv32($i2);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 122, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 86278));
procedure  __SMACK_nondet_int()
  returns ($r: bv32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 87310));
procedure  __SMACK_nondet_signed_int()
  returns ($r: bv32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 88342));
procedure  __SMACK_nondet_unsigned()
  returns ($r: bv32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 89374));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: bv32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 90406));
procedure  __SMACK_nondet_long()
  returns ($r: bv64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 91438));
procedure  __SMACK_nondet_long_int()
  returns ($r: bv64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 92470));
procedure  __SMACK_nondet_signed_long()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 93502));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 94534));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 95566));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: bv64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 96598));
procedure  __SMACK_nondet_long_long()
  returns ($r: bv64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 97630));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 98662));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 99694));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 100726));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 101758));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: bv64);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 102790));
function {:inline} $bitcast.ref.ref(i: ref) returns (ref) {i}
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $min.bv128(i1: bv128, i2: bv128) returns (bv128) {if $slt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv96(i1: bv96, i2: bv96) returns (bv96) {if $slt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv88(i1: bv88, i2: bv88) returns (bv88) {if $slt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv64(i1: bv64, i2: bv64) returns (bv64) {if $slt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv56(i1: bv56, i2: bv56) returns (bv56) {if $slt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv48(i1: bv48, i2: bv48) returns (bv48) {if $slt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv40(i1: bv40, i2: bv40) returns (bv40) {if $slt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv32(i1: bv32, i2: bv32) returns (bv32) {if $slt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv24(i1: bv24, i2: bv24) returns (bv24) {if $slt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv16(i1: bv16, i2: bv16) returns (bv16) {if $slt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv8(i1: bv8, i2: bv8) returns (bv8) {if $slt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv128(i1: bv128, i2: bv128) returns (bv128) {if $sgt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv96(i1: bv96, i2: bv96) returns (bv96) {if $sgt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv88(i1: bv88, i2: bv88) returns (bv88) {if $sgt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv64(i1: bv64, i2: bv64) returns (bv64) {if $sgt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv56(i1: bv56, i2: bv56) returns (bv56) {if $sgt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv48(i1: bv48, i2: bv48) returns (bv48) {if $sgt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv40(i1: bv40, i2: bv40) returns (bv40) {if $sgt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv32(i1: bv32, i2: bv32) returns (bv32) {if $sgt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv24(i1: bv24, i2: bv24) returns (bv24) {if $sgt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv16(i1: bv16, i2: bv16) returns (bv16) {if $sgt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv8(i1: bv8, i2: bv8) returns (bv8) {if $sgt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ult.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ult.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ult.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ult.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ult.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ult.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ult.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ult.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ult.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ult.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ult.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ugt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ugt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ugt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ugt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ugt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ugt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ugt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ugt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ugt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ugt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ugt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then i1 else i2}
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) returns (bv128);
function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) returns (bv96);
function {:bvbuiltin "bvnot"} $not.bv88(i: bv88) returns (bv88);
function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) returns (bv64);
function {:bvbuiltin "bvnot"} $not.bv56(i: bv56) returns (bv56);
function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) returns (bv48);
function {:bvbuiltin "bvnot"} $not.bv40(i: bv40) returns (bv40);
function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) returns (bv32);
function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) returns (bv24);
function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) returns (bv16);
function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) returns (bv8);
function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) returns (bv1);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 == i2} function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 == i2} function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 == i2} function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 == i2} function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 == i2} function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 == i2} function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 == i2} function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 == i2} function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 == i2} function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 == i2} function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 == i2} function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 == i2} function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 != i2} function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 != i2} function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 != i2} function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 != i2} function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 != i2} function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 != i2} function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 != i2} function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 != i2} function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 != i2} function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 != i2} function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 != i2} function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 != i2} function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ule.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ule.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ule.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ule.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ule.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ule.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ule.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ule.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ule.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ule.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ule.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ule.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ult.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ult.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ult.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ult.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ult.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ult.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ult.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ult.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ult.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ult.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ult.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $uge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $uge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $uge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $uge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $uge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $uge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $uge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $uge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $uge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $uge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $uge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $uge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ugt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ugt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ugt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ugt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ugt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ugt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ugt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ugt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ugt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ugt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ugt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sle.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sle.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sle.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sle.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sle.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sle.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sle.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sle.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sle.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sle.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sle.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sle.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $slt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $slt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $slt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $slt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $slt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $slt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $slt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $slt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $slt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $slt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $slt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sgt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sgt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sgt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sgt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sgt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sgt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sgt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sgt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sgt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sgt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sgt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:inline} $trunc.bv128.bv96(i: bv128) returns (bv96) {i[96:0]}
function {:inline} $trunc.bv128.bv88(i: bv128) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv128.bv64(i: bv128) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv128.bv56(i: bv128) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv128.bv48(i: bv128) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv128.bv40(i: bv128) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv128.bv32(i: bv128) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv128.bv24(i: bv128) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv128.bv16(i: bv128) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv128.bv8(i: bv128) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv128.bv1(i: bv128) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv96.bv88(i: bv96) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv96.bv64(i: bv96) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv96.bv56(i: bv96) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv96.bv48(i: bv96) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv96.bv40(i: bv96) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv96.bv32(i: bv96) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv96.bv24(i: bv96) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv96.bv16(i: bv96) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv96.bv8(i: bv96) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv96.bv1(i: bv96) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv88.bv64(i: bv88) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv88.bv56(i: bv88) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv88.bv48(i: bv88) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv88.bv40(i: bv88) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv88.bv32(i: bv88) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv88.bv24(i: bv88) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv88.bv16(i: bv88) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv88.bv8(i: bv88) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv88.bv1(i: bv88) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv64.bv56(i: bv64) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv64.bv48(i: bv64) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv64.bv40(i: bv64) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv64.bv32(i: bv64) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv64.bv24(i: bv64) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv64.bv16(i: bv64) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv64.bv8(i: bv64) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv64.bv1(i: bv64) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv56.bv48(i: bv56) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv56.bv40(i: bv56) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv56.bv32(i: bv56) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv56.bv24(i: bv56) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv56.bv16(i: bv56) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv56.bv8(i: bv56) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv56.bv1(i: bv56) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv48.bv32(i: bv48) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv48.bv24(i: bv48) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv48.bv16(i: bv48) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv48.bv8(i: bv48) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv48.bv1(i: bv48) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv40.bv32(i: bv40) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv40.bv24(i: bv40) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv40.bv16(i: bv40) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv40.bv8(i: bv40) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv40.bv1(i: bv40) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv32.bv24(i: bv32) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv32.bv16(i: bv32) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv32.bv8(i: bv32) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv32.bv1(i: bv32) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv24.bv16(i: bv24) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv24.bv8(i: bv24) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv24.bv1(i: bv24) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv16.bv8(i: bv16) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv16.bv1(i: bv16) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv8.bv1(i: bv8) returns (bv1) {i[1:0]}
function {:inline} $zext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 1bv8}
function {:inline} $zext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 1bv16}
function {:inline} $zext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 1bv24}
function {:inline} $zext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 1bv32}
function {:inline} $zext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1bv40}
function {:inline} $zext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 1bv48}
function {:inline} $zext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 1bv56}
function {:inline} $zext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 1bv64}
function {:inline} $zext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 1bv88}
function {:inline} $zext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 1bv96}
function {:inline} $zext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 1bv128}
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $sext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 255bv8}
function {:inline} $sext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 65535bv16}
function {:inline} $sext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 16777215bv24}
function {:inline} $sext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 4294967295bv32}
function {:inline} $sext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1099511627775bv40}
function {:inline} $sext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 281474976710655bv48}
function {:inline} $sext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 72057594037927935bv56}
function {:inline} $sext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 18446744073709551615bv64}
function {:inline} $sext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88}
function {:inline} $sext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96}
function {:inline} $sext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128}
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) {i1 + i2}
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) {i1 + i2}
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) {i1 + i2}
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) {i1 + i2}
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) {i1 + i2}
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) {i1 + i2}
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) {i1 + i2}
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) {i1 + i2}
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) {i1 + i2}
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) {i1 + i2}
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) {i1 + i2}
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) {i1 + i2}
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) {i1 - i2}
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) {i1 - i2}
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) {i1 - i2}
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) {i1 - i2}
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) {i1 - i2}
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) {i1 - i2}
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) {i1 - i2}
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) {i1 - i2}
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) {i1 - i2}
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) {i1 - i2}
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) {i1 - i2}
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) {i1 - i2}
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) {i1 * i2}
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) {i1 * i2}
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) {i1 * i2}
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) {i1 * i2}
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) {i1 * i2}
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) {i1 * i2}
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) {i1 * i2}
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) {i1 * i2}
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) {i1 * i2}
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) {i1 * i2}
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) {i1 * i2}
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) {i1 * i2}
function {:builtin "div"} $div(i1: int, i2: int) returns (int);
function {:builtin "mod"} $mod(i1: int, i2: int) returns (int);
function {:builtin "rem"} $rem(i1: int, i2: int) returns (int);
function {:inline} $min(i1: int, i2: int) returns (int) {if i1 < i2 then i1 else i2}
function {:inline} $max(i1: int, i2: int) returns (int) {if i1 > i2 then i1 else i2}
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $not.i128(i: i128) returns (i128);
function $not.i96(i: i96) returns (i96);
function $not.i88(i: i88) returns (i88);
function $not.i64(i: i64) returns (i64);
function $not.i56(i: i56) returns (i56);
function $not.i48(i: i48) returns (i48);
function $not.i40(i: i40) returns (i40);
function $not.i32(i: i32) returns (i32);
function $not.i24(i: i24) returns (i24);
function $not.i16(i: i16) returns (i16);
function $not.i8(i: i8) returns (i8);
function $not.i1(i: i1) returns (i1);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) {i1 == i2} function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) {i1 == i2} function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) {i1 == i2} function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) {i1 == i2} function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) {i1 == i2} function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) {i1 == i2} function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) {i1 == i2} function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) {i1 == i2} function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) {i1 == i2} function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) {i1 == i2} function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) {i1 == i2} function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) {i1 == i2} function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) {i1 != i2} function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) {i1 != i2} function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) {i1 != i2} function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) {i1 != i2} function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) {i1 != i2} function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) {i1 != i2} function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) {i1 != i2} function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) {i1 != i2} function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) {i1 != i2} function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) {i1 != i2} function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) {i1 != i2} function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) {i1 != i2} function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
axiom $and.i1(0,0) == 0;
axiom $and.i1(0,1) == 0;
axiom $and.i1(1,0) == 0;
axiom $and.i1(1,1) == 1;
axiom $or.i1(0,0) == 0;
axiom $or.i1(0,1) == 1;
axiom $or.i1(1,0) == 1;
axiom $or.i1(1,1) == 1;
axiom $xor.i1(0,0) == 0;
axiom $xor.i1(0,1) == 1;
axiom $xor.i1(1,0) == 1;
axiom $xor.i1(1,1) == 0;
axiom($and.i32(32, 16) == 0);
function {:inline} $trunc.i128.i96(i: i128) returns (i96) {i}
function {:inline} $trunc.i128.i88(i: i128) returns (i88) {i}
function {:inline} $trunc.i128.i64(i: i128) returns (i64) {i}
function {:inline} $trunc.i128.i56(i: i128) returns (i56) {i}
function {:inline} $trunc.i128.i48(i: i128) returns (i48) {i}
function {:inline} $trunc.i128.i40(i: i128) returns (i40) {i}
function {:inline} $trunc.i128.i32(i: i128) returns (i32) {i}
function {:inline} $trunc.i128.i24(i: i128) returns (i24) {i}
function {:inline} $trunc.i128.i16(i: i128) returns (i16) {i}
function {:inline} $trunc.i128.i8(i: i128) returns (i8) {i}
function {:inline} $trunc.i128.i1(i: i128) returns (i1) {i}
function {:inline} $trunc.i96.i64(i: i96) returns (i64) {i}
function {:inline} $trunc.i96.i88(i: i96) returns (i88) {i}
function {:inline} $trunc.i96.i56(i: i96) returns (i56) {i}
function {:inline} $trunc.i96.i48(i: i96) returns (i48) {i}
function {:inline} $trunc.i96.i40(i: i96) returns (i40) {i}
function {:inline} $trunc.i96.i32(i: i96) returns (i32) {i}
function {:inline} $trunc.i96.i24(i: i96) returns (i24) {i}
function {:inline} $trunc.i96.i16(i: i96) returns (i16) {i}
function {:inline} $trunc.i96.i8(i: i96) returns (i8) {i}
function {:inline} $trunc.i96.i1(i: i96) returns (i1) {i}
function {:inline} $trunc.i88.i64(i: i88) returns (i64) {i}
function {:inline} $trunc.i88.i88(i: i88) returns (i88) {i}
function {:inline} $trunc.i88.i56(i: i88) returns (i56) {i}
function {:inline} $trunc.i88.i48(i: i88) returns (i48) {i}
function {:inline} $trunc.i88.i40(i: i88) returns (i40) {i}
function {:inline} $trunc.i88.i32(i: i88) returns (i32) {i}
function {:inline} $trunc.i88.i24(i: i88) returns (i24) {i}
function {:inline} $trunc.i88.i16(i: i88) returns (i16) {i}
function {:inline} $trunc.i88.i8(i: i88) returns (i8) {i}
function {:inline} $trunc.i88.i1(i: i88) returns (i1) {i}
function {:inline} $trunc.i64.i56(i: i64) returns (i56) {i}
function {:inline} $trunc.i64.i48(i: i64) returns (i48) {i}
function {:inline} $trunc.i64.i40(i: i64) returns (i40) {i}
function {:inline} $trunc.i64.i32(i: i64) returns (i32) {i}
function {:inline} $trunc.i64.i24(i: i64) returns (i24) {i}
function {:inline} $trunc.i64.i16(i: i64) returns (i16) {i}
function {:inline} $trunc.i64.i8(i: i64) returns (i8) {i}
function {:inline} $trunc.i64.i1(i: i64) returns (i1) {i}
function {:inline} $trunc.i56.i48(i: i56) returns (i48) {i}
function {:inline} $trunc.i56.i40(i: i56) returns (i40) {i}
function {:inline} $trunc.i56.i32(i: i56) returns (i32) {i}
function {:inline} $trunc.i56.i24(i: i56) returns (i24) {i}
function {:inline} $trunc.i56.i16(i: i56) returns (i16) {i}
function {:inline} $trunc.i56.i8(i: i56) returns (i8) {i}
function {:inline} $trunc.i56.i1(i: i56) returns (i1) {i}
function {:inline} $trunc.i48.i40(i: i48) returns (i40) {i}
function {:inline} $trunc.i48.i32(i: i48) returns (i32) {i}
function {:inline} $trunc.i48.i24(i: i48) returns (i24) {i}
function {:inline} $trunc.i48.i16(i: i48) returns (i16) {i}
function {:inline} $trunc.i48.i8(i: i48) returns (i8) {i}
function {:inline} $trunc.i48.i1(i: i48) returns (i1) {i}
function {:inline} $trunc.i40.i32(i: i40) returns (i32) {i}
function {:inline} $trunc.i40.i24(i: i40) returns (i24) {i}
function {:inline} $trunc.i40.i16(i: i40) returns (i16) {i}
function {:inline} $trunc.i40.i8(i: i40) returns (i8) {i}
function {:inline} $trunc.i40.i1(i: i40) returns (i1) {i}
function {:inline} $trunc.i32.i24(i: i32) returns (i24) {i}
function {:inline} $trunc.i32.i16(i: i32) returns (i16) {i}
function {:inline} $trunc.i32.i8(i: i32) returns (i8) {i}
function {:inline} $trunc.i32.i1(i: i32) returns (i1) {i}
function {:inline} $trunc.i24.i16(i: i24) returns (i16) {i}
function {:inline} $trunc.i24.i8(i: i24) returns (i8) {i}
function {:inline} $trunc.i24.i1(i: i24) returns (i1) {i}
function {:inline} $trunc.i16.i8(i: i16) returns (i8) {i}
function {:inline} $trunc.i16.i1(i: i16) returns (i1) {i}
function {:inline} $trunc.i8.i1(i: i8) returns (i1) {i}
function {:inline} $zext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $zext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $zext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $zext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $zext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $zext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $zext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $zext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $zext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $zext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $zext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $zext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $zext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $zext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $zext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $zext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $zext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $zext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $zext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $zext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $zext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $zext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $zext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $zext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $zext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $zext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $zext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $zext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $zext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $zext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $zext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $zext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $zext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $zext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $zext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $zext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $zext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $zext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $zext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $zext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $zext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $zext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $zext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $zext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $zext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $zext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $zext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $zext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $zext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $zext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $zext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $zext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $zext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $zext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $zext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $zext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $zext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $zext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $zext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $zext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $zext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $zext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $zext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $zext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $zext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $zext.i96.i128(i: i96) returns (i128) {i}
function {:inline} $sext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $sext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $sext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $sext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $sext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $sext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $sext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $sext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $sext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $sext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $sext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $sext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $sext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $sext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $sext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $sext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $sext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $sext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $sext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $sext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $sext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $sext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $sext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $sext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $sext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $sext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $sext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $sext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $sext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $sext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $sext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $sext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $sext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $sext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $sext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $sext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $sext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $sext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $sext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $sext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $sext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $sext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $sext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $sext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $sext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $sext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $sext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $sext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $sext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $sext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $sext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $sext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $sext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $sext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $sext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $sext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $sext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $sext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $sext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $sext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $sext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $sext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $sext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $sext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $sext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $sext.i96.i128(i: i96) returns (i128) {i}
function $fp(ipart:int, fpart:int, epart:int) returns (float);
function $fadd.float(f1:float, f2:float) returns (float);
function $fsub.float(f1:float, f2:float) returns (float);
function $fmul.float(f1:float, f2:float) returns (float);
function $fdiv.float(f1:float, f2:float) returns (float);
function $frem.float(f1:float, f2:float) returns (float);
function $ffalse.float(f1:float, f2:float) returns (i1);
function $ftrue.float(f1:float, f2:float) returns (i1);
function {:inline} $foeq.float(f1:float, f2:float) returns (i1) { if $foeq.bool(f1,f2) then 1 else 0 }
function $foeq.bool(f1:float, f2:float) returns (bool);
function $foge.float(f1:float, f2:float) returns (i1);
function $fogt.float(f1:float, f2:float) returns (i1);
function $fole.float(f1:float, f2:float) returns (i1);
function $folt.float(f1:float, f2:float) returns (i1);
function $fone.float(f1:float, f2:float) returns (i1);
function $ford.float(f1:float, f2:float) returns (i1);
function $fueq.float(f1:float, f2:float) returns (i1);
function $fuge.float(f1:float, f2:float) returns (i1);
function $fugt.float(f1:float, f2:float) returns (i1);
function $fule.float(f1:float, f2:float) returns (i1);
function $fult.float(f1:float, f2:float) returns (i1);
function $fune.float(f1:float, f2:float) returns (i1);
function $funo.float(f1:float, f2:float) returns (i1);
function $fp2si.float.i128(f:float) returns (i128);
function $fp2ui.float.i128(f:float) returns (i128);
function $si2fp.i128.float(i:i128) returns (float);
function $ui2fp.i128.float(i:i128) returns (float);
function $fp2si.float.i96(f:float) returns (i96);
function $fp2ui.float.i96(f:float) returns (i96);
function $si2fp.i96.float(i:i96) returns (float);
function $ui2fp.i96.float(i:i96) returns (float);
function $fp2si.float.i88(f:float) returns (i88);
function $fp2ui.float.i88(f:float) returns (i88);
function $si2fp.i88.float(i:i88) returns (float);
function $ui2fp.i88.float(i:i88) returns (float);
function $fp2si.float.i64(f:float) returns (i64);
function $fp2ui.float.i64(f:float) returns (i64);
function $si2fp.i64.float(i:i64) returns (float);
function $ui2fp.i64.float(i:i64) returns (float);
function $fp2si.float.i56(f:float) returns (i56);
function $fp2ui.float.i56(f:float) returns (i56);
function $si2fp.i56.float(i:i56) returns (float);
function $ui2fp.i56.float(i:i56) returns (float);
function $fp2si.float.i48(f:float) returns (i48);
function $fp2ui.float.i48(f:float) returns (i48);
function $si2fp.i48.float(i:i48) returns (float);
function $ui2fp.i48.float(i:i48) returns (float);
function $fp2si.float.i40(f:float) returns (i40);
function $fp2ui.float.i40(f:float) returns (i40);
function $si2fp.i40.float(i:i40) returns (float);
function $ui2fp.i40.float(i:i40) returns (float);
function $fp2si.float.i32(f:float) returns (i32);
function $fp2ui.float.i32(f:float) returns (i32);
function $si2fp.i32.float(i:i32) returns (float);
function $ui2fp.i32.float(i:i32) returns (float);
function $fp2si.float.i24(f:float) returns (i24);
function $fp2ui.float.i24(f:float) returns (i24);
function $si2fp.i24.float(i:i24) returns (float);
function $ui2fp.i24.float(i:i24) returns (float);
function $fp2si.float.i16(f:float) returns (i16);
function $fp2ui.float.i16(f:float) returns (i16);
function $si2fp.i16.float(i:i16) returns (float);
function $ui2fp.i16.float(i:i16) returns (float);
function $fp2si.float.i8(f:float) returns (i8);
function $fp2ui.float.i8(f:float) returns (i8);
function $si2fp.i8.float(i:i8) returns (float);
function $ui2fp.i8.float(i:i8) returns (float);
function $fptrunc.float.float(f:float) returns (float);
function $fpext.float.float(f:float) returns (float);
function $fp2si.float.bv128(f:float) returns (bv128);
function $fp2ui.float.bv128(f:float) returns (bv128);
function $si2fp.bv128.float(i:bv128) returns (float);
function $ui2fp.bv128.float(i:bv128) returns (float);
function $fp2si.float.bv96(f:float) returns (bv96);
function $fp2ui.float.bv96(f:float) returns (bv96);
function $si2fp.bv96.float(i:bv96) returns (float);
function $ui2fp.bv96.float(i:bv96) returns (float);
function $fp2si.float.bv88(f:float) returns (bv88);
function $fp2ui.float.bv88(f:float) returns (bv88);
function $si2fp.bv88.float(i:bv88) returns (float);
function $ui2fp.bv88.float(i:bv88) returns (float);
function $fp2si.float.bv64(f:float) returns (bv64);
function $fp2ui.float.bv64(f:float) returns (bv64);
function $si2fp.bv64.float(i:bv64) returns (float);
function $ui2fp.bv64.float(i:bv64) returns (float);
function $fp2si.float.bv56(f:float) returns (bv56);
function $fp2ui.float.bv56(f:float) returns (bv56);
function $si2fp.bv56.float(i:bv56) returns (float);
function $ui2fp.bv56.float(i:bv56) returns (float);
function $fp2si.float.bv48(f:float) returns (bv48);
function $fp2ui.float.bv48(f:float) returns (bv48);
function $si2fp.bv48.float(i:bv48) returns (float);
function $ui2fp.bv48.float(i:bv48) returns (float);
function $fp2si.float.bv40(f:float) returns (bv40);
function $fp2ui.float.bv40(f:float) returns (bv40);
function $si2fp.bv40.float(i:bv40) returns (float);
function $ui2fp.bv40.float(i:bv40) returns (float);
function $fp2si.float.bv32(f:float) returns (bv32);
function $fp2ui.float.bv32(f:float) returns (bv32);
function $si2fp.bv32.float(i:bv32) returns (float);
function $ui2fp.bv32.float(i:bv32) returns (float);
function $fp2si.float.bv24(f:float) returns (bv24);
function $fp2ui.float.bv24(f:float) returns (bv24);
function $si2fp.bv24.float(i:bv24) returns (float);
function $ui2fp.bv24.float(i:bv24) returns (float);
function $fp2si.float.bv16(f:float) returns (bv16);
function $fp2ui.float.bv16(f:float) returns (bv16);
function $si2fp.bv16.float(i:bv16) returns (float);
function $ui2fp.bv16.float(i:bv16) returns (float);
function $fp2si.float.bv8(f:float) returns (bv8);
function $fp2ui.float.bv8(f:float) returns (bv8);
function $si2fp.bv8.float(i:bv8) returns (float);
function $ui2fp.bv8.float(i:bv8) returns (float);
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;
function {:inline} $isExternal(p: ref) returns (bool) {$slt.ref.bool(p,$EXTERNS_BOTTOM)}
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) { M[p] }
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) { M[p] }
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) { M[p] }
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) { M[p] }
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) { M[p] }
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) { M[p] }
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) { M[p] }
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) { M[p] }
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) { M[p] }
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) { M[p] }
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128){ $load.bytes.bv64(M, $add.ref(p, $8.ref)) ++ $load.bytes.bv64(M, p) }
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96){ $load.bytes.bv64(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88){ $load.bytes.bv56(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64){ $load.bytes.bv32(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56){ $load.bytes.bv24(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48){ $load.bytes.bv16(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40){ M[$add.ref(p, $4.ref)] ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32){ M[$add.ref(p, $3.ref)] ++ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24){ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16){ M[$add.ref(p, $1.ref)] ++ M[p] }
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, v: i128) returns ([ref] i128) { M[p := v] }
function {:inline} $store.i96(M: [ref] i96, p: ref, v: i96) returns ([ref] i96) { M[p := v] }
function {:inline} $store.i88(M: [ref] i88, p: ref, v: i88) returns ([ref] i88) { M[p := v] }
function {:inline} $store.i64(M: [ref] i64, p: ref, v: i64) returns ([ref] i64) { M[p := v] }
function {:inline} $store.i56(M: [ref] i56, p: ref, v: i56) returns ([ref] i56) { M[p := v] }
function {:inline} $store.i48(M: [ref] i48, p: ref, v: i48) returns ([ref] i48) { M[p := v] }
function {:inline} $store.i40(M: [ref] i40, p: ref, v: i40) returns ([ref] i40) { M[p := v] }
function {:inline} $store.i32(M: [ref] i32, p: ref, v: i32) returns ([ref] i32) { M[p := v] }
function {:inline} $store.i24(M: [ref] i24, p: ref, v: i24) returns ([ref] i24) { M[p := v] }
function {:inline} $store.i16(M: [ref] i16, p: ref, v: i16) returns ([ref] i16) { M[p := v] }
function {:inline} $store.i8(M: [ref] i8, p: ref, v: i8) returns ([ref] i8) { M[p := v] }
function {:inline} $store.bv128(M: [ref] bv128, p: ref, v: bv128) returns ([ref] bv128) { M[p := v] }
function {:inline} $store.bv96(M: [ref] bv96, p: ref, v: bv96) returns ([ref] bv96) { M[p := v] }
function {:inline} $store.bv88(M: [ref] bv88, p: ref, v: bv88) returns ([ref] bv88) { M[p := v] }
function {:inline} $store.bv64(M: [ref] bv64, p: ref, v: bv64) returns ([ref] bv64) { M[p := v] }
function {:inline} $store.bv56(M: [ref] bv56, p: ref, v: bv56) returns ([ref] bv56) { M[p := v] }
function {:inline} $store.bv48(M: [ref] bv48, p: ref, v: bv48) returns ([ref] bv48) { M[p := v] }
function {:inline} $store.bv40(M: [ref] bv40, p: ref, v: bv40) returns ([ref] bv40) { M[p := v] }
function {:inline} $store.bv32(M: [ref] bv32, p: ref, v: bv32) returns ([ref] bv32) { M[p := v] }
function {:inline} $store.bv24(M: [ref] bv24, p: ref, v: bv24) returns ([ref] bv24) { M[p := v] }
function {:inline} $store.bv16(M: [ref] bv16, p: ref, v: bv16) returns ([ref] bv16) { M[p := v] }
function {:inline} $store.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) { M[p := v] }
function {:inline} $store.bytes.bv128(M:[ref]bv8, p:ref, v:bv128) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]][$add.ref(p, $11.ref) := v[104:96]][$add.ref(p, $12.ref) := v[112:104]][$add.ref(p, $13.ref) := v[120:112]][$add.ref(p, $14.ref) := v[128:120]]}
function {:inline} $store.bytes.bv96(M:[ref]bv8, p:ref, v:bv96) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]]}
function {:inline} $store.bytes.bv88(M:[ref]bv8, p:ref, v:bv88) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]]}
function {:inline} $store.bytes.bv64(M:[ref]bv8, p:ref, v:bv64) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]]}
function {:inline} $store.bytes.bv56(M:[ref]bv8, p:ref, v:bv56) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]]}
function {:inline} $store.bytes.bv48(M:[ref]bv8, p:ref, v:bv48) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]]}
function {:inline} $store.bytes.bv40(M:[ref]bv8, p:ref, v:bv40) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]]}
function {:inline} $store.bytes.bv32(M:[ref]bv8, p:ref, v:bv32) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]]}
function {:inline} $store.bytes.bv24(M:[ref]bv8, p:ref, v:bv24) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]]}
function {:inline} $store.bytes.bv16(M:[ref]bv8, p:ref, v:bv16) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]]}
function {:inline} $store.bytes.bv8(M:[ref]bv8, p:ref, v:bv8) returns ([ref]bv8) {M[p := v]}
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, v: ref) returns ([ref] ref) { M[p := v] }
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, v: float) returns ([ref] float) { M[p := v] }
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
procedure  boogie_si_record_bool(i: bool);
procedure  boogie_si_record_i1(i: i1);
procedure  boogie_si_record_i8(i: i8);
procedure  boogie_si_record_i16(i: i16);
procedure  boogie_si_record_i24(i: i24);
procedure  boogie_si_record_i32(i: i32);
procedure  boogie_si_record_i40(i: i40);
procedure  boogie_si_record_i48(i: i48);
procedure  boogie_si_record_i56(i: i56);
procedure  boogie_si_record_i64(i: i64);
procedure  boogie_si_record_i88(i: i88);
procedure  boogie_si_record_i96(i: i96);
procedure  boogie_si_record_i128(i: i128);
procedure  boogie_si_record_bv1(i: bv1);
procedure  boogie_si_record_bv8(i: bv8);
procedure  boogie_si_record_bv16(i: bv16);
procedure  boogie_si_record_bv24(i: bv24);
procedure  boogie_si_record_bv32(i: bv32);
procedure  boogie_si_record_bv40(i: bv40);
procedure  boogie_si_record_bv48(i: bv48);
procedure  boogie_si_record_bv56(i: bv56);
procedure  boogie_si_record_bv64(i: bv64);
procedure  boogie_si_record_bv88(i: bv88);
procedure  boogie_si_record_bv96(i: bv96);
procedure  boogie_si_record_bv128(i: bv128);
procedure  boogie_si_record_ref(i: ref);
procedure  boogie_si_record_float(i: float);
var $exn: bool;
var $exnv: int;
function $extractvalue(p: int, i: int) returns (int);

procedure  $alloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 103822));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 104854));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1782, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1787, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 105886));
procedure  llvm.dbg.value($p0: ref, $i1: bv64, $p2: ref, $p3: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 106918));
procedure  __SMACK_static_init()
{
$bb0:
  $M.1 := 0bv32;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_bv32(0bv32);
  $M.2 := 0bv32;
  $M.3 := 0bv32;
  $M.4 := 0bv32;
  $M.5 := 0bv32;
  $M.6 := 0bv32;
  $M.7 := 0bv32;
  $M.8 := 0bv64;
  $M.0 := $store.bytes.bv32($M.0, ni6527_boards, 11040bv32);
  $M.0 := $store.bytes.ref($M.0, $add.ref(ni6527_boards, 8), .str.7);
  $M.0 := $store.bytes.bv32($M.0, $add.ref(ni6527_boards, 16), 11024bv32);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(ni6527_boards, 16), 8), .str.8);
  $M.0 := $store.bytes.bv32($M.0, ni6527_pci_table, 4243bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref(ni6527_pci_table, 4), 11024bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref(ni6527_pci_table, 8), $sub.bv32(0bv32, 1bv32));
  $M.0 := $store.bytes.bv32($M.0, $add.ref(ni6527_pci_table, 12), $sub.bv32(0bv32, 1bv32));
  $M.0 := $store.bytes.bv32($M.0, $add.ref(ni6527_pci_table, 16), 0bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref(ni6527_pci_table, 20), 0bv32);
  $M.0 := $store.bytes.bv64($M.0, $add.ref(ni6527_pci_table, 24), 0bv64);
  $M.0 := $store.bytes.bv32($M.0, $add.ref(ni6527_pci_table, 32), 4243bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref(ni6527_pci_table, 32), 4), 11040bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref(ni6527_pci_table, 32), 8), $sub.bv32(0bv32, 1bv32));
  $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref(ni6527_pci_table, 32), 12), $sub.bv32(0bv32, 1bv32));
  $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref(ni6527_pci_table, 32), 16), 0bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref(ni6527_pci_table, 32), 20), 0bv32);
  $M.0 := $store.bytes.bv64($M.0, $add.ref($add.ref(ni6527_pci_table, 32), 24), 0bv64);
  $M.0 := $store.bytes.bv32($M.0, $add.ref(ni6527_pci_table, 64), 0bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref(ni6527_pci_table, 64), 4), 0bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref(ni6527_pci_table, 64), 8), 0bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref(ni6527_pci_table, 64), 12), 0bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref(ni6527_pci_table, 64), 16), 0bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref(ni6527_pci_table, 64), 20), 0bv32);
  $M.0 := $store.bytes.bv64($M.0, $add.ref($add.ref(ni6527_pci_table, 64), 24), 0bv64);
  $M.0 := $store.bytes.ref($M.0, driver_ni6527_pci_driver, $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527_pci_driver, 8), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527_pci_driver, 16), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527_pci_driver, 24), ni6527_pci_table);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527_pci_driver, 32), driver_ni6527_pci_probe);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527_pci_driver, 40), driver_ni6527_pci_remove);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527_pci_driver, 48), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527_pci_driver, 56), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527_pci_driver, 64), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527_pci_driver, 72), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527_pci_driver, 80), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527_pci_driver, 88), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527_pci_driver, 96), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 96), 8), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 96), 16), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 96), 24), $0.ref);
  $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 96), 32), 0bv8);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 96), 40), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 96), 48), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 96), 56), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 96), 64), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 96), 72), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 96), 80), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 96), 88), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 96), 96), $0.ref);
  $M.0 := $store.bytes.bv32($M.0, $add.ref(driver_ni6527_pci_driver, 200), 0bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 200), 4), 0bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 200), 8), 0bv32);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 200), 16), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 200), 24), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(driver_ni6527_pci_driver, 200), 24), 8), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(driver_ni6527_pci_driver, 200), 24), 8), 8), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(driver_ni6527_pci_driver, 200), 24), 24), $0.ref);
  $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref(driver_ni6527_pci_driver, 200), 24), 32), 0bv32);
  $M.0 := $store.bytes.bv64($M.0, $add.ref($add.ref($add.ref(driver_ni6527_pci_driver, 200), 24), 40), 0bv64);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(driver_ni6527_pci_driver, 200), 72), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(driver_ni6527_pci_driver, 200), 72), 8), $0.ref);
  $M.0 := $store.bytes.ref($M.0, driver_ni6527, $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527, 8), .str.1);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527, 16), __this_module);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527, 24), ni6527_attach);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527, 32), ni6527_detach);
  $M.0 := $store.bytes.bv32($M.0, $add.ref(driver_ni6527, 40), 0bv32);
  $M.0 := $store.bytes.ref($M.0, $add.ref(driver_ni6527, 48), $0.ref);
  $M.0 := $store.bytes.bv32($M.0, $add.ref(driver_ni6527, 56), 0bv32);
  $exn := false;
  return;
}
const devirtbounce: ref;
axiom (devirtbounce == $sub.ref(0, 107950));
procedure  devirtbounce(funcPtr: ref, arg: bv8, arg1: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.1: ref;
axiom (devirtbounce.1 == $sub.ref(0, 108982));
procedure  devirtbounce.1(funcPtr: ref, arg: ref)
  returns ($r: bv8)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const $u0: ref;
const $u1: ref;
const $u2: bv32;
const $u3: ref;
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
