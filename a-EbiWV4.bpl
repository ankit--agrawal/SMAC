// generated by SMACK version 1.9.0 for corral
// via /mnt/local/smack-project/smack/bin/smack -x=svcomp --time-limit 1800 /proj/SMACK/sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c --verifier-options  /bopt:z3opt:SMT.MBQI=true /bopt:z3opt:SMT.MBQI.MAX_ITERATIONS=1000 /di /staticInlining /trackAllVars /useArrayTheory --unroll 16

// Basic types
type i1 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type ref = i64;
type float = i32;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $2.ref: ref;
axiom ($2.ref == 2);
const $3.ref: ref;
axiom ($3.ref == 3);
const $4.ref: ref;
axiom ($4.ref == 4);
const $5.ref: ref;
axiom ($5.ref == 5);
const $6.ref: ref;
axiom ($6.ref == 6);
const $7.ref: ref;
axiom ($7.ref == 7);
const $8.ref: ref;
axiom ($8.ref == 8);
const $9.ref: ref;
axiom ($9.ref == 9);
const $10.ref: ref;
axiom ($10.ref == 10);
const $11.ref: ref;
axiom ($11.ref == 11);
const $12.ref: ref;
axiom ($12.ref == 12);
const $13.ref: ref;
axiom ($13.ref == 13);
const $14.ref: ref;
axiom ($14.ref == 14);
const $1024.ref: ref;
axiom ($1024.ref == 1024);

// Memory maps (10 regions)
var $M.0: i32;
var $M.1: [ref] i8;
var $M.2: i32;
var $M.3: i32;
var $M.4: i32;
var $M.5: i32;
var $M.6: i32;
var $M.7: i32;
var $M.8: i32;
var $M.9: i64;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 93541));
axiom ($EXTERNS_BOTTOM == $sub.ref(0, 32776));
axiom ($MALLOC_TOP == 9223372036854775807);

// Bitstd::vector-integer conversions
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2int"} $bv2int.64(i: bv64) returns (i64);

// Pointer-number conversions
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { if $eq.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { if $ne.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { if $ugt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { if $uge.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { if $ult.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { if $ule.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { if $sgt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { if $sge.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { if $slt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { if $sle.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

const LDV_IN_INTERRUPT: ref;
axiom (LDV_IN_INTERRUPT == $sub.ref(0, 1028));
const ldv_spin: ref;
axiom (ldv_spin == $sub.ref(0, 2056));
const __mod_pci_device_table: ref;
axiom (__mod_pci_device_table == $sub.ref(0, 3112));
const {:count 2} adl_pci7296_pci_table: ref;
axiom (adl_pci7296_pci_table == $sub.ref(0, 4200));
const driver_adl_pci7296_pci_driver: ref;
axiom (driver_adl_pci7296_pci_driver == $sub.ref(0, 5520));
const driver_adl_pci7296: ref;
axiom (driver_adl_pci7296 == $sub.ref(0, 6608));
const {:count 30} .str.8: ref;
axiom (.str.8 == $sub.ref(0, 7662));
const {:count 33} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 8719));
const {:count 8} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 9751));
const .str: ref;
axiom (.str == $sub.ref(0, 10787));
const {:count 62} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 11873));
const {:count 27} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 12924));
const {:count 35} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 13983));
const {:count 64} .str.6: ref;
axiom (.str.6 == $sub.ref(0, 15071));
const {:count 40} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 16135));
const __this_module: ref;
axiom (__this_module == $sub.ref(0, 32776));
const {:count 14} .str.2.13: ref;
axiom (.str.2.13 == $sub.ref(0, 17173));
const main: ref;
axiom (main == $sub.ref(0, 18205));
procedure {:entrypoint} main()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
$bb0:
  call $initialize();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2216, 20} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2216, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := 1;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2217, 3} true;
  assume {:verifier.code 0} true;
  call ldv_initialize();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2218, 9} true;
  assume {:verifier.code 0} true;
  call $i0 := driver_adl_pci7296_init_module();
  // WARNING: %1 = call i32 @driver_adl_pci7296_init_module(), !dbg !1789, !verifier.code !1787
  call {:cexpr "tmp"} boogie_si_record_i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2220, 11} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2220, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2221, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2272, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_final_state();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2274, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2259, 13} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  // WARNING: %6 = call i32 @__VERIFIER_nondet_int(), !dbg !1798, !verifier.code !1800
  call {:cexpr "tmp___1"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2261, 15} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2261, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2261, 7} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2261, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2264, 5} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2262, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2228, 13} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  // WARNING: %9 = call i32 @__VERIFIER_nondet_int(), !dbg !1806, !verifier.code !1800
  call {:cexpr "tmp___0"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2230, 15} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2230, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2231, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume !(($i5 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2233, 15} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i32($i4, 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2233, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb13, $bb14;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2241, 7} true;
  assume {:verifier.code 0} true;
  call $i7 := adl_pci7296_attach($u0, $u1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2243, 7} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb13:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2234, 5} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume !(($i6 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2237, 5} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2246, 7} true;
  assume {:verifier.code 0} true;
  call $i8 := adl_pci7296_detach($u0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2248, 7} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2250, 7} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2238, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb18, $bb19;
$bb18:
  assume (0 == 1);
  assume {:verifier.code 0} true;
  assume false;
$bb19:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2251, 12} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2259, 13} true;
  assume {:verifier.code 1} true;
  call $i9 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
  // WARNING: %29 = call i32 @__VERIFIER_nondet_int(), !dbg !1798, !verifier.code !1800
  call {:cexpr "tmp___1"} boogie_si_record_i32($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2261, 15} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2261, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb25, $bb26;
$bb21:
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:verifier.code 0} true;
  goto $bb24;
$bb24:
  assume {:verifier.code 0} true;
  assume false;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2261, 7} true;
  assume {:verifier.code 0} true;
  assume ($i10 == 1);
  goto $bb8;
$bb26:
  assume !(($i10 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2261, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2268, 3} true;
  assume {:verifier.code 0} true;
  call driver_adl_pci7296_cleanup_module();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2269, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 19237));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const ldv_initialize: ref;
axiom (ldv_initialize == $sub.ref(0, 20269));
procedure  ldv_initialize();
const driver_adl_pci7296_init_module: ref;
axiom (driver_adl_pci7296_init_module == $sub.ref(0, 21301));
procedure  driver_adl_pci7296_init_module()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i2: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2176, 12} true;
  assume {:verifier.code 0} true;
  call $i0 := comedi_driver_register(driver_adl_pci7296);
  // WARNING: %1 = call i32 @comedi_driver_register(%struct.comedi_driver* @driver_adl_pci7296), !dbg !1784, !verifier.code !1787
  call {:cexpr "retval"} boogie_si_record_i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2178, 14} true;
  assume {:verifier.code 0} true;
  $i1 := $slt.i32($i0, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2178, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2179, 5} true;
  assume {:verifier.code 0} true;
  $i2 := $i0;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2191, 1} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
$bb4:
  // WARNING: call void @llvm.dbg.value(metadata i64 add (i64 ptrtoint (%struct.pci_driver* @driver_adl_pci7296_pci_driver to i64), i64 16), i64 0, metadata !1855, metadata !1791), !dbg !1856, !verifier.code !1787
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2186, 38} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.i64.ref($add.i64($p2i.ref.i64(driver_adl_pci7296), 8));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2186, 36} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.1, $p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2186, 5} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.i64.ref($add.i64($p2i.ref.i64(driver_adl_pci7296_pci_driver), 16));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2186, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p5, $p4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2187, 9} true;
  assume {:verifier.code 0} true;
  call $i6 := __pci_register_driver(driver_adl_pci7296_pci_driver, __this_module, .str);
  // WARNING: %9 = call i32 @__pci_register_driver(%struct.pci_driver* @driver_adl_pci7296_pci_driver, %struct.module* @__this_module, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0)), !dbg !1805, !verifier.code !1787
  call {:cexpr "tmp"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2189, 3} true;
  assume {:verifier.code 0} true;
  $i2 := $i6;
  goto $bb3;
}
const adl_pci7296_attach: ref;
axiom (adl_pci7296_attach == $sub.ref(0, 22333));
procedure  adl_pci7296_attach($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p44: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $i93: i64;
  var $i94: i32;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $i102: i64;
  var $i103: i32;
  var $i104: i64;
  var $i105: i64;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i64;
  var $p111: ref;
  var $i112: i64;
  var $i113: i64;
  var $i114: i32;
  var $i115: i1;
  var $i116: i64;
  var $i117: i64;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $i122: i64;
  var $p123: ref;
  var $i124: i64;
  var $i125: i64;
  var $i126: i32;
  var $i127: i1;
  var $i128: i64;
  var $i129: i64;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i64;
  var $i134: i64;
  var $p135: ref;
  var $i136: i64;
  var $i137: i64;
  var $i138: i32;
  var $i139: i1;
  var $i140: i64;
  var $i141: i64;
  var $p142: ref;
  var $i143: i32;
  var $i144: i32;
  var $p29: ref;
  var $i145: i64;
  var $i146: i64;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $i22: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1757, 17} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p0);
  // WARNING: %3 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1792, !verifier.code !1787
  call {:cexpr "__cil_tmp11"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1758, 29} true;
  assume {:verifier.code 0} true;
  $i3 := $add.i64($i2, 32);
  // WARNING: %4 = add i64 %3, 32, !dbg !1797, !verifier.code !1787
  call {:cexpr "__cil_tmp12"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1759, 19} true;
  assume {:verifier.code 0} true;
  $p4 := $i2p.i64.ref($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1759, 17} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.1, $p4);
  // WARNING: %6 = load i32, i32* %5, align 4, !dbg !1801, !verifier.code !1787
  call {:cexpr "__cil_tmp13"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1760, 3} true;
  assume {:verifier.code 0} true;
  call $i6 := printk.ref.i32(.str.1, $i5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1761, 17} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p0);
  // WARNING: %8 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1805, !verifier.code !1787
  call {:cexpr "__cil_tmp14"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1762, 29} true;
  assume {:verifier.code 0} true;
  $i8 := $add.i64($i7, 48);
  // WARNING: %9 = add i64 %8, 48, !dbg !1808, !verifier.code !1787
  call {:cexpr "__cil_tmp15"} boogie_si_record_i64($i8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1763, 5} true;
  assume {:verifier.code 0} true;
  $p9 := $i2p.i64.ref($i8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1763, 35} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p9, .str.2);
  // WARNING: store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8** %10, align 8, !dbg !1812, !verifier.code !1787
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1765, 20} true;
  assume {:verifier.code 0} true;
  $i10 := $add.i64(20, 0);
  // WARNING: %11 = add i64 20, 0, !dbg !1815, !verifier.code !1787
  call {:cexpr "__cil_tmp17"} boogie_si_record_i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1766, 17} true;
  assume {:verifier.code 0} true;
  $i11 := $p2i.ref.i64($p1);
  // WARNING: %12 = ptrtoint %struct.comedi_devconfig* %1 to i64, !dbg !1818, !verifier.code !1787
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1767, 29} true;
  assume {:verifier.code 0} true;
  $i12 := $add.i64($i11, $i10);
  // WARNING: %13 = add i64 %12, %11, !dbg !1821, !verifier.code !1787
  call {:cexpr "__cil_tmp19"} boogie_si_record_i64($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1768, 11} true;
  assume {:verifier.code 0} true;
  $p13 := $i2p.i64.ref($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1768, 9} true;
  assume {:verifier.code 0} true;
  $i14 := $load.i32($M.1, $p13);
  // WARNING: %15 = load i32, i32* %14, align 4, !dbg !1825, !verifier.code !1787
  call {:cexpr "bus"} boogie_si_record_i32($i14);
  // WARNING: call void @llvm.dbg.value(metadata i32 %15, i64 0, metadata !1910, metadata !1791), !dbg !1911, !verifier.code !1787
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1770, 20} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i64(20, 4);
  // WARNING: %16 = add i64 20, 4, !dbg !1830, !verifier.code !1787
  call {:cexpr "__cil_tmp21"} boogie_si_record_i64($i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1771, 17} true;
  assume {:verifier.code 0} true;
  $i16 := $p2i.ref.i64($p1);
  // WARNING: %17 = ptrtoint %struct.comedi_devconfig* %1 to i64, !dbg !1833, !verifier.code !1787
  call {:cexpr "__cil_tmp22"} boogie_si_record_i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1772, 29} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i64($i16, $i15);
  // WARNING: %18 = add i64 %17, %16, !dbg !1836, !verifier.code !1787
  call {:cexpr "__cil_tmp23"} boogie_si_record_i64($i17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1773, 12} true;
  assume {:verifier.code 0} true;
  $p18 := $i2p.i64.ref($i17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1773, 10} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i32($M.1, $p18);
  // WARNING: %20 = load i32, i32* %19, align 4, !dbg !1840, !verifier.code !1787
  call {:cexpr "slot"} boogie_si_record_i32($i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1774, 9} true;
  assume {:verifier.code 0} true;
  call $i20 := alloc_private($p0, 16);
  // WARNING: %21 = call i32 @alloc_private(%struct.comedi_device* %0, i32 16), !dbg !1843, !verifier.code !1787
  call {:cexpr "tmp"} boogie_si_record_i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1776, 11} true;
  assume {:verifier.code 0} true;
  $i21 := $slt.i32($i20, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1776, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i21 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1777, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $sub.i32(0, 12);
  goto $bb3;
$bb2:
  assume !(($i21 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1968, 1} true;
  assume {:verifier.code 0} true;
  $r := $i22;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1782, 13} true;
  assume {:verifier.code 0} true;
  call $i23 := alloc_subdevices($p0, 4);
  // WARNING: %26 = call i32 @alloc_subdevices(%struct.comedi_device* %0, i32 4), !dbg !1851, !verifier.code !1787
  call {:cexpr "tmp___0"} boogie_si_record_i32($i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1784, 15} true;
  assume {:verifier.code 0} true;
  $i24 := $slt.i32($i23, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1784, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i24 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1785, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $sub.i32(0, 12);
  goto $bb3;
$bb6:
  assume !(($i24 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1946, 12} true;
  assume {:verifier.code 0} true;
  call $p25 := pci_get_device($sub.i32(0, 1), $sub.i32(0, 1), $0.ref);
  assume $isExternal($p25);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1950, 17} true;
  assume {:verifier.code 0} true;
  $i26 := $p2i.ref.i64($0.ref);
  // WARNING: %32 = ptrtoint %struct.pci_dev* null to i64, !dbg !1864, !verifier.code !1787
  call {:cexpr "__cil_tmp98"} boogie_si_record_i64($i26);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1951, 17} true;
  assume {:verifier.code 0} true;
  $i27 := $p2i.ref.i64($p25);
  // WARNING: %33 = ptrtoint %struct.pci_dev* %31 to i64, !dbg !1868, !verifier.code !1787
  call {:cexpr "__cil_tmp99"} boogie_si_record_i64($i27);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1952, 19} true;
  assume {:verifier.code 0} true;
  $i28 := $ne.i64($i27, $i26);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1952, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i28 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1952, 7} true;
  assume {:verifier.code 0} true;
  $p29 := $p25;
  goto $bb11;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1952, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i28 == 1));
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1955, 5} true;
  assume {:verifier.code 0} true;
  goto $bb47;
$bb11:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1953, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1792, 17} true;
  assume {:verifier.code 0} true;
  $i30 := $p2i.ref.i64($p29);
  // WARNING: %36 = ptrtoint %struct.pci_dev* %181 to i64, !dbg !1874, !verifier.code !1787
  call {:cexpr "__cil_tmp24"} boogie_si_record_i64($i30);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1793, 29} true;
  assume {:verifier.code 0} true;
  $i31 := $add.i64($i30, 60);
  // WARNING: %37 = add i64 %36, 60, !dbg !1878, !verifier.code !1787
  call {:cexpr "__cil_tmp25"} boogie_si_record_i64($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1794, 19} true;
  assume {:verifier.code 0} true;
  $p32 := $i2p.i64.ref($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1794, 17} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i16($M.1, $p32);
  // WARNING: %39 = load i16, i16* %38, align 2, !dbg !1882, !verifier.code !1787
  call {:cexpr "__cil_tmp26"} boogie_si_record_i16($i33);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1795, 17} true;
  assume {:verifier.code 0} true;
  $i34 := $zext.i16.i32($i33);
  // WARNING: %40 = zext i16 %39 to i32, !dbg !1885, !verifier.code !1787
  call {:cexpr "__cil_tmp27"} boogie_si_record_i32($i34);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1796, 19} true;
  assume {:verifier.code 0} true;
  $i35 := $eq.i32($i34, 5194);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1796, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i35 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1798, 19} true;
  assume {:verifier.code 0} true;
  $i36 := $p2i.ref.i64($p29);
  // WARNING: %43 = ptrtoint %struct.pci_dev* %181 to i64, !dbg !1891, !verifier.code !1787
  call {:cexpr "__cil_tmp28"} boogie_si_record_i64($i36);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1799, 31} true;
  assume {:verifier.code 0} true;
  $i37 := $add.i64($i36, 62);
  // WARNING: %44 = add i64 %43, 62, !dbg !1896, !verifier.code !1787
  call {:cexpr "__cil_tmp29"} boogie_si_record_i64($i37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1800, 21} true;
  assume {:verifier.code 0} true;
  $p38 := $i2p.i64.ref($i37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1800, 19} true;
  assume {:verifier.code 0} true;
  $i39 := $load.i16($M.1, $p38);
  // WARNING: %46 = load i16, i16* %45, align 2, !dbg !1900, !verifier.code !1787
  call {:cexpr "__cil_tmp30"} boogie_si_record_i16($i39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1801, 19} true;
  assume {:verifier.code 0} true;
  $i40 := $zext.i16.i32($i39);
  // WARNING: %47 = zext i16 %46 to i32, !dbg !1903, !verifier.code !1787
  call {:cexpr "__cil_tmp31"} boogie_si_record_i32($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1802, 21} true;
  assume {:verifier.code 0} true;
  $i41 := $eq.i32($i40, 29334);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1802, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb15, $bb16;
$bb14:
  assume !(($i35 == 1));
  assume {:verifier.code 0} true;
  goto $bb46;
$bb15:
  assume ($i41 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1803, 15} true;
  assume {:verifier.code 0} true;
  $i42 := $ne.i32($i14, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1803, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i42} true;
  goto $bb17, $bb18;
$bb16:
  assume !(($i41 == 1));
  assume {:verifier.code 0} true;
  goto $bb45;
$bb17:
  assume ($i42 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1804, 9} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb18:
  assume !(($i42 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1806, 16} true;
  assume {:verifier.code 0} true;
  $i43 := $ne.i32($i19, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1806, 11} true;
  assume {:verifier.code 0} true;
  $p44 := $p29;
  assume {:branchcond $i43} true;
  goto $bb20, $bb21;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1809, 23} true;
  assume {:verifier.code 0} true;
  $i45 := $p2i.ref.i64($p29);
  // WARNING: %56 = ptrtoint %struct.pci_dev* %181 to i64, !dbg !1920, !verifier.code !1787
  call {:cexpr "__cil_tmp32"} boogie_si_record_i64($i45);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1810, 35} true;
  assume {:verifier.code 0} true;
  $i46 := $add.i64($i45, 16);
  // WARNING: %57 = add i64 %56, 16, !dbg !1925, !verifier.code !1787
  call {:cexpr "__cil_tmp33"} boogie_si_record_i64($i46);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1811, 25} true;
  assume {:verifier.code 0} true;
  $p47 := $i2p.i64.ref($i46);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1811, 23} true;
  assume {:verifier.code 0} true;
  $p48 := $load.ref($M.1, $p47);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1812, 23} true;
  assume {:verifier.code 0} true;
  $i49 := $p2i.ref.i64($p48);
  // WARNING: %60 = ptrtoint %struct.pci_bus* %59 to i64, !dbg !1932, !verifier.code !1787
  call {:cexpr "__cil_tmp35"} boogie_si_record_i64($i49);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1813, 35} true;
  assume {:verifier.code 0} true;
  $i50 := $add.i64($i49, 152);
  // WARNING: %61 = add i64 %60, 152, !dbg !1935, !verifier.code !1787
  call {:cexpr "__cil_tmp36"} boogie_si_record_i64($i50);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1814, 25} true;
  assume {:verifier.code 0} true;
  $p51 := $i2p.i64.ref($i50);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1814, 23} true;
  assume {:verifier.code 0} true;
  $i52 := $load.i8($M.1, $p51);
  // WARNING: %63 = load i8, i8* %62, align 1, !dbg !1939, !verifier.code !1787
  call {:cexpr "__cil_tmp37"} boogie_si_record_i8($i52);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1815, 23} true;
  assume {:verifier.code 0} true;
  $i53 := $zext.i8.i32($i52);
  // WARNING: %64 = zext i8 %63 to i32, !dbg !1942, !verifier.code !1787
  call {:cexpr "__cil_tmp38"} boogie_si_record_i32($i53);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1816, 25} true;
  assume {:verifier.code 0} true;
  $i54 := $ne.i32($i53, $i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1816, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i54} true;
  goto $bb22, $bb23;
$bb20:
  assume ($i43 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1806, 22} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb21:
  assume !(($i43 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $p66 := $p44;
  goto $bb31;
$bb22:
  assume ($i54 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1817, 11} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb23:
  assume !(($i54 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1821, 25} true;
  assume {:verifier.code 0} true;
  $i58 := $p2i.ref.i64($p29);
  // WARNING: %71 = ptrtoint %struct.pci_dev* %181 to i64, !dbg !1952, !verifier.code !1787
  call {:cexpr "__cil_tmp40"} boogie_si_record_i64($i58);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1822, 37} true;
  assume {:verifier.code 0} true;
  $i59 := $add.i64($i58, 56);
  // WARNING: %72 = add i64 %71, 56, !dbg !1957, !verifier.code !1787
  call {:cexpr "__cil_tmp41"} boogie_si_record_i64($i59);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1823, 27} true;
  assume {:verifier.code 0} true;
  $p60 := $i2p.i64.ref($i59);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1823, 25} true;
  assume {:verifier.code 0} true;
  $i61 := $load.i32($M.1, $p60);
  // WARNING: %74 = load i32, i32* %73, align 4, !dbg !1961, !verifier.code !1787
  call {:cexpr "__cil_tmp42"} boogie_si_record_i32($i61);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1824, 37} true;
  assume {:verifier.code 0} true;
  $i62 := $lshr.i32($i61, 3);
  // WARNING: %75 = lshr i32 %74, 3, !dbg !1964, !verifier.code !1787
  call {:cexpr "__cil_tmp43"} boogie_si_record_i32($i62);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1825, 37} true;
  assume {:verifier.code 0} true;
  $i63 := $and.i32($i62, 31);
  // WARNING: %76 = and i32 %75, 31, !dbg !1967, !verifier.code !1787
  call {:cexpr "__cil_tmp44"} boogie_si_record_i32($i63);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1826, 27} true;
  assume {:verifier.code 0} true;
  $i64 := $ne.i32($i63, $i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1826, 15} true;
  assume {:verifier.code 0} true;
  $p65 := $p29;
  assume {:branchcond $i64} true;
  goto $bb27, $bb28;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1946, 12} true;
  assume {:verifier.code 0} true;
  call $p55 := pci_get_device($sub.i32(0, 1), $sub.i32(0, 1), $p29);
  assume $isExternal($p55);
  // WARNING: call void @llvm.dbg.value(metadata %struct.pci_dev* null, i64 0, metadata !1946, metadata !1791), !dbg !1947, !verifier.code !1787
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1951, 17} true;
  assume {:verifier.code 0} true;
  $i56 := $p2i.ref.i64($p55);
  // WARNING: %68 = ptrtoint %struct.pci_dev* %67 to i64, !dbg !1868, !verifier.code !1787
  call {:cexpr "__cil_tmp99"} boogie_si_record_i64($i56);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1952, 19} true;
  assume {:verifier.code 0} true;
  $i57 := $ne.i64($i56, $i26);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1952, 7} true;
  assume {:verifier.code 0} true;
  $p29 := $p55;
  assume {:branchcond $i57} true;
  goto $bb25, $bb26;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1952, 7} true;
  assume {:verifier.code 0} true;
  assume ($i57 == 1);
  goto $bb11;
$bb26:
  assume !(($i57 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1952, 7} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb27:
  assume ($i64 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1827, 13} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb28:
  assume !(($i64 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb29:
  assume {:verifier.code 0} true;
  goto $bb30;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1834, 7} true;
  assume {:verifier.code 0} true;
  $p66 := $p65;
  goto $bb31;
$bb31:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb32:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1838, 21} true;
  assume {:verifier.code 0} true;
  $i67 := $p2i.ref.i64($p0);
  // WARNING: %86 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1976, !verifier.code !1787
  call {:cexpr "__cil_tmp45"} boogie_si_record_i64($i67);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1839, 33} true;
  assume {:verifier.code 0} true;
  $i68 := $add.i64($i67, 16);
  // WARNING: %87 = add i64 %86, 16, !dbg !1980, !verifier.code !1787
  call {:cexpr "__cil_tmp46"} boogie_si_record_i64($i68);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1840, 23} true;
  assume {:verifier.code 0} true;
  $p69 := $i2p.i64.ref($i68);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1840, 21} true;
  assume {:verifier.code 0} true;
  $p70 := $load.ref($M.1, $p69);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1841, 21} true;
  assume {:verifier.code 0} true;
  $p71 := $bitcast.ref.ref($p70);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1842, 21} true;
  assume {:verifier.code 0} true;
  $i72 := $p2i.ref.i64($p71);
  // WARNING: %91 = ptrtoint %struct.adl_pci7296_private* %90 to i64, !dbg !1990, !verifier.code !1787
  call {:cexpr "__cil_tmp49"} boogie_si_record_i64($i72);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1843, 33} true;
  assume {:verifier.code 0} true;
  $i73 := $add.i64($i72, 8);
  // WARNING: %92 = add i64 %91, 8, !dbg !1993, !verifier.code !1787
  call {:cexpr "__cil_tmp50"} boogie_si_record_i64($i73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1844, 9} true;
  assume {:verifier.code 0} true;
  $p74 := $i2p.i64.ref($i73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1844, 41} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p74, $p66);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1845, 17} true;
  assume {:verifier.code 0} true;
  call $i75 := comedi_pci_enable($p66, .str);
  // WARNING: %94 = call i32 @comedi_pci_enable(%struct.pci_dev* %84, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0)), !dbg !1998, !verifier.code !1787
  call {:cexpr "tmp___1"} boogie_si_record_i32($i75);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1847, 19} true;
  assume {:verifier.code 0} true;
  $i76 := $slt.i32($i75, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1847, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i76} true;
  goto $bb33, $bb34;
$bb33:
  assume ($i76 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1849, 23} true;
  assume {:verifier.code 0} true;
  $i77 := $p2i.ref.i64($p0);
  // WARNING: %97 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !2004, !verifier.code !1787
  call {:cexpr "__cil_tmp51"} boogie_si_record_i64($i77);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1850, 35} true;
  assume {:verifier.code 0} true;
  $i78 := $add.i64($i77, 32);
  // WARNING: %98 = add i64 %97, 32, !dbg !2009, !verifier.code !1787
  call {:cexpr "__cil_tmp52"} boogie_si_record_i64($i78);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1851, 25} true;
  assume {:verifier.code 0} true;
  $p79 := $i2p.i64.ref($i78);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1851, 23} true;
  assume {:verifier.code 0} true;
  $i80 := $load.i32($M.1, $p79);
  // WARNING: %100 = load i32, i32* %99, align 4, !dbg !2013, !verifier.code !1787
  call {:cexpr "__cil_tmp53"} boogie_si_record_i32($i80);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1852, 9} true;
  assume {:verifier.code 0} true;
  call $i81 := printk.ref.i32(.str.3, $i80);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1854, 9} true;
  assume {:verifier.code 0} true;
  $i22 := $sub.i32(0, 5);
  goto $bb3;
$bb34:
  assume !(($i76 == 1));
  assume {:verifier.code 0} true;
  goto $bb35;
$bb35:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1859, 21} true;
  assume {:verifier.code 0} true;
  $i82 := $p2i.ref.i64($p0);
  // WARNING: %104 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !2018, !verifier.code !1787
  call {:cexpr "__cil_tmp54"} boogie_si_record_i64($i82);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1860, 33} true;
  assume {:verifier.code 0} true;
  $i83 := $add.i64($i82, 328);
  // WARNING: %105 = add i64 %104, 328, !dbg !2022, !verifier.code !1787
  call {:cexpr "__cil_tmp55"} boogie_si_record_i64($i83);
  // WARNING: call void @llvm.dbg.value(metadata i64 %105, i64 0, metadata !2107, metadata !1791), !dbg !2108, !verifier.code !1787
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1862, 26} true;
  assume {:verifier.code 0} true;
  $i84 := $add.i64(1304, 112);
  // WARNING: %106 = add i64 1304, 112, !dbg !2027, !verifier.code !1787
  call {:cexpr "__cil_tmp57"} boogie_si_record_i64($i84);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1863, 21} true;
  assume {:verifier.code 0} true;
  $i85 := $p2i.ref.i64($p66);
  // WARNING: %107 = ptrtoint %struct.pci_dev* %84 to i64, !dbg !2030, !verifier.code !1787
  call {:cexpr "__cil_tmp58"} boogie_si_record_i64($i85);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1864, 33} true;
  assume {:verifier.code 0} true;
  $i86 := $add.i64($i85, $i84);
  // WARNING: %108 = add i64 %107, %106, !dbg !2033, !verifier.code !1787
  call {:cexpr "__cil_tmp59"} boogie_si_record_i64($i86);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1865, 23} true;
  assume {:verifier.code 0} true;
  $p87 := $i2p.i64.ref($i86);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1865, 21} true;
  assume {:verifier.code 0} true;
  $i88 := $load.i64($M.1, $p87);
  // WARNING: %110 = load i64, i64* %109, align 8, !dbg !2037, !verifier.code !1787
  call {:cexpr "__cil_tmp60"} boogie_si_record_i64($i88);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1866, 9} true;
  assume {:verifier.code 0} true;
  $p89 := $i2p.i64.ref($i83);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1866, 39} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i64($M.1, $p89, $i88);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1867, 21} true;
  assume {:verifier.code 0} true;
  $i90 := $p2i.ref.i64($p0);
  // WARNING: %112 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !2042, !verifier.code !1787
  call {:cexpr "__cil_tmp61"} boogie_si_record_i64($i90);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1868, 33} true;
  assume {:verifier.code 0} true;
  $i91 := $add.i64($i90, 328);
  // WARNING: %113 = add i64 %112, 328, !dbg !2045, !verifier.code !1787
  call {:cexpr "__cil_tmp62"} boogie_si_record_i64($i91);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1869, 23} true;
  assume {:verifier.code 0} true;
  $p92 := $i2p.i64.ref($i91);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1869, 21} true;
  assume {:verifier.code 0} true;
  $i93 := $load.i64($M.1, $p92);
  // WARNING: %115 = load i64, i64* %114, align 8, !dbg !2049, !verifier.code !1787
  call {:cexpr "__cil_tmp63"} boogie_si_record_i64($i93);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1870, 7} true;
  assume {:verifier.code 0} true;
  call $i94 := printk.ref.i64(.str.4, $i93);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1871, 21} true;
  assume {:verifier.code 0} true;
  $i95 := $p2i.ref.i64($p0);
  // WARNING: %117 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !2053, !verifier.code !1787
  call {:cexpr "__cil_tmp64"} boogie_si_record_i64($i95);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1872, 33} true;
  assume {:verifier.code 0} true;
  $i96 := $add.i64($i95, 320);
  // WARNING: %118 = add i64 %117, 320, !dbg !2056, !verifier.code !1787
  call {:cexpr "__cil_tmp65"} boogie_si_record_i64($i96);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1873, 13} true;
  assume {:verifier.code 0} true;
  $p97 := $i2p.i64.ref($i96);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1873, 11} true;
  assume {:verifier.code 0} true;
  $p98 := $load.ref($M.1, $p97);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1875, 21} true;
  assume {:verifier.code 0} true;
  $i99 := $p2i.ref.i64($p0);
  // WARNING: %121 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !2065, !verifier.code !1787
  call {:cexpr "__cil_tmp67"} boogie_si_record_i64($i99);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1876, 33} true;
  assume {:verifier.code 0} true;
  $i100 := $add.i64($i99, 328);
  // WARNING: %122 = add i64 %121, 328, !dbg !2068, !verifier.code !1787
  call {:cexpr "__cil_tmp68"} boogie_si_record_i64($i100);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1877, 23} true;
  assume {:verifier.code 0} true;
  $p101 := $i2p.i64.ref($i100);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1877, 21} true;
  assume {:verifier.code 0} true;
  $i102 := $load.i64($M.1, $p101);
  // WARNING: %124 = load i64, i64* %123, align 8, !dbg !2072, !verifier.code !1787
  call {:cexpr "__cil_tmp69"} boogie_si_record_i64($i102);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1878, 7} true;
  assume {:verifier.code 0} true;
  call $i103 := subdev_8255_init($p0, $p98, $0.ref, $i102);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1879, 21} true;
  assume {:verifier.code 0} true;
  $i104 := $p2i.ref.i64($p0);
  // WARNING: %126 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !2076, !verifier.code !1787
  call {:cexpr "__cil_tmp70"} boogie_si_record_i64($i104);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1880, 33} true;
  assume {:verifier.code 0} true;
  $i105 := $add.i64($i104, 320);
  // WARNING: %127 = add i64 %126, 320, !dbg !2079, !verifier.code !1787
  call {:cexpr "__cil_tmp71"} boogie_si_record_i64($i105);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1881, 23} true;
  assume {:verifier.code 0} true;
  $p106 := $i2p.i64.ref($i105);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1881, 21} true;
  assume {:verifier.code 0} true;
  $p107 := $load.ref($M.1, $p106);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1882, 23} true;
  assume {:verifier.code 0} true;
  $p108 := $add.ref($p107, 304);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1884, 21} true;
  assume {:verifier.code 0} true;
  $i109 := $p2i.ref.i64($p0);
  // WARNING: %131 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !2089, !verifier.code !1787
  call {:cexpr "__cil_tmp74"} boogie_si_record_i64($i109);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1885, 33} true;
  assume {:verifier.code 0} true;
  $i110 := $add.i64($i109, 328);
  // WARNING: %132 = add i64 %131, 328, !dbg !2092, !verifier.code !1787
  call {:cexpr "__cil_tmp75"} boogie_si_record_i64($i110);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1886, 23} true;
  assume {:verifier.code 0} true;
  $p111 := $i2p.i64.ref($i110);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1886, 21} true;
  assume {:verifier.code 0} true;
  $i112 := $load.i64($M.1, $p111);
  // WARNING: %134 = load i64, i64* %133, align 8, !dbg !2096, !verifier.code !1787
  call {:cexpr "__cil_tmp76"} boogie_si_record_i64($i112);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1887, 33} true;
  assume {:verifier.code 0} true;
  $i113 := $add.i64($i112, 4);
  // WARNING: %135 = add i64 %134, 4, !dbg !2099, !verifier.code !1787
  call {:cexpr "__cil_tmp77"} boogie_si_record_i64($i113);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1888, 13} true;
  assume {:verifier.code 0} true;
  call $i114 := subdev_8255_init($p0, $p108, $0.ref, $i113);
  // WARNING: %136 = call i32 @subdev_8255_init(%struct.comedi_device* %0, %struct.comedi_subdevice* %130, i32 (i32, i32, i32, i64)* null, i64 %135), !dbg !2102, !verifier.code !1787
  call {:cexpr "ret"} boogie_si_record_i32($i114);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1890, 15} true;
  assume {:verifier.code 0} true;
  $i115 := $slt.i32($i114, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1890, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i115} true;
  goto $bb36, $bb37;
$bb36:
  assume ($i115 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1891, 9} true;
  assume {:verifier.code 0} true;
  $i22 := $i114;
  goto $bb3;
$bb37:
  assume !(($i115 == 1));
  assume {:verifier.code 0} true;
  goto $bb38;
$bb38:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1896, 21} true;
  assume {:verifier.code 0} true;
  $i116 := $p2i.ref.i64($p0);
  // WARNING: %141 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !2110, !verifier.code !1787
  call {:cexpr "__cil_tmp78"} boogie_si_record_i64($i116);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1897, 33} true;
  assume {:verifier.code 0} true;
  $i117 := $add.i64($i116, 320);
  // WARNING: %142 = add i64 %141, 320, !dbg !2114, !verifier.code !1787
  call {:cexpr "__cil_tmp79"} boogie_si_record_i64($i117);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1898, 23} true;
  assume {:verifier.code 0} true;
  $p118 := $i2p.i64.ref($i117);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1898, 21} true;
  assume {:verifier.code 0} true;
  $p119 := $load.ref($M.1, $p118);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1899, 23} true;
  assume {:verifier.code 0} true;
  $p120 := $add.ref($p119, 608);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1901, 21} true;
  assume {:verifier.code 0} true;
  $i121 := $p2i.ref.i64($p0);
  // WARNING: %146 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !2124, !verifier.code !1787
  call {:cexpr "__cil_tmp82"} boogie_si_record_i64($i121);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1902, 33} true;
  assume {:verifier.code 0} true;
  $i122 := $add.i64($i121, 328);
  // WARNING: %147 = add i64 %146, 328, !dbg !2127, !verifier.code !1787
  call {:cexpr "__cil_tmp83"} boogie_si_record_i64($i122);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1903, 23} true;
  assume {:verifier.code 0} true;
  $p123 := $i2p.i64.ref($i122);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1903, 21} true;
  assume {:verifier.code 0} true;
  $i124 := $load.i64($M.1, $p123);
  // WARNING: %149 = load i64, i64* %148, align 8, !dbg !2131, !verifier.code !1787
  call {:cexpr "__cil_tmp84"} boogie_si_record_i64($i124);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1904, 33} true;
  assume {:verifier.code 0} true;
  $i125 := $add.i64($i124, 8);
  // WARNING: %150 = add i64 %149, 8, !dbg !2134, !verifier.code !1787
  call {:cexpr "__cil_tmp85"} boogie_si_record_i64($i125);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1905, 13} true;
  assume {:verifier.code 0} true;
  call $i126 := subdev_8255_init($p0, $p120, $0.ref, $i125);
  // WARNING: %151 = call i32 @subdev_8255_init(%struct.comedi_device* %0, %struct.comedi_subdevice* %145, i32 (i32, i32, i32, i64)* null, i64 %150), !dbg !2137, !verifier.code !1787
  call {:cexpr "ret"} boogie_si_record_i32($i126);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1907, 15} true;
  assume {:verifier.code 0} true;
  $i127 := $slt.i32($i126, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1907, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i127} true;
  goto $bb39, $bb40;
$bb39:
  assume ($i127 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1908, 9} true;
  assume {:verifier.code 0} true;
  $i22 := $i126;
  goto $bb3;
$bb40:
  assume !(($i127 == 1));
  assume {:verifier.code 0} true;
  goto $bb41;
$bb41:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1913, 21} true;
  assume {:verifier.code 0} true;
  $i128 := $p2i.ref.i64($p0);
  // WARNING: %156 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !2143, !verifier.code !1787
  call {:cexpr "__cil_tmp86"} boogie_si_record_i64($i128);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1914, 33} true;
  assume {:verifier.code 0} true;
  $i129 := $add.i64($i128, 320);
  // WARNING: %157 = add i64 %156, 320, !dbg !2147, !verifier.code !1787
  call {:cexpr "__cil_tmp87"} boogie_si_record_i64($i129);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1915, 23} true;
  assume {:verifier.code 0} true;
  $p130 := $i2p.i64.ref($i129);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1915, 21} true;
  assume {:verifier.code 0} true;
  $p131 := $load.ref($M.1, $p130);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1916, 23} true;
  assume {:verifier.code 0} true;
  $p132 := $add.ref($p131, 912);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1918, 21} true;
  assume {:verifier.code 0} true;
  $i133 := $p2i.ref.i64($p0);
  // WARNING: %161 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !2157, !verifier.code !1787
  call {:cexpr "__cil_tmp90"} boogie_si_record_i64($i133);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1919, 33} true;
  assume {:verifier.code 0} true;
  $i134 := $add.i64($i133, 328);
  // WARNING: %162 = add i64 %161, 328, !dbg !2160, !verifier.code !1787
  call {:cexpr "__cil_tmp91"} boogie_si_record_i64($i134);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1920, 23} true;
  assume {:verifier.code 0} true;
  $p135 := $i2p.i64.ref($i134);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1920, 21} true;
  assume {:verifier.code 0} true;
  $i136 := $load.i64($M.1, $p135);
  // WARNING: %164 = load i64, i64* %163, align 8, !dbg !2164, !verifier.code !1787
  call {:cexpr "__cil_tmp92"} boogie_si_record_i64($i136);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1921, 33} true;
  assume {:verifier.code 0} true;
  $i137 := $add.i64($i136, 12);
  // WARNING: %165 = add i64 %164, 12, !dbg !2167, !verifier.code !1787
  call {:cexpr "__cil_tmp93"} boogie_si_record_i64($i137);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1922, 13} true;
  assume {:verifier.code 0} true;
  call $i138 := subdev_8255_init($p0, $p132, $0.ref, $i137);
  // WARNING: %166 = call i32 @subdev_8255_init(%struct.comedi_device* %0, %struct.comedi_subdevice* %160, i32 (i32, i32, i32, i64)* null, i64 %165), !dbg !2170, !verifier.code !1787
  call {:cexpr "ret"} boogie_si_record_i32($i138);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1924, 15} true;
  assume {:verifier.code 0} true;
  $i139 := $slt.i32($i138, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1924, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i139} true;
  goto $bb42, $bb43;
$bb42:
  assume ($i139 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1925, 9} true;
  assume {:verifier.code 0} true;
  $i22 := $i138;
  goto $bb3;
$bb43:
  assume !(($i139 == 1));
  assume {:verifier.code 0} true;
  goto $bb44;
$bb44:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1930, 21} true;
  assume {:verifier.code 0} true;
  $i140 := $p2i.ref.i64($p0);
  // WARNING: %171 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !2176, !verifier.code !1787
  call {:cexpr "__cil_tmp94"} boogie_si_record_i64($i140);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1931, 33} true;
  assume {:verifier.code 0} true;
  $i141 := $add.i64($i140, 32);
  // WARNING: %172 = add i64 %171, 32, !dbg !2180, !verifier.code !1787
  call {:cexpr "__cil_tmp95"} boogie_si_record_i64($i141);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1932, 23} true;
  assume {:verifier.code 0} true;
  $p142 := $i2p.i64.ref($i141);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1932, 21} true;
  assume {:verifier.code 0} true;
  $i143 := $load.i32($M.1, $p142);
  // WARNING: %174 = load i32, i32* %173, align 4, !dbg !2184, !verifier.code !1787
  call {:cexpr "__cil_tmp96"} boogie_si_record_i32($i143);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1933, 7} true;
  assume {:verifier.code 0} true;
  call $i144 := printk.ref.i32(.str.5, $i143);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1935, 7} true;
  assume {:verifier.code 0} true;
  $i22 := 1;
  goto $bb3;
$bb45:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1940, 3} true;
  assume {:verifier.code 0} true;
  goto $bb46;
$bb46:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1943, 3} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb47:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1960, 18} true;
  assume {:verifier.code 0} true;
  $i145 := $p2i.ref.i64($p0);
  // WARNING: %184 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !2195, !verifier.code !1787
  call {:cexpr "__cil_tmp100"} boogie_si_record_i64($i145);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1961, 31} true;
  assume {:verifier.code 0} true;
  $i146 := $add.i64($i145, 32);
  // WARNING: %185 = add i64 %184, 32, !dbg !2199, !verifier.code !1787
  call {:cexpr "__cil_tmp101"} boogie_si_record_i64($i146);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1962, 20} true;
  assume {:verifier.code 0} true;
  $p147 := $i2p.i64.ref($i146);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1962, 18} true;
  assume {:verifier.code 0} true;
  $i148 := $load.i32($M.1, $p147);
  // WARNING: %187 = load i32, i32* %186, align 4, !dbg !2203, !verifier.code !1787
  call {:cexpr "__cil_tmp102"} boogie_si_record_i32($i148);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1963, 3} true;
  assume {:verifier.code 0} true;
  call $i149 := printk.ref.i32.i32.i32(.str.6, $i148, $i14, $i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1966, 3} true;
  assume {:verifier.code 0} true;
  $i22 := $sub.i32(0, 5);
  goto $bb3;
}
const adl_pci7296_detach: ref;
axiom (adl_pci7296_detach == $sub.ref(0, 23365));
procedure  adl_pci7296_detach($p0: ref)
  returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2030, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  // WARNING: %2 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1788, !verifier.code !1787
  call {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2031, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $add.i64($i1, 32);
  // WARNING: %3 = add i64 %2, 32, !dbg !1793, !verifier.code !1787
  call {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2032, 18} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.i64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2032, 16} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.1, $p3);
  // WARNING: %5 = load i32, i32* %4, align 4, !dbg !1797, !verifier.code !1787
  call {:cexpr "__cil_tmp4"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2033, 3} true;
  assume {:verifier.code 0} true;
  call $i5 := printk.ref.i32(.str.8, $i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2037, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $p2i.ref.i64($0.ref);
  // WARNING: %7 = ptrtoint i8* null to i64, !dbg !1803, !verifier.code !1787
  call {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2038, 16} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p0);
  // WARNING: %8 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1807, !verifier.code !1787
  call {:cexpr "__cil_tmp7"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2039, 27} true;
  assume {:verifier.code 0} true;
  $i8 := $add.i64($i7, 16);
  // WARNING: %9 = add i64 %8, 16, !dbg !1810, !verifier.code !1787
  call {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2040, 18} true;
  assume {:verifier.code 0} true;
  $p9 := $i2p.i64.ref($i8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2040, 16} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.1, $p9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2041, 17} true;
  assume {:verifier.code 0} true;
  $i11 := $p2i.ref.i64($p10);
  // WARNING: %12 = ptrtoint i8* %11 to i64, !dbg !1817, !verifier.code !1787
  call {:cexpr "__cil_tmp10"} boogie_si_record_i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2042, 19} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.i64($i11, $i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2042, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2045, 19} true;
  assume {:verifier.code 0} true;
  $i13 := $p2i.ref.i64($0.ref);
  // WARNING: %15 = ptrtoint %struct.pci_dev* null to i64, !dbg !1825, !verifier.code !1787
  call {:cexpr "__cil_tmp12"} boogie_si_record_i64($i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2046, 19} true;
  assume {:verifier.code 0} true;
  $i14 := $p2i.ref.i64($p0);
  // WARNING: %16 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1830, !verifier.code !1787
  call {:cexpr "__cil_tmp13"} boogie_si_record_i64($i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2047, 31} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i64($i14, 16);
  // WARNING: %17 = add i64 %16, 16, !dbg !1833, !verifier.code !1787
  call {:cexpr "__cil_tmp14"} boogie_si_record_i64($i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2048, 21} true;
  assume {:verifier.code 0} true;
  $p16 := $i2p.i64.ref($i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2048, 19} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.1, $p16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2049, 19} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2050, 19} true;
  assume {:verifier.code 0} true;
  $i19 := $p2i.ref.i64($p18);
  // WARNING: %21 = ptrtoint %struct.adl_pci7296_private* %20 to i64, !dbg !1843, !verifier.code !1787
  call {:cexpr "__cil_tmp17"} boogie_si_record_i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2051, 31} true;
  assume {:verifier.code 0} true;
  $i20 := $add.i64($i19, 8);
  // WARNING: %22 = add i64 %21, 8, !dbg !1846, !verifier.code !1787
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i20);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2052, 21} true;
  assume {:verifier.code 0} true;
  $p21 := $i2p.i64.ref($i20);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2052, 19} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.1, $p21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2053, 19} true;
  assume {:verifier.code 0} true;
  $i23 := $p2i.ref.i64($p22);
  // WARNING: %25 = ptrtoint %struct.pci_dev* %24 to i64, !dbg !1853, !verifier.code !1787
  call {:cexpr "__cil_tmp20"} boogie_si_record_i64($i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2054, 21} true;
  assume {:verifier.code 0} true;
  $i24 := $ne.i64($i23, $i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2054, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb3:
  assume ($i24 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2056, 21} true;
  assume {:verifier.code 0} true;
  $i25 := $p2i.ref.i64($p0);
  // WARNING: %28 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1859, !verifier.code !1787
  call {:cexpr "__cil_tmp21"} boogie_si_record_i64($i25);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2057, 33} true;
  assume {:verifier.code 0} true;
  $i26 := $add.i64($i25, 328);
  // WARNING: %29 = add i64 %28, 328, !dbg !1864, !verifier.code !1787
  call {:cexpr "__cil_tmp22"} boogie_si_record_i64($i26);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2058, 23} true;
  assume {:verifier.code 0} true;
  $p27 := $i2p.i64.ref($i26);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2058, 21} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i64($M.1, $p27);
  // WARNING: %31 = load i64, i64* %30, align 8, !dbg !1868, !verifier.code !1787
  call {:cexpr "__cil_tmp23"} boogie_si_record_i64($i28);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2059, 23} true;
  assume {:verifier.code 0} true;
  $i29 := $ne.i64($i28, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2059, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb5, $bb6;
$bb4:
  assume !(($i24 == 1));
  assume {:verifier.code 0} true;
  goto $bb8;
$bb5:
  assume ($i29 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2061, 23} true;
  assume {:verifier.code 0} true;
  $i30 := $p2i.ref.i64($p0);
  // WARNING: %34 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1874, !verifier.code !1787
  call {:cexpr "__cil_tmp24"} boogie_si_record_i64($i30);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2062, 35} true;
  assume {:verifier.code 0} true;
  $i31 := $add.i64($i30, 16);
  // WARNING: %35 = add i64 %34, 16, !dbg !1879, !verifier.code !1787
  call {:cexpr "__cil_tmp25"} boogie_si_record_i64($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2063, 25} true;
  assume {:verifier.code 0} true;
  $p32 := $i2p.i64.ref($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2063, 23} true;
  assume {:verifier.code 0} true;
  $p33 := $load.ref($M.1, $p32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2064, 23} true;
  assume {:verifier.code 0} true;
  $p34 := $bitcast.ref.ref($p33);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2065, 23} true;
  assume {:verifier.code 0} true;
  $i35 := $p2i.ref.i64($p34);
  // WARNING: %39 = ptrtoint %struct.adl_pci7296_private* %38 to i64, !dbg !1889, !verifier.code !1787
  call {:cexpr "__cil_tmp28"} boogie_si_record_i64($i35);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2066, 35} true;
  assume {:verifier.code 0} true;
  $i36 := $add.i64($i35, 8);
  // WARNING: %40 = add i64 %39, 8, !dbg !1892, !verifier.code !1787
  call {:cexpr "__cil_tmp29"} boogie_si_record_i64($i36);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2067, 25} true;
  assume {:verifier.code 0} true;
  $p37 := $i2p.i64.ref($i36);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2067, 23} true;
  assume {:verifier.code 0} true;
  $p38 := $load.ref($M.1, $p37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2068, 9} true;
  assume {:verifier.code 0} true;
  call comedi_pci_disable($p38);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2070, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2075, 21} true;
  assume {:verifier.code 0} true;
  $i39 := $p2i.ref.i64($p0);
  // WARNING: %45 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1901, !verifier.code !1787
  call {:cexpr "__cil_tmp31"} boogie_si_record_i64($i39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2076, 33} true;
  assume {:verifier.code 0} true;
  $i40 := $add.i64($i39, 16);
  // WARNING: %46 = add i64 %45, 16, !dbg !1905, !verifier.code !1787
  call {:cexpr "__cil_tmp32"} boogie_si_record_i64($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2077, 23} true;
  assume {:verifier.code 0} true;
  $p41 := $i2p.i64.ref($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2077, 21} true;
  assume {:verifier.code 0} true;
  $p42 := $load.ref($M.1, $p41);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2078, 21} true;
  assume {:verifier.code 0} true;
  $p43 := $bitcast.ref.ref($p42);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2079, 21} true;
  assume {:verifier.code 0} true;
  $i44 := $p2i.ref.i64($p43);
  // WARNING: %50 = ptrtoint %struct.adl_pci7296_private* %49 to i64, !dbg !1915, !verifier.code !1787
  call {:cexpr "__cil_tmp35"} boogie_si_record_i64($i44);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2080, 33} true;
  assume {:verifier.code 0} true;
  $i45 := $add.i64($i44, 8);
  // WARNING: %51 = add i64 %50, 8, !dbg !1918, !verifier.code !1787
  call {:cexpr "__cil_tmp36"} boogie_si_record_i64($i45);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2081, 23} true;
  assume {:verifier.code 0} true;
  $p46 := $i2p.i64.ref($i45);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2081, 21} true;
  assume {:verifier.code 0} true;
  $p47 := $load.ref($M.1, $p46);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2082, 7} true;
  assume {:verifier.code 0} true;
  call pci_dev_put($p47);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2084, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2088, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2094, 17} true;
  assume {:verifier.code 0} true;
  $i48 := $p2i.ref.i64($0.ref);
  // WARNING: %58 = ptrtoint %struct.comedi_subdevice* null to i64, !dbg !1930, !verifier.code !1787
  call {:cexpr "__cil_tmp39"} boogie_si_record_i64($i48);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2095, 17} true;
  assume {:verifier.code 0} true;
  $i49 := $p2i.ref.i64($p0);
  // WARNING: %59 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1934, !verifier.code !1787
  call {:cexpr "__cil_tmp40"} boogie_si_record_i64($i49);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2096, 29} true;
  assume {:verifier.code 0} true;
  $i50 := $add.i64($i49, 320);
  // WARNING: %60 = add i64 %59, 320, !dbg !1937, !verifier.code !1787
  call {:cexpr "__cil_tmp41"} boogie_si_record_i64($i50);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2097, 19} true;
  assume {:verifier.code 0} true;
  $p51 := $i2p.i64.ref($i50);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2097, 17} true;
  assume {:verifier.code 0} true;
  $p52 := $load.ref($M.1, $p51);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2098, 17} true;
  assume {:verifier.code 0} true;
  $i53 := $p2i.ref.i64($p52);
  // WARNING: %63 = ptrtoint %struct.comedi_subdevice* %62 to i64, !dbg !1944, !verifier.code !1787
  call {:cexpr "__cil_tmp43"} boogie_si_record_i64($i53);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2099, 19} true;
  assume {:verifier.code 0} true;
  $i54 := $ne.i64($i53, $i48);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2099, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i54} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i54 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2101, 19} true;
  assume {:verifier.code 0} true;
  $i55 := $p2i.ref.i64($p0);
  // WARNING: %66 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1950, !verifier.code !1787
  call {:cexpr "__cil_tmp44"} boogie_si_record_i64($i55);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2102, 31} true;
  assume {:verifier.code 0} true;
  $i56 := $add.i64($i55, 320);
  // WARNING: %67 = add i64 %66, 320, !dbg !1955, !verifier.code !1787
  call {:cexpr "__cil_tmp45"} boogie_si_record_i64($i56);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2103, 21} true;
  assume {:verifier.code 0} true;
  $p57 := $i2p.i64.ref($i56);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2103, 19} true;
  assume {:verifier.code 0} true;
  $p58 := $load.ref($M.1, $p57);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2104, 5} true;
  assume {:verifier.code 0} true;
  call subdev_8255_cleanup($p0, $p58);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2105, 19} true;
  assume {:verifier.code 0} true;
  $i59 := $p2i.ref.i64($p0);
  // WARNING: %70 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1963, !verifier.code !1787
  call {:cexpr "__cil_tmp47"} boogie_si_record_i64($i59);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2106, 31} true;
  assume {:verifier.code 0} true;
  $i60 := $add.i64($i59, 320);
  // WARNING: %71 = add i64 %70, 320, !dbg !1966, !verifier.code !1787
  call {:cexpr "__cil_tmp48"} boogie_si_record_i64($i60);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2107, 21} true;
  assume {:verifier.code 0} true;
  $p61 := $i2p.i64.ref($i60);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2107, 19} true;
  assume {:verifier.code 0} true;
  $p62 := $load.ref($M.1, $p61);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2108, 31} true;
  assume {:verifier.code 0} true;
  $p63 := $add.ref($p62, 304);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2109, 5} true;
  assume {:verifier.code 0} true;
  call subdev_8255_cleanup($p0, $p63);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2110, 19} true;
  assume {:verifier.code 0} true;
  $i64 := $p2i.ref.i64($p0);
  // WARNING: %75 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1977, !verifier.code !1787
  call {:cexpr "__cil_tmp51"} boogie_si_record_i64($i64);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2111, 31} true;
  assume {:verifier.code 0} true;
  $i65 := $add.i64($i64, 320);
  // WARNING: %76 = add i64 %75, 320, !dbg !1980, !verifier.code !1787
  call {:cexpr "__cil_tmp52"} boogie_si_record_i64($i65);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2112, 21} true;
  assume {:verifier.code 0} true;
  $p66 := $i2p.i64.ref($i65);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2112, 19} true;
  assume {:verifier.code 0} true;
  $p67 := $load.ref($M.1, $p66);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2113, 31} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($p67, 608);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2114, 5} true;
  assume {:verifier.code 0} true;
  call subdev_8255_cleanup($p0, $p68);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2115, 19} true;
  assume {:verifier.code 0} true;
  $i69 := $p2i.ref.i64($p0);
  // WARNING: %80 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1991, !verifier.code !1787
  call {:cexpr "__cil_tmp55"} boogie_si_record_i64($i69);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2116, 31} true;
  assume {:verifier.code 0} true;
  $i70 := $add.i64($i69, 320);
  // WARNING: %81 = add i64 %80, 320, !dbg !1994, !verifier.code !1787
  call {:cexpr "__cil_tmp56"} boogie_si_record_i64($i70);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2117, 21} true;
  assume {:verifier.code 0} true;
  $p71 := $i2p.i64.ref($i70);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2117, 19} true;
  assume {:verifier.code 0} true;
  $p72 := $load.ref($M.1, $p71);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2118, 31} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($p72, 912);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2119, 5} true;
  assume {:verifier.code 0} true;
  call subdev_8255_cleanup($p0, $p73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2121, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume !(($i54 == 1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2125, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const driver_adl_pci7296_cleanup_module: ref;
axiom (driver_adl_pci7296_cleanup_module == $sub.ref(0, 24397));
procedure  driver_adl_pci7296_cleanup_module()
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2197, 3} true;
  assume {:verifier.code 0} true;
  call pci_unregister_driver(driver_adl_pci7296_pci_driver);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2198, 3} true;
  assume {:verifier.code 0} true;
  call $i0 := comedi_driver_unregister(driver_adl_pci7296);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2200, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_check_final_state: ref;
axiom (ldv_check_final_state == $sub.ref(0, 25429));
procedure  ldv_check_final_state();
const pci_unregister_driver: ref;
axiom (pci_unregister_driver == $sub.ref(0, 26461));
procedure  pci_unregister_driver($p0: ref);
const comedi_driver_unregister: ref;
axiom (comedi_driver_unregister == $sub.ref(0, 27493));
procedure  comedi_driver_unregister($p0: ref)
  returns ($r: i32);
const printk: ref;
axiom (printk == $sub.ref(0, 28525));
procedure  printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32)
  returns ($r: i32);
procedure  printk.ref.i32($p0: ref, p.1: i32)
  returns ($r: i32);
procedure  printk.ref.i64($p0: ref, p.1: i64)
  returns ($r: i32);
const comedi_pci_disable: ref;
axiom (comedi_pci_disable == $sub.ref(0, 29557));
procedure  comedi_pci_disable($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1632, 3} true;
  assume {:verifier.code 0} true;
  call pci_release_regions($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1633, 3} true;
  assume {:verifier.code 0} true;
  call pci_disable_device($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1635, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const pci_dev_put: ref;
axiom (pci_dev_put == $sub.ref(0, 30589));
procedure  pci_dev_put($p0: ref);
const subdev_8255_cleanup: ref;
axiom (subdev_8255_cleanup == $sub.ref(0, 31621));
procedure  subdev_8255_cleanup($p0: ref, $p1: ref);
const pci_release_regions: ref;
axiom (pci_release_regions == $sub.ref(0, 32653));
procedure  pci_release_regions($p0: ref);
const pci_disable_device: ref;
axiom (pci_disable_device == $sub.ref(0, 33685));
procedure  pci_disable_device($p0: ref);
const alloc_private: ref;
axiom (alloc_private == $sub.ref(0, 34717));
procedure  alloc_private($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.comedi_device* %0, i64 0, metadata !2532, metadata !1791), !dbg !2533, !verifier.code !1787
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1571, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p0);
  // WARNING: %3 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1792, !verifier.code !1789
  call {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1572, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $add.i64($i2, 16);
  // WARNING: %4 = add i64 %3, 16, !dbg !1797, !verifier.code !1789
  call {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1573, 16} true;
  assume {:verifier.code 0} true;
  $i4 := $sext.i32.i64($i1);
  // WARNING: %5 = sext i32 %1 to i64, !dbg !1800, !verifier.code !1789
  call {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1574, 28} true;
  assume {:verifier.code 0} true;
  call $p5 := kzalloc($i4, 208);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1574, 5} true;
  assume {:verifier.code 0} true;
  $p6 := $i2p.i64.ref($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1574, 26} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p6, $p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1578, 16} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($0.ref);
  // WARNING: %8 = ptrtoint i8* null to i64, !dbg !1808, !verifier.code !1789
  call {:cexpr "__cil_tmp7"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1579, 16} true;
  assume {:verifier.code 0} true;
  $i8 := $p2i.ref.i64($p0);
  // WARNING: %9 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1812, !verifier.code !1789
  call {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1580, 27} true;
  assume {:verifier.code 0} true;
  $i9 := $add.i64($i8, 16);
  // WARNING: %10 = add i64 %9, 16, !dbg !1815, !verifier.code !1789
  call {:cexpr "__cil_tmp9"} boogie_si_record_i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1581, 19} true;
  assume {:verifier.code 0} true;
  $p10 := $i2p.i64.ref($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1581, 17} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.1, $p10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1582, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $p2i.ref.i64($p11);
  // WARNING: %13 = ptrtoint i8* %12 to i64, !dbg !1822, !verifier.code !1789
  call {:cexpr "__cil_tmp11"} boogie_si_record_i64($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1583, 19} true;
  assume {:verifier.code 0} true;
  $i13 := $eq.i64($i12, $i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1583, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1584, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.i32(0, 12);
  goto $bb3;
$bb2:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1591, 1} true;
  assume {:verifier.code 0} true;
  $r := $i14;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1589, 3} true;
  assume {:verifier.code 0} true;
  $i14 := 0;
  goto $bb3;
}
const alloc_subdevices: ref;
axiom (alloc_subdevices == $sub.ref(0, 35749));
procedure  alloc_subdevices($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i20: i1;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $i21: i32;
  var $i19: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata %struct.comedi_device* %0, i64 0, metadata !2579, metadata !1791), !dbg !2580, !verifier.code !1787
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1480, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p0);
  // WARNING: %4 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1794, !verifier.code !1786
  call {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1481, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i64($i3, 316);
  // WARNING: %5 = add i64 %4, 316, !dbg !1799, !verifier.code !1786
  call {:cexpr "__cil_tmp7"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1482, 5} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.i64.ref($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1482, 24} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p5, $i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1483, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i32.i64($i1);
  // WARNING: %7 = zext i32 %1 to i64, !dbg !1804, !verifier.code !1786
  call {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1484, 9} true;
  assume {:verifier.code 0} true;
  call $p7 := kcalloc($i6, 304, 208);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1485, 16} true;
  assume {:verifier.code 0} true;
  $i8 := $p2i.ref.i64($p0);
  // WARNING: %9 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1810, !verifier.code !1786
  call {:cexpr "__cil_tmp9"} boogie_si_record_i64($i8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1486, 28} true;
  assume {:verifier.code 0} true;
  $i9 := $add.i64($i8, 320);
  // WARNING: %10 = add i64 %9, 320, !dbg !1813, !verifier.code !1786
  call {:cexpr "__cil_tmp10"} boogie_si_record_i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1487, 48} true;
  assume {:verifier.code 0} true;
  $p10 := $bitcast.ref.ref($p7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1487, 5} true;
  assume {:verifier.code 0} true;
  $p11 := $i2p.i64.ref($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1487, 46} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p11, $p7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1491, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $p2i.ref.i64($0.ref);
  // WARNING: %13 = ptrtoint %struct.comedi_subdevice* null to i64, !dbg !1821, !verifier.code !1786
  call {:cexpr "__cil_tmp12"} boogie_si_record_i64($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1492, 17} true;
  assume {:verifier.code 0} true;
  $i13 := $p2i.ref.i64($p0);
  // WARNING: %14 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1825, !verifier.code !1786
  call {:cexpr "__cil_tmp13"} boogie_si_record_i64($i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1493, 29} true;
  assume {:verifier.code 0} true;
  $i14 := $add.i64($i13, 320);
  // WARNING: %15 = add i64 %14, 320, !dbg !1828, !verifier.code !1786
  call {:cexpr "__cil_tmp14"} boogie_si_record_i64($i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1494, 19} true;
  assume {:verifier.code 0} true;
  $p15 := $i2p.i64.ref($i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1494, 17} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.1, $p15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1495, 17} true;
  assume {:verifier.code 0} true;
  $i17 := $p2i.ref.i64($p16);
  // WARNING: %18 = ptrtoint %struct.comedi_subdevice* %17 to i64, !dbg !1835, !verifier.code !1786
  call {:cexpr "__cil_tmp16"} boogie_si_record_i64($i17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1496, 19} true;
  assume {:verifier.code 0} true;
  $i18 := $eq.i64($i17, $i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1496, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i18 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1497, 5} true;
  assume {:verifier.code 0} true;
  $i19 := $sub.i32(0, 12);
  goto $bb3;
$bb2:
  assume !(($i18 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1557, 1} true;
  assume {:verifier.code 0} true;
  $r := $i19;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1549, 9} true;
  assume {:verifier.code 0} true;
  $i20 := $ult.i32(0, $i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1549, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i20 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1549, 7} true;
  assume {:verifier.code 0} true;
  $i21 := 0;
  goto $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1549, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i20 == 1));
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1552, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1550, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1506, 17} true;
  assume {:verifier.code 0} true;
  $i22 := $zext.i32.i64($i21);
  // WARNING: %25 = zext i32 %.012 to i64, !dbg !1848, !verifier.code !1786
  call {:cexpr "__cil_tmp17"} boogie_si_record_i64($i22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1507, 17} true;
  assume {:verifier.code 0} true;
  $i23 := $p2i.ref.i64($p0);
  // WARNING: %26 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1852, !verifier.code !1786
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1508, 29} true;
  assume {:verifier.code 0} true;
  $i24 := $add.i64($i23, 320);
  // WARNING: %27 = add i64 %26, 320, !dbg !1855, !verifier.code !1786
  call {:cexpr "__cil_tmp19"} boogie_si_record_i64($i24);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1509, 19} true;
  assume {:verifier.code 0} true;
  $p25 := $i2p.i64.ref($i24);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1509, 17} true;
  assume {:verifier.code 0} true;
  $p26 := $load.ref($M.1, $p25);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1510, 29} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($p26, $mul.ref($i22, 304));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1511, 3} true;
  assume {:verifier.code 0} true;
  $p28 := $bitcast.ref.ref($p27);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1511, 43} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p28, $p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1512, 17} true;
  assume {:verifier.code 0} true;
  $i29 := $zext.i32.i64($i21);
  // WARNING: %32 = zext i32 %.012 to i64, !dbg !1867, !verifier.code !1786
  call {:cexpr "__cil_tmp22"} boogie_si_record_i64($i29);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1513, 17} true;
  assume {:verifier.code 0} true;
  $i30 := $p2i.ref.i64($p0);
  // WARNING: %33 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1870, !verifier.code !1786
  call {:cexpr "__cil_tmp23"} boogie_si_record_i64($i30);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1514, 29} true;
  assume {:verifier.code 0} true;
  $i31 := $add.i64($i30, 320);
  // WARNING: %34 = add i64 %33, 320, !dbg !1873, !verifier.code !1786
  call {:cexpr "__cil_tmp24"} boogie_si_record_i64($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1515, 19} true;
  assume {:verifier.code 0} true;
  $p32 := $i2p.i64.ref($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1515, 17} true;
  assume {:verifier.code 0} true;
  $p33 := $load.ref($M.1, $p32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1516, 29} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p33, $mul.ref($i29, 304));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1517, 17} true;
  assume {:verifier.code 0} true;
  $i35 := $p2i.ref.i64($p34);
  // WARNING: %38 = ptrtoint %struct.comedi_subdevice* %37 to i64, !dbg !1883, !verifier.code !1786
  call {:cexpr "__cil_tmp27"} boogie_si_record_i64($i35);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1518, 29} true;
  assume {:verifier.code 0} true;
  $i36 := $add.i64($i35, 280);
  // WARNING: %39 = add i64 %38, 280, !dbg !1886, !verifier.code !1786
  call {:cexpr "__cil_tmp28"} boogie_si_record_i64($i36);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1519, 5} true;
  assume {:verifier.code 0} true;
  $p37 := $i2p.i64.ref($i36);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1519, 45} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p37, 3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1520, 17} true;
  assume {:verifier.code 0} true;
  $i38 := $zext.i32.i64($i21);
  // WARNING: %41 = zext i32 %.012 to i64, !dbg !1891, !verifier.code !1786
  call {:cexpr "__cil_tmp29"} boogie_si_record_i64($i38);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1521, 17} true;
  assume {:verifier.code 0} true;
  $i39 := $p2i.ref.i64($p0);
  // WARNING: %42 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1894, !verifier.code !1786
  call {:cexpr "__cil_tmp30"} boogie_si_record_i64($i39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1522, 29} true;
  assume {:verifier.code 0} true;
  $i40 := $add.i64($i39, 320);
  // WARNING: %43 = add i64 %42, 320, !dbg !1897, !verifier.code !1786
  call {:cexpr "__cil_tmp31"} boogie_si_record_i64($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1523, 19} true;
  assume {:verifier.code 0} true;
  $p41 := $i2p.i64.ref($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1523, 17} true;
  assume {:verifier.code 0} true;
  $p42 := $load.ref($M.1, $p41);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1524, 29} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p42, $mul.ref($i38, 304));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1525, 17} true;
  assume {:verifier.code 0} true;
  $i44 := $p2i.ref.i64($p43);
  // WARNING: %47 = ptrtoint %struct.comedi_subdevice* %46 to i64, !dbg !1907, !verifier.code !1786
  call {:cexpr "__cil_tmp34"} boogie_si_record_i64($i44);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1526, 29} true;
  assume {:verifier.code 0} true;
  $i45 := $add.i64($i44, 64);
  // WARNING: %48 = add i64 %47, 64, !dbg !1910, !verifier.code !1786
  call {:cexpr "__cil_tmp35"} boogie_si_record_i64($i45);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1527, 17} true;
  assume {:verifier.code 0} true;
  $p46 := $i2p.i64.ref($i45);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1528, 3} true;
  assume {:verifier.code 0} true;
  call $p47 := spinlock_check($p46);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1529, 17} true;
  assume {:verifier.code 0} true;
  $i48 := $zext.i32.i64($i21);
  // WARNING: %51 = zext i32 %.012 to i64, !dbg !1917, !verifier.code !1786
  call {:cexpr "__cil_tmp37"} boogie_si_record_i64($i48);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1530, 17} true;
  assume {:verifier.code 0} true;
  $i49 := $p2i.ref.i64($p0);
  // WARNING: %52 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1920, !verifier.code !1786
  call {:cexpr "__cil_tmp38"} boogie_si_record_i64($i49);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1531, 29} true;
  assume {:verifier.code 0} true;
  $i50 := $add.i64($i49, 320);
  // WARNING: %53 = add i64 %52, 320, !dbg !1923, !verifier.code !1786
  call {:cexpr "__cil_tmp39"} boogie_si_record_i64($i50);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1532, 19} true;
  assume {:verifier.code 0} true;
  $p51 := $i2p.i64.ref($i50);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1532, 17} true;
  assume {:verifier.code 0} true;
  $p52 := $load.ref($M.1, $p51);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1533, 29} true;
  assume {:verifier.code 0} true;
  $p53 := $add.ref($p52, $mul.ref($i48, 304));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1534, 17} true;
  assume {:verifier.code 0} true;
  $i54 := $p2i.ref.i64($p53);
  // WARNING: %57 = ptrtoint %struct.comedi_subdevice* %56 to i64, !dbg !1933, !verifier.code !1786
  call {:cexpr "__cil_tmp42"} boogie_si_record_i64($i54);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1535, 29} true;
  assume {:verifier.code 0} true;
  $i55 := $add.i64($i54, 64);
  // WARNING: %58 = add i64 %57, 64, !dbg !1936, !verifier.code !1786
  call {:cexpr "__cil_tmp43"} boogie_si_record_i64($i55);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1536, 17} true;
  assume {:verifier.code 0} true;
  $p56 := $i2p.i64.ref($i55);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1537, 3} true;
  assume {:verifier.code 0} true;
  call __raw_spin_lock_init($p56, .str.7, $p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1538, 17} true;
  assume {:verifier.code 0} true;
  $i57 := $zext.i32.i64($i21);
  // WARNING: %60 = zext i32 %.012 to i64, !dbg !1943, !verifier.code !1786
  call {:cexpr "__cil_tmp45"} boogie_si_record_i64($i57);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1539, 17} true;
  assume {:verifier.code 0} true;
  $i58 := $p2i.ref.i64($p0);
  // WARNING: %61 = ptrtoint %struct.comedi_device* %0 to i64, !dbg !1946, !verifier.code !1786
  call {:cexpr "__cil_tmp46"} boogie_si_record_i64($i58);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1540, 29} true;
  assume {:verifier.code 0} true;
  $i59 := $add.i64($i58, 320);
  // WARNING: %62 = add i64 %61, 320, !dbg !1949, !verifier.code !1786
  call {:cexpr "__cil_tmp47"} boogie_si_record_i64($i59);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1541, 19} true;
  assume {:verifier.code 0} true;
  $p60 := $i2p.i64.ref($i59);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1541, 17} true;
  assume {:verifier.code 0} true;
  $p61 := $load.ref($M.1, $p60);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1542, 29} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($p61, $mul.ref($i57, 304));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1543, 17} true;
  assume {:verifier.code 0} true;
  $i63 := $p2i.ref.i64($p62);
  // WARNING: %66 = ptrtoint %struct.comedi_subdevice* %65 to i64, !dbg !1959, !verifier.code !1786
  call {:cexpr "__cil_tmp50"} boogie_si_record_i64($i63);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1544, 29} true;
  assume {:verifier.code 0} true;
  $i64 := $add.i64($i63, 296);
  // WARNING: %67 = add i64 %66, 296, !dbg !1962, !verifier.code !1786
  call {:cexpr "__cil_tmp51"} boogie_si_record_i64($i64);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1545, 5} true;
  assume {:verifier.code 0} true;
  $p65 := $i2p.i64.ref($i64);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1545, 25} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p65, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1546, 9} true;
  assume {:verifier.code 0} true;
  $i66 := $add.i32($i21, 1);
  // WARNING: %69 = add i32 %.012, 1, !dbg !1967, !verifier.code !1786
  call {:cexpr "i"} boogie_si_record_i32($i66);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1549, 9} true;
  assume {:verifier.code 0} true;
  $i67 := $ult.i32($i66, $i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1549, 7} true;
  assume {:verifier.code 0} true;
  $i21 := $i66;
  assume {:branchcond $i67} true;
  goto $bb10, $bb11;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1549, 7} true;
  assume {:verifier.code 0} true;
  assume ($i67 == 1);
  goto $bb8;
$bb11:
  assume !(($i67 == 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1549, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1555, 3} true;
  assume {:verifier.code 0} true;
  $i19 := 0;
  goto $bb3;
}
const comedi_pci_enable: ref;
axiom (comedi_pci_enable == $sub.ref(0, 36781));
procedure  comedi_pci_enable($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1607, 8} true;
  assume {:verifier.code 0} true;
  call $i2 := pci_enable_device($p0);
  // WARNING: %3 = call i32 @pci_enable_device(%struct.pci_dev* %0), !dbg !1792, !verifier.code !1789
  call {:cexpr "rc"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1609, 10} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1609, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1610, 5} true;
  assume {:verifier.code 0} true;
  $i4 := $i2;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1626, 1} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1615, 8} true;
  assume {:verifier.code 0} true;
  call $i5 := pci_request_regions($p0, $p1);
  // WARNING: %8 = call i32 @pci_request_regions(%struct.pci_dev* %0, i8* %1), !dbg !1802, !verifier.code !1789
  call {:cexpr "rc"} boogie_si_record_i32($i5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1617, 10} true;
  assume {:verifier.code 0} true;
  $i6 := $slt.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1617, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1619, 5} true;
  assume {:verifier.code 0} true;
  call pci_disable_device($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1621, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1624, 3} true;
  assume {:verifier.code 0} true;
  $i4 := $i5;
  goto $bb3;
}
const subdev_8255_init: ref;
axiom (subdev_8255_init == $sub.ref(0, 37813));
procedure  subdev_8255_init($p0: ref, $p1: ref, $p2: ref, $i3: i64)
  returns ($r: i32);
const pci_get_device: ref;
axiom (pci_get_device == $sub.ref(0, 38845));
procedure  pci_get_device($i0: i32, $i1: i32, $p2: ref)
  returns ($r: ref);
const pci_enable_device: ref;
axiom (pci_enable_device == $sub.ref(0, 39877));
procedure  pci_enable_device($p0: ref)
  returns ($r: i32);
const pci_request_regions: ref;
axiom (pci_request_regions == $sub.ref(0, 40909));
procedure  pci_request_regions($p0: ref, $p1: ref)
  returns ($r: i32);
const kcalloc: ref;
axiom (kcalloc == $sub.ref(0, 41941));
procedure  kcalloc($i0: i64, $i1: i64, $i2: i32)
  returns ($r: ref)
{
  var $p3: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !2796, metadata !1791), !dbg !2797, !verifier.code !1787
  // WARNING: call void @llvm.dbg.value(metadata i64 %1, i64 0, metadata !2798, metadata !1791), !dbg !2799, !verifier.code !1787
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2376, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_alloc_flags($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2377, 3} true;
  assume {:verifier.code 0} true;
  call $p3 := ldv_kcalloc_14($i0, $i1, $i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2379, 3} true;
  assume {:verifier.code 0} true;
  $r := $0.ref;
  $exn := false;
  return;
}
const spinlock_check: ref;
axiom (spinlock_check == $sub.ref(0, 42973));
procedure  spinlock_check($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1375, 11} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1375, 3} true;
  assume {:verifier.code 0} true;
  $r := $p1;
  $exn := false;
  return;
}
const __raw_spin_lock_init: ref;
axiom (__raw_spin_lock_init == $sub.ref(0, 44005));
procedure  __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
const ldv_check_alloc_flags: ref;
axiom (ldv_check_alloc_flags == $sub.ref(0, 45037));
procedure  ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2290, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $M.2;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2290, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2290, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2291, 15} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i0, 32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2291, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i2 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2293, 7} true;
  assume {:verifier.code 0} true;
  call ldv_blast_assert();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2295, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2298, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2301, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_kcalloc_14: ref;
axiom (ldv_kcalloc_14 == $sub.ref(0, 46069));
procedure  ldv_kcalloc_14($i0: i64, $i1: i64, $i2: i32)
  returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !2837, metadata !1791), !dbg !2838, !verifier.code !1787
  // WARNING: call void @llvm.dbg.value(metadata i64 %1, i64 0, metadata !2839, metadata !1791), !dbg !2840, !verifier.code !1787
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1413, 22} true;
  assume {:verifier.code 0} true;
  $i3 := $or.i32($i2, 32768);
  // WARNING: %4 = or i32 %2, 32768, !dbg !1794, !verifier.code !1789
  call {:cexpr "__cil_tmp5"} boogie_si_record_i32($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1414, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := kmalloc_array($i0, $i1, $i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1416, 3} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const kmalloc_array: ref;
axiom (kmalloc_array == $sub.ref(0, 47101));
procedure  kmalloc_array($i0: i64, $i1: i64, $i2: i32)
  returns ($r: ref)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p6: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !2853, metadata !1791), !dbg !2854, !verifier.code !1787
  // WARNING: call void @llvm.dbg.value(metadata i64 %1, i64 0, metadata !2855, metadata !1791), !dbg !2856, !verifier.code !1787
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1388, 12} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i64($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1388, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1390, 39} true;
  assume {:verifier.code 0} true;
  $i4 := $udiv.i64($sub.i64(0, 1), $i1);
  // WARNING: %6 = udiv i64 -1, %1, !dbg !1798, !verifier.code !1789
  call {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1391, 20} true;
  assume {:verifier.code 0} true;
  $i5 := $ult.i64($i4, $i0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1391, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i3 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb3:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1392, 7} true;
  assume {:verifier.code 0} true;
  $p6 := $0.ref;
  goto $bb5;
$bb4:
  assume !(($i5 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1406, 1} true;
  assume {:verifier.code 0} true;
  $r := $p6;
  $exn := false;
  return;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1397, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1401, 18} true;
  assume {:verifier.code 0} true;
  $i7 := $mul.i64($i0, $i1);
  // WARNING: %13 = mul i64 %0, %1, !dbg !1809, !verifier.code !1789
  call {:cexpr "__cil_tmp6"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1402, 9} true;
  assume {:verifier.code 0} true;
  call $p8 := __kmalloc($i7, $i2);
  assume $isExternal($p8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 1404, 3} true;
  assume {:verifier.code 0} true;
  $p6 := $p8;
  goto $bb5;
}
const __kmalloc: ref;
axiom (__kmalloc == $sub.ref(0, 48133));
procedure  __kmalloc($i0: i64, $i1: i32)
  returns ($r: ref);
const ldv_blast_assert: ref;
axiom (ldv_blast_assert == $sub.ref(0, 49165));
procedure  ldv_blast_assert()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2280, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2281, 10} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2283, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const kzalloc: ref;
axiom (kzalloc == $sub.ref(0, 50197));
procedure  kzalloc($i0: i64, $i1: i32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !2891, metadata !1791), !dbg !2892, !verifier.code !1787
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2398, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_alloc_flags($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2399, 9} true;
  assume {:verifier.code 1} true;
  call $p2 := __VERIFIER_nondet_pointer();
  call {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2401, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const comedi_driver_register: ref;
axiom (comedi_driver_register == $sub.ref(0, 51229));
procedure  comedi_driver_register($p0: ref)
  returns ($r: i32);
const __pci_register_driver: ref;
axiom (__pci_register_driver == $sub.ref(0, 52261));
procedure  __pci_register_driver($p0: ref, $p1: ref, $p2: ref)
  returns ($r: i32);
const driver_adl_pci7296_pci_probe: ref;
axiom (driver_adl_pci7296_pci_probe == $sub.ref(0, 53293));
procedure  driver_adl_pci7296_pci_probe($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.pci_device_id* %1, i64 0, metadata !2905, metadata !1791), !dbg !2906, !verifier.code !1787
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2136, 18} true;
  assume {:verifier.code 0} true;
  $p2 := $i2p.i64.ref($add.i64($p2i.ref.i64(driver_adl_pci7296), 8));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2136, 16} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.1, $p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2137, 9} true;
  assume {:verifier.code 0} true;
  call $i4 := comedi_pci_auto_config($p0, $p3);
  // WARNING: %5 = call i32 @comedi_pci_auto_config(%struct.pci_dev* %0, i8* %4), !dbg !1798, !verifier.code !1787
  call {:cexpr "tmp"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2139, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const driver_adl_pci7296_pci_remove: ref;
axiom (driver_adl_pci7296_pci_remove == $sub.ref(0, 54325));
procedure  driver_adl_pci7296_pci_remove($p0: ref)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2147, 3} true;
  assume {:verifier.code 0} true;
  call comedi_pci_auto_unconfig($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--staging--comedi--drivers--adl_pci7296.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-BW4aIa.c", 2149, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const comedi_pci_auto_unconfig: ref;
axiom (comedi_pci_auto_unconfig == $sub.ref(0, 55357));
procedure  comedi_pci_auto_unconfig($p0: ref);
const comedi_pci_auto_config: ref;
axiom (comedi_pci_auto_config == $sub.ref(0, 56389));
procedure  comedi_pci_auto_config($p0: ref, $p1: ref)
  returns ($r: i32);
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 57421));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !2929, metadata !1791), !dbg !2930, !verifier.code !1787
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 34, 21} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 35, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 58453));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 59485));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 261, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_error: ref;
axiom (__VERIFIER_error == $sub.ref(0, 60517));
procedure  __VERIFIER_error()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 47, 3} true;
  assume {:verifier.code 1} true;
  assert false;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 51, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 61549));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 62581));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 63613));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 64645));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 65677));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 66709));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 67741));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 68773));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 69805));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 120, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
  // WARNING: %1 = call i32 @__SMACK_nondet_int(), !dbg !1784, !verifier.code !1785
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.i32($i0, 2147483647);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i2);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 122, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 70837));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 71869));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 72901));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 73933));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 74965));
procedure  __SMACK_nondet_long()
  returns ($r: i64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 75997));
procedure  __SMACK_nondet_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 77029));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 78061));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 79093));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 80125));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 81157));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 82189));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 83221));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 84253));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 85285));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 86317));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const __VERIFIER_nondet_pointer: ref;
axiom (__VERIFIER_nondet_pointer == $sub.ref(0, 87349));
procedure  __VERIFIER_nondet_pointer()
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 243, 10} true;
  assume {:verifier.code 1} true;
  call $p0 := __VERIFIER_nondet();
  call {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 243, 3} true;
  assume {:verifier.code 0} true;
  $r := $p0;
  $exn := false;
  return;
}
const __VERIFIER_nondet: ref;
axiom (__VERIFIER_nondet == $sub.ref(0, 88381));
procedure  __VERIFIER_nondet()
  returns ($r: ref);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 89413));
function {:inline} $bitcast.ref.ref(i: ref) returns (ref) {i}
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $min.bv128(i1: bv128, i2: bv128) returns (bv128) {if $slt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv96(i1: bv96, i2: bv96) returns (bv96) {if $slt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv88(i1: bv88, i2: bv88) returns (bv88) {if $slt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv64(i1: bv64, i2: bv64) returns (bv64) {if $slt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv56(i1: bv56, i2: bv56) returns (bv56) {if $slt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv48(i1: bv48, i2: bv48) returns (bv48) {if $slt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv40(i1: bv40, i2: bv40) returns (bv40) {if $slt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv32(i1: bv32, i2: bv32) returns (bv32) {if $slt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv24(i1: bv24, i2: bv24) returns (bv24) {if $slt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv16(i1: bv16, i2: bv16) returns (bv16) {if $slt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv8(i1: bv8, i2: bv8) returns (bv8) {if $slt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv128(i1: bv128, i2: bv128) returns (bv128) {if $sgt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv96(i1: bv96, i2: bv96) returns (bv96) {if $sgt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv88(i1: bv88, i2: bv88) returns (bv88) {if $sgt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv64(i1: bv64, i2: bv64) returns (bv64) {if $sgt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv56(i1: bv56, i2: bv56) returns (bv56) {if $sgt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv48(i1: bv48, i2: bv48) returns (bv48) {if $sgt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv40(i1: bv40, i2: bv40) returns (bv40) {if $sgt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv32(i1: bv32, i2: bv32) returns (bv32) {if $sgt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv24(i1: bv24, i2: bv24) returns (bv24) {if $sgt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv16(i1: bv16, i2: bv16) returns (bv16) {if $sgt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv8(i1: bv8, i2: bv8) returns (bv8) {if $sgt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ult.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ult.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ult.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ult.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ult.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ult.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ult.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ult.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ult.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ult.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ult.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ugt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ugt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ugt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ugt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ugt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ugt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ugt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ugt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ugt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ugt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ugt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then i1 else i2}
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) returns (bv128);
function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) returns (bv96);
function {:bvbuiltin "bvnot"} $not.bv88(i: bv88) returns (bv88);
function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) returns (bv64);
function {:bvbuiltin "bvnot"} $not.bv56(i: bv56) returns (bv56);
function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) returns (bv48);
function {:bvbuiltin "bvnot"} $not.bv40(i: bv40) returns (bv40);
function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) returns (bv32);
function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) returns (bv24);
function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) returns (bv16);
function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) returns (bv8);
function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) returns (bv1);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 == i2} function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 == i2} function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 == i2} function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 == i2} function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 == i2} function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 == i2} function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 == i2} function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 == i2} function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 == i2} function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 == i2} function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 == i2} function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 == i2} function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 != i2} function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 != i2} function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 != i2} function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 != i2} function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 != i2} function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 != i2} function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 != i2} function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 != i2} function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 != i2} function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 != i2} function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 != i2} function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 != i2} function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ule.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ule.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ule.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ule.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ule.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ule.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ule.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ule.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ule.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ule.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ule.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ule.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ult.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ult.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ult.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ult.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ult.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ult.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ult.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ult.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ult.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ult.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ult.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $uge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $uge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $uge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $uge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $uge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $uge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $uge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $uge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $uge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $uge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $uge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $uge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ugt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ugt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ugt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ugt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ugt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ugt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ugt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ugt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ugt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ugt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ugt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sle.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sle.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sle.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sle.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sle.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sle.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sle.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sle.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sle.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sle.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sle.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sle.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $slt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $slt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $slt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $slt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $slt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $slt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $slt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $slt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $slt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $slt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $slt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sgt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sgt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sgt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sgt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sgt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sgt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sgt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sgt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sgt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sgt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sgt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:inline} $trunc.bv128.bv96(i: bv128) returns (bv96) {i[96:0]}
function {:inline} $trunc.bv128.bv88(i: bv128) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv128.bv64(i: bv128) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv128.bv56(i: bv128) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv128.bv48(i: bv128) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv128.bv40(i: bv128) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv128.bv32(i: bv128) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv128.bv24(i: bv128) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv128.bv16(i: bv128) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv128.bv8(i: bv128) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv128.bv1(i: bv128) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv96.bv88(i: bv96) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv96.bv64(i: bv96) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv96.bv56(i: bv96) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv96.bv48(i: bv96) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv96.bv40(i: bv96) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv96.bv32(i: bv96) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv96.bv24(i: bv96) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv96.bv16(i: bv96) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv96.bv8(i: bv96) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv96.bv1(i: bv96) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv88.bv64(i: bv88) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv88.bv56(i: bv88) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv88.bv48(i: bv88) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv88.bv40(i: bv88) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv88.bv32(i: bv88) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv88.bv24(i: bv88) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv88.bv16(i: bv88) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv88.bv8(i: bv88) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv88.bv1(i: bv88) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv64.bv56(i: bv64) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv64.bv48(i: bv64) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv64.bv40(i: bv64) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv64.bv32(i: bv64) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv64.bv24(i: bv64) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv64.bv16(i: bv64) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv64.bv8(i: bv64) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv64.bv1(i: bv64) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv56.bv48(i: bv56) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv56.bv40(i: bv56) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv56.bv32(i: bv56) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv56.bv24(i: bv56) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv56.bv16(i: bv56) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv56.bv8(i: bv56) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv56.bv1(i: bv56) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv48.bv32(i: bv48) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv48.bv24(i: bv48) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv48.bv16(i: bv48) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv48.bv8(i: bv48) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv48.bv1(i: bv48) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv40.bv32(i: bv40) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv40.bv24(i: bv40) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv40.bv16(i: bv40) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv40.bv8(i: bv40) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv40.bv1(i: bv40) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv32.bv24(i: bv32) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv32.bv16(i: bv32) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv32.bv8(i: bv32) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv32.bv1(i: bv32) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv24.bv16(i: bv24) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv24.bv8(i: bv24) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv24.bv1(i: bv24) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv16.bv8(i: bv16) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv16.bv1(i: bv16) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv8.bv1(i: bv8) returns (bv1) {i[1:0]}
function {:inline} $zext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 1bv8}
function {:inline} $zext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 1bv16}
function {:inline} $zext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 1bv24}
function {:inline} $zext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 1bv32}
function {:inline} $zext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1bv40}
function {:inline} $zext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 1bv48}
function {:inline} $zext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 1bv56}
function {:inline} $zext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 1bv64}
function {:inline} $zext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 1bv88}
function {:inline} $zext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 1bv96}
function {:inline} $zext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 1bv128}
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $sext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 255bv8}
function {:inline} $sext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 65535bv16}
function {:inline} $sext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 16777215bv24}
function {:inline} $sext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 4294967295bv32}
function {:inline} $sext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1099511627775bv40}
function {:inline} $sext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 281474976710655bv48}
function {:inline} $sext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 72057594037927935bv56}
function {:inline} $sext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 18446744073709551615bv64}
function {:inline} $sext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88}
function {:inline} $sext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96}
function {:inline} $sext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128}
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) {i1 + i2}
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) {i1 + i2}
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) {i1 + i2}
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) {i1 + i2}
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) {i1 + i2}
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) {i1 + i2}
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) {i1 + i2}
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) {i1 + i2}
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) {i1 + i2}
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) {i1 + i2}
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) {i1 + i2}
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) {i1 + i2}
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) {i1 - i2}
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) {i1 - i2}
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) {i1 - i2}
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) {i1 - i2}
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) {i1 - i2}
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) {i1 - i2}
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) {i1 - i2}
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) {i1 - i2}
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) {i1 - i2}
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) {i1 - i2}
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) {i1 - i2}
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) {i1 - i2}
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) {i1 * i2}
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) {i1 * i2}
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) {i1 * i2}
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) {i1 * i2}
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) {i1 * i2}
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) {i1 * i2}
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) {i1 * i2}
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) {i1 * i2}
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) {i1 * i2}
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) {i1 * i2}
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) {i1 * i2}
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) {i1 * i2}
function {:builtin "div"} $div(i1: int, i2: int) returns (int);
function {:builtin "mod"} $mod(i1: int, i2: int) returns (int);
function {:builtin "rem"} $rem(i1: int, i2: int) returns (int);
function {:inline} $min(i1: int, i2: int) returns (int) {if i1 < i2 then i1 else i2}
function {:inline} $max(i1: int, i2: int) returns (int) {if i1 > i2 then i1 else i2}
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $not.i128(i: i128) returns (i128);
function $not.i96(i: i96) returns (i96);
function $not.i88(i: i88) returns (i88);
function $not.i64(i: i64) returns (i64);
function $not.i56(i: i56) returns (i56);
function $not.i48(i: i48) returns (i48);
function $not.i40(i: i40) returns (i40);
function $not.i32(i: i32) returns (i32);
function $not.i24(i: i24) returns (i24);
function $not.i16(i: i16) returns (i16);
function $not.i8(i: i8) returns (i8);
function $not.i1(i: i1) returns (i1);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) {i1 == i2} function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) {i1 == i2} function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) {i1 == i2} function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) {i1 == i2} function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) {i1 == i2} function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) {i1 == i2} function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) {i1 == i2} function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) {i1 == i2} function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) {i1 == i2} function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) {i1 == i2} function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) {i1 == i2} function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) {i1 == i2} function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) {i1 != i2} function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) {i1 != i2} function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) {i1 != i2} function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) {i1 != i2} function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) {i1 != i2} function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) {i1 != i2} function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) {i1 != i2} function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) {i1 != i2} function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) {i1 != i2} function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) {i1 != i2} function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) {i1 != i2} function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) {i1 != i2} function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
axiom $and.i1(0,0) == 0;
axiom $and.i1(0,1) == 0;
axiom $and.i1(1,0) == 0;
axiom $and.i1(1,1) == 1;
axiom $or.i1(0,0) == 0;
axiom $or.i1(0,1) == 1;
axiom $or.i1(1,0) == 1;
axiom $or.i1(1,1) == 1;
axiom $xor.i1(0,0) == 0;
axiom $xor.i1(0,1) == 1;
axiom $xor.i1(1,0) == 1;
axiom $xor.i1(1,1) == 0;
axiom($and.i32(32, 16) == 0);
function {:inline} $trunc.i128.i96(i: i128) returns (i96) {i}
function {:inline} $trunc.i128.i88(i: i128) returns (i88) {i}
function {:inline} $trunc.i128.i64(i: i128) returns (i64) {i}
function {:inline} $trunc.i128.i56(i: i128) returns (i56) {i}
function {:inline} $trunc.i128.i48(i: i128) returns (i48) {i}
function {:inline} $trunc.i128.i40(i: i128) returns (i40) {i}
function {:inline} $trunc.i128.i32(i: i128) returns (i32) {i}
function {:inline} $trunc.i128.i24(i: i128) returns (i24) {i}
function {:inline} $trunc.i128.i16(i: i128) returns (i16) {i}
function {:inline} $trunc.i128.i8(i: i128) returns (i8) {i}
function {:inline} $trunc.i128.i1(i: i128) returns (i1) {i}
function {:inline} $trunc.i96.i64(i: i96) returns (i64) {i}
function {:inline} $trunc.i96.i88(i: i96) returns (i88) {i}
function {:inline} $trunc.i96.i56(i: i96) returns (i56) {i}
function {:inline} $trunc.i96.i48(i: i96) returns (i48) {i}
function {:inline} $trunc.i96.i40(i: i96) returns (i40) {i}
function {:inline} $trunc.i96.i32(i: i96) returns (i32) {i}
function {:inline} $trunc.i96.i24(i: i96) returns (i24) {i}
function {:inline} $trunc.i96.i16(i: i96) returns (i16) {i}
function {:inline} $trunc.i96.i8(i: i96) returns (i8) {i}
function {:inline} $trunc.i96.i1(i: i96) returns (i1) {i}
function {:inline} $trunc.i88.i64(i: i88) returns (i64) {i}
function {:inline} $trunc.i88.i88(i: i88) returns (i88) {i}
function {:inline} $trunc.i88.i56(i: i88) returns (i56) {i}
function {:inline} $trunc.i88.i48(i: i88) returns (i48) {i}
function {:inline} $trunc.i88.i40(i: i88) returns (i40) {i}
function {:inline} $trunc.i88.i32(i: i88) returns (i32) {i}
function {:inline} $trunc.i88.i24(i: i88) returns (i24) {i}
function {:inline} $trunc.i88.i16(i: i88) returns (i16) {i}
function {:inline} $trunc.i88.i8(i: i88) returns (i8) {i}
function {:inline} $trunc.i88.i1(i: i88) returns (i1) {i}
function {:inline} $trunc.i64.i56(i: i64) returns (i56) {i}
function {:inline} $trunc.i64.i48(i: i64) returns (i48) {i}
function {:inline} $trunc.i64.i40(i: i64) returns (i40) {i}
function {:inline} $trunc.i64.i32(i: i64) returns (i32) {i}
function {:inline} $trunc.i64.i24(i: i64) returns (i24) {i}
function {:inline} $trunc.i64.i16(i: i64) returns (i16) {i}
function {:inline} $trunc.i64.i8(i: i64) returns (i8) {i}
function {:inline} $trunc.i64.i1(i: i64) returns (i1) {i}
function {:inline} $trunc.i56.i48(i: i56) returns (i48) {i}
function {:inline} $trunc.i56.i40(i: i56) returns (i40) {i}
function {:inline} $trunc.i56.i32(i: i56) returns (i32) {i}
function {:inline} $trunc.i56.i24(i: i56) returns (i24) {i}
function {:inline} $trunc.i56.i16(i: i56) returns (i16) {i}
function {:inline} $trunc.i56.i8(i: i56) returns (i8) {i}
function {:inline} $trunc.i56.i1(i: i56) returns (i1) {i}
function {:inline} $trunc.i48.i40(i: i48) returns (i40) {i}
function {:inline} $trunc.i48.i32(i: i48) returns (i32) {i}
function {:inline} $trunc.i48.i24(i: i48) returns (i24) {i}
function {:inline} $trunc.i48.i16(i: i48) returns (i16) {i}
function {:inline} $trunc.i48.i8(i: i48) returns (i8) {i}
function {:inline} $trunc.i48.i1(i: i48) returns (i1) {i}
function {:inline} $trunc.i40.i32(i: i40) returns (i32) {i}
function {:inline} $trunc.i40.i24(i: i40) returns (i24) {i}
function {:inline} $trunc.i40.i16(i: i40) returns (i16) {i}
function {:inline} $trunc.i40.i8(i: i40) returns (i8) {i}
function {:inline} $trunc.i40.i1(i: i40) returns (i1) {i}
function {:inline} $trunc.i32.i24(i: i32) returns (i24) {i}
function {:inline} $trunc.i32.i16(i: i32) returns (i16) {i}
function {:inline} $trunc.i32.i8(i: i32) returns (i8) {i}
function {:inline} $trunc.i32.i1(i: i32) returns (i1) {i}
function {:inline} $trunc.i24.i16(i: i24) returns (i16) {i}
function {:inline} $trunc.i24.i8(i: i24) returns (i8) {i}
function {:inline} $trunc.i24.i1(i: i24) returns (i1) {i}
function {:inline} $trunc.i16.i8(i: i16) returns (i8) {i}
function {:inline} $trunc.i16.i1(i: i16) returns (i1) {i}
function {:inline} $trunc.i8.i1(i: i8) returns (i1) {i}
function {:inline} $zext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $zext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $zext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $zext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $zext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $zext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $zext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $zext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $zext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $zext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $zext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $zext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $zext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $zext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $zext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $zext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $zext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $zext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $zext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $zext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $zext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $zext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $zext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $zext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $zext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $zext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $zext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $zext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $zext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $zext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $zext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $zext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $zext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $zext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $zext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $zext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $zext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $zext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $zext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $zext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $zext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $zext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $zext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $zext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $zext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $zext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $zext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $zext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $zext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $zext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $zext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $zext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $zext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $zext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $zext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $zext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $zext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $zext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $zext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $zext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $zext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $zext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $zext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $zext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $zext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $zext.i96.i128(i: i96) returns (i128) {i}
function {:inline} $sext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $sext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $sext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $sext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $sext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $sext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $sext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $sext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $sext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $sext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $sext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $sext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $sext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $sext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $sext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $sext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $sext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $sext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $sext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $sext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $sext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $sext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $sext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $sext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $sext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $sext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $sext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $sext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $sext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $sext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $sext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $sext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $sext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $sext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $sext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $sext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $sext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $sext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $sext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $sext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $sext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $sext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $sext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $sext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $sext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $sext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $sext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $sext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $sext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $sext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $sext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $sext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $sext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $sext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $sext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $sext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $sext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $sext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $sext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $sext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $sext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $sext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $sext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $sext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $sext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $sext.i96.i128(i: i96) returns (i128) {i}
function $fp(ipart:int, fpart:int, epart:int) returns (float);
function $fadd.float(f1:float, f2:float) returns (float);
function $fsub.float(f1:float, f2:float) returns (float);
function $fmul.float(f1:float, f2:float) returns (float);
function $fdiv.float(f1:float, f2:float) returns (float);
function $frem.float(f1:float, f2:float) returns (float);
function $ffalse.float(f1:float, f2:float) returns (i1);
function $ftrue.float(f1:float, f2:float) returns (i1);
function {:inline} $foeq.float(f1:float, f2:float) returns (i1) { if $foeq.bool(f1,f2) then 1 else 0 }
function $foeq.bool(f1:float, f2:float) returns (bool);
function $foge.float(f1:float, f2:float) returns (i1);
function $fogt.float(f1:float, f2:float) returns (i1);
function $fole.float(f1:float, f2:float) returns (i1);
function $folt.float(f1:float, f2:float) returns (i1);
function $fone.float(f1:float, f2:float) returns (i1);
function $ford.float(f1:float, f2:float) returns (i1);
function $fueq.float(f1:float, f2:float) returns (i1);
function $fuge.float(f1:float, f2:float) returns (i1);
function $fugt.float(f1:float, f2:float) returns (i1);
function $fule.float(f1:float, f2:float) returns (i1);
function $fult.float(f1:float, f2:float) returns (i1);
function $fune.float(f1:float, f2:float) returns (i1);
function $funo.float(f1:float, f2:float) returns (i1);
function $fp2si.float.i128(f:float) returns (i128);
function $fp2ui.float.i128(f:float) returns (i128);
function $si2fp.i128.float(i:i128) returns (float);
function $ui2fp.i128.float(i:i128) returns (float);
function $fp2si.float.i96(f:float) returns (i96);
function $fp2ui.float.i96(f:float) returns (i96);
function $si2fp.i96.float(i:i96) returns (float);
function $ui2fp.i96.float(i:i96) returns (float);
function $fp2si.float.i88(f:float) returns (i88);
function $fp2ui.float.i88(f:float) returns (i88);
function $si2fp.i88.float(i:i88) returns (float);
function $ui2fp.i88.float(i:i88) returns (float);
function $fp2si.float.i64(f:float) returns (i64);
function $fp2ui.float.i64(f:float) returns (i64);
function $si2fp.i64.float(i:i64) returns (float);
function $ui2fp.i64.float(i:i64) returns (float);
function $fp2si.float.i56(f:float) returns (i56);
function $fp2ui.float.i56(f:float) returns (i56);
function $si2fp.i56.float(i:i56) returns (float);
function $ui2fp.i56.float(i:i56) returns (float);
function $fp2si.float.i48(f:float) returns (i48);
function $fp2ui.float.i48(f:float) returns (i48);
function $si2fp.i48.float(i:i48) returns (float);
function $ui2fp.i48.float(i:i48) returns (float);
function $fp2si.float.i40(f:float) returns (i40);
function $fp2ui.float.i40(f:float) returns (i40);
function $si2fp.i40.float(i:i40) returns (float);
function $ui2fp.i40.float(i:i40) returns (float);
function $fp2si.float.i32(f:float) returns (i32);
function $fp2ui.float.i32(f:float) returns (i32);
function $si2fp.i32.float(i:i32) returns (float);
function $ui2fp.i32.float(i:i32) returns (float);
function $fp2si.float.i24(f:float) returns (i24);
function $fp2ui.float.i24(f:float) returns (i24);
function $si2fp.i24.float(i:i24) returns (float);
function $ui2fp.i24.float(i:i24) returns (float);
function $fp2si.float.i16(f:float) returns (i16);
function $fp2ui.float.i16(f:float) returns (i16);
function $si2fp.i16.float(i:i16) returns (float);
function $ui2fp.i16.float(i:i16) returns (float);
function $fp2si.float.i8(f:float) returns (i8);
function $fp2ui.float.i8(f:float) returns (i8);
function $si2fp.i8.float(i:i8) returns (float);
function $ui2fp.i8.float(i:i8) returns (float);
function $fptrunc.float.float(f:float) returns (float);
function $fpext.float.float(f:float) returns (float);
function $fp2si.float.bv128(f:float) returns (bv128);
function $fp2ui.float.bv128(f:float) returns (bv128);
function $si2fp.bv128.float(i:bv128) returns (float);
function $ui2fp.bv128.float(i:bv128) returns (float);
function $fp2si.float.bv96(f:float) returns (bv96);
function $fp2ui.float.bv96(f:float) returns (bv96);
function $si2fp.bv96.float(i:bv96) returns (float);
function $ui2fp.bv96.float(i:bv96) returns (float);
function $fp2si.float.bv88(f:float) returns (bv88);
function $fp2ui.float.bv88(f:float) returns (bv88);
function $si2fp.bv88.float(i:bv88) returns (float);
function $ui2fp.bv88.float(i:bv88) returns (float);
function $fp2si.float.bv64(f:float) returns (bv64);
function $fp2ui.float.bv64(f:float) returns (bv64);
function $si2fp.bv64.float(i:bv64) returns (float);
function $ui2fp.bv64.float(i:bv64) returns (float);
function $fp2si.float.bv56(f:float) returns (bv56);
function $fp2ui.float.bv56(f:float) returns (bv56);
function $si2fp.bv56.float(i:bv56) returns (float);
function $ui2fp.bv56.float(i:bv56) returns (float);
function $fp2si.float.bv48(f:float) returns (bv48);
function $fp2ui.float.bv48(f:float) returns (bv48);
function $si2fp.bv48.float(i:bv48) returns (float);
function $ui2fp.bv48.float(i:bv48) returns (float);
function $fp2si.float.bv40(f:float) returns (bv40);
function $fp2ui.float.bv40(f:float) returns (bv40);
function $si2fp.bv40.float(i:bv40) returns (float);
function $ui2fp.bv40.float(i:bv40) returns (float);
function $fp2si.float.bv32(f:float) returns (bv32);
function $fp2ui.float.bv32(f:float) returns (bv32);
function $si2fp.bv32.float(i:bv32) returns (float);
function $ui2fp.bv32.float(i:bv32) returns (float);
function $fp2si.float.bv24(f:float) returns (bv24);
function $fp2ui.float.bv24(f:float) returns (bv24);
function $si2fp.bv24.float(i:bv24) returns (float);
function $ui2fp.bv24.float(i:bv24) returns (float);
function $fp2si.float.bv16(f:float) returns (bv16);
function $fp2ui.float.bv16(f:float) returns (bv16);
function $si2fp.bv16.float(i:bv16) returns (float);
function $ui2fp.bv16.float(i:bv16) returns (float);
function $fp2si.float.bv8(f:float) returns (bv8);
function $fp2ui.float.bv8(f:float) returns (bv8);
function $si2fp.bv8.float(i:bv8) returns (float);
function $ui2fp.bv8.float(i:bv8) returns (float);
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;
function {:inline} $isExternal(p: ref) returns (bool) {$slt.ref.bool(p,$EXTERNS_BOTTOM)}
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) { M[p] }
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) { M[p] }
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) { M[p] }
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) { M[p] }
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) { M[p] }
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) { M[p] }
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) { M[p] }
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) { M[p] }
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) { M[p] }
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) { M[p] }
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128){ $load.bytes.bv64(M, $add.ref(p, $8.ref)) ++ $load.bytes.bv64(M, p) }
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96){ $load.bytes.bv64(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88){ $load.bytes.bv56(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64){ $load.bytes.bv32(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56){ $load.bytes.bv24(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48){ $load.bytes.bv16(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40){ M[$add.ref(p, $4.ref)] ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32){ M[$add.ref(p, $3.ref)] ++ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24){ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16){ M[$add.ref(p, $1.ref)] ++ M[p] }
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, v: i128) returns ([ref] i128) { M[p := v] }
function {:inline} $store.i96(M: [ref] i96, p: ref, v: i96) returns ([ref] i96) { M[p := v] }
function {:inline} $store.i88(M: [ref] i88, p: ref, v: i88) returns ([ref] i88) { M[p := v] }
function {:inline} $store.i64(M: [ref] i64, p: ref, v: i64) returns ([ref] i64) { M[p := v] }
function {:inline} $store.i56(M: [ref] i56, p: ref, v: i56) returns ([ref] i56) { M[p := v] }
function {:inline} $store.i48(M: [ref] i48, p: ref, v: i48) returns ([ref] i48) { M[p := v] }
function {:inline} $store.i40(M: [ref] i40, p: ref, v: i40) returns ([ref] i40) { M[p := v] }
function {:inline} $store.i32(M: [ref] i32, p: ref, v: i32) returns ([ref] i32) { M[p := v] }
function {:inline} $store.i24(M: [ref] i24, p: ref, v: i24) returns ([ref] i24) { M[p := v] }
function {:inline} $store.i16(M: [ref] i16, p: ref, v: i16) returns ([ref] i16) { M[p := v] }
function {:inline} $store.i8(M: [ref] i8, p: ref, v: i8) returns ([ref] i8) { M[p := v] }
function {:inline} $store.bv128(M: [ref] bv128, p: ref, v: bv128) returns ([ref] bv128) { M[p := v] }
function {:inline} $store.bv96(M: [ref] bv96, p: ref, v: bv96) returns ([ref] bv96) { M[p := v] }
function {:inline} $store.bv88(M: [ref] bv88, p: ref, v: bv88) returns ([ref] bv88) { M[p := v] }
function {:inline} $store.bv64(M: [ref] bv64, p: ref, v: bv64) returns ([ref] bv64) { M[p := v] }
function {:inline} $store.bv56(M: [ref] bv56, p: ref, v: bv56) returns ([ref] bv56) { M[p := v] }
function {:inline} $store.bv48(M: [ref] bv48, p: ref, v: bv48) returns ([ref] bv48) { M[p := v] }
function {:inline} $store.bv40(M: [ref] bv40, p: ref, v: bv40) returns ([ref] bv40) { M[p := v] }
function {:inline} $store.bv32(M: [ref] bv32, p: ref, v: bv32) returns ([ref] bv32) { M[p := v] }
function {:inline} $store.bv24(M: [ref] bv24, p: ref, v: bv24) returns ([ref] bv24) { M[p := v] }
function {:inline} $store.bv16(M: [ref] bv16, p: ref, v: bv16) returns ([ref] bv16) { M[p := v] }
function {:inline} $store.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) { M[p := v] }
function {:inline} $store.bytes.bv128(M:[ref]bv8, p:ref, v:bv128) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]][$add.ref(p, $11.ref) := v[104:96]][$add.ref(p, $12.ref) := v[112:104]][$add.ref(p, $13.ref) := v[120:112]][$add.ref(p, $14.ref) := v[128:120]]}
function {:inline} $store.bytes.bv96(M:[ref]bv8, p:ref, v:bv96) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]]}
function {:inline} $store.bytes.bv88(M:[ref]bv8, p:ref, v:bv88) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]]}
function {:inline} $store.bytes.bv64(M:[ref]bv8, p:ref, v:bv64) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]]}
function {:inline} $store.bytes.bv56(M:[ref]bv8, p:ref, v:bv56) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]]}
function {:inline} $store.bytes.bv48(M:[ref]bv8, p:ref, v:bv48) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]]}
function {:inline} $store.bytes.bv40(M:[ref]bv8, p:ref, v:bv40) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]]}
function {:inline} $store.bytes.bv32(M:[ref]bv8, p:ref, v:bv32) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]]}
function {:inline} $store.bytes.bv24(M:[ref]bv8, p:ref, v:bv24) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]]}
function {:inline} $store.bytes.bv16(M:[ref]bv8, p:ref, v:bv16) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]]}
function {:inline} $store.bytes.bv8(M:[ref]bv8, p:ref, v:bv8) returns ([ref]bv8) {M[p := v]}
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, v: ref) returns ([ref] ref) { M[p := v] }
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, v: float) returns ([ref] float) { M[p := v] }
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
procedure  boogie_si_record_bool(i: bool);
procedure  boogie_si_record_i1(i: i1);
procedure  boogie_si_record_i8(i: i8);
procedure  boogie_si_record_i16(i: i16);
procedure  boogie_si_record_i24(i: i24);
procedure  boogie_si_record_i32(i: i32);
procedure  boogie_si_record_i40(i: i40);
procedure  boogie_si_record_i48(i: i48);
procedure  boogie_si_record_i56(i: i56);
procedure  boogie_si_record_i64(i: i64);
procedure  boogie_si_record_i88(i: i88);
procedure  boogie_si_record_i96(i: i96);
procedure  boogie_si_record_i128(i: i128);
procedure  boogie_si_record_bv1(i: bv1);
procedure  boogie_si_record_bv8(i: bv8);
procedure  boogie_si_record_bv16(i: bv16);
procedure  boogie_si_record_bv24(i: bv24);
procedure  boogie_si_record_bv32(i: bv32);
procedure  boogie_si_record_bv40(i: bv40);
procedure  boogie_si_record_bv48(i: bv48);
procedure  boogie_si_record_bv56(i: bv56);
procedure  boogie_si_record_bv64(i: bv64);
procedure  boogie_si_record_bv88(i: bv88);
procedure  boogie_si_record_bv96(i: bv96);
procedure  boogie_si_record_bv128(i: bv128);
procedure  boogie_si_record_ref(i: ref);
procedure  boogie_si_record_float(i: float);
var $exn: bool;
var $exnv: int;
function $extractvalue(p: int, i: int) returns (int);

procedure  $alloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 90445));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 91477));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1782, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1787, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 92509));
procedure  llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 93541));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := 0;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
  $M.2 := 0;
  call {:cexpr "ldv_spin"} boogie_si_record_i32(0);
  $M.3 := 0;
  $M.4 := 0;
  $M.5 := 0;
  $M.6 := 0;
  $M.7 := 0;
  $M.8 := 0;
  $M.9 := 0;
  $M.1 := $store.i32($M.1, adl_pci7296_pci_table, 5194);
  $M.1 := $store.i32($M.1, $add.ref(adl_pci7296_pci_table, 4), 29334);
  $M.1 := $store.i32($M.1, $add.ref(adl_pci7296_pci_table, 8), $sub.i32(0, 1));
  $M.1 := $store.i32($M.1, $add.ref(adl_pci7296_pci_table, 12), $sub.i32(0, 1));
  $M.1 := $store.i32($M.1, $add.ref(adl_pci7296_pci_table, 16), 0);
  $M.1 := $store.i32($M.1, $add.ref(adl_pci7296_pci_table, 20), 0);
  $M.1 := $store.i64($M.1, $add.ref(adl_pci7296_pci_table, 24), 0);
  $M.1 := $store.i32($M.1, $add.ref(adl_pci7296_pci_table, 32), 0);
  $M.1 := $store.i32($M.1, $add.ref($add.ref(adl_pci7296_pci_table, 32), 4), 0);
  $M.1 := $store.i32($M.1, $add.ref($add.ref(adl_pci7296_pci_table, 32), 8), 0);
  $M.1 := $store.i32($M.1, $add.ref($add.ref(adl_pci7296_pci_table, 32), 12), 0);
  $M.1 := $store.i32($M.1, $add.ref($add.ref(adl_pci7296_pci_table, 32), 16), 0);
  $M.1 := $store.i32($M.1, $add.ref($add.ref(adl_pci7296_pci_table, 32), 20), 0);
  $M.1 := $store.i64($M.1, $add.ref($add.ref(adl_pci7296_pci_table, 32), 24), 0);
  $M.1 := $store.ref($M.1, driver_adl_pci7296_pci_driver, $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296_pci_driver, 8), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296_pci_driver, 16), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296_pci_driver, 24), adl_pci7296_pci_table);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296_pci_driver, 32), driver_adl_pci7296_pci_probe);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296_pci_driver, 40), driver_adl_pci7296_pci_remove);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296_pci_driver, 48), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296_pci_driver, 56), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296_pci_driver, 64), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296_pci_driver, 72), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296_pci_driver, 80), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296_pci_driver, 88), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296_pci_driver, 96), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 96), 8), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 96), 16), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 96), 24), $0.ref);
  $M.1 := $store.i8($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 96), 32), 0);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 96), 40), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 96), 48), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 96), 56), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 96), 64), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 96), 72), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 96), 80), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 96), 88), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 96), 96), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 96), 104), $0.ref);
  $M.1 := $store.i32($M.1, $add.ref(driver_adl_pci7296_pci_driver, 208), 0);
  $M.1 := $store.i32($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 208), 4), 0);
  $M.1 := $store.i32($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 208), 8), 0);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 208), 16), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 208), 24), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(driver_adl_pci7296_pci_driver, 208), 24), 8), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(driver_adl_pci7296_pci_driver, 208), 24), 8), 8), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(driver_adl_pci7296_pci_driver, 208), 24), 24), $0.ref);
  $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(driver_adl_pci7296_pci_driver, 208), 24), 32), 0);
  $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(driver_adl_pci7296_pci_driver, 208), 24), 40), 0);
  $M.1 := $store.ref($M.1, $add.ref($add.ref(driver_adl_pci7296_pci_driver, 208), 72), $0.ref);
  $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(driver_adl_pci7296_pci_driver, 208), 72), 8), $0.ref);
  $M.1 := $store.ref($M.1, driver_adl_pci7296, $0.ref);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296, 8), .str);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296, 16), __this_module);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296, 24), adl_pci7296_attach);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296, 32), adl_pci7296_detach);
  $M.1 := $store.i32($M.1, $add.ref(driver_adl_pci7296, 40), 0);
  $M.1 := $store.ref($M.1, $add.ref(driver_adl_pci7296, 48), $0.ref);
  $M.1 := $store.i32($M.1, $add.ref(driver_adl_pci7296, 56), 0);
  $exn := false;
  return;
}
const $u0: ref;
const $u1: ref;
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
