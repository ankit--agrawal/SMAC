// generated by SMACK version 1.9.0 for corral
// via /mnt/local/smack-project/smack/bin/smack -x=svcomp --time-limit 1800 /proj/SMACK/sv-benchmarks/c/ldv-linux-3.4-simple/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c --bit-precise --verifier-options  /bopt:boolControlVC /bopt:z3opt:SMT.MBQI=false /doNotUseLabels /noInitPruning /nonUniformUnfolding /staticInlining /trackAllVars /noArrayTheory --unroll 16

// Basic types
type i1 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type ref = i64;
type float = bv32;

// Basic constants
const $0: bv32;
axiom ($0 == 0bv32);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $2.ref: ref;
axiom ($2.ref == 2);
const $3.ref: ref;
axiom ($3.ref == 3);
const $4.ref: ref;
axiom ($4.ref == 4);
const $5.ref: ref;
axiom ($5.ref == 5);
const $6.ref: ref;
axiom ($6.ref == 6);
const $7.ref: ref;
axiom ($7.ref == 7);
const $8.ref: ref;
axiom ($8.ref == 8);
const $9.ref: ref;
axiom ($9.ref == 9);
const $10.ref: ref;
axiom ($10.ref == 10);
const $11.ref: ref;
axiom ($11.ref == 11);
const $12.ref: ref;
axiom ($12.ref == 12);
const $13.ref: ref;
axiom ($13.ref == 13);
const $14.ref: ref;
axiom ($14.ref == 14);
const $1024.ref: ref;
axiom ($1024.ref == 1024);

// Memory maps (15 regions)
var $M.0: bv32;
var $M.1: [ref] bv8;
var $M.2: bv32;
var $M.3: bv16;
var $M.4: bv16;
var $M.5: bv16;
var $M.6: bv16;
var $M.7: bv16;
var $M.8: bv8;
var $M.9: bv8;
var $M.10: bv8;
var $M.11: bv8;
var $M.12: bv8;
var $M.13: bv8;
var $M.14: bv64;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 79879));
axiom ($EXTERNS_BOTTOM == $sub.ref(0, 32776));
axiom ($MALLOC_TOP == 9223372036854775807);

// Bitstd::vector-integer conversions
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2int"} $bv2uint.64(i: bv64) returns (i64);
function {:inline} $bv2int.64(i: bv64) returns (i64) { if $slt.bv64.bool(i, 0bv64) then $sub.i64($bv2uint.64(i), 18446744073709551616) else $bv2uint.64(i) }
// Bytewise pointer storage
function {:inline} $load.bytes.ref(M: [ref] bv8, p: ref) returns (ref) { $i2p.bv64.ref($load.bytes.bv64(M, p)) }
function {:inline} $store.bytes.ref(M: [ref] bv8, p: ref, v: ref)returns ([ref] bv8) { $store.bytes.bv64(M,p,$p2i.ref.bv64(v)) }
// Pointer-number conversions
function {:inline} $p2i.ref.bv8(p: ref) returns (bv8) { $trunc.bv64.bv8($int2bv.64(p)) }
function {:inline} $i2p.bv8.ref(i: bv8) returns (ref) { $bv2int.64($zext.bv8.bv64(i)) }
function {:inline} $p2i.ref.bv16(p: ref) returns (bv16) { $trunc.bv64.bv16($int2bv.64(p)) }
function {:inline} $i2p.bv16.ref(i: bv16) returns (ref) { $bv2int.64($zext.bv16.bv64(i)) }
function {:inline} $p2i.ref.bv32(p: ref) returns (bv32) { $trunc.bv64.bv32($int2bv.64(p)) }
function {:inline} $i2p.bv32.ref(i: bv32) returns (ref) { $bv2int.64($zext.bv32.bv64(i)) }
function {:inline} $p2i.ref.bv64(p: ref) returns (bv64) { $int2bv.64(p) }
function {:inline} $i2p.bv64.ref(i: bv64) returns (ref) { $bv2int.64(i) }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (bv1) { if $eq.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (bv1) { if $ne.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (bv1) { if $ugt.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (bv1) { if $uge.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (bv1) { if $ult.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (bv1) { if $ule.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (bv1) { if $sgt.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (bv1) { if $sge.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (bv1) { if $slt.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (bv1) { if $sle.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

const LDV_IN_INTERRUPT: ref;
axiom (LDV_IN_INTERRUPT == $sub.ref(0, 1028));
const ldv_spin: ref;
axiom (ldv_spin == $sub.ref(0, 2056));
const __mod_usb_device_table: ref;
axiom (__mod_usb_device_table == $sub.ref(0, 3104));
const sd_ctrls: ref;
axiom (sd_ctrls == $sub.ref(0, 4136));
const sd_desc: ref;
axiom (sd_desc == $sub.ref(0, 5336));
const vga_mode: ref;
axiom (vga_mode == $sub.ref(0, 6392));
const __this_module: ref;
axiom (__this_module == $sub.ref(0, 32776));
const {:count 29} .str.6: ref;
axiom (.str.6 == $sub.ref(0, 7445));
const .str: ref;
axiom (.str == $sub.ref(0, 8506));
const {:count 42} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 9572));
const {:count 31} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 10627));
const {:count 48} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 11699));
const {:count 41} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 12764));
const {:count 40} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 13828));
const {:count 5} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 14857));
const {:count 14} .str.2.12: ref;
axiom (.str.2.12 == $sub.ref(0, 15895));
const main: ref;
axiom (main == $sub.ref(0, 16927));
procedure {:entrypoint} main()
{
  var $i1: bv32;
  var $i2: bv1;
  var $i3: bv1;
  var $i4: bv1;
  var $i5: bv1;
  var $i6: bv1;
  var $i7: bv1;
  var $i8: bv32;
  var $i10: bv32;
  var $i11: bv32;
  var $i12: bv1;
  var $i13: bv32;
  var $i14: bv1;
  var $i15: bv32;
  var $i9: bv32;
  var $i0: bv32;
  var $i16: bv32;
  var $i17: bv1;
  var $i18: bv1;
$bb0:
  call $initialize();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4316, 20} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4316, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := 1bv32;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_bv32(1bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4317, 3} true;
  assume {:verifier.code 0} true;
  call ldv_initialize();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4319, 3} true;
  assume {:verifier.code 0} true;
  $i0 := 0bv32;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4396, 13} true;
  assume {:verifier.code 1} true;
  call $i16 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i16);
  // WARNING: %53 = call i32 @__VERIFIER_nondet_int(), !dbg !4377, !verifier.code !4303
  call {:cexpr "tmp___0"} boogie_si_record_bv32($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4398, 15} true;
  assume {:verifier.code 0} true;
  $i17 := $ne.bv32($i16, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4398, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb41, $bb42;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4322, 9} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
  // WARNING: %2 = call i32 @__VERIFIER_nondet_int(), !dbg !4301, !verifier.code !4303
  call {:cexpr "tmp"} boogie_si_record_bv32($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4324, 11} true;
  assume {:verifier.code 0} true;
  $i2 := $eq.bv32($i1, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4324, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i2 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4325, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i2 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4327, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.bv32($i1, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4327, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb6, $bb7;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4347, 7} true;
  assume {:verifier.code 0} true;
  call $i8 := sd_config($u0, $u1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4349, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $i0;
  goto $bb25;
$bb6:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4328, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !(($i3 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4330, 11} true;
  assume {:verifier.code 0} true;
  $i4 := $eq.bv32($i1, 2bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4330, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb9, $bb10;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4352, 7} true;
  assume {:verifier.code 0} true;
  call $i10 := sd_init($u0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4354, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $i0;
  goto $bb25;
$bb9:
  assume ($i4 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4331, 5} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb10:
  assume !(($i4 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4333, 11} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.bv32($i1, 3bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4333, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb12, $bb13;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4357, 7} true;
  assume {:verifier.code 0} true;
  call $i11 := sd_start($u0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4359, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $i0;
  goto $bb25;
$bb12:
  assume ($i5 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4334, 5} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb13:
  assume !(($i5 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4336, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.bv32($i1, 4bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4336, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb15, $bb16;
$bb14:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4362, 7} true;
  assume {:verifier.code 0} true;
  call sd_stopN($u0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4364, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $i0;
  goto $bb25;
$bb15:
  assume ($i6 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4337, 5} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume !(($i6 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4339, 11} true;
  assume {:verifier.code 0} true;
  $i7 := $eq.bv32($i1, 5bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4339, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb18, $bb19;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4367, 7} true;
  assume {:verifier.code 0} true;
  call sd_pkt_scan($u0, $u2, $u3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4369, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $i0;
  goto $bb25;
$bb18:
  assume ($i7 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4340, 5} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb19:
  assume !(($i7 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4343, 5} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4371, 38} true;
  assume {:verifier.code 0} true;
  $i12 := $eq.bv32($i0, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4371, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb26, $bb27;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4387, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $i0;
  goto $bb25;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4344, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0bv1} true;
  goto $bb23, $bb24;
$bb23:
  assume (0bv1 == 1bv1);
  assume {:verifier.code 0} true;
  assume false;
$bb24:
  assume !((0bv1 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4388, 12} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb25:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4324, 14} true;
  assume {:verifier.code 0} true;
  $i0 := $i9;
  goto $bb1;
$bb26:
  assume ($i12 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4373, 26} true;
  assume {:verifier.code 0} true;
  call $i13 := sd_probe($u4, $u1);
  // WARNING: %34 = call i32 @sd_probe(%struct.usb_interface* undef, %struct.usb_device_id* undef), !dbg !4360, !verifier.code !4295
  call {:cexpr "res_sd_probe_7"} boogie_si_record_bv32($i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4374, 9} true;
  assume {:verifier.code 0} true;
  call ldv_check_return_value($i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4376, 28} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.bv32($i13, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4376, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb28, $bb29;
$bb27:
  assume !(($i12 == 1bv1));
  assume {:verifier.code 0} true;
  $i15 := $i0;
  goto $bb32;
$bb28:
  assume ($i14 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4377, 11} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb29:
  assume !(($i14 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb31;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4409, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_final_state();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4411, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb31:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4382, 7} true;
  assume {:verifier.code 0} true;
  $i15 := 0bv32;
  goto $bb32;
$bb32:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4385, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $i15;
  goto $bb25;
$bb33:
  assume {:verifier.code 0} true;
  goto $bb34;
$bb34:
  assume {:verifier.code 0} true;
  goto $bb35;
$bb35:
  assume {:verifier.code 0} true;
  goto $bb36;
$bb36:
  assume {:verifier.code 0} true;
  goto $bb37;
$bb37:
  assume {:verifier.code 0} true;
  goto $bb38;
$bb38:
  assume {:verifier.code 0} true;
  goto $bb39;
$bb39:
  assume {:verifier.code 0} true;
  goto $bb40;
$bb40:
  assume {:verifier.code 0} true;
  assume false;
$bb41:
  assume ($i17 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4399, 5} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb42:
  assume !(($i17 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4401, 34} true;
  assume {:verifier.code 0} true;
  $i18 := $ne.bv32($i0, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4401, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb43, $bb44;
$bb43:
  assume ($i18 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4402, 5} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb44:
  assume !(($i18 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4404, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb45:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4398, 18} true;
  assume {:verifier.code 0} true;
  goto $bb30;
}
const ldv_initialize: ref;
axiom (ldv_initialize == $sub.ref(0, 17959));
procedure  ldv_initialize();
const sd_config: ref;
axiom (sd_config == $sub.ref(0, 18991));
procedure  sd_config($p0: ref, $p1: ref)
  returns ($r: bv32)
{
  var $i2: bv64;
  var $i3: bv64;
  var $p4: ref;
  var $i5: bv64;
  var $i6: bv64;
  var $p7: ref;
  var $i8: bv64;
  var $i9: bv64;
  var $p10: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3561, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.bv64($p0);
  // WARNING: %3 = ptrtoint %struct.gspca_dev* %0 to i64, !dbg !4298, !verifier.code !4295
  call {:cexpr "__cil_tmp3"} boogie_si_record_bv64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3562, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $add.bv64($i2, 1624bv64);
  // WARNING: %4 = add i64 %3, 1624, !dbg !4302, !verifier.code !4295
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3563, 5} true;
  assume {:verifier.code 0} true;
  $p4 := $i2p.bv64.ref($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3563, 52} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.ref($M.1, $p4, vga_mode);
  // WARNING: store %struct.v4l2_pix_format* getelementptr inbounds ([1 x %struct.v4l2_pix_format], [1 x %struct.v4l2_pix_format]* @vga_mode, i32 0, i32 0), %struct.v4l2_pix_format** %5, align 8, !dbg !4306, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3565, 16} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.bv64($p0);
  // WARNING: %6 = ptrtoint %struct.gspca_dev* %0 to i64, !dbg !4309, !verifier.code !4295
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv64($i5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3566, 27} true;
  assume {:verifier.code 0} true;
  $i6 := $add.bv64($i5, 1656bv64);
  // WARNING: %7 = add i64 %6, 1656, !dbg !4312, !verifier.code !4295
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv64($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3567, 5} true;
  assume {:verifier.code 0} true;
  $p7 := $i2p.bv64.ref($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3567, 23} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv8($M.1, $p7, 1bv8);
  // WARNING: store i8 1, i8* %8, align 1, !dbg !4316, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3569, 16} true;
  assume {:verifier.code 0} true;
  $i8 := $p2i.ref.bv64($p0);
  // WARNING: %9 = ptrtoint %struct.gspca_dev* %0 to i64, !dbg !4319, !verifier.code !4295
  call {:cexpr "__cil_tmp9"} boogie_si_record_bv64($i8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3570, 28} true;
  assume {:verifier.code 0} true;
  $i9 := $add.bv64($i8, 1657bv64);
  // WARNING: %10 = add i64 %9, 1657, !dbg !4322, !verifier.code !4295
  call {:cexpr "__cil_tmp10"} boogie_si_record_bv64($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3571, 5} true;
  assume {:verifier.code 0} true;
  $p10 := $i2p.bv64.ref($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3571, 24} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv8($M.1, $p10, 1bv8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3572, 3} true;
  assume {:verifier.code 0} true;
  $r := 0bv32;
  $exn := false;
  return;
}
const sd_init: ref;
axiom (sd_init == $sub.ref(0, 20023));
procedure  sd_init($p0: ref)
  returns ($r: bv32)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3579, 3} true;
  assume {:verifier.code 0} true;
  $r := 0bv32;
  $exn := false;
  return;
}
const sd_start: ref;
axiom (sd_start == $sub.ref(0, 21055));
procedure  sd_start($p0: ref)
  returns ($r: bv32)
{
  var $p2: ref;
  var $i3: bv64;
  var $i4: bv64;
  var $i5: bv1;
  var $i6: bv32;
  var $i8: bv64;
  var $i9: bv64;
  var $i10: bv64;
  var $i11: bv64;
  var $i12: bv64;
  var $p13: ref;
  var $i14: bv64;
  var $i15: bv64;
  var $i16: bv64;
  var $i17: bv64;
  var $p18: ref;
  var $p19: ref;
  var $i20: bv64;
  var $i21: bv64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: bv64;
  var $i26: bv64;
  var $i27: bv64;
  var $p28: ref;
  var $p29: ref;
  var $i30: bv64;
  var $i31: bv1;
  var $i32: bv32;
  var $i33: bv64;
  var $i34: bv64;
  var $i35: bv64;
  var $i36: bv64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: bv64;
  var $i41: bv64;
  var $p42: ref;
  var $p43: ref;
  var $i44: bv64;
  var $i45: bv64;
  var $p46: ref;
  var $i47: bv32;
  var $i48: bv1;
  var $i49: bv32;
  var $i50: bv64;
  var $i51: bv64;
  var $p52: ref;
  var $p53: ref;
  var $i54: bv32;
  var $i55: bv64;
  var $i56: bv64;
  var $i57: bv32;
  var $p58: ref;
  var $i59: bv64;
  var $i60: bv64;
  var $p61: ref;
  var $i62: bv64;
  var $i63: bv64;
  var $p64: ref;
  var $i65: bv64;
  var $i66: bv64;
  var $p67: ref;
  var $i68: bv64;
  var $i69: bv64;
  var $p70: ref;
  var $i71: bv64;
  var $i72: bv64;
  var $p73: ref;
  var $i74: bv64;
  var $i75: bv64;
  var $p76: ref;
  var $i77: bv32;
  var $i78: bv1;
  var $i1: bv32;
  var $i79: bv64;
  var $i80: bv64;
  var $p81: ref;
  var $i82: bv32;
  var $i7: bv32;
  var $i83: bv64;
  var $i84: bv64;
  var $p85: ref;
  var $i86: bv64;
  var $i87: bv64;
  var $p88: ref;
  var $i89: bv64;
  var $i90: bv64;
  var $p91: ref;
  var $i92: bv64;
  var $i93: bv64;
  var $p94: ref;
  var $i95: bv64;
  var $i96: bv64;
  var $p97: ref;
  var $i98: bv64;
  var $i99: bv64;
  var $p100: ref;
  var $i101: bv64;
  var $i102: bv64;
  var $p103: ref;
  var $i104: bv64;
  var $i105: bv64;
  var $p106: ref;
  var $i107: bv64;
  var $i108: bv64;
  var $p109: ref;
  var $i110: bv64;
  var $i111: bv64;
  var $p112: ref;
  var $i113: bv64;
  var $i114: bv64;
  var $p115: ref;
  var $i116: bv64;
  var $i117: bv64;
  var $p118: ref;
  var $i119: bv64;
  var $i120: bv64;
  var $p121: ref;
  var $i122: bv64;
  var $i123: bv64;
  var $p124: ref;
  var $i125: bv64;
  var $i126: bv64;
  var $p127: ref;
  var $i128: bv64;
  var $i129: bv64;
  var $p130: ref;
  var $i131: bv64;
  var $i132: bv64;
  var $p133: ref;
  var $i134: bv64;
  var $i135: bv64;
  var $p136: ref;
  var $i137: bv64;
  var $i138: bv64;
  var $p139: ref;
  var $i140: bv64;
  var $i141: bv64;
  var $p142: ref;
  var $i143: bv64;
  var $i144: bv64;
  var $p145: ref;
  var $i146: bv64;
  var $i147: bv64;
  var $p148: ref;
  var $i149: bv64;
  var $i150: bv64;
  var $p151: ref;
  var $i152: bv64;
  var $i153: bv64;
  var $p154: ref;
  var $i155: bv64;
  var $i156: bv64;
  var $p157: ref;
  var $i158: bv64;
  var $i159: bv64;
  var $p160: ref;
  var $i161: bv64;
  var $i162: bv64;
  var $p163: ref;
  var $i164: bv64;
  var $i165: bv64;
  var $p166: ref;
  var $i167: bv64;
  var $i168: bv64;
  var $p169: ref;
  var $i170: bv64;
  var $i171: bv64;
  var $p172: ref;
  var $i173: bv64;
  var $i174: bv64;
  var $p175: ref;
  var $i176: bv64;
  var $i177: bv64;
  var $p178: ref;
  var $i179: bv64;
  var $i180: bv64;
  var $p181: ref;
  var $i182: bv64;
  var $i183: bv64;
  var $p184: ref;
  var $i185: bv64;
  var $i186: bv64;
  var $p187: ref;
  var $i188: bv64;
  var $i189: bv64;
  var $p190: ref;
  var $i191: bv64;
  var $i192: bv64;
  var $p193: ref;
  var $i194: bv64;
  var $i195: bv64;
  var $p196: ref;
  var $i197: bv64;
  var $i198: bv64;
  var $p199: ref;
  var $i200: bv64;
  var $i201: bv64;
  var $p202: ref;
  var $i203: bv64;
  var $i204: bv64;
  var $p205: ref;
  var $i206: bv64;
  var $i207: bv64;
  var $p208: ref;
  var $i209: bv64;
  var $i210: bv64;
  var $p211: ref;
  var $i212: bv64;
  var $i213: bv64;
  var $p214: ref;
  var $i215: bv64;
  var $i216: bv64;
  var $p217: ref;
  var $i218: bv64;
  var $i219: bv64;
  var $p220: ref;
  var $i221: bv64;
  var $i222: bv64;
  var $p223: ref;
  var $i224: bv64;
  var $i225: bv64;
  var $p226: ref;
  var $i227: bv64;
  var $i228: bv64;
  var $p229: ref;
  var $i230: bv64;
  var $i231: bv64;
  var $p232: ref;
  var $i233: bv64;
  var $i234: bv64;
  var $p235: ref;
  var $i236: bv64;
  var $i237: bv64;
  var $p238: ref;
  var $i239: bv64;
  var $i240: bv64;
  var $p241: ref;
  var $i242: bv64;
  var $i243: bv64;
  var $p244: ref;
  var $i245: bv64;
  var $i246: bv64;
  var $p247: ref;
  var $i248: bv64;
  var $i249: bv64;
  var $p250: ref;
  var $i251: bv64;
  var $i252: bv64;
  var $p253: ref;
  var $i254: bv64;
  var $i255: bv64;
  var $p256: ref;
  var $i257: bv64;
  var $i258: bv64;
  var $p259: ref;
  var $i260: bv64;
  var $i261: bv64;
  var $p262: ref;
  var $i263: bv64;
  var $i264: bv64;
  var $p265: ref;
  var $i266: bv64;
  var $i267: bv64;
  var $p268: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.gspca_dev* %0, i64 0, metadata !4439, metadata !4293), !dbg !4440, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3757, 7} true;
  assume {:verifier.code 0} true;
  $i1 := 0bv32;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3758, 5} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3648, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := ldv_usb_alloc_urb_19(32bv32, 208bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3652, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.bv64($0.ref);
  // WARNING: %4 = ptrtoint %struct.urb* null to i64, !dbg !4306, !verifier.code !4295
  call {:cexpr "__cil_tmp8"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3653, 16} true;
  assume {:verifier.code 0} true;
  $i4 := $p2i.ref.bv64($p2);
  // WARNING: %5 = ptrtoint %struct.urb* %3 to i64, !dbg !4310, !verifier.code !4295
  call {:cexpr "__cil_tmp9"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3654, 18} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.bv64($i4, $i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3654, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i5 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3656, 5} true;
  assume {:verifier.code 0} true;
  call $i6 := printk.ref(.str);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3658, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.bv32(0bv32, 12bv32);
  goto $bb5;
$bb4:
  assume !(($i5 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3769, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3664, 17} true;
  assume {:verifier.code 0} true;
  $i8 := $sext.bv32.bv64($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3664, 19} true;
  assume {:verifier.code 0} true;
  $i9 := $mul.bv64($i8, 8bv64);
  // WARNING: %12 = mul i64 %11, 8, !dbg !4322, !verifier.code !4295
  call {:cexpr "__cil_tmp10"} boogie_si_record_bv64($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3665, 22} true;
  assume {:verifier.code 0} true;
  $i10 := $add.bv64(1688bv64, $i9);
  // WARNING: %13 = add i64 1688, %12, !dbg !4325, !verifier.code !4295
  call {:cexpr "__cil_tmp11"} boogie_si_record_bv64($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3666, 17} true;
  assume {:verifier.code 0} true;
  $i11 := $p2i.ref.bv64($p0);
  // WARNING: %14 = ptrtoint %struct.gspca_dev* %0 to i64, !dbg !4328, !verifier.code !4295
  call {:cexpr "__cil_tmp12"} boogie_si_record_bv64($i11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3667, 29} true;
  assume {:verifier.code 0} true;
  $i12 := $add.bv64($i11, $i10);
  // WARNING: %15 = add i64 %14, %13, !dbg !4331, !verifier.code !4295
  call {:cexpr "__cil_tmp13"} boogie_si_record_bv64($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3668, 5} true;
  assume {:verifier.code 0} true;
  $p13 := $i2p.bv64.ref($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3668, 33} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.ref($M.1, $p13, $p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3669, 17} true;
  assume {:verifier.code 0} true;
  $i14 := $p2i.ref.bv64($p2);
  // WARNING: %17 = ptrtoint %struct.urb* %3 to i64, !dbg !4336, !verifier.code !4295
  call {:cexpr "__cil_tmp14"} boogie_si_record_bv64($i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3670, 29} true;
  assume {:verifier.code 0} true;
  $i15 := $add.bv64($i14, 104bv64);
  // WARNING: %18 = add i64 %17, 104, !dbg !4339, !verifier.code !4295
  call {:cexpr "__cil_tmp15"} boogie_si_record_bv64($i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3671, 17} true;
  assume {:verifier.code 0} true;
  $i16 := $p2i.ref.bv64($p0);
  // WARNING: %19 = ptrtoint %struct.gspca_dev* %0 to i64, !dbg !4342, !verifier.code !4295
  call {:cexpr "__cil_tmp16"} boogie_si_record_bv64($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3672, 29} true;
  assume {:verifier.code 0} true;
  $i17 := $add.bv64($i16, 1536bv64);
  // WARNING: %20 = add i64 %19, 1536, !dbg !4345, !verifier.code !4295
  call {:cexpr "__cil_tmp17"} boogie_si_record_bv64($i17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3673, 19} true;
  assume {:verifier.code 0} true;
  $p18 := $i2p.bv64.ref($i17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3673, 17} true;
  assume {:verifier.code 0} true;
  $p19 := $load.bytes.ref($M.1, $p18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3674, 17} true;
  assume {:verifier.code 0} true;
  $i20 := $p2i.ref.bv64($p2);
  // WARNING: %23 = ptrtoint %struct.urb* %3 to i64, !dbg !4352, !verifier.code !4295
  call {:cexpr "__cil_tmp19"} boogie_si_record_bv64($i20);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3675, 29} true;
  assume {:verifier.code 0} true;
  $i21 := $add.bv64($i20, 112bv64);
  // WARNING: %24 = add i64 %23, 112, !dbg !4355, !verifier.code !4295
  call {:cexpr "__cil_tmp20"} boogie_si_record_bv64($i21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3676, 17} true;
  assume {:verifier.code 0} true;
  $p22 := $i2p.bv64.ref($i21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3677, 29} true;
  assume {:verifier.code 0} true;
  call $p23 := ldv_usb_alloc_coherent_20($p19, 2048bv64, 208bv32, $p22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3677, 5} true;
  assume {:verifier.code 0} true;
  $p24 := $i2p.bv64.ref($i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3677, 27} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.ref($M.1, $p24, $p23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3681, 17} true;
  assume {:verifier.code 0} true;
  $i25 := $p2i.ref.bv64($0.ref);
  // WARNING: %28 = ptrtoint i8* null to i64, !dbg !4366, !verifier.code !4295
  call {:cexpr "__cil_tmp23"} boogie_si_record_bv64($i25);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3682, 17} true;
  assume {:verifier.code 0} true;
  $i26 := $p2i.ref.bv64($p2);
  // WARNING: %29 = ptrtoint %struct.urb* %3 to i64, !dbg !4370, !verifier.code !4295
  call {:cexpr "__cil_tmp24"} boogie_si_record_bv64($i26);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3683, 29} true;
  assume {:verifier.code 0} true;
  $i27 := $add.bv64($i26, 104bv64);
  // WARNING: %30 = add i64 %29, 104, !dbg !4373, !verifier.code !4295
  call {:cexpr "__cil_tmp25"} boogie_si_record_bv64($i27);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3684, 19} true;
  assume {:verifier.code 0} true;
  $p28 := $i2p.bv64.ref($i27);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3684, 17} true;
  assume {:verifier.code 0} true;
  $p29 := $load.bytes.ref($M.1, $p28);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3685, 17} true;
  assume {:verifier.code 0} true;
  $i30 := $p2i.ref.bv64($p29);
  // WARNING: %33 = ptrtoint i8* %32 to i64, !dbg !4380, !verifier.code !4295
  call {:cexpr "__cil_tmp27"} boogie_si_record_bv64($i30);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3686, 19} true;
  assume {:verifier.code 0} true;
  $i31 := $eq.bv64($i30, $i25);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3686, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i31 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3688, 5} true;
  assume {:verifier.code 0} true;
  call $i32 := printk.ref(.str.1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3690, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.bv32(0bv32, 12bv32);
  goto $bb5;
$bb8:
  assume !(($i31 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3695, 17} true;
  assume {:verifier.code 0} true;
  $i33 := $p2i.ref.bv64($p2);
  // WARNING: %39 = ptrtoint %struct.urb* %3 to i64, !dbg !4390, !verifier.code !4295
  call {:cexpr "__cil_tmp28"} boogie_si_record_bv64($i33);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3696, 29} true;
  assume {:verifier.code 0} true;
  $i34 := $add.bv64($i33, 72bv64);
  // WARNING: %40 = add i64 %39, 72, !dbg !4393, !verifier.code !4295
  call {:cexpr "__cil_tmp29"} boogie_si_record_bv64($i34);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3697, 17} true;
  assume {:verifier.code 0} true;
  $i35 := $p2i.ref.bv64($p0);
  // WARNING: %41 = ptrtoint %struct.gspca_dev* %0 to i64, !dbg !4396, !verifier.code !4295
  call {:cexpr "__cil_tmp30"} boogie_si_record_bv64($i35);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3698, 29} true;
  assume {:verifier.code 0} true;
  $i36 := $add.bv64($i35, 1536bv64);
  // WARNING: %42 = add i64 %41, 1536, !dbg !4399, !verifier.code !4295
  call {:cexpr "__cil_tmp31"} boogie_si_record_bv64($i36);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3699, 44} true;
  assume {:verifier.code 0} true;
  $p37 := $i2p.bv64.ref($i36);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3699, 42} true;
  assume {:verifier.code 0} true;
  $p38 := $load.bytes.ref($M.1, $p37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3699, 5} true;
  assume {:verifier.code 0} true;
  $p39 := $i2p.bv64.ref($i34);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3699, 40} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.ref($M.1, $p39, $p38);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3700, 17} true;
  assume {:verifier.code 0} true;
  $i40 := $p2i.ref.bv64($p2);
  // WARNING: %46 = ptrtoint %struct.urb* %3 to i64, !dbg !4406, !verifier.code !4295
  call {:cexpr "__cil_tmp32"} boogie_si_record_bv64($i40);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3701, 29} true;
  assume {:verifier.code 0} true;
  $i41 := $add.bv64($i40, 176bv64);
  // WARNING: %47 = add i64 %46, 176, !dbg !4409, !verifier.code !4295
  call {:cexpr "__cil_tmp33"} boogie_si_record_bv64($i41);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3702, 29} true;
  assume {:verifier.code 0} true;
  $p42 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3702, 5} true;
  assume {:verifier.code 0} true;
  $p43 := $i2p.bv64.ref($i41);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3702, 27} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.ref($M.1, $p43, $p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3703, 17} true;
  assume {:verifier.code 0} true;
  $i44 := $p2i.ref.bv64($p2);
  // WARNING: %50 = ptrtoint %struct.urb* %3 to i64, !dbg !4415, !verifier.code !4295
  call {:cexpr "__cil_tmp34"} boogie_si_record_bv64($i44);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3704, 29} true;
  assume {:verifier.code 0} true;
  $i45 := $add.bv64($i44, 136bv64);
  // WARNING: %51 = add i64 %50, 136, !dbg !4418, !verifier.code !4295
  call {:cexpr "__cil_tmp35"} boogie_si_record_bv64($i45);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3705, 5} true;
  assume {:verifier.code 0} true;
  $p46 := $i2p.bv64.ref($i45);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3705, 25} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p46, 2048bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3706, 9} true;
  assume {:verifier.code 0} true;
  $i47 := $and.bv32($i1, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3706, 9} true;
  assume {:verifier.code 0} true;
  $i48 := $ne.bv32($i47, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3706, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i48} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i48 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3708, 3} true;
  assume {:verifier.code 0} true;
  $i49 := 130bv32;
  goto $bb12;
$bb11:
  assume !(($i48 == 1bv1));
  assume {:verifier.code 0} true;
  $i49 := 131bv32;
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3712, 17} true;
  assume {:verifier.code 0} true;
  $i50 := $p2i.ref.bv64($p0);
  // WARNING: %58 = ptrtoint %struct.gspca_dev* %0 to i64, !dbg !4430, !verifier.code !4295
  call {:cexpr "__cil_tmp36"} boogie_si_record_bv64($i50);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3713, 29} true;
  assume {:verifier.code 0} true;
  $i51 := $add.bv64($i50, 1536bv64);
  // WARNING: %59 = add i64 %58, 1536, !dbg !4434, !verifier.code !4295
  call {:cexpr "__cil_tmp37"} boogie_si_record_bv64($i51);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3714, 19} true;
  assume {:verifier.code 0} true;
  $p52 := $i2p.bv64.ref($i51);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3714, 17} true;
  assume {:verifier.code 0} true;
  $p53 := $load.bytes.ref($M.1, $p52);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3715, 13} true;
  assume {:verifier.code 0} true;
  call $i54 := __create_pipe($p53, $i49);
  // WARNING: %62 = call i32 @__create_pipe(%struct.usb_device* %61, i32 %.01), !dbg !4441, !verifier.code !4295
  call {:cexpr "tmp___0"} boogie_si_record_bv32($i54);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3716, 17} true;
  assume {:verifier.code 0} true;
  $i55 := $p2i.ref.bv64($p2);
  // WARNING: %63 = ptrtoint %struct.urb* %3 to i64, !dbg !4444, !verifier.code !4295
  call {:cexpr "__cil_tmp39"} boogie_si_record_bv64($i55);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3717, 29} true;
  assume {:verifier.code 0} true;
  $i56 := $add.bv64($i55, 88bv64);
  // WARNING: %64 = add i64 %63, 88, !dbg !4447, !verifier.code !4295
  call {:cexpr "__cil_tmp40"} boogie_si_record_bv64($i56);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3718, 44} true;
  assume {:verifier.code 0} true;
  $i57 := $or.bv32($i54, 128bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3718, 5} true;
  assume {:verifier.code 0} true;
  $p58 := $i2p.bv64.ref($i56);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3718, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p58, $i57);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3719, 17} true;
  assume {:verifier.code 0} true;
  $i59 := $p2i.ref.bv64($p2);
  // WARNING: %67 = ptrtoint %struct.urb* %3 to i64, !dbg !4453, !verifier.code !4295
  call {:cexpr "__cil_tmp41"} boogie_si_record_bv64($i59);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3720, 29} true;
  assume {:verifier.code 0} true;
  $i60 := $add.bv64($i59, 100bv64);
  // WARNING: %68 = add i64 %67, 100, !dbg !4456, !verifier.code !4295
  call {:cexpr "__cil_tmp42"} boogie_si_record_bv64($i60);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3721, 5} true;
  assume {:verifier.code 0} true;
  $p61 := $i2p.bv64.ref($i60);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3721, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p61, 6bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3722, 17} true;
  assume {:verifier.code 0} true;
  $i62 := $p2i.ref.bv64($p2);
  // WARNING: %70 = ptrtoint %struct.urb* %3 to i64, !dbg !4461, !verifier.code !4295
  call {:cexpr "__cil_tmp43"} boogie_si_record_bv64($i62);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3723, 29} true;
  assume {:verifier.code 0} true;
  $i63 := $add.bv64($i62, 168bv64);
  // WARNING: %71 = add i64 %70, 168, !dbg !4464, !verifier.code !4295
  call {:cexpr "__cil_tmp44"} boogie_si_record_bv64($i63);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3724, 5} true;
  assume {:verifier.code 0} true;
  $p64 := $i2p.bv64.ref($i63);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3724, 25} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p64, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3725, 17} true;
  assume {:verifier.code 0} true;
  $i65 := $p2i.ref.bv64($p2);
  // WARNING: %73 = ptrtoint %struct.urb* %3 to i64, !dbg !4469, !verifier.code !4295
  call {:cexpr "__cil_tmp45"} boogie_si_record_bv64($i65);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3726, 29} true;
  assume {:verifier.code 0} true;
  $i66 := $add.bv64($i65, 184bv64);
  // WARNING: %74 = add i64 %73, 184, !dbg !4472, !verifier.code !4295
  call {:cexpr "__cil_tmp46"} boogie_si_record_bv64($i66);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3727, 5} true;
  assume {:verifier.code 0} true;
  $p67 := $i2p.bv64.ref($i66);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3727, 44} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.ref($M.1, $p67, sd_isoc_irq);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3728, 17} true;
  assume {:verifier.code 0} true;
  $i68 := $p2i.ref.bv64($p2);
  // WARNING: %76 = ptrtoint %struct.urb* %3 to i64, !dbg !4477, !verifier.code !4295
  call {:cexpr "__cil_tmp47"} boogie_si_record_bv64($i68);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3729, 29} true;
  assume {:verifier.code 0} true;
  $i69 := $add.bv64($i68, 164bv64);
  // WARNING: %77 = add i64 %76, 164, !dbg !4480, !verifier.code !4295
  call {:cexpr "__cil_tmp48"} boogie_si_record_bv64($i69);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3730, 5} true;
  assume {:verifier.code 0} true;
  $p70 := $i2p.bv64.ref($i69);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3730, 25} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p70, 32bv32);
  // WARNING: store i32 32, i32* %78, align 4, !dbg !4484, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3749, 7} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb14:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i71 := $p2i.ref.bv64($p2);
  // WARNING: %80 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  call {:cexpr "__cil_tmp52"} boogie_si_record_bv64($i71);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i72 := $add.bv64($i71, 196bv64);
  // WARNING: %81 = add i64 %80, 196, !dbg !4497, !verifier.code !4295
  call {:cexpr "__cil_tmp53"} boogie_si_record_bv64($i72);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p73 := $i2p.bv64.ref($i72);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p73, 64bv32);
  // WARNING: store i32 64, i32* %82, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i74 := $p2i.ref.bv64($p2);
  // WARNING: %83 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  call {:cexpr "__cil_tmp56"} boogie_si_record_bv64($i74);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i75 := $add.bv64($i74, 192bv64);
  // WARNING: %84 = add i64 %83, 192, !dbg !4509, !verifier.code !4295
  call {:cexpr "__cil_tmp57"} boogie_si_record_bv64($i75);
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p76 := $i2p.bv64.ref($i75);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p76, 0bv32);
  // WARNING: store i32 0, i32* %85, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i83 := $p2i.ref.bv64($p2);
  // WARNING: %99 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i84 := $add.bv64($i83, 212bv64);
  // WARNING: %100 = add i64 %99, 212, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p85 := $i2p.bv64.ref($i84);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p85, 64bv32);
  // WARNING: store i32 64, i32* %101, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i86 := $p2i.ref.bv64($p2);
  // WARNING: %102 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i87 := $add.bv64($i86, 208bv64);
  // WARNING: %103 = add i64 %102, 208, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p88 := $i2p.bv64.ref($i87);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p88, 64bv32);
  // WARNING: store i32 64, i32* %104, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3755, 9} true;
  assume {:verifier.code 0} true;
  $i77 := $add.bv32($i1, 1bv32);
  // WARNING: %88 = add nsw i32 %.025, 1, !dbg !4519, !verifier.code !4295
  call {:cexpr "n"} boogie_si_record_bv32($i77);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3757, 9} true;
  assume {:verifier.code 0} true;
  $i78 := $sle.bv32($i77, 3bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3757, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $i77;
  assume {:branchcond $i78} true;
  goto $bb17, $bb18;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3757, 7} true;
  assume {:verifier.code 0} true;
  assume ($i78 == 1bv1);
  goto $bb1;
$bb18:
  assume !(($i78 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3760, 5} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3764, 17} true;
  assume {:verifier.code 0} true;
  $i79 := $p2i.ref.bv64($p0);
  // WARNING: %93 = ptrtoint %struct.gspca_dev* %0 to i64, !dbg !4526, !verifier.code !4295
  call {:cexpr "__cil_tmp59"} boogie_si_record_bv64($i79);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3765, 29} true;
  assume {:verifier.code 0} true;
  $i80 := $add.bv64($i79, 3888bv64);
  // WARNING: %94 = add i64 %93, 3888, !dbg !4530, !verifier.code !4295
  call {:cexpr "__cil_tmp60"} boogie_si_record_bv64($i80);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3766, 13} true;
  assume {:verifier.code 0} true;
  $p81 := $i2p.bv64.ref($i80);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3766, 11} true;
  assume {:verifier.code 0} true;
  $i82 := $load.bytes.bv32($M.1, $p81);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3766, 3} true;
  assume {:verifier.code 0} true;
  $i7 := $i82;
  goto $bb5;
$bb20:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i89 := $p2i.ref.bv64($p2);
  // WARNING: %106 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i90 := $add.bv64($i89, 228bv64);
  // WARNING: %107 = add i64 %106, 228, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p91 := $i2p.bv64.ref($i90);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p91, 64bv32);
  // WARNING: store i32 64, i32* %108, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i92 := $p2i.ref.bv64($p2);
  // WARNING: %109 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i93 := $add.bv64($i92, 224bv64);
  // WARNING: %110 = add i64 %109, 224, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p94 := $i2p.bv64.ref($i93);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p94, 128bv32);
  // WARNING: store i32 128, i32* %111, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb21:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i95 := $p2i.ref.bv64($p2);
  // WARNING: %113 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i96 := $add.bv64($i95, 244bv64);
  // WARNING: %114 = add i64 %113, 244, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p97 := $i2p.bv64.ref($i96);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p97, 64bv32);
  // WARNING: store i32 64, i32* %115, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i98 := $p2i.ref.bv64($p2);
  // WARNING: %116 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i99 := $add.bv64($i98, 240bv64);
  // WARNING: %117 = add i64 %116, 240, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p100 := $i2p.bv64.ref($i99);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p100, 192bv32);
  // WARNING: store i32 192, i32* %118, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i101 := $p2i.ref.bv64($p2);
  // WARNING: %120 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i102 := $add.bv64($i101, 260bv64);
  // WARNING: %121 = add i64 %120, 260, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p103 := $i2p.bv64.ref($i102);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p103, 64bv32);
  // WARNING: store i32 64, i32* %122, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i104 := $p2i.ref.bv64($p2);
  // WARNING: %123 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i105 := $add.bv64($i104, 256bv64);
  // WARNING: %124 = add i64 %123, 256, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p106 := $i2p.bv64.ref($i105);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p106, 256bv32);
  // WARNING: store i32 256, i32* %125, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i107 := $p2i.ref.bv64($p2);
  // WARNING: %127 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i108 := $add.bv64($i107, 276bv64);
  // WARNING: %128 = add i64 %127, 276, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p109 := $i2p.bv64.ref($i108);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p109, 64bv32);
  // WARNING: store i32 64, i32* %129, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i110 := $p2i.ref.bv64($p2);
  // WARNING: %130 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i111 := $add.bv64($i110, 272bv64);
  // WARNING: %131 = add i64 %130, 272, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p112 := $i2p.bv64.ref($i111);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p112, 320bv32);
  // WARNING: store i32 320, i32* %132, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb24:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i113 := $p2i.ref.bv64($p2);
  // WARNING: %134 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i114 := $add.bv64($i113, 292bv64);
  // WARNING: %135 = add i64 %134, 292, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p115 := $i2p.bv64.ref($i114);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p115, 64bv32);
  // WARNING: store i32 64, i32* %136, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i116 := $p2i.ref.bv64($p2);
  // WARNING: %137 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i117 := $add.bv64($i116, 288bv64);
  // WARNING: %138 = add i64 %137, 288, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p118 := $i2p.bv64.ref($i117);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p118, 384bv32);
  // WARNING: store i32 384, i32* %139, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i119 := $p2i.ref.bv64($p2);
  // WARNING: %141 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i120 := $add.bv64($i119, 308bv64);
  // WARNING: %142 = add i64 %141, 308, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p121 := $i2p.bv64.ref($i120);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p121, 64bv32);
  // WARNING: store i32 64, i32* %143, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i122 := $p2i.ref.bv64($p2);
  // WARNING: %144 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i123 := $add.bv64($i122, 304bv64);
  // WARNING: %145 = add i64 %144, 304, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p124 := $i2p.bv64.ref($i123);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p124, 448bv32);
  // WARNING: store i32 448, i32* %146, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb26:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i125 := $p2i.ref.bv64($p2);
  // WARNING: %148 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i126 := $add.bv64($i125, 324bv64);
  // WARNING: %149 = add i64 %148, 324, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p127 := $i2p.bv64.ref($i126);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p127, 64bv32);
  // WARNING: store i32 64, i32* %150, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i128 := $p2i.ref.bv64($p2);
  // WARNING: %151 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i129 := $add.bv64($i128, 320bv64);
  // WARNING: %152 = add i64 %151, 320, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p130 := $i2p.bv64.ref($i129);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p130, 512bv32);
  // WARNING: store i32 512, i32* %153, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb27:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i131 := $p2i.ref.bv64($p2);
  // WARNING: %155 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i132 := $add.bv64($i131, 340bv64);
  // WARNING: %156 = add i64 %155, 340, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p133 := $i2p.bv64.ref($i132);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p133, 64bv32);
  // WARNING: store i32 64, i32* %157, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i134 := $p2i.ref.bv64($p2);
  // WARNING: %158 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i135 := $add.bv64($i134, 336bv64);
  // WARNING: %159 = add i64 %158, 336, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p136 := $i2p.bv64.ref($i135);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p136, 576bv32);
  // WARNING: store i32 576, i32* %160, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i137 := $p2i.ref.bv64($p2);
  // WARNING: %162 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i138 := $add.bv64($i137, 356bv64);
  // WARNING: %163 = add i64 %162, 356, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p139 := $i2p.bv64.ref($i138);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p139, 64bv32);
  // WARNING: store i32 64, i32* %164, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i140 := $p2i.ref.bv64($p2);
  // WARNING: %165 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i141 := $add.bv64($i140, 352bv64);
  // WARNING: %166 = add i64 %165, 352, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p142 := $i2p.bv64.ref($i141);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p142, 640bv32);
  // WARNING: store i32 640, i32* %167, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb29:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i143 := $p2i.ref.bv64($p2);
  // WARNING: %169 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i144 := $add.bv64($i143, 372bv64);
  // WARNING: %170 = add i64 %169, 372, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p145 := $i2p.bv64.ref($i144);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p145, 64bv32);
  // WARNING: store i32 64, i32* %171, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i146 := $p2i.ref.bv64($p2);
  // WARNING: %172 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i147 := $add.bv64($i146, 368bv64);
  // WARNING: %173 = add i64 %172, 368, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p148 := $i2p.bv64.ref($i147);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p148, 704bv32);
  // WARNING: store i32 704, i32* %174, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb30:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i149 := $p2i.ref.bv64($p2);
  // WARNING: %176 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i150 := $add.bv64($i149, 388bv64);
  // WARNING: %177 = add i64 %176, 388, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p151 := $i2p.bv64.ref($i150);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p151, 64bv32);
  // WARNING: store i32 64, i32* %178, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i152 := $p2i.ref.bv64($p2);
  // WARNING: %179 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i153 := $add.bv64($i152, 384bv64);
  // WARNING: %180 = add i64 %179, 384, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p154 := $i2p.bv64.ref($i153);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p154, 768bv32);
  // WARNING: store i32 768, i32* %181, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb31;
$bb31:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i155 := $p2i.ref.bv64($p2);
  // WARNING: %183 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i156 := $add.bv64($i155, 404bv64);
  // WARNING: %184 = add i64 %183, 404, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p157 := $i2p.bv64.ref($i156);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p157, 64bv32);
  // WARNING: store i32 64, i32* %185, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i158 := $p2i.ref.bv64($p2);
  // WARNING: %186 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i159 := $add.bv64($i158, 400bv64);
  // WARNING: %187 = add i64 %186, 400, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p160 := $i2p.bv64.ref($i159);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p160, 832bv32);
  // WARNING: store i32 832, i32* %188, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb32:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i161 := $p2i.ref.bv64($p2);
  // WARNING: %190 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i162 := $add.bv64($i161, 420bv64);
  // WARNING: %191 = add i64 %190, 420, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p163 := $i2p.bv64.ref($i162);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p163, 64bv32);
  // WARNING: store i32 64, i32* %192, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i164 := $p2i.ref.bv64($p2);
  // WARNING: %193 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i165 := $add.bv64($i164, 416bv64);
  // WARNING: %194 = add i64 %193, 416, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p166 := $i2p.bv64.ref($i165);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p166, 896bv32);
  // WARNING: store i32 896, i32* %195, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb33:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i167 := $p2i.ref.bv64($p2);
  // WARNING: %197 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i168 := $add.bv64($i167, 436bv64);
  // WARNING: %198 = add i64 %197, 436, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p169 := $i2p.bv64.ref($i168);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p169, 64bv32);
  // WARNING: store i32 64, i32* %199, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i170 := $p2i.ref.bv64($p2);
  // WARNING: %200 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i171 := $add.bv64($i170, 432bv64);
  // WARNING: %201 = add i64 %200, 432, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p172 := $i2p.bv64.ref($i171);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p172, 960bv32);
  // WARNING: store i32 960, i32* %202, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb34;
$bb34:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i173 := $p2i.ref.bv64($p2);
  // WARNING: %204 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i174 := $add.bv64($i173, 452bv64);
  // WARNING: %205 = add i64 %204, 452, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p175 := $i2p.bv64.ref($i174);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p175, 64bv32);
  // WARNING: store i32 64, i32* %206, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i176 := $p2i.ref.bv64($p2);
  // WARNING: %207 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i177 := $add.bv64($i176, 448bv64);
  // WARNING: %208 = add i64 %207, 448, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p178 := $i2p.bv64.ref($i177);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p178, 1024bv32);
  // WARNING: store i32 1024, i32* %209, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb35;
$bb35:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i179 := $p2i.ref.bv64($p2);
  // WARNING: %211 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i180 := $add.bv64($i179, 468bv64);
  // WARNING: %212 = add i64 %211, 468, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p181 := $i2p.bv64.ref($i180);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p181, 64bv32);
  // WARNING: store i32 64, i32* %213, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i182 := $p2i.ref.bv64($p2);
  // WARNING: %214 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i183 := $add.bv64($i182, 464bv64);
  // WARNING: %215 = add i64 %214, 464, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p184 := $i2p.bv64.ref($i183);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p184, 1088bv32);
  // WARNING: store i32 1088, i32* %216, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb36:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i185 := $p2i.ref.bv64($p2);
  // WARNING: %218 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i186 := $add.bv64($i185, 484bv64);
  // WARNING: %219 = add i64 %218, 484, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p187 := $i2p.bv64.ref($i186);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p187, 64bv32);
  // WARNING: store i32 64, i32* %220, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i188 := $p2i.ref.bv64($p2);
  // WARNING: %221 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i189 := $add.bv64($i188, 480bv64);
  // WARNING: %222 = add i64 %221, 480, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p190 := $i2p.bv64.ref($i189);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p190, 1152bv32);
  // WARNING: store i32 1152, i32* %223, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb37;
$bb37:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i191 := $p2i.ref.bv64($p2);
  // WARNING: %225 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i192 := $add.bv64($i191, 500bv64);
  // WARNING: %226 = add i64 %225, 500, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p193 := $i2p.bv64.ref($i192);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p193, 64bv32);
  // WARNING: store i32 64, i32* %227, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i194 := $p2i.ref.bv64($p2);
  // WARNING: %228 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i195 := $add.bv64($i194, 496bv64);
  // WARNING: %229 = add i64 %228, 496, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p196 := $i2p.bv64.ref($i195);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p196, 1216bv32);
  // WARNING: store i32 1216, i32* %230, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb38;
$bb38:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i197 := $p2i.ref.bv64($p2);
  // WARNING: %232 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i198 := $add.bv64($i197, 516bv64);
  // WARNING: %233 = add i64 %232, 516, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p199 := $i2p.bv64.ref($i198);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p199, 64bv32);
  // WARNING: store i32 64, i32* %234, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i200 := $p2i.ref.bv64($p2);
  // WARNING: %235 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i201 := $add.bv64($i200, 512bv64);
  // WARNING: %236 = add i64 %235, 512, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p202 := $i2p.bv64.ref($i201);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p202, 1280bv32);
  // WARNING: store i32 1280, i32* %237, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb39:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i203 := $p2i.ref.bv64($p2);
  // WARNING: %239 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i204 := $add.bv64($i203, 532bv64);
  // WARNING: %240 = add i64 %239, 532, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p205 := $i2p.bv64.ref($i204);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p205, 64bv32);
  // WARNING: store i32 64, i32* %241, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i206 := $p2i.ref.bv64($p2);
  // WARNING: %242 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i207 := $add.bv64($i206, 528bv64);
  // WARNING: %243 = add i64 %242, 528, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p208 := $i2p.bv64.ref($i207);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p208, 1344bv32);
  // WARNING: store i32 1344, i32* %244, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb40;
$bb40:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i209 := $p2i.ref.bv64($p2);
  // WARNING: %246 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i210 := $add.bv64($i209, 548bv64);
  // WARNING: %247 = add i64 %246, 548, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p211 := $i2p.bv64.ref($i210);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p211, 64bv32);
  // WARNING: store i32 64, i32* %248, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i212 := $p2i.ref.bv64($p2);
  // WARNING: %249 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i213 := $add.bv64($i212, 544bv64);
  // WARNING: %250 = add i64 %249, 544, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p214 := $i2p.bv64.ref($i213);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p214, 1408bv32);
  // WARNING: store i32 1408, i32* %251, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb41;
$bb41:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i215 := $p2i.ref.bv64($p2);
  // WARNING: %253 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i216 := $add.bv64($i215, 564bv64);
  // WARNING: %254 = add i64 %253, 564, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p217 := $i2p.bv64.ref($i216);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p217, 64bv32);
  // WARNING: store i32 64, i32* %255, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i218 := $p2i.ref.bv64($p2);
  // WARNING: %256 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i219 := $add.bv64($i218, 560bv64);
  // WARNING: %257 = add i64 %256, 560, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p220 := $i2p.bv64.ref($i219);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p220, 1472bv32);
  // WARNING: store i32 1472, i32* %258, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb42;
$bb42:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i221 := $p2i.ref.bv64($p2);
  // WARNING: %260 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i222 := $add.bv64($i221, 580bv64);
  // WARNING: %261 = add i64 %260, 580, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p223 := $i2p.bv64.ref($i222);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p223, 64bv32);
  // WARNING: store i32 64, i32* %262, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i224 := $p2i.ref.bv64($p2);
  // WARNING: %263 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i225 := $add.bv64($i224, 576bv64);
  // WARNING: %264 = add i64 %263, 576, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p226 := $i2p.bv64.ref($i225);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p226, 1536bv32);
  // WARNING: store i32 1536, i32* %265, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb43;
$bb43:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i227 := $p2i.ref.bv64($p2);
  // WARNING: %267 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i228 := $add.bv64($i227, 596bv64);
  // WARNING: %268 = add i64 %267, 596, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p229 := $i2p.bv64.ref($i228);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p229, 64bv32);
  // WARNING: store i32 64, i32* %269, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i230 := $p2i.ref.bv64($p2);
  // WARNING: %270 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i231 := $add.bv64($i230, 592bv64);
  // WARNING: %271 = add i64 %270, 592, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p232 := $i2p.bv64.ref($i231);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p232, 1600bv32);
  // WARNING: store i32 1600, i32* %272, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb44:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i233 := $p2i.ref.bv64($p2);
  // WARNING: %274 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i234 := $add.bv64($i233, 612bv64);
  // WARNING: %275 = add i64 %274, 612, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p235 := $i2p.bv64.ref($i234);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p235, 64bv32);
  // WARNING: store i32 64, i32* %276, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i236 := $p2i.ref.bv64($p2);
  // WARNING: %277 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i237 := $add.bv64($i236, 608bv64);
  // WARNING: %278 = add i64 %277, 608, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p238 := $i2p.bv64.ref($i237);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p238, 1664bv32);
  // WARNING: store i32 1664, i32* %279, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb45:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i239 := $p2i.ref.bv64($p2);
  // WARNING: %281 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i240 := $add.bv64($i239, 628bv64);
  // WARNING: %282 = add i64 %281, 628, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p241 := $i2p.bv64.ref($i240);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p241, 64bv32);
  // WARNING: store i32 64, i32* %283, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i242 := $p2i.ref.bv64($p2);
  // WARNING: %284 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i243 := $add.bv64($i242, 624bv64);
  // WARNING: %285 = add i64 %284, 624, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p244 := $i2p.bv64.ref($i243);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p244, 1728bv32);
  // WARNING: store i32 1728, i32* %286, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb46;
$bb46:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i245 := $p2i.ref.bv64($p2);
  // WARNING: %288 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i246 := $add.bv64($i245, 644bv64);
  // WARNING: %289 = add i64 %288, 644, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p247 := $i2p.bv64.ref($i246);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p247, 64bv32);
  // WARNING: store i32 64, i32* %290, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i248 := $p2i.ref.bv64($p2);
  // WARNING: %291 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i249 := $add.bv64($i248, 640bv64);
  // WARNING: %292 = add i64 %291, 640, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p250 := $i2p.bv64.ref($i249);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p250, 1792bv32);
  // WARNING: store i32 1792, i32* %293, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb47;
$bb47:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i251 := $p2i.ref.bv64($p2);
  // WARNING: %295 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i252 := $add.bv64($i251, 660bv64);
  // WARNING: %296 = add i64 %295, 660, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p253 := $i2p.bv64.ref($i252);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p253, 64bv32);
  // WARNING: store i32 64, i32* %297, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i254 := $p2i.ref.bv64($p2);
  // WARNING: %298 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i255 := $add.bv64($i254, 656bv64);
  // WARNING: %299 = add i64 %298, 656, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p256 := $i2p.bv64.ref($i255);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p256, 1856bv32);
  // WARNING: store i32 1856, i32* %300, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb48;
$bb48:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i257 := $p2i.ref.bv64($p2);
  // WARNING: %302 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i258 := $add.bv64($i257, 676bv64);
  // WARNING: %303 = add i64 %302, 676, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p259 := $i2p.bv64.ref($i258);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p259, 64bv32);
  // WARNING: store i32 64, i32* %304, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i260 := $p2i.ref.bv64($p2);
  // WARNING: %305 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i261 := $add.bv64($i260, 672bv64);
  // WARNING: %306 = add i64 %305, 672, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p262 := $i2p.bv64.ref($i261);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p262, 1920bv32);
  // WARNING: store i32 1920, i32* %307, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3750, 5} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb49:
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4633, metadata !4293), !dbg !4634, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 4, i64 0, metadata !4635, metadata !4293), !dbg !4636, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3738, 17} true;
  assume {:verifier.code 0} true;
  $i263 := $p2i.ref.bv64($p2);
  // WARNING: %309 = ptrtoint %struct.urb* %3 to i64, !dbg !4494, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3739, 29} true;
  assume {:verifier.code 0} true;
  $i264 := $add.bv64($i263, 692bv64);
  // WARNING: %310 = add i64 %309, 692, !dbg !4497, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 5} true;
  assume {:verifier.code 0} true;
  $p265 := $i2p.bv64.ref($i264);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3740, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p265, 64bv32);
  // WARNING: store i32 64, i32* %311, align 4, !dbg !4501, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 0, i64 0, metadata !4647, metadata !4293), !dbg !4648, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3743, 17} true;
  assume {:verifier.code 0} true;
  $i266 := $p2i.ref.bv64($p2);
  // WARNING: %312 = ptrtoint %struct.urb* %3 to i64, !dbg !4506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3744, 29} true;
  assume {:verifier.code 0} true;
  $i267 := $add.bv64($i266, 688bv64);
  // WARNING: %313 = add i64 %312, 688, !dbg !4509, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %84, i64 0, metadata !4655, metadata !4293), !dbg !4656, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 5} true;
  assume {:verifier.code 0} true;
  $p268 := $i2p.bv64.ref($i267);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3746, 34} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p268, 1984bv32);
  // WARNING: store i32 1984, i32* %314, align 4, !dbg !4515, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3752, 5} true;
  assume {:verifier.code 0} true;
  goto $bb16;
}
const sd_stopN: ref;
axiom (sd_stopN == $sub.ref(0, 22087));
procedure  sd_stopN($p0: ref)
{
  var $i1: bv64;
  var $i2: bv64;
  var $p3: ref;
  var $p4: ref;
  var $i5: bv64;
  var $i6: bv64;
  var $p7: ref;
  var $i8: bv8;
  var $i9: bv32;
  var $p10: ref;
  var $i11: bv64;
  var $i12: bv64;
  var $p13: ref;
  var $p14: ref;
  var $i15: bv64;
  var $i16: bv64;
  var $p17: ref;
  var $i18: bv8;
  var $i19: bv32;
  var $i20: bv64;
  var $i21: bv64;
  var $p22: ref;
  var $i23: bv32;
  var $i24: bv32;
  var $i25: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.gspca_dev* %0, i64 0, metadata !4685, metadata !4293), !dbg !4686, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i16 60, i64 0, metadata !4687, metadata !4293), !dbg !4688, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3807, 3} true;
  assume {:verifier.code 0} true;
  call reg_w($p0, 60bv16, 3bv16);
  // WARNING: call void @reg_w(%struct.gspca_dev* %0, i16 zeroext 60, i16 zeroext 3), !dbg !4300, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i16 60, i64 0, metadata !4694, metadata !4293), !dbg !4695, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3810, 3} true;
  assume {:verifier.code 0} true;
  call reg_w($p0, 60bv16, 4bv16);
  // WARNING: call void @reg_w(%struct.gspca_dev* %0, i16 zeroext 60, i16 zeroext 4), !dbg !4307, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i16 60, i64 0, metadata !4699, metadata !4293), !dbg !4700, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3813, 3} true;
  assume {:verifier.code 0} true;
  call reg_w($p0, 60bv16, 5bv16);
  // WARNING: call void @reg_w(%struct.gspca_dev* %0, i16 zeroext 60, i16 zeroext 5), !dbg !4312, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i16 60, i64 0, metadata !4704, metadata !4293), !dbg !4705, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3816, 3} true;
  assume {:verifier.code 0} true;
  call reg_w($p0, 60bv16, 6bv16);
  // WARNING: call void @reg_w(%struct.gspca_dev* %0, i16 zeroext 60, i16 zeroext 6), !dbg !4317, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i16 60, i64 0, metadata !4709, metadata !4293), !dbg !4710, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3819, 3} true;
  assume {:verifier.code 0} true;
  call reg_w($p0, 60bv16, 7bv16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3820, 17} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.bv64($p0);
  // WARNING: %2 = ptrtoint %struct.gspca_dev* %0 to i64, !dbg !4323, !verifier.code !4295
  call {:cexpr "__cil_tmp13"} boogie_si_record_bv64($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3821, 29} true;
  assume {:verifier.code 0} true;
  $i2 := $add.bv64($i1, 1536bv64);
  // WARNING: %3 = add i64 %2, 1536, !dbg !4326, !verifier.code !4295
  call {:cexpr "__cil_tmp14"} boogie_si_record_bv64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3822, 19} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.bv64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3822, 17} true;
  assume {:verifier.code 0} true;
  $p4 := $load.bytes.ref($M.1, $p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3824, 17} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.bv64($p0);
  // WARNING: %6 = ptrtoint %struct.gspca_dev* %0 to i64, !dbg !4335, !verifier.code !4295
  call {:cexpr "__cil_tmp17"} boogie_si_record_bv64($i5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3825, 29} true;
  assume {:verifier.code 0} true;
  $i6 := $add.bv64($i5, 3898bv64);
  // WARNING: %7 = add i64 %6, 3898, !dbg !4338, !verifier.code !4295
  call {:cexpr "__cil_tmp18"} boogie_si_record_bv64($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3826, 19} true;
  assume {:verifier.code 0} true;
  $p7 := $i2p.bv64.ref($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3826, 17} true;
  assume {:verifier.code 0} true;
  $i8 := $load.bytes.bv8($M.1, $p7);
  // WARNING: %9 = load i8, i8* %8, align 1, !dbg !4342, !verifier.code !4295
  call {:cexpr "__cil_tmp19"} boogie_si_record_bv8($i8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3827, 17} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.bv8.bv32($i8);
  // WARNING: %10 = zext i8 %9 to i32, !dbg !4345, !verifier.code !4295
  call {:cexpr "__cil_tmp20"} boogie_si_record_bv32($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3828, 10} true;
  assume {:verifier.code 0} true;
  call $p10 := usb_ifnum_to_if($p4, $i9);
  assume $isExternal($p10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3829, 17} true;
  assume {:verifier.code 0} true;
  $i11 := $p2i.ref.bv64($p0);
  // WARNING: %12 = ptrtoint %struct.gspca_dev* %0 to i64, !dbg !4351, !verifier.code !4295
  call {:cexpr "__cil_tmp21"} boogie_si_record_bv64($i11);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3830, 29} true;
  assume {:verifier.code 0} true;
  $i12 := $add.bv64($i11, 1536bv64);
  // WARNING: %13 = add i64 %12, 1536, !dbg !4354, !verifier.code !4295
  call {:cexpr "__cil_tmp22"} boogie_si_record_bv64($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3831, 19} true;
  assume {:verifier.code 0} true;
  $p13 := $i2p.bv64.ref($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3831, 17} true;
  assume {:verifier.code 0} true;
  $p14 := $load.bytes.ref($M.1, $p13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3832, 17} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.bv64($p0);
  // WARNING: %16 = ptrtoint %struct.gspca_dev* %0 to i64, !dbg !4361, !verifier.code !4295
  call {:cexpr "__cil_tmp24"} boogie_si_record_bv64($i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3833, 29} true;
  assume {:verifier.code 0} true;
  $i16 := $add.bv64($i15, 3898bv64);
  // WARNING: %17 = add i64 %16, 3898, !dbg !4364, !verifier.code !4295
  call {:cexpr "__cil_tmp25"} boogie_si_record_bv64($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3834, 19} true;
  assume {:verifier.code 0} true;
  $p17 := $i2p.bv64.ref($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3834, 17} true;
  assume {:verifier.code 0} true;
  $i18 := $load.bytes.bv8($M.1, $p17);
  // WARNING: %19 = load i8, i8* %18, align 1, !dbg !4368, !verifier.code !4295
  call {:cexpr "__cil_tmp26"} boogie_si_record_bv8($i18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3835, 17} true;
  assume {:verifier.code 0} true;
  $i19 := $zext.bv8.bv32($i18);
  // WARNING: %20 = zext i8 %19 to i32, !dbg !4371, !verifier.code !4295
  call {:cexpr "__cil_tmp27"} boogie_si_record_bv32($i19);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3836, 17} true;
  assume {:verifier.code 0} true;
  $i20 := $p2i.ref.bv64($p10);
  // WARNING: %21 = ptrtoint %struct.usb_interface* %11 to i64, !dbg !4374, !verifier.code !4295
  call {:cexpr "__cil_tmp28"} boogie_si_record_bv64($i20);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3837, 29} true;
  assume {:verifier.code 0} true;
  $i21 := $add.bv64($i20, 16bv64);
  // WARNING: %22 = add i64 %21, 16, !dbg !4377, !verifier.code !4295
  call {:cexpr "__cil_tmp29"} boogie_si_record_bv64($i21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3838, 19} true;
  assume {:verifier.code 0} true;
  $p22 := $i2p.bv64.ref($i21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3838, 17} true;
  assume {:verifier.code 0} true;
  $i23 := $load.bytes.bv32($M.1, $p22);
  // WARNING: %24 = load i32, i32* %23, align 4, !dbg !4381, !verifier.code !4295
  call {:cexpr "__cil_tmp30"} boogie_si_record_bv32($i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3839, 29} true;
  assume {:verifier.code 0} true;
  $i24 := $sub.bv32($i23, 1bv32);
  // WARNING: %25 = sub i32 %24, 1, !dbg !4384, !verifier.code !4295
  call {:cexpr "__cil_tmp31"} boogie_si_record_bv32($i24);
  // WARNING: call void @llvm.dbg.value(metadata i32 %25, i64 0, metadata !4776, metadata !4293), !dbg !4777, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3841, 3} true;
  assume {:verifier.code 0} true;
  call $i25 := usb_set_interface($p14, $i19, $i24);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3843, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const sd_pkt_scan: ref;
axiom (sd_pkt_scan == $sub.ref(0, 23119));
procedure  sd_pkt_scan($p0: ref, $p1: ref, $i2: bv32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !4785, metadata !4293), !dbg !4786, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3850, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const sd_probe: ref;
axiom (sd_probe == $sub.ref(0, 24151));
procedure  sd_probe($p0: ref, $p1: ref)
  returns ($r: bv32)
{
  var $i2: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4291, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := gspca_dev_probe($p0, $p1, sd_desc, 3904bv32, __this_module);
  // WARNING: %3 = call i32 @gspca_dev_probe(%struct.usb_interface* %0, %struct.usb_device_id* %1, %struct.sd_desc* @sd_desc, i32 3904, %struct.module* @__this_module), !dbg !4300, !verifier.code !4297
  call {:cexpr "tmp"} boogie_si_record_bv32($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4293, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ldv_check_return_value: ref;
axiom (ldv_check_return_value == $sub.ref(0, 25183));
procedure  ldv_check_return_value($i0: bv32);
const ldv_check_final_state: ref;
axiom (ldv_check_final_state == $sub.ref(0, 26215));
procedure  ldv_check_final_state();
const gspca_dev_probe: ref;
axiom (gspca_dev_probe == $sub.ref(0, 27247));
procedure  gspca_dev_probe($p0: ref, $p1: ref, $p2: ref, $i3: bv32, $p4: ref)
  returns ($r: bv32);
const reg_w: ref;
axiom (reg_w == $sub.ref(0, 28279));
procedure  reg_w($p0: ref, $i1: bv16, $i2: bv16)
{
  var $i3: bv64;
  var $i4: bv64;
  var $p5: ref;
  var $p6: ref;
  var $i7: bv64;
  var $i8: bv64;
  var $p9: ref;
  var $i10: bv32;
  var $i11: bv1;
  var $i12: bv32;
  var $i13: bv32;
  var $i14: bv32;
  var $i15: bv16;
  var $i16: bv32;
  var $i17: bv16;
  var $i18: bv32;
  var $i19: bv1;
  var $i20: bv32;
  var $i21: bv64;
  var $i22: bv64;
  var $p23: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.gspca_dev* %0, i64 0, metadata !4807, metadata !4293), !dbg !4808, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i16 %1, i64 0, metadata !4809, metadata !4293), !dbg !4810, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3510, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.bv64($p0);
  // WARNING: %4 = ptrtoint %struct.gspca_dev* %0 to i64, !dbg !4302, !verifier.code !4297
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3511, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $add.bv64($i3, 1536bv64);
  // WARNING: %5 = add i64 %4, 1536, !dbg !4306, !verifier.code !4297
  call {:cexpr "__cil_tmp8"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3512, 11} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.bv64.ref($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3512, 9} true;
  assume {:verifier.code 0} true;
  $p6 := $load.bytes.ref($M.1, $p5);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3514, 16} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.bv64($p0);
  // WARNING: %8 = ptrtoint %struct.gspca_dev* %0 to i64, !dbg !4313, !verifier.code !4297
  call {:cexpr "__cil_tmp9"} boogie_si_record_bv64($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3515, 28} true;
  assume {:verifier.code 0} true;
  $i8 := $add.bv64($i7, 3888bv64);
  // WARNING: %9 = add i64 %8, 3888, !dbg !4317, !verifier.code !4297
  call {:cexpr "__cil_tmp10"} boogie_si_record_bv64($i8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3516, 19} true;
  assume {:verifier.code 0} true;
  $p9 := $i2p.bv64.ref($i8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3516, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $load.bytes.bv32($M.1, $p9);
  // WARNING: %11 = load i32, i32* %10, align 4, !dbg !4321, !verifier.code !4297
  call {:cexpr "__cil_tmp11"} boogie_si_record_bv32($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3517, 19} true;
  assume {:verifier.code 0} true;
  $i11 := $slt.bv32($i10, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3517, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i11 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3518, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i11 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3549, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3524, 9} true;
  assume {:verifier.code 0} true;
  call $i12 := __create_pipe($p6, 0bv32);
  // WARNING: %16 = call i32 @__create_pipe(%struct.usb_device* %7, i32 0), !dbg !4329, !verifier.code !4297
  call {:cexpr "tmp"} boogie_si_record_bv32($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3525, 21} true;
  assume {:verifier.code 0} true;
  $i13 := $or.bv32($i12, $sub.bv32(0bv32, 2147483648bv32));
  // WARNING: %17 = or i32 %16, -2147483648, !dbg !4333, !verifier.code !4297
  call {:cexpr "__cil_tmp12"} boogie_si_record_bv32($i13);
  // WARNING: call void @llvm.dbg.value(metadata i32 %17, i64 0, metadata !4845, metadata !4293), !dbg !4846, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i8 2, i64 0, metadata !4847, metadata !4293), !dbg !4848, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3528, 17} true;
  assume {:verifier.code 0} true;
  $i14 := $zext.bv16.bv32($i1);
  // WARNING: %18 = zext i16 %1 to i32, !dbg !4340, !verifier.code !4297
  call {:cexpr "__cil_tmp15"} boogie_si_record_bv32($i14);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3529, 17} true;
  assume {:verifier.code 0} true;
  $i15 := $trunc.bv32.bv16($i14);
  // WARNING: %19 = trunc i32 %18 to i16, !dbg !4343, !verifier.code !4297
  call {:cexpr "__cil_tmp16"} boogie_si_record_bv16($i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3530, 17} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.bv16.bv32($i2);
  // WARNING: %20 = zext i16 %2 to i32, !dbg !4346, !verifier.code !4297
  call {:cexpr "__cil_tmp17"} boogie_si_record_bv32($i16);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3531, 17} true;
  assume {:verifier.code 0} true;
  $i17 := $trunc.bv32.bv16($i16);
  // WARNING: %21 = trunc i32 %20 to i16, !dbg !4349, !verifier.code !4297
  call {:cexpr "__cil_tmp18"} boogie_si_record_bv16($i17);
  // WARNING: call void @llvm.dbg.value(metadata i8* null, i64 0, metadata !4863, metadata !4293), !dbg !4864, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3534, 9} true;
  assume {:verifier.code 0} true;
  call $i18 := usb_control_msg($p6, $i13, 2bv8, 64bv8, $i15, $i17, $0.ref, 0bv16, 500bv32);
  // WARNING: %22 = call i32 @usb_control_msg(%struct.usb_device* %7, i32 %17, i8 zeroext 2, i8 zeroext 64, i16 zeroext %19, i16 zeroext %21, i8* null, i16 zeroext 0, i32 500), !dbg !4356, !verifier.code !4297
  call {:cexpr "ret"} boogie_si_record_bv32($i18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3537, 11} true;
  assume {:verifier.code 0} true;
  $i19 := $slt.bv32($i18, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3537, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i19 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3539, 5} true;
  assume {:verifier.code 0} true;
  call $i20 := printk.ref.bv32(.str.6, $i18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3540, 19} true;
  assume {:verifier.code 0} true;
  $i21 := $p2i.ref.bv64($p0);
  // WARNING: %26 = ptrtoint %struct.gspca_dev* %0 to i64, !dbg !4365, !verifier.code !4297
  call {:cexpr "__cil_tmp21"} boogie_si_record_bv64($i21);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3541, 31} true;
  assume {:verifier.code 0} true;
  $i22 := $add.bv64($i21, 3888bv64);
  // WARNING: %27 = add i64 %26, 3888, !dbg !4368, !verifier.code !4297
  call {:cexpr "__cil_tmp22"} boogie_si_record_bv64($i22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3542, 7} true;
  assume {:verifier.code 0} true;
  $p23 := $i2p.bv64.ref($i22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3542, 27} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv32($M.1, $p23, $i18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3544, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i19 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3547, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const usb_ifnum_to_if: ref;
axiom (usb_ifnum_to_if == $sub.ref(0, 29311));
procedure  usb_ifnum_to_if($p0: ref, $i1: bv32)
  returns ($r: ref);
const usb_set_interface: ref;
axiom (usb_set_interface == $sub.ref(0, 30343));
procedure  usb_set_interface($p0: ref, $i1: bv32, $i2: bv32)
  returns ($r: bv32);
const __create_pipe: ref;
axiom (__create_pipe == $sub.ref(0, 31375));
procedure  __create_pipe($p0: ref, $i1: bv32)
  returns ($r: bv32)
{
  var $i2: bv32;
  var $p3: ref;
  var $i4: bv32;
  var $i5: bv32;
  var $i6: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.usb_device* %0, i64 0, metadata !4890, metadata !4293), !dbg !4891, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3472, 25} true;
  assume {:verifier.code 0} true;
  $i2 := $shl.bv32($i1, 15bv32);
  // WARNING: %3 = shl i32 %1, 15, !dbg !4300, !verifier.code !4297
  call {:cexpr "__cil_tmp3"} boogie_si_record_bv32($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3473, 16} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3473, 16} true;
  assume {:verifier.code 0} true;
  $i4 := $load.bytes.bv32($M.1, $p3);
  // WARNING: %5 = load i32, i32* %4, align 4, !dbg !4305, !verifier.code !4297
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3474, 27} true;
  assume {:verifier.code 0} true;
  $i5 := $shl.bv32($i4, 8bv32);
  // WARNING: %6 = shl i32 %5, 8, !dbg !4308, !verifier.code !4297
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv32($i5);
  // WARNING: call void @llvm.dbg.value(metadata i32 %6, i64 0, metadata !4903, metadata !4293), !dbg !4904, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3476, 22} true;
  assume {:verifier.code 0} true;
  $i6 := $or.bv32($i5, $i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3476, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const usb_control_msg: ref;
axiom (usb_control_msg == $sub.ref(0, 32407));
procedure  usb_control_msg($p0: ref, $i1: bv32, $i2: bv8, $i3: bv8, $i4: bv16, $i5: bv16, $p6: ref, $i7: bv16, $i8: bv32)
  returns ($r: bv32);
const printk: ref;
axiom (printk == $sub.ref(0, 33439));
procedure  printk.ref.bv32($p0: ref, p.1: bv32)
  returns ($r: bv32);
procedure  printk.ref.bv32.bv32($p0: ref, p.1: bv32, p.2: bv32)
  returns ($r: bv32);
procedure  printk.ref($p0: ref)
  returns ($r: bv32);
const ldv_usb_alloc_urb_19: ref;
axiom (ldv_usb_alloc_urb_19 == $sub.ref(0, 34471));
procedure  ldv_usb_alloc_urb_19($i0: bv32, $i1: bv32)
  returns ($r: ref)
{
  var $p2: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !4912, metadata !4293), !dbg !4913, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4524, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_alloc_flags($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4525, 9} true;
  assume {:verifier.code 0} true;
  call $p2 := usb_alloc_urb($i0, $i1);
  assume $isExternal($p2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4527, 3} true;
  assume {:verifier.code 0} true;
  $r := $p2;
  $exn := false;
  return;
}
const ldv_usb_alloc_coherent_20: ref;
axiom (ldv_usb_alloc_coherent_20 == $sub.ref(0, 35503));
procedure  ldv_usb_alloc_coherent_20($p0: ref, $i1: bv64, $i2: bv32, $p3: ref)
  returns ($r: ref)
{
  var $p4: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.usb_device* %0, i64 0, metadata !4926, metadata !4293), !dbg !4927, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %1, i64 0, metadata !4928, metadata !4293), !dbg !4929, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4536, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_alloc_flags($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4537, 3} true;
  assume {:verifier.code 0} true;
  call $p4 := usb_alloc_coherent($p0, $i1, $i2, $p3);
  assume $isExternal($p4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4539, 3} true;
  assume {:verifier.code 0} true;
  $r := $0.ref;
  $exn := false;
  return;
}
const sd_isoc_irq: ref;
axiom (sd_isoc_irq == $sub.ref(0, 36535));
procedure  sd_isoc_irq($p0: ref)
{
  var $i1: bv64;
  var $i2: bv64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: bv64;
  var $i7: bv64;
  var $p8: ref;
  var $i9: bv8;
  var $i10: bv32;
  var $i11: bv1;
  var $i12: bv64;
  var $i13: bv64;
  var $p14: ref;
  var $i15: bv32;
  var $i16: bv1;
  var $i17: bv64;
  var $i18: bv64;
  var $p19: ref;
  var $i20: bv32;
  var $i21: bv1;
  var $i22: bv64;
  var $i23: bv64;
  var $p24: ref;
  var $i25: bv8;
  var $i26: bv32;
  var $i27: bv1;
  var $i28: bv64;
  var $i29: bv64;
  var $p30: ref;
  var $i31: bv32;
  var $i32: bv32;
  var $i33: bv64;
  var $i34: bv64;
  var $i35: bv64;
  var $i36: bv64;
  var $p37: ref;
  var $p38: ref;
  var $i39: bv64;
  var $i40: bv1;
  var $i41: bv64;
  var $i42: bv64;
  var $i43: bv64;
  var $i44: bv64;
  var $p45: ref;
  var $p46: ref;
  var $i47: bv64;
  var $i48: bv1;
  var $i49: bv64;
  var $i50: bv64;
  var $i51: bv64;
  var $i52: bv64;
  var $p53: ref;
  var $p54: ref;
  var $i55: bv64;
  var $i56: bv1;
  var $i57: bv64;
  var $i58: bv64;
  var $i59: bv64;
  var $p60: ref;
  var $p61: ref;
  var $i63: bv64;
  var $i64: bv64;
  var $i65: bv64;
  var $p66: ref;
  var $p67: ref;
  var $p62: ref;
  var $i68: bv64;
  var $i69: bv64;
  var $p70: ref;
  var $i71: bv32;
  var $i72: bv1;
  var $i74: bv64;
  var $i75: bv64;
  var $i76: bv64;
  var $i77: bv64;
  var $i78: bv64;
  var $i79: bv64;
  var $p80: ref;
  var $i81: bv32;
  var $i82: bv1;
  var $i83: bv64;
  var $i84: bv64;
  var $p85: ref;
  var $i87: bv64;
  var $i88: bv64;
  var $i89: bv64;
  var $i90: bv64;
  var $i91: bv64;
  var $i92: bv64;
  var $p93: ref;
  var $i94: bv32;
  var $i95: bv1;
  var $i96: bv64;
  var $i97: bv64;
  var $p98: ref;
  var $i99: bv64;
  var $i100: bv64;
  var $i101: bv64;
  var $i102: bv64;
  var $i103: bv64;
  var $i104: bv64;
  var $p105: ref;
  var $i106: bv32;
  var $i107: bv1;
  var $i108: bv64;
  var $i109: bv64;
  var $i110: bv64;
  var $i111: bv64;
  var $i112: bv64;
  var $i113: bv64;
  var $p114: ref;
  var $i115: bv32;
  var $i116: bv32;
  var $i117: bv1;
  var $i118: bv32;
  var $i119: bv64;
  var $i120: bv64;
  var $p121: ref;
  var $i122: bv64;
  var $i123: bv64;
  var $i124: bv64;
  var $i125: bv64;
  var $i126: bv64;
  var $p127: ref;
  var $i128: bv32;
  var $i129: bv64;
  var $i130: bv64;
  var $i131: bv64;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: bv8;
  var $i136: bv32;
  var $i137: bv1;
  var $i138: bv64;
  var $p139: ref;
  var $i140: bv8;
  var $i141: bv32;
  var $i142: bv32;
  var $i143: bv1;
  var $i144: bv64;
  var $p145: ref;
  var $i146: bv8;
  var $i147: bv32;
  var $i148: bv1;
  var $i149: bv64;
  var $p150: ref;
  var $i151: bv8;
  var $i152: bv32;
  var $i153: bv32;
  var $i154: bv1;
  var $i155: bv64;
  var $p156: ref;
  var $i157: bv64;
  var $i158: bv64;
  var $p159: ref;
  var $i160: bv64;
  var $i161: bv64;
  var $p162: ref;
  var $i163: bv64;
  var $i164: bv64;
  var $i165: bv64;
  var $i166: bv64;
  var $i167: bv64;
  var $p168: ref;
  var $i169: bv32;
  var $i170: bv64;
  var $i171: bv64;
  var $i172: bv64;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i86: bv32;
  var $i176: bv32;
  var $i177: bv32;
  var $i178: bv1;
  var $i73: bv32;
  var $i179: bv32;
  var $i180: bv1;
  var $i181: bv32;
  var $i182: bv32;
  var $i183: bv1;
  var $i184: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3988, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.bv64($p0);
  // WARNING: %2 = ptrtoint %struct.urb* %0 to i64, !dbg !4296, !verifier.code !4295
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv64($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3989, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $add.bv64($i1, 176bv64);
  // WARNING: %3 = add i64 %2, 176, !dbg !4300, !verifier.code !4295
  call {:cexpr "__cil_tmp8"} boogie_si_record_bv64($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3990, 18} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.bv64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3990, 16} true;
  assume {:verifier.code 0} true;
  $p4 := $load.bytes.ref($M.1, $p3);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3991, 15} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3993, 17} true;
  assume {:verifier.code 0} true;
  $i6 := $p2i.ref.bv64($p5);
  // WARNING: %7 = ptrtoint %struct.gspca_dev* %6 to i64, !dbg !4310, !verifier.code !4295
  call {:cexpr "__cil_tmp10"} boogie_si_record_bv64($i6);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3994, 29} true;
  assume {:verifier.code 0} true;
  $i7 := $add.bv64($i6, 3444bv64);
  // WARNING: %8 = add i64 %7, 3444, !dbg !4314, !verifier.code !4295
  call {:cexpr "__cil_tmp11"} boogie_si_record_bv64($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3995, 19} true;
  assume {:verifier.code 0} true;
  $p8 := $i2p.bv64.ref($i7);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3995, 17} true;
  assume {:verifier.code 0} true;
  $i9 := $load.bytes.bv8($M.1, $p8);
  // WARNING: %10 = load i8, i8* %9, align 1, !dbg !4318, !verifier.code !4295
  call {:cexpr "__cil_tmp12"} boogie_si_record_bv8($i9);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3996, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.bv8.bv32($i9);
  // WARNING: %11 = zext i8 %10 to i32, !dbg !4321, !verifier.code !4295
  call {:cexpr "__cil_tmp13"} boogie_si_record_bv32($i10);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3997, 19} true;
  assume {:verifier.code 0} true;
  $i11 := $eq.bv32($i10, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3997, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i11 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 3998, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i11 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4271, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4004, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $p2i.ref.bv64($p0);
  // WARNING: %16 = ptrtoint %struct.urb* %0 to i64, !dbg !4329, !verifier.code !4295
  call {:cexpr "__cil_tmp14"} boogie_si_record_bv64($i12);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4005, 29} true;
  assume {:verifier.code 0} true;
  $i13 := $add.bv64($i12, 96bv64);
  // WARNING: %17 = add i64 %16, 96, !dbg !4333, !verifier.code !4295
  call {:cexpr "__cil_tmp15"} boogie_si_record_bv64($i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4006, 19} true;
  assume {:verifier.code 0} true;
  $p14 := $i2p.bv64.ref($i13);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4006, 17} true;
  assume {:verifier.code 0} true;
  $i15 := $load.bytes.bv32($M.1, $p14);
  // WARNING: %19 = load i32, i32* %18, align 4, !dbg !4337, !verifier.code !4295
  call {:cexpr "__cil_tmp16"} boogie_si_record_bv32($i15);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4007, 19} true;
  assume {:verifier.code 0} true;
  $i16 := $ne.bv32($i15, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4007, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i16 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4009, 19} true;
  assume {:verifier.code 0} true;
  $i17 := $p2i.ref.bv64($p0);
  // WARNING: %22 = ptrtoint %struct.urb* %0 to i64, !dbg !4343, !verifier.code !4295
  call {:cexpr "__cil_tmp17"} boogie_si_record_bv64($i17);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4010, 31} true;
  assume {:verifier.code 0} true;
  $i18 := $add.bv64($i17, 96bv64);
  // WARNING: %23 = add i64 %22, 96, !dbg !4348, !verifier.code !4295
  call {:cexpr "__cil_tmp18"} boogie_si_record_bv64($i18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4011, 21} true;
  assume {:verifier.code 0} true;
  $p19 := $i2p.bv64.ref($i18);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4011, 19} true;
  assume {:verifier.code 0} true;
  $i20 := $load.bytes.bv32($M.1, $p19);
  // WARNING: %25 = load i32, i32* %24, align 4, !dbg !4352, !verifier.code !4295
  call {:cexpr "__cil_tmp19"} boogie_si_record_bv32($i20);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4012, 21} true;
  assume {:verifier.code 0} true;
  $i21 := $eq.bv32($i20, $sub.bv32(0bv32, 108bv32));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4012, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb7, $bb8;
$bb6:
  assume !(($i16 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb7:
  assume ($i21 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4013, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb8:
  assume !(($i21 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4019, 19} true;
  assume {:verifier.code 0} true;
  $i22 := $p2i.ref.bv64($p5);
  // WARNING: %30 = ptrtoint %struct.gspca_dev* %6 to i64, !dbg !4360, !verifier.code !4295
  call {:cexpr "__cil_tmp20"} boogie_si_record_bv64($i22);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4020, 31} true;
  assume {:verifier.code 0} true;
  $i23 := $add.bv64($i22, 3894bv64);
  // WARNING: %31 = add i64 %30, 3894, !dbg !4364, !verifier.code !4295
  call {:cexpr "__cil_tmp21"} boogie_si_record_bv64($i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4021, 21} true;
  assume {:verifier.code 0} true;
  $p24 := $i2p.bv64.ref($i23);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4021, 19} true;
  assume {:verifier.code 0} true;
  $i25 := $load.bytes.bv8($M.1, $p24);
  // WARNING: %33 = load i8, i8* %32, align 1, !dbg !4368, !verifier.code !4295
  call {:cexpr "__cil_tmp22"} boogie_si_record_bv8($i25);
  // WARNING: call void @llvm.dbg.value(metadata i8 %33, i64 0, metadata !5015, metadata !4293), !dbg !5016, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4023, 19} true;
  assume {:verifier.code 0} true;
  $i26 := $sext.bv8.bv32($i25);
  // WARNING: %34 = sext i8 %33 to i32, !dbg !4373, !verifier.code !4295
  call {:cexpr "__cil_tmp24"} boogie_si_record_bv32($i26);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4024, 21} true;
  assume {:verifier.code 0} true;
  $i27 := $ne.bv32($i26, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4024, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb10, $bb11;
$bb10:
  assume ($i27 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4025, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb11:
  assume !(($i27 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4031, 19} true;
  assume {:verifier.code 0} true;
  $i28 := $p2i.ref.bv64($p0);
  // WARNING: %39 = ptrtoint %struct.urb* %0 to i64, !dbg !4381, !verifier.code !4295
  call {:cexpr "__cil_tmp25"} boogie_si_record_bv64($i28);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4032, 31} true;
  assume {:verifier.code 0} true;
  $i29 := $add.bv64($i28, 96bv64);
  // WARNING: %40 = add i64 %39, 96, !dbg !4385, !verifier.code !4295
  call {:cexpr "__cil_tmp26"} boogie_si_record_bv64($i29);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4033, 21} true;
  assume {:verifier.code 0} true;
  $p30 := $i2p.bv64.ref($i29);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4033, 19} true;
  assume {:verifier.code 0} true;
  $i31 := $load.bytes.bv32($M.1, $p30);
  // WARNING: %42 = load i32, i32* %41, align 4, !dbg !4389, !verifier.code !4295
  call {:cexpr "__cil_tmp27"} boogie_si_record_bv32($i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4034, 5} true;
  assume {:verifier.code 0} true;
  call $i32 := printk.ref.bv32(.str.2, $i31);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4036, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4042, 17} true;
  assume {:verifier.code 0} true;
  $i33 := $p2i.ref.bv64($p0);
  // WARNING: %46 = ptrtoint %struct.urb* %0 to i64, !dbg !4394, !verifier.code !4295
  call {:cexpr "__cil_tmp28"} boogie_si_record_bv64($i33);
  // WARNING: call void @llvm.dbg.value(metadata i64 %46, i64 0, metadata !5042, metadata !4293), !dbg !5043, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4044, 22} true;
  assume {:verifier.code 0} true;
  $i34 := $add.bv64(1688bv64, 0bv64);
  // WARNING: %47 = add i64 1688, 0, !dbg !4400, !verifier.code !4295
  call {:cexpr "__cil_tmp30"} boogie_si_record_bv64($i34);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4045, 17} true;
  assume {:verifier.code 0} true;
  $i35 := $p2i.ref.bv64($p5);
  // WARNING: %48 = ptrtoint %struct.gspca_dev* %6 to i64, !dbg !4403, !verifier.code !4295
  call {:cexpr "__cil_tmp31"} boogie_si_record_bv64($i35);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4046, 29} true;
  assume {:verifier.code 0} true;
  $i36 := $add.bv64($i35, $i34);
  // WARNING: %49 = add i64 %48, %47, !dbg !4406, !verifier.code !4295
  call {:cexpr "__cil_tmp32"} boogie_si_record_bv64($i36);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4047, 19} true;
  assume {:verifier.code 0} true;
  $p37 := $i2p.bv64.ref($i36);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4047, 17} true;
  assume {:verifier.code 0} true;
  $p38 := $load.bytes.ref($M.1, $p37);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4048, 17} true;
  assume {:verifier.code 0} true;
  $i39 := $p2i.ref.bv64($p38);
  // WARNING: %52 = ptrtoint %struct.urb* %51 to i64, !dbg !4413, !verifier.code !4295
  call {:cexpr "__cil_tmp34"} boogie_si_record_bv64($i39);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4049, 19} true;
  assume {:verifier.code 0} true;
  $i40 := $eq.bv64($i39, $i33);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4049, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i40 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4050, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb15:
  assume !(($i40 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4053, 19} true;
  assume {:verifier.code 0} true;
  $i41 := $p2i.ref.bv64($p0);
  // WARNING: %56 = ptrtoint %struct.urb* %0 to i64, !dbg !4421, !verifier.code !4295
  call {:cexpr "__cil_tmp35"} boogie_si_record_bv64($i41);
  // WARNING: call void @llvm.dbg.value(metadata i64 %56, i64 0, metadata !5070, metadata !4293), !dbg !5071, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4055, 24} true;
  assume {:verifier.code 0} true;
  $i42 := $add.bv64(1688bv64, 16bv64);
  // WARNING: %57 = add i64 1688, 16, !dbg !4428, !verifier.code !4295
  call {:cexpr "__cil_tmp37"} boogie_si_record_bv64($i42);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4056, 19} true;
  assume {:verifier.code 0} true;
  $i43 := $p2i.ref.bv64($p5);
  // WARNING: %58 = ptrtoint %struct.gspca_dev* %6 to i64, !dbg !4431, !verifier.code !4295
  call {:cexpr "__cil_tmp38"} boogie_si_record_bv64($i43);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4057, 31} true;
  assume {:verifier.code 0} true;
  $i44 := $add.bv64($i43, $i42);
  // WARNING: %59 = add i64 %58, %57, !dbg !4434, !verifier.code !4295
  call {:cexpr "__cil_tmp39"} boogie_si_record_bv64($i44);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4058, 21} true;
  assume {:verifier.code 0} true;
  $p45 := $i2p.bv64.ref($i44);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4058, 19} true;
  assume {:verifier.code 0} true;
  $p46 := $load.bytes.ref($M.1, $p45);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4059, 19} true;
  assume {:verifier.code 0} true;
  $i47 := $p2i.ref.bv64($p46);
  // WARNING: %62 = ptrtoint %struct.urb* %61 to i64, !dbg !4441, !verifier.code !4295
  call {:cexpr "__cil_tmp41"} boogie_si_record_bv64($i47);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4060, 21} true;
  assume {:verifier.code 0} true;
  $i48 := $eq.bv64($i47, $i41);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4060, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i48} true;
  goto $bb16, $bb17;
$bb16:
  assume ($i48 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4061, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb17:
  assume !(($i48 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4069, 17} true;
  assume {:verifier.code 0} true;
  $i49 := $p2i.ref.bv64($p0);
  // WARNING: %68 = ptrtoint %struct.urb* %0 to i64, !dbg !4449, !verifier.code !4295
  call {:cexpr "__cil_tmp42"} boogie_si_record_bv64($i49);
  // WARNING: call void @llvm.dbg.value(metadata i64 %68, i64 0, metadata !5097, metadata !4293), !dbg !5098, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4071, 22} true;
  assume {:verifier.code 0} true;
  $i50 := $add.bv64(1688bv64, 8bv64);
  // WARNING: %69 = add i64 1688, 8, !dbg !4455, !verifier.code !4295
  call {:cexpr "__cil_tmp44"} boogie_si_record_bv64($i50);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4072, 17} true;
  assume {:verifier.code 0} true;
  $i51 := $p2i.ref.bv64($p5);
  // WARNING: %70 = ptrtoint %struct.gspca_dev* %6 to i64, !dbg !4458, !verifier.code !4295
  call {:cexpr "__cil_tmp45"} boogie_si_record_bv64($i51);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4073, 29} true;
  assume {:verifier.code 0} true;
  $i52 := $add.bv64($i51, $i50);
  // WARNING: %71 = add i64 %70, %69, !dbg !4461, !verifier.code !4295
  call {:cexpr "__cil_tmp46"} boogie_si_record_bv64($i52);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4074, 19} true;
  assume {:verifier.code 0} true;
  $p53 := $i2p.bv64.ref($i52);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4074, 17} true;
  assume {:verifier.code 0} true;
  $p54 := $load.bytes.ref($M.1, $p53);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4075, 17} true;
  assume {:verifier.code 0} true;
  $i55 := $p2i.ref.bv64($p54);
  // WARNING: %74 = ptrtoint %struct.urb* %73 to i64, !dbg !4468, !verifier.code !4295
  call {:cexpr "__cil_tmp48"} boogie_si_record_bv64($i55);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4076, 19} true;
  assume {:verifier.code 0} true;
  $i56 := $eq.bv64($i55, $i49);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4076, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i56 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4078, 24} true;
  assume {:verifier.code 0} true;
  $i57 := $add.bv64(1688bv64, 0bv64);
  // WARNING: %77 = add i64 1688, 0, !dbg !4476, !verifier.code !4295
  call {:cexpr "__cil_tmp50"} boogie_si_record_bv64($i57);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4079, 19} true;
  assume {:verifier.code 0} true;
  $i58 := $p2i.ref.bv64($p5);
  // WARNING: %78 = ptrtoint %struct.gspca_dev* %6 to i64, !dbg !4480, !verifier.code !4295
  call {:cexpr "__cil_tmp51"} boogie_si_record_bv64($i58);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4080, 31} true;
  assume {:verifier.code 0} true;
  $i59 := $add.bv64($i58, $i57);
  // WARNING: %79 = add i64 %78, %77, !dbg !4483, !verifier.code !4295
  call {:cexpr "__cil_tmp52"} boogie_si_record_bv64($i59);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4081, 14} true;
  assume {:verifier.code 0} true;
  $p60 := $i2p.bv64.ref($i59);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4081, 12} true;
  assume {:verifier.code 0} true;
  $p61 := $load.bytes.ref($M.1, $p60);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4082, 3} true;
  assume {:verifier.code 0} true;
  $p62 := $p61;
  goto $bb22;
$bb21:
  assume !(($i56 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4084, 24} true;
  assume {:verifier.code 0} true;
  $i63 := $add.bv64(1688bv64, 16bv64);
  // WARNING: %83 = add i64 1688, 16, !dbg !4493, !verifier.code !4295
  call {:cexpr "__cil_tmp54"} boogie_si_record_bv64($i63);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4085, 19} true;
  assume {:verifier.code 0} true;
  $i64 := $p2i.ref.bv64($p5);
  // WARNING: %84 = ptrtoint %struct.gspca_dev* %6 to i64, !dbg !4497, !verifier.code !4295
  call {:cexpr "__cil_tmp55"} boogie_si_record_bv64($i64);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4086, 31} true;
  assume {:verifier.code 0} true;
  $i65 := $add.bv64($i64, $i63);
  // WARNING: %85 = add i64 %84, %83, !dbg !4500, !verifier.code !4295
  call {:cexpr "__cil_tmp56"} boogie_si_record_bv64($i65);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4087, 14} true;
  assume {:verifier.code 0} true;
  $p66 := $i2p.bv64.ref($i65);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4087, 12} true;
  assume {:verifier.code 0} true;
  $p67 := $load.bytes.ref($M.1, $p66);
  assume {:verifier.code 0} true;
  $p62 := $p67;
  goto $bb22;
$bb22:
  assume {:verifier.code 0} true;
  // WARNING: %.02 = phi %struct.urb* [ %81, %76 ], [ %87, %82 ], !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4239, 18} true;
  assume {:verifier.code 0} true;
  $i68 := $p2i.ref.bv64($p0);
  // WARNING: %89 = ptrtoint %struct.urb* %0 to i64, !dbg !4507, !verifier.code !4295
  call {:cexpr "__cil_tmp131"} boogie_si_record_bv64($i68);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4240, 31} true;
  assume {:verifier.code 0} true;
  $i69 := $add.bv64($i68, 164bv64);
  // WARNING: %90 = add i64 %89, 164, !dbg !4511, !verifier.code !4295
  call {:cexpr "__cil_tmp132"} boogie_si_record_bv64($i69);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4241, 20} true;
  assume {:verifier.code 0} true;
  $p70 := $i2p.bv64.ref($i69);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4241, 18} true;
  assume {:verifier.code 0} true;
  $i71 := $load.bytes.bv32($M.1, $p70);
  // WARNING: %92 = load i32, i32* %91, align 4, !dbg !4515, !verifier.code !4295
  call {:cexpr "__cil_tmp133"} boogie_si_record_bv32($i71);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4242, 20} true;
  assume {:verifier.code 0} true;
  $i72 := $sgt.bv32($i71, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4242, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i72} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i72 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4242, 7} true;
  assume {:verifier.code 0} true;
  $i73 := 0bv32;
  goto $bb26;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4242, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i72 == 1bv1));
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4245, 5} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb26:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4243, 5} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4094, 17} true;
  assume {:verifier.code 0} true;
  $i74 := $sext.bv32.bv64($i73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4094, 19} true;
  assume {:verifier.code 0} true;
  $i75 := $mul.bv64($i74, 16bv64);
  // WARNING: %96 = mul i64 %95, 16, !dbg !4523, !verifier.code !4295
  call {:cexpr "__cil_tmp57"} boogie_si_record_bv64($i75);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4095, 29} true;
  assume {:verifier.code 0} true;
  $i76 := $add.bv64($i75, 8bv64);
  // WARNING: %97 = add i64 %96, 8, !dbg !4526, !verifier.code !4295
  call {:cexpr "__cil_tmp58"} boogie_si_record_bv64($i76);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4096, 21} true;
  assume {:verifier.code 0} true;
  $i77 := $add.bv64(192bv64, $i76);
  // WARNING: %98 = add i64 192, %97, !dbg !4529, !verifier.code !4295
  call {:cexpr "__cil_tmp59"} boogie_si_record_bv64($i77);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4097, 17} true;
  assume {:verifier.code 0} true;
  $i78 := $p2i.ref.bv64($p62);
  // WARNING: %99 = ptrtoint %struct.urb* %.02 to i64, !dbg !4532, !verifier.code !4295
  call {:cexpr "__cil_tmp60"} boogie_si_record_bv64($i78);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4098, 29} true;
  assume {:verifier.code 0} true;
  $i79 := $add.bv64($i78, $i77);
  // WARNING: %100 = add i64 %99, %98, !dbg !4535, !verifier.code !4295
  call {:cexpr "__cil_tmp61"} boogie_si_record_bv64($i79);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4099, 19} true;
  assume {:verifier.code 0} true;
  $p80 := $i2p.bv64.ref($i79);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4099, 17} true;
  assume {:verifier.code 0} true;
  $i81 := $load.bytes.bv32($M.1, $p80);
  // WARNING: %102 = load i32, i32* %101, align 4, !dbg !4539, !verifier.code !4295
  call {:cexpr "__cil_tmp62"} boogie_si_record_bv32($i81);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4100, 19} true;
  assume {:verifier.code 0} true;
  $i82 := $ne.bv32($i81, 64bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4100, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i82} true;
  goto $bb28, $bb29;
$bb28:
  assume ($i82 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4101, 19} true;
  assume {:verifier.code 0} true;
  $i83 := $p2i.ref.bv64($p5);
  // WARNING: %105 = ptrtoint %struct.gspca_dev* %6 to i64, !dbg !4545, !verifier.code !4295
  call {:cexpr "__cil_tmp63"} boogie_si_record_bv64($i83);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4102, 31} true;
  assume {:verifier.code 0} true;
  $i84 := $add.bv64($i83, 3442bv64);
  // WARNING: %106 = add i64 %105, 3442, !dbg !4549, !verifier.code !4295
  call {:cexpr "__cil_tmp64"} boogie_si_record_bv64($i84);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4103, 7} true;
  assume {:verifier.code 0} true;
  $p85 := $i2p.bv64.ref($i84);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4103, 28} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv8($M.1, $p85, 0bv8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4104, 5} true;
  assume {:verifier.code 0} true;
  $i86 := $i73;
  goto $bb30;
$bb29:
  assume !(($i82 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4107, 19} true;
  assume {:verifier.code 0} true;
  $i87 := $sext.bv32.bv64($i73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4107, 21} true;
  assume {:verifier.code 0} true;
  $i88 := $mul.bv64($i87, 16bv64);
  // WARNING: %110 = mul i64 %109, 16, !dbg !4558, !verifier.code !4295
  call {:cexpr "__cil_tmp65"} boogie_si_record_bv64($i88);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4108, 31} true;
  assume {:verifier.code 0} true;
  $i89 := $add.bv64($i88, 8bv64);
  // WARNING: %111 = add i64 %110, 8, !dbg !4561, !verifier.code !4295
  call {:cexpr "__cil_tmp66"} boogie_si_record_bv64($i89);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4109, 23} true;
  assume {:verifier.code 0} true;
  $i90 := $add.bv64(192bv64, $i89);
  // WARNING: %112 = add i64 192, %111, !dbg !4564, !verifier.code !4295
  call {:cexpr "__cil_tmp67"} boogie_si_record_bv64($i90);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4110, 19} true;
  assume {:verifier.code 0} true;
  $i91 := $p2i.ref.bv64($p0);
  // WARNING: %113 = ptrtoint %struct.urb* %0 to i64, !dbg !4567, !verifier.code !4295
  call {:cexpr "__cil_tmp68"} boogie_si_record_bv64($i91);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4111, 31} true;
  assume {:verifier.code 0} true;
  $i92 := $add.bv64($i91, $i90);
  // WARNING: %114 = add i64 %113, %112, !dbg !4570, !verifier.code !4295
  call {:cexpr "__cil_tmp69"} boogie_si_record_bv64($i92);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4112, 21} true;
  assume {:verifier.code 0} true;
  $p93 := $i2p.bv64.ref($i92);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4112, 19} true;
  assume {:verifier.code 0} true;
  $i94 := $load.bytes.bv32($M.1, $p93);
  // WARNING: %116 = load i32, i32* %115, align 4, !dbg !4574, !verifier.code !4295
  call {:cexpr "__cil_tmp70"} boogie_si_record_bv32($i94);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4113, 21} true;
  assume {:verifier.code 0} true;
  $i95 := $ne.bv32($i94, 64bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4113, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i95} true;
  goto $bb31, $bb32;
$bb30:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4236, 9} true;
  assume {:verifier.code 0} true;
  $i176 := $add.bv32($i86, 1bv32);
  // WARNING: %217 = add nsw i32 %.014, 1, !dbg !4831, !verifier.code !4295
  call {:cexpr "i"} boogie_si_record_bv32($i176);
  // WARNING: call void @llvm.dbg.value(metadata i32 %217, i64 0, metadata !5151, metadata !4293), !dbg !5152, !verifier.code !4295
  // WARNING: call void @llvm.dbg.value(metadata i64 %89, i64 0, metadata !5155, metadata !4293), !dbg !5156, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4241, 18} true;
  assume {:verifier.code 0} true;
  $i177 := $load.bytes.bv32($M.1, $p70);
  // WARNING: %218 = load i32, i32* %91, align 4, !dbg !4515, !verifier.code !4295
  call {:cexpr "__cil_tmp133"} boogie_si_record_bv32($i177);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4242, 20} true;
  assume {:verifier.code 0} true;
  $i178 := $sgt.bv32($i177, $i176);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4242, 7} true;
  assume {:verifier.code 0} true;
  $i73 := $i176;
  assume {:branchcond $i178} true;
  goto $bb54, $bb55;
$bb31:
  assume ($i95 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4114, 21} true;
  assume {:verifier.code 0} true;
  $i96 := $p2i.ref.bv64($p5);
  // WARNING: %119 = ptrtoint %struct.gspca_dev* %6 to i64, !dbg !4580, !verifier.code !4295
  call {:cexpr "__cil_tmp71"} boogie_si_record_bv64($i96);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4115, 33} true;
  assume {:verifier.code 0} true;
  $i97 := $add.bv64($i96, 3442bv64);
  // WARNING: %120 = add i64 %119, 3442, !dbg !4584, !verifier.code !4295
  call {:cexpr "__cil_tmp72"} boogie_si_record_bv64($i97);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4116, 9} true;
  assume {:verifier.code 0} true;
  $p98 := $i2p.bv64.ref($i97);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4116, 30} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv8($M.1, $p98, 0bv8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4117, 7} true;
  assume {:verifier.code 0} true;
  $i86 := $i73;
  goto $bb30;
$bb32:
  assume !(($i95 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb33;
$bb33:
  assume {:verifier.code 0} true;
  goto $bb34;
$bb34:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4124, 17} true;
  assume {:verifier.code 0} true;
  $i99 := $sext.bv32.bv64($i73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4124, 19} true;
  assume {:verifier.code 0} true;
  $i100 := $mul.bv64($i99, 16bv64);
  // WARNING: %126 = mul i64 %125, 16, !dbg !4591, !verifier.code !4295
  call {:cexpr "__cil_tmp73"} boogie_si_record_bv64($i100);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4125, 29} true;
  assume {:verifier.code 0} true;
  $i101 := $add.bv64($i100, 12bv64);
  // WARNING: %127 = add i64 %126, 12, !dbg !4594, !verifier.code !4295
  call {:cexpr "__cil_tmp74"} boogie_si_record_bv64($i101);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4126, 21} true;
  assume {:verifier.code 0} true;
  $i102 := $add.bv64(192bv64, $i101);
  // WARNING: %128 = add i64 192, %127, !dbg !4597, !verifier.code !4295
  call {:cexpr "__cil_tmp75"} boogie_si_record_bv64($i102);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4127, 17} true;
  assume {:verifier.code 0} true;
  $i103 := $p2i.ref.bv64($p62);
  // WARNING: %129 = ptrtoint %struct.urb* %.02 to i64, !dbg !4600, !verifier.code !4295
  call {:cexpr "__cil_tmp76"} boogie_si_record_bv64($i103);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4128, 29} true;
  assume {:verifier.code 0} true;
  $i104 := $add.bv64($i103, $i102);
  // WARNING: %130 = add i64 %129, %128, !dbg !4603, !verifier.code !4295
  call {:cexpr "__cil_tmp77"} boogie_si_record_bv64($i104);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4129, 10} true;
  assume {:verifier.code 0} true;
  $p105 := $i2p.bv64.ref($i104);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4129, 8} true;
  assume {:verifier.code 0} true;
  $i106 := $load.bytes.bv32($M.1, $p105);
  // WARNING: %132 = load i32, i32* %131, align 4, !dbg !4607, !verifier.code !4295
  call {:cexpr "st"} boogie_si_record_bv32($i106);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4130, 10} true;
  assume {:verifier.code 0} true;
  $i107 := $eq.bv32($i106, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4130, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i107} true;
  goto $bb35, $bb36;
$bb35:
  assume ($i107 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4131, 19} true;
  assume {:verifier.code 0} true;
  $i108 := $sext.bv32.bv64($i73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4131, 21} true;
  assume {:verifier.code 0} true;
  $i109 := $mul.bv64($i108, 16bv64);
  // WARNING: %136 = mul i64 %135, 16, !dbg !4615, !verifier.code !4295
  call {:cexpr "__cil_tmp78"} boogie_si_record_bv64($i109);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4132, 31} true;
  assume {:verifier.code 0} true;
  $i110 := $add.bv64($i109, 12bv64);
  // WARNING: %137 = add i64 %136, 12, !dbg !4618, !verifier.code !4295
  call {:cexpr "__cil_tmp79"} boogie_si_record_bv64($i110);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4133, 23} true;
  assume {:verifier.code 0} true;
  $i111 := $add.bv64(192bv64, $i110);
  // WARNING: %138 = add i64 192, %137, !dbg !4621, !verifier.code !4295
  call {:cexpr "__cil_tmp80"} boogie_si_record_bv64($i111);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4134, 19} true;
  assume {:verifier.code 0} true;
  $i112 := $p2i.ref.bv64($p0);
  // WARNING: %139 = ptrtoint %struct.urb* %0 to i64, !dbg !4624, !verifier.code !4295
  call {:cexpr "__cil_tmp81"} boogie_si_record_bv64($i112);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4135, 31} true;
  assume {:verifier.code 0} true;
  $i113 := $add.bv64($i112, $i111);
  // WARNING: %140 = add i64 %139, %138, !dbg !4627, !verifier.code !4295
  call {:cexpr "__cil_tmp82"} boogie_si_record_bv64($i113);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4136, 12} true;
  assume {:verifier.code 0} true;
  $p114 := $i2p.bv64.ref($i113);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4136, 10} true;
  assume {:verifier.code 0} true;
  $i115 := $load.bytes.bv32($M.1, $p114);
  // WARNING: %142 = load i32, i32* %141, align 4, !dbg !4631, !verifier.code !4295
  call {:cexpr "st"} boogie_si_record_bv32($i115);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4137, 3} true;
  assume {:verifier.code 0} true;
  $i116 := $i115;
  goto $bb37;
$bb36:
  assume !(($i107 == 1bv1));
  assume {:verifier.code 0} true;
  $i116 := $i106;
  goto $bb37;
$bb37:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4140, 10} true;
  assume {:verifier.code 0} true;
  $i117 := $ne.bv32($i116, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4140, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i117} true;
  goto $bb38, $bb39;
$bb38:
  assume ($i117 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4142, 5} true;
  assume {:verifier.code 0} true;
  call $i118 := printk.ref.bv32.bv32(.str.3, $i73, $i116);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4143, 19} true;
  assume {:verifier.code 0} true;
  $i119 := $p2i.ref.bv64($p5);
  // WARNING: %148 = ptrtoint %struct.gspca_dev* %6 to i64, !dbg !4639, !verifier.code !4295
  call {:cexpr "__cil_tmp83"} boogie_si_record_bv64($i119);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4144, 31} true;
  assume {:verifier.code 0} true;
  $i120 := $add.bv64($i119, 3442bv64);
  // WARNING: %149 = add i64 %148, 3442, !dbg !4642, !verifier.code !4295
  call {:cexpr "__cil_tmp84"} boogie_si_record_bv64($i120);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4145, 7} true;
  assume {:verifier.code 0} true;
  $p121 := $i2p.bv64.ref($i120);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4145, 28} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv8($M.1, $p121, 0bv8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4147, 5} true;
  assume {:verifier.code 0} true;
  $i86 := $i73;
  goto $bb30;
$bb39:
  assume !(($i117 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb40;
$bb40:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4151, 17} true;
  assume {:verifier.code 0} true;
  $i122 := $sext.bv32.bv64($i73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4151, 19} true;
  assume {:verifier.code 0} true;
  $i123 := $mul.bv64($i122, 16bv64);
  // WARNING: %154 = mul i64 %153, 16, !dbg !4649, !verifier.code !4295
  call {:cexpr "__cil_tmp85"} boogie_si_record_bv64($i123);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4152, 21} true;
  assume {:verifier.code 0} true;
  $i124 := $add.bv64(192bv64, $i123);
  // WARNING: %155 = add i64 192, %154, !dbg !4652, !verifier.code !4295
  call {:cexpr "__cil_tmp86"} boogie_si_record_bv64($i124);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4153, 17} true;
  assume {:verifier.code 0} true;
  $i125 := $p2i.ref.bv64($p62);
  // WARNING: %156 = ptrtoint %struct.urb* %.02 to i64, !dbg !4655, !verifier.code !4295
  call {:cexpr "__cil_tmp87"} boogie_si_record_bv64($i125);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4154, 29} true;
  assume {:verifier.code 0} true;
  $i126 := $add.bv64($i125, $i124);
  // WARNING: %157 = add i64 %156, %155, !dbg !4658, !verifier.code !4295
  call {:cexpr "__cil_tmp88"} boogie_si_record_bv64($i126);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4155, 19} true;
  assume {:verifier.code 0} true;
  $p127 := $i2p.bv64.ref($i126);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4155, 17} true;
  assume {:verifier.code 0} true;
  $i128 := $load.bytes.bv32($M.1, $p127);
  // WARNING: %159 = load i32, i32* %158, align 4, !dbg !4662, !verifier.code !4295
  call {:cexpr "__cil_tmp89"} boogie_si_record_bv32($i128);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4156, 17} true;
  assume {:verifier.code 0} true;
  $i129 := $zext.bv32.bv64($i128);
  // WARNING: %160 = zext i32 %159 to i64, !dbg !4665, !verifier.code !4295
  call {:cexpr "__cil_tmp90"} boogie_si_record_bv64($i129);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4157, 17} true;
  assume {:verifier.code 0} true;
  $i130 := $p2i.ref.bv64($p62);
  // WARNING: %161 = ptrtoint %struct.urb* %.02 to i64, !dbg !4668, !verifier.code !4295
  call {:cexpr "__cil_tmp91"} boogie_si_record_bv64($i130);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4158, 29} true;
  assume {:verifier.code 0} true;
  $i131 := $add.bv64($i130, 104bv64);
  // WARNING: %162 = add i64 %161, 104, !dbg !4671, !verifier.code !4295
  call {:cexpr "__cil_tmp92"} boogie_si_record_bv64($i131);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4159, 19} true;
  assume {:verifier.code 0} true;
  $p132 := $i2p.bv64.ref($i131);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4159, 17} true;
  assume {:verifier.code 0} true;
  $p133 := $load.bytes.ref($M.1, $p132);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4161, 22} true;
  assume {:verifier.code 0} true;
  $p134 := $add.ref($p133, $mul.ref($bv2int.64($i129), 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4163, 17} true;
  assume {:verifier.code 0} true;
  $i135 := $load.bytes.bv8($M.1, $p134);
  // WARNING: %166 = load i8, i8* %165, align 1, !dbg !4683, !verifier.code !4295
  call {:cexpr "__cil_tmp95"} boogie_si_record_bv8($i135);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4164, 17} true;
  assume {:verifier.code 0} true;
  $i136 := $zext.bv8.bv32($i135);
  // WARNING: %167 = zext i8 %166 to i32, !dbg !4687, !verifier.code !4295
  call {:cexpr "__cil_tmp96"} boogie_si_record_bv32($i136);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4165, 19} true;
  assume {:verifier.code 0} true;
  $i137 := $eq.bv32($i136, 128bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4165, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i137} true;
  goto $bb41, $bb42;
$bb41:
  assume ($i137 == 1bv1);
  $i138 := $add.bv64($i129, 1bv64);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4167, 24} true;
  assume {:verifier.code 0} true;
  $p139 := $add.ref($p133, $mul.ref($bv2int.64($i138), 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4168, 19} true;
  assume {:verifier.code 0} true;
  $i140 := $load.bytes.bv8($M.1, $p139);
  // WARNING: %171 = load i8, i8* %170, align 1, !dbg !4698, !verifier.code !4295
  call {:cexpr "__cil_tmp98"} boogie_si_record_bv8($i140);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4169, 19} true;
  assume {:verifier.code 0} true;
  $i141 := $zext.bv8.bv32($i140);
  // WARNING: %172 = zext i8 %171 to i32, !dbg !4701, !verifier.code !4295
  call {:cexpr "__cil_tmp99"} boogie_si_record_bv32($i141);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4170, 32} true;
  assume {:verifier.code 0} true;
  $i142 := $and.bv32($i141, 254bv32);
  // WARNING: %173 = and i32 %172, 254, !dbg !4704, !verifier.code !4295
  call {:cexpr "__cil_tmp100"} boogie_si_record_bv32($i142);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4171, 22} true;
  assume {:verifier.code 0} true;
  $i143 := $eq.bv32($i142, 186bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4171, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i143} true;
  goto $bb43, $bb44;
$bb42:
  assume !(($i137 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4185, 10} true;
  assume {:verifier.code 0} true;
  goto $bb46;
$bb43:
  assume ($i143 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4175, 7} true;
  assume {:verifier.code 0} true;
  call gspca_frame_add($p5, 3bv32, $0.ref, 0bv32);
  // WARNING: call void @gspca_frame_add(%struct.gspca_dev* %6, i32 3, i8* null, i32 0), !dbg !4714, !verifier.code !4295
  $i144 := $add.bv64($i129, 4bv64);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4178, 35} true;
  assume {:verifier.code 0} true;
  $p145 := $add.ref($p133, $mul.ref($bv2int.64($i144), 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4179, 7} true;
  assume {:verifier.code 0} true;
  call gspca_frame_add($p5, 1bv32, $p145, 60bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4181, 5} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb44:
  assume !(($i143 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4182, 7} true;
  assume {:verifier.code 0} true;
  goto $bb46;
$bb45:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4185, 3} true;
  assume {:verifier.code 0} true;
  goto $bb47;
$bb46:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4188, 20} true;
  assume {:verifier.code 0} true;
  $i146 := $load.bytes.bv8($M.1, $p134);
  // WARNING: %181 = load i8, i8* %165, align 1, !dbg !4731, !verifier.code !4295
  call {:cexpr "__cil_tmp106"} boogie_si_record_bv8($i146);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4189, 20} true;
  assume {:verifier.code 0} true;
  $i147 := $zext.bv8.bv32($i146);
  // WARNING: %182 = zext i8 %181 to i32, !dbg !4736, !verifier.code !4295
  call {:cexpr "__cil_tmp107"} boogie_si_record_bv32($i147);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4190, 22} true;
  assume {:verifier.code 0} true;
  $i148 := $eq.bv32($i147, 4bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4190, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i148} true;
  goto $bb48, $bb49;
$bb47:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4220, 18} true;
  assume {:verifier.code 0} true;
  $i163 := $sext.bv32.bv64($i73);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4220, 20} true;
  assume {:verifier.code 0} true;
  $i164 := $mul.bv64($i163, 16bv64);
  // WARNING: %204 = mul i64 %203, 16, !dbg !4793, !verifier.code !4295
  call {:cexpr "__cil_tmp119"} boogie_si_record_bv64($i164);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4221, 22} true;
  assume {:verifier.code 0} true;
  $i165 := $add.bv64(192bv64, $i164);
  // WARNING: %205 = add i64 192, %204, !dbg !4796, !verifier.code !4295
  call {:cexpr "__cil_tmp120"} boogie_si_record_bv64($i165);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4222, 18} true;
  assume {:verifier.code 0} true;
  $i166 := $p2i.ref.bv64($p0);
  // WARNING: %206 = ptrtoint %struct.urb* %0 to i64, !dbg !4799, !verifier.code !4295
  call {:cexpr "__cil_tmp121"} boogie_si_record_bv64($i166);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4223, 31} true;
  assume {:verifier.code 0} true;
  $i167 := $add.bv64($i166, $i165);
  // WARNING: %207 = add i64 %206, %205, !dbg !4802, !verifier.code !4295
  call {:cexpr "__cil_tmp122"} boogie_si_record_bv64($i167);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4224, 20} true;
  assume {:verifier.code 0} true;
  $p168 := $i2p.bv64.ref($i167);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4224, 18} true;
  assume {:verifier.code 0} true;
  $i169 := $load.bytes.bv32($M.1, $p168);
  // WARNING: %209 = load i32, i32* %208, align 4, !dbg !4806, !verifier.code !4295
  call {:cexpr "__cil_tmp123"} boogie_si_record_bv32($i169);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4225, 18} true;
  assume {:verifier.code 0} true;
  $i170 := $zext.bv32.bv64($i169);
  // WARNING: %210 = zext i32 %209 to i64, !dbg !4809, !verifier.code !4295
  call {:cexpr "__cil_tmp124"} boogie_si_record_bv64($i170);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4226, 18} true;
  assume {:verifier.code 0} true;
  $i171 := $p2i.ref.bv64($p0);
  // WARNING: %211 = ptrtoint %struct.urb* %0 to i64, !dbg !4812, !verifier.code !4295
  call {:cexpr "__cil_tmp125"} boogie_si_record_bv64($i171);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4227, 31} true;
  assume {:verifier.code 0} true;
  $i172 := $add.bv64($i171, 104bv64);
  // WARNING: %212 = add i64 %211, 104, !dbg !4815, !verifier.code !4295
  call {:cexpr "__cil_tmp126"} boogie_si_record_bv64($i172);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4228, 20} true;
  assume {:verifier.code 0} true;
  $p173 := $i2p.bv64.ref($i172);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4228, 18} true;
  assume {:verifier.code 0} true;
  $p174 := $load.bytes.ref($M.1, $p173);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4230, 23} true;
  assume {:verifier.code 0} true;
  $p175 := $add.ref($p174, $mul.ref($bv2int.64($i170), 1));
  // WARNING: call void @llvm.dbg.value(metadata i8* %215, i64 0, metadata !5327, metadata !4293), !dbg !5328, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4233, 3} true;
  assume {:verifier.code 0} true;
  call gspca_frame_add($p5, 2bv32, $p175, 64bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4234, 3} true;
  assume {:verifier.code 0} true;
  $i86 := $i73;
  goto $bb30;
$bb48:
  assume ($i148 == 1bv1);
  $i149 := $add.bv64($i129, 1bv64);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4192, 27} true;
  assume {:verifier.code 0} true;
  $p150 := $add.ref($p133, $mul.ref($bv2int.64($i149), 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4193, 22} true;
  assume {:verifier.code 0} true;
  $i151 := $load.bytes.bv8($M.1, $p150);
  // WARNING: %186 = load i8, i8* %185, align 1, !dbg !4747, !verifier.code !4295
  call {:cexpr "__cil_tmp109"} boogie_si_record_bv8($i151);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4194, 22} true;
  assume {:verifier.code 0} true;
  $i152 := $zext.bv8.bv32($i151);
  // WARNING: %187 = zext i8 %186 to i32, !dbg !4750, !verifier.code !4295
  call {:cexpr "__cil_tmp110"} boogie_si_record_bv32($i152);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4195, 35} true;
  assume {:verifier.code 0} true;
  $i153 := $and.bv32($i152, 254bv32);
  // WARNING: %188 = and i32 %187, 254, !dbg !4753, !verifier.code !4295
  call {:cexpr "__cil_tmp111"} boogie_si_record_bv32($i153);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4196, 24} true;
  assume {:verifier.code 0} true;
  $i154 := $eq.bv32($i153, 186bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4196, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i154} true;
  goto $bb50, $bb51;
$bb49:
  assume !(($i148 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4211, 22} true;
  assume {:verifier.code 0} true;
  $i160 := $p2i.ref.bv64($p5);
  // WARNING: %198 = ptrtoint %struct.gspca_dev* %6 to i64, !dbg !4781, !verifier.code !4295
  call {:cexpr "__cil_tmp117"} boogie_si_record_bv64($i160);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4212, 35} true;
  assume {:verifier.code 0} true;
  $i161 := $add.bv64($i160, 3442bv64);
  // WARNING: %199 = add i64 %198, 3442, !dbg !4785, !verifier.code !4295
  call {:cexpr "__cil_tmp118"} boogie_si_record_bv64($i161);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4213, 9} true;
  assume {:verifier.code 0} true;
  $p162 := $i2p.bv64.ref($i161);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4213, 31} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv8($M.1, $p162, 0bv8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4214, 7} true;
  assume {:verifier.code 0} true;
  $i86 := $i73;
  goto $bb30;
$bb50:
  assume ($i154 == 1bv1);
  $i155 := $add.bv64($i129, 4bv64);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4200, 37} true;
  assume {:verifier.code 0} true;
  $p156 := $add.ref($p133, $mul.ref($bv2int.64($i155), 1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4201, 9} true;
  assume {:verifier.code 0} true;
  call gspca_frame_add($p5, 2bv32, $p156, 60bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4203, 7} true;
  assume {:verifier.code 0} true;
  goto $bb52;
$bb51:
  assume !(($i154 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4204, 24} true;
  assume {:verifier.code 0} true;
  $i157 := $p2i.ref.bv64($p5);
  // WARNING: %193 = ptrtoint %struct.gspca_dev* %6 to i64, !dbg !4770, !verifier.code !4295
  call {:cexpr "__cil_tmp115"} boogie_si_record_bv64($i157);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4205, 37} true;
  assume {:verifier.code 0} true;
  $i158 := $add.bv64($i157, 3442bv64);
  // WARNING: %194 = add i64 %193, 3442, !dbg !4774, !verifier.code !4295
  call {:cexpr "__cil_tmp116"} boogie_si_record_bv64($i158);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4206, 11} true;
  assume {:verifier.code 0} true;
  $p159 := $i2p.bv64.ref($i158);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4206, 33} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.bytes.bv8($M.1, $p159, 0bv8);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4207, 9} true;
  assume {:verifier.code 0} true;
  $i86 := $i73;
  goto $bb30;
$bb52:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4210, 5} true;
  assume {:verifier.code 0} true;
  goto $bb53;
$bb53:
  assume {:verifier.code 0} true;
  goto $bb47;
$bb54:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4242, 7} true;
  assume {:verifier.code 0} true;
  assume ($i178 == 1bv1);
  goto $bb26;
$bb55:
  assume !(($i178 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4242, 7} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb56:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4250, 8} true;
  assume {:verifier.code 0} true;
  call $i179 := ldv_usb_submit_urb_21($p62, 32bv32);
  // WARNING: %223 = call i32 @ldv_usb_submit_urb_21(%struct.urb* %.02, i32 32), !dbg !4836, !verifier.code !4295
  call {:cexpr "st"} boogie_si_record_bv32($i179);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4252, 10} true;
  assume {:verifier.code 0} true;
  $i180 := $slt.bv32($i179, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4252, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i180} true;
  goto $bb57, $bb58;
$bb57:
  assume ($i180 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4254, 5} true;
  assume {:verifier.code 0} true;
  call $i181 := printk.ref.bv32(.str.4, $i179);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4256, 3} true;
  assume {:verifier.code 0} true;
  goto $bb59;
$bb58:
  assume !(($i180 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb59;
$bb59:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4260, 8} true;
  assume {:verifier.code 0} true;
  call $i182 := ldv_usb_submit_urb_22($p0, 32bv32);
  // WARNING: %229 = call i32 @ldv_usb_submit_urb_22(%struct.urb* %0, i32 32), !dbg !4845, !verifier.code !4295
  call {:cexpr "st"} boogie_si_record_bv32($i182);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4262, 10} true;
  assume {:verifier.code 0} true;
  $i183 := $slt.bv32($i182, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4262, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i183} true;
  goto $bb60, $bb61;
$bb60:
  assume ($i183 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4264, 5} true;
  assume {:verifier.code 0} true;
  call $i184 := printk.ref.bv32(.str.5, $i182);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4266, 3} true;
  assume {:verifier.code 0} true;
  goto $bb62;
$bb61:
  assume !(($i183 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb62;
$bb62:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4269, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const gspca_frame_add: ref;
axiom (gspca_frame_add == $sub.ref(0, 37567));
procedure  gspca_frame_add($p0: ref, $i1: bv32, $p2: ref, $i3: bv32);
const ldv_usb_submit_urb_21: ref;
axiom (ldv_usb_submit_urb_21 == $sub.ref(0, 38599));
procedure  ldv_usb_submit_urb_21($p0: ref, $i1: bv32)
  returns ($r: bv32)
{
  var $i2: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.urb* %0, i64 0, metadata !5505, metadata !4293), !dbg !5506, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4547, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_alloc_flags($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4548, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := usb_submit_urb($p0, $i1);
  // WARNING: %3 = call i32 @usb_submit_urb(%struct.urb* %0, i32 %1), !dbg !4303, !verifier.code !4297
  call {:cexpr "tmp"} boogie_si_record_bv32($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4550, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ldv_usb_submit_urb_22: ref;
axiom (ldv_usb_submit_urb_22 == $sub.ref(0, 39631));
procedure  ldv_usb_submit_urb_22($p0: ref, $i1: bv32)
  returns ($r: bv32)
{
  var $i2: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.urb* %0, i64 0, metadata !5517, metadata !4293), !dbg !5518, !verifier.code !4295
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4558, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_alloc_flags($i1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4559, 9} true;
  assume {:verifier.code 0} true;
  call $i2 := usb_submit_urb($p0, $i1);
  // WARNING: %3 = call i32 @usb_submit_urb(%struct.urb* %0, i32 %1), !dbg !4303, !verifier.code !4297
  call {:cexpr "tmp"} boogie_si_record_bv32($i2);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4561, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const ldv_check_alloc_flags: ref;
axiom (ldv_check_alloc_flags == $sub.ref(0, 40663));
procedure  ldv_check_alloc_flags($i0: bv32)
{
  var $i1: bv32;
  var $i2: bv1;
  var $i3: bv1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4427, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $M.2;
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4427, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.bv32($i1, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4427, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4428, 15} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.bv32($i0, 32bv32);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4428, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i2 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb3:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4430, 7} true;
  assume {:verifier.code 0} true;
  call ldv_blast_assert();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4432, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i3 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4435, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4438, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const usb_submit_urb: ref;
axiom (usb_submit_urb == $sub.ref(0, 41695));
procedure  usb_submit_urb($p0: ref, $i1: bv32)
  returns ($r: bv32);
const ldv_blast_assert: ref;
axiom (ldv_blast_assert == $sub.ref(0, 42727));
procedure  ldv_blast_assert()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4417, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4418, 10} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "/proj/SMACK/smac/43_1a_cilled_true-unreach-call_ok_nondet_linux-43_1a-drivers--media--video--gspca--gspca_benq.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-25EtN3.c", 4420, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const usb_alloc_coherent: ref;
axiom (usb_alloc_coherent == $sub.ref(0, 43759));
procedure  usb_alloc_coherent($p0: ref, $i1: bv64, $i2: bv32, $p3: ref)
  returns ($r: ref);
const usb_alloc_urb: ref;
axiom (usb_alloc_urb == $sub.ref(0, 44791));
procedure  usb_alloc_urb($i0: bv32, $i1: bv32)
  returns ($r: ref);
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 45823));
procedure  __VERIFIER_assume($i0: bv32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !5554, metadata !4293), !dbg !5555, !verifier.code !4295
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 34, 21} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 35, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 46855));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.bv32($p0: ref, p.1: bv32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 47887));
procedure  __SMACK_dummy($i0: bv32)
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 261, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_error: ref;
axiom (__VERIFIER_error == $sub.ref(0, 48919));
procedure  __VERIFIER_error()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 47, 3} true;
  assume {:verifier.code 1} true;
  assert false;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 51, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 49951));
procedure  __SMACK_nondet_char()
  returns ($r: bv8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 50983));
procedure  __SMACK_nondet_signed_char()
  returns ($r: bv8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 52015));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: bv8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 53047));
procedure  __SMACK_nondet_short()
  returns ($r: bv16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 54079));
procedure  __SMACK_nondet_signed_short()
  returns ($r: bv16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 55111));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: bv16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 56143));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: bv16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 57175));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: bv16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 58207));
procedure  __VERIFIER_nondet_int()
  returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv1;
  var $i3: bv1;
  var $i2: bv1;
  var $i4: bv32;
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 120, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_bv32($i0);
  // WARNING: %1 = call i32 @__SMACK_nondet_int(), !dbg !4292, !verifier.code !4293
  call {:cexpr "x"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.bv32($i0, $sub.bv32(0bv32, 2147483648bv32));
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0bv1;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.bv32($i0, 2147483647bv32);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1bv1));
  goto $bb3;
$bb3:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.bv1.bv32($i2);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 122, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 59239));
procedure  __SMACK_nondet_int()
  returns ($r: bv32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 60271));
procedure  __SMACK_nondet_signed_int()
  returns ($r: bv32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 61303));
procedure  __SMACK_nondet_unsigned()
  returns ($r: bv32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 62335));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: bv32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 63367));
procedure  __SMACK_nondet_long()
  returns ($r: bv64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 64399));
procedure  __SMACK_nondet_long_int()
  returns ($r: bv64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 65431));
procedure  __SMACK_nondet_signed_long()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 66463));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 67495));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 68527));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: bv64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 69559));
procedure  __SMACK_nondet_long_long()
  returns ($r: bv64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 70591));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 71623));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 72655));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 73687));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 74719));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: bv64);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 75751));
function {:inline} $bitcast.ref.ref(i: ref) returns (ref) {i}
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $min.bv128(i1: bv128, i2: bv128) returns (bv128) {if $slt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv96(i1: bv96, i2: bv96) returns (bv96) {if $slt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv88(i1: bv88, i2: bv88) returns (bv88) {if $slt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv64(i1: bv64, i2: bv64) returns (bv64) {if $slt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv56(i1: bv56, i2: bv56) returns (bv56) {if $slt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv48(i1: bv48, i2: bv48) returns (bv48) {if $slt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv40(i1: bv40, i2: bv40) returns (bv40) {if $slt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv32(i1: bv32, i2: bv32) returns (bv32) {if $slt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv24(i1: bv24, i2: bv24) returns (bv24) {if $slt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv16(i1: bv16, i2: bv16) returns (bv16) {if $slt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv8(i1: bv8, i2: bv8) returns (bv8) {if $slt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv128(i1: bv128, i2: bv128) returns (bv128) {if $sgt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv96(i1: bv96, i2: bv96) returns (bv96) {if $sgt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv88(i1: bv88, i2: bv88) returns (bv88) {if $sgt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv64(i1: bv64, i2: bv64) returns (bv64) {if $sgt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv56(i1: bv56, i2: bv56) returns (bv56) {if $sgt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv48(i1: bv48, i2: bv48) returns (bv48) {if $sgt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv40(i1: bv40, i2: bv40) returns (bv40) {if $sgt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv32(i1: bv32, i2: bv32) returns (bv32) {if $sgt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv24(i1: bv24, i2: bv24) returns (bv24) {if $sgt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv16(i1: bv16, i2: bv16) returns (bv16) {if $sgt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv8(i1: bv8, i2: bv8) returns (bv8) {if $sgt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ult.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ult.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ult.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ult.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ult.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ult.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ult.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ult.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ult.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ult.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ult.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ugt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ugt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ugt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ugt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ugt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ugt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ugt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ugt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ugt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ugt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ugt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then i1 else i2}
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) returns (bv128);
function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) returns (bv96);
function {:bvbuiltin "bvnot"} $not.bv88(i: bv88) returns (bv88);
function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) returns (bv64);
function {:bvbuiltin "bvnot"} $not.bv56(i: bv56) returns (bv56);
function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) returns (bv48);
function {:bvbuiltin "bvnot"} $not.bv40(i: bv40) returns (bv40);
function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) returns (bv32);
function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) returns (bv24);
function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) returns (bv16);
function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) returns (bv8);
function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) returns (bv1);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 == i2} function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 == i2} function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 == i2} function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 == i2} function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 == i2} function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 == i2} function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 == i2} function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 == i2} function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 == i2} function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 == i2} function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 == i2} function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 == i2} function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 != i2} function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 != i2} function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 != i2} function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 != i2} function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 != i2} function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 != i2} function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 != i2} function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 != i2} function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 != i2} function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 != i2} function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 != i2} function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 != i2} function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ule.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ule.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ule.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ule.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ule.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ule.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ule.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ule.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ule.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ule.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ule.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ule.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ult.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ult.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ult.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ult.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ult.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ult.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ult.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ult.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ult.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ult.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ult.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $uge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $uge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $uge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $uge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $uge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $uge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $uge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $uge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $uge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $uge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $uge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $uge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ugt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ugt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ugt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ugt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ugt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ugt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ugt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ugt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ugt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ugt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ugt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sle.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sle.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sle.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sle.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sle.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sle.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sle.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sle.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sle.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sle.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sle.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sle.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $slt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $slt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $slt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $slt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $slt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $slt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $slt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $slt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $slt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $slt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $slt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sgt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sgt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sgt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sgt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sgt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sgt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sgt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sgt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sgt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sgt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sgt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:inline} $trunc.bv128.bv96(i: bv128) returns (bv96) {i[96:0]}
function {:inline} $trunc.bv128.bv88(i: bv128) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv128.bv64(i: bv128) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv128.bv56(i: bv128) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv128.bv48(i: bv128) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv128.bv40(i: bv128) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv128.bv32(i: bv128) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv128.bv24(i: bv128) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv128.bv16(i: bv128) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv128.bv8(i: bv128) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv128.bv1(i: bv128) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv96.bv88(i: bv96) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv96.bv64(i: bv96) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv96.bv56(i: bv96) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv96.bv48(i: bv96) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv96.bv40(i: bv96) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv96.bv32(i: bv96) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv96.bv24(i: bv96) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv96.bv16(i: bv96) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv96.bv8(i: bv96) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv96.bv1(i: bv96) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv88.bv64(i: bv88) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv88.bv56(i: bv88) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv88.bv48(i: bv88) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv88.bv40(i: bv88) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv88.bv32(i: bv88) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv88.bv24(i: bv88) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv88.bv16(i: bv88) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv88.bv8(i: bv88) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv88.bv1(i: bv88) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv64.bv56(i: bv64) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv64.bv48(i: bv64) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv64.bv40(i: bv64) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv64.bv32(i: bv64) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv64.bv24(i: bv64) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv64.bv16(i: bv64) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv64.bv8(i: bv64) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv64.bv1(i: bv64) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv56.bv48(i: bv56) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv56.bv40(i: bv56) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv56.bv32(i: bv56) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv56.bv24(i: bv56) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv56.bv16(i: bv56) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv56.bv8(i: bv56) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv56.bv1(i: bv56) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv48.bv32(i: bv48) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv48.bv24(i: bv48) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv48.bv16(i: bv48) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv48.bv8(i: bv48) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv48.bv1(i: bv48) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv40.bv32(i: bv40) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv40.bv24(i: bv40) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv40.bv16(i: bv40) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv40.bv8(i: bv40) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv40.bv1(i: bv40) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv32.bv24(i: bv32) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv32.bv16(i: bv32) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv32.bv8(i: bv32) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv32.bv1(i: bv32) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv24.bv16(i: bv24) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv24.bv8(i: bv24) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv24.bv1(i: bv24) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv16.bv8(i: bv16) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv16.bv1(i: bv16) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv8.bv1(i: bv8) returns (bv1) {i[1:0]}
function {:inline} $zext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 1bv8}
function {:inline} $zext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 1bv16}
function {:inline} $zext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 1bv24}
function {:inline} $zext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 1bv32}
function {:inline} $zext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1bv40}
function {:inline} $zext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 1bv48}
function {:inline} $zext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 1bv56}
function {:inline} $zext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 1bv64}
function {:inline} $zext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 1bv88}
function {:inline} $zext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 1bv96}
function {:inline} $zext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 1bv128}
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $sext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 255bv8}
function {:inline} $sext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 65535bv16}
function {:inline} $sext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 16777215bv24}
function {:inline} $sext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 4294967295bv32}
function {:inline} $sext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1099511627775bv40}
function {:inline} $sext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 281474976710655bv48}
function {:inline} $sext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 72057594037927935bv56}
function {:inline} $sext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 18446744073709551615bv64}
function {:inline} $sext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88}
function {:inline} $sext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96}
function {:inline} $sext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128}
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) {i1 + i2}
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) {i1 + i2}
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) {i1 + i2}
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) {i1 + i2}
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) {i1 + i2}
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) {i1 + i2}
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) {i1 + i2}
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) {i1 + i2}
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) {i1 + i2}
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) {i1 + i2}
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) {i1 + i2}
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) {i1 + i2}
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) {i1 - i2}
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) {i1 - i2}
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) {i1 - i2}
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) {i1 - i2}
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) {i1 - i2}
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) {i1 - i2}
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) {i1 - i2}
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) {i1 - i2}
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) {i1 - i2}
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) {i1 - i2}
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) {i1 - i2}
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) {i1 - i2}
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) {i1 * i2}
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) {i1 * i2}
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) {i1 * i2}
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) {i1 * i2}
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) {i1 * i2}
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) {i1 * i2}
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) {i1 * i2}
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) {i1 * i2}
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) {i1 * i2}
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) {i1 * i2}
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) {i1 * i2}
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) {i1 * i2}
function {:builtin "div"} $div(i1: int, i2: int) returns (int);
function {:builtin "mod"} $mod(i1: int, i2: int) returns (int);
function {:builtin "rem"} $rem(i1: int, i2: int) returns (int);
function {:inline} $min(i1: int, i2: int) returns (int) {if i1 < i2 then i1 else i2}
function {:inline} $max(i1: int, i2: int) returns (int) {if i1 > i2 then i1 else i2}
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $not.i128(i: i128) returns (i128);
function $not.i96(i: i96) returns (i96);
function $not.i88(i: i88) returns (i88);
function $not.i64(i: i64) returns (i64);
function $not.i56(i: i56) returns (i56);
function $not.i48(i: i48) returns (i48);
function $not.i40(i: i40) returns (i40);
function $not.i32(i: i32) returns (i32);
function $not.i24(i: i24) returns (i24);
function $not.i16(i: i16) returns (i16);
function $not.i8(i: i8) returns (i8);
function $not.i1(i: i1) returns (i1);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) {i1 == i2} function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) {i1 == i2} function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) {i1 == i2} function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) {i1 == i2} function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) {i1 == i2} function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) {i1 == i2} function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) {i1 == i2} function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) {i1 == i2} function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) {i1 == i2} function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) {i1 == i2} function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) {i1 == i2} function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) {i1 == i2} function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) {i1 != i2} function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) {i1 != i2} function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) {i1 != i2} function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) {i1 != i2} function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) {i1 != i2} function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) {i1 != i2} function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) {i1 != i2} function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) {i1 != i2} function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) {i1 != i2} function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) {i1 != i2} function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) {i1 != i2} function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) {i1 != i2} function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
axiom $and.i1(0,0) == 0;
axiom $and.i1(0,1) == 0;
axiom $and.i1(1,0) == 0;
axiom $and.i1(1,1) == 1;
axiom $or.i1(0,0) == 0;
axiom $or.i1(0,1) == 1;
axiom $or.i1(1,0) == 1;
axiom $or.i1(1,1) == 1;
axiom $xor.i1(0,0) == 0;
axiom $xor.i1(0,1) == 1;
axiom $xor.i1(1,0) == 1;
axiom $xor.i1(1,1) == 0;
axiom($and.i32(32, 16) == 0);
function {:inline} $trunc.i128.i96(i: i128) returns (i96) {i}
function {:inline} $trunc.i128.i88(i: i128) returns (i88) {i}
function {:inline} $trunc.i128.i64(i: i128) returns (i64) {i}
function {:inline} $trunc.i128.i56(i: i128) returns (i56) {i}
function {:inline} $trunc.i128.i48(i: i128) returns (i48) {i}
function {:inline} $trunc.i128.i40(i: i128) returns (i40) {i}
function {:inline} $trunc.i128.i32(i: i128) returns (i32) {i}
function {:inline} $trunc.i128.i24(i: i128) returns (i24) {i}
function {:inline} $trunc.i128.i16(i: i128) returns (i16) {i}
function {:inline} $trunc.i128.i8(i: i128) returns (i8) {i}
function {:inline} $trunc.i128.i1(i: i128) returns (i1) {i}
function {:inline} $trunc.i96.i64(i: i96) returns (i64) {i}
function {:inline} $trunc.i96.i88(i: i96) returns (i88) {i}
function {:inline} $trunc.i96.i56(i: i96) returns (i56) {i}
function {:inline} $trunc.i96.i48(i: i96) returns (i48) {i}
function {:inline} $trunc.i96.i40(i: i96) returns (i40) {i}
function {:inline} $trunc.i96.i32(i: i96) returns (i32) {i}
function {:inline} $trunc.i96.i24(i: i96) returns (i24) {i}
function {:inline} $trunc.i96.i16(i: i96) returns (i16) {i}
function {:inline} $trunc.i96.i8(i: i96) returns (i8) {i}
function {:inline} $trunc.i96.i1(i: i96) returns (i1) {i}
function {:inline} $trunc.i88.i64(i: i88) returns (i64) {i}
function {:inline} $trunc.i88.i88(i: i88) returns (i88) {i}
function {:inline} $trunc.i88.i56(i: i88) returns (i56) {i}
function {:inline} $trunc.i88.i48(i: i88) returns (i48) {i}
function {:inline} $trunc.i88.i40(i: i88) returns (i40) {i}
function {:inline} $trunc.i88.i32(i: i88) returns (i32) {i}
function {:inline} $trunc.i88.i24(i: i88) returns (i24) {i}
function {:inline} $trunc.i88.i16(i: i88) returns (i16) {i}
function {:inline} $trunc.i88.i8(i: i88) returns (i8) {i}
function {:inline} $trunc.i88.i1(i: i88) returns (i1) {i}
function {:inline} $trunc.i64.i56(i: i64) returns (i56) {i}
function {:inline} $trunc.i64.i48(i: i64) returns (i48) {i}
function {:inline} $trunc.i64.i40(i: i64) returns (i40) {i}
function {:inline} $trunc.i64.i32(i: i64) returns (i32) {i}
function {:inline} $trunc.i64.i24(i: i64) returns (i24) {i}
function {:inline} $trunc.i64.i16(i: i64) returns (i16) {i}
function {:inline} $trunc.i64.i8(i: i64) returns (i8) {i}
function {:inline} $trunc.i64.i1(i: i64) returns (i1) {i}
function {:inline} $trunc.i56.i48(i: i56) returns (i48) {i}
function {:inline} $trunc.i56.i40(i: i56) returns (i40) {i}
function {:inline} $trunc.i56.i32(i: i56) returns (i32) {i}
function {:inline} $trunc.i56.i24(i: i56) returns (i24) {i}
function {:inline} $trunc.i56.i16(i: i56) returns (i16) {i}
function {:inline} $trunc.i56.i8(i: i56) returns (i8) {i}
function {:inline} $trunc.i56.i1(i: i56) returns (i1) {i}
function {:inline} $trunc.i48.i40(i: i48) returns (i40) {i}
function {:inline} $trunc.i48.i32(i: i48) returns (i32) {i}
function {:inline} $trunc.i48.i24(i: i48) returns (i24) {i}
function {:inline} $trunc.i48.i16(i: i48) returns (i16) {i}
function {:inline} $trunc.i48.i8(i: i48) returns (i8) {i}
function {:inline} $trunc.i48.i1(i: i48) returns (i1) {i}
function {:inline} $trunc.i40.i32(i: i40) returns (i32) {i}
function {:inline} $trunc.i40.i24(i: i40) returns (i24) {i}
function {:inline} $trunc.i40.i16(i: i40) returns (i16) {i}
function {:inline} $trunc.i40.i8(i: i40) returns (i8) {i}
function {:inline} $trunc.i40.i1(i: i40) returns (i1) {i}
function {:inline} $trunc.i32.i24(i: i32) returns (i24) {i}
function {:inline} $trunc.i32.i16(i: i32) returns (i16) {i}
function {:inline} $trunc.i32.i8(i: i32) returns (i8) {i}
function {:inline} $trunc.i32.i1(i: i32) returns (i1) {i}
function {:inline} $trunc.i24.i16(i: i24) returns (i16) {i}
function {:inline} $trunc.i24.i8(i: i24) returns (i8) {i}
function {:inline} $trunc.i24.i1(i: i24) returns (i1) {i}
function {:inline} $trunc.i16.i8(i: i16) returns (i8) {i}
function {:inline} $trunc.i16.i1(i: i16) returns (i1) {i}
function {:inline} $trunc.i8.i1(i: i8) returns (i1) {i}
function {:inline} $zext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $zext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $zext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $zext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $zext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $zext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $zext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $zext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $zext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $zext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $zext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $zext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $zext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $zext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $zext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $zext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $zext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $zext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $zext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $zext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $zext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $zext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $zext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $zext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $zext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $zext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $zext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $zext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $zext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $zext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $zext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $zext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $zext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $zext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $zext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $zext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $zext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $zext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $zext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $zext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $zext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $zext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $zext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $zext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $zext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $zext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $zext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $zext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $zext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $zext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $zext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $zext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $zext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $zext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $zext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $zext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $zext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $zext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $zext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $zext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $zext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $zext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $zext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $zext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $zext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $zext.i96.i128(i: i96) returns (i128) {i}
function {:inline} $sext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $sext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $sext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $sext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $sext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $sext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $sext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $sext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $sext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $sext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $sext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $sext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $sext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $sext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $sext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $sext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $sext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $sext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $sext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $sext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $sext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $sext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $sext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $sext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $sext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $sext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $sext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $sext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $sext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $sext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $sext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $sext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $sext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $sext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $sext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $sext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $sext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $sext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $sext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $sext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $sext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $sext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $sext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $sext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $sext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $sext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $sext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $sext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $sext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $sext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $sext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $sext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $sext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $sext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $sext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $sext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $sext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $sext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $sext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $sext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $sext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $sext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $sext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $sext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $sext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $sext.i96.i128(i: i96) returns (i128) {i}
function $fp(ipart:int, fpart:int, epart:int) returns (float);
function $fadd.float(f1:float, f2:float) returns (float);
function $fsub.float(f1:float, f2:float) returns (float);
function $fmul.float(f1:float, f2:float) returns (float);
function $fdiv.float(f1:float, f2:float) returns (float);
function $frem.float(f1:float, f2:float) returns (float);
function $ffalse.float(f1:float, f2:float) returns (i1);
function $ftrue.float(f1:float, f2:float) returns (i1);
function {:inline} $foeq.float(f1:float, f2:float) returns (i1) { if $foeq.bool(f1,f2) then 1 else 0 }
function $foeq.bool(f1:float, f2:float) returns (bool);
function $foge.float(f1:float, f2:float) returns (i1);
function $fogt.float(f1:float, f2:float) returns (i1);
function $fole.float(f1:float, f2:float) returns (i1);
function $folt.float(f1:float, f2:float) returns (i1);
function $fone.float(f1:float, f2:float) returns (i1);
function $ford.float(f1:float, f2:float) returns (i1);
function $fueq.float(f1:float, f2:float) returns (i1);
function $fuge.float(f1:float, f2:float) returns (i1);
function $fugt.float(f1:float, f2:float) returns (i1);
function $fule.float(f1:float, f2:float) returns (i1);
function $fult.float(f1:float, f2:float) returns (i1);
function $fune.float(f1:float, f2:float) returns (i1);
function $funo.float(f1:float, f2:float) returns (i1);
function $fp2si.float.i128(f:float) returns (i128);
function $fp2ui.float.i128(f:float) returns (i128);
function $si2fp.i128.float(i:i128) returns (float);
function $ui2fp.i128.float(i:i128) returns (float);
function $fp2si.float.i96(f:float) returns (i96);
function $fp2ui.float.i96(f:float) returns (i96);
function $si2fp.i96.float(i:i96) returns (float);
function $ui2fp.i96.float(i:i96) returns (float);
function $fp2si.float.i88(f:float) returns (i88);
function $fp2ui.float.i88(f:float) returns (i88);
function $si2fp.i88.float(i:i88) returns (float);
function $ui2fp.i88.float(i:i88) returns (float);
function $fp2si.float.i64(f:float) returns (i64);
function $fp2ui.float.i64(f:float) returns (i64);
function $si2fp.i64.float(i:i64) returns (float);
function $ui2fp.i64.float(i:i64) returns (float);
function $fp2si.float.i56(f:float) returns (i56);
function $fp2ui.float.i56(f:float) returns (i56);
function $si2fp.i56.float(i:i56) returns (float);
function $ui2fp.i56.float(i:i56) returns (float);
function $fp2si.float.i48(f:float) returns (i48);
function $fp2ui.float.i48(f:float) returns (i48);
function $si2fp.i48.float(i:i48) returns (float);
function $ui2fp.i48.float(i:i48) returns (float);
function $fp2si.float.i40(f:float) returns (i40);
function $fp2ui.float.i40(f:float) returns (i40);
function $si2fp.i40.float(i:i40) returns (float);
function $ui2fp.i40.float(i:i40) returns (float);
function $fp2si.float.i32(f:float) returns (i32);
function $fp2ui.float.i32(f:float) returns (i32);
function $si2fp.i32.float(i:i32) returns (float);
function $ui2fp.i32.float(i:i32) returns (float);
function $fp2si.float.i24(f:float) returns (i24);
function $fp2ui.float.i24(f:float) returns (i24);
function $si2fp.i24.float(i:i24) returns (float);
function $ui2fp.i24.float(i:i24) returns (float);
function $fp2si.float.i16(f:float) returns (i16);
function $fp2ui.float.i16(f:float) returns (i16);
function $si2fp.i16.float(i:i16) returns (float);
function $ui2fp.i16.float(i:i16) returns (float);
function $fp2si.float.i8(f:float) returns (i8);
function $fp2ui.float.i8(f:float) returns (i8);
function $si2fp.i8.float(i:i8) returns (float);
function $ui2fp.i8.float(i:i8) returns (float);
function $fptrunc.float.float(f:float) returns (float);
function $fpext.float.float(f:float) returns (float);
function $fp2si.float.bv128(f:float) returns (bv128);
function $fp2ui.float.bv128(f:float) returns (bv128);
function $si2fp.bv128.float(i:bv128) returns (float);
function $ui2fp.bv128.float(i:bv128) returns (float);
function $fp2si.float.bv96(f:float) returns (bv96);
function $fp2ui.float.bv96(f:float) returns (bv96);
function $si2fp.bv96.float(i:bv96) returns (float);
function $ui2fp.bv96.float(i:bv96) returns (float);
function $fp2si.float.bv88(f:float) returns (bv88);
function $fp2ui.float.bv88(f:float) returns (bv88);
function $si2fp.bv88.float(i:bv88) returns (float);
function $ui2fp.bv88.float(i:bv88) returns (float);
function $fp2si.float.bv64(f:float) returns (bv64);
function $fp2ui.float.bv64(f:float) returns (bv64);
function $si2fp.bv64.float(i:bv64) returns (float);
function $ui2fp.bv64.float(i:bv64) returns (float);
function $fp2si.float.bv56(f:float) returns (bv56);
function $fp2ui.float.bv56(f:float) returns (bv56);
function $si2fp.bv56.float(i:bv56) returns (float);
function $ui2fp.bv56.float(i:bv56) returns (float);
function $fp2si.float.bv48(f:float) returns (bv48);
function $fp2ui.float.bv48(f:float) returns (bv48);
function $si2fp.bv48.float(i:bv48) returns (float);
function $ui2fp.bv48.float(i:bv48) returns (float);
function $fp2si.float.bv40(f:float) returns (bv40);
function $fp2ui.float.bv40(f:float) returns (bv40);
function $si2fp.bv40.float(i:bv40) returns (float);
function $ui2fp.bv40.float(i:bv40) returns (float);
function $fp2si.float.bv32(f:float) returns (bv32);
function $fp2ui.float.bv32(f:float) returns (bv32);
function $si2fp.bv32.float(i:bv32) returns (float);
function $ui2fp.bv32.float(i:bv32) returns (float);
function $fp2si.float.bv24(f:float) returns (bv24);
function $fp2ui.float.bv24(f:float) returns (bv24);
function $si2fp.bv24.float(i:bv24) returns (float);
function $ui2fp.bv24.float(i:bv24) returns (float);
function $fp2si.float.bv16(f:float) returns (bv16);
function $fp2ui.float.bv16(f:float) returns (bv16);
function $si2fp.bv16.float(i:bv16) returns (float);
function $ui2fp.bv16.float(i:bv16) returns (float);
function $fp2si.float.bv8(f:float) returns (bv8);
function $fp2ui.float.bv8(f:float) returns (bv8);
function $si2fp.bv8.float(i:bv8) returns (float);
function $ui2fp.bv8.float(i:bv8) returns (float);
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;
function {:inline} $isExternal(p: ref) returns (bool) {$slt.ref.bool(p,$EXTERNS_BOTTOM)}
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) { M[p] }
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) { M[p] }
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) { M[p] }
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) { M[p] }
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) { M[p] }
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) { M[p] }
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) { M[p] }
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) { M[p] }
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) { M[p] }
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) { M[p] }
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128){ $load.bytes.bv64(M, $add.ref(p, $8.ref)) ++ $load.bytes.bv64(M, p) }
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96){ $load.bytes.bv64(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88){ $load.bytes.bv56(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64){ $load.bytes.bv32(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56){ $load.bytes.bv24(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48){ $load.bytes.bv16(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40){ M[$add.ref(p, $4.ref)] ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32){ M[$add.ref(p, $3.ref)] ++ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24){ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16){ M[$add.ref(p, $1.ref)] ++ M[p] }
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, v: i128) returns ([ref] i128) { M[p := v] }
function {:inline} $store.i96(M: [ref] i96, p: ref, v: i96) returns ([ref] i96) { M[p := v] }
function {:inline} $store.i88(M: [ref] i88, p: ref, v: i88) returns ([ref] i88) { M[p := v] }
function {:inline} $store.i64(M: [ref] i64, p: ref, v: i64) returns ([ref] i64) { M[p := v] }
function {:inline} $store.i56(M: [ref] i56, p: ref, v: i56) returns ([ref] i56) { M[p := v] }
function {:inline} $store.i48(M: [ref] i48, p: ref, v: i48) returns ([ref] i48) { M[p := v] }
function {:inline} $store.i40(M: [ref] i40, p: ref, v: i40) returns ([ref] i40) { M[p := v] }
function {:inline} $store.i32(M: [ref] i32, p: ref, v: i32) returns ([ref] i32) { M[p := v] }
function {:inline} $store.i24(M: [ref] i24, p: ref, v: i24) returns ([ref] i24) { M[p := v] }
function {:inline} $store.i16(M: [ref] i16, p: ref, v: i16) returns ([ref] i16) { M[p := v] }
function {:inline} $store.i8(M: [ref] i8, p: ref, v: i8) returns ([ref] i8) { M[p := v] }
function {:inline} $store.bv128(M: [ref] bv128, p: ref, v: bv128) returns ([ref] bv128) { M[p := v] }
function {:inline} $store.bv96(M: [ref] bv96, p: ref, v: bv96) returns ([ref] bv96) { M[p := v] }
function {:inline} $store.bv88(M: [ref] bv88, p: ref, v: bv88) returns ([ref] bv88) { M[p := v] }
function {:inline} $store.bv64(M: [ref] bv64, p: ref, v: bv64) returns ([ref] bv64) { M[p := v] }
function {:inline} $store.bv56(M: [ref] bv56, p: ref, v: bv56) returns ([ref] bv56) { M[p := v] }
function {:inline} $store.bv48(M: [ref] bv48, p: ref, v: bv48) returns ([ref] bv48) { M[p := v] }
function {:inline} $store.bv40(M: [ref] bv40, p: ref, v: bv40) returns ([ref] bv40) { M[p := v] }
function {:inline} $store.bv32(M: [ref] bv32, p: ref, v: bv32) returns ([ref] bv32) { M[p := v] }
function {:inline} $store.bv24(M: [ref] bv24, p: ref, v: bv24) returns ([ref] bv24) { M[p := v] }
function {:inline} $store.bv16(M: [ref] bv16, p: ref, v: bv16) returns ([ref] bv16) { M[p := v] }
function {:inline} $store.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) { M[p := v] }
function {:inline} $store.bytes.bv128(M:[ref]bv8, p:ref, v:bv128) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]][$add.ref(p, $11.ref) := v[104:96]][$add.ref(p, $12.ref) := v[112:104]][$add.ref(p, $13.ref) := v[120:112]][$add.ref(p, $14.ref) := v[128:120]]}
function {:inline} $store.bytes.bv96(M:[ref]bv8, p:ref, v:bv96) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]]}
function {:inline} $store.bytes.bv88(M:[ref]bv8, p:ref, v:bv88) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]]}
function {:inline} $store.bytes.bv64(M:[ref]bv8, p:ref, v:bv64) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]]}
function {:inline} $store.bytes.bv56(M:[ref]bv8, p:ref, v:bv56) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]]}
function {:inline} $store.bytes.bv48(M:[ref]bv8, p:ref, v:bv48) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]]}
function {:inline} $store.bytes.bv40(M:[ref]bv8, p:ref, v:bv40) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]]}
function {:inline} $store.bytes.bv32(M:[ref]bv8, p:ref, v:bv32) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]]}
function {:inline} $store.bytes.bv24(M:[ref]bv8, p:ref, v:bv24) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]]}
function {:inline} $store.bytes.bv16(M:[ref]bv8, p:ref, v:bv16) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]]}
function {:inline} $store.bytes.bv8(M:[ref]bv8, p:ref, v:bv8) returns ([ref]bv8) {M[p := v]}
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, v: ref) returns ([ref] ref) { M[p := v] }
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, v: float) returns ([ref] float) { M[p := v] }
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
procedure  boogie_si_record_bool(i: bool);
procedure  boogie_si_record_i1(i: i1);
procedure  boogie_si_record_i8(i: i8);
procedure  boogie_si_record_i16(i: i16);
procedure  boogie_si_record_i24(i: i24);
procedure  boogie_si_record_i32(i: i32);
procedure  boogie_si_record_i40(i: i40);
procedure  boogie_si_record_i48(i: i48);
procedure  boogie_si_record_i56(i: i56);
procedure  boogie_si_record_i64(i: i64);
procedure  boogie_si_record_i88(i: i88);
procedure  boogie_si_record_i96(i: i96);
procedure  boogie_si_record_i128(i: i128);
procedure  boogie_si_record_bv1(i: bv1);
procedure  boogie_si_record_bv8(i: bv8);
procedure  boogie_si_record_bv16(i: bv16);
procedure  boogie_si_record_bv24(i: bv24);
procedure  boogie_si_record_bv32(i: bv32);
procedure  boogie_si_record_bv40(i: bv40);
procedure  boogie_si_record_bv48(i: bv48);
procedure  boogie_si_record_bv56(i: bv56);
procedure  boogie_si_record_bv64(i: bv64);
procedure  boogie_si_record_bv88(i: bv88);
procedure  boogie_si_record_bv96(i: bv96);
procedure  boogie_si_record_bv128(i: bv128);
procedure  boogie_si_record_ref(i: ref);
procedure  boogie_si_record_float(i: float);
var $exn: bool;
var $exnv: int;
function $extractvalue(p: int, i: int) returns (int);

procedure  $alloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 76783));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 77815));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1782, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1787, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 78847));
procedure  llvm.dbg.value($p0: ref, $i1: bv64, $p2: ref, $p3: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 79879));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := 0bv32;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_bv32(0bv32);
  $M.2 := 0bv32;
  call {:cexpr "ldv_spin"} boogie_si_record_bv32(0bv32);
  $M.3 := 0bv16;
  $M.4 := 0bv16;
  $M.5 := 0bv16;
  $M.6 := 0bv16;
  $M.7 := 0bv16;
  $M.8 := 0bv8;
  $M.9 := 0bv8;
  $M.10 := 0bv8;
  $M.11 := 0bv8;
  $M.12 := 0bv8;
  $M.13 := 0bv8;
  $M.14 := 0bv64;
  $M.1 := $store.bytes.ref($M.1, sd_desc, .str.7);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 8), sd_ctrls);
  $M.1 := $store.bytes.bv32($M.1, $add.ref(sd_desc, 16), 0bv32);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 24), sd_config);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 32), sd_init);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 40), sd_start);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 48), sd_pkt_scan);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 56), $0.ref);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 64), $0.ref);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 72), sd_stopN);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 80), $0.ref);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 88), $0.ref);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 96), $0.ref);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 104), $0.ref);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 112), $0.ref);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 120), $0.ref);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 128), $0.ref);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 136), $0.ref);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 144), $0.ref);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 152), $0.ref);
  $M.1 := $store.bytes.ref($M.1, $add.ref(sd_desc, 160), $0.ref);
  $M.1 := $store.bytes.bv8($M.1, $add.ref(sd_desc, 168), 0bv8);
  $M.1 := $store.bytes.bv32($M.1, vga_mode, 320bv32);
  $M.1 := $store.bytes.bv32($M.1, $add.ref(vga_mode, 4), 240bv32);
  $M.1 := $store.bytes.bv32($M.1, $add.ref(vga_mode, 8), 1195724874bv32);
  $M.1 := $store.bytes.bv32($M.1, $add.ref(vga_mode, 12), 1bv32);
  $M.1 := $store.bytes.bv32($M.1, $add.ref(vga_mode, 16), 320bv32);
  $M.1 := $store.bytes.bv32($M.1, $add.ref(vga_mode, 20), 29390bv32);
  $M.1 := $store.bytes.bv32($M.1, $add.ref(vga_mode, 24), 7bv32);
  $M.1 := $store.bytes.bv32($M.1, $add.ref(vga_mode, 28), 0bv32);
  $exn := false;
  return;
}
const $u0: ref;
const $u1: ref;
const $u2: ref;
const $u3: bv32;
const $u4: ref;
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
