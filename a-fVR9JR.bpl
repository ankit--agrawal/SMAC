// generated by SMACK version 1.9.0 for corral
// via /mnt/local/smack-project/smack/bin/smack -x=svcomp --time-limit 1800 /proj/SMACK/sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c --verifier-options  /bopt:z3opt:SMT.MBQI=true /bopt:z3opt:SMT.MBQI.MAX_ITERATIONS=1000 /di /staticInlining /trackAllVars /useArrayTheory --unroll 16

// Basic types
type i1 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type ref = i64;
type float = i32;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $2.ref: ref;
axiom ($2.ref == 2);
const $3.ref: ref;
axiom ($3.ref == 3);
const $4.ref: ref;
axiom ($4.ref == 4);
const $5.ref: ref;
axiom ($5.ref == 5);
const $6.ref: ref;
axiom ($6.ref == 6);
const $7.ref: ref;
axiom ($7.ref == 7);
const $8.ref: ref;
axiom ($8.ref == 8);
const $9.ref: ref;
axiom ($9.ref == 9);
const $10.ref: ref;
axiom ($10.ref == 10);
const $11.ref: ref;
axiom ($11.ref == 11);
const $12.ref: ref;
axiom ($12.ref == 12);
const $13.ref: ref;
axiom ($13.ref == 13);
const $14.ref: ref;
axiom ($14.ref == 14);
const $1024.ref: ref;
axiom ($1024.ref == 1024);

// Memory maps (7 regions)
var $M.0: [ref] i8;
var $M.1: [ref] i64;
var $M.2: [ref] ref;
var $M.3: [ref] i64;
var $M.4: [ref] i32;
var $M.5: i32;
var $M.6: i32;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 146035));
axiom ($EXTERNS_BOTTOM == $sub.ref(0, 32800));
axiom ($MALLOC_TOP == 9223372036854775807);

// Bitstd::vector-integer conversions
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2int"} $bv2int.64(i: bv64) returns (i64);

// Pointer-number conversions
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { if $eq.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { if $ne.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { if $ugt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { if $uge.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { if $ult.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { if $ule.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { if $sgt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { if $sge.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { if $slt.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { if $sle.i64.bool(p1, p2) then 1 else 0 }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

const LDV_IN_INTERRUPT: ref;
axiom (LDV_IN_INTERRUPT == $sub.ref(0, 1028));
const ldv_mutex: ref;
axiom (ldv_mutex == $sub.ref(0, 2056));
const {:count 12} llvm.used: ref;
axiom (llvm.used == $sub.ref(0, 3176));
const __param_record_size: ref;
axiom (__param_record_size == $sub.ref(0, 4232));
const {:count 27} __mod_record_sizetype44: ref;
axiom (__mod_record_sizetype44 == $sub.ref(0, 5283));
const {:count 72} __mod_record_size46: ref;
axiom (__mod_record_size46 == $sub.ref(0, 6379));
const __param_mtddev: ref;
axiom (__param_mtddev == $sub.ref(0, 7435));
const {:count 23} __mod_mtddevtype49: ref;
axiom (__mod_mtddevtype49 == $sub.ref(0, 8482));
const {:count 58} __mod_mtddev51: ref;
axiom (__mod_mtddev51 == $sub.ref(0, 9564));
const __param_dump_oops: ref;
axiom (__param_dump_oops == $sub.ref(0, 10620));
const {:count 23} __mod_dump_oopstype54: ref;
axiom (__mod_dump_oopstype54 == $sub.ref(0, 11667));
const {:count 74} __mod_dump_oops56: ref;
axiom (__mod_dump_oops56 == $sub.ref(0, 12765));
const {:count 12} __mod_license467: ref;
axiom (__mod_license467 == $sub.ref(0, 13801));
const {:count 47} __mod_author468: ref;
axiom (__mod_author468 == $sub.ref(0, 14872));
const {:count 49} __mod_description469: ref;
axiom (__mod_description469 == $sub.ref(0, 15945));
const {:count 10} __param_str_dump_oops: ref;
axiom (__param_str_dump_oops == $sub.ref(0, 16979));
const param_ops_int: ref;
axiom (param_ops_int == $sub.ref(0, 32776));
const dump_oops: ref;
axiom (dump_oops == $sub.ref(0, 18007));
const {:count 7} __param_str_mtddev: ref;
axiom (__param_str_mtddev == $sub.ref(0, 19038));
const param_ops_string: ref;
axiom (param_ops_string == $sub.ref(0, 32784));
const __param_string_mtddev: ref;
axiom (__param_string_mtddev == $sub.ref(0, 20078));
const {:count 80} mtddev: ref;
axiom (mtddev == $sub.ref(0, 21182));
const {:count 12} __param_str_record_size: ref;
axiom (__param_str_record_size == $sub.ref(0, 22218));
const param_ops_ulong: ref;
axiom (param_ops_ulong == $sub.ref(0, 32792));
const record_size: ref;
axiom (record_size == $sub.ref(0, 23250));
const mtdoops_notifier: ref;
axiom (mtdoops_notifier == $sub.ref(0, 24306));
const __key___3: ref;
axiom (__key___3 == $sub.ref(0, 25338));
const oops_cxt: ref;
axiom (oops_cxt == $sub.ref(0, 26506));
const .str: ref;
axiom (.str == $sub.ref(0, 27592));
const {:count 52} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 28668));
const {:count 49} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 29741));
const {:count 49} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 30814));
const {:count 57} .str.11: ref;
axiom (.str.11 == $sub.ref(0, 31895));
const {:count 65} .str.12: ref;
axiom (.str.12 == $sub.ref(0, 32984));
const {:count 37} .str.13: ref;
axiom (.str.13 == $sub.ref(0, 34045));
const {:count 42} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 35111));
const {:count 32} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 36167));
const {:count 29} .str.6: ref;
axiom (.str.6 == $sub.ref(0, 37220));
const {:count 26} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 38270));
const {:count 44} .str.8: ref;
axiom (.str.8 == $sub.ref(0, 39338));
const current_task: ref;
axiom (current_task == $sub.ref(0, 32800));
const {:count 8} .str.9: ref;
axiom (.str.9 == $sub.ref(0, 40370));
const {:count 61} .str.10: ref;
axiom (.str.10 == $sub.ref(0, 41455));
const {:count 46} .str.21: ref;
axiom (.str.21 == $sub.ref(0, 42525));
const {:count 57} .str.14: ref;
axiom (.str.14 == $sub.ref(0, 43606));
const {:count 59} .str.15: ref;
axiom (.str.15 == $sub.ref(0, 44689));
const {:count 50} .str.16: ref;
axiom (.str.16 == $sub.ref(0, 45763));
const {:count 43} .str.17: ref;
axiom (.str.17 == $sub.ref(0, 46830));
const {:count 54} .str.18: ref;
axiom (.str.18 == $sub.ref(0, 47908));
const {:count 39} .str.19: ref;
axiom (.str.19 == $sub.ref(0, 48971));
const {:count 58} .str.20: ref;
axiom (.str.20 == $sub.ref(0, 50053));
const {:count 14} .str.2.26: ref;
axiom (.str.2.26 == $sub.ref(0, 51091));
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 52123));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const mtdoops_init: ref;
axiom (mtdoops_init == $sub.ref(0, 53155));
procedure  mtdoops_init()
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i1;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $i6: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: call void @llvm.dbg.value(metadata %struct.mtdoops_context* @oops_cxt, i64 0, metadata !2435, metadata !2433), !dbg !2436, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4393, 41} true;
  assume {:verifier.code 0} true;
  $i1 := $add.i64($p2i.ref.i64(mtddev), 0);
  // WARNING: %2 = add i64 ptrtoint ([80 x i8]* @mtddev to i64), 0, !dbg !2439, !verifier.code !2431
  call {:cexpr "__cil_tmp9"} boogie_si_record_i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4394, 17} true;
  assume {:verifier.code 0} true;
  $p2 := $i2p.i64.ref($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4396, 13} true;
  assume {:verifier.code 0} true;
  call $i3 := strlen($p2);
  // WARNING: %4 = call i64 @strlen(i8* %3), !dbg !2449, !verifier.code !2431
  call {:cexpr "tmp___7"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4398, 15} true;
  assume {:verifier.code 0} true;
  $i4 := $eq.i64($i3, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4398, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4400, 5} true;
  assume {:verifier.code 0} true;
  call $i5 := printk.ref(.str);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4402, 5} true;
  assume {:verifier.code 0} true;
  $i6 := $sub.i32(0, 22);
  goto $bb3;
$bb2:
  assume !(($i4 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4568, 1} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4408, 17} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i64($M.0, record_size);
  // WARNING: %10 = load i64, i64* @record_size, align 8, !dbg !2461, !verifier.code !2431
  call {:cexpr "__cil_tmp13"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4409, 29} true;
  assume {:verifier.code 0} true;
  $i8 := $and.i64($i7, 4095);
  // WARNING: %11 = and i64 %10, 4095, !dbg !2465, !verifier.code !2431
  call {:cexpr "__cil_tmp14"} boogie_si_record_i64($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4410, 19} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i64($i8, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4410, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4412, 5} true;
  assume {:verifier.code 0} true;
  call $i10 := printk.ref(.str.1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4414, 5} true;
  assume {:verifier.code 0} true;
  $i6 := $sub.i32(0, 22);
  goto $bb3;
$bb6:
  assume !(($i9 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4421, 17} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i64($M.0, record_size);
  // WARNING: %17 = load i64, i64* @record_size, align 8, !dbg !2477, !verifier.code !2431
  call {:cexpr "__cil_tmp16"} boogie_si_record_i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4422, 19} true;
  assume {:verifier.code 0} true;
  $i12 := $ult.i64($i11, 4096);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4422, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i12 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4424, 5} true;
  assume {:verifier.code 0} true;
  call $i13 := printk.ref(.str.2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4426, 5} true;
  assume {:verifier.code 0} true;
  $i6 := $sub.i32(0, 22);
  goto $bb3;
$bb9:
  assume !(($i12 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4432, 17} true;
  assume {:verifier.code 0} true;
  $i14 := $p2i.ref.i64(oops_cxt);
  // WARNING: %23 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2488, !verifier.code !2431
  call {:cexpr "__cil_tmp17"} boogie_si_record_i64($i14);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4433, 29} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i64($i14, 32);
  // WARNING: %24 = add i64 %23, 32, !dbg !2492, !verifier.code !2431
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i15);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4434, 5} true;
  assume {:verifier.code 0} true;
  $p16 := $i2p.i64.ref($i15);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4434, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p16, $sub.i32(0, 1));
  // WARNING: store i32 -1, i32* %25, align 4, !dbg !2496, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4436, 42} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i64($p2i.ref.i64(mtddev), 0);
  // WARNING: %26 = add i64 ptrtoint ([80 x i8]* @mtddev to i64), 0, !dbg !2499, !verifier.code !2431
  call {:cexpr "__cil_tmp20"} boogie_si_record_i64($i17);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4437, 17} true;
  assume {:verifier.code 0} true;
  $p18 := $i2p.i64.ref($i17);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4439, 13} true;
  assume {:verifier.code 0} true;
  call $i19 := simple_strtoul($p18, $p0, 0);
  // WARNING: %28 = call i64 @simple_strtoul(i8* %27, i8** %1, i32 0), !dbg !2507, !verifier.code !2431
  call {:cexpr "tmp___8"} boogie_si_record_i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4440, 15} true;
  assume {:verifier.code 0} true;
  $i20 := $trunc.i64.i32($i19);
  // WARNING: %29 = trunc i64 %28 to i32, !dbg !2510, !verifier.code !2431
  call {:cexpr "mtd_index"} boogie_si_record_i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4444, 17} true;
  assume {:verifier.code 0} true;
  $p21 := $load.ref($M.0, $p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4445, 17} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i8($M.0, $p21);
  // WARNING: %31 = load i8, i8* %30, align 1, !dbg !2520, !verifier.code !2431
  call {:cexpr "__cil_tmp25"} boogie_si_record_i8($i22);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4446, 17} true;
  assume {:verifier.code 0} true;
  $i23 := $sext.i8.i32($i22);
  // WARNING: %32 = sext i8 %31 to i32, !dbg !2523, !verifier.code !2431
  call {:cexpr "__cil_tmp26"} boogie_si_record_i32($i23);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4447, 19} true;
  assume {:verifier.code 0} true;
  $i24 := $eq.i32($i23, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4447, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i24 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4448, 19} true;
  assume {:verifier.code 0} true;
  $i25 := $p2i.ref.i64(oops_cxt);
  // WARNING: %35 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2529, !verifier.code !2431
  call {:cexpr "__cil_tmp27"} boogie_si_record_i64($i25);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4449, 31} true;
  assume {:verifier.code 0} true;
  $i26 := $add.i64($i25, 32);
  // WARNING: %36 = add i64 %35, 32, !dbg !2533, !verifier.code !2431
  call {:cexpr "__cil_tmp28"} boogie_si_record_i64($i26);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4450, 7} true;
  assume {:verifier.code 0} true;
  $p27 := $i2p.i64.ref($i26);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4450, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p27, $i20);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4451, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume !(($i24 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4456, 17} true;
  assume {:verifier.code 0} true;
  $i28 := $p2i.ref.i64(oops_cxt);
  // WARNING: %40 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2539, !verifier.code !2431
  call {:cexpr "__cil_tmp29"} boogie_si_record_i64($i28);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4457, 29} true;
  assume {:verifier.code 0} true;
  $i29 := $add.i64($i28, 136);
  // WARNING: %41 = add i64 %40, 136, !dbg !2543, !verifier.code !2431
  call {:cexpr "__cil_tmp30"} boogie_si_record_i64($i29);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4459, 17} true;
  assume {:verifier.code 0} true;
  $i30 := $load.i64($M.0, record_size);
  // WARNING: %42 = load i64, i64* @record_size, align 8, !dbg !2548, !verifier.code !2431
  call {:cexpr "__cil_tmp32"} boogie_si_record_i64($i30);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4460, 29} true;
  assume {:verifier.code 0} true;
  call $p31 := vmalloc($i30);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4460, 5} true;
  assume {:verifier.code 0} true;
  $p32 := $i2p.i64.ref($i29);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4460, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p32, $p31);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4463, 17} true;
  assume {:verifier.code 0} true;
  $i33 := $p2i.ref.i64(oops_cxt);
  // WARNING: %45 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2554, !verifier.code !2431
  call {:cexpr "__cil_tmp33"} boogie_si_record_i64($i33);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4464, 29} true;
  assume {:verifier.code 0} true;
  $i34 := $add.i64($i33, 136);
  // WARNING: %46 = add i64 %45, 136, !dbg !2558, !verifier.code !2431
  call {:cexpr "__cil_tmp34"} boogie_si_record_i64($i34);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4465, 19} true;
  assume {:verifier.code 0} true;
  $p35 := $i2p.i64.ref($i34);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4465, 17} true;
  assume {:verifier.code 0} true;
  $p36 := $load.ref($M.0, $p35);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4466, 9} true;
  assume {:verifier.code 0} true;
  $i37 := $ne.ref($p36, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4466, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i37} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i37 == 1);
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i37 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4468, 5} true;
  assume {:verifier.code 0} true;
  call $i38 := printk.ref(.str.3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4470, 5} true;
  assume {:verifier.code 0} true;
  $i6 := $sub.i32(0, 12);
  goto $bb3;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4476, 17} true;
  assume {:verifier.code 0} true;
  $i39 := $p2i.ref.i64(oops_cxt);
  // WARNING: %54 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2572, !verifier.code !2431
  call {:cexpr "__cil_tmp36"} boogie_si_record_i64($i39);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4477, 29} true;
  assume {:verifier.code 0} true;
  $i40 := $add.i64($i39, 136);
  // WARNING: %55 = add i64 %54, 136, !dbg !2576, !verifier.code !2431
  call {:cexpr "__cil_tmp37"} boogie_si_record_i64($i40);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4478, 19} true;
  assume {:verifier.code 0} true;
  $p41 := $i2p.i64.ref($i40);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4478, 17} true;
  assume {:verifier.code 0} true;
  $p42 := $load.ref($M.0, $p41);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4480, 17} true;
  assume {:verifier.code 0} true;
  $i43 := $load.i64($M.0, record_size);
  // WARNING: %58 = load i64, i64* @record_size, align 8, !dbg !2585, !verifier.code !2431
  call {:cexpr "__cil_tmp40"} boogie_si_record_i64($i43);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4481, 3} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p42, $sub.i8(0, 1), $i43, $zext.i32.i64(1), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4484, 3} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4484, 13} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4487, 5} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4487, 15} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4490, 21} true;
  assume {:verifier.code 0} true;
  $i44 := $p2i.ref.i64(oops_cxt);
  // WARNING: %63 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2598, !verifier.code !2431
  call {:cexpr "__cil_tmp41"} boogie_si_record_i64($i44);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4491, 33} true;
  assume {:verifier.code 0} true;
  $i45 := $add.i64($i44, 40);
  // WARNING: %64 = add i64 %63, 40, !dbg !2603, !verifier.code !2431
  call {:cexpr "__cil_tmp42"} boogie_si_record_i64($i45);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4492, 21} true;
  assume {:verifier.code 0} true;
  $p46 := $i2p.i64.ref($i45);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4493, 7} true;
  assume {:verifier.code 0} true;
  call __init_work($p46, 0);
  // WARNING: call void @__init_work(%struct.work_struct* %65, i32 0), !dbg !2609, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4495, 21} true;
  assume {:verifier.code 0} true;
  $i47 := $p2i.ref.i64(oops_cxt);
  // WARNING: %66 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2612, !verifier.code !2431
  call {:cexpr "__cil_tmp44"} boogie_si_record_i64($i47);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4496, 33} true;
  assume {:verifier.code 0} true;
  $i48 := $add.i64($i47, 40);
  // WARNING: %67 = add i64 %66, 40, !dbg !2615, !verifier.code !2431
  call {:cexpr "__cil_tmp45"} boogie_si_record_i64($i48);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4497, 8} true;
  assume {:verifier.code 0} true;
  $p49 := $i2p.i64.ref($i48);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4497, 39} true;
  assume {:verifier.code 0} true;
  $p50 := $p49;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4497, 47} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p50, 2097664);
  // WARNING: store i64 2097664, i64* %69, align 8, !dbg !2620, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4499, 21} true;
  assume {:verifier.code 0} true;
  $i51 := $p2i.ref.i64(oops_cxt);
  // WARNING: %70 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2623, !verifier.code !2431
  call {:cexpr "__cil_tmp47"} boogie_si_record_i64($i51);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4500, 33} true;
  assume {:verifier.code 0} true;
  $i52 := $add.i64($i51, 48);
  // WARNING: %71 = add i64 %70, 48, !dbg !2626, !verifier.code !2431
  call {:cexpr "__cil_tmp48"} boogie_si_record_i64($i52);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4501, 21} true;
  assume {:verifier.code 0} true;
  $p53 := $i2p.i64.ref($i52);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4502, 7} true;
  assume {:verifier.code 0} true;
  call INIT_LIST_HEAD($p53);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4505, 7} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb21:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4505, 17} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4508, 23} true;
  assume {:verifier.code 0} true;
  $i54 := $p2i.ref.i64(oops_cxt);
  // WARNING: %75 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2639, !verifier.code !2431
  call {:cexpr "__cil_tmp51"} boogie_si_record_i64($i54);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4509, 35} true;
  assume {:verifier.code 0} true;
  $i55 := $add.i64($i54, 64);
  // WARNING: %76 = add i64 %75, 64, !dbg !2643, !verifier.code !2431
  call {:cexpr "__cil_tmp52"} boogie_si_record_i64($i55);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4510, 11} true;
  assume {:verifier.code 0} true;
  $p56 := $i2p.i64.ref($i55);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4510, 62} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p56, mtdoops_workfunc_erase);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4511, 9} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4515, 7} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4519, 5} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4524, 3} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb26:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4524, 13} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4527, 5} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4527, 15} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb29:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4530, 21} true;
  assume {:verifier.code 0} true;
  $i57 := $p2i.ref.i64(oops_cxt);
  // WARNING: %85 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2660, !verifier.code !2431
  call {:cexpr "__cil_tmp53"} boogie_si_record_i64($i57);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4531, 33} true;
  assume {:verifier.code 0} true;
  $i58 := $add.i64($i57, 72);
  // WARNING: %86 = add i64 %85, 72, !dbg !2665, !verifier.code !2431
  call {:cexpr "__cil_tmp54"} boogie_si_record_i64($i58);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4532, 21} true;
  assume {:verifier.code 0} true;
  $p59 := $i2p.i64.ref($i58);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4533, 7} true;
  assume {:verifier.code 0} true;
  call __init_work($p59, 0);
  // WARNING: call void @__init_work(%struct.work_struct* %87, i32 0), !dbg !2671, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4535, 21} true;
  assume {:verifier.code 0} true;
  $i60 := $p2i.ref.i64(oops_cxt);
  // WARNING: %88 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2674, !verifier.code !2431
  call {:cexpr "__cil_tmp56"} boogie_si_record_i64($i60);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4536, 33} true;
  assume {:verifier.code 0} true;
  $i61 := $add.i64($i60, 72);
  // WARNING: %89 = add i64 %88, 72, !dbg !2677, !verifier.code !2431
  call {:cexpr "__cil_tmp57"} boogie_si_record_i64($i61);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4537, 8} true;
  assume {:verifier.code 0} true;
  $p62 := $i2p.i64.ref($i61);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4537, 39} true;
  assume {:verifier.code 0} true;
  $p63 := $p62;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4537, 47} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p63, 2097664);
  // WARNING: store i64 2097664, i64* %91, align 8, !dbg !2682, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4539, 21} true;
  assume {:verifier.code 0} true;
  $i64 := $p2i.ref.i64(oops_cxt);
  // WARNING: %92 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2685, !verifier.code !2431
  call {:cexpr "__cil_tmp59"} boogie_si_record_i64($i64);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4540, 33} true;
  assume {:verifier.code 0} true;
  $i65 := $add.i64($i64, 80);
  // WARNING: %93 = add i64 %92, 80, !dbg !2688, !verifier.code !2431
  call {:cexpr "__cil_tmp60"} boogie_si_record_i64($i65);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4541, 21} true;
  assume {:verifier.code 0} true;
  $p66 := $i2p.i64.ref($i65);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4542, 7} true;
  assume {:verifier.code 0} true;
  call INIT_LIST_HEAD($p66);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4545, 7} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4545, 17} true;
  assume {:verifier.code 0} true;
  goto $bb31;
$bb31:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4548, 23} true;
  assume {:verifier.code 0} true;
  $i67 := $p2i.ref.i64(oops_cxt);
  // WARNING: %97 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2701, !verifier.code !2431
  call {:cexpr "__cil_tmp63"} boogie_si_record_i64($i67);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4549, 35} true;
  assume {:verifier.code 0} true;
  $i68 := $add.i64($i67, 96);
  // WARNING: %98 = add i64 %97, 96, !dbg !2705, !verifier.code !2431
  call {:cexpr "__cil_tmp64"} boogie_si_record_i64($i68);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4550, 11} true;
  assume {:verifier.code 0} true;
  $p69 := $i2p.i64.ref($i68);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4550, 62} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p69, mtdoops_workfunc_write);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4551, 9} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb32:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4555, 7} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb33:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4559, 5} true;
  assume {:verifier.code 0} true;
  goto $bb34;
$bb34:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4564, 3} true;
  assume {:verifier.code 0} true;
  call register_mtd_user(mtdoops_notifier);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4566, 3} true;
  assume {:verifier.code 0} true;
  $i6 := 0;
  goto $bb3;
}
const strlen: ref;
axiom (strlen == $sub.ref(0, 54187));
procedure  strlen($p0: ref)
  returns ($r: i64);
const printk: ref;
axiom (printk == $sub.ref(0, 55219));
procedure  printk.ref.i64.i64.i32.i32($p0: ref, p.1: i64, p.2: i64, p.3: i32, p.4: i32)
  returns ($r: i32);
procedure  printk.ref.i32($p0: ref, p.1: i32)
  returns ($r: i32);
procedure  printk.ref($p0: ref)
  returns ($r: i32);
procedure  printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32)
  returns ($r: i32);
procedure  printk.ref.i64.i64.ref($p0: ref, p.1: i64, p.2: i64, p.3: ref)
  returns ($r: i32);
procedure  printk.ref.i64($p0: ref, p.1: i64)
  returns ($r: i32);
procedure  printk.ref.i64.i64.i64.i32($p0: ref, p.1: i64, p.2: i64, p.3: i64, p.4: i32)
  returns ($r: i32);
const simple_strtoul: ref;
axiom (simple_strtoul == $sub.ref(0, 56251));
procedure  simple_strtoul($p0: ref, $p1: ref, $i2: i32)
  returns ($r: i64);
const vmalloc: ref;
axiom (vmalloc == $sub.ref(0, 57283));
procedure  vmalloc($i0: i64)
  returns ($r: ref);
const llvm.memset.p0i8.i64: ref;
axiom (llvm.memset.p0i8.i64 == $sub.ref(0, 58315));
procedure  llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);
const __init_work: ref;
axiom (__init_work == $sub.ref(0, 59347));
procedure  __init_work($p0: ref, $i1: i32);
const INIT_LIST_HEAD: ref;
axiom (INIT_LIST_HEAD == $sub.ref(0, 60379));
procedure  INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2086, 3} true;
  assume {:verifier.code 0} true;
  $p1 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2086, 32} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p1, $p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2087, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p0);
  // WARNING: %3 = ptrtoint %struct.list_head* %0 to i64, !dbg !2440, !verifier.code !2436
  call {:cexpr "__cil_tmp2"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2088, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $add.i64($i2, 8);
  // WARNING: %4 = add i64 %3, 8, !dbg !2443, !verifier.code !2436
  call {:cexpr "__cil_tmp3"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2089, 5} true;
  assume {:verifier.code 0} true;
  $p4 := $i2p.i64.ref($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2089, 38} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p4, $p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2090, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const mtdoops_workfunc_erase: ref;
axiom (mtdoops_workfunc_erase == $sub.ref(0, 61411));
procedure  mtdoops_workfunc_erase($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i32;
  var $i29: i1;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i32;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i32;
  var $i66: i64;
  var $i67: i64;
  var $i68: i32;
  var $i69: i1;
  var $i70: i1;
  var $i71: i32;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $i78: i64;
  var $i79: i32;
  var $i80: i32;
  var $i81: i64;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $i93: i32;
  var $i94: i64;
  var $i95: i64;
  var $i96: i32;
  var $p97: ref;
  var $i98: i64;
  var $i99: i64;
  var $p100: ref;
  var $i101: i32;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $i112: i64;
  var $p113: ref;
  var $i114: i32;
  var $i115: i64;
  var $i116: i64;
  var $i117: i64;
  var $i118: i64;
  var $p119: ref;
  var $i120: i32;
  var $i121: i64;
  var $i122: i64;
  var $i123: i64;
  var $i124: i1;
  var $i125: i32;
  var $i126: i32;
  var $i127: i32;
  var $i128: i1;
  var $i130: i1;
  var $i131: i32;
  var $i129: i32;
  var $i133: i64;
  var $i134: i64;
  var $i135: i64;
  var $p136: ref;
  var $i137: i32;
  var $i138: i64;
  var $i139: i64;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $i132: i32;
  var $i143: i1;
  var $i144: i64;
  var $i145: i64;
  var $p146: ref;
  var $i147: i32;
  var $i148: i64;
  var $i149: i64;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i154: i64;
  var $i155: i64;
  var $i156: i64;
  var $p157: ref;
  var $i158: i32;
  var $i159: i64;
  var $i160: i64;
  var $i161: i32;
  var $i162: i1;
  var $i163: i1;
  var $i164: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3018, 17} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($0.ref);
  // WARNING: %2 = ptrtoint %struct.mtdoops_context* null to i64, !dbg !2439, !verifier.code !2434
  call {:cexpr "__cil_tmp10"} boogie_si_record_i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3019, 29} true;
  assume {:verifier.code 0} true;
  $i2 := $add.i64($i1, 40);
  // WARNING: %3 = add i64 %2, 40, !dbg !2443, !verifier.code !2434
  call {:cexpr "__cil_tmp11"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3020, 17} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.i64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3021, 17} true;
  assume {:verifier.code 0} true;
  $i4 := $p2i.ref.i32($p3);
  // WARNING: %5 = ptrtoint %struct.work_struct* %4 to i32, !dbg !2449, !verifier.code !2434
  call {:cexpr "__cil_tmp13"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3022, 17} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3023, 29} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i32.i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3023, 29} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.i64(0, $i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3023, 29} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p5, $mul.ref($i7, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3024, 9} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3025, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $p2i.ref.i64($p9);
  // WARNING: %11 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2461, !verifier.code !2434
  call {:cexpr "__cil_tmp16"} boogie_si_record_i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3026, 29} true;
  assume {:verifier.code 0} true;
  $i11 := $add.i64($i10, 104);
  // WARNING: %12 = add i64 %11, 104, !dbg !2464, !verifier.code !2434
  call {:cexpr "__cil_tmp17"} boogie_si_record_i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3027, 11} true;
  assume {:verifier.code 0} true;
  $p12 := $i2p.i64.ref($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3027, 9} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.0, $p12);
  // WARNING: call void @llvm.dbg.value(metadata %struct.mtd_info* %14, i64 0, metadata !2771, metadata !2433), !dbg !2772, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3029, 9} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.ref($p13, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3029, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i14 == 1);
  assume {:verifier.code 0} true;
  goto $bb4;
$bb2:
  assume !(($i14 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3030, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3250, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3034, 17} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.i64($p13);
  // WARNING: %19 = ptrtoint %struct.mtd_info* %14 to i64, !dbg !2478, !verifier.code !2434
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i15);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3035, 29} true;
  assume {:verifier.code 0} true;
  $i16 := $add.i64($i15, 16);
  // WARNING: %20 = add i64 %19, 16, !dbg !2481, !verifier.code !2434
  call {:cexpr "__cil_tmp19"} boogie_si_record_i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3036, 19} true;
  assume {:verifier.code 0} true;
  $p17 := $i2p.i64.ref($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3036, 17} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i32($M.0, $p17);
  // WARNING: %22 = load i32, i32* %21, align 4, !dbg !2485, !verifier.code !2434
  call {:cexpr "__cil_tmp20"} boogie_si_record_i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3037, 17} true;
  assume {:verifier.code 0} true;
  $i19 := $zext.i32.i64($i18);
  // WARNING: %23 = zext i32 %22 to i64, !dbg !2488, !verifier.code !2434
  call {:cexpr "__cil_tmp21"} boogie_si_record_i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3039, 17} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i64($M.0, record_size);
  // WARNING: %24 = load i64, i64* @record_size, align 8, !dbg !2493, !verifier.code !2434
  call {:cexpr "__cil_tmp23"} boogie_si_record_i64($i20);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3040, 17} true;
  assume {:verifier.code 0} true;
  $i21 := $p2i.ref.i64($p9);
  // WARNING: %25 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2496, !verifier.code !2434
  call {:cexpr "__cil_tmp24"} boogie_si_record_i64($i21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3041, 29} true;
  assume {:verifier.code 0} true;
  $i22 := $add.i64($i21, 116);
  // WARNING: %26 = add i64 %25, 116, !dbg !2499, !verifier.code !2434
  call {:cexpr "__cil_tmp25"} boogie_si_record_i64($i22);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3042, 19} true;
  assume {:verifier.code 0} true;
  $p23 := $i2p.i64.ref($i22);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3042, 17} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i32($M.0, $p23);
  // WARNING: %28 = load i32, i32* %27, align 4, !dbg !2503, !verifier.code !2434
  call {:cexpr "__cil_tmp26"} boogie_si_record_i32($i24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3043, 17} true;
  assume {:verifier.code 0} true;
  $i25 := $sext.i32.i64($i24);
  // WARNING: %29 = sext i32 %28 to i64, !dbg !2506, !verifier.code !2434
  call {:cexpr "__cil_tmp27"} boogie_si_record_i64($i25);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3044, 29} true;
  assume {:verifier.code 0} true;
  $i26 := $mul.i64($i25, $i20);
  // WARNING: %30 = mul i64 %29, %24, !dbg !2509, !verifier.code !2434
  call {:cexpr "__cil_tmp28"} boogie_si_record_i64($i26);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3045, 29} true;
  assume {:verifier.code 0} true;
  $i27 := $urem.i64($i26, $i19);
  // WARNING: %31 = urem i64 %30, %23, !dbg !2512, !verifier.code !2434
  call {:cexpr "__cil_tmp29"} boogie_si_record_i64($i27);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3046, 9} true;
  assume {:verifier.code 0} true;
  $i28 := $trunc.i64.i32($i27);
  // WARNING: %32 = trunc i64 %31 to i32, !dbg !2515, !verifier.code !2434
  call {:cexpr "mod"} boogie_si_record_i32($i28);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3047, 11} true;
  assume {:verifier.code 0} true;
  $i29 := $ne.i32($i28, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3047, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i29 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3048, 19} true;
  assume {:verifier.code 0} true;
  $i30 := $p2i.ref.i64($p9);
  // WARNING: %35 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2521, !verifier.code !2434
  call {:cexpr "__cil_tmp30"} boogie_si_record_i64($i30);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3049, 31} true;
  assume {:verifier.code 0} true;
  $i31 := $add.i64($i30, 116);
  // WARNING: %36 = add i64 %35, 116, !dbg !2525, !verifier.code !2434
  call {:cexpr "__cil_tmp31"} boogie_si_record_i64($i31);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3051, 19} true;
  assume {:verifier.code 0} true;
  $i32 := $load.i64($M.0, record_size);
  // WARNING: %37 = load i64, i64* @record_size, align 8, !dbg !2530, !verifier.code !2434
  call {:cexpr "__cil_tmp33"} boogie_si_record_i64($i32);
  // WARNING: call void @llvm.dbg.value(metadata i64 %37, i64 0, metadata !2833, metadata !2433), !dbg !2834, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3053, 19} true;
  assume {:verifier.code 0} true;
  $i33 := $p2i.ref.i64($p13);
  // WARNING: %38 = ptrtoint %struct.mtd_info* %14 to i64, !dbg !2535, !verifier.code !2434
  call {:cexpr "__cil_tmp35"} boogie_si_record_i64($i33);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3054, 31} true;
  assume {:verifier.code 0} true;
  $i34 := $add.i64($i33, 16);
  // WARNING: %39 = add i64 %38, 16, !dbg !2538, !verifier.code !2434
  call {:cexpr "__cil_tmp36"} boogie_si_record_i64($i34);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3055, 21} true;
  assume {:verifier.code 0} true;
  $p35 := $i2p.i64.ref($i34);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3055, 19} true;
  assume {:verifier.code 0} true;
  $i36 := $load.i32($M.0, $p35);
  // WARNING: %41 = load i32, i32* %40, align 4, !dbg !2542, !verifier.code !2434
  call {:cexpr "__cil_tmp37"} boogie_si_record_i32($i36);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3056, 31} true;
  assume {:verifier.code 0} true;
  $i37 := $sub.i32($i36, $i28);
  // WARNING: %42 = sub i32 %41, %32, !dbg !2545, !verifier.code !2434
  call {:cexpr "__cil_tmp38"} boogie_si_record_i32($i37);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3057, 19} true;
  assume {:verifier.code 0} true;
  $i38 := $zext.i32.i64($i37);
  // WARNING: %43 = zext i32 %42 to i64, !dbg !2548, !verifier.code !2434
  call {:cexpr "__cil_tmp39"} boogie_si_record_i64($i38);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3058, 31} true;
  assume {:verifier.code 0} true;
  $i39 := $udiv.i64($i38, $i32);
  // WARNING: %44 = udiv i64 %43, %37, !dbg !2551, !verifier.code !2434
  call {:cexpr "__cil_tmp40"} boogie_si_record_i64($i39);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3059, 19} true;
  assume {:verifier.code 0} true;
  $i40 := $p2i.ref.i64($p9);
  // WARNING: %45 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2554, !verifier.code !2434
  call {:cexpr "__cil_tmp41"} boogie_si_record_i64($i40);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3060, 31} true;
  assume {:verifier.code 0} true;
  $i41 := $add.i64($i40, 116);
  // WARNING: %46 = add i64 %45, 116, !dbg !2557, !verifier.code !2434
  call {:cexpr "__cil_tmp42"} boogie_si_record_i64($i41);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3061, 21} true;
  assume {:verifier.code 0} true;
  $p42 := $i2p.i64.ref($i41);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3061, 19} true;
  assume {:verifier.code 0} true;
  $i43 := $load.i32($M.0, $p42);
  // WARNING: %48 = load i32, i32* %47, align 4, !dbg !2561, !verifier.code !2434
  call {:cexpr "__cil_tmp43"} boogie_si_record_i32($i43);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3062, 19} true;
  assume {:verifier.code 0} true;
  $i44 := $sext.i32.i64($i43);
  // WARNING: %49 = sext i32 %48 to i64, !dbg !2564, !verifier.code !2434
  call {:cexpr "__cil_tmp44"} boogie_si_record_i64($i44);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3063, 31} true;
  assume {:verifier.code 0} true;
  $i45 := $add.i64($i44, $i39);
  // WARNING: %50 = add i64 %49, %44, !dbg !2567, !verifier.code !2434
  call {:cexpr "__cil_tmp45"} boogie_si_record_i64($i45);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3064, 29} true;
  assume {:verifier.code 0} true;
  $i46 := $trunc.i64.i32($i45);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3064, 7} true;
  assume {:verifier.code 0} true;
  $p47 := $i2p.i64.ref($i31);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3064, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p47, $i46);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3066, 19} true;
  assume {:verifier.code 0} true;
  $i48 := $p2i.ref.i64($p9);
  // WARNING: %53 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2573, !verifier.code !2434
  call {:cexpr "__cil_tmp46"} boogie_si_record_i64($i48);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3067, 31} true;
  assume {:verifier.code 0} true;
  $i49 := $add.i64($i48, 112);
  // WARNING: %54 = add i64 %53, 112, !dbg !2577, !verifier.code !2434
  call {:cexpr "__cil_tmp47"} boogie_si_record_i64($i49);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3068, 21} true;
  assume {:verifier.code 0} true;
  $p50 := $i2p.i64.ref($i49);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3068, 19} true;
  assume {:verifier.code 0} true;
  $i51 := $load.i32($M.0, $p50);
  // WARNING: %56 = load i32, i32* %55, align 4, !dbg !2581, !verifier.code !2434
  call {:cexpr "__cil_tmp48"} boogie_si_record_i32($i51);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3069, 19} true;
  assume {:verifier.code 0} true;
  $i52 := $p2i.ref.i64($p9);
  // WARNING: %57 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2584, !verifier.code !2434
  call {:cexpr "__cil_tmp49"} boogie_si_record_i64($i52);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3070, 31} true;
  assume {:verifier.code 0} true;
  $i53 := $add.i64($i52, 116);
  // WARNING: %58 = add i64 %57, 116, !dbg !2587, !verifier.code !2434
  call {:cexpr "__cil_tmp50"} boogie_si_record_i64($i53);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3071, 21} true;
  assume {:verifier.code 0} true;
  $p54 := $i2p.i64.ref($i53);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3071, 19} true;
  assume {:verifier.code 0} true;
  $i55 := $load.i32($M.0, $p54);
  // WARNING: %60 = load i32, i32* %59, align 4, !dbg !2591, !verifier.code !2434
  call {:cexpr "__cil_tmp51"} boogie_si_record_i32($i55);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3072, 21} true;
  assume {:verifier.code 0} true;
  $i56 := $sge.i32($i55, $i51);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3072, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb7, $bb8;
$bb6:
  assume !(($i29 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb7:
  assume ($i56 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3073, 21} true;
  assume {:verifier.code 0} true;
  $i57 := $p2i.ref.i64($p9);
  // WARNING: %63 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2597, !verifier.code !2434
  call {:cexpr "__cil_tmp52"} boogie_si_record_i64($i57);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3074, 33} true;
  assume {:verifier.code 0} true;
  $i58 := $add.i64($i57, 116);
  // WARNING: %64 = add i64 %63, 116, !dbg !2601, !verifier.code !2434
  call {:cexpr "__cil_tmp53"} boogie_si_record_i64($i58);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3075, 9} true;
  assume {:verifier.code 0} true;
  $p59 := $i2p.i64.ref($i58);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3075, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p59, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3076, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i56 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3080, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3084, 3} true;
  assume {:verifier.code 0} true;
  $i60 := 0;
  goto $bb11;
$bb11:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3084, 13} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3088, 19} true;
  assume {:verifier.code 0} true;
  $i61 := $load.i64($M.0, record_size);
  // WARNING: %72 = load i64, i64* @record_size, align 8, !dbg !2614, !verifier.code !2434
  call {:cexpr "__cil_tmp55"} boogie_si_record_i64($i61);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3089, 19} true;
  assume {:verifier.code 0} true;
  $i62 := $p2i.ref.i64($p9);
  // WARNING: %73 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2619, !verifier.code !2434
  call {:cexpr "__cil_tmp56"} boogie_si_record_i64($i62);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3090, 31} true;
  assume {:verifier.code 0} true;
  $i63 := $add.i64($i62, 116);
  // WARNING: %74 = add i64 %73, 116, !dbg !2622, !verifier.code !2434
  call {:cexpr "__cil_tmp57"} boogie_si_record_i64($i63);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3091, 21} true;
  assume {:verifier.code 0} true;
  $p64 := $i2p.i64.ref($i63);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3091, 19} true;
  assume {:verifier.code 0} true;
  $i65 := $load.i32($M.0, $p64);
  // WARNING: %76 = load i32, i32* %75, align 4, !dbg !2626, !verifier.code !2434
  call {:cexpr "__cil_tmp58"} boogie_si_record_i32($i65);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3092, 19} true;
  assume {:verifier.code 0} true;
  $i66 := $sext.i32.i64($i65);
  // WARNING: %77 = sext i32 %76 to i64, !dbg !2629, !verifier.code !2434
  call {:cexpr "__cil_tmp59"} boogie_si_record_i64($i66);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3093, 31} true;
  assume {:verifier.code 0} true;
  $i67 := $mul.i64($i66, $i61);
  // WARNING: %78 = mul i64 %77, %72, !dbg !2632, !verifier.code !2434
  call {:cexpr "__cil_tmp60"} boogie_si_record_i64($i67);
  // WARNING: call void @llvm.dbg.value(metadata i64 %78, i64 0, metadata !2935, metadata !2433), !dbg !2936, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3095, 11} true;
  assume {:verifier.code 0} true;
  call $i68 := mtd_block_isbad($p13, $i67);
  // WARNING: %79 = call i32 @mtd_block_isbad(%struct.mtd_info* %14, i64 %78), !dbg !2637, !verifier.code !2434
  call {:cexpr "ret"} boogie_si_record_i32($i68);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3097, 11} true;
  assume {:verifier.code 0} true;
  $i69 := $ne.i32($i68, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3097, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i69} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i69 == 1);
  assume {:verifier.code 0} true;
  goto $bb16;
$bb14:
  assume !(($i69 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3098, 7} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb15:
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !3111, metadata !2433), !dbg !3112, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3181, 3} true;
  assume {:verifier.code 0} true;
  $i126, $i127 := 0, $sub.i32(0, 1);
  goto $bb27;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3102, 13} true;
  assume {:verifier.code 0} true;
  $i70 := $slt.i32($i68, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3102, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i70} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i70 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3104, 7} true;
  assume {:verifier.code 0} true;
  call $i71 := printk.ref(.str.4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3106, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb18:
  assume !(($i70 == 1));
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3102, 15} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb20:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3113, 19} true;
  assume {:verifier.code 0} true;
  $i72 := $load.i64($M.0, record_size);
  // WARNING: %90 = load i64, i64* @record_size, align 8, !dbg !2656, !verifier.code !2434
  call {:cexpr "__cil_tmp63"} boogie_si_record_i64($i72);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3114, 19} true;
  assume {:verifier.code 0} true;
  $i73 := $p2i.ref.i64($p9);
  // WARNING: %91 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2660, !verifier.code !2434
  call {:cexpr "__cil_tmp64"} boogie_si_record_i64($i73);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3115, 31} true;
  assume {:verifier.code 0} true;
  $i74 := $add.i64($i73, 116);
  // WARNING: %92 = add i64 %91, 116, !dbg !2663, !verifier.code !2434
  call {:cexpr "__cil_tmp65"} boogie_si_record_i64($i74);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3116, 21} true;
  assume {:verifier.code 0} true;
  $p75 := $i2p.i64.ref($i74);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3116, 19} true;
  assume {:verifier.code 0} true;
  $i76 := $load.i32($M.0, $p75);
  // WARNING: %94 = load i32, i32* %93, align 4, !dbg !2667, !verifier.code !2434
  call {:cexpr "__cil_tmp66"} boogie_si_record_i32($i76);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3117, 19} true;
  assume {:verifier.code 0} true;
  $i77 := $sext.i32.i64($i76);
  // WARNING: %95 = sext i32 %94 to i64, !dbg !2670, !verifier.code !2434
  call {:cexpr "__cil_tmp67"} boogie_si_record_i64($i77);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3118, 31} true;
  assume {:verifier.code 0} true;
  $i78 := $mul.i64($i77, $i72);
  // WARNING: %96 = mul i64 %95, %90, !dbg !2673, !verifier.code !2434
  call {:cexpr "__cil_tmp68"} boogie_si_record_i64($i78);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3119, 5} true;
  assume {:verifier.code 0} true;
  call $i79 := printk.ref.i64(.str.5, $i78);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3120, 11} true;
  assume {:verifier.code 0} true;
  $i80 := $add.i32($i60, 1);
  // WARNING: %98 = add nsw i32 %.02, 1, !dbg !2677, !verifier.code !2434
  call {:cexpr "i"} boogie_si_record_i32($i80);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3121, 19} true;
  assume {:verifier.code 0} true;
  $i81 := $p2i.ref.i64($p9);
  // WARNING: %99 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2678, !verifier.code !2434
  call {:cexpr "__cil_tmp69"} boogie_si_record_i64($i81);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3122, 31} true;
  assume {:verifier.code 0} true;
  $i82 := $add.i64($i81, 116);
  // WARNING: %100 = add i64 %99, 116, !dbg !2681, !verifier.code !2434
  call {:cexpr "__cil_tmp70"} boogie_si_record_i64($i82);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3124, 19} true;
  assume {:verifier.code 0} true;
  $i83 := $load.i64($M.0, record_size);
  // WARNING: %101 = load i64, i64* @record_size, align 8, !dbg !2686, !verifier.code !2434
  call {:cexpr "__cil_tmp72"} boogie_si_record_i64($i83);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3125, 19} true;
  assume {:verifier.code 0} true;
  $i84 := $p2i.ref.i64($p13);
  // WARNING: %102 = ptrtoint %struct.mtd_info* %14 to i64, !dbg !2689, !verifier.code !2434
  call {:cexpr "__cil_tmp73"} boogie_si_record_i64($i84);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3126, 31} true;
  assume {:verifier.code 0} true;
  $i85 := $add.i64($i84, 16);
  // WARNING: %103 = add i64 %102, 16, !dbg !2692, !verifier.code !2434
  call {:cexpr "__cil_tmp74"} boogie_si_record_i64($i85);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3127, 21} true;
  assume {:verifier.code 0} true;
  $p86 := $i2p.i64.ref($i85);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3127, 19} true;
  assume {:verifier.code 0} true;
  $i87 := $load.i32($M.0, $p86);
  // WARNING: %105 = load i32, i32* %104, align 4, !dbg !2696, !verifier.code !2434
  call {:cexpr "__cil_tmp75"} boogie_si_record_i32($i87);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3128, 19} true;
  assume {:verifier.code 0} true;
  $i88 := $zext.i32.i64($i87);
  // WARNING: %106 = zext i32 %105 to i64, !dbg !2699, !verifier.code !2434
  call {:cexpr "__cil_tmp76"} boogie_si_record_i64($i88);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3129, 31} true;
  assume {:verifier.code 0} true;
  $i89 := $udiv.i64($i88, $i83);
  // WARNING: %107 = udiv i64 %106, %101, !dbg !2702, !verifier.code !2434
  call {:cexpr "__cil_tmp77"} boogie_si_record_i64($i89);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3130, 19} true;
  assume {:verifier.code 0} true;
  $i90 := $p2i.ref.i64($p9);
  // WARNING: %108 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2705, !verifier.code !2434
  call {:cexpr "__cil_tmp78"} boogie_si_record_i64($i90);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3131, 31} true;
  assume {:verifier.code 0} true;
  $i91 := $add.i64($i90, 116);
  // WARNING: %109 = add i64 %108, 116, !dbg !2708, !verifier.code !2434
  call {:cexpr "__cil_tmp79"} boogie_si_record_i64($i91);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3132, 21} true;
  assume {:verifier.code 0} true;
  $p92 := $i2p.i64.ref($i91);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3132, 19} true;
  assume {:verifier.code 0} true;
  $i93 := $load.i32($M.0, $p92);
  // WARNING: %111 = load i32, i32* %110, align 4, !dbg !2712, !verifier.code !2434
  call {:cexpr "__cil_tmp80"} boogie_si_record_i32($i93);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3133, 19} true;
  assume {:verifier.code 0} true;
  $i94 := $sext.i32.i64($i93);
  // WARNING: %112 = sext i32 %111 to i64, !dbg !2715, !verifier.code !2434
  call {:cexpr "__cil_tmp81"} boogie_si_record_i64($i94);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3134, 31} true;
  assume {:verifier.code 0} true;
  $i95 := $add.i64($i94, $i89);
  // WARNING: %113 = add i64 %112, %107, !dbg !2718, !verifier.code !2434
  call {:cexpr "__cil_tmp82"} boogie_si_record_i64($i95);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3135, 29} true;
  assume {:verifier.code 0} true;
  $i96 := $trunc.i64.i32($i95);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3135, 7} true;
  assume {:verifier.code 0} true;
  $p97 := $i2p.i64.ref($i82);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3135, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p97, $i96);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3138, 19} true;
  assume {:verifier.code 0} true;
  $i98 := $p2i.ref.i64($p9);
  // WARNING: %116 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2724, !verifier.code !2434
  call {:cexpr "__cil_tmp83"} boogie_si_record_i64($i98);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3139, 31} true;
  assume {:verifier.code 0} true;
  $i99 := $add.i64($i98, 112);
  // WARNING: %117 = add i64 %116, 112, !dbg !2728, !verifier.code !2434
  call {:cexpr "__cil_tmp84"} boogie_si_record_i64($i99);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3140, 21} true;
  assume {:verifier.code 0} true;
  $p100 := $i2p.i64.ref($i99);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3140, 19} true;
  assume {:verifier.code 0} true;
  $i101 := $load.i32($M.0, $p100);
  // WARNING: %119 = load i32, i32* %118, align 4, !dbg !2732, !verifier.code !2434
  call {:cexpr "__cil_tmp85"} boogie_si_record_i32($i101);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3141, 19} true;
  assume {:verifier.code 0} true;
  $i102 := $p2i.ref.i64($p9);
  // WARNING: %120 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2735, !verifier.code !2434
  call {:cexpr "__cil_tmp86"} boogie_si_record_i64($i102);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3142, 31} true;
  assume {:verifier.code 0} true;
  $i103 := $add.i64($i102, 116);
  // WARNING: %121 = add i64 %120, 116, !dbg !2738, !verifier.code !2434
  call {:cexpr "__cil_tmp87"} boogie_si_record_i64($i103);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3143, 21} true;
  assume {:verifier.code 0} true;
  $p104 := $i2p.i64.ref($i103);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3143, 19} true;
  assume {:verifier.code 0} true;
  $i105 := $load.i32($M.0, $p104);
  // WARNING: %123 = load i32, i32* %122, align 4, !dbg !2742, !verifier.code !2434
  call {:cexpr "__cil_tmp88"} boogie_si_record_i32($i105);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3144, 21} true;
  assume {:verifier.code 0} true;
  $i106 := $sge.i32($i105, $i101);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3144, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i106} true;
  goto $bb21, $bb22;
$bb21:
  assume ($i106 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3145, 21} true;
  assume {:verifier.code 0} true;
  $i107 := $p2i.ref.i64($p9);
  // WARNING: %126 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2748, !verifier.code !2434
  call {:cexpr "__cil_tmp89"} boogie_si_record_i64($i107);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3146, 33} true;
  assume {:verifier.code 0} true;
  $i108 := $add.i64($i107, 116);
  // WARNING: %127 = add i64 %126, 116, !dbg !2752, !verifier.code !2434
  call {:cexpr "__cil_tmp90"} boogie_si_record_i64($i108);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3147, 9} true;
  assume {:verifier.code 0} true;
  $p109 := $i2p.i64.ref($i108);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3147, 29} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p109, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3148, 5} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb22:
  assume !(($i106 == 1));
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3154, 19} true;
  assume {:verifier.code 0} true;
  $i110 := $load.i64($M.0, record_size);
  // WARNING: %131 = load i64, i64* @record_size, align 8, !dbg !2760, !verifier.code !2434
  call {:cexpr "__cil_tmp92"} boogie_si_record_i64($i110);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3155, 19} true;
  assume {:verifier.code 0} true;
  $i111 := $p2i.ref.i64($p13);
  // WARNING: %132 = ptrtoint %struct.mtd_info* %14 to i64, !dbg !2764, !verifier.code !2434
  call {:cexpr "__cil_tmp93"} boogie_si_record_i64($i111);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3156, 31} true;
  assume {:verifier.code 0} true;
  $i112 := $add.i64($i111, 16);
  // WARNING: %133 = add i64 %132, 16, !dbg !2767, !verifier.code !2434
  call {:cexpr "__cil_tmp94"} boogie_si_record_i64($i112);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3157, 21} true;
  assume {:verifier.code 0} true;
  $p113 := $i2p.i64.ref($i112);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3157, 19} true;
  assume {:verifier.code 0} true;
  $i114 := $load.i32($M.0, $p113);
  // WARNING: %135 = load i32, i32* %134, align 4, !dbg !2771, !verifier.code !2434
  call {:cexpr "__cil_tmp95"} boogie_si_record_i32($i114);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3158, 19} true;
  assume {:verifier.code 0} true;
  $i115 := $zext.i32.i64($i114);
  // WARNING: %136 = zext i32 %135 to i64, !dbg !2774, !verifier.code !2434
  call {:cexpr "__cil_tmp96"} boogie_si_record_i64($i115);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3159, 31} true;
  assume {:verifier.code 0} true;
  $i116 := $udiv.i64($i115, $i110);
  // WARNING: %137 = udiv i64 %136, %131, !dbg !2777, !verifier.code !2434
  call {:cexpr "__cil_tmp97"} boogie_si_record_i64($i116);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3160, 19} true;
  assume {:verifier.code 0} true;
  $i117 := $p2i.ref.i64($p9);
  // WARNING: %138 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2780, !verifier.code !2434
  call {:cexpr "__cil_tmp98"} boogie_si_record_i64($i117);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3161, 31} true;
  assume {:verifier.code 0} true;
  $i118 := $add.i64($i117, 112);
  // WARNING: %139 = add i64 %138, 112, !dbg !2783, !verifier.code !2434
  call {:cexpr "__cil_tmp99"} boogie_si_record_i64($i118);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3162, 22} true;
  assume {:verifier.code 0} true;
  $p119 := $i2p.i64.ref($i118);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3162, 20} true;
  assume {:verifier.code 0} true;
  $i120 := $load.i32($M.0, $p119);
  // WARNING: %141 = load i32, i32* %140, align 4, !dbg !2787, !verifier.code !2434
  call {:cexpr "__cil_tmp100"} boogie_si_record_i32($i120);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3163, 20} true;
  assume {:verifier.code 0} true;
  $i121 := $sext.i32.i64($i120);
  // WARNING: %142 = sext i32 %141 to i64, !dbg !2790, !verifier.code !2434
  call {:cexpr "__cil_tmp101"} boogie_si_record_i64($i121);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3164, 33} true;
  assume {:verifier.code 0} true;
  $i122 := $udiv.i64($i121, $i116);
  // WARNING: %143 = udiv i64 %142, %137, !dbg !2793, !verifier.code !2434
  call {:cexpr "__cil_tmp102"} boogie_si_record_i64($i122);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3165, 20} true;
  assume {:verifier.code 0} true;
  $i123 := $sext.i32.i64($i80);
  // WARNING: %144 = sext i32 %98 to i64, !dbg !2796, !verifier.code !2434
  call {:cexpr "__cil_tmp103"} boogie_si_record_i64($i123);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3166, 22} true;
  assume {:verifier.code 0} true;
  $i124 := $eq.i64($i123, $i122);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3166, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i124} true;
  goto $bb24, $bb25;
$bb24:
  assume ($i124 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3168, 7} true;
  assume {:verifier.code 0} true;
  call $i125 := printk.ref(.str.6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3170, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb25:
  assume !(($i124 == 1));
  assume {:verifier.code 0} true;
  goto $bb26;
$bb26:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3084, 3} true;
  assume {:verifier.code 0} true;
  $i60 := $i80;
  goto $bb11;
$bb27:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3181, 13} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3183, 11} true;
  assume {:verifier.code 0} true;
  $i128 := $slt.i32($i126, 3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3183, 9} true;
  assume {:verifier.code 0} true;
  $i129 := $i127;
  assume {:branchcond $i128} true;
  goto $bb29, $bb30;
$bb29:
  assume ($i128 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3184, 15} true;
  assume {:verifier.code 0} true;
  $i130 := $slt.i32($i127, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3184, 11} true;
  assume {:verifier.code 0} true;
  $i131 := $i127;
  assume {:branchcond $i130} true;
  goto $bb31, $bb32;
$bb30:
  assume !(($i128 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3190, 7} true;
  assume {:verifier.code 0} true;
  $i132 := $i129;
  goto $bb34;
$bb31:
  assume ($i130 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3186, 7} true;
  assume {:verifier.code 0} true;
  goto $bb33;
$bb32:
  assume !(($i130 == 1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3187, 9} true;
  assume {:verifier.code 0} true;
  $i132 := $i131;
  goto $bb34;
$bb33:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3189, 5} true;
  assume {:verifier.code 0} true;
  goto $bb35;
$bb34:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3207, 11} true;
  assume {:verifier.code 0} true;
  $i143 := $sge.i32($i132, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3207, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i143} true;
  goto $bb36, $bb37;
$bb35:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3194, 20} true;
  assume {:verifier.code 0} true;
  $i133 := $load.i64($M.0, record_size);
  // WARNING: %161 = load i64, i64* @record_size, align 8, !dbg !2832, !verifier.code !2434
  call {:cexpr "__cil_tmp105"} boogie_si_record_i64($i133);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3195, 20} true;
  assume {:verifier.code 0} true;
  $i134 := $p2i.ref.i64($p9);
  // WARNING: %162 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2836, !verifier.code !2434
  call {:cexpr "__cil_tmp106"} boogie_si_record_i64($i134);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3196, 33} true;
  assume {:verifier.code 0} true;
  $i135 := $add.i64($i134, 116);
  // WARNING: %163 = add i64 %162, 116, !dbg !2839, !verifier.code !2434
  call {:cexpr "__cil_tmp107"} boogie_si_record_i64($i135);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3197, 22} true;
  assume {:verifier.code 0} true;
  $p136 := $i2p.i64.ref($i135);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3197, 20} true;
  assume {:verifier.code 0} true;
  $i137 := $load.i32($M.0, $p136);
  // WARNING: %165 = load i32, i32* %164, align 4, !dbg !2843, !verifier.code !2434
  call {:cexpr "__cil_tmp108"} boogie_si_record_i32($i137);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3198, 20} true;
  assume {:verifier.code 0} true;
  $i138 := $sext.i32.i64($i137);
  // WARNING: %166 = sext i32 %165 to i64, !dbg !2846, !verifier.code !2434
  call {:cexpr "__cil_tmp109"} boogie_si_record_i64($i138);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3199, 33} true;
  assume {:verifier.code 0} true;
  $i139 := $mul.i64($i138, $i133);
  // WARNING: %167 = mul i64 %166, %161, !dbg !2849, !verifier.code !2434
  call {:cexpr "__cil_tmp110"} boogie_si_record_i64($i139);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3200, 20} true;
  assume {:verifier.code 0} true;
  $i140 := $trunc.i64.i32($i139);
  // WARNING: %168 = trunc i64 %167 to i32, !dbg !2852, !verifier.code !2434
  call {:cexpr "__cil_tmp111"} boogie_si_record_i32($i140);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3201, 11} true;
  assume {:verifier.code 0} true;
  call $i141 := mtdoops_erase_block($p9, $i140);
  // WARNING: %169 = call i32 @mtdoops_erase_block(%struct.mtdoops_context* %10, i32 %168), !dbg !2855, !verifier.code !2434
  call {:cexpr "ret"} boogie_si_record_i32($i141);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3202, 11} true;
  assume {:verifier.code 0} true;
  $i142 := $add.i32($i126, 1);
  // WARNING: %170 = add nsw i32 %.01, 1, !dbg !2856, !verifier.code !2434
  call {:cexpr "j"} boogie_si_record_i32($i142);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3181, 3} true;
  assume {:verifier.code 0} true;
  $i126, $i127 := $i142, $i141;
  goto $bb27;
$bb36:
  assume ($i143 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3209, 20} true;
  assume {:verifier.code 0} true;
  $i144 := $p2i.ref.i64($p9);
  // WARNING: %174 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2863, !verifier.code !2434
  call {:cexpr "__cil_tmp112"} boogie_si_record_i64($i144);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3210, 33} true;
  assume {:verifier.code 0} true;
  $i145 := $add.i64($i144, 116);
  // WARNING: %175 = add i64 %174, 116, !dbg !2868, !verifier.code !2434
  call {:cexpr "__cil_tmp113"} boogie_si_record_i64($i145);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3211, 22} true;
  assume {:verifier.code 0} true;
  $p146 := $i2p.i64.ref($i145);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3211, 20} true;
  assume {:verifier.code 0} true;
  $i147 := $load.i32($M.0, $p146);
  // WARNING: %177 = load i32, i32* %176, align 4, !dbg !2872, !verifier.code !2434
  call {:cexpr "__cil_tmp114"} boogie_si_record_i32($i147);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3212, 20} true;
  assume {:verifier.code 0} true;
  $i148 := $p2i.ref.i64($p9);
  // WARNING: %178 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2875, !verifier.code !2434
  call {:cexpr "__cil_tmp115"} boogie_si_record_i64($i148);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3213, 33} true;
  assume {:verifier.code 0} true;
  $i149 := $add.i64($i148, 120);
  // WARNING: %179 = add i64 %178, 120, !dbg !2878, !verifier.code !2434
  call {:cexpr "__cil_tmp116"} boogie_si_record_i64($i149);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3214, 22} true;
  assume {:verifier.code 0} true;
  $p150 := $i2p.i64.ref($i149);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3214, 20} true;
  assume {:verifier.code 0} true;
  $i151 := $load.i32($M.0, $p150);
  // WARNING: %181 = load i32, i32* %180, align 4, !dbg !2882, !verifier.code !2434
  call {:cexpr "__cil_tmp117"} boogie_si_record_i32($i151);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3215, 5} true;
  assume {:verifier.code 0} true;
  call $i152 := printk.ref.i32.i32(.str.7, $i147, $i151);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3217, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb37:
  assume !(($i143 == 1));
  assume {:verifier.code 0} true;
  goto $bb38;
$bb38:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3221, 11} true;
  assume {:verifier.code 0} true;
  $i153 := $eq.i32($i132, $sub.i32(0, 5));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3221, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i153} true;
  goto $bb39, $bb40;
$bb39:
  assume ($i153 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3224, 20} true;
  assume {:verifier.code 0} true;
  $i154 := $load.i64($M.0, record_size);
  // WARNING: %187 = load i64, i64* @record_size, align 8, !dbg !2892, !verifier.code !2434
  call {:cexpr "__cil_tmp119"} boogie_si_record_i64($i154);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3225, 20} true;
  assume {:verifier.code 0} true;
  $i155 := $p2i.ref.i64($p9);
  // WARNING: %188 = ptrtoint %struct.mtdoops_context* %10 to i64, !dbg !2897, !verifier.code !2434
  call {:cexpr "__cil_tmp120"} boogie_si_record_i64($i155);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3226, 33} true;
  assume {:verifier.code 0} true;
  $i156 := $add.i64($i155, 116);
  // WARNING: %189 = add i64 %188, 116, !dbg !2900, !verifier.code !2434
  call {:cexpr "__cil_tmp121"} boogie_si_record_i64($i156);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3227, 22} true;
  assume {:verifier.code 0} true;
  $p157 := $i2p.i64.ref($i156);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3227, 20} true;
  assume {:verifier.code 0} true;
  $i158 := $load.i32($M.0, $p157);
  // WARNING: %191 = load i32, i32* %190, align 4, !dbg !2904, !verifier.code !2434
  call {:cexpr "__cil_tmp122"} boogie_si_record_i32($i158);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3228, 20} true;
  assume {:verifier.code 0} true;
  $i159 := $sext.i32.i64($i158);
  // WARNING: %192 = sext i32 %191 to i64, !dbg !2907, !verifier.code !2434
  call {:cexpr "__cil_tmp123"} boogie_si_record_i64($i159);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3229, 33} true;
  assume {:verifier.code 0} true;
  $i160 := $mul.i64($i159, $i154);
  // WARNING: %193 = mul i64 %192, %187, !dbg !2910, !verifier.code !2434
  call {:cexpr "__cil_tmp124"} boogie_si_record_i64($i160);
  // WARNING: call void @llvm.dbg.value(metadata i64 %193, i64 0, metadata !3213, metadata !2433), !dbg !3214, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3231, 11} true;
  assume {:verifier.code 0} true;
  call $i161 := mtd_block_markbad($p13, $i160);
  // WARNING: %194 = call i32 @mtd_block_markbad(%struct.mtd_info* %14, i64 %193), !dbg !2915, !verifier.code !2434
  call {:cexpr "ret"} boogie_si_record_i32($i161);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3233, 13} true;
  assume {:verifier.code 0} true;
  $i162 := $slt.i32($i161, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3233, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i162} true;
  goto $bb41, $bb42;
$bb40:
  assume !(($i153 == 1));
  assume {:verifier.code 0} true;
  goto $bb47;
$bb41:
  assume ($i162 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3234, 15} true;
  assume {:verifier.code 0} true;
  $i163 := $ne.i32($i161, $sub.i32(0, 95));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3234, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i163} true;
  goto $bb43, $bb44;
$bb42:
  assume !(($i162 == 1));
  assume {:verifier.code 0} true;
  goto $bb46;
$bb43:
  assume ($i163 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3236, 9} true;
  assume {:verifier.code 0} true;
  call $i164 := printk.ref(.str.8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3238, 9} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb44:
  assume !(($i163 == 1));
  assume {:verifier.code 0} true;
  goto $bb45;
$bb45:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3242, 5} true;
  assume {:verifier.code 0} true;
  goto $bb46;
$bb46:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3245, 3} true;
  assume {:verifier.code 0} true;
  goto $bb47;
$bb47:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3248, 3} true;
  assume {:verifier.code 0} true;
  goto $bb20;
}
const mtdoops_workfunc_write: ref;
axiom (mtdoops_workfunc_write == $sub.ref(0, 62443));
procedure  mtdoops_workfunc_write($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3462, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($0.ref);
  // WARNING: %2 = ptrtoint %struct.mtdoops_context* null to i64, !dbg !2439, !verifier.code !2434
  call {:cexpr "__cil_tmp5"} boogie_si_record_i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3463, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $add.i64($i1, 72);
  // WARNING: %3 = add i64 %2, 72, !dbg !2444, !verifier.code !2434
  call {:cexpr "__cil_tmp6"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3464, 16} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.i64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3465, 16} true;
  assume {:verifier.code 0} true;
  $i4 := $p2i.ref.i32($p3);
  // WARNING: %5 = ptrtoint %struct.work_struct* %4 to i32, !dbg !2450, !verifier.code !2434
  call {:cexpr "__cil_tmp8"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3466, 16} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3467, 28} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i32.i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3467, 28} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.i64(0, $i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3467, 28} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p5, $mul.ref($i7, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3468, 9} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3469, 3} true;
  assume {:verifier.code 0} true;
  call mtdoops_write($p9, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3471, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const register_mtd_user: ref;
axiom (register_mtd_user == $sub.ref(0, 63475));
procedure  register_mtd_user($p0: ref);
const mtdoops_write: ref;
axiom (mtdoops_write == $sub.ref(0, 64507));
procedure  mtdoops_write($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i34: i32;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i32;
  var $i61: i1;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i32;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
$bb0:
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata %struct.mtdoops_context* %0, i64 0, metadata !3268, metadata !2433), !dbg !3269, !verifier.code !2431
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3330, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p0);
  // WARNING: %4 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2441, !verifier.code !2433
  call {:cexpr "__cil_tmp7"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3331, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i64($i3, 104);
  // WARNING: %5 = add i64 %4, 104, !dbg !2445, !verifier.code !2433
  call {:cexpr "__cil_tmp8"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3332, 11} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.i64.ref($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3332, 9} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3333, 16} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p0);
  // WARNING: %8 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2452, !verifier.code !2433
  call {:cexpr "__cil_tmp9"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3334, 28} true;
  assume {:verifier.code 0} true;
  $i8 := $add.i64($i7, 136);
  // WARNING: %9 = add i64 %8, 136, !dbg !2455, !verifier.code !2433
  call {:cexpr "__cil_tmp10"} boogie_si_record_i64($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3335, 19} true;
  assume {:verifier.code 0} true;
  $p9 := $i2p.i64.ref($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3335, 17} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3336, 9} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3337, 21} true;
  assume {:verifier.code 0} true;
  $p12 := $p11;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3338, 17} true;
  assume {:verifier.code 0} true;
  $i13 := $p2i.ref.i64($p0);
  // WARNING: %14 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2468, !verifier.code !2433
  call {:cexpr "__cil_tmp13"} boogie_si_record_i64($i13);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3339, 29} true;
  assume {:verifier.code 0} true;
  $i14 := $add.i64($i13, 120);
  // WARNING: %15 = add i64 %14, 120, !dbg !2471, !verifier.code !2433
  call {:cexpr "__cil_tmp14"} boogie_si_record_i64($i14);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3340, 19} true;
  assume {:verifier.code 0} true;
  $p15 := $i2p.i64.ref($i14);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3340, 17} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.0, $p15);
  // WARNING: %17 = load i32, i32* %16, align 4, !dbg !2475, !verifier.code !2433
  call {:cexpr "__cil_tmp15"} boogie_si_record_i32($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3341, 16} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p12, $i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3342, 21} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p11, 4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3343, 16} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p17, 1560304896);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3344, 7} true;
  assume {:verifier.code 0} true;
  $i18 := $ne.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3344, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i18 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3347, 19} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i64($M.0, record_size);
  // WARNING: %21 = load i64, i64* @record_size, align 8, !dbg !2488, !verifier.code !2433
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3348, 19} true;
  assume {:verifier.code 0} true;
  $i20 := $p2i.ref.i64($p0);
  // WARNING: %22 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2493, !verifier.code !2433
  call {:cexpr "__cil_tmp19"} boogie_si_record_i64($i20);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3349, 31} true;
  assume {:verifier.code 0} true;
  $i21 := $add.i64($i20, 116);
  // WARNING: %23 = add i64 %22, 116, !dbg !2496, !verifier.code !2433
  call {:cexpr "__cil_tmp20"} boogie_si_record_i64($i21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3350, 21} true;
  assume {:verifier.code 0} true;
  $p22 := $i2p.i64.ref($i21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3350, 19} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i32($M.0, $p22);
  // WARNING: %25 = load i32, i32* %24, align 4, !dbg !2500, !verifier.code !2433
  call {:cexpr "__cil_tmp21"} boogie_si_record_i32($i23);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3351, 19} true;
  assume {:verifier.code 0} true;
  $i24 := $sext.i32.i64($i23);
  // WARNING: %26 = sext i32 %25 to i64, !dbg !2503, !verifier.code !2433
  call {:cexpr "__cil_tmp22"} boogie_si_record_i64($i24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3352, 31} true;
  assume {:verifier.code 0} true;
  $i25 := $mul.i64($i24, $i19);
  // WARNING: %27 = mul i64 %26, %21, !dbg !2506, !verifier.code !2433
  call {:cexpr "__cil_tmp23"} boogie_si_record_i64($i25);
  // WARNING: call void @llvm.dbg.value(metadata i64 %27, i64 0, metadata !3340, metadata !2433), !dbg !3341, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3355, 19} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i64($M.0, record_size);
  // WARNING: %28 = load i64, i64* @record_size, align 8, !dbg !2513, !verifier.code !2433
  call {:cexpr "__cil_tmp26"} boogie_si_record_i64($i26);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3356, 19} true;
  assume {:verifier.code 0} true;
  $i27 := $p2i.ref.i64($p0);
  // WARNING: %29 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2516, !verifier.code !2433
  call {:cexpr "__cil_tmp27"} boogie_si_record_i64($i27);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3357, 31} true;
  assume {:verifier.code 0} true;
  $i28 := $add.i64($i27, 136);
  // WARNING: %30 = add i64 %29, 136, !dbg !2519, !verifier.code !2433
  call {:cexpr "__cil_tmp28"} boogie_si_record_i64($i28);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3358, 21} true;
  assume {:verifier.code 0} true;
  $p29 := $i2p.i64.ref($i28);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3358, 19} true;
  assume {:verifier.code 0} true;
  $p30 := $load.ref($M.0, $p29);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3360, 11} true;
  assume {:verifier.code 0} true;
  call $i31 := mtd_panic_write($p6, $i25, $i26, $p2, $p30);
  // WARNING: %33 = call i32 @mtd_panic_write(%struct.mtd_info* %7, i64 %27, i64 %28, i64* %3, i8* %32), !dbg !2528, !verifier.code !2433
  call {:cexpr "ret"} boogie_si_record_i32($i31);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3362, 13} true;
  assume {:verifier.code 0} true;
  $i32 := $eq.i32($i31, $sub.i32(0, 95));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3362, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i18 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3373, 19} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i64($M.0, record_size);
  // WARNING: %40 = load i64, i64* @record_size, align 8, !dbg !2541, !verifier.code !2433
  call {:cexpr "__cil_tmp32"} boogie_si_record_i64($i35);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3374, 19} true;
  assume {:verifier.code 0} true;
  $i36 := $p2i.ref.i64($p0);
  // WARNING: %41 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2546, !verifier.code !2433
  call {:cexpr "__cil_tmp33"} boogie_si_record_i64($i36);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3375, 31} true;
  assume {:verifier.code 0} true;
  $i37 := $add.i64($i36, 116);
  // WARNING: %42 = add i64 %41, 116, !dbg !2549, !verifier.code !2433
  call {:cexpr "__cil_tmp34"} boogie_si_record_i64($i37);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3376, 21} true;
  assume {:verifier.code 0} true;
  $p38 := $i2p.i64.ref($i37);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3376, 19} true;
  assume {:verifier.code 0} true;
  $i39 := $load.i32($M.0, $p38);
  // WARNING: %44 = load i32, i32* %43, align 4, !dbg !2553, !verifier.code !2433
  call {:cexpr "__cil_tmp35"} boogie_si_record_i32($i39);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3377, 19} true;
  assume {:verifier.code 0} true;
  $i40 := $sext.i32.i64($i39);
  // WARNING: %45 = sext i32 %44 to i64, !dbg !2556, !verifier.code !2433
  call {:cexpr "__cil_tmp36"} boogie_si_record_i64($i40);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3378, 31} true;
  assume {:verifier.code 0} true;
  $i41 := $mul.i64($i40, $i35);
  // WARNING: %46 = mul i64 %45, %40, !dbg !2559, !verifier.code !2433
  call {:cexpr "__cil_tmp37"} boogie_si_record_i64($i41);
  // WARNING: call void @llvm.dbg.value(metadata i64 %46, i64 0, metadata !3393, metadata !2433), !dbg !3394, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3381, 19} true;
  assume {:verifier.code 0} true;
  $i42 := $load.i64($M.0, record_size);
  // WARNING: %47 = load i64, i64* @record_size, align 8, !dbg !2566, !verifier.code !2433
  call {:cexpr "__cil_tmp40"} boogie_si_record_i64($i42);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3382, 19} true;
  assume {:verifier.code 0} true;
  $i43 := $p2i.ref.i64($p0);
  // WARNING: %48 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2569, !verifier.code !2433
  call {:cexpr "__cil_tmp41"} boogie_si_record_i64($i43);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3383, 31} true;
  assume {:verifier.code 0} true;
  $i44 := $add.i64($i43, 136);
  // WARNING: %49 = add i64 %48, 136, !dbg !2572, !verifier.code !2433
  call {:cexpr "__cil_tmp42"} boogie_si_record_i64($i44);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3384, 21} true;
  assume {:verifier.code 0} true;
  $p45 := $i2p.i64.ref($i44);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3384, 19} true;
  assume {:verifier.code 0} true;
  $p46 := $load.ref($M.0, $p45);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3386, 11} true;
  assume {:verifier.code 0} true;
  call $i47 := mtd_write($p6, $i41, $i42, $p2, $p46);
  // WARNING: %52 = call i32 @mtd_write(%struct.mtd_info* %7, i64 %46, i64 %47, i64* %3, i8* %51), !dbg !2581, !verifier.code !2433
  call {:cexpr "ret"} boogie_si_record_i32($i47);
  assume {:verifier.code 0} true;
  $i34 := $i47;
  goto $bb7;
$bb3:
  assume ($i32 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3364, 7} true;
  assume {:verifier.code 0} true;
  call $i33 := printk.ref(.str.11);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3366, 7} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i32 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3446, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3370, 3} true;
  assume {:verifier.code 0} true;
  $i34 := $i31;
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3391, 17} true;
  assume {:verifier.code 0} true;
  $i48 := $load.i64($M.0, record_size);
  // WARNING: %54 = load i64, i64* @record_size, align 8, !dbg !2584, !verifier.code !2433
  call {:cexpr "__cil_tmp46"} boogie_si_record_i64($i48);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3393, 17} true;
  assume {:verifier.code 0} true;
  $i49 := $load.i64($M.0, $p2);
  // WARNING: %55 = load i64, i64* %3, align 8, !dbg !2590, !verifier.code !2433
  call {:cexpr "__cil_tmp48"} boogie_si_record_i64($i49);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3394, 19} true;
  assume {:verifier.code 0} true;
  $i50 := $ne.i64($i49, $i48);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3394, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i50} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i50 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3397, 19} true;
  assume {:verifier.code 0} true;
  $i51 := $load.i64($M.0, record_size);
  // WARNING: %58 = load i64, i64* @record_size, align 8, !dbg !2598, !verifier.code !2433
  call {:cexpr "__cil_tmp50"} boogie_si_record_i64($i51);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3398, 19} true;
  assume {:verifier.code 0} true;
  $i52 := $p2i.ref.i64($p0);
  // WARNING: %59 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2603, !verifier.code !2433
  call {:cexpr "__cil_tmp51"} boogie_si_record_i64($i52);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3399, 31} true;
  assume {:verifier.code 0} true;
  $i53 := $add.i64($i52, 116);
  // WARNING: %60 = add i64 %59, 116, !dbg !2606, !verifier.code !2433
  call {:cexpr "__cil_tmp52"} boogie_si_record_i64($i53);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3400, 21} true;
  assume {:verifier.code 0} true;
  $p54 := $i2p.i64.ref($i53);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3400, 19} true;
  assume {:verifier.code 0} true;
  $i55 := $load.i32($M.0, $p54);
  // WARNING: %62 = load i32, i32* %61, align 4, !dbg !2610, !verifier.code !2433
  call {:cexpr "__cil_tmp53"} boogie_si_record_i32($i55);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3401, 19} true;
  assume {:verifier.code 0} true;
  $i56 := $sext.i32.i64($i55);
  // WARNING: %63 = sext i32 %62 to i64, !dbg !2613, !verifier.code !2433
  call {:cexpr "__cil_tmp54"} boogie_si_record_i64($i56);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3402, 31} true;
  assume {:verifier.code 0} true;
  $i57 := $mul.i64($i56, $i51);
  // WARNING: %64 = mul i64 %63, %58, !dbg !2616, !verifier.code !2433
  call {:cexpr "__cil_tmp55"} boogie_si_record_i64($i57);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3404, 19} true;
  assume {:verifier.code 0} true;
  $i58 := $load.i64($M.0, $p2);
  // WARNING: %65 = load i64, i64* %3, align 8, !dbg !2621, !verifier.code !2433
  call {:cexpr "__cil_tmp57"} boogie_si_record_i64($i58);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3406, 19} true;
  assume {:verifier.code 0} true;
  $i59 := $load.i64($M.0, record_size);
  // WARNING: %66 = load i64, i64* @record_size, align 8, !dbg !2626, !verifier.code !2433
  call {:cexpr "__cil_tmp59"} boogie_si_record_i64($i59);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3407, 5} true;
  assume {:verifier.code 0} true;
  call $i60 := printk.ref.i64.i64.i64.i32(.str.12, $i57, $i58, $i59, $i34);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3410, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i50 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3411, 11} true;
  assume {:verifier.code 0} true;
  $i61 := $slt.i32($i34, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3411, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i61} true;
  goto $bb11, $bb12;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3432, 17} true;
  assume {:verifier.code 0} true;
  $i72 := $p2i.ref.i64($p0);
  // WARNING: %84 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2669, !verifier.code !2433
  call {:cexpr "__cil_tmp71"} boogie_si_record_i64($i72);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3433, 29} true;
  assume {:verifier.code 0} true;
  $i73 := $add.i64($i72, 116);
  // WARNING: %85 = add i64 %84, 116, !dbg !2673, !verifier.code !2433
  call {:cexpr "__cil_tmp72"} boogie_si_record_i64($i73);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3434, 19} true;
  assume {:verifier.code 0} true;
  $p74 := $i2p.i64.ref($i73);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3434, 17} true;
  assume {:verifier.code 0} true;
  $i75 := $load.i32($M.0, $p74);
  // WARNING: %87 = load i32, i32* %86, align 4, !dbg !2677, !verifier.code !2433
  call {:cexpr "__cil_tmp73"} boogie_si_record_i32($i75);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3435, 3} true;
  assume {:verifier.code 0} true;
  call mark_page_used($p0, $i75);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3436, 17} true;
  assume {:verifier.code 0} true;
  $i76 := $p2i.ref.i64($p0);
  // WARNING: %88 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2681, !verifier.code !2433
  call {:cexpr "__cil_tmp74"} boogie_si_record_i64($i76);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3437, 29} true;
  assume {:verifier.code 0} true;
  $i77 := $add.i64($i76, 136);
  // WARNING: %89 = add i64 %88, 136, !dbg !2684, !verifier.code !2433
  call {:cexpr "__cil_tmp75"} boogie_si_record_i64($i77);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3438, 19} true;
  assume {:verifier.code 0} true;
  $p78 := $i2p.i64.ref($i77);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3438, 17} true;
  assume {:verifier.code 0} true;
  $p79 := $load.ref($M.0, $p78);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3440, 17} true;
  assume {:verifier.code 0} true;
  $i80 := $load.i64($M.0, record_size);
  // WARNING: %92 = load i64, i64* @record_size, align 8, !dbg !2693, !verifier.code !2433
  call {:cexpr "__cil_tmp78"} boogie_si_record_i64($i80);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3441, 3} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memset.i8($M.0, $p79, $sub.i8(0, 1), $i80, $zext.i32.i64(1), (0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3442, 3} true;
  assume {:verifier.code 0} true;
  call mtdoops_inc_counter($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3444, 3} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb11:
  assume ($i61 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3414, 19} true;
  assume {:verifier.code 0} true;
  $i62 := $load.i64($M.0, record_size);
  // WARNING: %71 = load i64, i64* @record_size, align 8, !dbg !2636, !verifier.code !2433
  call {:cexpr "__cil_tmp61"} boogie_si_record_i64($i62);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3415, 19} true;
  assume {:verifier.code 0} true;
  $i63 := $p2i.ref.i64($p0);
  // WARNING: %72 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2641, !verifier.code !2433
  call {:cexpr "__cil_tmp62"} boogie_si_record_i64($i63);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3416, 31} true;
  assume {:verifier.code 0} true;
  $i64 := $add.i64($i63, 116);
  // WARNING: %73 = add i64 %72, 116, !dbg !2644, !verifier.code !2433
  call {:cexpr "__cil_tmp63"} boogie_si_record_i64($i64);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3417, 21} true;
  assume {:verifier.code 0} true;
  $p65 := $i2p.i64.ref($i64);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3417, 19} true;
  assume {:verifier.code 0} true;
  $i66 := $load.i32($M.0, $p65);
  // WARNING: %75 = load i32, i32* %74, align 4, !dbg !2648, !verifier.code !2433
  call {:cexpr "__cil_tmp64"} boogie_si_record_i32($i66);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3418, 19} true;
  assume {:verifier.code 0} true;
  $i67 := $sext.i32.i64($i66);
  // WARNING: %76 = sext i32 %75 to i64, !dbg !2651, !verifier.code !2433
  call {:cexpr "__cil_tmp65"} boogie_si_record_i64($i67);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3419, 31} true;
  assume {:verifier.code 0} true;
  $i68 := $mul.i64($i67, $i62);
  // WARNING: %77 = mul i64 %76, %71, !dbg !2654, !verifier.code !2433
  call {:cexpr "__cil_tmp66"} boogie_si_record_i64($i68);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3421, 19} true;
  assume {:verifier.code 0} true;
  $i69 := $load.i64($M.0, $p2);
  // WARNING: %78 = load i64, i64* %3, align 8, !dbg !2659, !verifier.code !2433
  call {:cexpr "__cil_tmp68"} boogie_si_record_i64($i69);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3423, 19} true;
  assume {:verifier.code 0} true;
  $i70 := $load.i64($M.0, record_size);
  // WARNING: %79 = load i64, i64* @record_size, align 8, !dbg !2664, !verifier.code !2433
  call {:cexpr "__cil_tmp70"} boogie_si_record_i64($i70);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3424, 5} true;
  assume {:verifier.code 0} true;
  call $i71 := printk.ref.i64.i64.i64.i32(.str.12, $i68, $i69, $i70, $i34);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3427, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume !(($i61 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:verifier.code 0} true;
  goto $bb10;
}
const mtd_panic_write: ref;
axiom (mtd_panic_write == $sub.ref(0, 65539));
procedure  mtd_panic_write($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref)
  returns ($r: i32);
const mtd_write: ref;
axiom (mtd_write == $sub.ref(0, 66571));
procedure  mtd_write($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref)
  returns ($r: i32);
const mark_page_used: ref;
axiom (mark_page_used == $sub.ref(0, 67603));
procedure  mark_page_used($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.mtdoops_context* %0, i64 0, metadata !3534, metadata !2433), !dbg !3535, !verifier.code !2431
  // WARNING: call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !3536, metadata !2433), !dbg !3537, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2403, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p0);
  // WARNING: %3 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2441, !verifier.code !2436
  call {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2404, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $add.i64($i2, 128);
  // WARNING: %4 = add i64 %3, 128, !dbg !2446, !verifier.code !2436
  call {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2405, 18} true;
  assume {:verifier.code 0} true;
  $p4 := $i2p.i64.ref($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2405, 16} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.0, $p4);
  // WARNING: call void @llvm.dbg.value(metadata i64* %6, i64 0, metadata !3552, metadata !2433), !dbg !3553, !verifier.code !2431
  call devirtbounce(0, $p5, $i1, $p5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2409, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const mtdoops_inc_counter: ref;
axiom (mtdoops_inc_counter == $sub.ref(0, 68635));
procedure  mtdoops_inc_counter($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2820, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  // WARNING: %2 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2437, !verifier.code !2436
  call {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2821, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $add.i64($i1, 116);
  // WARNING: %3 = add i64 %2, 116, !dbg !2441, !verifier.code !2436
  call {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2822, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p0);
  // WARNING: %4 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2444, !verifier.code !2436
  call {:cexpr "__cil_tmp5"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2823, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i64($i3, 116);
  // WARNING: %5 = add i64 %4, 116, !dbg !2447, !verifier.code !2436
  call {:cexpr "__cil_tmp6"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2824, 18} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.i64.ref($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2824, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.0, $p5);
  // WARNING: %7 = load i32, i32* %6, align 4, !dbg !2451, !verifier.code !2436
  call {:cexpr "__cil_tmp7"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2825, 37} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i32($i6, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2825, 5} true;
  assume {:verifier.code 0} true;
  $p8 := $i2p.i64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2825, 24} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p8, $i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2827, 16} true;
  assume {:verifier.code 0} true;
  $i9 := $p2i.ref.i64($p0);
  // WARNING: %10 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2457, !verifier.code !2436
  call {:cexpr "__cil_tmp8"} boogie_si_record_i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2828, 27} true;
  assume {:verifier.code 0} true;
  $i10 := $add.i64($i9, 112);
  // WARNING: %11 = add i64 %10, 112, !dbg !2461, !verifier.code !2436
  call {:cexpr "__cil_tmp9"} boogie_si_record_i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2829, 19} true;
  assume {:verifier.code 0} true;
  $p11 := $i2p.i64.ref($i10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2829, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i32($M.0, $p11);
  // WARNING: %13 = load i32, i32* %12, align 4, !dbg !2465, !verifier.code !2436
  call {:cexpr "__cil_tmp10"} boogie_si_record_i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2830, 17} true;
  assume {:verifier.code 0} true;
  $i13 := $p2i.ref.i64($p0);
  // WARNING: %14 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2468, !verifier.code !2436
  call {:cexpr "__cil_tmp11"} boogie_si_record_i64($i13);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2831, 29} true;
  assume {:verifier.code 0} true;
  $i14 := $add.i64($i13, 116);
  // WARNING: %15 = add i64 %14, 116, !dbg !2471, !verifier.code !2436
  call {:cexpr "__cil_tmp12"} boogie_si_record_i64($i14);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2832, 19} true;
  assume {:verifier.code 0} true;
  $p15 := $i2p.i64.ref($i14);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2832, 17} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.0, $p15);
  // WARNING: %17 = load i32, i32* %16, align 4, !dbg !2475, !verifier.code !2436
  call {:cexpr "__cil_tmp13"} boogie_si_record_i32($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2833, 19} true;
  assume {:verifier.code 0} true;
  $i17 := $sge.i32($i16, $i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2833, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i17 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2834, 19} true;
  assume {:verifier.code 0} true;
  $i18 := $p2i.ref.i64($p0);
  // WARNING: %20 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2481, !verifier.code !2436
  call {:cexpr "__cil_tmp14"} boogie_si_record_i64($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2835, 31} true;
  assume {:verifier.code 0} true;
  $i19 := $add.i64($i18, 116);
  // WARNING: %21 = add i64 %20, 116, !dbg !2485, !verifier.code !2436
  call {:cexpr "__cil_tmp15"} boogie_si_record_i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2836, 7} true;
  assume {:verifier.code 0} true;
  $p20 := $i2p.i64.ref($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2836, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p20, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2837, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2841, 17} true;
  assume {:verifier.code 0} true;
  $i21 := $p2i.ref.i64($p0);
  // WARNING: %25 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2491, !verifier.code !2436
  call {:cexpr "__cil_tmp16"} boogie_si_record_i64($i21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2842, 29} true;
  assume {:verifier.code 0} true;
  $i22 := $add.i64($i21, 120);
  // WARNING: %26 = add i64 %25, 120, !dbg !2494, !verifier.code !2436
  call {:cexpr "__cil_tmp17"} boogie_si_record_i64($i22);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2843, 17} true;
  assume {:verifier.code 0} true;
  $i23 := $p2i.ref.i64($p0);
  // WARNING: %27 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2497, !verifier.code !2436
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i23);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2844, 29} true;
  assume {:verifier.code 0} true;
  $i24 := $add.i64($i23, 120);
  // WARNING: %28 = add i64 %27, 120, !dbg !2500, !verifier.code !2436
  call {:cexpr "__cil_tmp19"} boogie_si_record_i64($i24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2845, 19} true;
  assume {:verifier.code 0} true;
  $p25 := $i2p.i64.ref($i24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2845, 17} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i32($M.0, $p25);
  // WARNING: %30 = load i32, i32* %29, align 4, !dbg !2504, !verifier.code !2436
  call {:cexpr "__cil_tmp20"} boogie_si_record_i32($i26);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2846, 39} true;
  assume {:verifier.code 0} true;
  $i27 := $add.i32($i26, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2846, 5} true;
  assume {:verifier.code 0} true;
  $p28 := $i2p.i64.ref($i22);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2846, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p28, $i27);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2848, 17} true;
  assume {:verifier.code 0} true;
  $i29 := $p2i.ref.i64($p0);
  // WARNING: %33 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2510, !verifier.code !2436
  call {:cexpr "__cil_tmp21"} boogie_si_record_i64($i29);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2849, 29} true;
  assume {:verifier.code 0} true;
  $i30 := $add.i64($i29, 120);
  // WARNING: %34 = add i64 %33, 120, !dbg !2514, !verifier.code !2436
  call {:cexpr "__cil_tmp22"} boogie_si_record_i64($i30);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2850, 19} true;
  assume {:verifier.code 0} true;
  $p31 := $i2p.i64.ref($i30);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2850, 17} true;
  assume {:verifier.code 0} true;
  $i32 := $load.i32($M.0, $p31);
  // WARNING: %36 = load i32, i32* %35, align 4, !dbg !2518, !verifier.code !2436
  call {:cexpr "__cil_tmp23"} boogie_si_record_i32($i32);
  // WARNING: call void @llvm.dbg.value(metadata i32 %36, i64 0, metadata !3652, metadata !2433), !dbg !3653, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2852, 19} true;
  assume {:verifier.code 0} true;
  $i33 := $eq.i32($i32, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2852, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i33} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i33 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2853, 19} true;
  assume {:verifier.code 0} true;
  $i34 := $p2i.ref.i64($p0);
  // WARNING: %39 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2526, !verifier.code !2436
  call {:cexpr "__cil_tmp25"} boogie_si_record_i64($i34);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2854, 31} true;
  assume {:verifier.code 0} true;
  $i35 := $add.i64($i34, 120);
  // WARNING: %40 = add i64 %39, 120, !dbg !2530, !verifier.code !2436
  call {:cexpr "__cil_tmp26"} boogie_si_record_i64($i35);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2855, 7} true;
  assume {:verifier.code 0} true;
  $p36 := $i2p.i64.ref($i35);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2855, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p36, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2856, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i33 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2861, 17} true;
  assume {:verifier.code 0} true;
  $i37 := $p2i.ref.i64($p0);
  // WARNING: %44 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2536, !verifier.code !2436
  call {:cexpr "__cil_tmp27"} boogie_si_record_i64($i37);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2862, 29} true;
  assume {:verifier.code 0} true;
  $i38 := $add.i64($i37, 116);
  // WARNING: %45 = add i64 %44, 116, !dbg !2540, !verifier.code !2436
  call {:cexpr "__cil_tmp28"} boogie_si_record_i64($i38);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2863, 19} true;
  assume {:verifier.code 0} true;
  $p39 := $i2p.i64.ref($i38);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2863, 17} true;
  assume {:verifier.code 0} true;
  $i40 := $load.i32($M.0, $p39);
  // WARNING: %47 = load i32, i32* %46, align 4, !dbg !2544, !verifier.code !2436
  call {:cexpr "__cil_tmp29"} boogie_si_record_i32($i40);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2864, 13} true;
  assume {:verifier.code 0} true;
  call $i41 := page_is_used($p0, $i40);
  // WARNING: %48 = call i32 @page_is_used(%struct.mtdoops_context* %0, i32 %47), !dbg !2547, !verifier.code !2436
  call {:cexpr "tmp___7"} boogie_si_record_i32($i41);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2866, 7} true;
  assume {:verifier.code 0} true;
  $i42 := $ne.i32($i41, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2866, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i42} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i42 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2868, 19} true;
  assume {:verifier.code 0} true;
  $i43 := $p2i.ref.i64($p0);
  // WARNING: %51 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2553, !verifier.code !2436
  call {:cexpr "__cil_tmp30"} boogie_si_record_i64($i43);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2869, 31} true;
  assume {:verifier.code 0} true;
  $i44 := $add.i64($i43, 40);
  // WARNING: %52 = add i64 %51, 40, !dbg !2558, !verifier.code !2436
  call {:cexpr "__cil_tmp31"} boogie_si_record_i64($i44);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2870, 19} true;
  assume {:verifier.code 0} true;
  $p45 := $i2p.i64.ref($i44);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2871, 5} true;
  assume {:verifier.code 0} true;
  call $i46 := schedule_work($p45);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2873, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i42 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2888, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2878, 17} true;
  assume {:verifier.code 0} true;
  $i47 := $p2i.ref.i64($p0);
  // WARNING: %57 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2566, !verifier.code !2436
  call {:cexpr "__cil_tmp33"} boogie_si_record_i64($i47);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2879, 29} true;
  assume {:verifier.code 0} true;
  $i48 := $add.i64($i47, 116);
  // WARNING: %58 = add i64 %57, 116, !dbg !2570, !verifier.code !2436
  call {:cexpr "__cil_tmp34"} boogie_si_record_i64($i48);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2880, 19} true;
  assume {:verifier.code 0} true;
  $p49 := $i2p.i64.ref($i48);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2880, 17} true;
  assume {:verifier.code 0} true;
  $i50 := $load.i32($M.0, $p49);
  // WARNING: %60 = load i32, i32* %59, align 4, !dbg !2574, !verifier.code !2436
  call {:cexpr "__cil_tmp35"} boogie_si_record_i32($i50);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2881, 17} true;
  assume {:verifier.code 0} true;
  $i51 := $p2i.ref.i64($p0);
  // WARNING: %61 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2577, !verifier.code !2436
  call {:cexpr "__cil_tmp36"} boogie_si_record_i64($i51);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2882, 29} true;
  assume {:verifier.code 0} true;
  $i52 := $add.i64($i51, 120);
  // WARNING: %62 = add i64 %61, 120, !dbg !2580, !verifier.code !2436
  call {:cexpr "__cil_tmp37"} boogie_si_record_i64($i52);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2883, 19} true;
  assume {:verifier.code 0} true;
  $p53 := $i2p.i64.ref($i52);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2883, 17} true;
  assume {:verifier.code 0} true;
  $i54 := $load.i32($M.0, $p53);
  // WARNING: %64 = load i32, i32* %63, align 4, !dbg !2584, !verifier.code !2436
  call {:cexpr "__cil_tmp38"} boogie_si_record_i32($i54);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2884, 3} true;
  assume {:verifier.code 0} true;
  call $i55 := printk.ref.i32.i32(.str.13, $i50, $i54);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2886, 3} true;
  assume {:verifier.code 0} true;
  goto $bb9;
}
const page_is_used: ref;
axiom (page_is_used == $sub.ref(0, 69667));
procedure  page_is_used($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.mtdoops_context* %0, i64 0, metadata !3726, metadata !2433), !dbg !3727, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2438, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p0);
  // WARNING: %3 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2439, !verifier.code !2436
  call {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2439, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $add.i64($i2, 128);
  // WARNING: %4 = add i64 %3, 128, !dbg !2444, !verifier.code !2436
  call {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2440, 18} true;
  assume {:verifier.code 0} true;
  $p4 := $i2p.i64.ref($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2440, 16} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2442, 13} true;
  assume {:verifier.code 0} true;
  call $i6 := variable_test_bit($i1, $p5);
  // WARNING: %7 = call i32 @variable_test_bit(i32 %1, i64* %6), !dbg !2453, !verifier.code !2436
  call {:cexpr "tmp___8"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2444, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const schedule_work: ref;
axiom (schedule_work == $sub.ref(0, 70699));
procedure  schedule_work($p0: ref)
  returns ($r: i32);
const variable_test_bit: ref;
axiom (variable_test_bit == $sub.ref(0, 71731));
procedure  variable_test_bit($i0: i32, $p1: ref)
  returns ($r: i32)
{
  var $i2: i32;
$bb0:
  call $i2 := devirtbounce.1(0, $p1, $i0);
  // WARNING: %3 = call i32 @devirtbounce.1(i32 (i64*, i32)* asm sideeffect "bt $2,$1\0A\09sbb $0,$0", "=r,*m,Ir,~{dirflag},~{fpsr},~{flags}", i64* %1, i32 %0)
  call {:cexpr "oldbit"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2075, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const mtd_block_isbad: ref;
axiom (mtd_block_isbad == $sub.ref(0, 72763));
procedure  mtd_block_isbad($p0: ref, $i1: i64)
  returns ($r: i32);
const mtdoops_erase_block: ref;
axiom (mtdoops_erase_block == $sub.ref(0, 73795));
procedure  mtdoops_erase_block($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i64;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $p91: ref;
  var $i92: i64;
  var $p93: ref;
  var $i94: i64;
  var $p95: ref;
  var $i96: i64;
  var $p97: ref;
  var $i98: i64;
  var $p99: ref;
  var $i100: i64;
  var $i101: i64;
  var $i102: i64;
  var $p103: ref;
  var $i104: i64;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $i111: i32;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i112: i32;
$bb0:
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(88, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: call void @llvm.dbg.value(metadata %struct.mtdoops_context* %0, i64 0, metadata !3762, metadata !2433), !dbg !3763, !verifier.code !2431
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2536, 17} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p0);
  // WARNING: %8 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2449, !verifier.code !2433
  call {:cexpr "__cil_tmp28"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2537, 29} true;
  assume {:verifier.code 0} true;
  $i8 := $add.i64($i7, 104);
  // WARNING: %9 = add i64 %8, 104, !dbg !2454, !verifier.code !2433
  call {:cexpr "__cil_tmp29"} boogie_si_record_i64($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2538, 11} true;
  assume {:verifier.code 0} true;
  $p9 := $i2p.i64.ref($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2538, 9} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.0, $p9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2539, 17} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i32.i64($i1);
  // WARNING: %12 = sext i32 %1 to i64, !dbg !2461, !verifier.code !2433
  call {:cexpr "__cil_tmp30"} boogie_si_record_i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2540, 13} true;
  assume {:verifier.code 0} true;
  call $i12 := mtd_div_by_eb($i11, $p10);
  // WARNING: %13 = call i32 @mtd_div_by_eb(i64 %12, %struct.mtd_info* %11), !dbg !2464, !verifier.code !2433
  call {:cexpr "tmp___7"} boogie_si_record_i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2541, 17} true;
  assume {:verifier.code 0} true;
  $i13 := $p2i.ref.i64($p10);
  // WARNING: %14 = ptrtoint %struct.mtd_info* %11 to i64, !dbg !2467, !verifier.code !2433
  call {:cexpr "__cil_tmp31"} boogie_si_record_i64($i13);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2542, 29} true;
  assume {:verifier.code 0} true;
  $i14 := $add.i64($i13, 16);
  // WARNING: %15 = add i64 %14, 16, !dbg !2470, !verifier.code !2433
  call {:cexpr "__cil_tmp32"} boogie_si_record_i64($i14);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2543, 19} true;
  assume {:verifier.code 0} true;
  $p15 := $i2p.i64.ref($i14);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2543, 17} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.0, $p15);
  // WARNING: %17 = load i32, i32* %16, align 4, !dbg !2474, !verifier.code !2433
  call {:cexpr "__cil_tmp33"} boogie_si_record_i32($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2544, 31} true;
  assume {:verifier.code 0} true;
  $i17 := $mul.i32($i12, $i16);
  // WARNING: %18 = mul i32 %13, %17, !dbg !2477, !verifier.code !2433
  call {:cexpr "start_page_offset"} boogie_si_record_i32($i17);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2546, 17} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i64($M.0, record_size);
  // WARNING: %19 = load i64, i64* @record_size, align 8, !dbg !2482, !verifier.code !2433
  call {:cexpr "__cil_tmp35"} boogie_si_record_i64($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2547, 17} true;
  assume {:verifier.code 0} true;
  $i19 := $zext.i32.i64($i17);
  // WARNING: %20 = zext i32 %18 to i64, !dbg !2485, !verifier.code !2433
  call {:cexpr "__cil_tmp36"} boogie_si_record_i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2548, 29} true;
  assume {:verifier.code 0} true;
  $i20 := $udiv.i64($i19, $i18);
  // WARNING: %21 = udiv i64 %20, %19, !dbg !2488, !verifier.code !2433
  call {:cexpr "__cil_tmp37"} boogie_si_record_i64($i20);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2549, 16} true;
  assume {:verifier.code 0} true;
  $i21 := $trunc.i64.i32($i20);
  // WARNING: %22 = trunc i64 %21 to i32, !dbg !2491, !verifier.code !2433
  call {:cexpr "start_page"} boogie_si_record_i32($i21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2551, 17} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i64($M.0, record_size);
  // WARNING: %23 = load i64, i64* @record_size, align 8, !dbg !2496, !verifier.code !2433
  call {:cexpr "__cil_tmp39"} boogie_si_record_i64($i22);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2552, 17} true;
  assume {:verifier.code 0} true;
  $i23 := $p2i.ref.i64($p10);
  // WARNING: %24 = ptrtoint %struct.mtd_info* %11 to i64, !dbg !2499, !verifier.code !2433
  call {:cexpr "__cil_tmp40"} boogie_si_record_i64($i23);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2553, 29} true;
  assume {:verifier.code 0} true;
  $i24 := $add.i64($i23, 16);
  // WARNING: %25 = add i64 %24, 16, !dbg !2502, !verifier.code !2433
  call {:cexpr "__cil_tmp41"} boogie_si_record_i64($i24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2554, 19} true;
  assume {:verifier.code 0} true;
  $p25 := $i2p.i64.ref($i24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2554, 17} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i32($M.0, $p25);
  // WARNING: %27 = load i32, i32* %26, align 4, !dbg !2506, !verifier.code !2433
  call {:cexpr "__cil_tmp42"} boogie_si_record_i32($i26);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2555, 17} true;
  assume {:verifier.code 0} true;
  $i27 := $zext.i32.i64($i26);
  // WARNING: %28 = zext i32 %27 to i64, !dbg !2509, !verifier.code !2433
  call {:cexpr "__cil_tmp43"} boogie_si_record_i64($i27);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2556, 29} true;
  assume {:verifier.code 0} true;
  $i28 := $udiv.i64($i27, $i22);
  // WARNING: %29 = udiv i64 %28, %23, !dbg !2512, !verifier.code !2433
  call {:cexpr "__cil_tmp44"} boogie_si_record_i64($i28);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2557, 17} true;
  assume {:verifier.code 0} true;
  $i29 := $trunc.i64.i32($i28);
  // WARNING: %30 = trunc i64 %29 to i32, !dbg !2515, !verifier.code !2433
  call {:cexpr "erase_pages"} boogie_si_record_i32($i29);
  call $p30 := devirtbounce.2(0, current_task);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2560, 3} true;
  assume {:verifier.code 0} true;
  $p31 := $bitcast.ref.ref($p3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2560, 34} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p31, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2561, 17} true;
  assume {:verifier.code 0} true;
  $i32 := $p2i.ref.i64($p3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2561, 42} true;
  assume {:verifier.code 0} true;
  $i33 := $add.i64($i32, 8);
  // WARNING: %34 = add i64 %33, 8, !dbg !2531, !verifier.code !2433
  call {:cexpr "__cil_tmp46"} boogie_si_record_i64($i33);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2562, 29} true;
  assume {:verifier.code 0} true;
  $p34 := $bitcast.ref.ref($p30);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2562, 5} true;
  assume {:verifier.code 0} true;
  $p35 := $i2p.i64.ref($i33);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2562, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p35, $p30);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2563, 17} true;
  assume {:verifier.code 0} true;
  $i36 := $p2i.ref.i64($p3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2563, 42} true;
  assume {:verifier.code 0} true;
  $i37 := $add.i64($i36, 16);
  // WARNING: %38 = add i64 %37, 16, !dbg !2538, !verifier.code !2433
  call {:cexpr "__cil_tmp47"} boogie_si_record_i64($i37);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2564, 5} true;
  assume {:verifier.code 0} true;
  $p38 := $i2p.i64.ref($i37);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2564, 93} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p38, default_wake_function);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2565, 17} true;
  assume {:verifier.code 0} true;
  $i39 := $p2i.ref.i64($p3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2565, 42} true;
  assume {:verifier.code 0} true;
  $i40 := $add.i64($i39, 24);
  // WARNING: %41 = add i64 %40, 24, !dbg !2544, !verifier.code !2433
  call {:cexpr "__cil_tmp48"} boogie_si_record_i64($i40);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2567, 41} true;
  assume {:verifier.code 0} true;
  $p41 := $bitcast.ref.ref($0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2567, 5} true;
  assume {:verifier.code 0} true;
  $p42 := $i2p.i64.ref($i40);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2567, 39} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p42, $0.ref);
  // WARNING: store %struct.list_head* %42, %struct.list_head** %43, align 8, !dbg !2551, !verifier.code !2433
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2569, 17} true;
  assume {:verifier.code 0} true;
  $i43 := $p2i.ref.i64($p3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2569, 42} true;
  assume {:verifier.code 0} true;
  $i44 := $add.i64($i43, 32);
  // WARNING: %45 = add i64 %44, 32, !dbg !2555, !verifier.code !2433
  call {:cexpr "__cil_tmp51"} boogie_si_record_i64($i44);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2571, 41} true;
  assume {:verifier.code 0} true;
  $p45 := $bitcast.ref.ref($0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2571, 5} true;
  assume {:verifier.code 0} true;
  $p46 := $i2p.i64.ref($i44);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2571, 39} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p46, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2574, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2574, 13} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2577, 5} true;
  assume {:verifier.code 0} true;
  call __init_waitqueue_head($p4, .str.9, __key___3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2579, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2584, 3} true;
  assume {:verifier.code 0} true;
  $p47 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2584, 38} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p47, $p10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2585, 17} true;
  assume {:verifier.code 0} true;
  $i48 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2585, 43} true;
  assume {:verifier.code 0} true;
  $i49 := $add.i64($i48, 56);
  // WARNING: %53 = add i64 %52, 56, !dbg !2576, !verifier.code !2433
  call {:cexpr "__cil_tmp54"} boogie_si_record_i64($i49);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2586, 5} true;
  assume {:verifier.code 0} true;
  $p50 := $i2p.i64.ref($i49);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2586, 55} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p50, mtdoops_erase_callback);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2587, 17} true;
  assume {:verifier.code 0} true;
  $i51 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2587, 43} true;
  assume {:verifier.code 0} true;
  $i52 := $add.i64($i51, 8);
  // WARNING: %56 = add i64 %55, 8, !dbg !2582, !verifier.code !2433
  call {:cexpr "__cil_tmp55"} boogie_si_record_i64($i52);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2588, 32} true;
  assume {:verifier.code 0} true;
  $i53 := $sext.i32.i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2588, 5} true;
  assume {:verifier.code 0} true;
  $p54 := $i2p.i64.ref($i52);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2588, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p54, $i53);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2589, 17} true;
  assume {:verifier.code 0} true;
  $i55 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2589, 43} true;
  assume {:verifier.code 0} true;
  $i56 := $add.i64($i55, 16);
  // WARNING: %60 = add i64 %59, 16, !dbg !2589, !verifier.code !2433
  call {:cexpr "__cil_tmp56"} boogie_si_record_i64($i56);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2590, 17} true;
  assume {:verifier.code 0} true;
  $i57 := $p2i.ref.i64($p10);
  // WARNING: %61 = ptrtoint %struct.mtd_info* %11 to i64, !dbg !2592, !verifier.code !2433
  call {:cexpr "__cil_tmp57"} boogie_si_record_i64($i57);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2591, 29} true;
  assume {:verifier.code 0} true;
  $i58 := $add.i64($i57, 16);
  // WARNING: %62 = add i64 %61, 16, !dbg !2595, !verifier.code !2433
  call {:cexpr "__cil_tmp58"} boogie_si_record_i64($i58);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2592, 19} true;
  assume {:verifier.code 0} true;
  $p59 := $i2p.i64.ref($i58);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2592, 17} true;
  assume {:verifier.code 0} true;
  $i60 := $load.i32($M.0, $p59);
  // WARNING: %64 = load i32, i32* %63, align 4, !dbg !2599, !verifier.code !2433
  call {:cexpr "__cil_tmp59"} boogie_si_record_i32($i60);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2593, 32} true;
  assume {:verifier.code 0} true;
  $i61 := $zext.i32.i64($i60);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2593, 5} true;
  assume {:verifier.code 0} true;
  $p62 := $i2p.i64.ref($i56);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2593, 30} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p62, $i61);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2594, 17} true;
  assume {:verifier.code 0} true;
  $i63 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2594, 43} true;
  assume {:verifier.code 0} true;
  $i64 := $add.i64($i63, 64);
  // WARNING: %68 = add i64 %67, 64, !dbg !2606, !verifier.code !2433
  call {:cexpr "__cil_tmp60"} boogie_si_record_i64($i64);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2595, 30} true;
  assume {:verifier.code 0} true;
  $i65 := $p2i.ref.i64($p4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2595, 5} true;
  assume {:verifier.code 0} true;
  $p66 := $i2p.i64.ref($i64);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2595, 28} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i64($M.0, $p66, $i65);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2597, 3} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2597, 13} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2599, 11} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i64($M.1, $p5, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2609, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb6, $bb7;
$bb6:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2610, 7} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !((1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2613, 7} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  call $p79 := devirtbounce.2(0, current_task);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2645, 9} true;
  assume {:verifier.code 0} true;
  $i80 := $load.i64($M.1, $p5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2647, 65} true;
  assume {:verifier.code 0} true;
  $p81 := $bitcast.ref.ref($p79);
  call $i82 := devirtbounce.3(0, $p81, $i80, $p81);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2645, 9} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i64($M.1, $p5, $i82);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2650, 9} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2653, 9} true;
  assume {:verifier.code 0} true;
  call __xchg_wrong_size();
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2655, 7} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2614, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb11, $bb12;
$bb11:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2614, 14} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2655, 14} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb13:
  call $p67 := devirtbounce.2(0, current_task);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2618, 9} true;
  assume {:verifier.code 0} true;
  $i68 := $load.i64($M.1, $p5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2620, 65} true;
  assume {:verifier.code 0} true;
  $p69 := $bitcast.ref.ref($p67);
  call $i70 := devirtbounce.3(0, $p69, $i68, $p69);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2618, 9} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i64($M.1, $p5, $i70);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2623, 9} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb14:
  assume {:verifier.code 0} true;
  goto $bb17;
$bb15:
  call $p71 := devirtbounce.2(0, current_task);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2627, 9} true;
  assume {:verifier.code 0} true;
  $i72 := $load.i64($M.1, $p5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2629, 65} true;
  assume {:verifier.code 0} true;
  $p73 := $bitcast.ref.ref($p71);
  call $i74 := devirtbounce.3(0, $p73, $i72, $p73);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2627, 9} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i64($M.1, $p5, $i74);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2632, 9} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb16:
  call $p75 := devirtbounce.2(0, current_task);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2636, 9} true;
  assume {:verifier.code 0} true;
  $i76 := $load.i64($M.1, $p5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2638, 64} true;
  assume {:verifier.code 0} true;
  $p77 := $bitcast.ref.ref($p75);
  call $i78 := devirtbounce.3(0, $p77, $i76, $p77);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2636, 9} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i64($M.1, $p5, $i78);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2641, 9} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb17:
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2660, 5} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2665, 3} true;
  assume {:verifier.code 0} true;
  call add_wait_queue($p4, $p3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2666, 9} true;
  assume {:verifier.code 0} true;
  call $i83 := mtd_erase($p10, $p2);
  // WARNING: %103 = call i32 @mtd_erase(%struct.mtd_info* %11, %struct.erase_info* %3), !dbg !2672, !verifier.code !2433
  call {:cexpr "ret"} boogie_si_record_i32($i83);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2668, 7} true;
  assume {:verifier.code 0} true;
  $i84 := $ne.i32($i83, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2668, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i84} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i84 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2670, 5} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb21:
  assume !(($i84 == 1));
  assume {:verifier.code 0} true;
  goto $bb39;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2670, 15} true;
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2672, 17} true;
  assume {:verifier.code 0} true;
  $M.3 := $store.i64($M.3, $p6, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2682, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 1} true;
  goto $bb24, $bb25;
$bb24:
  assume (1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2683, 9} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb25:
  assume !((1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2686, 9} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb26:
  call $p97 := devirtbounce.2(0, current_task);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2718, 11} true;
  assume {:verifier.code 0} true;
  $i98 := $load.i64($M.3, $p6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2720, 71} true;
  assume {:verifier.code 0} true;
  $p99 := $bitcast.ref.ref($p97);
  call $i100 := devirtbounce.3(0, $p99, $i98, $p99);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2718, 11} true;
  assume {:verifier.code 0} true;
  $M.3 := $store.i64($M.3, $p6, $i100);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2723, 11} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb27:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2726, 11} true;
  assume {:verifier.code 0} true;
  call __xchg_wrong_size();
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2728, 9} true;
  assume {:verifier.code 0} true;
  goto $bb35;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2687, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb29, $bb30;
$bb29:
  assume (0 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2687, 16} true;
  assume {:verifier.code 0} true;
  goto $bb31;
$bb30:
  assume !((0 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2728, 16} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb31:
  call $p85 := devirtbounce.2(0, current_task);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2691, 11} true;
  assume {:verifier.code 0} true;
  $i86 := $load.i64($M.3, $p6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2693, 71} true;
  assume {:verifier.code 0} true;
  $p87 := $bitcast.ref.ref($p85);
  call $i88 := devirtbounce.3(0, $p87, $i86, $p87);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2691, 11} true;
  assume {:verifier.code 0} true;
  $M.3 := $store.i64($M.3, $p6, $i88);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2696, 11} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb32:
  assume {:verifier.code 0} true;
  goto $bb35;
$bb33:
  call $p89 := devirtbounce.2(0, current_task);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2700, 11} true;
  assume {:verifier.code 0} true;
  $i90 := $load.i64($M.3, $p6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2702, 71} true;
  assume {:verifier.code 0} true;
  $p91 := $bitcast.ref.ref($p89);
  call $i92 := devirtbounce.3(0, $p91, $i90, $p91);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2700, 11} true;
  assume {:verifier.code 0} true;
  $M.3 := $store.i64($M.3, $p6, $i92);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2705, 11} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb34:
  call $p93 := devirtbounce.2(0, current_task);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2709, 11} true;
  assume {:verifier.code 0} true;
  $i94 := $load.i64($M.3, $p6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2711, 70} true;
  assume {:verifier.code 0} true;
  $p95 := $bitcast.ref.ref($p93);
  call $i96 := devirtbounce.3(0, $p95, $i94, $p95);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2709, 11} true;
  assume {:verifier.code 0} true;
  $M.3 := $store.i64($M.3, $p6, $i96);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2714, 11} true;
  assume {:verifier.code 0} true;
  goto $bb32;
$bb35:
  assume {:verifier.code 0} true;
  goto $bb36;
$bb36:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2733, 7} true;
  assume {:verifier.code 0} true;
  goto $bb37;
$bb37:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2738, 5} true;
  assume {:verifier.code 0} true;
  call remove_wait_queue($p4, $p3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2739, 19} true;
  assume {:verifier.code 0} true;
  $i101 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2739, 45} true;
  assume {:verifier.code 0} true;
  $i102 := $add.i64($i101, 8);
  // WARNING: %139 = add i64 %138, 8, !dbg !2740, !verifier.code !2433
  call {:cexpr "__cil_tmp61"} boogie_si_record_i64($i102);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2740, 21} true;
  assume {:verifier.code 0} true;
  $p103 := $i2p.i64.ref($i102);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2740, 19} true;
  assume {:verifier.code 0} true;
  $i104 := $load.i64($M.0, $p103);
  // WARNING: %141 = load i64, i64* %140, align 8, !dbg !2744, !verifier.code !2433
  call {:cexpr "__cil_tmp62"} boogie_si_record_i64($i104);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2741, 19} true;
  assume {:verifier.code 0} true;
  $i105 := $p2i.ref.i64($p2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2741, 45} true;
  assume {:verifier.code 0} true;
  $i106 := $add.i64($i105, 16);
  // WARNING: %143 = add i64 %142, 16, !dbg !2748, !verifier.code !2433
  call {:cexpr "__cil_tmp63"} boogie_si_record_i64($i106);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2742, 21} true;
  assume {:verifier.code 0} true;
  $p107 := $i2p.i64.ref($i106);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2742, 19} true;
  assume {:verifier.code 0} true;
  $i108 := $load.i64($M.0, $p107);
  // WARNING: %145 = load i64, i64* %144, align 8, !dbg !2752, !verifier.code !2433
  call {:cexpr "__cil_tmp64"} boogie_si_record_i64($i108);
  // WARNING: call void @llvm.dbg.value(metadata i64 %145, i64 0, metadata !4080, metadata !2433), !dbg !4081, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2744, 44} true;
  assume {:verifier.code 0} true;
  $i109 := $add.i64($p2i.ref.i64(mtddev), 0);
  // WARNING: %146 = add i64 ptrtoint ([80 x i8]* @mtddev to i64), 0, !dbg !2757, !verifier.code !2433
  call {:cexpr "__cil_tmp66"} boogie_si_record_i64($i109);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2745, 19} true;
  assume {:verifier.code 0} true;
  $p110 := $i2p.i64.ref($i109);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2746, 5} true;
  assume {:verifier.code 0} true;
  call $i111 := printk.ref.i64.i64.ref(.str.10, $i104, $i108, $p110);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2749, 5} true;
  assume {:verifier.code 0} true;
  $i112 := $i83;
  goto $bb38;
$bb38:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2779, 1} true;
  assume {:verifier.code 0} true;
  $r := $i112;
  $exn := false;
  return;
$bb39:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2754, 3} true;
  assume {:verifier.code 0} true;
  call schedule();
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2755, 3} true;
  assume {:verifier.code 0} true;
  call remove_wait_queue($p4, $p3);
  // WARNING: call void @remove_wait_queue(%struct.__wait_queue_head* %5, %struct.__wait_queue* %4), !dbg !2767, !verifier.code !2433
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2762, 30} true;
  assume {:verifier.code 0} true;
  $i113 := $add.i32($i21, $i29);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2759, 3} true;
  assume {:verifier.code 0} true;
  $i114 := $i21;
  goto $bb40;
$bb40:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2759, 13} true;
  assume {:verifier.code 0} true;
  goto $bb41;
$bb41:
  // WARNING: call void @llvm.dbg.value(metadata i32 %151, i64 0, metadata !4104, metadata !2433), !dbg !4105, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2764, 21} true;
  assume {:verifier.code 0} true;
  $i115 := $ult.i32($i114, $i113);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2764, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i115} true;
  goto $bb42, $bb43;
$bb42:
  assume ($i115 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2766, 5} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb43:
  assume !(($i115 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2767, 7} true;
  assume {:verifier.code 0} true;
  goto $bb45;
$bb44:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2771, 5} true;
  assume {:verifier.code 0} true;
  call mark_page_unused($p0, $i114);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2772, 17} true;
  assume {:verifier.code 0} true;
  $i116 := $add.i32($i114, 1);
  // WARNING: %158 = add nsw i32 %.0, 1, !dbg !2790, !verifier.code !2433
  call {:cexpr "page"} boogie_si_record_i32($i116);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2759, 3} true;
  assume {:verifier.code 0} true;
  $i114 := $i116;
  goto $bb40;
$bb45:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2777, 3} true;
  assume {:verifier.code 0} true;
  $i112 := 0;
  goto $bb38;
}
const mtd_block_markbad: ref;
axiom (mtd_block_markbad == $sub.ref(0, 74827));
procedure  mtd_block_markbad($p0: ref, $i1: i64)
  returns ($r: i32);
const mtd_div_by_eb: ref;
axiom (mtd_div_by_eb == $sub.ref(0, 75859));
procedure  mtd_div_by_eb($i0: i64, $p1: ref)
  returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i32;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i32;
  var $i14: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2249, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p1);
  // WARNING: %3 = ptrtoint %struct.mtd_info* %1 to i64, !dbg !2439, !verifier.code !2436
  call {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2250, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $add.i64($i2, 36);
  // WARNING: %4 = add i64 %3, 36, !dbg !2444, !verifier.code !2436
  call {:cexpr "__cil_tmp6"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2251, 9} true;
  assume {:verifier.code 0} true;
  $p4 := $i2p.i64.ref($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2251, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.0, $p4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2251, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.i32($i5, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2251, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2253, 18} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p1);
  // WARNING: %9 = ptrtoint %struct.mtd_info* %1 to i64, !dbg !2451, !verifier.code !2436
  call {:cexpr "__cil_tmp7"} boogie_si_record_i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2254, 29} true;
  assume {:verifier.code 0} true;
  $i8 := $add.i64($i7, 36);
  // WARNING: %10 = add i64 %9, 36, !dbg !2456, !verifier.code !2436
  call {:cexpr "__cil_tmp8"} boogie_si_record_i64($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2255, 20} true;
  assume {:verifier.code 0} true;
  $p9 := $i2p.i64.ref($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2255, 18} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.0, $p9);
  // WARNING: %12 = load i32, i32* %11, align 4, !dbg !2460, !verifier.code !2436
  call {:cexpr "__cil_tmp9"} boogie_si_record_i32($i10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2256, 22} true;
  assume {:verifier.code 0} true;
  $i11 := $zext.i32.i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2256, 22} true;
  assume {:verifier.code 0} true;
  $i12 := $lshr.i64($i0, $i11);
  // WARNING: %14 = lshr i64 %0, %13, !dbg !2463, !verifier.code !2436
  call {:cexpr "__cil_tmp10"} boogie_si_record_i64($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2257, 13} true;
  assume {:verifier.code 0} true;
  $i13 := $trunc.i64.i32($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2257, 5} true;
  assume {:verifier.code 0} true;
  $i14 := $i13;
  goto $bb3;
$bb2:
  assume !(($i6 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2273, 1} true;
  assume {:verifier.code 0} true;
  $r := $i14;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2263, 17} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.i64($p1);
  // WARNING: %18 = ptrtoint %struct.mtd_info* %1 to i64, !dbg !2468, !verifier.code !2436
  call {:cexpr "__cil_tmp11"} boogie_si_record_i64($i15);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2264, 29} true;
  assume {:verifier.code 0} true;
  $i16 := $add.i64($i15, 16);
  // WARNING: %19 = add i64 %18, 16, !dbg !2471, !verifier.code !2436
  call {:cexpr "__cil_tmp12"} boogie_si_record_i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2265, 14} true;
  assume {:verifier.code 0} true;
  $p17 := $i2p.i64.ref($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2265, 12} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i32($M.0, $p17);
  // WARNING: %21 = load i32, i32* %20, align 4, !dbg !2475, !verifier.code !2436
  call {:cexpr "__base"} boogie_si_record_i32($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2269, 17} true;
  assume {:verifier.code 0} true;
  $i19 := $zext.i32.i64($i18);
  // WARNING: %22 = zext i32 %21 to i64, !dbg !2482, !verifier.code !2436
  call {:cexpr "__cil_tmp15"} boogie_si_record_i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2270, 11} true;
  assume {:verifier.code 0} true;
  $i20 := $udiv.i64($i0, $i19);
  // WARNING: %23 = udiv i64 %0, %22, !dbg !2485, !verifier.code !2436
  call {:cexpr "sz"} boogie_si_record_i64($i20);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2271, 11} true;
  assume {:verifier.code 0} true;
  $i21 := $trunc.i64.i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2271, 3} true;
  assume {:verifier.code 0} true;
  $i14 := $i21;
  goto $bb3;
}
const default_wake_function: ref;
axiom (default_wake_function == $sub.ref(0, 76891));
procedure  default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref)
  returns ($r: i32);
const __init_waitqueue_head: ref;
axiom (__init_waitqueue_head == $sub.ref(0, 77923));
procedure  __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
const mtdoops_erase_callback: ref;
axiom (mtdoops_erase_callback == $sub.ref(0, 78955));
procedure  mtdoops_erase_callback($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2456, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  // WARNING: %2 = ptrtoint %struct.erase_info* %0 to i64, !dbg !2435, !verifier.code !2434
  call {:cexpr "__cil_tmp3"} boogie_si_record_i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2457, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $add.i64($i1, 64);
  // WARNING: %3 = add i64 %2, 64, !dbg !2440, !verifier.code !2434
  call {:cexpr "__cil_tmp4"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2458, 18} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.i64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2458, 16} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i64($M.0, $p3);
  // WARNING: %5 = load i64, i64* %4, align 8, !dbg !2444, !verifier.code !2434
  call {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2459, 12} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.i64.ref($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2461, 3} true;
  assume {:verifier.code 0} true;
  call __wake_up($p5, 3, 1, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2463, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __xchg_wrong_size: ref;
axiom (__xchg_wrong_size == $sub.ref(0, 79987));
procedure  __xchg_wrong_size();
const add_wait_queue: ref;
axiom (add_wait_queue == $sub.ref(0, 81019));
procedure  add_wait_queue($p0: ref, $p1: ref);
const mtd_erase: ref;
axiom (mtd_erase == $sub.ref(0, 82051));
procedure  mtd_erase($p0: ref, $p1: ref)
  returns ($r: i32);
const remove_wait_queue: ref;
axiom (remove_wait_queue == $sub.ref(0, 83083));
procedure  remove_wait_queue($p0: ref, $p1: ref);
const schedule: ref;
axiom (schedule == $sub.ref(0, 84115));
procedure  schedule();
const mark_page_unused: ref;
axiom (mark_page_unused == $sub.ref(0, 85147));
procedure  mark_page_unused($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.mtdoops_context* %0, i64 0, metadata !4203, metadata !2433), !dbg !4204, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2420, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.i64($p0);
  // WARNING: %3 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2439, !verifier.code !2436
  call {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2421, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $add.i64($i2, 128);
  // WARNING: %4 = add i64 %3, 128, !dbg !2444, !verifier.code !2436
  call {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2422, 18} true;
  assume {:verifier.code 0} true;
  $p4 := $i2p.i64.ref($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2422, 16} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.0, $p4);
  // WARNING: call void @llvm.dbg.value(metadata i64* %6, i64 0, metadata !4219, metadata !2433), !dbg !4220, !verifier.code !2431
  call devirtbounce(0, $p5, $i1, $p5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2426, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __wake_up: ref;
axiom (__wake_up == $sub.ref(0, 86179));
procedure  __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
const mtdoops_notify_add: ref;
axiom (mtdoops_notify_add == $sub.ref(0, 87211));
procedure  mtdoops_notify_add($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $i59: i1;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $p79: ref;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $i88: i1;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i64;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i64;
  var $p106: ref;
  var $i107: i64;
  var $i108: i64;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $p112: ref;
  var $i113: i64;
  var $i114: i32;
  var $i115: i64;
  var $i116: i64;
  var $i117: i32;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4068, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64($p0);
  // WARNING: %2 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !2437, !verifier.code !2434
  call {:cexpr "__cil_tmp8"} boogie_si_record_i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4069, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $add.i64($i1, 8);
  // WARNING: %3 = add i64 %2, 8, !dbg !2442, !verifier.code !2434
  call {:cexpr "__cil_tmp9"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4070, 19} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.i64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4070, 17} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i64($M.0, $p3);
  // WARNING: %5 = load i64, i64* %4, align 8, !dbg !2446, !verifier.code !2434
  call {:cexpr "__cil_tmp10"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4072, 17} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i64($M.0, record_size);
  // WARNING: %6 = load i64, i64* @record_size, align 8, !dbg !2451, !verifier.code !2434
  call {:cexpr "__cil_tmp12"} boogie_si_record_i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4073, 17} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.i64.i32($i5);
  // WARNING: %7 = trunc i64 %6 to i32, !dbg !2454, !verifier.code !2434
  call {:cexpr "__cil_tmp13"} boogie_si_record_i32($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4074, 13} true;
  assume {:verifier.code 0} true;
  call $i7 := div_u64($i4, $i6);
  // WARNING: %8 = call i64 @div_u64(i64 %5, i32 %7), !dbg !2457, !verifier.code !2434
  call {:cexpr "tmp___7"} boogie_si_record_i64($i7);
  // WARNING: call void @llvm.dbg.value(metadata i64 %8, i64 0, metadata !4258, metadata !2433), !dbg !4259, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4076, 17} true;
  assume {:verifier.code 0} true;
  $i8 := $p2i.ref.i64($p0);
  // WARNING: %9 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !2462, !verifier.code !2434
  call {:cexpr "__cil_tmp14"} boogie_si_record_i64($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4077, 29} true;
  assume {:verifier.code 0} true;
  $i9 := $add.i64($i8, 56);
  // WARNING: %10 = add i64 %9, 56, !dbg !2465, !verifier.code !2434
  call {:cexpr "__cil_tmp15"} boogie_si_record_i64($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4078, 19} true;
  assume {:verifier.code 0} true;
  $p10 := $i2p.i64.ref($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4078, 17} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.0, $p10);
  // WARNING: call void @llvm.dbg.value(metadata i8* %12, i64 0, metadata !4270, metadata !2433), !dbg !4271, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4080, 42} true;
  assume {:verifier.code 0} true;
  $i12 := $add.i64($p2i.ref.i64(mtddev), 0);
  // WARNING: %13 = add i64 ptrtoint ([80 x i8]* @mtddev to i64), 0, !dbg !2474, !verifier.code !2434
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4081, 17} true;
  assume {:verifier.code 0} true;
  $p13 := $i2p.i64.ref($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4083, 13} true;
  assume {:verifier.code 0} true;
  call $i14 := strcmp($p11, $p13);
  // WARNING: %15 = call i32 @strcmp(i8* %12, i8* %14), !dbg !2482, !verifier.code !2434
  call {:cexpr "tmp___8"} boogie_si_record_i32($i14);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4085, 7} true;
  assume {:verifier.code 0} true;
  $i15 := $ne.i32($i14, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4085, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i15 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4087, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i15 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4088, 19} true;
  assume {:verifier.code 0} true;
  $i16 := $p2i.ref.i64(oops_cxt);
  // WARNING: %19 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2490, !verifier.code !2434
  call {:cexpr "__cil_tmp21"} boogie_si_record_i64($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4089, 31} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i64($i16, 32);
  // WARNING: %20 = add i64 %19, 32, !dbg !2494, !verifier.code !2434
  call {:cexpr "__cil_tmp22"} boogie_si_record_i64($i17);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4090, 19} true;
  assume {:verifier.code 0} true;
  $i18 := $p2i.ref.i64($p0);
  // WARNING: %21 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !2497, !verifier.code !2434
  call {:cexpr "__cil_tmp23"} boogie_si_record_i64($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4091, 31} true;
  assume {:verifier.code 0} true;
  $i19 := $add.i64($i18, 64);
  // WARNING: %22 = add i64 %21, 64, !dbg !2500, !verifier.code !2434
  call {:cexpr "__cil_tmp24"} boogie_si_record_i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4092, 31} true;
  assume {:verifier.code 0} true;
  $p20 := $i2p.i64.ref($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4092, 29} true;
  assume {:verifier.code 0} true;
  $i21 := $load.i32($M.0, $p20);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4092, 7} true;
  assume {:verifier.code 0} true;
  $p22 := $i2p.i64.ref($i17);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4092, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p22, $i21);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4095, 17} true;
  assume {:verifier.code 0} true;
  $i23 := $p2i.ref.i64(oops_cxt);
  // WARNING: %27 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2507, !verifier.code !2434
  call {:cexpr "__cil_tmp25"} boogie_si_record_i64($i23);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4096, 29} true;
  assume {:verifier.code 0} true;
  $i24 := $add.i64($i23, 32);
  // WARNING: %28 = add i64 %27, 32, !dbg !2511, !verifier.code !2434
  call {:cexpr "__cil_tmp26"} boogie_si_record_i64($i24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4097, 19} true;
  assume {:verifier.code 0} true;
  $p25 := $i2p.i64.ref($i24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4097, 17} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i32($M.0, $p25);
  // WARNING: %30 = load i32, i32* %29, align 4, !dbg !2515, !verifier.code !2434
  call {:cexpr "__cil_tmp27"} boogie_si_record_i32($i26);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4098, 17} true;
  assume {:verifier.code 0} true;
  $i27 := $p2i.ref.i64($p0);
  // WARNING: %31 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !2518, !verifier.code !2434
  call {:cexpr "__cil_tmp28"} boogie_si_record_i64($i27);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4099, 29} true;
  assume {:verifier.code 0} true;
  $i28 := $add.i64($i27, 64);
  // WARNING: %32 = add i64 %31, 64, !dbg !2521, !verifier.code !2434
  call {:cexpr "__cil_tmp29"} boogie_si_record_i64($i28);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4100, 19} true;
  assume {:verifier.code 0} true;
  $p29 := $i2p.i64.ref($i28);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4100, 17} true;
  assume {:verifier.code 0} true;
  $i30 := $load.i32($M.0, $p29);
  // WARNING: %34 = load i32, i32* %33, align 4, !dbg !2525, !verifier.code !2434
  call {:cexpr "__cil_tmp30"} boogie_si_record_i32($i30);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4101, 19} true;
  assume {:verifier.code 0} true;
  $i31 := $ne.i32($i30, $i26);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4101, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i31 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4102, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume !(($i31 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4105, 19} true;
  assume {:verifier.code 0} true;
  $i32 := $p2i.ref.i64(oops_cxt);
  // WARNING: %38 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2533, !verifier.code !2434
  call {:cexpr "__cil_tmp31"} boogie_si_record_i64($i32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4106, 31} true;
  assume {:verifier.code 0} true;
  $i33 := $add.i64($i32, 32);
  // WARNING: %39 = add i64 %38, 32, !dbg !2538, !verifier.code !2434
  call {:cexpr "__cil_tmp32"} boogie_si_record_i64($i33);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4107, 21} true;
  assume {:verifier.code 0} true;
  $p34 := $i2p.i64.ref($i33);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4107, 19} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i32($M.0, $p34);
  // WARNING: %41 = load i32, i32* %40, align 4, !dbg !2542, !verifier.code !2434
  call {:cexpr "__cil_tmp33"} boogie_si_record_i32($i35);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4108, 21} true;
  assume {:verifier.code 0} true;
  $i36 := $slt.i32($i35, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4108, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb7, $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4243, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb7:
  assume ($i36 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4109, 7} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb8:
  assume !(($i36 == 1));
  assume {:verifier.code 0} true;
  goto $bb9;
$bb9:
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4117, 17} true;
  assume {:verifier.code 0} true;
  $i37 := $p2i.ref.i64($p0);
  // WARNING: %47 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !2550, !verifier.code !2434
  call {:cexpr "__cil_tmp34"} boogie_si_record_i64($i37);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4118, 29} true;
  assume {:verifier.code 0} true;
  $i38 := $add.i64($i37, 16);
  // WARNING: %48 = add i64 %47, 16, !dbg !2554, !verifier.code !2434
  call {:cexpr "__cil_tmp35"} boogie_si_record_i64($i38);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4119, 19} true;
  assume {:verifier.code 0} true;
  $p39 := $i2p.i64.ref($i38);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4119, 17} true;
  assume {:verifier.code 0} true;
  $i40 := $load.i32($M.0, $p39);
  // WARNING: %50 = load i32, i32* %49, align 4, !dbg !2558, !verifier.code !2434
  call {:cexpr "__cil_tmp36"} boogie_si_record_i32($i40);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4120, 29} true;
  assume {:verifier.code 0} true;
  $i41 := $mul.i32($i40, 2);
  // WARNING: %51 = mul i32 %50, 2, !dbg !2561, !verifier.code !2434
  call {:cexpr "__cil_tmp37"} boogie_si_record_i32($i41);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4121, 17} true;
  assume {:verifier.code 0} true;
  $i42 := $zext.i32.i64($i41);
  // WARNING: %52 = zext i32 %51 to i64, !dbg !2564, !verifier.code !2434
  call {:cexpr "__cil_tmp38"} boogie_si_record_i64($i42);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4122, 17} true;
  assume {:verifier.code 0} true;
  $i43 := $p2i.ref.i64($p0);
  // WARNING: %53 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !2567, !verifier.code !2434
  call {:cexpr "__cil_tmp39"} boogie_si_record_i64($i43);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4123, 29} true;
  assume {:verifier.code 0} true;
  $i44 := $add.i64($i43, 8);
  // WARNING: %54 = add i64 %53, 8, !dbg !2570, !verifier.code !2434
  call {:cexpr "__cil_tmp40"} boogie_si_record_i64($i44);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4124, 19} true;
  assume {:verifier.code 0} true;
  $p45 := $i2p.i64.ref($i44);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4124, 17} true;
  assume {:verifier.code 0} true;
  $i46 := $load.i64($M.0, $p45);
  // WARNING: %56 = load i64, i64* %55, align 8, !dbg !2574, !verifier.code !2434
  call {:cexpr "__cil_tmp41"} boogie_si_record_i64($i46);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4125, 19} true;
  assume {:verifier.code 0} true;
  $i47 := $ult.i64($i46, $i42);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4125, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i47} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i47 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4127, 19} true;
  assume {:verifier.code 0} true;
  $i48 := $p2i.ref.i64($p0);
  // WARNING: %59 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !2580, !verifier.code !2434
  call {:cexpr "__cil_tmp42"} boogie_si_record_i64($i48);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4128, 31} true;
  assume {:verifier.code 0} true;
  $i49 := $add.i64($i48, 64);
  // WARNING: %60 = add i64 %59, 64, !dbg !2585, !verifier.code !2434
  call {:cexpr "__cil_tmp43"} boogie_si_record_i64($i49);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4129, 21} true;
  assume {:verifier.code 0} true;
  $p50 := $i2p.i64.ref($i49);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4129, 19} true;
  assume {:verifier.code 0} true;
  $i51 := $load.i32($M.0, $p50);
  // WARNING: %62 = load i32, i32* %61, align 4, !dbg !2589, !verifier.code !2434
  call {:cexpr "__cil_tmp44"} boogie_si_record_i32($i51);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4130, 5} true;
  assume {:verifier.code 0} true;
  call $i52 := printk.ref.i32(.str.14, $i51);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4132, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb12:
  assume !(($i47 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4139, 17} true;
  assume {:verifier.code 0} true;
  $i53 := $load.i64($M.0, record_size);
  // WARNING: %66 = load i64, i64* @record_size, align 8, !dbg !2596, !verifier.code !2434
  call {:cexpr "__cil_tmp46"} boogie_si_record_i64($i53);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4140, 17} true;
  assume {:verifier.code 0} true;
  $i54 := $p2i.ref.i64($p0);
  // WARNING: %67 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !2600, !verifier.code !2434
  call {:cexpr "__cil_tmp47"} boogie_si_record_i64($i54);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4141, 29} true;
  assume {:verifier.code 0} true;
  $i55 := $add.i64($i54, 16);
  // WARNING: %68 = add i64 %67, 16, !dbg !2603, !verifier.code !2434
  call {:cexpr "__cil_tmp48"} boogie_si_record_i64($i55);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4142, 19} true;
  assume {:verifier.code 0} true;
  $p56 := $i2p.i64.ref($i55);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4142, 17} true;
  assume {:verifier.code 0} true;
  $i57 := $load.i32($M.0, $p56);
  // WARNING: %70 = load i32, i32* %69, align 4, !dbg !2607, !verifier.code !2434
  call {:cexpr "__cil_tmp49"} boogie_si_record_i32($i57);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4143, 17} true;
  assume {:verifier.code 0} true;
  $i58 := $zext.i32.i64($i57);
  // WARNING: %71 = zext i32 %70 to i64, !dbg !2610, !verifier.code !2434
  call {:cexpr "__cil_tmp50"} boogie_si_record_i64($i58);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4144, 19} true;
  assume {:verifier.code 0} true;
  $i59 := $ult.i64($i58, $i53);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4144, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i59} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i59 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4146, 19} true;
  assume {:verifier.code 0} true;
  $i60 := $p2i.ref.i64($p0);
  // WARNING: %74 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !2616, !verifier.code !2434
  call {:cexpr "__cil_tmp51"} boogie_si_record_i64($i60);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4147, 31} true;
  assume {:verifier.code 0} true;
  $i61 := $add.i64($i60, 64);
  // WARNING: %75 = add i64 %74, 64, !dbg !2621, !verifier.code !2434
  call {:cexpr "__cil_tmp52"} boogie_si_record_i64($i61);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4148, 21} true;
  assume {:verifier.code 0} true;
  $p62 := $i2p.i64.ref($i61);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4148, 19} true;
  assume {:verifier.code 0} true;
  $i63 := $load.i32($M.0, $p62);
  // WARNING: %77 = load i32, i32* %76, align 4, !dbg !2625, !verifier.code !2434
  call {:cexpr "__cil_tmp53"} boogie_si_record_i32($i63);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4149, 5} true;
  assume {:verifier.code 0} true;
  call $i64 := printk.ref.i32(.str.15, $i63);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4151, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb15:
  assume !(($i59 == 1));
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4157, 17} true;
  assume {:verifier.code 0} true;
  $i65 := $p2i.ref.i64($p0);
  // WARNING: %81 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !2630, !verifier.code !2434
  call {:cexpr "__cil_tmp54"} boogie_si_record_i64($i65);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4158, 29} true;
  assume {:verifier.code 0} true;
  $i66 := $add.i64($i65, 8);
  // WARNING: %82 = add i64 %81, 8, !dbg !2634, !verifier.code !2434
  call {:cexpr "__cil_tmp55"} boogie_si_record_i64($i66);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4159, 19} true;
  assume {:verifier.code 0} true;
  $p67 := $i2p.i64.ref($i66);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4159, 17} true;
  assume {:verifier.code 0} true;
  $i68 := $load.i64($M.0, $p67);
  // WARNING: %84 = load i64, i64* %83, align 8, !dbg !2638, !verifier.code !2434
  call {:cexpr "__cil_tmp56"} boogie_si_record_i64($i68);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4160, 19} true;
  assume {:verifier.code 0} true;
  $i69 := $ugt.i64($i68, 8388608);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4160, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i69} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i69 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4162, 19} true;
  assume {:verifier.code 0} true;
  $i70 := $p2i.ref.i64($p0);
  // WARNING: %87 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !2644, !verifier.code !2434
  call {:cexpr "__cil_tmp57"} boogie_si_record_i64($i70);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4163, 31} true;
  assume {:verifier.code 0} true;
  $i71 := $add.i64($i70, 64);
  // WARNING: %88 = add i64 %87, 64, !dbg !2649, !verifier.code !2434
  call {:cexpr "__cil_tmp58"} boogie_si_record_i64($i71);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4164, 21} true;
  assume {:verifier.code 0} true;
  $p72 := $i2p.i64.ref($i71);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4164, 19} true;
  assume {:verifier.code 0} true;
  $i73 := $load.i32($M.0, $p72);
  // WARNING: %90 = load i32, i32* %89, align 4, !dbg !2653, !verifier.code !2434
  call {:cexpr "__cil_tmp59"} boogie_si_record_i32($i73);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4165, 5} true;
  assume {:verifier.code 0} true;
  call $i74 := printk.ref.i32.i32(.str.16, $i73, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4167, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb18:
  assume !(($i69 == 1));
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4174, 31} true;
  assume {:verifier.code 0} true;
  $i75 := $add.i64($i7, 64);
  // WARNING: %94 = add i64 %8, 64, !dbg !2660, !verifier.code !2434
  call {:cexpr "__cil_tmp61"} boogie_si_record_i64($i75);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4175, 29} true;
  assume {:verifier.code 0} true;
  $i76 := $sub.i64($i75, 1);
  // WARNING: %95 = sub i64 %94, 1, !dbg !2664, !verifier.code !2434
  call {:cexpr "__cil_tmp62"} boogie_si_record_i64($i76);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4176, 29} true;
  assume {:verifier.code 0} true;
  $i77 := $udiv.i64($i76, 64);
  // WARNING: %96 = udiv i64 %95, 64, !dbg !2667, !verifier.code !2434
  call {:cexpr "__cil_tmp63"} boogie_si_record_i64($i77);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4177, 29} true;
  assume {:verifier.code 0} true;
  $i78 := $mul.i64($i77, 8);
  // WARNING: %97 = mul i64 %96, 8, !dbg !2670, !verifier.code !2434
  call {:cexpr "__cil_tmp64"} boogie_si_record_i64($i78);
  // WARNING: call void @llvm.dbg.value(metadata i64 %97, i64 0, metadata !4471, metadata !2433), !dbg !4472, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4179, 13} true;
  assume {:verifier.code 0} true;
  call $p79 := vmalloc($i78);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4180, 17} true;
  assume {:verifier.code 0} true;
  $i80 := $p2i.ref.i64(oops_cxt);
  // WARNING: %99 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2678, !verifier.code !2434
  call {:cexpr "__cil_tmp66"} boogie_si_record_i64($i80);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4181, 29} true;
  assume {:verifier.code 0} true;
  $i81 := $add.i64($i80, 128);
  // WARNING: %100 = add i64 %99, 128, !dbg !2681, !verifier.code !2434
  call {:cexpr "__cil_tmp67"} boogie_si_record_i64($i81);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4182, 38} true;
  assume {:verifier.code 0} true;
  $p82 := $bitcast.ref.ref($p79);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4182, 5} true;
  assume {:verifier.code 0} true;
  $p83 := $i2p.i64.ref($i81);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4182, 36} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p83, $p79);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4185, 17} true;
  assume {:verifier.code 0} true;
  $i84 := $p2i.ref.i64(oops_cxt);
  // WARNING: %103 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2687, !verifier.code !2434
  call {:cexpr "__cil_tmp68"} boogie_si_record_i64($i84);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4186, 29} true;
  assume {:verifier.code 0} true;
  $i85 := $add.i64($i84, 128);
  // WARNING: %104 = add i64 %103, 128, !dbg !2691, !verifier.code !2434
  call {:cexpr "__cil_tmp69"} boogie_si_record_i64($i85);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4187, 19} true;
  assume {:verifier.code 0} true;
  $p86 := $i2p.i64.ref($i85);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4187, 17} true;
  assume {:verifier.code 0} true;
  $p87 := $load.ref($M.0, $p86);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4188, 9} true;
  assume {:verifier.code 0} true;
  $i88 := $ne.ref($p87, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4188, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i88} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i88 == 1);
  assume {:verifier.code 0} true;
  goto $bb22;
$bb21:
  assume !(($i88 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4190, 5} true;
  assume {:verifier.code 0} true;
  call $i89 := printk.ref(.str.17);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4192, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4198, 3} true;
  assume {:verifier.code 0} true;
  $p90 := $bitcast.ref.ref(oops_cxt);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4199, 78} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p90, mtdoops_do_dump);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4200, 17} true;
  assume {:verifier.code 0} true;
  $p91 := $bitcast.ref.ref(oops_cxt);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4201, 9} true;
  assume {:verifier.code 0} true;
  call $i92 := kmsg_dump_register($p91);
  // WARNING: %114 = call i32 @kmsg_dump_register(%struct.kmsg_dumper* %113), !dbg !2711, !verifier.code !2434
  call {:cexpr "err"} boogie_si_record_i32($i92);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4203, 7} true;
  assume {:verifier.code 0} true;
  $i93 := $ne.i32($i92, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4203, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i93} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i93 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4205, 5} true;
  assume {:verifier.code 0} true;
  call $i94 := printk.ref.i32(.str.18, $i92);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4206, 19} true;
  assume {:verifier.code 0} true;
  $i95 := $p2i.ref.i64(oops_cxt);
  // WARNING: %118 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2720, !verifier.code !2434
  call {:cexpr "__cil_tmp72"} boogie_si_record_i64($i95);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4207, 31} true;
  assume {:verifier.code 0} true;
  $i96 := $add.i64($i95, 128);
  // WARNING: %119 = add i64 %118, 128, !dbg !2723, !verifier.code !2434
  call {:cexpr "__cil_tmp73"} boogie_si_record_i64($i96);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4208, 21} true;
  assume {:verifier.code 0} true;
  $p97 := $i2p.i64.ref($i96);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4208, 19} true;
  assume {:verifier.code 0} true;
  $p98 := $load.ref($M.0, $p97);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4209, 19} true;
  assume {:verifier.code 0} true;
  $p99 := $bitcast.ref.ref($p98);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4210, 5} true;
  assume {:verifier.code 0} true;
  call vfree($p99);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4211, 19} true;
  assume {:verifier.code 0} true;
  $i100 := $p2i.ref.i64(oops_cxt);
  // WARNING: %123 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2734, !verifier.code !2434
  call {:cexpr "__cil_tmp76"} boogie_si_record_i64($i100);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4212, 31} true;
  assume {:verifier.code 0} true;
  $i101 := $add.i64($i100, 128);
  // WARNING: %124 = add i64 %123, 128, !dbg !2737, !verifier.code !2434
  call {:cexpr "__cil_tmp77"} boogie_si_record_i64($i101);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4214, 40} true;
  assume {:verifier.code 0} true;
  $p102 := $bitcast.ref.ref($0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4214, 7} true;
  assume {:verifier.code 0} true;
  $p103 := $i2p.i64.ref($i101);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4214, 38} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p103, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4216, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb24:
  assume !(($i93 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4221, 17} true;
  assume {:verifier.code 0} true;
  $i104 := $p2i.ref.i64(oops_cxt);
  // WARNING: %129 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2746, !verifier.code !2434
  call {:cexpr "__cil_tmp79"} boogie_si_record_i64($i104);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4222, 29} true;
  assume {:verifier.code 0} true;
  $i105 := $add.i64($i104, 104);
  // WARNING: %130 = add i64 %129, 104, !dbg !2750, !verifier.code !2434
  call {:cexpr "__cil_tmp80"} boogie_si_record_i64($i105);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4223, 5} true;
  assume {:verifier.code 0} true;
  $p106 := $i2p.i64.ref($i105);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4223, 38} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p106, $p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4224, 17} true;
  assume {:verifier.code 0} true;
  $i107 := $p2i.ref.i64(oops_cxt);
  // WARNING: %132 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2755, !verifier.code !2434
  call {:cexpr "__cil_tmp81"} boogie_si_record_i64($i107);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4225, 29} true;
  assume {:verifier.code 0} true;
  $i108 := $add.i64($i107, 112);
  // WARNING: %133 = add i64 %132, 112, !dbg !2758, !verifier.code !2434
  call {:cexpr "__cil_tmp82"} boogie_si_record_i64($i108);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4227, 17} true;
  assume {:verifier.code 0} true;
  $i109 := $load.i64($M.0, record_size);
  // WARNING: %134 = load i64, i64* @record_size, align 8, !dbg !2763, !verifier.code !2434
  call {:cexpr "__cil_tmp84"} boogie_si_record_i64($i109);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4228, 17} true;
  assume {:verifier.code 0} true;
  $i110 := $p2i.ref.i64($p0);
  // WARNING: %135 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !2766, !verifier.code !2434
  call {:cexpr "__cil_tmp85"} boogie_si_record_i64($i110);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4229, 29} true;
  assume {:verifier.code 0} true;
  $i111 := $add.i64($i110, 8);
  // WARNING: %136 = add i64 %135, 8, !dbg !2769, !verifier.code !2434
  call {:cexpr "__cil_tmp86"} boogie_si_record_i64($i111);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4230, 19} true;
  assume {:verifier.code 0} true;
  $p112 := $i2p.i64.ref($i111);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4230, 17} true;
  assume {:verifier.code 0} true;
  $i113 := $load.i64($M.0, $p112);
  // WARNING: %138 = load i64, i64* %137, align 8, !dbg !2773, !verifier.code !2434
  call {:cexpr "__cil_tmp87"} boogie_si_record_i64($i113);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4231, 17} true;
  assume {:verifier.code 0} true;
  $i114 := $trunc.i64.i32($i113);
  // WARNING: %139 = trunc i64 %138 to i32, !dbg !2776, !verifier.code !2434
  call {:cexpr "__cil_tmp88"} boogie_si_record_i32($i114);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4232, 17} true;
  assume {:verifier.code 0} true;
  $i115 := $sext.i32.i64($i114);
  // WARNING: %140 = sext i32 %139 to i64, !dbg !2779, !verifier.code !2434
  call {:cexpr "__cil_tmp89"} boogie_si_record_i64($i115);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4233, 29} true;
  assume {:verifier.code 0} true;
  $i116 := $udiv.i64($i115, $i109);
  // WARNING: %141 = udiv i64 %140, %134, !dbg !2782, !verifier.code !2434
  call {:cexpr "__cil_tmp90"} boogie_si_record_i64($i116);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4234, 27} true;
  assume {:verifier.code 0} true;
  $i117 := $trunc.i64.i32($i116);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4234, 5} true;
  assume {:verifier.code 0} true;
  $p118 := $i2p.i64.ref($i108);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4234, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p118, $i117);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4235, 3} true;
  assume {:verifier.code 0} true;
  call find_next_position(oops_cxt);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4236, 17} true;
  assume {:verifier.code 0} true;
  $i119 := $p2i.ref.i64($p0);
  // WARNING: %144 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !2789, !verifier.code !2434
  call {:cexpr "__cil_tmp91"} boogie_si_record_i64($i119);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4237, 29} true;
  assume {:verifier.code 0} true;
  $i120 := $add.i64($i119, 64);
  // WARNING: %145 = add i64 %144, 64, !dbg !2792, !verifier.code !2434
  call {:cexpr "__cil_tmp92"} boogie_si_record_i64($i120);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4238, 19} true;
  assume {:verifier.code 0} true;
  $p121 := $i2p.i64.ref($i120);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4238, 17} true;
  assume {:verifier.code 0} true;
  $i122 := $load.i32($M.0, $p121);
  // WARNING: %147 = load i32, i32* %146, align 4, !dbg !2796, !verifier.code !2434
  call {:cexpr "__cil_tmp93"} boogie_si_record_i32($i122);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4239, 3} true;
  assume {:verifier.code 0} true;
  call $i123 := printk.ref.i32(.str.19, $i122);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4241, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
}
const mtdoops_notify_remove: ref;
axiom (mtdoops_notify_remove == $sub.ref(0, 88243));
procedure  mtdoops_notify_remove($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i1;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4270, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64(oops_cxt);
  // WARNING: %2 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2437, !verifier.code !2434
  call {:cexpr "__cil_tmp4"} boogie_si_record_i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4271, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $add.i64($i1, 32);
  // WARNING: %3 = add i64 %2, 32, !dbg !2442, !verifier.code !2434
  call {:cexpr "__cil_tmp5"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4272, 18} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.i64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4272, 16} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.0, $p3);
  // WARNING: %5 = load i32, i32* %4, align 4, !dbg !2446, !verifier.code !2434
  call {:cexpr "__cil_tmp6"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4273, 16} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64($p0);
  // WARNING: %6 = ptrtoint %struct.mtd_info* %0 to i64, !dbg !2449, !verifier.code !2434
  call {:cexpr "__cil_tmp7"} boogie_si_record_i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4274, 27} true;
  assume {:verifier.code 0} true;
  $i6 := $add.i64($i5, 64);
  // WARNING: %7 = add i64 %6, 64, !dbg !2452, !verifier.code !2434
  call {:cexpr "__cil_tmp8"} boogie_si_record_i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4275, 18} true;
  assume {:verifier.code 0} true;
  $p7 := $i2p.i64.ref($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4275, 16} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.0, $p7);
  // WARNING: %9 = load i32, i32* %8, align 4, !dbg !2456, !verifier.code !2434
  call {:cexpr "__cil_tmp9"} boogie_si_record_i32($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4276, 18} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.i32($i8, $i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4276, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i9 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4277, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i9 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4280, 19} true;
  assume {:verifier.code 0} true;
  $i10 := $p2i.ref.i64(oops_cxt);
  // WARNING: %13 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2464, !verifier.code !2434
  call {:cexpr "__cil_tmp10"} boogie_si_record_i64($i10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4281, 31} true;
  assume {:verifier.code 0} true;
  $i11 := $add.i64($i10, 32);
  // WARNING: %14 = add i64 %13, 32, !dbg !2469, !verifier.code !2434
  call {:cexpr "__cil_tmp11"} boogie_si_record_i64($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4282, 21} true;
  assume {:verifier.code 0} true;
  $p12 := $i2p.i64.ref($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4282, 19} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.0, $p12);
  // WARNING: %16 = load i32, i32* %15, align 4, !dbg !2473, !verifier.code !2434
  call {:cexpr "__cil_tmp12"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4283, 21} true;
  assume {:verifier.code 0} true;
  $i14 := $slt.i32($i13, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4283, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb4, $bb5;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4318, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4284, 7} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb5:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4292, 17} true;
  assume {:verifier.code 0} true;
  $p15 := $bitcast.ref.ref(oops_cxt);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4293, 13} true;
  assume {:verifier.code 0} true;
  call $i16 := kmsg_dump_unregister($p15);
  // WARNING: %23 = call i32 @kmsg_dump_unregister(%struct.kmsg_dumper* %22), !dbg !2485, !verifier.code !2434
  call {:cexpr "tmp___7"} boogie_si_record_i32($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4295, 15} true;
  assume {:verifier.code 0} true;
  $i17 := $slt.i32($i16, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4295, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i17 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4297, 5} true;
  assume {:verifier.code 0} true;
  call $i18 := printk.ref(.str.21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4299, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i17 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4303, 17} true;
  assume {:verifier.code 0} true;
  $i19 := $p2i.ref.i64(oops_cxt);
  // WARNING: %29 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2495, !verifier.code !2434
  call {:cexpr "__cil_tmp14"} boogie_si_record_i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4304, 29} true;
  assume {:verifier.code 0} true;
  $i20 := $add.i64($i19, 104);
  // WARNING: %30 = add i64 %29, 104, !dbg !2499, !verifier.code !2434
  call {:cexpr "__cil_tmp15"} boogie_si_record_i64($i20);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4306, 40} true;
  assume {:verifier.code 0} true;
  $p21 := $bitcast.ref.ref($0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4306, 5} true;
  assume {:verifier.code 0} true;
  $p22 := $i2p.i64.ref($i20);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4306, 38} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p22, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4307, 17} true;
  assume {:verifier.code 0} true;
  $i23 := $p2i.ref.i64(oops_cxt);
  // WARNING: %33 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2507, !verifier.code !2434
  call {:cexpr "__cil_tmp17"} boogie_si_record_i64($i23);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4308, 29} true;
  assume {:verifier.code 0} true;
  $i24 := $add.i64($i23, 40);
  // WARNING: %34 = add i64 %33, 40, !dbg !2510, !verifier.code !2434
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4309, 17} true;
  assume {:verifier.code 0} true;
  $p25 := $i2p.i64.ref($i24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4310, 3} true;
  assume {:verifier.code 0} true;
  call $i26 := flush_work_sync($p25);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4311, 17} true;
  assume {:verifier.code 0} true;
  $i27 := $p2i.ref.i64(oops_cxt);
  // WARNING: %37 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2517, !verifier.code !2434
  call {:cexpr "__cil_tmp20"} boogie_si_record_i64($i27);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4312, 29} true;
  assume {:verifier.code 0} true;
  $i28 := $add.i64($i27, 72);
  // WARNING: %38 = add i64 %37, 72, !dbg !2520, !verifier.code !2434
  call {:cexpr "__cil_tmp21"} boogie_si_record_i64($i28);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4313, 17} true;
  assume {:verifier.code 0} true;
  $p29 := $i2p.i64.ref($i28);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4314, 3} true;
  assume {:verifier.code 0} true;
  call $i30 := flush_work_sync($p29);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4316, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const kmsg_dump_unregister: ref;
axiom (kmsg_dump_unregister == $sub.ref(0, 89275));
procedure  kmsg_dump_unregister($p0: ref)
  returns ($r: i32);
const flush_work_sync: ref;
axiom (flush_work_sync == $sub.ref(0, 90307));
procedure  flush_work_sync($p0: ref)
  returns ($r: i1);
const div_u64: ref;
axiom (div_u64 == $sub.ref(0, 91339));
procedure  div_u64($i0: i64, $i1: i32)
  returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
$bb0:
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  // WARNING: %3 = alloca i32, align 4, !verifier.code !2433
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !4702, metadata !2433), !dbg !4703, !verifier.code !2431
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2193, 9} true;
  assume {:verifier.code 0} true;
  call $i3 := div_u64_rem($i0, $i1, $p2);
  // WARNING: %4 = call i64 @div_u64_rem(i64 %0, i32 %1, i32* %3), !dbg !2441, !verifier.code !2433
  call {:cexpr "tmp"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2195, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const strcmp: ref;
axiom (strcmp == $sub.ref(0, 92371));
procedure  strcmp($p0: ref, $p1: ref)
  returns ($r: i32);
const mtdoops_do_dump: ref;
axiom (mtdoops_do_dump == $sub.ref(0, 93403));
procedure  mtdoops_do_dump($p0: ref, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $i5: i64)
{
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.kmsg_dumper* %0, i64 0, metadata !4715, metadata !2433), !dbg !4716, !verifier.code !2431
  // WARNING: call void @llvm.dbg.value(metadata i8* %2, i64 0, metadata !4719, metadata !2433), !dbg !4720, !verifier.code !2431
  // WARNING: call void @llvm.dbg.value(metadata i8* %4, i64 0, metadata !4723, metadata !2433), !dbg !4724, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3855, 17} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3856, 17} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i32($p6);
  // WARNING: %8 = ptrtoint %struct.kmsg_dumper* %7 to i32, !dbg !2453, !verifier.code !2434
  call {:cexpr "__cil_tmp26"} boogie_si_record_i32($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3857, 17} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3858, 29} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i32.i64($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3858, 29} true;
  assume {:verifier.code 0} true;
  $i10 := $sub.i64(0, $i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3858, 29} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p8, $mul.ref($i10, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3859, 9} true;
  assume {:verifier.code 0} true;
  $p12 := $bitcast.ref.ref($p11);
  // WARNING: call void @llvm.dbg.value(metadata %struct.mtdoops_context* %13, i64 0, metadata !4745, metadata !2433), !dbg !4746, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3862, 19} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.i32($i1, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3862, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i13 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3865, 21} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.i32($i1, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3865, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i13 == 1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb3:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3866, 7} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3970, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3871, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3877, 19} true;
  assume {:verifier.code 0} true;
  $i15 := $eq.i32($i1, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3877, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i15 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3880, 19} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.0, dump_oops);
  // WARNING: %24 = load i32, i32* @dump_oops, align 4, !dbg !2489, !verifier.code !2434
  call {:cexpr "__cil_tmp33"} boogie_si_record_i32($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3881, 11} true;
  assume {:verifier.code 0} true;
  $i17 := $ne.i32($i16, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3881, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb10, $bb11;
$bb9:
  assume !(($i15 == 1));
  assume {:verifier.code 0} true;
  goto $bb13;
$bb10:
  assume ($i17 == 1);
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume !(($i17 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3882, 7} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3887, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3891, 17} true;
  assume {:verifier.code 0} true;
  $i18 := $p2i.ref.i64($p12);
  // WARNING: %31 = ptrtoint %struct.mtdoops_context* %13 to i64, !dbg !2500, !verifier.code !2434
  call {:cexpr "__cil_tmp34"} boogie_si_record_i64($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3892, 29} true;
  assume {:verifier.code 0} true;
  $i19 := $add.i64($i18, 136);
  // WARNING: %32 = add i64 %31, 136, !dbg !2503, !verifier.code !2434
  call {:cexpr "__cil_tmp35"} boogie_si_record_i64($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3893, 19} true;
  assume {:verifier.code 0} true;
  $p20 := $i2p.i64.ref($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3893, 17} true;
  assume {:verifier.code 0} true;
  $p21 := $load.ref($M.0, $p20);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3894, 29} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p21, 8);
  // WARNING: call void @llvm.dbg.value(metadata i8* %35, i64 0, metadata !4795, metadata !2433), !dbg !4796, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3900, 17} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i64($M.0, record_size);
  // WARNING: %36 = load i64, i64* @record_size, align 8, !dbg !2519, !verifier.code !2434
  call {:cexpr "__cil_tmp41"} boogie_si_record_i64($i23);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3901, 30} true;
  assume {:verifier.code 0} true;
  $i24 := $sub.i64($i23, 8);
  // WARNING: %37 = sub i64 %36, 8, !dbg !2522, !verifier.code !2434
  call {:cexpr "_min2"} boogie_si_record_i64($i24);
  // WARNING: call void @llvm.dbg.value(metadata i64 %37, i64 0, metadata !4805, metadata !2433), !dbg !4806, !verifier.code !2431
  // WARNING: call void @llvm.dbg.value(metadata i64 %37, i64 0, metadata !4807, metadata !2433), !dbg !4808, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3907, 19} true;
  assume {:verifier.code 0} true;
  $i25 := $ult.i64($i5, $i24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3907, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb14, $bb15;
$bb14:
  assume ($i25 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3910, 3} true;
  assume {:verifier.code 0} true;
  $i26 := $i5;
  goto $bb16;
$bb15:
  assume !(($i25 == 1));
  assume {:verifier.code 0} true;
  $i26 := $i24;
  goto $bb16;
$bb16:
  assume {:verifier.code 0} true;
  // WARNING: %.01 = phi i64 [ %5, %39 ], [ %37, %40 ], !verifier.code !2434
  // WARNING: call void @llvm.dbg.value(metadata i64 %.01, i64 0, metadata !4819, metadata !2433), !dbg !4820, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3920, 17} true;
  assume {:verifier.code 0} true;
  $i27 := $load.i64($M.0, record_size);
  // WARNING: %42 = load i64, i64* @record_size, align 8, !dbg !2543, !verifier.code !2434
  call {:cexpr "__cil_tmp51"} boogie_si_record_i64($i27);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3921, 29} true;
  assume {:verifier.code 0} true;
  $i28 := $sub.i64($i27, 8);
  // WARNING: %43 = sub i64 %42, 8, !dbg !2546, !verifier.code !2434
  call {:cexpr "__cil_tmp52"} boogie_si_record_i64($i28);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3922, 30} true;
  assume {:verifier.code 0} true;
  $i29 := $sub.i64($i28, $i26);
  // WARNING: %44 = sub i64 %43, %.01, !dbg !2549, !verifier.code !2434
  call {:cexpr "_min2___0"} boogie_si_record_i64($i29);
  // WARNING: call void @llvm.dbg.value(metadata i64 %44, i64 0, metadata !4832, metadata !2433), !dbg !4833, !verifier.code !2431
  // WARNING: call void @llvm.dbg.value(metadata i64 %44, i64 0, metadata !4834, metadata !2433), !dbg !4835, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3928, 19} true;
  assume {:verifier.code 0} true;
  $i30 := $ult.i64($i3, $i29);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3928, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb17, $bb18;
$bb17:
  assume ($i30 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3931, 3} true;
  assume {:verifier.code 0} true;
  $i31 := $i3;
  goto $bb19;
$bb18:
  assume !(($i30 == 1));
  assume {:verifier.code 0} true;
  $i31 := $i29;
  goto $bb19;
$bb19:
  assume {:verifier.code 0} true;
  // WARNING: %.0 = phi i64 [ %3, %46 ], [ %44, %47 ], !verifier.code !2434
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3938, 17} true;
  assume {:verifier.code 0} true;
  $i32 := $sub.i64($i5, $i26);
  // WARNING: %49 = sub i64 %5, %.01, !dbg !2566, !verifier.code !2434
  call {:cexpr "s2_start"} boogie_si_record_i64($i32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3939, 17} true;
  assume {:verifier.code 0} true;
  $i33 := $sub.i64($i3, $i31);
  // WARNING: %50 = sub i64 %3, %.0, !dbg !2570, !verifier.code !2434
  call {:cexpr "s1_start"} boogie_si_record_i64($i33);
  // WARNING: call void @llvm.dbg.value(metadata i64 %50, i64 0, metadata !4853, metadata !2433), !dbg !4854, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3942, 20} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p2, $mul.ref($i33, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3944, 11} true;
  assume {:verifier.code 0} true;
  call $i35 := __builtinx_memcpy.ref.ref.i64($p22, $p34, $i31);
  // WARNING: %52 = call i32 (i8*, i8*, i64, ...) bitcast (i32 (...)* @__builtinx_memcpy to i32 (i8*, i8*, i64, ...)*)(i8* %35, i8* %51, i64 %.0), !dbg !2582, !verifier.code !2434
  $i36 := $add.i64(8, $i31);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3946, 21} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p21, $mul.ref($i36, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3948, 20} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p4, $mul.ref($i32, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3950, 15} true;
  assume {:verifier.code 0} true;
  call $i39 := __builtinx_memcpy.ref.ref.i64($p37, $p38, $i26);
  // WARNING: %55 = call i32 (i8*, i8*, i64, ...) bitcast (i32 (...)* @__builtinx_memcpy to i32 (i8*, i8*, i64, ...)*)(i8* %53, i8* %54, i64 %.01), !dbg !2595, !verifier.code !2434
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3954, 19} true;
  assume {:verifier.code 0} true;
  $i40 := $ne.i32($i1, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3954, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i40 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3956, 5} true;
  assume {:verifier.code 0} true;
  call mtdoops_write($p12, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3958, 3} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb21:
  assume !(($i40 == 1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3963, 17} true;
  assume {:verifier.code 0} true;
  $i41 := $p2i.ref.i64($p12);
  // WARNING: %60 = ptrtoint %struct.mtdoops_context* %13 to i64, !dbg !2606, !verifier.code !2434
  call {:cexpr "__cil_tmp67"} boogie_si_record_i64($i41);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3964, 29} true;
  assume {:verifier.code 0} true;
  $i42 := $add.i64($i41, 72);
  // WARNING: %61 = add i64 %60, 72, !dbg !2610, !verifier.code !2434
  call {:cexpr "__cil_tmp68"} boogie_si_record_i64($i42);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3965, 17} true;
  assume {:verifier.code 0} true;
  $p43 := $i2p.i64.ref($i42);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3966, 3} true;
  assume {:verifier.code 0} true;
  call $i44 := schedule_work($p43);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3968, 3} true;
  assume {:verifier.code 0} true;
  goto $bb5;
}
const kmsg_dump_register: ref;
axiom (kmsg_dump_register == $sub.ref(0, 94435));
procedure  kmsg_dump_register($p0: ref)
  returns ($r: i32);
const vfree: ref;
axiom (vfree == $sub.ref(0, 95467));
procedure  vfree($p0: ref);
const find_next_position: ref;
axiom (find_next_position == $sub.ref(0, 96499));
procedure  find_next_position($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i32;
  var $i21: i1;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $i34: i1;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i32;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i66: i1;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $i71: i32;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i1;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i32;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $p103: ref;
  var $i104: i32;
  var $p107: ref;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i64;
  var $i115: i64;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $i119: i1;
  var $p120: ref;
  var $i121: i64;
  var $i122: i64;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $i126: i32;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i105: i32;
  var $i106: i32;
  var $i86: i32;
  var $i87: i32;
  var $i72: i32;
  var $i73: i32;
  var $i22: i32;
  var $i23: i32;
  var $i131: i32;
  var $i132: i1;
  var $i133: i64;
  var $i134: i64;
  var $p135: ref;
  var $i136: i64;
  var $i137: i64;
  var $p138: ref;
  var $i139: i64;
  var $i140: i64;
  var $p141: ref;
  var $i142: i32;
  var $i143: i64;
  var $i144: i64;
  var $p145: ref;
  var $i146: i64;
  var $i147: i64;
  var $p148: ref;
$bb0:
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  // WARNING: ignoring llvm.debug call.
  assume true;
  // WARNING: ignoring llvm.debug call.
  assume true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3563, 17} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.i64($p0);
  // WARNING: %4 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2442, !verifier.code !2433
  call {:cexpr "__cil_tmp11"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3564, 29} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i64($i3, 104);
  // WARNING: %5 = add i64 %4, 104, !dbg !2446, !verifier.code !2433
  call {:cexpr "__cil_tmp12"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3565, 11} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.i64.ref($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3565, 9} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.0, $p5);
  // WARNING: call void @llvm.dbg.value(metadata %struct.mtd_info* %7, i64 0, metadata !4918, metadata !2433), !dbg !4919, !verifier.code !2431
  // WARNING: call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !4920, metadata !2433), !dbg !4921, !verifier.code !2431
  // WARNING: call void @llvm.dbg.value(metadata i32 -1, i64 0, metadata !4922, metadata !2433), !dbg !4923, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3573, 19} true;
  assume {:verifier.code 0} true;
  $i7 := $p2i.ref.i64($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3574, 31} true;
  assume {:verifier.code 0} true;
  $i8 := $add.i64($i7, 112);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3575, 21} true;
  assume {:verifier.code 0} true;
  $p9 := $i2p.i64.ref($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3570, 3} true;
  assume {:verifier.code 0} true;
  $i10, $i11, $i12 := 0, 0, $sub.i32(0, 1);
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3570, 13} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  // WARNING: call void @llvm.dbg.value(metadata i64 %8, i64 0, metadata !4935, metadata !2433), !dbg !4936, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3575, 19} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.0, $p9);
  // WARNING: %13 = load i32, i32* %10, align 4, !dbg !2472, !verifier.code !2433
  call {:cexpr "__cil_tmp15"} boogie_si_record_i32($i13);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3576, 14} true;
  assume {:verifier.code 0} true;
  $i14 := $slt.i32($i10, $i13);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3576, 9} true;
  assume {:verifier.code 0} true;
  $i15, $i16 := $i11, $i12;
  assume {:branchcond $i14} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i14 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3578, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i14 == 1));
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3579, 7} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3584, 19} true;
  assume {:verifier.code 0} true;
  $i17 := $load.i64($M.0, record_size);
  // WARNING: %18 = load i64, i64* @record_size, align 8, !dbg !2484, !verifier.code !2433
  call {:cexpr "__cil_tmp17"} boogie_si_record_i64($i17);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3585, 19} true;
  assume {:verifier.code 0} true;
  $i18 := $sext.i32.i64($i10);
  // WARNING: %19 = sext i32 %.09 to i64, !dbg !2488, !verifier.code !2433
  call {:cexpr "__cil_tmp18"} boogie_si_record_i64($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3586, 31} true;
  assume {:verifier.code 0} true;
  $i19 := $mul.i64($i18, $i17);
  // WARNING: %20 = mul i64 %19, %18, !dbg !2491, !verifier.code !2433
  call {:cexpr "__cil_tmp19"} boogie_si_record_i64($i19);
  // WARNING: call void @llvm.dbg.value(metadata i64 %20, i64 0, metadata !4959, metadata !2433), !dbg !4960, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3588, 15} true;
  assume {:verifier.code 0} true;
  call $i20 := mtd_block_isbad($p6, $i19);
  // WARNING: %21 = call i32 @mtd_block_isbad(%struct.mtd_info* %7, i64 %20), !dbg !2496, !verifier.code !2433
  call {:cexpr "tmp___7"} boogie_si_record_i32($i20);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3590, 9} true;
  assume {:verifier.code 0} true;
  $i21 := $ne.i32($i20, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3590, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb7, $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3756, 16} true;
  assume {:verifier.code 0} true;
  $i132 := $eq.i32($i16, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3756, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i132} true;
  goto $bb55, $bb56;
$bb7:
  assume ($i21 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3591, 7} true;
  assume {:verifier.code 0} true;
  $i22, $i23 := $i11, $i12;
  goto $bb9;
$bb8:
  assume !(($i21 == 1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3752, 17} true;
  assume {:verifier.code 0} true;
  $i131 := $add.i32($i10, 1);
  // WARNING: %166 = add nsw i32 %.09, 1, !dbg !2802, !verifier.code !2433
  call {:cexpr "page"} boogie_si_record_i32($i131);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3570, 3} true;
  assume {:verifier.code 0} true;
  $i10, $i11, $i12 := $i131, $i22, $i23;
  goto $bb1;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3596, 5} true;
  assume {:verifier.code 0} true;
  call mark_page_used($p0, $i10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3598, 19} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i64($M.0, record_size);
  // WARNING: %26 = load i64, i64* @record_size, align 8, !dbg !2508, !verifier.code !2433
  call {:cexpr "__cil_tmp22"} boogie_si_record_i64($i24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3599, 19} true;
  assume {:verifier.code 0} true;
  $i25 := $sext.i32.i64($i10);
  // WARNING: %27 = sext i32 %.09 to i64, !dbg !2511, !verifier.code !2433
  call {:cexpr "__cil_tmp23"} boogie_si_record_i64($i25);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3600, 31} true;
  assume {:verifier.code 0} true;
  $i26 := $mul.i64($i25, $i24);
  // WARNING: %28 = mul i64 %27, %26, !dbg !2514, !verifier.code !2433
  call {:cexpr "__cil_tmp24"} boogie_si_record_i64($i26);
  // WARNING: call void @llvm.dbg.value(metadata i64 %28, i64 0, metadata !4982, metadata !2433), !dbg !4983, !verifier.code !2431
  // WARNING: call void @llvm.dbg.value(metadata i64 %28, i64 0, metadata !4984, metadata !2433), !dbg !4985, !verifier.code !2431
  // WARNING: call void @llvm.dbg.value(metadata i64 8, i64 0, metadata !4986, metadata !2433), !dbg !4987, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3604, 35} true;
  assume {:verifier.code 0} true;
  $p27 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3604, 19} true;
  assume {:verifier.code 0} true;
  $i28 := $p2i.ref.i64($p27);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3604, 43} true;
  assume {:verifier.code 0} true;
  $i29 := $add.i64($i28, 0);
  // WARNING: %31 = add i64 %30, 0, !dbg !2525, !verifier.code !2433
  call {:cexpr "__cil_tmp28"} boogie_si_record_i64($i29);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3605, 19} true;
  assume {:verifier.code 0} true;
  $p30 := $i2p.i64.ref($i29);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3606, 19} true;
  assume {:verifier.code 0} true;
  $p31 := $bitcast.ref.ref($p30);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3607, 11} true;
  assume {:verifier.code 0} true;
  call $i32 := mtd_read($p6, $i26, 8, $p2, $p31);
  // WARNING: %34 = call i32 @mtd_read(%struct.mtd_info* %7, i64 %28, i64 8, i64* %3, i8* %33), !dbg !2534, !verifier.code !2433
  call {:cexpr "ret"} boogie_si_record_i32($i32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3611, 19} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i64($M.0, $p2);
  // WARNING: %35 = load i64, i64* %3, align 8, !dbg !2539, !verifier.code !2433
  call {:cexpr "__cil_tmp32"} boogie_si_record_i64($i33);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3612, 21} true;
  assume {:verifier.code 0} true;
  $i34 := $ne.i64($i33, 8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3612, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i34 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3615, 21} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i64($M.0, record_size);
  // WARNING: %38 = load i64, i64* @record_size, align 8, !dbg !2548, !verifier.code !2433
  call {:cexpr "__cil_tmp34"} boogie_si_record_i64($i35);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3616, 21} true;
  assume {:verifier.code 0} true;
  $i36 := $sext.i32.i64($i10);
  // WARNING: %39 = sext i32 %.09 to i64, !dbg !2553, !verifier.code !2433
  call {:cexpr "__cil_tmp35"} boogie_si_record_i64($i36);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3617, 33} true;
  assume {:verifier.code 0} true;
  $i37 := $mul.i64($i36, $i35);
  // WARNING: %40 = mul i64 %39, %38, !dbg !2556, !verifier.code !2433
  call {:cexpr "__cil_tmp36"} boogie_si_record_i64($i37);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3619, 21} true;
  assume {:verifier.code 0} true;
  $i38 := $load.i64($M.0, $p2);
  // WARNING: %41 = load i64, i64* %3, align 8, !dbg !2561, !verifier.code !2433
  call {:cexpr "__cil_tmp38"} boogie_si_record_i64($i38);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3620, 7} true;
  assume {:verifier.code 0} true;
  call $i39 := printk.ref.i64.i64.i32.i32(.str.20, $i37, $i38, 8, $i32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3623, 7} true;
  assume {:verifier.code 0} true;
  $i22, $i23 := $i11, $i12;
  goto $bb9;
$bb12:
  assume !(($i34 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3625, 13} true;
  assume {:verifier.code 0} true;
  $i40 := $slt.i32($i32, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3625, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i40 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3627, 17} true;
  assume {:verifier.code 0} true;
  call $i41 := mtd_is_bitflip($i32);
  // WARNING: %46 = call i32 @mtd_is_bitflip(i32 %34), !dbg !2569, !verifier.code !2433
  call {:cexpr "tmp___8"} boogie_si_record_i32($i41);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3629, 11} true;
  assume {:verifier.code 0} true;
  $i42 := $ne.i32($i41, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3629, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i42} true;
  goto $bb15, $bb16;
$bb14:
  assume !(($i40 == 1));
  assume {:verifier.code 0} true;
  goto $bb18;
$bb15:
  assume ($i42 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3631, 7} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume !(($i42 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3634, 23} true;
  assume {:verifier.code 0} true;
  $i43 := $load.i64($M.0, record_size);
  // WARNING: %50 = load i64, i64* @record_size, align 8, !dbg !2581, !verifier.code !2433
  call {:cexpr "__cil_tmp40"} boogie_si_record_i64($i43);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3635, 23} true;
  assume {:verifier.code 0} true;
  $i44 := $sext.i32.i64($i10);
  // WARNING: %51 = sext i32 %.09 to i64, !dbg !2586, !verifier.code !2433
  call {:cexpr "__cil_tmp41"} boogie_si_record_i64($i44);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3636, 35} true;
  assume {:verifier.code 0} true;
  $i45 := $mul.i64($i44, $i43);
  // WARNING: %52 = mul i64 %51, %50, !dbg !2589, !verifier.code !2433
  call {:cexpr "__cil_tmp42"} boogie_si_record_i64($i45);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3638, 23} true;
  assume {:verifier.code 0} true;
  $i46 := $load.i64($M.0, $p2);
  // WARNING: %53 = load i64, i64* %3, align 8, !dbg !2594, !verifier.code !2433
  call {:cexpr "__cil_tmp44"} boogie_si_record_i64($i46);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3639, 9} true;
  assume {:verifier.code 0} true;
  call $i47 := printk.ref.i64.i64.i32.i32(.str.20, $i45, $i46, 8, $i32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3642, 9} true;
  assume {:verifier.code 0} true;
  $i22, $i23 := $i11, $i12;
  goto $bb9;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3644, 5} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb18:
  assume {:verifier.code 0} true;
  goto $bb19;
$bb19:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3650, 35} true;
  assume {:verifier.code 0} true;
  $p48 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3650, 19} true;
  assume {:verifier.code 0} true;
  $i49 := $p2i.ref.i64($p48);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3650, 43} true;
  assume {:verifier.code 0} true;
  $i50 := $add.i64($i49, 0);
  // WARNING: %61 = add i64 %60, 0, !dbg !2605, !verifier.code !2433
  call {:cexpr "__cil_tmp46"} boogie_si_record_i64($i50);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3651, 21} true;
  assume {:verifier.code 0} true;
  $p51 := $i2p.i64.ref($i50);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3651, 19} true;
  assume {:verifier.code 0} true;
  $i52 := $load.i32($M.0, $p51);
  // WARNING: %63 = load i32, i32* %62, align 4, !dbg !2609, !verifier.code !2433
  call {:cexpr "__cil_tmp47"} boogie_si_record_i32($i52);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3652, 21} true;
  assume {:verifier.code 0} true;
  $i53 := $eq.i32($i52, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3652, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i53} true;
  goto $bb20, $bb21;
$bb20:
  assume ($i53 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3655, 37} true;
  assume {:verifier.code 0} true;
  $p54 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3655, 21} true;
  assume {:verifier.code 0} true;
  $i55 := $p2i.ref.i64($p54);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3655, 45} true;
  assume {:verifier.code 0} true;
  $i56 := $add.i64($i55, 4);
  // WARNING: %68 = add i64 %67, 4, !dbg !2621, !verifier.code !2433
  call {:cexpr "__cil_tmp49"} boogie_si_record_i64($i56);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3656, 23} true;
  assume {:verifier.code 0} true;
  $p57 := $i2p.i64.ref($i56);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3656, 21} true;
  assume {:verifier.code 0} true;
  $i58 := $load.i32($M.0, $p57);
  // WARNING: %70 = load i32, i32* %69, align 4, !dbg !2625, !verifier.code !2433
  call {:cexpr "__cil_tmp50"} boogie_si_record_i32($i58);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3657, 23} true;
  assume {:verifier.code 0} true;
  $i59 := $eq.i32($i58, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3657, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i59} true;
  goto $bb22, $bb23;
$bb21:
  assume !(($i53 == 1));
  assume {:verifier.code 0} true;
  goto $bb25;
$bb22:
  assume ($i59 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3659, 9} true;
  assume {:verifier.code 0} true;
  call mark_page_unused($p0, $i10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3661, 7} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb23:
  assume !(($i59 == 1));
  assume {:verifier.code 0} true;
  goto $bb24;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3665, 5} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3671, 35} true;
  assume {:verifier.code 0} true;
  $p60 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3671, 19} true;
  assume {:verifier.code 0} true;
  $i61 := $p2i.ref.i64($p60);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3671, 43} true;
  assume {:verifier.code 0} true;
  $i62 := $add.i64($i61, 0);
  // WARNING: %79 = add i64 %78, 0, !dbg !2641, !verifier.code !2433
  call {:cexpr "__cil_tmp52"} boogie_si_record_i64($i62);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3672, 21} true;
  assume {:verifier.code 0} true;
  $p63 := $i2p.i64.ref($i62);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3672, 19} true;
  assume {:verifier.code 0} true;
  $i64 := $load.i32($M.0, $p63);
  // WARNING: %81 = load i32, i32* %80, align 4, !dbg !2645, !verifier.code !2433
  call {:cexpr "__cil_tmp53"} boogie_si_record_i32($i64);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3673, 21} true;
  assume {:verifier.code 0} true;
  $i65 := $eq.i32($i64, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3673, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i65} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i65 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3674, 7} true;
  assume {:verifier.code 0} true;
  $i22, $i23 := $i11, $i12;
  goto $bb9;
$bb27:
  assume !(($i65 == 1));
  assume {:verifier.code 0} true;
  goto $bb28;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3679, 18} true;
  assume {:verifier.code 0} true;
  $i66 := $eq.i32($i12, $sub.i32(0, 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3679, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i66} true;
  goto $bb29, $bb30;
$bb29:
  assume ($i66 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3681, 37} true;
  assume {:verifier.code 0} true;
  $p67 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3681, 21} true;
  assume {:verifier.code 0} true;
  $i68 := $p2i.ref.i64($p67);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3681, 45} true;
  assume {:verifier.code 0} true;
  $i69 := $add.i64($i68, 0);
  // WARNING: %90 = add i64 %89, 0, !dbg !2661, !verifier.code !2433
  call {:cexpr "__cil_tmp55"} boogie_si_record_i64($i69);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3682, 20} true;
  assume {:verifier.code 0} true;
  $p70 := $i2p.i64.ref($i69);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3682, 18} true;
  assume {:verifier.code 0} true;
  $i71 := $load.i32($M.0, $p70);
  // WARNING: %92 = load i32, i32* %91, align 4, !dbg !2665, !verifier.code !2433
  call {:cexpr "maxcount"} boogie_si_record_i32($i71);
  // WARNING: call void @llvm.dbg.value(metadata i32 %92, i64 0, metadata !4922, metadata !2433), !dbg !4923, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3684, 5} true;
  assume {:verifier.code 0} true;
  $i72, $i73 := $i10, $i71;
  goto $bb31;
$bb30:
  assume !(($i66 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3687, 37} true;
  assume {:verifier.code 0} true;
  $p74 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3687, 21} true;
  assume {:verifier.code 0} true;
  $i75 := $p2i.ref.i64($p74);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3687, 45} true;
  assume {:verifier.code 0} true;
  $i76 := $add.i64($i75, 0);
  // WARNING: %96 = add i64 %95, 0, !dbg !2673, !verifier.code !2433
  call {:cexpr "__cil_tmp57"} boogie_si_record_i64($i76);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3688, 23} true;
  assume {:verifier.code 0} true;
  $p77 := $i2p.i64.ref($i76);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3688, 21} true;
  assume {:verifier.code 0} true;
  $i78 := $load.i32($M.0, $p77);
  // WARNING: %98 = load i32, i32* %97, align 4, !dbg !2677, !verifier.code !2433
  call {:cexpr "__cil_tmp58"} boogie_si_record_i32($i78);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3689, 23} true;
  assume {:verifier.code 0} true;
  $i79 := $ult.i32($i78, 1073741824);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3689, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i79} true;
  goto $bb32, $bb33;
$bb31:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3679, 21} true;
  assume {:verifier.code 0} true;
  $i22, $i23 := $i72, $i73;
  goto $bb9;
$bb32:
  assume ($i79 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3690, 22} true;
  assume {:verifier.code 0} true;
  $i80 := $ugt.i32($i12, 3221225472);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3690, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i80} true;
  goto $bb34, $bb35;
$bb33:
  assume !(($i79 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3698, 14} true;
  assume {:verifier.code 0} true;
  goto $bb37;
$bb34:
  assume ($i80 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3692, 41} true;
  assume {:verifier.code 0} true;
  $p81 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3692, 25} true;
  assume {:verifier.code 0} true;
  $i82 := $p2i.ref.i64($p81);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3692, 49} true;
  assume {:verifier.code 0} true;
  $i83 := $add.i64($i82, 0);
  // WARNING: %105 = add i64 %104, 0, !dbg !2692, !verifier.code !2433
  call {:cexpr "__cil_tmp60"} boogie_si_record_i64($i83);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3693, 24} true;
  assume {:verifier.code 0} true;
  $p84 := $i2p.i64.ref($i83);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3693, 22} true;
  assume {:verifier.code 0} true;
  $i85 := $load.i32($M.0, $p84);
  // WARNING: %107 = load i32, i32* %106, align 4, !dbg !2696, !verifier.code !2433
  call {:cexpr "maxcount"} boogie_si_record_i32($i85);
  // WARNING: call void @llvm.dbg.value(metadata i32 %107, i64 0, metadata !4922, metadata !2433), !dbg !4923, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3695, 9} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb35:
  assume !(($i80 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3696, 11} true;
  assume {:verifier.code 0} true;
  goto $bb37;
$bb36:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3698, 7} true;
  assume {:verifier.code 0} true;
  $i86, $i87 := $i10, $i85;
  goto $bb38;
$bb37:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3702, 39} true;
  assume {:verifier.code 0} true;
  $p88 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3702, 23} true;
  assume {:verifier.code 0} true;
  $i89 := $p2i.ref.i64($p88);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3702, 47} true;
  assume {:verifier.code 0} true;
  $i90 := $add.i64($i89, 0);
  // WARNING: %114 = add i64 %113, 0, !dbg !2709, !verifier.code !2433
  call {:cexpr "__cil_tmp62"} boogie_si_record_i64($i90);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3703, 25} true;
  assume {:verifier.code 0} true;
  $p91 := $i2p.i64.ref($i90);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3703, 23} true;
  assume {:verifier.code 0} true;
  $i92 := $load.i32($M.0, $p91);
  // WARNING: %116 = load i32, i32* %115, align 4, !dbg !2713, !verifier.code !2433
  call {:cexpr "__cil_tmp63"} boogie_si_record_i32($i92);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3704, 25} true;
  assume {:verifier.code 0} true;
  $i93 := $ugt.i32($i92, $i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3704, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i93} true;
  goto $bb39, $bb40;
$bb38:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i72, $i73 := $i86, $i87;
  goto $bb31;
$bb39:
  assume ($i93 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3707, 41} true;
  assume {:verifier.code 0} true;
  $p94 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3707, 25} true;
  assume {:verifier.code 0} true;
  $i95 := $p2i.ref.i64($p94);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3707, 49} true;
  assume {:verifier.code 0} true;
  $i96 := $add.i64($i95, 0);
  // WARNING: %121 = add i64 %120, 0, !dbg !2725, !verifier.code !2433
  call {:cexpr "__cil_tmp65"} boogie_si_record_i64($i96);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3708, 27} true;
  assume {:verifier.code 0} true;
  $p97 := $i2p.i64.ref($i96);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3708, 25} true;
  assume {:verifier.code 0} true;
  $i98 := $load.i32($M.0, $p97);
  // WARNING: %123 = load i32, i32* %122, align 4, !dbg !2729, !verifier.code !2433
  call {:cexpr "__cil_tmp66"} boogie_si_record_i32($i98);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3709, 27} true;
  assume {:verifier.code 0} true;
  $i99 := $ult.i32($i98, 3221225472);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3709, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i99} true;
  goto $bb41, $bb42;
$bb40:
  assume !(($i93 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3718, 16} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb41:
  assume ($i99 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3711, 43} true;
  assume {:verifier.code 0} true;
  $p100 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3711, 27} true;
  assume {:verifier.code 0} true;
  $i101 := $p2i.ref.i64($p100);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3711, 51} true;
  assume {:verifier.code 0} true;
  $i102 := $add.i64($i101, 0);
  // WARNING: %128 = add i64 %127, 0, !dbg !2740, !verifier.code !2433
  call {:cexpr "__cil_tmp68"} boogie_si_record_i64($i102);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3712, 26} true;
  assume {:verifier.code 0} true;
  $p103 := $i2p.i64.ref($i102);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3712, 24} true;
  assume {:verifier.code 0} true;
  $i104 := $load.i32($M.0, $p103);
  // WARNING: %130 = load i32, i32* %129, align 4, !dbg !2744, !verifier.code !2433
  call {:cexpr "maxcount"} boogie_si_record_i32($i104);
  // WARNING: call void @llvm.dbg.value(metadata i32 %130, i64 0, metadata !4922, metadata !2433), !dbg !4923, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3714, 11} true;
  assume {:verifier.code 0} true;
  goto $bb43;
$bb42:
  assume !(($i99 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3715, 13} true;
  assume {:verifier.code 0} true;
  goto $bb44;
$bb43:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3718, 9} true;
  assume {:verifier.code 0} true;
  $i105, $i106 := $i10, $i104;
  goto $bb45;
$bb44:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3722, 41} true;
  assume {:verifier.code 0} true;
  $p107 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3722, 25} true;
  assume {:verifier.code 0} true;
  $i108 := $p2i.ref.i64($p107);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3722, 49} true;
  assume {:verifier.code 0} true;
  $i109 := $add.i64($i108, 0);
  // WARNING: %137 = add i64 %136, 0, !dbg !2757, !verifier.code !2433
  call {:cexpr "__cil_tmp70"} boogie_si_record_i64($i109);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3723, 27} true;
  assume {:verifier.code 0} true;
  $p110 := $i2p.i64.ref($i109);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3723, 25} true;
  assume {:verifier.code 0} true;
  $i111 := $load.i32($M.0, $p110);
  // WARNING: %139 = load i32, i32* %138, align 4, !dbg !2761, !verifier.code !2433
  call {:cexpr "__cil_tmp71"} boogie_si_record_i32($i111);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3724, 27} true;
  assume {:verifier.code 0} true;
  $i112 := $ugt.i32($i111, $i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3724, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i112} true;
  goto $bb46, $bb47;
$bb45:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i86, $i87 := $i105, $i106;
  goto $bb38;
$bb46:
  assume ($i112 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3727, 43} true;
  assume {:verifier.code 0} true;
  $p113 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3727, 27} true;
  assume {:verifier.code 0} true;
  $i114 := $p2i.ref.i64($p113);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3727, 51} true;
  assume {:verifier.code 0} true;
  $i115 := $add.i64($i114, 0);
  // WARNING: %144 = add i64 %143, 0, !dbg !2773, !verifier.code !2433
  call {:cexpr "__cil_tmp73"} boogie_si_record_i64($i115);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3728, 29} true;
  assume {:verifier.code 0} true;
  $p116 := $i2p.i64.ref($i115);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3728, 27} true;
  assume {:verifier.code 0} true;
  $i117 := $load.i32($M.0, $p116);
  // WARNING: %146 = load i32, i32* %145, align 4, !dbg !2777, !verifier.code !2433
  call {:cexpr "__cil_tmp74"} boogie_si_record_i32($i117);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3729, 29} true;
  assume {:verifier.code 0} true;
  $i118 := $ugt.i32($i117, 3221225472);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3729, 17} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i118} true;
  goto $bb48, $bb49;
$bb47:
  assume !(($i112 == 1));
  assume {:verifier.code 0} true;
  $i129, $i130 := $i11, $i12;
  goto $bb54;
$bb48:
  assume ($i118 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3730, 28} true;
  assume {:verifier.code 0} true;
  $i119 := $ugt.i32($i12, 2147483648);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3730, 19} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i119} true;
  goto $bb50, $bb51;
$bb49:
  assume !(($i118 == 1));
  assume {:verifier.code 0} true;
  $i127, $i128 := $i11, $i12;
  goto $bb53;
$bb50:
  assume ($i119 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3732, 47} true;
  assume {:verifier.code 0} true;
  $p120 := $p1;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3732, 31} true;
  assume {:verifier.code 0} true;
  $i121 := $p2i.ref.i64($p120);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3732, 55} true;
  assume {:verifier.code 0} true;
  $i122 := $add.i64($i121, 0);
  // WARNING: %153 = add i64 %152, 0, !dbg !2792, !verifier.code !2433
  call {:cexpr "__cil_tmp76"} boogie_si_record_i64($i122);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3733, 30} true;
  assume {:verifier.code 0} true;
  $p123 := $i2p.i64.ref($i122);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3733, 28} true;
  assume {:verifier.code 0} true;
  $i124 := $load.i32($M.0, $p123);
  // WARNING: %155 = load i32, i32* %154, align 4, !dbg !2796, !verifier.code !2433
  call {:cexpr "maxcount"} boogie_si_record_i32($i124);
  // WARNING: call void @llvm.dbg.value(metadata i32 %155, i64 0, metadata !4922, metadata !2433), !dbg !4923, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3735, 15} true;
  assume {:verifier.code 0} true;
  $i125, $i126 := $i10, $i124;
  goto $bb52;
$bb51:
  assume !(($i119 == 1));
  assume {:verifier.code 0} true;
  $i125, $i126 := $i11, $i12;
  goto $bb52;
$bb52:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3738, 13} true;
  assume {:verifier.code 0} true;
  $i127, $i128 := $i125, $i126;
  goto $bb53;
$bb53:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3742, 11} true;
  assume {:verifier.code 0} true;
  $i129, $i130 := $i127, $i128;
  goto $bb54;
$bb54:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i105, $i106 := $i129, $i130;
  goto $bb45;
$bb55:
  assume ($i132 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3758, 19} true;
  assume {:verifier.code 0} true;
  $i133 := $p2i.ref.i64($p0);
  // WARNING: %170 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2809, !verifier.code !2433
  call {:cexpr "__cil_tmp77"} boogie_si_record_i64($i133);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3759, 31} true;
  assume {:verifier.code 0} true;
  $i134 := $add.i64($i133, 116);
  // WARNING: %171 = add i64 %170, 116, !dbg !2814, !verifier.code !2433
  call {:cexpr "__cil_tmp78"} boogie_si_record_i64($i134);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3760, 7} true;
  assume {:verifier.code 0} true;
  $p135 := $i2p.i64.ref($i134);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3760, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p135, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3761, 19} true;
  assume {:verifier.code 0} true;
  $i136 := $p2i.ref.i64($p0);
  // WARNING: %173 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2819, !verifier.code !2433
  call {:cexpr "__cil_tmp79"} boogie_si_record_i64($i136);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3762, 31} true;
  assume {:verifier.code 0} true;
  $i137 := $add.i64($i136, 120);
  // WARNING: %174 = add i64 %173, 120, !dbg !2822, !verifier.code !2433
  call {:cexpr "__cil_tmp80"} boogie_si_record_i64($i137);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3763, 7} true;
  assume {:verifier.code 0} true;
  $p138 := $i2p.i64.ref($i137);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3763, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p138, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3764, 19} true;
  assume {:verifier.code 0} true;
  $i139 := $p2i.ref.i64($p0);
  // WARNING: %176 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2827, !verifier.code !2433
  call {:cexpr "__cil_tmp81"} boogie_si_record_i64($i139);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3765, 31} true;
  assume {:verifier.code 0} true;
  $i140 := $add.i64($i139, 40);
  // WARNING: %177 = add i64 %176, 40, !dbg !2830, !verifier.code !2433
  call {:cexpr "__cil_tmp82"} boogie_si_record_i64($i140);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3766, 19} true;
  assume {:verifier.code 0} true;
  $p141 := $i2p.i64.ref($i140);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3767, 5} true;
  assume {:verifier.code 0} true;
  call $i142 := schedule_work($p141);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3769, 5} true;
  assume {:verifier.code 0} true;
  goto $bb57;
$bb56:
  assume !(($i132 == 1));
  assume {:verifier.code 0} true;
  goto $bb58;
$bb57:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3784, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb58:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3774, 17} true;
  assume {:verifier.code 0} true;
  $i143 := $p2i.ref.i64($p0);
  // WARNING: %182 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2838, !verifier.code !2433
  call {:cexpr "__cil_tmp84"} boogie_si_record_i64($i143);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3775, 29} true;
  assume {:verifier.code 0} true;
  $i144 := $add.i64($i143, 116);
  // WARNING: %183 = add i64 %182, 116, !dbg !2842, !verifier.code !2433
  call {:cexpr "__cil_tmp85"} boogie_si_record_i64($i144);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3776, 5} true;
  assume {:verifier.code 0} true;
  $p145 := $i2p.i64.ref($i144);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3776, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p145, $i15);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3777, 17} true;
  assume {:verifier.code 0} true;
  $i146 := $p2i.ref.i64($p0);
  // WARNING: %185 = ptrtoint %struct.mtdoops_context* %0 to i64, !dbg !2847, !verifier.code !2433
  call {:cexpr "__cil_tmp86"} boogie_si_record_i64($i146);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3778, 29} true;
  assume {:verifier.code 0} true;
  $i147 := $add.i64($i146, 120);
  // WARNING: %186 = add i64 %185, 120, !dbg !2850, !verifier.code !2433
  call {:cexpr "__cil_tmp87"} boogie_si_record_i64($i147);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3779, 5} true;
  assume {:verifier.code 0} true;
  $p148 := $i2p.i64.ref($i147);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3779, 25} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, $p148, $i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3780, 3} true;
  assume {:verifier.code 0} true;
  call mtdoops_inc_counter($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 3782, 3} true;
  assume {:verifier.code 0} true;
  goto $bb57;
}
const mtd_read: ref;
axiom (mtd_read == $sub.ref(0, 97531));
procedure  mtd_read($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref)
  returns ($r: i32);
const mtd_is_bitflip: ref;
axiom (mtd_is_bitflip == $sub.ref(0, 98563));
procedure  mtd_is_bitflip($i0: i32)
  returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2281, 15} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, $sub.i32(0, 117));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2281, 15} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i32($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2281, 3} true;
  assume {:verifier.code 0} true;
  $r := $i2;
  $exn := false;
  return;
}
const __builtinx_memcpy: ref;
axiom (__builtinx_memcpy == $sub.ref(0, 99595));
procedure  __builtinx_memcpy()
  returns ($r: i32);
procedure  __builtinx_memcpy.ref.ref.i64(p.0: ref, p.1: ref, p.2: i64)
  returns ($r: i32);
const div_u64_rem: ref;
axiom (div_u64_rem == $sub.ref(0, 100627));
procedure  div_u64_rem($i0: i64, $i1: i32, $p2: ref)
  returns ($r: i64)
{
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !5336, metadata !2433), !dbg !5337, !verifier.code !2431
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2177, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i32.i64($i1);
  // WARNING: %4 = zext i32 %1 to i64, !dbg !2441, !verifier.code !2436
  call {:cexpr "__cil_tmp4"} boogie_si_record_i64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2178, 25} true;
  assume {:verifier.code 0} true;
  $i4 := $urem.i64($i0, $i3);
  // WARNING: %5 = urem i64 %0, %4, !dbg !2445, !verifier.code !2436
  call {:cexpr "__cil_tmp5"} boogie_si_record_i64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2179, 16} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i64.i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2179, 14} true;
  assume {:verifier.code 0} true;
  $M.4 := $store.i32($M.4, $p2, $i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2181, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i32.i64($i1);
  // WARNING: %7 = zext i32 %1 to i64, !dbg !2450, !verifier.code !2436
  call {:cexpr "__cil_tmp6"} boogie_si_record_i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2182, 20} true;
  assume {:verifier.code 0} true;
  $i7 := $udiv.i64($i0, $i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 2182, 3} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
}
const mtdoops_exit: ref;
axiom (mtdoops_exit == $sub.ref(0, 101659));
procedure  mtdoops_exit()
{
  var $i0: i32;
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4584, 3} true;
  assume {:verifier.code 0} true;
  call $i0 := unregister_mtd_user(mtdoops_notifier);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4585, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.i64(oops_cxt);
  // WARNING: %2 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2438, !verifier.code !2434
  call {:cexpr "__cil_tmp2"} boogie_si_record_i64($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4586, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $add.i64($i1, 136);
  // WARNING: %3 = add i64 %2, 136, !dbg !2441, !verifier.code !2434
  call {:cexpr "__cil_tmp3"} boogie_si_record_i64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4587, 18} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.i64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4587, 16} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.0, $p3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4589, 3} true;
  assume {:verifier.code 0} true;
  call vfree($p4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4590, 16} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.i64(oops_cxt);
  // WARNING: %6 = ptrtoint %struct.mtdoops_context* @oops_cxt to i64, !dbg !2451, !verifier.code !2434
  call {:cexpr "__cil_tmp6"} boogie_si_record_i64($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4591, 27} true;
  assume {:verifier.code 0} true;
  $i6 := $add.i64($i5, 128);
  // WARNING: %7 = add i64 %6, 128, !dbg !2454, !verifier.code !2434
  call {:cexpr "__cil_tmp7"} boogie_si_record_i64($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4592, 18} true;
  assume {:verifier.code 0} true;
  $p7 := $i2p.i64.ref($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4592, 16} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.0, $p7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4593, 16} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4594, 3} true;
  assume {:verifier.code 0} true;
  call vfree($p9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4596, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const unregister_mtd_user: ref;
axiom (unregister_mtd_user == $sub.ref(0, 102691));
procedure  unregister_mtd_user($p0: ref)
  returns ($r: i32);
const main: ref;
axiom (main == $sub.ref(0, 103723));
procedure {:entrypoint} main()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
$bb0:
  call $initialize();
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4665, 20} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4665, 20} true;
  assume {:verifier.code 0} true;
  $M.5 := 1;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4666, 3} true;
  assume {:verifier.code 0} true;
  call ldv_initialize();
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4667, 13} true;
  assume {:verifier.code 0} true;
  call $i0 := mtdoops_init();
  // WARNING: %1 = call i32 @mtdoops_init(), !dbg !2436, !verifier.code !2434
  call {:cexpr "tmp___7"} boogie_si_record_i32($i0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4669, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4669, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4670, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4722, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_final_state();
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4724, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4675, 3} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4675, 13} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4678, 15} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
  // WARNING: %8 = call i32 @__VERIFIER_nondet_int(), !dbg !2449, !verifier.code !2452
  call {:cexpr "tmp___9"} boogie_si_record_i32($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4680, 9} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.i32($i2, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4680, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i3 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4682, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i3 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4683, 7} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4686, 15} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
  // WARNING: %13 = call i32 @__VERIFIER_nondet_int(), !dbg !2462, !verifier.code !2452
  call {:cexpr "tmp___8"} boogie_si_record_i32($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4688, 17} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i4, 0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4688, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb11, $bb12;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4718, 3} true;
  assume {:verifier.code 0} true;
  call mtdoops_exit();
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4719, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb11:
  assume ($i5 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4689, 7} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume !(($i5 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4691, 17} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.i32($i4, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4691, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb14, $bb15;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4699, 9} true;
  assume {:verifier.code 0} true;
  call mtdoops_notify_add($u0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4701, 9} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb14:
  assume ($i6 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4692, 7} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i6 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4695, 7} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4704, 9} true;
  assume {:verifier.code 0} true;
  call mtdoops_notify_remove($u0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4706, 9} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4708, 9} true;
  assume {:verifier.code 0} true;
  goto $bb21;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4696, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0} true;
  goto $bb19, $bb20;
$bb19:
  assume (0 == 1);
  assume {:verifier.code 0} true;
  assume false;
$bb20:
  assume !((0 == 1));
  assume {:verifier.code 0} true;
  assume false;
$bb21:
  assume {:verifier.code 0} true;
  goto $bb22;
$bb22:
  assume {:verifier.code 0} true;
  goto $bb23;
$bb23:
  assume {:verifier.code 0} true;
  goto $bb24;
$bb24:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4675, 3} true;
  assume {:verifier.code 0} true;
  goto $bb5;
}
const ldv_initialize: ref;
axiom (ldv_initialize == $sub.ref(0, 104755));
procedure  ldv_initialize();
const ldv_check_final_state: ref;
axiom (ldv_check_final_state == $sub.ref(0, 105787));
procedure  ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4859, 7} true;
  assume {:verifier.code 0} true;
  $i0 := $M.6;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4859, 17} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.i32($i0, 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4859, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4861, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4863, 5} true;
  assume {:verifier.code 0} true;
  call ldv_blast_assert();
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4866, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_blast_assert: ref;
axiom (ldv_blast_assert == $sub.ref(0, 106819));
procedure  ldv_blast_assert()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4730, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4731, 10} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--mtd--mtdoops.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-LLo3WT.c", 4733, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 107851));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !5475, metadata !2433), !dbg !5476, !verifier.code !2431
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 34, 21} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 35, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 108883));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 109915));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 261, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_error: ref;
axiom (__VERIFIER_error == $sub.ref(0, 110947));
procedure  __VERIFIER_error()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 47, 3} true;
  assume {:verifier.code 1} true;
  assert false;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 51, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 111979));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 113011));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 114043));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 115075));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 116107));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 117139));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 118171));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 119203));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 120235));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 120, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
  // WARNING: %1 = call i32 @__SMACK_nondet_int(), !dbg !2431, !verifier.code !2432
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.i32($i0, 2147483647);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i2);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 122, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 121267));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 122299));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 123331));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 124363));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 125395));
procedure  __SMACK_nondet_long()
  returns ($r: i64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 126427));
procedure  __SMACK_nondet_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 127459));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 128491));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 129523));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 130555));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 131587));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 132619));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 133651));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 134683));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 135715));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 136747));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 137779));
function {:inline} $bitcast.ref.ref(i: ref) returns (ref) {i}
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $min.bv128(i1: bv128, i2: bv128) returns (bv128) {if $slt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv96(i1: bv96, i2: bv96) returns (bv96) {if $slt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv88(i1: bv88, i2: bv88) returns (bv88) {if $slt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv64(i1: bv64, i2: bv64) returns (bv64) {if $slt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv56(i1: bv56, i2: bv56) returns (bv56) {if $slt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv48(i1: bv48, i2: bv48) returns (bv48) {if $slt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv40(i1: bv40, i2: bv40) returns (bv40) {if $slt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv32(i1: bv32, i2: bv32) returns (bv32) {if $slt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv24(i1: bv24, i2: bv24) returns (bv24) {if $slt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv16(i1: bv16, i2: bv16) returns (bv16) {if $slt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv8(i1: bv8, i2: bv8) returns (bv8) {if $slt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv128(i1: bv128, i2: bv128) returns (bv128) {if $sgt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv96(i1: bv96, i2: bv96) returns (bv96) {if $sgt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv88(i1: bv88, i2: bv88) returns (bv88) {if $sgt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv64(i1: bv64, i2: bv64) returns (bv64) {if $sgt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv56(i1: bv56, i2: bv56) returns (bv56) {if $sgt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv48(i1: bv48, i2: bv48) returns (bv48) {if $sgt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv40(i1: bv40, i2: bv40) returns (bv40) {if $sgt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv32(i1: bv32, i2: bv32) returns (bv32) {if $sgt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv24(i1: bv24, i2: bv24) returns (bv24) {if $sgt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv16(i1: bv16, i2: bv16) returns (bv16) {if $sgt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv8(i1: bv8, i2: bv8) returns (bv8) {if $sgt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ult.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ult.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ult.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ult.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ult.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ult.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ult.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ult.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ult.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ult.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ult.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ugt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ugt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ugt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ugt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ugt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ugt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ugt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ugt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ugt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ugt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ugt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then i1 else i2}
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) returns (bv128);
function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) returns (bv96);
function {:bvbuiltin "bvnot"} $not.bv88(i: bv88) returns (bv88);
function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) returns (bv64);
function {:bvbuiltin "bvnot"} $not.bv56(i: bv56) returns (bv56);
function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) returns (bv48);
function {:bvbuiltin "bvnot"} $not.bv40(i: bv40) returns (bv40);
function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) returns (bv32);
function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) returns (bv24);
function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) returns (bv16);
function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) returns (bv8);
function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) returns (bv1);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 == i2} function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 == i2} function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 == i2} function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 == i2} function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 == i2} function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 == i2} function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 == i2} function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 == i2} function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 == i2} function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 == i2} function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 == i2} function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 == i2} function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 != i2} function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 != i2} function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 != i2} function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 != i2} function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 != i2} function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 != i2} function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 != i2} function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 != i2} function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 != i2} function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 != i2} function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 != i2} function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 != i2} function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ule.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ule.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ule.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ule.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ule.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ule.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ule.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ule.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ule.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ule.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ule.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ule.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ult.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ult.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ult.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ult.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ult.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ult.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ult.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ult.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ult.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ult.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ult.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $uge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $uge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $uge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $uge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $uge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $uge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $uge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $uge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $uge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $uge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $uge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $uge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ugt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ugt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ugt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ugt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ugt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ugt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ugt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ugt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ugt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ugt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ugt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sle.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sle.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sle.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sle.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sle.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sle.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sle.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sle.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sle.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sle.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sle.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sle.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $slt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $slt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $slt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $slt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $slt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $slt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $slt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $slt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $slt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $slt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $slt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sgt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sgt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sgt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sgt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sgt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sgt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sgt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sgt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sgt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sgt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sgt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:inline} $trunc.bv128.bv96(i: bv128) returns (bv96) {i[96:0]}
function {:inline} $trunc.bv128.bv88(i: bv128) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv128.bv64(i: bv128) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv128.bv56(i: bv128) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv128.bv48(i: bv128) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv128.bv40(i: bv128) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv128.bv32(i: bv128) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv128.bv24(i: bv128) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv128.bv16(i: bv128) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv128.bv8(i: bv128) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv128.bv1(i: bv128) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv96.bv88(i: bv96) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv96.bv64(i: bv96) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv96.bv56(i: bv96) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv96.bv48(i: bv96) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv96.bv40(i: bv96) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv96.bv32(i: bv96) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv96.bv24(i: bv96) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv96.bv16(i: bv96) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv96.bv8(i: bv96) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv96.bv1(i: bv96) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv88.bv64(i: bv88) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv88.bv56(i: bv88) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv88.bv48(i: bv88) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv88.bv40(i: bv88) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv88.bv32(i: bv88) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv88.bv24(i: bv88) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv88.bv16(i: bv88) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv88.bv8(i: bv88) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv88.bv1(i: bv88) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv64.bv56(i: bv64) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv64.bv48(i: bv64) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv64.bv40(i: bv64) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv64.bv32(i: bv64) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv64.bv24(i: bv64) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv64.bv16(i: bv64) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv64.bv8(i: bv64) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv64.bv1(i: bv64) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv56.bv48(i: bv56) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv56.bv40(i: bv56) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv56.bv32(i: bv56) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv56.bv24(i: bv56) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv56.bv16(i: bv56) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv56.bv8(i: bv56) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv56.bv1(i: bv56) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv48.bv32(i: bv48) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv48.bv24(i: bv48) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv48.bv16(i: bv48) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv48.bv8(i: bv48) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv48.bv1(i: bv48) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv40.bv32(i: bv40) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv40.bv24(i: bv40) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv40.bv16(i: bv40) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv40.bv8(i: bv40) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv40.bv1(i: bv40) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv32.bv24(i: bv32) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv32.bv16(i: bv32) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv32.bv8(i: bv32) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv32.bv1(i: bv32) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv24.bv16(i: bv24) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv24.bv8(i: bv24) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv24.bv1(i: bv24) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv16.bv8(i: bv16) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv16.bv1(i: bv16) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv8.bv1(i: bv8) returns (bv1) {i[1:0]}
function {:inline} $zext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 1bv8}
function {:inline} $zext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 1bv16}
function {:inline} $zext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 1bv24}
function {:inline} $zext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 1bv32}
function {:inline} $zext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1bv40}
function {:inline} $zext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 1bv48}
function {:inline} $zext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 1bv56}
function {:inline} $zext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 1bv64}
function {:inline} $zext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 1bv88}
function {:inline} $zext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 1bv96}
function {:inline} $zext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 1bv128}
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $sext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 255bv8}
function {:inline} $sext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 65535bv16}
function {:inline} $sext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 16777215bv24}
function {:inline} $sext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 4294967295bv32}
function {:inline} $sext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1099511627775bv40}
function {:inline} $sext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 281474976710655bv48}
function {:inline} $sext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 72057594037927935bv56}
function {:inline} $sext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 18446744073709551615bv64}
function {:inline} $sext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88}
function {:inline} $sext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96}
function {:inline} $sext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128}
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) {i1 + i2}
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) {i1 + i2}
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) {i1 + i2}
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) {i1 + i2}
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) {i1 + i2}
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) {i1 + i2}
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) {i1 + i2}
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) {i1 + i2}
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) {i1 + i2}
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) {i1 + i2}
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) {i1 + i2}
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) {i1 + i2}
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) {i1 - i2}
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) {i1 - i2}
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) {i1 - i2}
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) {i1 - i2}
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) {i1 - i2}
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) {i1 - i2}
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) {i1 - i2}
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) {i1 - i2}
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) {i1 - i2}
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) {i1 - i2}
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) {i1 - i2}
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) {i1 - i2}
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) {i1 * i2}
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) {i1 * i2}
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) {i1 * i2}
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) {i1 * i2}
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) {i1 * i2}
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) {i1 * i2}
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) {i1 * i2}
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) {i1 * i2}
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) {i1 * i2}
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) {i1 * i2}
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) {i1 * i2}
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) {i1 * i2}
function {:builtin "div"} $div(i1: int, i2: int) returns (int);
function {:builtin "mod"} $mod(i1: int, i2: int) returns (int);
function {:builtin "rem"} $rem(i1: int, i2: int) returns (int);
function {:inline} $min(i1: int, i2: int) returns (int) {if i1 < i2 then i1 else i2}
function {:inline} $max(i1: int, i2: int) returns (int) {if i1 > i2 then i1 else i2}
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $not.i128(i: i128) returns (i128);
function $not.i96(i: i96) returns (i96);
function $not.i88(i: i88) returns (i88);
function $not.i64(i: i64) returns (i64);
function $not.i56(i: i56) returns (i56);
function $not.i48(i: i48) returns (i48);
function $not.i40(i: i40) returns (i40);
function $not.i32(i: i32) returns (i32);
function $not.i24(i: i24) returns (i24);
function $not.i16(i: i16) returns (i16);
function $not.i8(i: i8) returns (i8);
function $not.i1(i: i1) returns (i1);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) {i1 == i2} function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) {i1 == i2} function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) {i1 == i2} function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) {i1 == i2} function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) {i1 == i2} function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) {i1 == i2} function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) {i1 == i2} function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) {i1 == i2} function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) {i1 == i2} function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) {i1 == i2} function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) {i1 == i2} function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) {i1 == i2} function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) {i1 != i2} function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) {i1 != i2} function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) {i1 != i2} function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) {i1 != i2} function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) {i1 != i2} function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) {i1 != i2} function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) {i1 != i2} function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) {i1 != i2} function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) {i1 != i2} function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) {i1 != i2} function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) {i1 != i2} function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) {i1 != i2} function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
axiom $and.i1(0,0) == 0;
axiom $and.i1(0,1) == 0;
axiom $and.i1(1,0) == 0;
axiom $and.i1(1,1) == 1;
axiom $or.i1(0,0) == 0;
axiom $or.i1(0,1) == 1;
axiom $or.i1(1,0) == 1;
axiom $or.i1(1,1) == 1;
axiom $xor.i1(0,0) == 0;
axiom $xor.i1(0,1) == 1;
axiom $xor.i1(1,0) == 1;
axiom $xor.i1(1,1) == 0;
axiom($and.i32(32, 16) == 0);
function {:inline} $trunc.i128.i96(i: i128) returns (i96) {i}
function {:inline} $trunc.i128.i88(i: i128) returns (i88) {i}
function {:inline} $trunc.i128.i64(i: i128) returns (i64) {i}
function {:inline} $trunc.i128.i56(i: i128) returns (i56) {i}
function {:inline} $trunc.i128.i48(i: i128) returns (i48) {i}
function {:inline} $trunc.i128.i40(i: i128) returns (i40) {i}
function {:inline} $trunc.i128.i32(i: i128) returns (i32) {i}
function {:inline} $trunc.i128.i24(i: i128) returns (i24) {i}
function {:inline} $trunc.i128.i16(i: i128) returns (i16) {i}
function {:inline} $trunc.i128.i8(i: i128) returns (i8) {i}
function {:inline} $trunc.i128.i1(i: i128) returns (i1) {i}
function {:inline} $trunc.i96.i64(i: i96) returns (i64) {i}
function {:inline} $trunc.i96.i88(i: i96) returns (i88) {i}
function {:inline} $trunc.i96.i56(i: i96) returns (i56) {i}
function {:inline} $trunc.i96.i48(i: i96) returns (i48) {i}
function {:inline} $trunc.i96.i40(i: i96) returns (i40) {i}
function {:inline} $trunc.i96.i32(i: i96) returns (i32) {i}
function {:inline} $trunc.i96.i24(i: i96) returns (i24) {i}
function {:inline} $trunc.i96.i16(i: i96) returns (i16) {i}
function {:inline} $trunc.i96.i8(i: i96) returns (i8) {i}
function {:inline} $trunc.i96.i1(i: i96) returns (i1) {i}
function {:inline} $trunc.i88.i64(i: i88) returns (i64) {i}
function {:inline} $trunc.i88.i88(i: i88) returns (i88) {i}
function {:inline} $trunc.i88.i56(i: i88) returns (i56) {i}
function {:inline} $trunc.i88.i48(i: i88) returns (i48) {i}
function {:inline} $trunc.i88.i40(i: i88) returns (i40) {i}
function {:inline} $trunc.i88.i32(i: i88) returns (i32) {i}
function {:inline} $trunc.i88.i24(i: i88) returns (i24) {i}
function {:inline} $trunc.i88.i16(i: i88) returns (i16) {i}
function {:inline} $trunc.i88.i8(i: i88) returns (i8) {i}
function {:inline} $trunc.i88.i1(i: i88) returns (i1) {i}
function {:inline} $trunc.i64.i56(i: i64) returns (i56) {i}
function {:inline} $trunc.i64.i48(i: i64) returns (i48) {i}
function {:inline} $trunc.i64.i40(i: i64) returns (i40) {i}
function {:inline} $trunc.i64.i32(i: i64) returns (i32) {i}
function {:inline} $trunc.i64.i24(i: i64) returns (i24) {i}
function {:inline} $trunc.i64.i16(i: i64) returns (i16) {i}
function {:inline} $trunc.i64.i8(i: i64) returns (i8) {i}
function {:inline} $trunc.i64.i1(i: i64) returns (i1) {i}
function {:inline} $trunc.i56.i48(i: i56) returns (i48) {i}
function {:inline} $trunc.i56.i40(i: i56) returns (i40) {i}
function {:inline} $trunc.i56.i32(i: i56) returns (i32) {i}
function {:inline} $trunc.i56.i24(i: i56) returns (i24) {i}
function {:inline} $trunc.i56.i16(i: i56) returns (i16) {i}
function {:inline} $trunc.i56.i8(i: i56) returns (i8) {i}
function {:inline} $trunc.i56.i1(i: i56) returns (i1) {i}
function {:inline} $trunc.i48.i40(i: i48) returns (i40) {i}
function {:inline} $trunc.i48.i32(i: i48) returns (i32) {i}
function {:inline} $trunc.i48.i24(i: i48) returns (i24) {i}
function {:inline} $trunc.i48.i16(i: i48) returns (i16) {i}
function {:inline} $trunc.i48.i8(i: i48) returns (i8) {i}
function {:inline} $trunc.i48.i1(i: i48) returns (i1) {i}
function {:inline} $trunc.i40.i32(i: i40) returns (i32) {i}
function {:inline} $trunc.i40.i24(i: i40) returns (i24) {i}
function {:inline} $trunc.i40.i16(i: i40) returns (i16) {i}
function {:inline} $trunc.i40.i8(i: i40) returns (i8) {i}
function {:inline} $trunc.i40.i1(i: i40) returns (i1) {i}
function {:inline} $trunc.i32.i24(i: i32) returns (i24) {i}
function {:inline} $trunc.i32.i16(i: i32) returns (i16) {i}
function {:inline} $trunc.i32.i8(i: i32) returns (i8) {i}
function {:inline} $trunc.i32.i1(i: i32) returns (i1) {i}
function {:inline} $trunc.i24.i16(i: i24) returns (i16) {i}
function {:inline} $trunc.i24.i8(i: i24) returns (i8) {i}
function {:inline} $trunc.i24.i1(i: i24) returns (i1) {i}
function {:inline} $trunc.i16.i8(i: i16) returns (i8) {i}
function {:inline} $trunc.i16.i1(i: i16) returns (i1) {i}
function {:inline} $trunc.i8.i1(i: i8) returns (i1) {i}
function {:inline} $zext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $zext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $zext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $zext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $zext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $zext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $zext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $zext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $zext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $zext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $zext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $zext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $zext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $zext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $zext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $zext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $zext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $zext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $zext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $zext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $zext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $zext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $zext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $zext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $zext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $zext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $zext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $zext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $zext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $zext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $zext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $zext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $zext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $zext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $zext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $zext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $zext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $zext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $zext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $zext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $zext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $zext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $zext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $zext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $zext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $zext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $zext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $zext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $zext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $zext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $zext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $zext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $zext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $zext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $zext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $zext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $zext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $zext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $zext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $zext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $zext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $zext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $zext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $zext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $zext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $zext.i96.i128(i: i96) returns (i128) {i}
function {:inline} $sext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $sext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $sext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $sext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $sext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $sext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $sext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $sext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $sext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $sext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $sext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $sext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $sext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $sext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $sext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $sext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $sext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $sext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $sext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $sext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $sext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $sext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $sext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $sext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $sext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $sext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $sext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $sext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $sext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $sext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $sext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $sext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $sext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $sext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $sext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $sext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $sext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $sext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $sext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $sext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $sext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $sext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $sext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $sext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $sext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $sext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $sext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $sext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $sext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $sext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $sext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $sext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $sext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $sext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $sext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $sext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $sext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $sext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $sext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $sext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $sext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $sext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $sext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $sext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $sext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $sext.i96.i128(i: i96) returns (i128) {i}
function $fp(ipart:int, fpart:int, epart:int) returns (float);
function $fadd.float(f1:float, f2:float) returns (float);
function $fsub.float(f1:float, f2:float) returns (float);
function $fmul.float(f1:float, f2:float) returns (float);
function $fdiv.float(f1:float, f2:float) returns (float);
function $frem.float(f1:float, f2:float) returns (float);
function $ffalse.float(f1:float, f2:float) returns (i1);
function $ftrue.float(f1:float, f2:float) returns (i1);
function {:inline} $foeq.float(f1:float, f2:float) returns (i1) { if $foeq.bool(f1,f2) then 1 else 0 }
function $foeq.bool(f1:float, f2:float) returns (bool);
function $foge.float(f1:float, f2:float) returns (i1);
function $fogt.float(f1:float, f2:float) returns (i1);
function $fole.float(f1:float, f2:float) returns (i1);
function $folt.float(f1:float, f2:float) returns (i1);
function $fone.float(f1:float, f2:float) returns (i1);
function $ford.float(f1:float, f2:float) returns (i1);
function $fueq.float(f1:float, f2:float) returns (i1);
function $fuge.float(f1:float, f2:float) returns (i1);
function $fugt.float(f1:float, f2:float) returns (i1);
function $fule.float(f1:float, f2:float) returns (i1);
function $fult.float(f1:float, f2:float) returns (i1);
function $fune.float(f1:float, f2:float) returns (i1);
function $funo.float(f1:float, f2:float) returns (i1);
function $fp2si.float.i128(f:float) returns (i128);
function $fp2ui.float.i128(f:float) returns (i128);
function $si2fp.i128.float(i:i128) returns (float);
function $ui2fp.i128.float(i:i128) returns (float);
function $fp2si.float.i96(f:float) returns (i96);
function $fp2ui.float.i96(f:float) returns (i96);
function $si2fp.i96.float(i:i96) returns (float);
function $ui2fp.i96.float(i:i96) returns (float);
function $fp2si.float.i88(f:float) returns (i88);
function $fp2ui.float.i88(f:float) returns (i88);
function $si2fp.i88.float(i:i88) returns (float);
function $ui2fp.i88.float(i:i88) returns (float);
function $fp2si.float.i64(f:float) returns (i64);
function $fp2ui.float.i64(f:float) returns (i64);
function $si2fp.i64.float(i:i64) returns (float);
function $ui2fp.i64.float(i:i64) returns (float);
function $fp2si.float.i56(f:float) returns (i56);
function $fp2ui.float.i56(f:float) returns (i56);
function $si2fp.i56.float(i:i56) returns (float);
function $ui2fp.i56.float(i:i56) returns (float);
function $fp2si.float.i48(f:float) returns (i48);
function $fp2ui.float.i48(f:float) returns (i48);
function $si2fp.i48.float(i:i48) returns (float);
function $ui2fp.i48.float(i:i48) returns (float);
function $fp2si.float.i40(f:float) returns (i40);
function $fp2ui.float.i40(f:float) returns (i40);
function $si2fp.i40.float(i:i40) returns (float);
function $ui2fp.i40.float(i:i40) returns (float);
function $fp2si.float.i32(f:float) returns (i32);
function $fp2ui.float.i32(f:float) returns (i32);
function $si2fp.i32.float(i:i32) returns (float);
function $ui2fp.i32.float(i:i32) returns (float);
function $fp2si.float.i24(f:float) returns (i24);
function $fp2ui.float.i24(f:float) returns (i24);
function $si2fp.i24.float(i:i24) returns (float);
function $ui2fp.i24.float(i:i24) returns (float);
function $fp2si.float.i16(f:float) returns (i16);
function $fp2ui.float.i16(f:float) returns (i16);
function $si2fp.i16.float(i:i16) returns (float);
function $ui2fp.i16.float(i:i16) returns (float);
function $fp2si.float.i8(f:float) returns (i8);
function $fp2ui.float.i8(f:float) returns (i8);
function $si2fp.i8.float(i:i8) returns (float);
function $ui2fp.i8.float(i:i8) returns (float);
function $fptrunc.float.float(f:float) returns (float);
function $fpext.float.float(f:float) returns (float);
function $fp2si.float.bv128(f:float) returns (bv128);
function $fp2ui.float.bv128(f:float) returns (bv128);
function $si2fp.bv128.float(i:bv128) returns (float);
function $ui2fp.bv128.float(i:bv128) returns (float);
function $fp2si.float.bv96(f:float) returns (bv96);
function $fp2ui.float.bv96(f:float) returns (bv96);
function $si2fp.bv96.float(i:bv96) returns (float);
function $ui2fp.bv96.float(i:bv96) returns (float);
function $fp2si.float.bv88(f:float) returns (bv88);
function $fp2ui.float.bv88(f:float) returns (bv88);
function $si2fp.bv88.float(i:bv88) returns (float);
function $ui2fp.bv88.float(i:bv88) returns (float);
function $fp2si.float.bv64(f:float) returns (bv64);
function $fp2ui.float.bv64(f:float) returns (bv64);
function $si2fp.bv64.float(i:bv64) returns (float);
function $ui2fp.bv64.float(i:bv64) returns (float);
function $fp2si.float.bv56(f:float) returns (bv56);
function $fp2ui.float.bv56(f:float) returns (bv56);
function $si2fp.bv56.float(i:bv56) returns (float);
function $ui2fp.bv56.float(i:bv56) returns (float);
function $fp2si.float.bv48(f:float) returns (bv48);
function $fp2ui.float.bv48(f:float) returns (bv48);
function $si2fp.bv48.float(i:bv48) returns (float);
function $ui2fp.bv48.float(i:bv48) returns (float);
function $fp2si.float.bv40(f:float) returns (bv40);
function $fp2ui.float.bv40(f:float) returns (bv40);
function $si2fp.bv40.float(i:bv40) returns (float);
function $ui2fp.bv40.float(i:bv40) returns (float);
function $fp2si.float.bv32(f:float) returns (bv32);
function $fp2ui.float.bv32(f:float) returns (bv32);
function $si2fp.bv32.float(i:bv32) returns (float);
function $ui2fp.bv32.float(i:bv32) returns (float);
function $fp2si.float.bv24(f:float) returns (bv24);
function $fp2ui.float.bv24(f:float) returns (bv24);
function $si2fp.bv24.float(i:bv24) returns (float);
function $ui2fp.bv24.float(i:bv24) returns (float);
function $fp2si.float.bv16(f:float) returns (bv16);
function $fp2ui.float.bv16(f:float) returns (bv16);
function $si2fp.bv16.float(i:bv16) returns (float);
function $ui2fp.bv16.float(i:bv16) returns (float);
function $fp2si.float.bv8(f:float) returns (bv8);
function $fp2ui.float.bv8(f:float) returns (bv8);
function $si2fp.bv8.float(i:bv8) returns (float);
function $ui2fp.bv8.float(i:bv8) returns (float);
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;
function {:inline} $isExternal(p: ref) returns (bool) {$slt.ref.bool(p,$EXTERNS_BOTTOM)}
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) { M[p] }
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) { M[p] }
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) { M[p] }
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) { M[p] }
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) { M[p] }
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) { M[p] }
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) { M[p] }
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) { M[p] }
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) { M[p] }
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) { M[p] }
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128){ $load.bytes.bv64(M, $add.ref(p, $8.ref)) ++ $load.bytes.bv64(M, p) }
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96){ $load.bytes.bv64(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88){ $load.bytes.bv56(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64){ $load.bytes.bv32(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56){ $load.bytes.bv24(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48){ $load.bytes.bv16(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40){ M[$add.ref(p, $4.ref)] ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32){ M[$add.ref(p, $3.ref)] ++ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24){ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16){ M[$add.ref(p, $1.ref)] ++ M[p] }
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, v: i128) returns ([ref] i128) { M[p := v] }
function {:inline} $store.i96(M: [ref] i96, p: ref, v: i96) returns ([ref] i96) { M[p := v] }
function {:inline} $store.i88(M: [ref] i88, p: ref, v: i88) returns ([ref] i88) { M[p := v] }
function {:inline} $store.i64(M: [ref] i64, p: ref, v: i64) returns ([ref] i64) { M[p := v] }
function {:inline} $store.i56(M: [ref] i56, p: ref, v: i56) returns ([ref] i56) { M[p := v] }
function {:inline} $store.i48(M: [ref] i48, p: ref, v: i48) returns ([ref] i48) { M[p := v] }
function {:inline} $store.i40(M: [ref] i40, p: ref, v: i40) returns ([ref] i40) { M[p := v] }
function {:inline} $store.i32(M: [ref] i32, p: ref, v: i32) returns ([ref] i32) { M[p := v] }
function {:inline} $store.i24(M: [ref] i24, p: ref, v: i24) returns ([ref] i24) { M[p := v] }
function {:inline} $store.i16(M: [ref] i16, p: ref, v: i16) returns ([ref] i16) { M[p := v] }
function {:inline} $store.i8(M: [ref] i8, p: ref, v: i8) returns ([ref] i8) { M[p := v] }
function {:inline} $store.bv128(M: [ref] bv128, p: ref, v: bv128) returns ([ref] bv128) { M[p := v] }
function {:inline} $store.bv96(M: [ref] bv96, p: ref, v: bv96) returns ([ref] bv96) { M[p := v] }
function {:inline} $store.bv88(M: [ref] bv88, p: ref, v: bv88) returns ([ref] bv88) { M[p := v] }
function {:inline} $store.bv64(M: [ref] bv64, p: ref, v: bv64) returns ([ref] bv64) { M[p := v] }
function {:inline} $store.bv56(M: [ref] bv56, p: ref, v: bv56) returns ([ref] bv56) { M[p := v] }
function {:inline} $store.bv48(M: [ref] bv48, p: ref, v: bv48) returns ([ref] bv48) { M[p := v] }
function {:inline} $store.bv40(M: [ref] bv40, p: ref, v: bv40) returns ([ref] bv40) { M[p := v] }
function {:inline} $store.bv32(M: [ref] bv32, p: ref, v: bv32) returns ([ref] bv32) { M[p := v] }
function {:inline} $store.bv24(M: [ref] bv24, p: ref, v: bv24) returns ([ref] bv24) { M[p := v] }
function {:inline} $store.bv16(M: [ref] bv16, p: ref, v: bv16) returns ([ref] bv16) { M[p := v] }
function {:inline} $store.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) { M[p := v] }
function {:inline} $store.bytes.bv128(M:[ref]bv8, p:ref, v:bv128) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]][$add.ref(p, $11.ref) := v[104:96]][$add.ref(p, $12.ref) := v[112:104]][$add.ref(p, $13.ref) := v[120:112]][$add.ref(p, $14.ref) := v[128:120]]}
function {:inline} $store.bytes.bv96(M:[ref]bv8, p:ref, v:bv96) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]]}
function {:inline} $store.bytes.bv88(M:[ref]bv8, p:ref, v:bv88) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]]}
function {:inline} $store.bytes.bv64(M:[ref]bv8, p:ref, v:bv64) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]]}
function {:inline} $store.bytes.bv56(M:[ref]bv8, p:ref, v:bv56) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]]}
function {:inline} $store.bytes.bv48(M:[ref]bv8, p:ref, v:bv48) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]]}
function {:inline} $store.bytes.bv40(M:[ref]bv8, p:ref, v:bv40) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]]}
function {:inline} $store.bytes.bv32(M:[ref]bv8, p:ref, v:bv32) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]]}
function {:inline} $store.bytes.bv24(M:[ref]bv8, p:ref, v:bv24) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]]}
function {:inline} $store.bytes.bv16(M:[ref]bv8, p:ref, v:bv16) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]]}
function {:inline} $store.bytes.bv8(M:[ref]bv8, p:ref, v:bv8) returns ([ref]bv8) {M[p := v]}
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, v: ref) returns ([ref] ref) { M[p := v] }
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, v: float) returns ([ref] float) { M[p := v] }
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
procedure  boogie_si_record_bool(i: bool);
procedure  boogie_si_record_i1(i: i1);
procedure  boogie_si_record_i8(i: i8);
procedure  boogie_si_record_i16(i: i16);
procedure  boogie_si_record_i24(i: i24);
procedure  boogie_si_record_i32(i: i32);
procedure  boogie_si_record_i40(i: i40);
procedure  boogie_si_record_i48(i: i48);
procedure  boogie_si_record_i56(i: i56);
procedure  boogie_si_record_i64(i: i64);
procedure  boogie_si_record_i88(i: i88);
procedure  boogie_si_record_i96(i: i96);
procedure  boogie_si_record_i128(i: i128);
procedure  boogie_si_record_bv1(i: bv1);
procedure  boogie_si_record_bv8(i: bv8);
procedure  boogie_si_record_bv16(i: bv16);
procedure  boogie_si_record_bv24(i: bv24);
procedure  boogie_si_record_bv32(i: bv32);
procedure  boogie_si_record_bv40(i: bv40);
procedure  boogie_si_record_bv48(i: bv48);
procedure  boogie_si_record_bv56(i: bv56);
procedure  boogie_si_record_bv64(i: bv64);
procedure  boogie_si_record_bv88(i: bv88);
procedure  boogie_si_record_bv96(i: bv96);
procedure  boogie_si_record_bv128(i: bv128);
procedure  boogie_si_record_ref(i: ref);
procedure  boogie_si_record_float(i: float);
var $exn: bool;
var $exnv: int;
function $extractvalue(p: int, i: int) returns (int);

procedure  $alloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 138811));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 139843));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1782, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1787, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 140875));
procedure  llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 141907));
procedure  __SMACK_static_init()
{
$bb0:
  $M.5 := 0;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
  $M.6 := 1;
  call {:cexpr "ldv_mutex"} boogie_si_record_i32(1);
  $M.0 := $store.ref($M.0, llvm.used, __param_record_size);
  $M.0 := $store.ref($M.0, $add.ref(llvm.used, 8), __mod_record_sizetype44);
  $M.0 := $store.ref($M.0, $add.ref(llvm.used, 16), __mod_record_size46);
  $M.0 := $store.ref($M.0, $add.ref(llvm.used, 24), __param_mtddev);
  $M.0 := $store.ref($M.0, $add.ref(llvm.used, 32), __mod_mtddevtype49);
  $M.0 := $store.ref($M.0, $add.ref(llvm.used, 40), __mod_mtddev51);
  $M.0 := $store.ref($M.0, $add.ref(llvm.used, 48), __param_dump_oops);
  $M.0 := $store.ref($M.0, $add.ref(llvm.used, 56), __mod_dump_oopstype54);
  $M.0 := $store.ref($M.0, $add.ref(llvm.used, 64), __mod_dump_oops56);
  $M.0 := $store.ref($M.0, $add.ref(llvm.used, 72), __mod_license467);
  $M.0 := $store.ref($M.0, $add.ref(llvm.used, 80), __mod_author468);
  $M.0 := $store.ref($M.0, $add.ref(llvm.used, 88), __mod_description469);
  $M.0 := $store.ref($M.0, __param_record_size, __param_str_record_size);
  $M.0 := $store.ref($M.0, $add.ref(__param_record_size, 8), param_ops_ulong);
  $M.0 := $store.i16($M.0, $add.ref(__param_record_size, 16), 256);
  $M.0 := $store.i16($M.0, $add.ref(__param_record_size, 18), 0);
  $M.0 := $store.ref($M.0, $add.ref(__param_record_size, 24), record_size);
  $M.0 := $store.i8($M.0, __mod_record_sizetype44, 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 1), 97);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 2), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 3), 109);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 4), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 5), 121);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 6), 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 7), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 8), 61);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 9), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 10), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 11), 99);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 12), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 13), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 14), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 15), 95);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 16), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 17), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 18), 122);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 19), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 20), 58);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 21), 117);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 22), 108);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 23), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 24), 110);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 25), 103);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_sizetype44, 26), 0);
  $M.0 := $store.i8($M.0, __mod_record_size46, 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 1), 97);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 2), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 3), 109);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 4), 61);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 5), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 6), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 7), 99);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 8), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 9), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 10), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 11), 95);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 12), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 13), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 14), 122);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 15), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 16), 58);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 17), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 18), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 19), 99);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 20), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 21), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 22), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 23), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 24), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 25), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 26), 122);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 27), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 28), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 29), 102);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 30), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 31), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 32), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 33), 77);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 34), 84);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 35), 68);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 36), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 37), 79);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 38), 79);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 39), 80);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 40), 83);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 41), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 42), 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 43), 97);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 44), 103);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 45), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 46), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 47), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 48), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 49), 110);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 50), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 51), 98);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 52), 121);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 53), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 54), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 55), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 56), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 57), 40);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 58), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 59), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 60), 102);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 61), 97);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 62), 117);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 63), 108);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 64), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 65), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 66), 52);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 67), 48);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 68), 57);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 69), 54);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 70), 41);
  $M.0 := $store.i8($M.0, $add.ref(__mod_record_size46, 71), 0);
  $M.0 := $store.ref($M.0, __param_mtddev, __param_str_mtddev);
  $M.0 := $store.ref($M.0, $add.ref(__param_mtddev, 8), param_ops_string);
  $M.0 := $store.i16($M.0, $add.ref(__param_mtddev, 16), 256);
  $M.0 := $store.i16($M.0, $add.ref(__param_mtddev, 18), 0);
  $M.0 := $store.ref($M.0, $add.ref(__param_mtddev, 24), __param_string_mtddev);
  $M.0 := $store.i8($M.0, __mod_mtddevtype49, 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 1), 97);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 2), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 3), 109);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 4), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 5), 121);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 6), 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 7), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 8), 61);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 9), 109);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 10), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 11), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 12), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 13), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 14), 118);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 15), 58);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 16), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 17), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 18), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 19), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 20), 110);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 21), 103);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddevtype49, 22), 0);
  $M.0 := $store.i8($M.0, __mod_mtddev51, 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 1), 97);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 2), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 3), 109);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 4), 61);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 5), 109);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 6), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 7), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 8), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 9), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 10), 118);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 11), 58);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 12), 110);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 13), 97);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 14), 109);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 15), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 16), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 17), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 18), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 19), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 20), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 21), 110);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 22), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 23), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 24), 120);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 25), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 26), 110);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 27), 117);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 28), 109);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 29), 98);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 30), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 31), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 32), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 33), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 34), 102);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 35), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 36), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 37), 104);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 38), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 39), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 40), 77);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 41), 84);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 42), 68);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 43), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 44), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 45), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 46), 118);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 47), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 48), 99);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 49), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 50), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 51), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 52), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 53), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 54), 117);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 55), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 56), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_mtddev51, 57), 0);
  $M.0 := $store.ref($M.0, __param_dump_oops, __param_str_dump_oops);
  $M.0 := $store.ref($M.0, $add.ref(__param_dump_oops, 8), param_ops_int);
  $M.0 := $store.i16($M.0, $add.ref(__param_dump_oops, 16), 384);
  $M.0 := $store.i16($M.0, $add.ref(__param_dump_oops, 18), 0);
  $M.0 := $store.ref($M.0, $add.ref(__param_dump_oops, 24), dump_oops);
  $M.0 := $store.i8($M.0, __mod_dump_oopstype54, 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 1), 97);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 2), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 3), 109);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 4), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 5), 121);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 6), 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 7), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 8), 61);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 9), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 10), 117);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 11), 109);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 12), 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 13), 95);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 14), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 15), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 16), 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 17), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 18), 58);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 19), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 20), 110);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 21), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oopstype54, 22), 0);
  $M.0 := $store.i8($M.0, __mod_dump_oops56, 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 1), 97);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 2), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 3), 109);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 4), 61);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 5), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 6), 117);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 7), 109);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 8), 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 9), 95);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 10), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 11), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 12), 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 13), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 14), 58);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 15), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 16), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 17), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 18), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 19), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 20), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 21), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 22), 49);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 23), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 24), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 25), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 26), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 27), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 28), 117);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 29), 109);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 30), 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 31), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 32), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 33), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 34), 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 35), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 36), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 37), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 38), 44);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 39), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 40), 48);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 41), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 42), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 43), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 44), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 45), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 46), 110);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 47), 108);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 48), 121);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 49), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 50), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 51), 117);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 52), 109);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 53), 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 54), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 55), 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 56), 97);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 57), 110);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 58), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 59), 99);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 60), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 61), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 62), 40);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 63), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 64), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 65), 102);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 66), 97);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 67), 117);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 68), 108);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 69), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 70), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 71), 49);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 72), 41);
  $M.0 := $store.i8($M.0, $add.ref(__mod_dump_oops56, 73), 0);
  $M.0 := $store.i8($M.0, __mod_license467, 108);
  $M.0 := $store.i8($M.0, $add.ref(__mod_license467, 1), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_license467, 2), 99);
  $M.0 := $store.i8($M.0, $add.ref(__mod_license467, 3), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_license467, 4), 110);
  $M.0 := $store.i8($M.0, $add.ref(__mod_license467, 5), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_license467, 6), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_license467, 7), 61);
  $M.0 := $store.i8($M.0, $add.ref(__mod_license467, 8), 71);
  $M.0 := $store.i8($M.0, $add.ref(__mod_license467, 9), 80);
  $M.0 := $store.i8($M.0, $add.ref(__mod_license467, 10), 76);
  $M.0 := $store.i8($M.0, $add.ref(__mod_license467, 11), 0);
  $M.0 := $store.i8($M.0, __mod_author468, 97);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 1), 117);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 2), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 3), 104);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 4), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 5), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 6), 61);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 7), 82);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 8), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 9), 99);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 10), 104);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 11), 97);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 12), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 13), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 14), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 15), 80);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 16), 117);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 17), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 18), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 19), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 20), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 21), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 22), 60);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 23), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 24), 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 25), 117);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 26), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 27), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 28), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 29), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 30), 64);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 31), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 32), 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 33), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 34), 110);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 35), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 36), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 37), 104);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 38), 97);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 39), 110);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 40), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 41), 46);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 42), 99);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 43), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 44), 109);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 45), 62);
  $M.0 := $store.i8($M.0, $add.ref(__mod_author468, 46), 0);
  $M.0 := $store.i8($M.0, __mod_description469, 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 1), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 2), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 3), 99);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 4), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 5), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 6), 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 7), 116);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 8), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 9), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 10), 110);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 11), 61);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 12), 77);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 13), 84);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 14), 68);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 15), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 16), 79);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 17), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 18), 112);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 19), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 20), 47);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 21), 80);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 22), 97);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 23), 110);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 24), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 25), 99);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 26), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 27), 99);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 28), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 29), 110);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 30), 115);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 31), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 32), 108);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 33), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 34), 32);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 35), 108);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 36), 111);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 37), 103);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 38), 103);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 39), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 40), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 41), 47);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 42), 100);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 43), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 44), 105);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 45), 118);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 46), 101);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 47), 114);
  $M.0 := $store.i8($M.0, $add.ref(__mod_description469, 48), 0);
  $M.0 := $store.i8($M.0, __param_str_dump_oops, 100);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_dump_oops, 1), 117);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_dump_oops, 2), 109);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_dump_oops, 3), 112);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_dump_oops, 4), 95);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_dump_oops, 5), 111);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_dump_oops, 6), 111);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_dump_oops, 7), 112);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_dump_oops, 8), 115);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_dump_oops, 9), 0);
  $M.0 := $store.i32($M.0, dump_oops, 1);
  call {:cexpr "dump_oops"} boogie_si_record_i32(1);
  $M.0 := $store.i8($M.0, __param_str_mtddev, 109);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_mtddev, 1), 116);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_mtddev, 2), 100);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_mtddev, 3), 100);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_mtddev, 4), 101);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_mtddev, 5), 118);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_mtddev, 6), 0);
  $M.0 := $store.i32($M.0, __param_string_mtddev, 80);
  $M.0 := $store.ref($M.0, $add.ref(__param_string_mtddev, 8), mtddev);
  $M.0 := $store.i8($M.0, mtddev, 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 1), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 2), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 3), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 4), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 5), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 6), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 7), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 8), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 9), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 10), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 11), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 12), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 13), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 14), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 15), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 16), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 17), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 18), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 19), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 20), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 21), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 22), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 23), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 24), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 25), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 26), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 27), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 28), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 29), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 30), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 31), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 32), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 33), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 34), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 35), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 36), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 37), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 38), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 39), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 40), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 41), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 42), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 43), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 44), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 45), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 46), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 47), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 48), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 49), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 50), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 51), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 52), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 53), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 54), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 55), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 56), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 57), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 58), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 59), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 60), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 61), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 62), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 63), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 64), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 65), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 66), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 67), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 68), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 69), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 70), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 71), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 72), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 73), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 74), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 75), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 76), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 77), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 78), 0);
  $M.0 := $store.i8($M.0, $add.ref(mtddev, 79), 0);
  $M.0 := $store.i8($M.0, __param_str_record_size, 114);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_record_size, 1), 101);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_record_size, 2), 99);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_record_size, 3), 111);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_record_size, 4), 114);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_record_size, 5), 100);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_record_size, 6), 95);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_record_size, 7), 115);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_record_size, 8), 105);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_record_size, 9), 122);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_record_size, 10), 101);
  $M.0 := $store.i8($M.0, $add.ref(__param_str_record_size, 11), 0);
  $M.0 := $store.i64($M.0, record_size, 4096);
  call {:cexpr "record_size"} boogie_si_record_i64(4096);
  $M.0 := $store.ref($M.0, mtdoops_notifier, mtdoops_notify_add);
  $M.0 := $store.ref($M.0, $add.ref(mtdoops_notifier, 8), mtdoops_notify_remove);
  $M.0 := $store.ref($M.0, $add.ref(mtdoops_notifier, 16), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(mtdoops_notifier, 16), 8), $0.ref);
  $M.0 := $store.ref($M.0, oops_cxt, $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(oops_cxt, 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(oops_cxt, 8), 8), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref(oops_cxt, 24), 0);
  $M.0 := $store.i32($M.0, $add.ref(oops_cxt, 32), 0);
  $M.0 := $store.i64($M.0, $add.ref(oops_cxt, 40), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(oops_cxt, 40), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(oops_cxt, 40), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(oops_cxt, 40), 24), $0.ref);
  $M.0 := $store.i64($M.0, $add.ref(oops_cxt, 72), 0);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(oops_cxt, 72), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(oops_cxt, 72), 8), 8), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref($add.ref(oops_cxt, 72), 24), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(oops_cxt, 104), $0.ref);
  $M.0 := $store.i32($M.0, $add.ref(oops_cxt, 112), 0);
  $M.0 := $store.i32($M.0, $add.ref(oops_cxt, 116), 0);
  $M.0 := $store.i32($M.0, $add.ref(oops_cxt, 120), 0);
  $M.0 := $store.ref($M.0, $add.ref(oops_cxt, 128), $0.ref);
  $M.0 := $store.ref($M.0, $add.ref(oops_cxt, 136), $0.ref);
  $exn := false;
  return;
}
const devirtbounce: ref;
axiom (devirtbounce == $sub.ref(0, 142939));
procedure  devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.1: ref;
axiom (devirtbounce.1 == $sub.ref(0, 143971));
procedure  devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32)
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i2 := $eq.ref(__builtinx_memcpy, $p0);
  assume {:branchcond $i2} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i2 == 1);
  call $i1 := __builtinx_memcpy();
  $r := $i1;
  $exn := false;
  return;
$bb3:
  assume !(($i2 == 1));
  assume false;
}
const devirtbounce.2: ref;
axiom (devirtbounce.2 == $sub.ref(0, 145003));
procedure  devirtbounce.2(funcPtr: ref, arg: ref)
  returns ($r: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.3: ref;
axiom (devirtbounce.3 == $sub.ref(0, 146035));
procedure  devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
  returns ($r: i64)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
procedure  $memset.i8(M: [ref] i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == val);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M[x]);
}

const $u0: ref;
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
