// generated by SMACK version 1.9.0 for corral
// via /mnt/local/smack-project/smack/bin/smack -x=svcomp --time-limit 1800 /proj/SMACK/sv-benchmarks/c/ldv-linux-3.4-simple/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out.c --bit-precise --verifier-options  /bopt:z3opt:SMT.MBQI=false /deepAsserts /staticInlining /trackAllVars --unroll 16

// Basic types
type i1 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type ref = i64;
type float = bv32;

// Basic constants
const $0: bv32;
axiom ($0 == 0bv32);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $2.ref: ref;
axiom ($2.ref == 2);
const $3.ref: ref;
axiom ($3.ref == 3);
const $4.ref: ref;
axiom ($4.ref == 4);
const $5.ref: ref;
axiom ($5.ref == 5);
const $6.ref: ref;
axiom ($6.ref == 6);
const $7.ref: ref;
axiom ($7.ref == 7);
const $8.ref: ref;
axiom ($8.ref == 8);
const $9.ref: ref;
axiom ($9.ref == 9);
const $10.ref: ref;
axiom ($10.ref == 10);
const $11.ref: ref;
axiom ($11.ref == 11);
const $12.ref: ref;
axiom ($12.ref == 12);
const $13.ref: ref;
axiom ($13.ref == 13);
const $14.ref: ref;
axiom ($14.ref == 14);
const $1024.ref: ref;
axiom ($1024.ref == 1024);

// Memory maps (6 regions)
var $M.0: [ref] bv8;
var $M.1: bv32;
var $M.2: bv32;
var $M.3: bv32;
var $M.4: bv32;
var $M.5: [ref] bv8;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 126889));
axiom ($EXTERNS_BOTTOM == $sub.ref(0, 32792));
axiom ($MALLOC_TOP == 9223372036854775807);

// Bitstd::vector-integer conversions
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2int"} $bv2uint.64(i: bv64) returns (i64);
function {:inline} $bv2int.64(i: bv64) returns (i64) { if $slt.bv64.bool(i, 0bv64) then $sub.i64($bv2uint.64(i), 18446744073709551616) else $bv2uint.64(i) }
// Bytewise pointer storage
function {:inline} $load.bytes.ref(M: [ref] bv8, p: ref) returns (ref) { $i2p.bv64.ref($load.bytes.bv64(M, p)) }
function {:inline} $store.bytes.ref(M: [ref] bv8, p: ref, v: ref)returns ([ref] bv8) { $store.bytes.bv64(M,p,$p2i.ref.bv64(v)) }
// Pointer-number conversions
function {:inline} $p2i.ref.bv8(p: ref) returns (bv8) { $trunc.bv64.bv8($int2bv.64(p)) }
function {:inline} $i2p.bv8.ref(i: bv8) returns (ref) { $bv2int.64($zext.bv8.bv64(i)) }
function {:inline} $p2i.ref.bv16(p: ref) returns (bv16) { $trunc.bv64.bv16($int2bv.64(p)) }
function {:inline} $i2p.bv16.ref(i: bv16) returns (ref) { $bv2int.64($zext.bv16.bv64(i)) }
function {:inline} $p2i.ref.bv32(p: ref) returns (bv32) { $trunc.bv64.bv32($int2bv.64(p)) }
function {:inline} $i2p.bv32.ref(i: bv32) returns (ref) { $bv2int.64($zext.bv32.bv64(i)) }
function {:inline} $p2i.ref.bv64(p: ref) returns (bv64) { $int2bv.64(p) }
function {:inline} $i2p.bv64.ref(i: bv64) returns (ref) { $bv2int.64(i) }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (bv1) { if $eq.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (bv1) { if $ne.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (bv1) { if $ugt.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (bv1) { if $uge.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (bv1) { if $ult.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (bv1) { if $ule.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (bv1) { if $sgt.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (bv1) { if $sge.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (bv1) { if $slt.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (bv1) { if $sle.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

const LDV_IN_INTERRUPT: ref;
axiom (LDV_IN_INTERRUPT == $sub.ref(0, 1028));
const ldv_mutex: ref;
axiom (ldv_mutex == $sub.ref(0, 2056));
const llvm.used: ref;
axiom (llvm.used == $sub.ref(0, 3088));
const {:count 12} __mod_license55: ref;
axiom (__mod_license55 == $sub.ref(0, 4124));
const {:count 44} version: ref;
axiom (version == $sub.ref(0, 5192));
const versionprinted: ref;
axiom (versionprinted == $sub.ref(0, 6220));
const abyss_driver: ref;
axiom (abyss_driver == $sub.ref(0, 7492));
const abyss_netdev_ops: ref;
axiom (abyss_netdev_ops == $sub.ref(0, 8868));
const abyss_pci_tbl: ref;
axiom (abyss_pci_tbl == $sub.ref(0, 9924));
const res_abyss_attach_4: ref;
axiom (res_abyss_attach_4 == $sub.ref(0, 10952));
const tms380tr_netdev_ops: ref;
axiom (tms380tr_netdev_ops == $sub.ref(0, 32776));
const __this_module: ref;
axiom (__this_module == $sub.ref(0, 32784));
const .str: ref;
axiom (.str == $sub.ref(0, 11982));
const {:count 186} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 13192));
const ioport_resource: ref;
axiom (ioport_resource == $sub.ref(0, 32792));
const {:count 3} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 14219));
const {:count 38} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 15281));
const {:count 27} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 16332));
const {:count 41} .str.6: ref;
axiom (.str.6 == $sub.ref(0, 17397));
const {:count 34} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 18455));
const {:count 19} .str.8: ref;
axiom (.str.8 == $sub.ref(0, 19498));
const {:count 38} .str.9: ref;
axiom (.str.9 == $sub.ref(0, 20560));
const {:count 35} .str.10: ref;
axiom (.str.10 == $sub.ref(0, 21619));
const {:count 14} .str.2.14: ref;
axiom (.str.2.14 == $sub.ref(0, 22657));
const abyss_init: ref;
axiom (abyss_init == $sub.ref(0, 23689));
procedure  abyss_init()
  returns ($r: bv32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6121, 41} true;
  assume {:verifier.code 0} true;
  $p0 := $bitcast.ref.ref(abyss_netdev_ops);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6121, 41} true;
  assume {:verifier.code 0} true;
  call $M.0 := $memcpy.bv8($M.0, $M.0, $p0, tms380tr_netdev_ops, $bv2int.64(352bv64), $bv2int.64($zext.bv32.bv64(8bv32)), (0bv1 == 1bv1));
  // WARNING: call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast (%struct.net_device_ops* @tms380tr_netdev_ops to i8*), i64 352, i32 8, i1 false), !dbg !5894, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6123, 5} true;
  assume {:verifier.code 0} true;
  $p1 := $i2p.bv64.ref($add.bv64($p2i.ref.bv64(abyss_netdev_ops), 16bv64));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6123, 52} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p1, abyss_open);
  // WARNING: store i32 (%struct.net_device*)* @abyss_open, i32 (%struct.net_device*)** %2, align 8, !dbg !5900, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6125, 5} true;
  assume {:verifier.code 0} true;
  $p2 := $i2p.bv64.ref($add.bv64($p2i.ref.bv64(abyss_netdev_ops), 24bv64));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6125, 52} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p2, abyss_close);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6126, 19} true;
  assume {:verifier.code 0} true;
  call $i3 := __pci_register_driver(abyss_driver, __this_module, .str);
  // WARNING: %4 = call i32 @__pci_register_driver(%struct.pci_driver* @abyss_driver, %struct.module* @__this_module, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0)), !dbg !5905, !verifier.code !5893
  call {:cexpr "tmp___7"} boogie_si_record_bv32($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6128, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $exn := false;
  return;
}
const llvm.memcpy.p0i8.p0i8.i64: ref;
axiom (llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 24721));
procedure  llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: bv64, $i3: bv32, $i4: bv1);
const abyss_open: ref;
axiom (abyss_open == $sub.ref(0, 25753));
procedure  abyss_open($p0: ref)
  returns ($r: bv32)
{
  var $i1: bv32;
  var $i2: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5994, 3} true;
  assume {:verifier.code 0} true;
  call $i1 := abyss_chipset_init($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5995, 3} true;
  assume {:verifier.code 0} true;
  call $i2 := tms380tr_open($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5997, 3} true;
  assume {:verifier.code 0} true;
  $r := 0bv32;
  $exn := false;
  return;
}
const abyss_close: ref;
axiom (abyss_close == $sub.ref(0, 26785));
procedure  abyss_close($p0: ref)
  returns ($r: bv32)
{
  var $i1: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6005, 3} true;
  assume {:verifier.code 0} true;
  call $i1 := tms380tr_close($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6006, 3} true;
  assume {:verifier.code 0} true;
  call abyss_chipset_close($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6008, 3} true;
  assume {:verifier.code 0} true;
  $r := 0bv32;
  $exn := false;
  return;
}
const __pci_register_driver: ref;
axiom (__pci_register_driver == $sub.ref(0, 27817));
procedure  __pci_register_driver($p0: ref, $p1: ref, $p2: ref)
  returns ($r: bv32);
const tms380tr_close: ref;
axiom (tms380tr_close == $sub.ref(0, 28849));
procedure  tms380tr_close($p0: ref)
  returns ($r: bv32);
const abyss_chipset_close: ref;
axiom (abyss_chipset_close == $sub.ref(0, 29881));
procedure  abyss_chipset_close($p0: ref)
{
  var $i1: bv64;
  var $i2: bv64;
  var $p3: ref;
  var $i4: bv64;
  var $i5: bv64;
  var $i6: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5862, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.bv64($p0);
  // WARNING: %2 = ptrtoint %struct.net_device* %0 to i64, !dbg !5893, !verifier.code !5892
  call {:cexpr "__cil_tmp3"} boogie_si_record_bv64($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5863, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $add.bv64($i1, 216bv64);
  // WARNING: %3 = add i64 %2, 216, !dbg !5898, !verifier.code !5892
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5864, 14} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.bv64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5864, 12} true;
  assume {:verifier.code 0} true;
  $i4 := $load.bytes.bv64($M.0, $p3);
  // WARNING: %5 = load i64, i64* %4, align 8, !dbg !5902, !verifier.code !5892
  call {:cexpr "ioaddr"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5865, 23} true;
  assume {:verifier.code 0} true;
  $i5 := $add.bv64($i4, $sub.bv64(0bv64, 12bv64));
  // WARNING: %6 = add i64 %5, -12, !dbg !5905, !verifier.code !5892
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv64($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5866, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.bv64.bv32($i5);
  // WARNING: %7 = trunc i64 %6 to i32, !dbg !5908, !verifier.code !5892
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv32($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5867, 3} true;
  assume {:verifier.code 0} true;
  call outb(0bv8, $i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5869, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const outb: ref;
axiom (outb == $sub.ref(0, 30913));
procedure  outb($i0: bv8, $i1: bv32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i8 %0, i64 0, metadata !5951, metadata !5891), !dbg !5952, !verifier.code !5893
  call devirtbounce(0, $i0, $i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4763, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const abyss_chipset_init: ref;
axiom (abyss_chipset_init == $sub.ref(0, 31945));
procedure  abyss_chipset_init($p0: ref)
  returns ($r: bv32)
{
  var $i1: bv64;
  var $i2: bv64;
  var $p3: ref;
  var $i4: bv64;
  var $i5: bv64;
  var $i6: bv32;
  var $i7: bv8;
  var $i8: bv32;
  var $i9: bv32;
  var $i10: bv8;
  var $i11: bv64;
  var $i12: bv32;
  var $i13: bv32;
  var $i14: bv32;
  var $i15: bv8;
  var $i16: bv64;
  var $i17: bv32;
  var $i18: bv32;
  var $i19: bv32;
  var $i20: bv8;
  var $i21: bv64;
  var $i22: bv32;
  var $i23: bv32;
  var $i24: bv32;
  var $i25: bv8;
  var $i26: bv64;
  var $i27: bv32;
  var $i28: bv32;
  var $i29: bv32;
  var $i30: bv8;
  var $i31: bv64;
  var $i32: bv32;
  var $i33: bv64;
  var $i34: bv32;
  var $i35: bv64;
  var $i36: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5805, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.bv64($p0);
  // WARNING: %2 = ptrtoint %struct.net_device* %0 to i64, !dbg !5893, !verifier.code !5892
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv64($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5806, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $add.bv64($i1, 216bv64);
  // WARNING: %3 = add i64 %2, 216, !dbg !5898, !verifier.code !5892
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5807, 14} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.bv64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5807, 12} true;
  assume {:verifier.code 0} true;
  $i4 := $load.bytes.bv64($M.0, $p3);
  // WARNING: %5 = load i64, i64* %4, align 8, !dbg !5902, !verifier.code !5892
  call {:cexpr "ioaddr"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5808, 23} true;
  assume {:verifier.code 0} true;
  $i5 := $add.bv64($i4, $sub.bv64(0bv64, 12bv64));
  // WARNING: %6 = add i64 %5, -12, !dbg !5905, !verifier.code !5892
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv64($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5809, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.bv64.bv32($i5);
  // WARNING: %7 = trunc i64 %6 to i32, !dbg !5908, !verifier.code !5892
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv32($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5810, 15} true;
  assume {:verifier.code 0} true;
  call $i7 := inb($i6);
  // WARNING: %8 = call zeroext i8 @inb(i32 %7), !dbg !5911, !verifier.code !5892
  call {:cexpr "reset_reg"} boogie_si_record_bv8($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5811, 16} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.bv8.bv32($i7);
  // WARNING: %9 = zext i8 %8 to i32, !dbg !5914, !verifier.code !5892
  call {:cexpr "__cil_tmp8"} boogie_si_record_bv32($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5812, 27} true;
  assume {:verifier.code 0} true;
  $i9 := $or.bv32($i8, 1bv32);
  // WARNING: %10 = or i32 %9, 1, !dbg !5917, !verifier.code !5892
  call {:cexpr "__cil_tmp9"} boogie_si_record_bv32($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5813, 15} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.bv32.bv8($i9);
  // WARNING: %11 = trunc i32 %10 to i8, !dbg !5920, !verifier.code !5892
  call {:cexpr "reset_reg"} boogie_si_record_bv8($i10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5814, 24} true;
  assume {:verifier.code 0} true;
  $i11 := $add.bv64($i4, $sub.bv64(0bv64, 12bv64));
  // WARNING: %12 = add i64 %5, -12, !dbg !5921, !verifier.code !5892
  call {:cexpr "__cil_tmp10"} boogie_si_record_bv64($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5815, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $trunc.bv64.bv32($i11);
  // WARNING: %13 = trunc i64 %12 to i32, !dbg !5924, !verifier.code !5892
  call {:cexpr "__cil_tmp11"} boogie_si_record_bv32($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5816, 3} true;
  assume {:verifier.code 0} true;
  call outb($i10, $i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5817, 17} true;
  assume {:verifier.code 0} true;
  $i13 := $zext.bv8.bv32($i10);
  // WARNING: %14 = zext i8 %11 to i32, !dbg !5928, !verifier.code !5892
  call {:cexpr "__cil_tmp12"} boogie_si_record_bv32($i13);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5818, 29} true;
  assume {:verifier.code 0} true;
  $i14 := $and.bv32($i13, $sub.bv32(0bv32, 8bv32));
  // WARNING: %15 = and i32 %14, -8, !dbg !5931, !verifier.code !5892
  call {:cexpr "__cil_tmp13"} boogie_si_record_bv32($i14);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5819, 15} true;
  assume {:verifier.code 0} true;
  $i15 := $trunc.bv32.bv8($i14);
  // WARNING: %16 = trunc i32 %15 to i8, !dbg !5934, !verifier.code !5892
  call {:cexpr "reset_reg"} boogie_si_record_bv8($i15);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5820, 24} true;
  assume {:verifier.code 0} true;
  $i16 := $add.bv64($i4, $sub.bv64(0bv64, 12bv64));
  // WARNING: %17 = add i64 %5, -12, !dbg !5935, !verifier.code !5892
  call {:cexpr "__cil_tmp14"} boogie_si_record_bv64($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5821, 17} true;
  assume {:verifier.code 0} true;
  $i17 := $trunc.bv64.bv32($i16);
  // WARNING: %18 = trunc i64 %17 to i32, !dbg !5938, !verifier.code !5892
  call {:cexpr "__cil_tmp15"} boogie_si_record_bv32($i17);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5822, 3} true;
  assume {:verifier.code 0} true;
  call outb($i15, $i17);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5823, 3} true;
  assume {:verifier.code 0} true;
  call tms380tr_wait(100bv64);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5824, 17} true;
  assume {:verifier.code 0} true;
  $i18 := $zext.bv8.bv32($i15);
  // WARNING: %19 = zext i8 %16 to i32, !dbg !5943, !verifier.code !5892
  call {:cexpr "__cil_tmp16"} boogie_si_record_bv32($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5825, 29} true;
  assume {:verifier.code 0} true;
  $i19 := $or.bv32($i18, 1bv32);
  // WARNING: %20 = or i32 %19, 1, !dbg !5946, !verifier.code !5892
  call {:cexpr "__cil_tmp17"} boogie_si_record_bv32($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5826, 15} true;
  assume {:verifier.code 0} true;
  $i20 := $trunc.bv32.bv8($i19);
  // WARNING: %21 = trunc i32 %20 to i8, !dbg !5949, !verifier.code !5892
  call {:cexpr "reset_reg"} boogie_si_record_bv8($i20);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5827, 24} true;
  assume {:verifier.code 0} true;
  $i21 := $add.bv64($i4, $sub.bv64(0bv64, 12bv64));
  // WARNING: %22 = add i64 %5, -12, !dbg !5950, !verifier.code !5892
  call {:cexpr "__cil_tmp18"} boogie_si_record_bv64($i21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5828, 17} true;
  assume {:verifier.code 0} true;
  $i22 := $trunc.bv64.bv32($i21);
  // WARNING: %23 = trunc i64 %22 to i32, !dbg !5953, !verifier.code !5892
  call {:cexpr "__cil_tmp19"} boogie_si_record_bv32($i22);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5829, 3} true;
  assume {:verifier.code 0} true;
  call outb($i20, $i22);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5830, 17} true;
  assume {:verifier.code 0} true;
  $i23 := $zext.bv8.bv32($i20);
  // WARNING: %24 = zext i8 %21 to i32, !dbg !5957, !verifier.code !5892
  call {:cexpr "__cil_tmp20"} boogie_si_record_bv32($i23);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5831, 29} true;
  assume {:verifier.code 0} true;
  $i24 := $or.bv32($i23, 4bv32);
  // WARNING: %25 = or i32 %24, 4, !dbg !5960, !verifier.code !5892
  call {:cexpr "__cil_tmp21"} boogie_si_record_bv32($i24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5832, 15} true;
  assume {:verifier.code 0} true;
  $i25 := $trunc.bv32.bv8($i24);
  // WARNING: %26 = trunc i32 %25 to i8, !dbg !5963, !verifier.code !5892
  call {:cexpr "reset_reg"} boogie_si_record_bv8($i25);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5833, 24} true;
  assume {:verifier.code 0} true;
  $i26 := $add.bv64($i4, $sub.bv64(0bv64, 12bv64));
  // WARNING: %27 = add i64 %5, -12, !dbg !5964, !verifier.code !5892
  call {:cexpr "__cil_tmp22"} boogie_si_record_bv64($i26);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5834, 17} true;
  assume {:verifier.code 0} true;
  $i27 := $trunc.bv64.bv32($i26);
  // WARNING: %28 = trunc i64 %27 to i32, !dbg !5967, !verifier.code !5892
  call {:cexpr "__cil_tmp23"} boogie_si_record_bv32($i27);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5835, 3} true;
  assume {:verifier.code 0} true;
  call outb($i25, $i27);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5836, 17} true;
  assume {:verifier.code 0} true;
  $i28 := $zext.bv8.bv32($i25);
  // WARNING: %29 = zext i8 %26 to i32, !dbg !5971, !verifier.code !5892
  call {:cexpr "__cil_tmp24"} boogie_si_record_bv32($i28);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5837, 29} true;
  assume {:verifier.code 0} true;
  $i29 := $or.bv32($i28, 2bv32);
  // WARNING: %30 = or i32 %29, 2, !dbg !5974, !verifier.code !5892
  call {:cexpr "__cil_tmp25"} boogie_si_record_bv32($i29);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5838, 15} true;
  assume {:verifier.code 0} true;
  $i30 := $trunc.bv32.bv8($i29);
  // WARNING: %31 = trunc i32 %30 to i8, !dbg !5977, !verifier.code !5892
  call {:cexpr "reset_reg"} boogie_si_record_bv8($i30);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5839, 24} true;
  assume {:verifier.code 0} true;
  $i31 := $add.bv64($i4, $sub.bv64(0bv64, 12bv64));
  // WARNING: %32 = add i64 %5, -12, !dbg !5978, !verifier.code !5892
  call {:cexpr "__cil_tmp26"} boogie_si_record_bv64($i31);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5840, 17} true;
  assume {:verifier.code 0} true;
  $i32 := $trunc.bv64.bv32($i31);
  // WARNING: %33 = trunc i64 %32 to i32, !dbg !5981, !verifier.code !5892
  call {:cexpr "__cil_tmp27"} boogie_si_record_bv32($i32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5841, 3} true;
  assume {:verifier.code 0} true;
  call outb($i30, $i32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5842, 24} true;
  assume {:verifier.code 0} true;
  $i33 := $add.bv64($i4, $sub.bv64(0bv64, 14bv64));
  // WARNING: %34 = add i64 %5, -14, !dbg !5985, !verifier.code !5892
  call {:cexpr "__cil_tmp28"} boogie_si_record_bv64($i33);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5843, 17} true;
  assume {:verifier.code 0} true;
  $i34 := $trunc.bv64.bv32($i33);
  // WARNING: %35 = trunc i64 %34 to i32, !dbg !5988, !verifier.code !5892
  call {:cexpr "__cil_tmp29"} boogie_si_record_bv32($i34);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5844, 3} true;
  assume {:verifier.code 0} true;
  call outb($sub.bv8(0bv8, 126bv8), $i34);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5845, 24} true;
  assume {:verifier.code 0} true;
  $i35 := $add.bv64($i4, 33bv64);
  // WARNING: %36 = add i64 %5, 33, !dbg !5992, !verifier.code !5892
  call {:cexpr "__cil_tmp30"} boogie_si_record_bv64($i35);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5846, 17} true;
  assume {:verifier.code 0} true;
  $i36 := $trunc.bv64.bv32($i35);
  // WARNING: %37 = trunc i64 %36 to i32, !dbg !5995, !verifier.code !5892
  call {:cexpr "__cil_tmp31"} boogie_si_record_bv32($i36);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5847, 3} true;
  assume {:verifier.code 0} true;
  call outb(30bv8, $i36);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5849, 3} true;
  assume {:verifier.code 0} true;
  $r := 0bv32;
  $exn := false;
  return;
}
const tms380tr_open: ref;
axiom (tms380tr_open == $sub.ref(0, 32977));
procedure  tms380tr_open($p0: ref)
  returns ($r: bv32);
const inb: ref;
axiom (inb == $sub.ref(0, 34009));
procedure  inb($i0: bv32)
  returns ($r: bv8)
{
  var $i1: bv8;
$bb0:
  call $i1 := devirtbounce.1(0, $i0);
  // WARNING: %2 = call i8 @devirtbounce.1(i8 (i32)* asm sideeffect "inb ${1:w}, ${0:b}", "={ax},N{dx},~{dirflag},~{fpsr},~{flags}", i32 %0)
  call {:cexpr "value"} boogie_si_record_bv8($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4776, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const tms380tr_wait: ref;
axiom (tms380tr_wait == $sub.ref(0, 35041));
procedure  tms380tr_wait($i0: bv64);
const abyss_attach: ref;
axiom (abyss_attach == $sub.ref(0, 36073));
procedure  abyss_attach($p0: ref, $p1: ref)
  returns ($r: bv32)
{
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv1;
  var $i6: bv64;
  var $p7: ref;
  var $i8: bv32;
  var $i9: bv32;
  var $i10: bv1;
  var $i12: bv64;
  var $i13: bv64;
  var $p14: ref;
  var $i15: bv32;
  var $i16: bv64;
  var $i17: bv64;
  var $i18: bv64;
  var $p19: ref;
  var $i20: bv64;
  var $p21: ref;
  var $i22: bv1;
  var $i23: bv64;
  var $i24: bv64;
  var $i25: bv64;
  var $p26: ref;
  var $p27: ref;
  var $i28: bv1;
  var $i30: bv64;
  var $i31: bv64;
  var $p32: ref;
  var $i33: bv32;
  var $i34: bv64;
  var $i35: bv64;
  var $i36: bv64;
  var $p37: ref;
  var $p38: ref;
  var $i39: bv32;
  var $i40: bv1;
  var $i42: bv64;
  var $i43: bv64;
  var $p44: ref;
  var $i45: bv64;
  var $i46: bv64;
  var $p47: ref;
  var $i48: bv64;
  var $i49: bv64;
  var $i50: bv64;
  var $p51: ref;
  var $i52: bv32;
  var $i53: bv64;
  var $i54: bv64;
  var $i55: bv64;
  var $p56: ref;
  var $i57: bv64;
  var $i58: bv64;
  var $p59: ref;
  var $i60: bv32;
  var $i61: bv32;
  var $i62: bv64;
  var $i63: bv64;
  var $i64: bv64;
  var $i65: bv64;
  var $p66: ref;
  var $i67: bv64;
  var $i68: bv64;
  var $p69: ref;
  var $i70: bv64;
  var $i71: bv64;
  var $p72: ref;
  var $i73: bv32;
  var $i74: bv1;
  var $i75: bv64;
  var $i76: bv64;
  var $i77: bv64;
  var $p78: ref;
  var $i79: bv32;
  var $i81: bv64;
  var $i82: bv64;
  var $i83: bv64;
  var $p84: ref;
  var $i85: bv64;
  var $i86: bv64;
  var $p87: ref;
  var $p88: ref;
  var $i89: bv32;
  var $p90: ref;
  var $p91: ref;
  var $i92: bv64;
  var $i93: bv64;
  var $p94: ref;
  var $i95: bv64;
  var $i96: bv64;
  var $p97: ref;
  var $i98: bv64;
  var $i99: bv64;
  var $p100: ref;
  var $i101: bv64;
  var $i102: bv64;
  var $p103: ref;
  var $i104: bv64;
  var $i105: bv64;
  var $p106: ref;
  var $i107: bv1;
  var $i108: bv64;
  var $i109: bv64;
  var $i110: bv64;
  var $p111: ref;
  var $p112: ref;
  var $i113: bv64;
  var $i114: bv64;
  var $i115: bv64;
  var $p116: ref;
  var $i117: bv32;
  var $i118: bv64;
  var $i119: bv64;
  var $p120: ref;
  var $p121: ref;
  var $i122: bv64;
  var $i123: bv64;
  var $i124: bv64;
  var $i125: bv64;
  var $p126: ref;
  var $p127: ref;
  var $i128: bv32;
  var $i129: bv1;
  var $i80: bv32;
  var $i130: bv64;
  var $i131: bv64;
  var $p132: ref;
  var $i133: bv32;
  var $p134: ref;
  var $i41: bv32;
  var $i29: bv32;
  var $i11: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5163, 13} true;
  assume {:verifier.code 0} true;
  $i2 := $M.1;
  // WARNING: %3 = load i32, i32* @versionprinted, align 4, !dbg !5895, !verifier.code !5892
  call {:cexpr "tmp___7"} boogie_si_record_bv32($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5164, 20} true;
  assume {:verifier.code 0} true;
  $i3 := $M.1;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5164, 35} true;
  assume {:verifier.code 0} true;
  $i4 := $add.bv32($i3, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5164, 18} true;
  assume {:verifier.code 0} true;
  $M.1 := $i4;
  call {:cexpr "versionprinted"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5165, 15} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.bv32($i2, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5165, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5168, 45} true;
  assume {:verifier.code 0} true;
  $i6 := $add.bv64($p2i.ref.bv64(version), 0bv64);
  // WARNING: %8 = add i64 ptrtoint ([44 x i8]* @version to i64), 0, !dbg !5907, !verifier.code !5892
  call {:cexpr "__cil_tmp15"} boogie_si_record_bv64($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5169, 19} true;
  assume {:verifier.code 0} true;
  $p7 := $i2p.bv64.ref($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5170, 5} true;
  assume {:verifier.code 0} true;
  call $i8 := printk.ref.ref(.str.3, $p7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5172, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i5 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5176, 19} true;
  assume {:verifier.code 0} true;
  call $i9 := pci_enable_device($p0);
  // WARNING: %13 = call i32 @pci_enable_device(%struct.pci_dev* %0), !dbg !5917, !verifier.code !5892
  call {:cexpr "tmp___8"} boogie_si_record_bv32($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5178, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.bv32($i9, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5178, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i10 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5179, 5} true;
  assume {:verifier.code 0} true;
  $i11 := $sub.bv32(0bv32, 5bv32);
  goto $bb6;
$bb5:
  assume !(($i10 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5383, 1} true;
  assume {:verifier.code 0} true;
  $r := $i11;
  $exn := false;
  return;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5184, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $p2i.ref.bv64($p0);
  // WARNING: %18 = ptrtoint %struct.pci_dev* %0 to i64, !dbg !5926, !verifier.code !5892
  call {:cexpr "__cil_tmp17"} boogie_si_record_bv64($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5185, 29} true;
  assume {:verifier.code 0} true;
  $i13 := $add.bv64($i12, 916bv64);
  // WARNING: %19 = add i64 %18, 916, !dbg !5930, !verifier.code !5892
  call {:cexpr "__cil_tmp18"} boogie_si_record_bv64($i13);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5186, 19} true;
  assume {:verifier.code 0} true;
  $p14 := $i2p.bv64.ref($i13);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5186, 17} true;
  assume {:verifier.code 0} true;
  $i15 := $load.bytes.bv32($M.0, $p14);
  // WARNING: %21 = load i32, i32* %20, align 4, !dbg !5934, !verifier.code !5892
  call {:cexpr "__cil_tmp19"} boogie_si_record_bv32($i15);
  // WARNING: call void @llvm.dbg.value(metadata i32 %21, i64 0, metadata !6121, metadata !5891), !dbg !6122, !verifier.code !5893
  // WARNING: call void @llvm.dbg.value(metadata i32 %21, i64 0, metadata !6123, metadata !5891), !dbg !6124, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5189, 21} true;
  assume {:verifier.code 0} true;
  $i16 := $add.bv64(920bv64, 0bv64);
  // WARNING: %22 = add i64 920, 0, !dbg !5941, !verifier.code !5892
  call {:cexpr "__cil_tmp21"} boogie_si_record_bv64($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5190, 17} true;
  assume {:verifier.code 0} true;
  $i17 := $p2i.ref.bv64($p0);
  // WARNING: %23 = ptrtoint %struct.pci_dev* %0 to i64, !dbg !5944, !verifier.code !5892
  call {:cexpr "__cil_tmp22"} boogie_si_record_bv64($i17);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5191, 29} true;
  assume {:verifier.code 0} true;
  $i18 := $add.bv64($i17, $i16);
  // WARNING: %24 = add i64 %23, %22, !dbg !5947, !verifier.code !5892
  call {:cexpr "__cil_tmp23"} boogie_si_record_bv64($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5192, 19} true;
  assume {:verifier.code 0} true;
  $p19 := $i2p.bv64.ref($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5192, 17} true;
  assume {:verifier.code 0} true;
  $i20 := $load.bytes.bv64($M.0, $p19);
  // WARNING: %26 = load i64, i64* %25, align 8, !dbg !5951, !verifier.code !5892
  call {:cexpr "__cil_tmp24"} boogie_si_record_bv64($i20);
  // WARNING: call void @llvm.dbg.value(metadata i64 %26, i64 0, metadata !6138, metadata !5891), !dbg !6139, !verifier.code !5893
  // WARNING: call void @llvm.dbg.value(metadata i64 %26, i64 0, metadata !6140, metadata !5891), !dbg !6141, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5195, 9} true;
  assume {:verifier.code 0} true;
  call $p21 := alloc_trdev(28008bv32);
  assume $isExternal($p21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5197, 9} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.ref($p21, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5197, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i22} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i22 == 1bv1);
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i22 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5198, 5} true;
  assume {:verifier.code 0} true;
  $i11 := $sub.bv32(0bv32, 12bv32);
  goto $bb6;
$bb10:
  // WARNING: call void @llvm.dbg.value(metadata i64 %26, i64 0, metadata !6152, metadata !5891), !dbg !6153, !verifier.code !5893
  // WARNING: call void @llvm.dbg.value(metadata i64 64, i64 0, metadata !6154, metadata !5891), !dbg !6155, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5206, 19} true;
  assume {:verifier.code 0} true;
  $i23 := $add.bv64(0bv64, 0bv64);
  // WARNING: %32 = add i64 0, 0, !dbg !5972, !verifier.code !5892
  call {:cexpr "__cil_tmp29"} boogie_si_record_bv64($i23);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5207, 17} true;
  assume {:verifier.code 0} true;
  $i24 := $p2i.ref.bv64($p21);
  // WARNING: %33 = ptrtoint %struct.net_device* %27 to i64, !dbg !5976, !verifier.code !5892
  call {:cexpr "__cil_tmp30"} boogie_si_record_bv64($i24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5208, 29} true;
  assume {:verifier.code 0} true;
  $i25 := $add.bv64($i24, $i23);
  // WARNING: %34 = add i64 %33, %32, !dbg !5979, !verifier.code !5892
  call {:cexpr "__cil_tmp31"} boogie_si_record_bv64($i25);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5209, 17} true;
  assume {:verifier.code 0} true;
  $p26 := $i2p.bv64.ref($i25);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5211, 13} true;
  assume {:verifier.code 0} true;
  call $p27 := __request_region(ioport_resource, $i20, 64bv64, $p26, 0bv32);
  assume $isExternal($p27);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5214, 7} true;
  assume {:verifier.code 0} true;
  $i28 := $ne.ref($p27, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5214, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i28} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i28 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5216, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume !(($i28 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5218, 5} true;
  assume {:verifier.code 0} true;
  $i29 := $sub.bv32(0bv32, 16bv32);
  goto $bb14;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5221, 17} true;
  assume {:verifier.code 0} true;
  $i30 := $p2i.ref.bv64($p0);
  // WARNING: %41 = ptrtoint %struct.pci_dev* %0 to i64, !dbg !5999, !verifier.code !5892
  call {:cexpr "__cil_tmp34"} boogie_si_record_bv64($i30);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5222, 29} true;
  assume {:verifier.code 0} true;
  $i31 := $add.bv64($i30, 916bv64);
  // WARNING: %42 = add i64 %41, 916, !dbg !6003, !verifier.code !5892
  call {:cexpr "__cil_tmp35"} boogie_si_record_bv64($i31);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5223, 19} true;
  assume {:verifier.code 0} true;
  $p32 := $i2p.bv64.ref($i31);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5223, 17} true;
  assume {:verifier.code 0} true;
  $i33 := $load.bytes.bv32($M.0, $p32);
  // WARNING: %44 = load i32, i32* %43, align 4, !dbg !6007, !verifier.code !5892
  call {:cexpr "__cil_tmp36"} boogie_si_record_bv32($i33);
  // WARNING: call void @llvm.dbg.value(metadata i32 %44, i64 0, metadata !6194, metadata !5891), !dbg !6195, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5225, 19} true;
  assume {:verifier.code 0} true;
  $i34 := $add.bv64(0bv64, 0bv64);
  // WARNING: %45 = add i64 0, 0, !dbg !6012, !verifier.code !5892
  call {:cexpr "__cil_tmp38"} boogie_si_record_bv64($i34);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5226, 17} true;
  assume {:verifier.code 0} true;
  $i35 := $p2i.ref.bv64($p21);
  // WARNING: %46 = ptrtoint %struct.net_device* %27 to i64, !dbg !6015, !verifier.code !5892
  call {:cexpr "__cil_tmp39"} boogie_si_record_bv64($i35);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5227, 29} true;
  assume {:verifier.code 0} true;
  $i36 := $add.bv64($i35, $i34);
  // WARNING: %47 = add i64 %46, %45, !dbg !6018, !verifier.code !5892
  call {:cexpr "__cil_tmp40"} boogie_si_record_bv64($i36);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5228, 17} true;
  assume {:verifier.code 0} true;
  $p37 := $i2p.bv64.ref($i36);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5230, 17} true;
  assume {:verifier.code 0} true;
  $p38 := $bitcast.ref.ref($p21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5231, 15} true;
  assume {:verifier.code 0} true;
  call $i39 := request_irq($i33, tms380tr_interrupt, 128bv64, $p37, $p38);
  // WARNING: %50 = call i32 @request_irq(i32 %44, i32 (i32, i8*)* @tms380tr_interrupt, i64 128, i8* %48, i8* %49), !dbg !6029, !verifier.code !5892
  call {:cexpr "ret"} boogie_si_record_bv32($i39);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5233, 7} true;
  assume {:verifier.code 0} true;
  $i40 := $ne.bv32($i39, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5233, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb15, $bb16;
$bb14:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5379, 3} true;
  assume {:verifier.code 0} true;
  call free_netdev($p21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5381, 3} true;
  assume {:verifier.code 0} true;
  $i11 := $i29;
  goto $bb6;
$bb15:
  assume ($i40 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5234, 5} true;
  assume {:verifier.code 0} true;
  $i41 := $i39;
  goto $bb17;
$bb16:
  assume !(($i40 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb18;
$bb17:
  assume {:verifier.code 0} true;
  // WARNING: %.1 = phi i32 [ %50, %52 ], [ %.01, %152 ], !verifier.code !5892
  // WARNING: call void @llvm.dbg.value(metadata i64 %26, i64 0, metadata !6510, metadata !5891), !dbg !6511, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5375, 3} true;
  assume {:verifier.code 0} true;
  call __release_region(ioport_resource, $i20, 64bv64);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5376, 3} true;
  assume {:verifier.code 0} true;
  $i29 := $i41;
  goto $bb14;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5239, 17} true;
  assume {:verifier.code 0} true;
  $i42 := $p2i.ref.bv64($p21);
  // WARNING: %55 = ptrtoint %struct.net_device* %27 to i64, !dbg !6035, !verifier.code !5892
  call {:cexpr "__cil_tmp44"} boogie_si_record_bv64($i42);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5240, 29} true;
  assume {:verifier.code 0} true;
  $i43 := $add.bv64($i42, 216bv64);
  // WARNING: %56 = add i64 %55, 216, !dbg !6039, !verifier.code !5892
  call {:cexpr "__cil_tmp45"} boogie_si_record_bv64($i43);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5241, 5} true;
  assume {:verifier.code 0} true;
  $p44 := $i2p.bv64.ref($i43);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5241, 35} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv64($M.0, $p44, $i20);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5242, 17} true;
  assume {:verifier.code 0} true;
  $i45 := $p2i.ref.bv64($p21);
  // WARNING: %58 = ptrtoint %struct.net_device* %27 to i64, !dbg !6044, !verifier.code !5892
  call {:cexpr "__cil_tmp46"} boogie_si_record_bv64($i45);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5243, 29} true;
  assume {:verifier.code 0} true;
  $i46 := $add.bv64($i45, 224bv64);
  // WARNING: %59 = add i64 %58, 224, !dbg !6047, !verifier.code !5892
  call {:cexpr "__cil_tmp47"} boogie_si_record_bv64($i46);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5244, 5} true;
  assume {:verifier.code 0} true;
  $p47 := $i2p.bv64.ref($i46);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5244, 34} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p47, $i15);
  // WARNING: store i32 %21, i32* %60, align 4, !dbg !6051, !verifier.code !5892
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5246, 19} true;
  assume {:verifier.code 0} true;
  $i48 := $add.bv64(0bv64, 0bv64);
  // WARNING: %61 = add i64 0, 0, !dbg !6054, !verifier.code !5892
  call {:cexpr "__cil_tmp49"} boogie_si_record_bv64($i48);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5247, 17} true;
  assume {:verifier.code 0} true;
  $i49 := $p2i.ref.bv64($p21);
  // WARNING: %62 = ptrtoint %struct.net_device* %27 to i64, !dbg !6057, !verifier.code !5892
  call {:cexpr "__cil_tmp50"} boogie_si_record_bv64($i49);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5248, 29} true;
  assume {:verifier.code 0} true;
  $i50 := $add.bv64($i49, $i48);
  // WARNING: %63 = add i64 %62, %61, !dbg !6060, !verifier.code !5892
  call {:cexpr "__cil_tmp51"} boogie_si_record_bv64($i50);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5249, 17} true;
  assume {:verifier.code 0} true;
  $p51 := $i2p.bv64.ref($i50);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5250, 3} true;
  assume {:verifier.code 0} true;
  call $i52 := printk.ref.ref(.str.4, $p51);
  // WARNING: %65 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i32 0, i32 0), i8* %64), !dbg !6066, !verifier.code !5892
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5252, 19} true;
  assume {:verifier.code 0} true;
  $i53 := $add.bv64(0bv64, 0bv64);
  // WARNING: %66 = add i64 0, 0, !dbg !6069, !verifier.code !5892
  call {:cexpr "__cil_tmp54"} boogie_si_record_bv64($i53);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5253, 17} true;
  assume {:verifier.code 0} true;
  $i54 := $p2i.ref.bv64($p21);
  // WARNING: %67 = ptrtoint %struct.net_device* %27 to i64, !dbg !6072, !verifier.code !5892
  call {:cexpr "__cil_tmp55"} boogie_si_record_bv64($i54);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5254, 29} true;
  assume {:verifier.code 0} true;
  $i55 := $add.bv64($i54, $i53);
  // WARNING: %68 = add i64 %67, %66, !dbg !6075, !verifier.code !5892
  call {:cexpr "__cil_tmp56"} boogie_si_record_bv64($i55);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5255, 17} true;
  assume {:verifier.code 0} true;
  $p56 := $i2p.bv64.ref($i55);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5256, 17} true;
  assume {:verifier.code 0} true;
  $i57 := $p2i.ref.bv64($p21);
  // WARNING: %70 = ptrtoint %struct.net_device* %27 to i64, !dbg !6081, !verifier.code !5892
  call {:cexpr "__cil_tmp58"} boogie_si_record_bv64($i57);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5257, 29} true;
  assume {:verifier.code 0} true;
  $i58 := $add.bv64($i57, 224bv64);
  // WARNING: %71 = add i64 %70, 224, !dbg !6084, !verifier.code !5892
  call {:cexpr "__cil_tmp59"} boogie_si_record_bv64($i58);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5258, 19} true;
  assume {:verifier.code 0} true;
  $p59 := $i2p.bv64.ref($i58);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5258, 17} true;
  assume {:verifier.code 0} true;
  $i60 := $load.bytes.bv32($M.0, $p59);
  // WARNING: %73 = load i32, i32* %72, align 4, !dbg !6088, !verifier.code !5892
  call {:cexpr "__cil_tmp60"} boogie_si_record_bv32($i60);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5259, 3} true;
  assume {:verifier.code 0} true;
  call $i61 := printk.ref.ref.bv64.bv32(.str.5, $p56, $i20, $i60);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5260, 17} true;
  assume {:verifier.code 0} true;
  $i62 := $p2i.ref.bv64($p21);
  // WARNING: %75 = ptrtoint %struct.net_device* %27 to i64, !dbg !6092, !verifier.code !5892
  call {:cexpr "__cil_tmp61"} boogie_si_record_bv64($i62);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5261, 29} true;
  assume {:verifier.code 0} true;
  $i63 := $add.bv64($i62, 216bv64);
  // WARNING: %76 = add i64 %75, 216, !dbg !6095, !verifier.code !5892
  call {:cexpr "__cil_tmp62"} boogie_si_record_bv64($i63);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5262, 17} true;
  assume {:verifier.code 0} true;
  $i64 := $p2i.ref.bv64($p21);
  // WARNING: %77 = ptrtoint %struct.net_device* %27 to i64, !dbg !6098, !verifier.code !5892
  call {:cexpr "__cil_tmp63"} boogie_si_record_bv64($i64);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5263, 29} true;
  assume {:verifier.code 0} true;
  $i65 := $add.bv64($i64, 216bv64);
  // WARNING: %78 = add i64 %77, 216, !dbg !6101, !verifier.code !5892
  call {:cexpr "__cil_tmp64"} boogie_si_record_bv64($i65);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5264, 19} true;
  assume {:verifier.code 0} true;
  $p66 := $i2p.bv64.ref($i65);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5264, 17} true;
  assume {:verifier.code 0} true;
  $i67 := $load.bytes.bv64($M.0, $p66);
  // WARNING: %80 = load i64, i64* %79, align 8, !dbg !6105, !verifier.code !5892
  call {:cexpr "__cil_tmp65"} boogie_si_record_bv64($i67);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5265, 49} true;
  assume {:verifier.code 0} true;
  $i68 := $add.bv64($i67, 16bv64);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5265, 5} true;
  assume {:verifier.code 0} true;
  $p69 := $i2p.bv64.ref($i63);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5265, 35} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv64($M.0, $p69, $i68);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5266, 17} true;
  assume {:verifier.code 0} true;
  $i70 := $p2i.ref.bv64($p0);
  // WARNING: %83 = ptrtoint %struct.pci_dev* %0 to i64, !dbg !6111, !verifier.code !5892
  call {:cexpr "__cil_tmp66"} boogie_si_record_bv64($i70);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5267, 29} true;
  assume {:verifier.code 0} true;
  $i71 := $add.bv64($i70, 144bv64);
  // WARNING: %84 = add i64 %83, 144, !dbg !6114, !verifier.code !5892
  call {:cexpr "__cil_tmp67"} boogie_si_record_bv64($i71);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5268, 17} true;
  assume {:verifier.code 0} true;
  $p72 := $i2p.bv64.ref($i71);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5269, 9} true;
  assume {:verifier.code 0} true;
  call $i73 := tmsdev_init($p21, $p72);
  // WARNING: %86 = call i32 @tmsdev_init(%struct.net_device* %27, %struct.device* %85), !dbg !6120, !verifier.code !5892
  call {:cexpr "ret"} boogie_si_record_bv32($i73);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5271, 7} true;
  assume {:verifier.code 0} true;
  $i74 := $ne.bv32($i73, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5271, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i74} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i74 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5274, 21} true;
  assume {:verifier.code 0} true;
  $i75 := $add.bv64(0bv64, 0bv64);
  // WARNING: %89 = add i64 0, 0, !dbg !6126, !verifier.code !5892
  call {:cexpr "__cil_tmp70"} boogie_si_record_bv64($i75);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5275, 19} true;
  assume {:verifier.code 0} true;
  $i76 := $p2i.ref.bv64($p21);
  // WARNING: %90 = ptrtoint %struct.net_device* %27 to i64, !dbg !6131, !verifier.code !5892
  call {:cexpr "__cil_tmp71"} boogie_si_record_bv64($i76);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5276, 31} true;
  assume {:verifier.code 0} true;
  $i77 := $add.bv64($i76, $i75);
  // WARNING: %91 = add i64 %90, %89, !dbg !6134, !verifier.code !5892
  call {:cexpr "__cil_tmp72"} boogie_si_record_bv64($i77);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5277, 19} true;
  assume {:verifier.code 0} true;
  $p78 := $i2p.bv64.ref($i77);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5278, 5} true;
  assume {:verifier.code 0} true;
  call $i79 := printk.ref.ref(.str.6, $p78);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5280, 5} true;
  assume {:verifier.code 0} true;
  $i80 := $i73;
  goto $bb21;
$bb20:
  assume !(($i74 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb22;
$bb21:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5365, 18} true;
  assume {:verifier.code 0} true;
  $i130 := $p2i.ref.bv64($p0);
  // WARNING: %153 = ptrtoint %struct.pci_dev* %0 to i64, !dbg !6308, !verifier.code !5892
  call {:cexpr "__cil_tmp115"} boogie_si_record_bv64($i130);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5366, 31} true;
  assume {:verifier.code 0} true;
  $i131 := $add.bv64($i130, 916bv64);
  // WARNING: %154 = add i64 %153, 916, !dbg !6312, !verifier.code !5892
  call {:cexpr "__cil_tmp116"} boogie_si_record_bv64($i131);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5367, 20} true;
  assume {:verifier.code 0} true;
  $p132 := $i2p.bv64.ref($i131);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5367, 18} true;
  assume {:verifier.code 0} true;
  $i133 := $load.bytes.bv32($M.0, $p132);
  // WARNING: %156 = load i32, i32* %155, align 4, !dbg !6316, !verifier.code !5892
  call {:cexpr "__cil_tmp117"} boogie_si_record_bv32($i133);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5368, 18} true;
  assume {:verifier.code 0} true;
  $p134 := $bitcast.ref.ref($p21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5369, 3} true;
  assume {:verifier.code 0} true;
  call free_irq($i133, $p134);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5370, 3} true;
  assume {:verifier.code 0} true;
  $i41 := $i80;
  goto $bb17;
$bb22:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5285, 3} true;
  assume {:verifier.code 0} true;
  call abyss_read_eeprom($p21);
  // WARNING: call void @abyss_read_eeprom(%struct.net_device* %27), !dbg !6142, !verifier.code !5892
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5287, 19} true;
  assume {:verifier.code 0} true;
  $i81 := $add.bv64(0bv64, 0bv64);
  // WARNING: %96 = add i64 0, 0, !dbg !6146, !verifier.code !5892
  call {:cexpr "__cil_tmp75"} boogie_si_record_bv64($i81);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5288, 17} true;
  assume {:verifier.code 0} true;
  $i82 := $p2i.ref.bv64($p21);
  // WARNING: %97 = ptrtoint %struct.net_device* %27 to i64, !dbg !6149, !verifier.code !5892
  call {:cexpr "__cil_tmp76"} boogie_si_record_bv64($i82);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5289, 29} true;
  assume {:verifier.code 0} true;
  $i83 := $add.bv64($i82, $i81);
  // WARNING: %98 = add i64 %97, %96, !dbg !6152, !verifier.code !5892
  call {:cexpr "__cil_tmp77"} boogie_si_record_bv64($i83);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5290, 17} true;
  assume {:verifier.code 0} true;
  $p84 := $i2p.bv64.ref($i83);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5291, 17} true;
  assume {:verifier.code 0} true;
  $i85 := $p2i.ref.bv64($p21);
  // WARNING: %100 = ptrtoint %struct.net_device* %27 to i64, !dbg !6158, !verifier.code !5892
  call {:cexpr "__cil_tmp79"} boogie_si_record_bv64($i85);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5292, 29} true;
  assume {:verifier.code 0} true;
  $i86 := $add.bv64($i85, 808bv64);
  // WARNING: %101 = add i64 %100, 808, !dbg !6161, !verifier.code !5892
  call {:cexpr "__cil_tmp80"} boogie_si_record_bv64($i86);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5293, 19} true;
  assume {:verifier.code 0} true;
  $p87 := $i2p.bv64.ref($i86);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5293, 17} true;
  assume {:verifier.code 0} true;
  $p88 := $load.bytes.ref($M.0, $p87);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5294, 3} true;
  assume {:verifier.code 0} true;
  call $i89 := printk.ref.ref.ref(.str.7, $p84, $p88);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5296, 14} true;
  assume {:verifier.code 0} true;
  call $p90 := netdev_priv($p21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5297, 8} true;
  assume {:verifier.code 0} true;
  $p91 := $bitcast.ref.ref($p90);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5298, 17} true;
  assume {:verifier.code 0} true;
  $i92 := $p2i.ref.bv64($p91);
  // WARNING: %107 = ptrtoint %struct.net_local* %106 to i64, !dbg !6177, !verifier.code !5892
  call {:cexpr "__cil_tmp83"} boogie_si_record_bv64($i92);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5299, 29} true;
  assume {:verifier.code 0} true;
  $i93 := $add.bv64($i92, 27936bv64);
  // WARNING: %108 = add i64 %107, 27936, !dbg !6180, !verifier.code !5892
  call {:cexpr "__cil_tmp84"} boogie_si_record_bv64($i93);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5300, 5} true;
  assume {:verifier.code 0} true;
  $p94 := $i2p.bv64.ref($i93);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5300, 61} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p94, abyss_setnselout_pins);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5301, 17} true;
  assume {:verifier.code 0} true;
  $i95 := $p2i.ref.bv64($p91);
  // WARNING: %110 = ptrtoint %struct.net_local* %106 to i64, !dbg !6185, !verifier.code !5892
  call {:cexpr "__cil_tmp85"} boogie_si_record_bv64($i95);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5302, 29} true;
  assume {:verifier.code 0} true;
  $i96 := $add.bv64($i95, 27944bv64);
  // WARNING: %111 = add i64 %110, 27944, !dbg !6188, !verifier.code !5892
  call {:cexpr "__cil_tmp86"} boogie_si_record_bv64($i96);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5303, 5} true;
  assume {:verifier.code 0} true;
  $p97 := $i2p.bv64.ref($i96);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5303, 79} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p97, abyss_sifreadb);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5304, 17} true;
  assume {:verifier.code 0} true;
  $i98 := $p2i.ref.bv64($p91);
  // WARNING: %113 = ptrtoint %struct.net_local* %106 to i64, !dbg !6193, !verifier.code !5892
  call {:cexpr "__cil_tmp87"} boogie_si_record_bv64($i98);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5305, 29} true;
  assume {:verifier.code 0} true;
  $i99 := $add.bv64($i98, 27960bv64);
  // WARNING: %114 = add i64 %113, 27960, !dbg !6196, !verifier.code !5892
  call {:cexpr "__cil_tmp88"} boogie_si_record_bv64($i99);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5306, 5} true;
  assume {:verifier.code 0} true;
  $p100 := $i2p.bv64.ref($i99);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5306, 79} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p100, abyss_sifreadw);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5307, 17} true;
  assume {:verifier.code 0} true;
  $i101 := $p2i.ref.bv64($p91);
  // WARNING: %116 = ptrtoint %struct.net_local* %106 to i64, !dbg !6201, !verifier.code !5892
  call {:cexpr "__cil_tmp89"} boogie_si_record_bv64($i101);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5308, 29} true;
  assume {:verifier.code 0} true;
  $i102 := $add.bv64($i101, 27952bv64);
  // WARNING: %117 = add i64 %116, 27952, !dbg !6204, !verifier.code !5892
  call {:cexpr "__cil_tmp90"} boogie_si_record_bv64($i102);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5309, 5} true;
  assume {:verifier.code 0} true;
  $p103 := $i2p.bv64.ref($i102);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5309, 87} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p103, abyss_sifwriteb);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5310, 17} true;
  assume {:verifier.code 0} true;
  $i104 := $p2i.ref.bv64($p91);
  // WARNING: %119 = ptrtoint %struct.net_local* %106 to i64, !dbg !6209, !verifier.code !5892
  call {:cexpr "__cil_tmp91"} boogie_si_record_bv64($i104);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5311, 29} true;
  assume {:verifier.code 0} true;
  $i105 := $add.bv64($i104, 27968bv64);
  // WARNING: %120 = add i64 %119, 27968, !dbg !6212, !verifier.code !5892
  call {:cexpr "__cil_tmp92"} boogie_si_record_bv64($i105);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5312, 5} true;
  assume {:verifier.code 0} true;
  $p106 := $i2p.bv64.ref($i105);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5312, 87} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p106, abyss_sifwritew);
  // WARNING: store void (%struct.net_device*, i16, i16)* @abyss_sifwritew, void (%struct.net_device*, i16, i16)** %121, align 8, !dbg !6216, !verifier.code !5892
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5315, 13} true;
  assume {:verifier.code 0} true;
  $i107 := $uge.bv64(19bv64, 64bv64);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5315, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i107} true;
  goto $bb23, $bb24;
$bb23:
  assume ($i107 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5318, 22} true;
  assume {:verifier.code 0} true;
  $i108 := $add.bv64(86bv64, 0bv64);
  // WARNING: %124 = add i64 86, 0, !dbg !6224, !verifier.code !5892
  call {:cexpr "__cil_tmp94"} boogie_si_record_bv64($i108);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5319, 19} true;
  assume {:verifier.code 0} true;
  $i109 := $p2i.ref.bv64($p91);
  // WARNING: %125 = ptrtoint %struct.net_local* %106 to i64, !dbg !6229, !verifier.code !5892
  call {:cexpr "__cil_tmp95"} boogie_si_record_bv64($i109);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5320, 31} true;
  assume {:verifier.code 0} true;
  $i110 := $add.bv64($i109, $i108);
  // WARNING: %126 = add i64 %125, %124, !dbg !6232, !verifier.code !5892
  call {:cexpr "__cil_tmp96"} boogie_si_record_bv64($i110);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5321, 19} true;
  assume {:verifier.code 0} true;
  $p111 := $i2p.bv64.ref($i110);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5324, 13} true;
  assume {:verifier.code 0} true;
  call $p112 := __memcpy($p111, .str.8, 19bv64);
  assume $isExternal($p112);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5326, 3} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb24:
  assume !(($i107 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5329, 23} true;
  assume {:verifier.code 0} true;
  $i113 := $add.bv64(86bv64, 0bv64);
  // WARNING: %130 = add i64 86, 0, !dbg !6248, !verifier.code !5892
  call {:cexpr "__cil_tmp101"} boogie_si_record_bv64($i113);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5330, 20} true;
  assume {:verifier.code 0} true;
  $i114 := $p2i.ref.bv64($p91);
  // WARNING: %131 = ptrtoint %struct.net_local* %106 to i64, !dbg !6253, !verifier.code !5892
  call {:cexpr "__cil_tmp102"} boogie_si_record_bv64($i114);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5331, 33} true;
  assume {:verifier.code 0} true;
  $i115 := $add.bv64($i114, $i113);
  // WARNING: %132 = add i64 %131, %130, !dbg !6256, !verifier.code !5892
  call {:cexpr "__cil_tmp103"} boogie_si_record_bv64($i115);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5332, 20} true;
  assume {:verifier.code 0} true;
  $p116 := $i2p.bv64.ref($i115);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5335, 13} true;
  assume {:verifier.code 0} true;
  call $i117 := __builtinx_memcpy.ref.ref.bv64($p116, .str.8, 19bv64);
  assume {:verifier.code 0} true;
  goto $bb25;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5339, 18} true;
  assume {:verifier.code 0} true;
  $i118 := $p2i.ref.bv64($p21);
  // WARNING: %136 = ptrtoint %struct.net_device* %27 to i64, !dbg !6267, !verifier.code !5892
  call {:cexpr "__cil_tmp107"} boogie_si_record_bv64($i118);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5340, 31} true;
  assume {:verifier.code 0} true;
  $i119 := $add.bv64($i118, 536bv64);
  // WARNING: %137 = add i64 %136, 536, !dbg !6271, !verifier.code !5892
  call {:cexpr "__cil_tmp108"} boogie_si_record_bv64($i119);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5341, 5} true;
  assume {:verifier.code 0} true;
  $p120 := $i2p.bv64.ref($i119);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5341, 53} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p120, abyss_netdev_ops);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5342, 18} true;
  assume {:verifier.code 0} true;
  $p121 := $bitcast.ref.ref($p21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5343, 3} true;
  assume {:verifier.code 0} true;
  call pci_set_drvdata($p0, $p121);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5344, 18} true;
  assume {:verifier.code 0} true;
  $i122 := $p2i.ref.bv64($p21);
  // WARNING: %140 = ptrtoint %struct.net_device* %27 to i64, !dbg !6280, !verifier.code !5892
  call {:cexpr "__cil_tmp110"} boogie_si_record_bv64($i122);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5345, 31} true;
  assume {:verifier.code 0} true;
  $i123 := $add.bv64($i122, 1192bv64);
  // WARNING: %141 = add i64 %140, 1192, !dbg !6283, !verifier.code !5892
  call {:cexpr "__cil_tmp111"} boogie_si_record_bv64($i123);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5346, 18} true;
  assume {:verifier.code 0} true;
  $i124 := $p2i.ref.bv64($p0);
  // WARNING: %142 = ptrtoint %struct.pci_dev* %0 to i64, !dbg !6286, !verifier.code !5892
  call {:cexpr "__cil_tmp112"} boogie_si_record_bv64($i124);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5347, 31} true;
  assume {:verifier.code 0} true;
  $i125 := $add.bv64($i124, 144bv64);
  // WARNING: %143 = add i64 %142, 144, !dbg !6289, !verifier.code !5892
  call {:cexpr "__cil_tmp113"} boogie_si_record_bv64($i125);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5348, 39} true;
  assume {:verifier.code 0} true;
  $p126 := $i2p.bv64.ref($i125);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5348, 5} true;
  assume {:verifier.code 0} true;
  $p127 := $i2p.bv64.ref($i123);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5348, 37} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.ref($M.0, $p127, $p126);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5349, 9} true;
  assume {:verifier.code 0} true;
  call $i128 := register_netdev($p21);
  // WARNING: %146 = call i32 @register_netdev(%struct.net_device* %27), !dbg !6295, !verifier.code !5892
  call {:cexpr "ret"} boogie_si_record_bv32($i128);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5351, 7} true;
  assume {:verifier.code 0} true;
  $i129 := $ne.bv32($i128, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5351, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i129} true;
  goto $bb26, $bb27;
$bb26:
  assume ($i129 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5352, 5} true;
  assume {:verifier.code 0} true;
  goto $bb28;
$bb27:
  assume !(($i129 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb29;
$bb28:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5360, 3} true;
  assume {:verifier.code 0} true;
  call pci_set_drvdata($p0, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5361, 3} true;
  assume {:verifier.code 0} true;
  call tmsdev_term($p21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5362, 3} true;
  assume {:verifier.code 0} true;
  $i80 := $i128;
  goto $bb21;
$bb29:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5356, 3} true;
  assume {:verifier.code 0} true;
  $i11 := 0bv32;
  goto $bb6;
}
const abyss_detach: ref;
axiom (abyss_detach == $sub.ref(0, 37105));
procedure  abyss_detach($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: bv1;
  var $i4: bv1;
  var $i5: bv32;
  var $i6: bv1;
  var $i7: bv1;
  var $i8: bv32;
  var $i9: bv1;
  var $i10: bv1;
  var $i11: bv32;
  var $i12: bv64;
  var $i13: bv64;
  var $i14: bv1;
  var $i15: bv64;
  var $i16: bv64;
  var $p17: ref;
  var $i18: bv64;
  var $i19: bv64;
  var $i20: bv64;
  var $i21: bv64;
  var $p22: ref;
  var $i23: bv32;
  var $p24: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6035, 13} true;
  assume {:verifier.code 0} true;
  call $p1 := pci_get_drvdata($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6036, 9} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6039, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6039, 13} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6042, 18} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.ref($p2, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6042, 18} true;
  assume {:verifier.code 0} true;
  $i4 := $xor.bv1($i3, 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6042, 18} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.bv1.bv32($i4);
  // WARNING: %8 = zext i1 %7 to i32, !dbg !5905, !verifier.code !5892
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv32($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6043, 18} true;
  assume {:verifier.code 0} true;
  $i6 := $ne.bv32($i5, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6043, 18} true;
  assume {:verifier.code 0} true;
  $i7 := $xor.bv1($i6, 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6043, 18} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.bv1.bv32($i7);
  // WARNING: %11 = zext i1 %10 to i32, !dbg !5910, !verifier.code !5892
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv32($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6044, 18} true;
  assume {:verifier.code 0} true;
  $i9 := $ne.bv32($i8, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6044, 18} true;
  assume {:verifier.code 0} true;
  $i10 := $xor.bv1($i9, 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6044, 18} true;
  assume {:verifier.code 0} true;
  $i11 := $zext.bv1.bv32($i10);
  // WARNING: %14 = zext i1 %13 to i32, !dbg !5913, !verifier.code !5892
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv32($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6045, 18} true;
  assume {:verifier.code 0} true;
  $i12 := $sext.bv32.bv64($i11);
  // WARNING: %15 = sext i32 %14 to i64, !dbg !5916, !verifier.code !5892
  call {:cexpr "__cil_tmp8"} boogie_si_record_bv64($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6046, 15} true;
  assume {:verifier.code 0} true;
  call $i13 := ldv__builtin_expect($i12, 0bv64);
  // WARNING: %16 = call i64 @ldv__builtin_expect(i64 %15, i64 0), !dbg !5919, !verifier.code !5892
  call {:cexpr "tmp___8"} boogie_si_record_bv64($i13);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6048, 9} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.bv64($i13, 0bv64);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6048, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i14 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6050, 7} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i14 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb11;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6050, 17} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  call devirtbounce.2(0, .str.2, 436bv32, 12bv64);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6060, 9} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6060, 19} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6060, 9} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6065, 9} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6069, 5} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6072, 5} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6077, 3} true;
  assume {:verifier.code 0} true;
  call unregister_netdev($p2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6078, 16} true;
  assume {:verifier.code 0} true;
  $i15 := $p2i.ref.bv64($p2);
  // WARNING: %28 = ptrtoint %struct.net_device* %3 to i64, !dbg !5943, !verifier.code !5892
  call {:cexpr "__cil_tmp9"} boogie_si_record_bv64($i15);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6079, 28} true;
  assume {:verifier.code 0} true;
  $i16 := $add.bv64($i15, 216bv64);
  // WARNING: %29 = add i64 %28, 216, !dbg !5946, !verifier.code !5892
  call {:cexpr "__cil_tmp10"} boogie_si_record_bv64($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6080, 19} true;
  assume {:verifier.code 0} true;
  $p17 := $i2p.bv64.ref($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6080, 17} true;
  assume {:verifier.code 0} true;
  $i18 := $load.bytes.bv64($M.0, $p17);
  // WARNING: %31 = load i64, i64* %30, align 8, !dbg !5950, !verifier.code !5892
  call {:cexpr "__cil_tmp11"} boogie_si_record_bv64($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6081, 29} true;
  assume {:verifier.code 0} true;
  $i19 := $sub.bv64($i18, 16bv64);
  // WARNING: %32 = sub i64 %31, 16, !dbg !5953, !verifier.code !5892
  call {:cexpr "__cil_tmp12"} boogie_si_record_bv64($i19);
  // WARNING: call void @llvm.dbg.value(metadata i64 %32, i64 0, metadata !6585, metadata !5891), !dbg !6586, !verifier.code !5893
  // WARNING: call void @llvm.dbg.value(metadata i64 %32, i64 0, metadata !6587, metadata !5891), !dbg !6588, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6084, 3} true;
  assume {:verifier.code 0} true;
  call __release_region(ioport_resource, $i19, 64bv64);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6085, 17} true;
  assume {:verifier.code 0} true;
  $i20 := $p2i.ref.bv64($p2);
  // WARNING: %33 = ptrtoint %struct.net_device* %3 to i64, !dbg !5961, !verifier.code !5892
  call {:cexpr "__cil_tmp15"} boogie_si_record_bv64($i20);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6086, 29} true;
  assume {:verifier.code 0} true;
  $i21 := $add.bv64($i20, 224bv64);
  // WARNING: %34 = add i64 %33, 224, !dbg !5964, !verifier.code !5892
  call {:cexpr "__cil_tmp16"} boogie_si_record_bv64($i21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6087, 19} true;
  assume {:verifier.code 0} true;
  $p22 := $i2p.bv64.ref($i21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6087, 17} true;
  assume {:verifier.code 0} true;
  $i23 := $load.bytes.bv32($M.0, $p22);
  // WARNING: %36 = load i32, i32* %35, align 4, !dbg !5968, !verifier.code !5892
  call {:cexpr "__cil_tmp17"} boogie_si_record_bv32($i23);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6088, 17} true;
  assume {:verifier.code 0} true;
  $p24 := $bitcast.ref.ref($p2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6089, 3} true;
  assume {:verifier.code 0} true;
  call free_irq($i23, $p24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6090, 3} true;
  assume {:verifier.code 0} true;
  call tmsdev_term($p2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6091, 3} true;
  assume {:verifier.code 0} true;
  call free_netdev($p2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6093, 3} true;
  assume {:verifier.code 0} true;
  call pci_set_drvdata($p0, $0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6095, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const pci_get_drvdata: ref;
axiom (pci_get_drvdata == $sub.ref(0, 38137));
procedure  pci_get_drvdata($p0: ref)
  returns ($r: ref)
{
  var $i1: bv64;
  var $i2: bv64;
  var $p3: ref;
  var $p4: ref;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4825, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.bv64($p0);
  // WARNING: %2 = ptrtoint %struct.pci_dev* %0 to i64, !dbg !5895, !verifier.code !5894
  call {:cexpr "__cil_tmp3"} boogie_si_record_bv64($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4826, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $add.bv64($i1, 144bv64);
  // WARNING: %3 = add i64 %2, 144, !dbg !5900, !verifier.code !5894
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4827, 16} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.bv64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4829, 9} true;
  assume {:verifier.code 0} true;
  call $p4 := dev_get_drvdata($p3);
  assume $isExternal($p4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4831, 3} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const ldv__builtin_expect: ref;
axiom (ldv__builtin_expect == $sub.ref(0, 39169));
procedure  ldv__builtin_expect($i0: bv64, $i1: bv64)
  returns ($r: bv64)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !6637, metadata !5891), !dbg !6638, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6399, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const unregister_netdev: ref;
axiom (unregister_netdev == $sub.ref(0, 40201));
procedure  unregister_netdev($p0: ref);
const __release_region: ref;
axiom (__release_region == $sub.ref(0, 41233));
procedure  __release_region($p0: ref, $i1: bv64, $i2: bv64);
const free_irq: ref;
axiom (free_irq == $sub.ref(0, 42265));
procedure  free_irq($i0: bv32, $p1: ref);
const tmsdev_term: ref;
axiom (tmsdev_term == $sub.ref(0, 43297));
procedure  tmsdev_term($p0: ref);
const free_netdev: ref;
axiom (free_netdev == $sub.ref(0, 44329));
procedure  free_netdev($p0: ref);
const pci_set_drvdata: ref;
axiom (pci_set_drvdata == $sub.ref(0, 45361));
procedure  pci_set_drvdata($p0: ref, $p1: ref)
{
  var $i2: bv64;
  var $i3: bv64;
  var $p4: ref;
  var $i5: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4842, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $p2i.ref.bv64($p0);
  // WARNING: %3 = ptrtoint %struct.pci_dev* %0 to i64, !dbg !5897, !verifier.code !5894
  call {:cexpr "__cil_tmp3"} boogie_si_record_bv64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4843, 27} true;
  assume {:verifier.code 0} true;
  $i3 := $add.bv64($i2, 144bv64);
  // WARNING: %4 = add i64 %3, 144, !dbg !5902, !verifier.code !5894
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4844, 16} true;
  assume {:verifier.code 0} true;
  $p4 := $i2p.bv64.ref($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4845, 3} true;
  assume {:verifier.code 0} true;
  call $i5 := dev_set_drvdata($p4, $p1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4847, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const dev_set_drvdata: ref;
axiom (dev_set_drvdata == $sub.ref(0, 46393));
procedure  dev_set_drvdata($p0: ref, $p1: ref)
  returns ($r: bv32);
const dev_get_drvdata: ref;
axiom (dev_get_drvdata == $sub.ref(0, 47425));
procedure  dev_get_drvdata($p0: ref)
  returns ($r: ref);
const printk: ref;
axiom (printk == $sub.ref(0, 48457));
procedure  printk.ref.ref.bv32($p0: ref, p.1: ref, p.2: bv32)
  returns ($r: bv32);
procedure  printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref)
  returns ($r: bv32);
procedure  printk.ref.ref($p0: ref, p.1: ref)
  returns ($r: bv32);
procedure  printk.ref.ref.bv64.bv32($p0: ref, p.1: ref, p.2: bv64, p.3: bv32)
  returns ($r: bv32);
const pci_enable_device: ref;
axiom (pci_enable_device == $sub.ref(0, 49489));
procedure  pci_enable_device($p0: ref)
  returns ($r: bv32);
const alloc_trdev: ref;
axiom (alloc_trdev == $sub.ref(0, 50521));
procedure  alloc_trdev($i0: bv32)
  returns ($r: ref);
const __request_region: ref;
axiom (__request_region == $sub.ref(0, 51553));
procedure  __request_region($p0: ref, $i1: bv64, $i2: bv64, $p3: ref, $i4: bv32)
  returns ($r: ref);
const tms380tr_interrupt: ref;
axiom (tms380tr_interrupt == $sub.ref(0, 52585));
procedure  tms380tr_interrupt($i0: bv32, $p1: ref)
  returns ($r: bv32);
const request_irq: ref;
axiom (request_irq == $sub.ref(0, 53617));
procedure  request_irq($i0: bv32, $p1: ref, $i2: bv64, $p3: ref, $p4: ref)
  returns ($r: bv32)
{
  var $p5: ref;
  var $i6: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 (i32, i8*)* %1, i64 0, metadata !6668, metadata !5891), !dbg !6669, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4898, 16} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($0.ref);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4899, 19} true;
  assume {:verifier.code 0} true;
  call $i6 := request_threaded_irq($i0, $p1, $p5, $i2, $p3, $p4);
  // WARNING: %7 = call i32 @request_threaded_irq(i32 %0, i32 (i32, i8*)* %1, i32 (i32, i8*)* %6, i64 %2, i8* %3, i8* %4), !dbg !5910, !verifier.code !5894
  call {:cexpr "tmp___7"} boogie_si_record_bv32($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4901, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const tmsdev_init: ref;
axiom (tmsdev_init == $sub.ref(0, 54649));
procedure  tmsdev_init($p0: ref, $p1: ref)
  returns ($r: bv32);
const abyss_read_eeprom: ref;
axiom (abyss_read_eeprom == $sub.ref(0, 55681));
procedure  abyss_read_eeprom($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: bv64;
  var $i4: bv64;
  var $p5: ref;
  var $i6: bv64;
  var $i7: bv64;
  var $i8: bv8;
  var $i9: bv16;
  var $i10: bv1;
  var $i11: bv64;
  var $i12: bv64;
  var $p13: ref;
  var $i14: bv64;
  var $i15: bv64;
  var $p16: ref;
  var $i17: bv64;
  var $i18: bv64;
  var $i19: bv64;
  var $p20: ref;
  var $i21: bv64;
  var $i22: bv64;
  var $p23: ref;
  var $i24: bv32;
  var $i25: bv32;
  var $i26: bv64;
  var $i27: bv8;
  var $i28: bv32;
  var $i29: bv32;
  var $i30: bv16;
  var $i31: bv64;
  var $i32: bv64;
  var $i33: bv64;
  var $p34: ref;
  var $i35: bv32;
  var $i36: bv32;
  var $i37: bv64;
  var $i38: bv64;
  var $p39: ref;
  var $i40: bv32;
  var $i41: bv1;
  var $i42: bv64;
  var $i43: bv64;
  var $p44: ref;
  var $p45: ref;
  var $i46: bv64;
  var $p47: ref;
  var $i48: bv64;
  var $i49: bv32;
  var $i50: bv8;
  var $i51: bv8;
  var $i52: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5918, 13} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5919, 8} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5920, 17} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.bv64($p0);
  // WARNING: %4 = ptrtoint %struct.net_device* %0 to i64, !dbg !5903, !verifier.code !5892
  call {:cexpr "__cil_tmp10"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5921, 29} true;
  assume {:verifier.code 0} true;
  $i4 := $add.bv64($i3, 216bv64);
  // WARNING: %5 = add i64 %4, 216, !dbg !5906, !verifier.code !5892
  call {:cexpr "__cil_tmp11"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5922, 14} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.bv64.ref($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5922, 12} true;
  assume {:verifier.code 0} true;
  $i6 := $load.bytes.bv64($M.0, $p5);
  // WARNING: %7 = load i64, i64* %6, align 8, !dbg !5910, !verifier.code !5892
  call {:cexpr "ioaddr"} boogie_si_record_bv64($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5923, 3} true;
  assume {:verifier.code 0} true;
  call abyss_enable($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5924, 24} true;
  assume {:verifier.code 0} true;
  $i7 := $add.bv64($i6, $sub.bv64(0bv64, 9bv64));
  // WARNING: %8 = add i64 %7, -9, !dbg !5914, !verifier.code !5892
  call {:cexpr "__cil_tmp12"} boogie_si_record_bv64($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5925, 13} true;
  assume {:verifier.code 0} true;
  call $i8 := at24_readb($i7, 24bv8);
  // WARNING: %9 = call zeroext i8 @at24_readb(i64 %8, i8 zeroext 24), !dbg !5917, !verifier.code !5892
  call {:cexpr "tmp___8"} boogie_si_record_bv8($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5926, 9} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.bv8.bv16($i8);
  // WARNING: %10 = zext i8 %9 to i16, !dbg !5920, !verifier.code !5892
  call {:cexpr "val"} boogie_si_record_bv16($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5928, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.bv16($i9, 0bv16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5928, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i10 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5929, 19} true;
  assume {:verifier.code 0} true;
  $i11 := $p2i.ref.bv64($p2);
  // WARNING: %13 = ptrtoint %struct.net_local* %3 to i64, !dbg !5926, !verifier.code !5892
  call {:cexpr "__cil_tmp13"} boogie_si_record_bv64($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5930, 31} true;
  assume {:verifier.code 0} true;
  $i12 := $add.bv64($i11, 27560bv64);
  // WARNING: %14 = add i64 %13, 27560, !dbg !5930, !verifier.code !5892
  call {:cexpr "__cil_tmp14"} boogie_si_record_bv64($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5931, 7} true;
  assume {:verifier.code 0} true;
  $p13 := $i2p.bv64.ref($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5931, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p13, 4bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5932, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i10 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5933, 19} true;
  assume {:verifier.code 0} true;
  $i14 := $p2i.ref.bv64($p2);
  // WARNING: %17 = ptrtoint %struct.net_local* %3 to i64, !dbg !5936, !verifier.code !5892
  call {:cexpr "__cil_tmp15"} boogie_si_record_bv64($i14);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5934, 31} true;
  assume {:verifier.code 0} true;
  $i15 := $add.bv64($i14, 27560bv64);
  // WARNING: %18 = add i64 %17, 27560, !dbg !5940, !verifier.code !5892
  call {:cexpr "__cil_tmp16"} boogie_si_record_bv64($i15);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5935, 7} true;
  assume {:verifier.code 0} true;
  $p16 := $i2p.bv64.ref($i15);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5935, 27} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv32($M.0, $p16, 16bv32);
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5939, 19} true;
  assume {:verifier.code 0} true;
  $i17 := $add.bv64(0bv64, 0bv64);
  // WARNING: %21 = add i64 0, 0, !dbg !5947, !verifier.code !5892
  call {:cexpr "__cil_tmp18"} boogie_si_record_bv64($i17);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5940, 17} true;
  assume {:verifier.code 0} true;
  $i18 := $p2i.ref.bv64($p0);
  // WARNING: %22 = ptrtoint %struct.net_device* %0 to i64, !dbg !5951, !verifier.code !5892
  call {:cexpr "__cil_tmp19"} boogie_si_record_bv64($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5941, 29} true;
  assume {:verifier.code 0} true;
  $i19 := $add.bv64($i18, $i17);
  // WARNING: %23 = add i64 %22, %21, !dbg !5954, !verifier.code !5892
  call {:cexpr "__cil_tmp20"} boogie_si_record_bv64($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5942, 17} true;
  assume {:verifier.code 0} true;
  $p20 := $i2p.bv64.ref($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5943, 17} true;
  assume {:verifier.code 0} true;
  $i21 := $p2i.ref.bv64($p2);
  // WARNING: %25 = ptrtoint %struct.net_local* %3 to i64, !dbg !5960, !verifier.code !5892
  call {:cexpr "__cil_tmp22"} boogie_si_record_bv64($i21);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5944, 29} true;
  assume {:verifier.code 0} true;
  $i22 := $add.bv64($i21, 27560bv64);
  // WARNING: %26 = add i64 %25, 27560, !dbg !5963, !verifier.code !5892
  call {:cexpr "__cil_tmp23"} boogie_si_record_bv64($i22);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5945, 19} true;
  assume {:verifier.code 0} true;
  $p23 := $i2p.bv64.ref($i22);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5945, 17} true;
  assume {:verifier.code 0} true;
  $i24 := $load.bytes.bv32($M.0, $p23);
  // WARNING: %28 = load i32, i32* %27, align 4, !dbg !5967, !verifier.code !5892
  call {:cexpr "__cil_tmp24"} boogie_si_record_bv32($i24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5946, 3} true;
  assume {:verifier.code 0} true;
  call $i25 := printk.ref.ref.bv32(.str.9, $p20, $i24);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5947, 24} true;
  assume {:verifier.code 0} true;
  $i26 := $add.bv64($i6, $sub.bv64(0bv64, 9bv64));
  // WARNING: %30 = add i64 %7, -9, !dbg !5971, !verifier.code !5892
  call {:cexpr "__cil_tmp25"} boogie_si_record_bv64($i26);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5948, 13} true;
  assume {:verifier.code 0} true;
  call $i27 := at24_readb($i26, 26bv8);
  // WARNING: %31 = call zeroext i8 @at24_readb(i64 %30, i8 zeroext 26), !dbg !5974, !verifier.code !5892
  call {:cexpr "tmp___9"} boogie_si_record_bv8($i27);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5949, 17} true;
  assume {:verifier.code 0} true;
  $i28 := $zext.bv8.bv32($i27);
  // WARNING: %32 = zext i8 %31 to i32, !dbg !5977, !verifier.code !5892
  call {:cexpr "__cil_tmp26"} boogie_si_record_bv32($i28);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5950, 29} true;
  assume {:verifier.code 0} true;
  $i29 := $mul.bv32($i28, 128bv32);
  // WARNING: %33 = mul nsw i32 %32, 128, !dbg !5980, !verifier.code !5892
  call {:cexpr "__cil_tmp27"} boogie_si_record_bv32($i29);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5951, 9} true;
  assume {:verifier.code 0} true;
  $i30 := $trunc.bv32.bv16($i29);
  // WARNING: %34 = trunc i32 %33 to i16, !dbg !5983, !verifier.code !5892
  call {:cexpr "val"} boogie_si_record_bv16($i30);
  // WARNING: call void @llvm.dbg.value(metadata i16 %34, i64 0, metadata !6718, metadata !5891), !dbg !6719, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5953, 19} true;
  assume {:verifier.code 0} true;
  $i31 := $add.bv64(0bv64, 0bv64);
  // WARNING: %35 = add i64 0, 0, !dbg !5986, !verifier.code !5892
  call {:cexpr "__cil_tmp29"} boogie_si_record_bv64($i31);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5954, 17} true;
  assume {:verifier.code 0} true;
  $i32 := $p2i.ref.bv64($p0);
  // WARNING: %36 = ptrtoint %struct.net_device* %0 to i64, !dbg !5989, !verifier.code !5892
  call {:cexpr "__cil_tmp30"} boogie_si_record_bv64($i32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5955, 29} true;
  assume {:verifier.code 0} true;
  $i33 := $add.bv64($i32, $i31);
  // WARNING: %37 = add i64 %36, %35, !dbg !5992, !verifier.code !5892
  call {:cexpr "__cil_tmp31"} boogie_si_record_bv64($i33);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5956, 17} true;
  assume {:verifier.code 0} true;
  $p34 := $i2p.bv64.ref($i33);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5957, 17} true;
  assume {:verifier.code 0} true;
  $i35 := $zext.bv16.bv32($i30);
  // WARNING: %39 = zext i16 %34 to i32, !dbg !5998, !verifier.code !5892
  call {:cexpr "__cil_tmp33"} boogie_si_record_bv32($i35);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5958, 3} true;
  assume {:verifier.code 0} true;
  call $i36 := printk.ref.ref.bv32(.str.10, $p34, $i35);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5959, 17} true;
  assume {:verifier.code 0} true;
  $i37 := $p2i.ref.bv64($p0);
  // WARNING: %41 = ptrtoint %struct.net_device* %0 to i64, !dbg !6002, !verifier.code !5892
  call {:cexpr "__cil_tmp34"} boogie_si_record_bv64($i37);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5960, 29} true;
  assume {:verifier.code 0} true;
  $i38 := $add.bv64($i37, 621bv64);
  // WARNING: %42 = add i64 %41, 621, !dbg !6005, !verifier.code !5892
  call {:cexpr "__cil_tmp35"} boogie_si_record_bv64($i38);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5961, 5} true;
  assume {:verifier.code 0} true;
  $p39 := $i2p.bv64.ref($i38);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5961, 35} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv8($M.0, $p39, 6bv8);
  // WARNING: store i8 6, i8* %43, align 1, !dbg !6009, !verifier.code !5892
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5965, 3} true;
  assume {:verifier.code 0} true;
  $i40 := 0bv32;
  goto $bb4;
$bb4:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5965, 13} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5967, 11} true;
  assume {:verifier.code 0} true;
  $i41 := $slt.bv32($i40, 6bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5967, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i41 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5969, 5} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !(($i41 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5970, 7} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5973, 19} true;
  assume {:verifier.code 0} true;
  $i42 := $p2i.ref.bv64($p0);
  // WARNING: %50 = ptrtoint %struct.net_device* %0 to i64, !dbg !6024, !verifier.code !5892
  call {:cexpr "__cil_tmp36"} boogie_si_record_bv64($i42);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5974, 31} true;
  assume {:verifier.code 0} true;
  $i43 := $add.bv64($i42, 808bv64);
  // WARNING: %51 = add i64 %50, 808, !dbg !6028, !verifier.code !5892
  call {:cexpr "__cil_tmp37"} boogie_si_record_bv64($i43);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5975, 21} true;
  assume {:verifier.code 0} true;
  $p44 := $i2p.bv64.ref($i43);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5975, 19} true;
  assume {:verifier.code 0} true;
  $p45 := $load.bytes.ref($M.0, $p44);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5976, 31} true;
  assume {:verifier.code 0} true;
  $i46 := $sext.bv32.bv64($i40);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5976, 31} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($p45, $mul.ref($bv2int.64($i46), 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5977, 26} true;
  assume {:verifier.code 0} true;
  $i48 := $add.bv64($i6, $sub.bv64(0bv64, 9bv64));
  // WARNING: %56 = add i64 %7, -9, !dbg !6038, !verifier.code !5892
  call {:cexpr "__cil_tmp40"} boogie_si_record_bv64($i48);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5978, 22} true;
  assume {:verifier.code 0} true;
  $i49 := $add.bv32(18bv32, $i40);
  // WARNING: %57 = add nsw i32 18, %.0, !dbg !6041, !verifier.code !5892
  call {:cexpr "__cil_tmp41"} boogie_si_record_bv32($i49);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5979, 19} true;
  assume {:verifier.code 0} true;
  $i50 := $trunc.bv32.bv8($i49);
  // WARNING: %58 = trunc i32 %57 to i8, !dbg !6044, !verifier.code !5892
  call {:cexpr "__cil_tmp42"} boogie_si_record_bv8($i50);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5980, 20} true;
  assume {:verifier.code 0} true;
  call $i51 := at24_readb($i48, $i50);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5980, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bytes.bv8($M.0, $p47, $i51);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5981, 11} true;
  assume {:verifier.code 0} true;
  $i52 := $add.bv32($i40, 1bv32);
  // WARNING: %60 = add nsw i32 %.0, 1, !dbg !6049, !verifier.code !5892
  call {:cexpr "i"} boogie_si_record_bv32($i52);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5965, 3} true;
  assume {:verifier.code 0} true;
  $i40 := $i52;
  goto $bb4;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5986, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const netdev_priv: ref;
axiom (netdev_priv == $sub.ref(0, 56713));
procedure  netdev_priv($p0: ref)
  returns ($r: ref)
{
  var $i1: bv64;
  var $p2: ref;
  var $p3: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !6854, metadata !5891), !dbg !6855, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4860, 27} true;
  assume {:verifier.code 0} true;
  $i1 := $and.bv64(2159bv64, $sub.bv64(0bv64, 32bv64));
  // WARNING: %2 = and i64 2159, -32, !dbg !5897, !verifier.code !5894
  call {:cexpr "__cil_tmp3"} boogie_si_record_bv64($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4861, 16} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4862, 27} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p2, $mul.ref($bv2int.64($i1), 1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4863, 3} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const abyss_setnselout_pins: ref;
axiom (abyss_setnselout_pins == $sub.ref(0, 57745));
procedure  abyss_setnselout_pins($p0: ref)
  returns ($r: bv16)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: bv64;
  var $i4: bv64;
  var $p5: ref;
  var $i6: bv32;
  var $i7: bv1;
  var $i8: bv32;
  var $i9: bv32;
  var $i10: bv16;
  var $i12: bv32;
  var $i13: bv16;
  var $i11: bv16;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !6871, metadata !5891), !dbg !6872, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5400, 13} true;
  assume {:verifier.code 0} true;
  call $p1 := netdev_priv($p0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5401, 8} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5404, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.bv64($p2);
  // WARNING: %4 = ptrtoint %struct.net_local* %3 to i64, !dbg !5905, !verifier.code !5892
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5405, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $add.bv64($i3, 27560bv64);
  // WARNING: %5 = add i64 %4, 27560, !dbg !5909, !verifier.code !5892
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5406, 18} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.bv64.ref($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5406, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $load.bytes.bv32($M.0, $p5);
  // WARNING: %7 = load i32, i32* %6, align 4, !dbg !5913, !verifier.code !5892
  call {:cexpr "__cil_tmp8"} boogie_si_record_bv32($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5407, 18} true;
  assume {:verifier.code 0} true;
  $i7 := $eq.bv32($i6, 4bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5407, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5408, 18} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.bv16.bv32(0bv16);
  // WARNING: %10 = zext i16 0 to i32, !dbg !5919, !verifier.code !5892
  call {:cexpr "__cil_tmp9"} boogie_si_record_bv32($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5409, 30} true;
  assume {:verifier.code 0} true;
  $i9 := $or.bv32($i8, 1bv32);
  // WARNING: %11 = or i32 %10, 1, !dbg !5923, !verifier.code !5892
  call {:cexpr "__cil_tmp10"} boogie_si_record_bv32($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5410, 11} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.bv32.bv16($i9);
  // WARNING: %12 = trunc i32 %11 to i16, !dbg !5926, !verifier.code !5892
  call {:cexpr "val"} boogie_si_record_bv16($i10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5411, 3} true;
  assume {:verifier.code 0} true;
  $i11 := $i10;
  goto $bb3;
$bb2:
  assume !(($i7 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5412, 19} true;
  assume {:verifier.code 0} true;
  $i12 := $zext.bv16.bv32(0bv16);
  // WARNING: %14 = zext i16 0 to i32, !dbg !5928, !verifier.code !5892
  call {:cexpr "__cil_tmp11"} boogie_si_record_bv32($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5413, 11} true;
  assume {:verifier.code 0} true;
  $i13 := $trunc.bv32.bv16($i12);
  // WARNING: %15 = trunc i32 %14 to i16, !dbg !5932, !verifier.code !5892
  call {:cexpr "val"} boogie_si_record_bv16($i13);
  assume {:verifier.code 0} true;
  $i11 := $i13;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5416, 3} true;
  assume {:verifier.code 0} true;
  $r := $i11;
  $exn := false;
  return;
}
const abyss_sifreadb: ref;
axiom (abyss_sifreadb == $sub.ref(0, 58777));
procedure  abyss_sifreadb($p0: ref, $i1: bv16)
  returns ($r: bv16)
{
  var $i2: bv64;
  var $i3: bv64;
  var $i4: bv64;
  var $p5: ref;
  var $i6: bv64;
  var $i7: bv64;
  var $i8: bv32;
  var $i9: bv8;
  var $i10: bv16;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !6915, metadata !5891), !dbg !6916, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4961, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.bv16.bv64($i1);
  // WARNING: %3 = zext i16 %1 to i64, !dbg !5895, !verifier.code !5892
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4962, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.bv64($p0);
  // WARNING: %4 = ptrtoint %struct.net_device* %0 to i64, !dbg !5900, !verifier.code !5892
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4963, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $add.bv64($i3, 216bv64);
  // WARNING: %5 = add i64 %4, 216, !dbg !5903, !verifier.code !5892
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4964, 18} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.bv64.ref($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4964, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $load.bytes.bv64($M.0, $p5);
  // WARNING: %7 = load i64, i64* %6, align 8, !dbg !5907, !verifier.code !5892
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv64($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4965, 27} true;
  assume {:verifier.code 0} true;
  $i7 := $add.bv64($i6, $i2);
  // WARNING: %8 = add i64 %7, %3, !dbg !5910, !verifier.code !5892
  call {:cexpr "__cil_tmp8"} boogie_si_record_bv64($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4966, 16} true;
  assume {:verifier.code 0} true;
  $i8 := $trunc.bv64.bv32($i7);
  // WARNING: %9 = trunc i64 %8 to i32, !dbg !5913, !verifier.code !5892
  call {:cexpr "__cil_tmp9"} boogie_si_record_bv32($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4967, 13} true;
  assume {:verifier.code 0} true;
  call $i9 := inb($i8);
  // WARNING: %10 = call zeroext i8 @inb(i32 %9), !dbg !5916, !verifier.code !5892
  call {:cexpr "tmp___7"} boogie_si_record_bv8($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4969, 11} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.bv8.bv16($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4969, 3} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const abyss_sifreadw: ref;
axiom (abyss_sifreadw == $sub.ref(0, 59809));
procedure  abyss_sifreadw($p0: ref, $i1: bv16)
  returns ($r: bv16)
{
  var $i2: bv64;
  var $i3: bv64;
  var $i4: bv64;
  var $p5: ref;
  var $i6: bv64;
  var $i7: bv64;
  var $i8: bv32;
  var $i9: bv16;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !6946, metadata !5891), !dbg !6947, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4983, 16} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.bv16.bv64($i1);
  // WARNING: %3 = zext i16 %1 to i64, !dbg !5895, !verifier.code !5892
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4984, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $p2i.ref.bv64($p0);
  // WARNING: %4 = ptrtoint %struct.net_device* %0 to i64, !dbg !5900, !verifier.code !5892
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4985, 27} true;
  assume {:verifier.code 0} true;
  $i4 := $add.bv64($i3, 216bv64);
  // WARNING: %5 = add i64 %4, 216, !dbg !5903, !verifier.code !5892
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4986, 18} true;
  assume {:verifier.code 0} true;
  $p5 := $i2p.bv64.ref($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4986, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $load.bytes.bv64($M.0, $p5);
  // WARNING: %7 = load i64, i64* %6, align 8, !dbg !5907, !verifier.code !5892
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv64($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4987, 27} true;
  assume {:verifier.code 0} true;
  $i7 := $add.bv64($i6, $i2);
  // WARNING: %8 = add i64 %7, %3, !dbg !5910, !verifier.code !5892
  call {:cexpr "__cil_tmp8"} boogie_si_record_bv64($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4988, 16} true;
  assume {:verifier.code 0} true;
  $i8 := $trunc.bv64.bv32($i7);
  // WARNING: %9 = trunc i64 %8 to i32, !dbg !5913, !verifier.code !5892
  call {:cexpr "__cil_tmp9"} boogie_si_record_bv32($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4989, 13} true;
  assume {:verifier.code 0} true;
  call $i9 := inw($i8);
  // WARNING: %10 = call zeroext i16 @inw(i32 %9), !dbg !5916, !verifier.code !5892
  call {:cexpr "tmp___7"} boogie_si_record_bv16($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4991, 3} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
}
const abyss_sifwriteb: ref;
axiom (abyss_sifwriteb == $sub.ref(0, 60841));
procedure  abyss_sifwriteb($p0: ref, $i1: bv16, $i2: bv16)
{
  var $i3: bv8;
  var $i4: bv64;
  var $i5: bv64;
  var $i6: bv64;
  var $p7: ref;
  var $i8: bv64;
  var $i9: bv64;
  var $i10: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !6976, metadata !5891), !dbg !6977, !verifier.code !5893
  // WARNING: call void @llvm.dbg.value(metadata i16 %1, i64 0, metadata !6978, metadata !5891), !dbg !6979, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5005, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.bv16.bv8($i1);
  // WARNING: %4 = trunc i16 %1 to i8, !dbg !5897, !verifier.code !5892
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv8($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5006, 16} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.bv16.bv64($i2);
  // WARNING: %5 = zext i16 %2 to i64, !dbg !5902, !verifier.code !5892
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5007, 16} true;
  assume {:verifier.code 0} true;
  $i5 := $p2i.ref.bv64($p0);
  // WARNING: %6 = ptrtoint %struct.net_device* %0 to i64, !dbg !5905, !verifier.code !5892
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv64($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5008, 27} true;
  assume {:verifier.code 0} true;
  $i6 := $add.bv64($i5, 216bv64);
  // WARNING: %7 = add i64 %6, 216, !dbg !5908, !verifier.code !5892
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv64($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5009, 18} true;
  assume {:verifier.code 0} true;
  $p7 := $i2p.bv64.ref($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5009, 16} true;
  assume {:verifier.code 0} true;
  $i8 := $load.bytes.bv64($M.0, $p7);
  // WARNING: %9 = load i64, i64* %8, align 8, !dbg !5912, !verifier.code !5892
  call {:cexpr "__cil_tmp8"} boogie_si_record_bv64($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5010, 27} true;
  assume {:verifier.code 0} true;
  $i9 := $add.bv64($i8, $i4);
  // WARNING: %10 = add i64 %9, %5, !dbg !5915, !verifier.code !5892
  call {:cexpr "__cil_tmp9"} boogie_si_record_bv64($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5011, 17} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.bv64.bv32($i9);
  // WARNING: %11 = trunc i64 %10 to i32, !dbg !5918, !verifier.code !5892
  call {:cexpr "__cil_tmp10"} boogie_si_record_bv32($i10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5012, 3} true;
  assume {:verifier.code 0} true;
  call outb($i3, $i10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5014, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const abyss_sifwritew: ref;
axiom (abyss_sifwritew == $sub.ref(0, 61873));
procedure  abyss_sifwritew($p0: ref, $i1: bv16, $i2: bv16)
{
  var $i3: bv64;
  var $i4: bv64;
  var $i5: bv64;
  var $p6: ref;
  var $i7: bv64;
  var $i8: bv64;
  var $i9: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata %struct.net_device* %0, i64 0, metadata !7009, metadata !5891), !dbg !7010, !verifier.code !5893
  // WARNING: call void @llvm.dbg.value(metadata i16 %1, i64 0, metadata !7011, metadata !5891), !dbg !7012, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5027, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.bv16.bv64($i2);
  // WARNING: %4 = zext i16 %2 to i64, !dbg !5897, !verifier.code !5892
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5028, 16} true;
  assume {:verifier.code 0} true;
  $i4 := $p2i.ref.bv64($p0);
  // WARNING: %5 = ptrtoint %struct.net_device* %0 to i64, !dbg !5902, !verifier.code !5892
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5029, 27} true;
  assume {:verifier.code 0} true;
  $i5 := $add.bv64($i4, 216bv64);
  // WARNING: %6 = add i64 %5, 216, !dbg !5905, !verifier.code !5892
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv64($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5030, 18} true;
  assume {:verifier.code 0} true;
  $p6 := $i2p.bv64.ref($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5030, 16} true;
  assume {:verifier.code 0} true;
  $i7 := $load.bytes.bv64($M.0, $p6);
  // WARNING: %8 = load i64, i64* %7, align 8, !dbg !5909, !verifier.code !5892
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv64($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5031, 27} true;
  assume {:verifier.code 0} true;
  $i8 := $add.bv64($i7, $i3);
  // WARNING: %9 = add i64 %8, %4, !dbg !5912, !verifier.code !5892
  call {:cexpr "__cil_tmp8"} boogie_si_record_bv64($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5032, 16} true;
  assume {:verifier.code 0} true;
  $i9 := $trunc.bv64.bv32($i8);
  // WARNING: %10 = trunc i64 %9 to i32, !dbg !5915, !verifier.code !5892
  call {:cexpr "__cil_tmp9"} boogie_si_record_bv32($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5033, 3} true;
  assume {:verifier.code 0} true;
  call outw($i1, $i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5035, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __memcpy: ref;
axiom (__memcpy == $sub.ref(0, 62905));
procedure  __memcpy($p0: ref, $p1: ref, $i2: bv64)
  returns ($r: ref);
const __builtinx_memcpy: ref;
axiom (__builtinx_memcpy == $sub.ref(0, 63937));
procedure  __builtinx_memcpy.ref.ref.bv64(p.0: ref, p.1: ref, p.2: bv64)
  returns ($r: bv32);
const register_netdev: ref;
axiom (register_netdev == $sub.ref(0, 64969));
procedure  register_netdev($p0: ref)
  returns ($r: bv32);
const outw: ref;
axiom (outw == $sub.ref(0, 66001));
procedure  outw($i0: bv16, $i1: bv32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i16 %0, i64 0, metadata !7041, metadata !5891), !dbg !7042, !verifier.code !5893
  call devirtbounce.3(0, $i0, $i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4789, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const inw: ref;
axiom (inw == $sub.ref(0, 67033));
procedure  inw($i0: bv32)
  returns ($r: bv16)
{
  var $i1: bv16;
$bb0:
  call $i1 := devirtbounce.4(0, $i0);
  // WARNING: %2 = call i16 @devirtbounce.4(i16 (i32)* asm sideeffect "inw ${1:w}, ${0:w}", "={ax},N{dx},~{dirflag},~{fpsr},~{flags}", i32 %0)
  call {:cexpr "value"} boogie_si_record_bv16($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 4802, 3} true;
  assume {:verifier.code 0} true;
  $r := $i1;
  $exn := false;
  return;
}
const abyss_enable: ref;
axiom (abyss_enable == $sub.ref(0, 68065));
procedure  abyss_enable($p0: ref)
{
  var $i1: bv64;
  var $i2: bv64;
  var $p3: ref;
  var $i4: bv64;
  var $i5: bv64;
  var $i6: bv32;
  var $i7: bv8;
  var $i8: bv32;
  var $i9: bv32;
  var $i10: bv8;
  var $i11: bv64;
  var $i12: bv32;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5754, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $p2i.ref.bv64($p0);
  // WARNING: %2 = ptrtoint %struct.net_device* %0 to i64, !dbg !5893, !verifier.code !5892
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv64($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5755, 27} true;
  assume {:verifier.code 0} true;
  $i2 := $add.bv64($i1, 216bv64);
  // WARNING: %3 = add i64 %2, 216, !dbg !5898, !verifier.code !5892
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv64($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5756, 14} true;
  assume {:verifier.code 0} true;
  $p3 := $i2p.bv64.ref($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5756, 12} true;
  assume {:verifier.code 0} true;
  $i4 := $load.bytes.bv64($M.0, $p3);
  // WARNING: %5 = load i64, i64* %4, align 8, !dbg !5902, !verifier.code !5892
  call {:cexpr "ioaddr"} boogie_si_record_bv64($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5757, 23} true;
  assume {:verifier.code 0} true;
  $i5 := $add.bv64($i4, $sub.bv64(0bv64, 12bv64));
  // WARNING: %6 = add i64 %5, -12, !dbg !5905, !verifier.code !5892
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv64($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5758, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.bv64.bv32($i5);
  // WARNING: %7 = trunc i64 %6 to i32, !dbg !5908, !verifier.code !5892
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv32($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5759, 15} true;
  assume {:verifier.code 0} true;
  call $i7 := inb($i6);
  // WARNING: %8 = call zeroext i8 @inb(i32 %7), !dbg !5911, !verifier.code !5892
  call {:cexpr "reset_reg"} boogie_si_record_bv8($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5760, 16} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.bv8.bv32($i7);
  // WARNING: %9 = zext i8 %8 to i32, !dbg !5914, !verifier.code !5892
  call {:cexpr "__cil_tmp8"} boogie_si_record_bv32($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5761, 27} true;
  assume {:verifier.code 0} true;
  $i9 := $or.bv32($i8, 1bv32);
  // WARNING: %10 = or i32 %9, 1, !dbg !5917, !verifier.code !5892
  call {:cexpr "__cil_tmp9"} boogie_si_record_bv32($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5762, 15} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.bv32.bv8($i9);
  // WARNING: %11 = trunc i32 %10 to i8, !dbg !5920, !verifier.code !5892
  call {:cexpr "reset_reg"} boogie_si_record_bv8($i10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5763, 24} true;
  assume {:verifier.code 0} true;
  $i11 := $add.bv64($i4, $sub.bv64(0bv64, 12bv64));
  // WARNING: %12 = add i64 %5, -12, !dbg !5921, !verifier.code !5892
  call {:cexpr "__cil_tmp10"} boogie_si_record_bv64($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5764, 17} true;
  assume {:verifier.code 0} true;
  $i12 := $trunc.bv64.bv32($i11);
  // WARNING: %13 = trunc i64 %12 to i32, !dbg !5924, !verifier.code !5892
  call {:cexpr "__cil_tmp11"} boogie_si_record_bv32($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5765, 3} true;
  assume {:verifier.code 0} true;
  call outb($i10, $i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5766, 3} true;
  assume {:verifier.code 0} true;
  call tms380tr_wait(100bv64);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5768, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const at24_readb: ref;
axiom (at24_readb == $sub.ref(0, 69097));
procedure  at24_readb($i0: bv64, $i1: bv8)
  returns ($r: bv8)
{
  var $i2: bv32;
  var $i3: bv1;
  var $i4: bv32;
  var $i5: bv1;
  var $i6: bv8;
  var $i7: bv32;
  var $i8: bv1;
  var $i9: bv8;
  var $i10: bv8;
  var $i11: bv8;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !7099, metadata !5891), !dbg !7100, !verifier.code !5893
  // WARNING: call void @llvm.dbg.value(metadata i8 %1, i64 0, metadata !7101, metadata !5891), !dbg !7102, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5715, 13} true;
  assume {:verifier.code 0} true;
  call $i2 := at24_sendfullcmd($i0, $sub.bv8(0bv8, 96bv8), $i1);
  // WARNING: %3 = call i32 @at24_sendfullcmd(i64 %0, i8 zeroext -96, i8 zeroext %1), !dbg !5899, !verifier.code !5894
  call {:cexpr "tmp___9"} boogie_si_record_bv32($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5717, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.bv32($i2, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5717, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5719, 15} true;
  assume {:verifier.code 0} true;
  call $i4 := at24_sendcmd($i0, $sub.bv8(0bv8, 95bv8));
  // WARNING: %6 = call i32 @at24_sendcmd(i64 %0, i8 zeroext -95), !dbg !5907, !verifier.code !5894
  call {:cexpr "tmp___8"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5721, 9} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.bv32($i4, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5721, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb3, $bb4;
$bb2:
  assume !(($i3 == 1bv1));
  assume {:verifier.code 0} true;
  $i11 := $sub.bv8(0bv8, 1bv8);
  goto $bb9;
$bb3:
  assume ($i5 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5723, 14} true;
  assume {:verifier.code 0} true;
  call $i6 := at24_readdatabyte($i0);
  // WARNING: %9 = call zeroext i8 @at24_readdatabyte(i64 %0), !dbg !5915, !verifier.code !5894
  call {:cexpr "data"} boogie_si_record_bv8($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5724, 17} true;
  assume {:verifier.code 0} true;
  call $i7 := at24_waitfornack($i0);
  // WARNING: %10 = call i32 @at24_waitfornack(i64 %0), !dbg !5918, !verifier.code !5894
  call {:cexpr "tmp___7"} boogie_si_record_bv32($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5726, 11} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.bv32($i7, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5726, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb5, $bb6;
$bb4:
  assume !(($i5 == 1bv1));
  assume {:verifier.code 0} true;
  $i10 := $sub.bv8(0bv8, 1bv8);
  goto $bb8;
$bb5:
  assume ($i8 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5728, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $i6;
  goto $bb7;
$bb6:
  assume !(($i8 == 1bv1));
  assume {:verifier.code 0} true;
  $i9 := $sub.bv8(0bv8, 1bv8);
  goto $bb7;
$bb7:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5731, 5} true;
  assume {:verifier.code 0} true;
  $i10 := $i9;
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5734, 3} true;
  assume {:verifier.code 0} true;
  $i11 := $i10;
  goto $bb9;
$bb9:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5737, 3} true;
  assume {:verifier.code 0} true;
  $r := $i11;
  $exn := false;
  return;
}
const at24_sendfullcmd: ref;
axiom (at24_sendfullcmd == $sub.ref(0, 70129));
procedure  at24_sendfullcmd($i0: bv64, $i1: bv8, $i2: bv8)
  returns ($r: bv32)
{
  var $i3: bv32;
  var $i4: bv1;
  var $i5: bv32;
  var $i6: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !7138, metadata !5891), !dbg !7139, !verifier.code !5893
  // WARNING: call void @llvm.dbg.value(metadata i8 %1, i64 0, metadata !7140, metadata !5891), !dbg !7141, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5480, 13} true;
  assume {:verifier.code 0} true;
  call $i3 := at24_sendcmd($i0, $i1);
  // WARNING: %4 = call i32 @at24_sendcmd(i64 %0, i8 zeroext %1), !dbg !5899, !verifier.code !5894
  call {:cexpr "tmp___8"} boogie_si_record_bv32($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5482, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.bv32($i3, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5482, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5484, 5} true;
  assume {:verifier.code 0} true;
  call at24_writedatabyte($i0, $i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5485, 15} true;
  assume {:verifier.code 0} true;
  call $i5 := at24_waitforack($i0);
  // WARNING: %7 = call i32 @at24_waitforack(i64 %0), !dbg !5910, !verifier.code !5894
  call {:cexpr "tmp___7"} boogie_si_record_bv32($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5487, 5} true;
  assume {:verifier.code 0} true;
  $i6 := $i5;
  goto $bb3;
$bb2:
  assume !(($i4 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5493, 1} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5491, 3} true;
  assume {:verifier.code 0} true;
  $i6 := 0bv32;
  goto $bb3;
}
const at24_sendcmd: ref;
axiom (at24_sendcmd == $sub.ref(0, 71161));
procedure  at24_sendcmd($i0: bv64, $i1: bv8)
  returns ($r: bv32)
{
  var $i2: bv32;
  var $i3: bv1;
  var $i4: bv32;
  var $i5: bv1;
  var $i7: bv32;
  var $i6: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !7164, metadata !5891), !dbg !7165, !verifier.code !5893
  // WARNING: call void @llvm.dbg.value(metadata i8 %1, i64 0, metadata !7166, metadata !5891), !dbg !7167, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5501, 3} true;
  assume {:verifier.code 0} true;
  $i2 := 0bv32;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5501, 13} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5503, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.bv32($i2, 10bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5503, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5505, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i3 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5506, 7} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5509, 5} true;
  assume {:verifier.code 0} true;
  call at24_start($i0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5510, 5} true;
  assume {:verifier.code 0} true;
  call at24_writedatabyte($i0, $i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5511, 15} true;
  assume {:verifier.code 0} true;
  call $i4 := at24_waitforack($i0);
  // WARNING: %9 = call i32 @at24_waitforack(i64 %0), !dbg !5915, !verifier.code !5894
  call {:cexpr "tmp___7"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5513, 9} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.bv32($i4, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5513, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb7, $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5522, 3} true;
  assume {:verifier.code 0} true;
  $i6 := 0bv32;
  goto $bb9;
$bb7:
  assume ($i5 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5514, 7} true;
  assume {:verifier.code 0} true;
  $i6 := 1bv32;
  goto $bb9;
$bb8:
  assume !(($i5 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5524, 1} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5518, 11} true;
  assume {:verifier.code 0} true;
  $i7 := $add.bv32($i2, 1bv32);
  // WARNING: %14 = add nsw i32 %.01, 1, !dbg !5923, !verifier.code !5894
  call {:cexpr "i"} boogie_si_record_bv32($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5501, 3} true;
  assume {:verifier.code 0} true;
  $i2 := $i7;
  goto $bb1;
}
const at24_readdatabyte: ref;
axiom (at24_readdatabyte == $sub.ref(0, 72193));
procedure  at24_readdatabyte($i0: bv64)
  returns ($r: bv8)
{
  var $i1: bv8;
  var $i2: bv32;
  var $i3: bv1;
  var $i4: bv8;
  var $i5: bv32;
  var $i6: bv32;
  var $i7: bv8;
  var $i8: bv8;
  var $i9: bv32;
  var $i10: bv32;
  var $i11: bv32;
  var $i12: bv8;
  var $i13: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !7203, metadata !5891), !dbg !7204, !verifier.code !5893
  // WARNING: call void @llvm.dbg.value(metadata i8 0, i64 0, metadata !7205, metadata !5891), !dbg !7206, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5567, 3} true;
  assume {:verifier.code 0} true;
  $i1, $i2 := 0bv8, 0bv32;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5567, 13} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5569, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.bv32($i2, 8bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5569, 9} true;
  assume {:verifier.code 0} true;
  $i4 := $i1;
  assume {:branchcond $i3} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5571, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i3 == 1bv1));
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5572, 7} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5575, 18} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.bv8.bv32($i1);
  // WARNING: %8 = zext i8 %.01 to i32, !dbg !5912, !verifier.code !5894
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv32($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5576, 29} true;
  assume {:verifier.code 0} true;
  $i6 := $shl.bv32($i5, 1bv32);
  // WARNING: %9 = shl i32 %8, 1, !dbg !5916, !verifier.code !5894
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv32($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5577, 12} true;
  assume {:verifier.code 0} true;
  $i7 := $trunc.bv32.bv8($i6);
  // WARNING: %10 = trunc i32 %9 to i8, !dbg !5919, !verifier.code !5894
  call {:cexpr "data"} boogie_si_record_bv8($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5578, 15} true;
  assume {:verifier.code 0} true;
  call $i8 := at24_readdatabit($i0);
  // WARNING: %11 = call zeroext i8 @at24_readdatabit(i64 %0), !dbg !5920, !verifier.code !5894
  call {:cexpr "tmp___7"} boogie_si_record_bv8($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5579, 18} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.bv8.bv32($i8);
  // WARNING: %12 = zext i8 %11 to i32, !dbg !5923, !verifier.code !5894
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv32($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5580, 18} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.bv8.bv32($i7);
  // WARNING: %13 = zext i8 %10 to i32, !dbg !5926, !verifier.code !5894
  call {:cexpr "__cil_tmp8"} boogie_si_record_bv32($i10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5581, 29} true;
  assume {:verifier.code 0} true;
  $i11 := $or.bv32($i10, $i9);
  // WARNING: %14 = or i32 %13, %12, !dbg !5929, !verifier.code !5894
  call {:cexpr "__cil_tmp9"} boogie_si_record_bv32($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5582, 12} true;
  assume {:verifier.code 0} true;
  $i12 := $trunc.bv32.bv8($i11);
  // WARNING: %15 = trunc i32 %14 to i8, !dbg !5932, !verifier.code !5894
  call {:cexpr "data"} boogie_si_record_bv8($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5583, 11} true;
  assume {:verifier.code 0} true;
  $i13 := $add.bv32($i2, 1bv32);
  // WARNING: %16 = add nsw i32 %.0, 1, !dbg !5933, !verifier.code !5894
  call {:cexpr "i"} boogie_si_record_bv32($i13);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5567, 3} true;
  assume {:verifier.code 0} true;
  $i1, $i2 := $i12, $i13;
  goto $bb1;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5588, 3} true;
  assume {:verifier.code 0} true;
  $r := $i4;
  $exn := false;
  return;
}
const at24_waitfornack: ref;
axiom (at24_waitfornack == $sub.ref(0, 73225));
procedure  at24_waitfornack($i0: bv64)
  returns ($r: bv32)
{
  var $i1: bv32;
  var $i2: bv1;
  var $i3: bv8;
  var $i4: bv32;
  var $i5: bv32;
  var $i6: bv1;
  var $i8: bv32;
  var $i7: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !7251, metadata !5891), !dbg !7252, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5635, 3} true;
  assume {:verifier.code 0} true;
  $i1 := 0bv32;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5635, 13} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5637, 11} true;
  assume {:verifier.code 0} true;
  $i2 := $slt.bv32($i1, 10bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5637, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i2 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5639, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i2 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5640, 7} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5643, 15} true;
  assume {:verifier.code 0} true;
  call $i3 := at24_readdatabit($i0);
  // WARNING: %8 = call zeroext i8 @at24_readdatabit(i64 %0), !dbg !5910, !verifier.code !5894
  call {:cexpr "tmp___7"} boogie_si_record_bv8($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5646, 18} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.bv8.bv32($i3);
  // WARNING: %9 = zext i8 %8 to i32, !dbg !5914, !verifier.code !5894
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5647, 29} true;
  assume {:verifier.code 0} true;
  $i5 := $and.bv32($i4, 1bv32);
  // WARNING: %10 = and i32 %9, 1, !dbg !5918, !verifier.code !5894
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv32($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5648, 20} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.bv32($i5, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5648, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb7, $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5658, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 0bv32;
  goto $bb9;
$bb7:
  assume ($i6 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5649, 7} true;
  assume {:verifier.code 0} true;
  $i7 := 1bv32;
  goto $bb9;
$bb8:
  assume !(($i6 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5660, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5654, 11} true;
  assume {:verifier.code 0} true;
  $i8 := $add.bv32($i1, 1bv32);
  // WARNING: %15 = add nsw i32 %.01, 1, !dbg !5926, !verifier.code !5894
  call {:cexpr "i"} boogie_si_record_bv32($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5635, 3} true;
  assume {:verifier.code 0} true;
  $i1 := $i8;
  goto $bb1;
}
const at24_readdatabit: ref;
axiom (at24_readdatabit == $sub.ref(0, 74257));
procedure  at24_readdatabit($i0: bv64)
  returns ($r: bv8)
{
  var $i1: bv32;
  var $i2: bv8;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv1;
  var $i6: bv8;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5533, 3} true;
  assume {:verifier.code 0} true;
  call at24_setlines($i0, 0bv8, 1bv8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5534, 3} true;
  assume {:verifier.code 0} true;
  call at24_setlines($i0, 1bv8, 1bv8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5535, 16} true;
  assume {:verifier.code 0} true;
  $i1 := $trunc.bv64.bv32($i0);
  // WARNING: %2 = trunc i64 %0 to i32, !dbg !5899, !verifier.code !5894
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv32($i1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5536, 13} true;
  assume {:verifier.code 0} true;
  call $i2 := inb($i1);
  // WARNING: %3 = call zeroext i8 @inb(i32 %2), !dbg !5902, !verifier.code !5894
  call {:cexpr "tmp___8"} boogie_si_record_bv8($i2);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5539, 16} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.bv8.bv32($i2);
  // WARNING: %4 = zext i8 %3 to i32, !dbg !5905, !verifier.code !5894
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv32($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5540, 18} true;
  assume {:verifier.code 0} true;
  $i4 := $and.bv32($i3, 2bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5540, 18} true;
  assume {:verifier.code 0} true;
  $i5 := $ne.bv32($i4, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5540, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i5 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5542, 3} true;
  assume {:verifier.code 0} true;
  $i6 := 1bv8;
  goto $bb3;
$bb2:
  assume !(($i5 == 1bv1));
  assume {:verifier.code 0} true;
  $i6 := 0bv8;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5547, 3} true;
  assume {:verifier.code 0} true;
  call at24_setlines($i0, 1bv8, 1bv8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5548, 3} true;
  assume {:verifier.code 0} true;
  call at24_setlines($i0, 0bv8, 1bv8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5550, 3} true;
  assume {:verifier.code 0} true;
  $r := $i6;
  $exn := false;
  return;
}
const at24_setlines: ref;
axiom (at24_setlines == $sub.ref(0, 75289));
procedure  at24_setlines($i0: bv64, $i1: bv8, $i2: bv8)
{
  var $i3: bv1;
  var $i4: bv32;
  var $i5: bv32;
  var $i6: bv8;
  var $i7: bv8;
  var $i8: bv1;
  var $i9: bv32;
  var $i10: bv32;
  var $i11: bv8;
  var $i12: bv8;
  var $i13: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !7321, metadata !5891), !dbg !7322, !verifier.code !5893
  // WARNING: call void @llvm.dbg.value(metadata i8 %1, i64 0, metadata !7323, metadata !5891), !dbg !7324, !verifier.code !5893
  // WARNING: call void @llvm.dbg.value(metadata i8 %2, i64 0, metadata !7325, metadata !5891), !dbg !7326, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5671, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $ne.bv8($i1, 0bv8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5671, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5672, 18} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.bv8.bv32(4bv8);
  // WARNING: %6 = zext i8 4 to i32, !dbg !5905, !verifier.code !5894
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5673, 29} true;
  assume {:verifier.code 0} true;
  $i5 := $or.bv32($i4, 1bv32);
  // WARNING: %7 = or i32 %6, 1, !dbg !5909, !verifier.code !5894
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv32($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5674, 11} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.bv32.bv8($i5);
  // WARNING: %8 = trunc i32 %7 to i8, !dbg !5912, !verifier.code !5894
  call {:cexpr "val"} boogie_si_record_bv8($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5675, 3} true;
  assume {:verifier.code 0} true;
  $i7 := $i6;
  goto $bb3;
$bb2:
  assume !(($i3 == 1bv1));
  assume {:verifier.code 0} true;
  $i7 := 4bv8;
  goto $bb3;
$bb3:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5678, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.bv8($i2, 0bv8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5678, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i8 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5679, 18} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.bv8.bv32($i7);
  // WARNING: %13 = zext i8 %.0 to i32, !dbg !5917, !verifier.code !5894
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv32($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5680, 29} true;
  assume {:verifier.code 0} true;
  $i10 := $or.bv32($i9, 2bv32);
  // WARNING: %14 = or i32 %13, 2, !dbg !5921, !verifier.code !5894
  call {:cexpr "__cil_tmp8"} boogie_si_record_bv32($i10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5681, 11} true;
  assume {:verifier.code 0} true;
  $i11 := $trunc.bv32.bv8($i10);
  // WARNING: %15 = trunc i32 %14 to i8, !dbg !5924, !verifier.code !5894
  call {:cexpr "val"} boogie_si_record_bv8($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5682, 3} true;
  assume {:verifier.code 0} true;
  $i12 := $i11;
  goto $bb6;
$bb5:
  assume !(($i8 == 1bv1));
  assume {:verifier.code 0} true;
  $i12 := $i7;
  goto $bb6;
$bb6:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5686, 16} true;
  assume {:verifier.code 0} true;
  $i13 := $trunc.bv64.bv32($i0);
  // WARNING: %18 = trunc i64 %0 to i32, !dbg !5926, !verifier.code !5894
  call {:cexpr "__cil_tmp9"} boogie_si_record_bv32($i13);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5687, 3} true;
  assume {:verifier.code 0} true;
  call outb($i12, $i13);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5688, 3} true;
  assume {:verifier.code 0} true;
  call tms380tr_wait(20bv64);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5690, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const at24_start: ref;
axiom (at24_start == $sub.ref(0, 76321));
procedure  at24_start($i0: bv64)
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5698, 3} true;
  assume {:verifier.code 0} true;
  call at24_setlines($i0, 0bv8, 1bv8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5699, 3} true;
  assume {:verifier.code 0} true;
  call at24_setlines($i0, 1bv8, 1bv8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5700, 3} true;
  assume {:verifier.code 0} true;
  call at24_setlines($i0, 1bv8, 0bv8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5701, 3} true;
  assume {:verifier.code 0} true;
  call at24_setlines($i0, 0bv8, 1bv8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5703, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const at24_writedatabyte: ref;
axiom (at24_writedatabyte == $sub.ref(0, 77353));
procedure  at24_writedatabyte($i0: bv64, $i1: bv8)
{
  var $i2: bv32;
  var $i3: bv1;
  var $i4: bv32;
  var $i5: bv32;
  var $i6: bv32;
  var $i7: bv32;
  var $i8: bv8;
  var $i9: bv32;
  var $i10: bv32;
  var $i11: bv32;
  var $i12: bv32;
  var $i13: bv8;
  var $i14: bv32;
  var $i15: bv32;
  var $i16: bv32;
  var $i17: bv32;
  var $i18: bv8;
  var $i19: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !7374, metadata !5891), !dbg !7375, !verifier.code !5893
  // WARNING: call void @llvm.dbg.value(metadata i8 %1, i64 0, metadata !7376, metadata !5891), !dbg !7377, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5440, 3} true;
  assume {:verifier.code 0} true;
  $i2 := 0bv32;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5440, 13} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5442, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.bv32($i2, 8bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5442, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5444, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i3 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5445, 7} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5448, 20} true;
  assume {:verifier.code 0} true;
  $i4 := $sub.bv32(7bv32, $i2);
  // WARNING: %9 = sub nsw i32 7, %.0, !dbg !5912, !verifier.code !5894
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5449, 18} true;
  assume {:verifier.code 0} true;
  $i5 := $zext.bv8.bv32($i1);
  // WARNING: %10 = zext i8 %1 to i32, !dbg !5916, !verifier.code !5894
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv32($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5450, 29} true;
  assume {:verifier.code 0} true;
  $i6 := $ashr.bv32($i5, $i4);
  // WARNING: %11 = ashr i32 %10, %9, !dbg !5919, !verifier.code !5894
  call {:cexpr "__cil_tmp6"} boogie_si_record_bv32($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5451, 29} true;
  assume {:verifier.code 0} true;
  $i7 := $and.bv32($i6, 1bv32);
  // WARNING: %12 = and i32 %11, 1, !dbg !5922, !verifier.code !5894
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv32($i7);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5452, 18} true;
  assume {:verifier.code 0} true;
  $i8 := $trunc.bv32.bv8($i7);
  // WARNING: %13 = trunc i32 %12 to i8, !dbg !5925, !verifier.code !5894
  call {:cexpr "__cil_tmp8"} boogie_si_record_bv8($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5453, 5} true;
  assume {:verifier.code 0} true;
  call at24_setlines($i0, 0bv8, $i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5454, 20} true;
  assume {:verifier.code 0} true;
  $i9 := $sub.bv32(7bv32, $i2);
  // WARNING: %14 = sub nsw i32 7, %.0, !dbg !5929, !verifier.code !5894
  call {:cexpr "__cil_tmp9"} boogie_si_record_bv32($i9);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5455, 19} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.bv8.bv32($i1);
  // WARNING: %15 = zext i8 %1 to i32, !dbg !5932, !verifier.code !5894
  call {:cexpr "__cil_tmp10"} boogie_si_record_bv32($i10);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5456, 31} true;
  assume {:verifier.code 0} true;
  $i11 := $ashr.bv32($i10, $i9);
  // WARNING: %16 = ashr i32 %15, %14, !dbg !5935, !verifier.code !5894
  call {:cexpr "__cil_tmp11"} boogie_si_record_bv32($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5457, 31} true;
  assume {:verifier.code 0} true;
  $i12 := $and.bv32($i11, 1bv32);
  // WARNING: %17 = and i32 %16, 1, !dbg !5938, !verifier.code !5894
  call {:cexpr "__cil_tmp12"} boogie_si_record_bv32($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5458, 19} true;
  assume {:verifier.code 0} true;
  $i13 := $trunc.bv32.bv8($i12);
  // WARNING: %18 = trunc i32 %17 to i8, !dbg !5941, !verifier.code !5894
  call {:cexpr "__cil_tmp13"} boogie_si_record_bv8($i13);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5459, 5} true;
  assume {:verifier.code 0} true;
  call at24_setlines($i0, 1bv8, $i13);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5460, 21} true;
  assume {:verifier.code 0} true;
  $i14 := $sub.bv32(7bv32, $i2);
  // WARNING: %19 = sub nsw i32 7, %.0, !dbg !5945, !verifier.code !5894
  call {:cexpr "__cil_tmp14"} boogie_si_record_bv32($i14);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5461, 19} true;
  assume {:verifier.code 0} true;
  $i15 := $zext.bv8.bv32($i1);
  // WARNING: %20 = zext i8 %1 to i32, !dbg !5948, !verifier.code !5894
  call {:cexpr "__cil_tmp15"} boogie_si_record_bv32($i15);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5462, 31} true;
  assume {:verifier.code 0} true;
  $i16 := $ashr.bv32($i15, $i14);
  // WARNING: %21 = ashr i32 %20, %19, !dbg !5951, !verifier.code !5894
  call {:cexpr "__cil_tmp16"} boogie_si_record_bv32($i16);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5463, 31} true;
  assume {:verifier.code 0} true;
  $i17 := $and.bv32($i16, 1bv32);
  // WARNING: %22 = and i32 %21, 1, !dbg !5954, !verifier.code !5894
  call {:cexpr "__cil_tmp17"} boogie_si_record_bv32($i17);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5464, 19} true;
  assume {:verifier.code 0} true;
  $i18 := $trunc.bv32.bv8($i17);
  // WARNING: %23 = trunc i32 %22 to i8, !dbg !5957, !verifier.code !5894
  call {:cexpr "__cil_tmp18"} boogie_si_record_bv8($i18);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5465, 5} true;
  assume {:verifier.code 0} true;
  call at24_setlines($i0, 0bv8, $i18);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5466, 11} true;
  assume {:verifier.code 0} true;
  $i19 := $add.bv32($i2, 1bv32);
  // WARNING: %24 = add nsw i32 %.0, 1, !dbg !5961, !verifier.code !5894
  call {:cexpr "i"} boogie_si_record_bv32($i19);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5440, 3} true;
  assume {:verifier.code 0} true;
  $i2 := $i19;
  goto $bb1;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5471, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const at24_waitforack: ref;
axiom (at24_waitforack == $sub.ref(0, 78385));
procedure  at24_waitforack($i0: bv64)
  returns ($r: bv32)
{
  var $i1: bv32;
  var $i2: bv1;
  var $i3: bv8;
  var $i4: bv32;
  var $i5: bv32;
  var $i6: bv1;
  var $i8: bv32;
  var $i7: bv32;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %0, i64 0, metadata !7448, metadata !5891), !dbg !7449, !verifier.code !5893
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5600, 3} true;
  assume {:verifier.code 0} true;
  $i1 := 0bv32;
  goto $bb1;
$bb1:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5600, 13} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5602, 11} true;
  assume {:verifier.code 0} true;
  $i2 := $slt.bv32($i1, 10bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5602, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb3, $bb4;
$bb3:
  assume ($i2 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5604, 5} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i2 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5605, 7} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5608, 15} true;
  assume {:verifier.code 0} true;
  call $i3 := at24_readdatabit($i0);
  // WARNING: %8 = call zeroext i8 @at24_readdatabit(i64 %0), !dbg !5910, !verifier.code !5894
  call {:cexpr "tmp___7"} boogie_si_record_bv8($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5611, 18} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.bv8.bv32($i3);
  // WARNING: %9 = zext i8 %8 to i32, !dbg !5914, !verifier.code !5894
  call {:cexpr "__cil_tmp4"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5612, 29} true;
  assume {:verifier.code 0} true;
  $i5 := $and.bv32($i4, 1bv32);
  // WARNING: %10 = and i32 %9, 1, !dbg !5918, !verifier.code !5894
  call {:cexpr "__cil_tmp5"} boogie_si_record_bv32($i5);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5613, 20} true;
  assume {:verifier.code 0} true;
  $i6 := $eq.bv32($i5, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5613, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb7, $bb8;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5623, 3} true;
  assume {:verifier.code 0} true;
  $i7 := 0bv32;
  goto $bb9;
$bb7:
  assume ($i6 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5614, 7} true;
  assume {:verifier.code 0} true;
  $i7 := 1bv32;
  goto $bb9;
$bb8:
  assume !(($i6 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5625, 1} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $exn := false;
  return;
$bb10:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5619, 11} true;
  assume {:verifier.code 0} true;
  $i8 := $add.bv32($i1, 1bv32);
  // WARNING: %15 = add nsw i32 %.01, 1, !dbg !5926, !verifier.code !5894
  call {:cexpr "i"} boogie_si_record_bv32($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 5600, 3} true;
  assume {:verifier.code 0} true;
  $i1 := $i8;
  goto $bb1;
}
const request_threaded_irq: ref;
axiom (request_threaded_irq == $sub.ref(0, 79417));
procedure  request_threaded_irq($i0: bv32, $p1: ref, $p2: ref, $i3: bv64, $p4: ref, $p5: ref)
  returns ($r: bv32);
const abyss_rmmod: ref;
axiom (abyss_rmmod == $sub.ref(0, 80449));
procedure  abyss_rmmod()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6137, 3} true;
  assume {:verifier.code 0} true;
  call pci_unregister_driver(abyss_driver);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6139, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const pci_unregister_driver: ref;
axiom (pci_unregister_driver == $sub.ref(0, 81481));
procedure  pci_unregister_driver($p0: ref);
const main: ref;
axiom (main == $sub.ref(0, 82513));
procedure {:entrypoint} main()
{
  var $i0: bv32;
  var $i1: bv1;
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv1;
  var $i5: bv1;
  var $i6: bv32;
  var $i7: bv1;
  var $i8: bv32;
  var $i9: bv1;
  var $i10: bv1;
  var $i11: bv32;
  var $i12: bv32;
  var $i13: bv32;
  var $i14: bv1;
  var $i15: bv32;
  var $i16: bv32;
$bb0:
  call $initialize();
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6179, 20} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6179, 20} true;
  assume {:verifier.code 0} true;
  $M.2 := 1bv32;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_bv32(1bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6180, 3} true;
  assume {:verifier.code 0} true;
  call ldv_initialize();
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6181, 13} true;
  assume {:verifier.code 0} true;
  call $i0 := abyss_init();
  // WARNING: %1 = call i32 @abyss_init(), !dbg !5894, !verifier.code !5892
  call {:cexpr "tmp___7"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6183, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.bv32($i0, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6183, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6184, 5} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6248, 3} true;
  assume {:verifier.code 0} true;
  call ldv_check_final_state();
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6250, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6190, 3} true;
  assume {:verifier.code 0} true;
  $i2 := 0bv32;
  goto $bb5;
$bb5:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6190, 13} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6193, 15} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i3);
  // WARNING: %8 = call i32 @__VERIFIER_nondet_int(), !dbg !5909, !verifier.code !5912
  call {:cexpr "tmp___9"} boogie_si_record_bv32($i3);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6195, 9} true;
  assume {:verifier.code 0} true;
  $i4 := $ne.bv32($i3, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6195, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb7, $bb8;
$bb7:
  assume ($i4 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6197, 5} true;
  assume {:verifier.code 0} true;
  goto $bb9;
$bb8:
  assume !(($i4 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6199, 50} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.bv32($i2, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6199, 50} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.bv1.bv32($i5);
  // WARNING: %13 = zext i1 %12 to i32, !dbg !5920, !verifier.code !5892
  call {:cexpr "__cil_tmp7"} boogie_si_record_bv32($i6);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6200, 13} true;
  assume {:verifier.code 0} true;
  $i7 := $ne.bv32($i6, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6200, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb10, $bb11;
$bb9:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6208, 15} true;
  assume {:verifier.code 1} true;
  call $i8 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i8);
  // WARNING: %19 = call i32 @__VERIFIER_nondet_int(), !dbg !5932, !verifier.code !5912
  call {:cexpr "tmp___8"} boogie_si_record_bv32($i8);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6210, 17} true;
  assume {:verifier.code 0} true;
  $i9 := $eq.bv32($i8, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6210, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i9} true;
  goto $bb14, $bb15;
$bb10:
  assume ($i7 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6203, 9} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb11:
  assume !(($i7 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6202, 7} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb12:
  assume {:verifier.code 0} true;
  goto $bb9;
$bb13:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6241, 3} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb14:
  assume ($i9 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6211, 7} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume !(($i9 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6214, 7} true;
  assume {:verifier.code 0} true;
  goto $bb17;
$bb16:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6217, 43} true;
  assume {:verifier.code 0} true;
  $i10 := $eq.bv32($i2, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6217, 13} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb21, $bb22;
$bb17:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6233, 9} true;
  assume {:verifier.code 0} true;
  $i16 := $i2;
  goto $bb28;
$bb18:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6215, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond 0bv1} true;
  goto $bb19, $bb20;
$bb19:
  assume (0bv1 == 1bv1);
  assume {:verifier.code 0} true;
  assume false;
$bb20:
  assume !((0bv1 == 1bv1));
  assume {:verifier.code 0} true;
  assume false;
$bb21:
  assume ($i10 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6219, 32} true;
  assume {:verifier.code 0} true;
  call $i11 := abyss_attach($u0, $u1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6219, 30} true;
  assume {:verifier.code 0} true;
  $M.3 := $i11;
  call {:cexpr "res_abyss_attach_4"} boogie_si_record_bv32($i11);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6220, 34} true;
  assume {:verifier.code 0} true;
  $i12 := $M.3;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6220, 11} true;
  assume {:verifier.code 0} true;
  call ldv_check_return_value($i12);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6222, 15} true;
  assume {:verifier.code 0} true;
  $i13 := $M.3;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6222, 15} true;
  assume {:verifier.code 0} true;
  $i14 := $ne.bv32($i13, 0bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6222, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i14} true;
  goto $bb23, $bb24;
$bb22:
  assume !(($i10 == 1bv1));
  assume {:verifier.code 0} true;
  $i15 := $i2;
  goto $bb27;
$bb23:
  assume ($i14 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6223, 13} true;
  assume {:verifier.code 0} true;
  goto $bb25;
$bb24:
  assume !(($i14 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb26;
$bb25:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6244, 3} true;
  assume {:verifier.code 0} true;
  call abyss_rmmod();
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6245, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb26:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6228, 9} true;
  assume {:verifier.code 0} true;
  $i15 := 0bv32;
  goto $bb27;
$bb27:
  assume {:verifier.code 0} true;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6231, 9} true;
  assume {:verifier.code 0} true;
  $i16 := $i15;
  goto $bb28;
$bb28:
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  goto $bb29;
$bb29:
  assume {:verifier.code 0} true;
  goto $bb30;
$bb30:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6190, 3} true;
  assume {:verifier.code 0} true;
  $i2 := $i16;
  goto $bb5;
}
const ldv_initialize: ref;
axiom (ldv_initialize == $sub.ref(0, 83545));
procedure  ldv_initialize();
const ldv_check_return_value: ref;
axiom (ldv_check_return_value == $sub.ref(0, 84577));
procedure  ldv_check_return_value($i0: bv32);
const ldv_check_final_state: ref;
axiom (ldv_check_final_state == $sub.ref(0, 85609));
procedure  ldv_check_final_state()
{
  var $i0: bv32;
  var $i1: bv1;
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6385, 7} true;
  assume {:verifier.code 0} true;
  $i0 := $M.4;
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6385, 17} true;
  assume {:verifier.code 0} true;
  $i1 := $eq.bv32($i0, 1bv32);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6385, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6387, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i1 == 1bv1));
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6389, 5} true;
  assume {:verifier.code 0} true;
  call ldv_blast_assert();
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6392, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const ldv_blast_assert: ref;
axiom (ldv_blast_assert == $sub.ref(0, 86641));
procedure  ldv_blast_assert()
{
$bb0:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6256, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6257, 10} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_error();
  assume {:sourceloc "/proj/SMACK/smac/32_1_cilled_true-unreach-call_ok_nondet_linux-3.4-32_1-drivers--net--tokenring--abyss.ko-ldv_main0_sequence_infinite_withcheck_stateful.cil.out-fysL1n.c", 6259, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 87673));
procedure  __VERIFIER_assume($i0: bv32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %0, i64 0, metadata !7594, metadata !5891), !dbg !7595, !verifier.code !5893
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 34, 21} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 35, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 88705));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.bv32($p0: ref, p.1: bv32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 89737));
procedure  __SMACK_dummy($i0: bv32)
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 260, 3} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 261, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_error: ref;
axiom (__VERIFIER_error == $sub.ref(0, 90769));
procedure  __VERIFIER_error()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 47, 3} true;
  assume {:verifier.code 1} true;
  assert false;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 51, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 91801));
procedure  __SMACK_nondet_char()
  returns ($r: bv8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 92833));
procedure  __SMACK_nondet_signed_char()
  returns ($r: bv8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 93865));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: bv8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 94897));
procedure  __SMACK_nondet_short()
  returns ($r: bv16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 95929));
procedure  __SMACK_nondet_signed_short()
  returns ($r: bv16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 96961));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: bv16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 97993));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: bv16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 99025));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: bv16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 100057));
procedure  __VERIFIER_nondet_int()
  returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv1;
  var $i3: bv1;
  var $i2: bv1;
  var $i4: bv32;
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 120, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_bv32($i0);
  // WARNING: %1 = call i32 @__SMACK_nondet_int(), !dbg !5889, !verifier.code !5890
  call {:cexpr "x"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.bv32($i0, $sub.bv32(0bv32, 2147483648bv32));
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0bv1;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.bv32($i0, 2147483647bv32);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1bv1));
  goto $bb3;
$bb3:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.bv1.bv32($i2);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 121, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 122, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 101089));
procedure  __SMACK_nondet_int()
  returns ($r: bv32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 102121));
procedure  __SMACK_nondet_signed_int()
  returns ($r: bv32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 103153));
procedure  __SMACK_nondet_unsigned()
  returns ($r: bv32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 104185));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: bv32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 105217));
procedure  __SMACK_nondet_long()
  returns ($r: bv64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 106249));
procedure  __SMACK_nondet_long_int()
  returns ($r: bv64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 107281));
procedure  __SMACK_nondet_signed_long()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 108313));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 109345));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 110377));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: bv64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 111409));
procedure  __SMACK_nondet_long_long()
  returns ($r: bv64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 112441));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 113473));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 114505));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 115537));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 116569));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: bv64);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 117601));
function {:inline} $bitcast.ref.ref(i: ref) returns (ref) {i}
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $min.bv128(i1: bv128, i2: bv128) returns (bv128) {if $slt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv96(i1: bv96, i2: bv96) returns (bv96) {if $slt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv88(i1: bv88, i2: bv88) returns (bv88) {if $slt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv64(i1: bv64, i2: bv64) returns (bv64) {if $slt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv56(i1: bv56, i2: bv56) returns (bv56) {if $slt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv48(i1: bv48, i2: bv48) returns (bv48) {if $slt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv40(i1: bv40, i2: bv40) returns (bv40) {if $slt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv32(i1: bv32, i2: bv32) returns (bv32) {if $slt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv24(i1: bv24, i2: bv24) returns (bv24) {if $slt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv16(i1: bv16, i2: bv16) returns (bv16) {if $slt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv8(i1: bv8, i2: bv8) returns (bv8) {if $slt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv128(i1: bv128, i2: bv128) returns (bv128) {if $sgt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv96(i1: bv96, i2: bv96) returns (bv96) {if $sgt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv88(i1: bv88, i2: bv88) returns (bv88) {if $sgt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv64(i1: bv64, i2: bv64) returns (bv64) {if $sgt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv56(i1: bv56, i2: bv56) returns (bv56) {if $sgt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv48(i1: bv48, i2: bv48) returns (bv48) {if $sgt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv40(i1: bv40, i2: bv40) returns (bv40) {if $sgt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv32(i1: bv32, i2: bv32) returns (bv32) {if $sgt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv24(i1: bv24, i2: bv24) returns (bv24) {if $sgt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv16(i1: bv16, i2: bv16) returns (bv16) {if $sgt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv8(i1: bv8, i2: bv8) returns (bv8) {if $sgt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ult.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ult.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ult.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ult.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ult.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ult.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ult.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ult.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ult.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ult.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ult.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ugt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ugt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ugt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ugt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ugt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ugt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ugt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ugt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ugt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ugt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ugt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then i1 else i2}
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) returns (bv128);
function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) returns (bv96);
function {:bvbuiltin "bvnot"} $not.bv88(i: bv88) returns (bv88);
function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) returns (bv64);
function {:bvbuiltin "bvnot"} $not.bv56(i: bv56) returns (bv56);
function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) returns (bv48);
function {:bvbuiltin "bvnot"} $not.bv40(i: bv40) returns (bv40);
function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) returns (bv32);
function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) returns (bv24);
function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) returns (bv16);
function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) returns (bv8);
function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) returns (bv1);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 == i2} function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 == i2} function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 == i2} function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 == i2} function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 == i2} function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 == i2} function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 == i2} function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 == i2} function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 == i2} function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 == i2} function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 == i2} function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 == i2} function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 != i2} function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 != i2} function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 != i2} function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 != i2} function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 != i2} function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 != i2} function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 != i2} function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 != i2} function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 != i2} function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 != i2} function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 != i2} function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 != i2} function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ule.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ule.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ule.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ule.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ule.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ule.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ule.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ule.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ule.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ule.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ule.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ule.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ult.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ult.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ult.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ult.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ult.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ult.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ult.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ult.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ult.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ult.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ult.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $uge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $uge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $uge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $uge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $uge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $uge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $uge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $uge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $uge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $uge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $uge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $uge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ugt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ugt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ugt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ugt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ugt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ugt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ugt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ugt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ugt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ugt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ugt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sle.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sle.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sle.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sle.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sle.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sle.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sle.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sle.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sle.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sle.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sle.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sle.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $slt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $slt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $slt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $slt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $slt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $slt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $slt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $slt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $slt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $slt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $slt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sgt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sgt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sgt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sgt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sgt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sgt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sgt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sgt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sgt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sgt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sgt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:inline} $trunc.bv128.bv96(i: bv128) returns (bv96) {i[96:0]}
function {:inline} $trunc.bv128.bv88(i: bv128) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv128.bv64(i: bv128) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv128.bv56(i: bv128) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv128.bv48(i: bv128) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv128.bv40(i: bv128) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv128.bv32(i: bv128) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv128.bv24(i: bv128) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv128.bv16(i: bv128) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv128.bv8(i: bv128) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv128.bv1(i: bv128) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv96.bv88(i: bv96) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv96.bv64(i: bv96) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv96.bv56(i: bv96) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv96.bv48(i: bv96) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv96.bv40(i: bv96) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv96.bv32(i: bv96) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv96.bv24(i: bv96) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv96.bv16(i: bv96) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv96.bv8(i: bv96) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv96.bv1(i: bv96) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv88.bv64(i: bv88) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv88.bv56(i: bv88) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv88.bv48(i: bv88) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv88.bv40(i: bv88) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv88.bv32(i: bv88) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv88.bv24(i: bv88) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv88.bv16(i: bv88) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv88.bv8(i: bv88) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv88.bv1(i: bv88) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv64.bv56(i: bv64) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv64.bv48(i: bv64) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv64.bv40(i: bv64) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv64.bv32(i: bv64) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv64.bv24(i: bv64) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv64.bv16(i: bv64) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv64.bv8(i: bv64) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv64.bv1(i: bv64) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv56.bv48(i: bv56) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv56.bv40(i: bv56) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv56.bv32(i: bv56) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv56.bv24(i: bv56) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv56.bv16(i: bv56) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv56.bv8(i: bv56) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv56.bv1(i: bv56) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv48.bv32(i: bv48) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv48.bv24(i: bv48) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv48.bv16(i: bv48) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv48.bv8(i: bv48) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv48.bv1(i: bv48) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv40.bv32(i: bv40) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv40.bv24(i: bv40) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv40.bv16(i: bv40) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv40.bv8(i: bv40) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv40.bv1(i: bv40) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv32.bv24(i: bv32) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv32.bv16(i: bv32) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv32.bv8(i: bv32) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv32.bv1(i: bv32) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv24.bv16(i: bv24) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv24.bv8(i: bv24) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv24.bv1(i: bv24) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv16.bv8(i: bv16) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv16.bv1(i: bv16) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv8.bv1(i: bv8) returns (bv1) {i[1:0]}
function {:inline} $zext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 1bv8}
function {:inline} $zext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 1bv16}
function {:inline} $zext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 1bv24}
function {:inline} $zext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 1bv32}
function {:inline} $zext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1bv40}
function {:inline} $zext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 1bv48}
function {:inline} $zext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 1bv56}
function {:inline} $zext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 1bv64}
function {:inline} $zext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 1bv88}
function {:inline} $zext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 1bv96}
function {:inline} $zext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 1bv128}
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $sext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 255bv8}
function {:inline} $sext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 65535bv16}
function {:inline} $sext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 16777215bv24}
function {:inline} $sext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 4294967295bv32}
function {:inline} $sext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1099511627775bv40}
function {:inline} $sext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 281474976710655bv48}
function {:inline} $sext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 72057594037927935bv56}
function {:inline} $sext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 18446744073709551615bv64}
function {:inline} $sext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88}
function {:inline} $sext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96}
function {:inline} $sext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128}
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) {i1 + i2}
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) {i1 + i2}
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) {i1 + i2}
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) {i1 + i2}
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) {i1 + i2}
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) {i1 + i2}
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) {i1 + i2}
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) {i1 + i2}
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) {i1 + i2}
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) {i1 + i2}
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) {i1 + i2}
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) {i1 + i2}
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) {i1 - i2}
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) {i1 - i2}
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) {i1 - i2}
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) {i1 - i2}
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) {i1 - i2}
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) {i1 - i2}
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) {i1 - i2}
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) {i1 - i2}
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) {i1 - i2}
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) {i1 - i2}
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) {i1 - i2}
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) {i1 - i2}
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) {i1 * i2}
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) {i1 * i2}
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) {i1 * i2}
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) {i1 * i2}
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) {i1 * i2}
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) {i1 * i2}
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) {i1 * i2}
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) {i1 * i2}
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) {i1 * i2}
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) {i1 * i2}
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) {i1 * i2}
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) {i1 * i2}
function {:builtin "div"} $div(i1: int, i2: int) returns (int);
function {:builtin "mod"} $mod(i1: int, i2: int) returns (int);
function {:builtin "rem"} $rem(i1: int, i2: int) returns (int);
function {:inline} $min(i1: int, i2: int) returns (int) {if i1 < i2 then i1 else i2}
function {:inline} $max(i1: int, i2: int) returns (int) {if i1 > i2 then i1 else i2}
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $not.i128(i: i128) returns (i128);
function $not.i96(i: i96) returns (i96);
function $not.i88(i: i88) returns (i88);
function $not.i64(i: i64) returns (i64);
function $not.i56(i: i56) returns (i56);
function $not.i48(i: i48) returns (i48);
function $not.i40(i: i40) returns (i40);
function $not.i32(i: i32) returns (i32);
function $not.i24(i: i24) returns (i24);
function $not.i16(i: i16) returns (i16);
function $not.i8(i: i8) returns (i8);
function $not.i1(i: i1) returns (i1);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) {i1 == i2} function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) {i1 == i2} function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) {i1 == i2} function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) {i1 == i2} function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) {i1 == i2} function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) {i1 == i2} function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) {i1 == i2} function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) {i1 == i2} function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) {i1 == i2} function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) {i1 == i2} function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) {i1 == i2} function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) {i1 == i2} function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) {i1 != i2} function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) {i1 != i2} function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) {i1 != i2} function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) {i1 != i2} function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) {i1 != i2} function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) {i1 != i2} function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) {i1 != i2} function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) {i1 != i2} function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) {i1 != i2} function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) {i1 != i2} function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) {i1 != i2} function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) {i1 != i2} function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
axiom $and.i1(0,0) == 0;
axiom $and.i1(0,1) == 0;
axiom $and.i1(1,0) == 0;
axiom $and.i1(1,1) == 1;
axiom $or.i1(0,0) == 0;
axiom $or.i1(0,1) == 1;
axiom $or.i1(1,0) == 1;
axiom $or.i1(1,1) == 1;
axiom $xor.i1(0,0) == 0;
axiom $xor.i1(0,1) == 1;
axiom $xor.i1(1,0) == 1;
axiom $xor.i1(1,1) == 0;
axiom($and.i32(32, 16) == 0);
function {:inline} $trunc.i128.i96(i: i128) returns (i96) {i}
function {:inline} $trunc.i128.i88(i: i128) returns (i88) {i}
function {:inline} $trunc.i128.i64(i: i128) returns (i64) {i}
function {:inline} $trunc.i128.i56(i: i128) returns (i56) {i}
function {:inline} $trunc.i128.i48(i: i128) returns (i48) {i}
function {:inline} $trunc.i128.i40(i: i128) returns (i40) {i}
function {:inline} $trunc.i128.i32(i: i128) returns (i32) {i}
function {:inline} $trunc.i128.i24(i: i128) returns (i24) {i}
function {:inline} $trunc.i128.i16(i: i128) returns (i16) {i}
function {:inline} $trunc.i128.i8(i: i128) returns (i8) {i}
function {:inline} $trunc.i128.i1(i: i128) returns (i1) {i}
function {:inline} $trunc.i96.i64(i: i96) returns (i64) {i}
function {:inline} $trunc.i96.i88(i: i96) returns (i88) {i}
function {:inline} $trunc.i96.i56(i: i96) returns (i56) {i}
function {:inline} $trunc.i96.i48(i: i96) returns (i48) {i}
function {:inline} $trunc.i96.i40(i: i96) returns (i40) {i}
function {:inline} $trunc.i96.i32(i: i96) returns (i32) {i}
function {:inline} $trunc.i96.i24(i: i96) returns (i24) {i}
function {:inline} $trunc.i96.i16(i: i96) returns (i16) {i}
function {:inline} $trunc.i96.i8(i: i96) returns (i8) {i}
function {:inline} $trunc.i96.i1(i: i96) returns (i1) {i}
function {:inline} $trunc.i88.i64(i: i88) returns (i64) {i}
function {:inline} $trunc.i88.i88(i: i88) returns (i88) {i}
function {:inline} $trunc.i88.i56(i: i88) returns (i56) {i}
function {:inline} $trunc.i88.i48(i: i88) returns (i48) {i}
function {:inline} $trunc.i88.i40(i: i88) returns (i40) {i}
function {:inline} $trunc.i88.i32(i: i88) returns (i32) {i}
function {:inline} $trunc.i88.i24(i: i88) returns (i24) {i}
function {:inline} $trunc.i88.i16(i: i88) returns (i16) {i}
function {:inline} $trunc.i88.i8(i: i88) returns (i8) {i}
function {:inline} $trunc.i88.i1(i: i88) returns (i1) {i}
function {:inline} $trunc.i64.i56(i: i64) returns (i56) {i}
function {:inline} $trunc.i64.i48(i: i64) returns (i48) {i}
function {:inline} $trunc.i64.i40(i: i64) returns (i40) {i}
function {:inline} $trunc.i64.i32(i: i64) returns (i32) {i}
function {:inline} $trunc.i64.i24(i: i64) returns (i24) {i}
function {:inline} $trunc.i64.i16(i: i64) returns (i16) {i}
function {:inline} $trunc.i64.i8(i: i64) returns (i8) {i}
function {:inline} $trunc.i64.i1(i: i64) returns (i1) {i}
function {:inline} $trunc.i56.i48(i: i56) returns (i48) {i}
function {:inline} $trunc.i56.i40(i: i56) returns (i40) {i}
function {:inline} $trunc.i56.i32(i: i56) returns (i32) {i}
function {:inline} $trunc.i56.i24(i: i56) returns (i24) {i}
function {:inline} $trunc.i56.i16(i: i56) returns (i16) {i}
function {:inline} $trunc.i56.i8(i: i56) returns (i8) {i}
function {:inline} $trunc.i56.i1(i: i56) returns (i1) {i}
function {:inline} $trunc.i48.i40(i: i48) returns (i40) {i}
function {:inline} $trunc.i48.i32(i: i48) returns (i32) {i}
function {:inline} $trunc.i48.i24(i: i48) returns (i24) {i}
function {:inline} $trunc.i48.i16(i: i48) returns (i16) {i}
function {:inline} $trunc.i48.i8(i: i48) returns (i8) {i}
function {:inline} $trunc.i48.i1(i: i48) returns (i1) {i}
function {:inline} $trunc.i40.i32(i: i40) returns (i32) {i}
function {:inline} $trunc.i40.i24(i: i40) returns (i24) {i}
function {:inline} $trunc.i40.i16(i: i40) returns (i16) {i}
function {:inline} $trunc.i40.i8(i: i40) returns (i8) {i}
function {:inline} $trunc.i40.i1(i: i40) returns (i1) {i}
function {:inline} $trunc.i32.i24(i: i32) returns (i24) {i}
function {:inline} $trunc.i32.i16(i: i32) returns (i16) {i}
function {:inline} $trunc.i32.i8(i: i32) returns (i8) {i}
function {:inline} $trunc.i32.i1(i: i32) returns (i1) {i}
function {:inline} $trunc.i24.i16(i: i24) returns (i16) {i}
function {:inline} $trunc.i24.i8(i: i24) returns (i8) {i}
function {:inline} $trunc.i24.i1(i: i24) returns (i1) {i}
function {:inline} $trunc.i16.i8(i: i16) returns (i8) {i}
function {:inline} $trunc.i16.i1(i: i16) returns (i1) {i}
function {:inline} $trunc.i8.i1(i: i8) returns (i1) {i}
function {:inline} $zext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $zext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $zext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $zext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $zext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $zext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $zext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $zext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $zext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $zext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $zext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $zext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $zext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $zext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $zext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $zext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $zext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $zext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $zext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $zext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $zext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $zext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $zext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $zext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $zext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $zext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $zext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $zext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $zext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $zext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $zext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $zext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $zext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $zext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $zext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $zext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $zext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $zext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $zext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $zext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $zext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $zext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $zext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $zext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $zext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $zext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $zext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $zext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $zext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $zext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $zext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $zext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $zext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $zext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $zext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $zext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $zext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $zext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $zext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $zext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $zext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $zext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $zext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $zext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $zext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $zext.i96.i128(i: i96) returns (i128) {i}
function {:inline} $sext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $sext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $sext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $sext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $sext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $sext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $sext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $sext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $sext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $sext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $sext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $sext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $sext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $sext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $sext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $sext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $sext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $sext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $sext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $sext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $sext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $sext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $sext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $sext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $sext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $sext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $sext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $sext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $sext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $sext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $sext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $sext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $sext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $sext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $sext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $sext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $sext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $sext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $sext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $sext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $sext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $sext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $sext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $sext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $sext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $sext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $sext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $sext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $sext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $sext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $sext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $sext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $sext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $sext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $sext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $sext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $sext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $sext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $sext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $sext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $sext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $sext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $sext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $sext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $sext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $sext.i96.i128(i: i96) returns (i128) {i}
function $fp(ipart:int, fpart:int, epart:int) returns (float);
function $fadd.float(f1:float, f2:float) returns (float);
function $fsub.float(f1:float, f2:float) returns (float);
function $fmul.float(f1:float, f2:float) returns (float);
function $fdiv.float(f1:float, f2:float) returns (float);
function $frem.float(f1:float, f2:float) returns (float);
function $ffalse.float(f1:float, f2:float) returns (i1);
function $ftrue.float(f1:float, f2:float) returns (i1);
function {:inline} $foeq.float(f1:float, f2:float) returns (i1) { if $foeq.bool(f1,f2) then 1 else 0 }
function $foeq.bool(f1:float, f2:float) returns (bool);
function $foge.float(f1:float, f2:float) returns (i1);
function $fogt.float(f1:float, f2:float) returns (i1);
function $fole.float(f1:float, f2:float) returns (i1);
function $folt.float(f1:float, f2:float) returns (i1);
function $fone.float(f1:float, f2:float) returns (i1);
function $ford.float(f1:float, f2:float) returns (i1);
function $fueq.float(f1:float, f2:float) returns (i1);
function $fuge.float(f1:float, f2:float) returns (i1);
function $fugt.float(f1:float, f2:float) returns (i1);
function $fule.float(f1:float, f2:float) returns (i1);
function $fult.float(f1:float, f2:float) returns (i1);
function $fune.float(f1:float, f2:float) returns (i1);
function $funo.float(f1:float, f2:float) returns (i1);
function $fp2si.float.i128(f:float) returns (i128);
function $fp2ui.float.i128(f:float) returns (i128);
function $si2fp.i128.float(i:i128) returns (float);
function $ui2fp.i128.float(i:i128) returns (float);
function $fp2si.float.i96(f:float) returns (i96);
function $fp2ui.float.i96(f:float) returns (i96);
function $si2fp.i96.float(i:i96) returns (float);
function $ui2fp.i96.float(i:i96) returns (float);
function $fp2si.float.i88(f:float) returns (i88);
function $fp2ui.float.i88(f:float) returns (i88);
function $si2fp.i88.float(i:i88) returns (float);
function $ui2fp.i88.float(i:i88) returns (float);
function $fp2si.float.i64(f:float) returns (i64);
function $fp2ui.float.i64(f:float) returns (i64);
function $si2fp.i64.float(i:i64) returns (float);
function $ui2fp.i64.float(i:i64) returns (float);
function $fp2si.float.i56(f:float) returns (i56);
function $fp2ui.float.i56(f:float) returns (i56);
function $si2fp.i56.float(i:i56) returns (float);
function $ui2fp.i56.float(i:i56) returns (float);
function $fp2si.float.i48(f:float) returns (i48);
function $fp2ui.float.i48(f:float) returns (i48);
function $si2fp.i48.float(i:i48) returns (float);
function $ui2fp.i48.float(i:i48) returns (float);
function $fp2si.float.i40(f:float) returns (i40);
function $fp2ui.float.i40(f:float) returns (i40);
function $si2fp.i40.float(i:i40) returns (float);
function $ui2fp.i40.float(i:i40) returns (float);
function $fp2si.float.i32(f:float) returns (i32);
function $fp2ui.float.i32(f:float) returns (i32);
function $si2fp.i32.float(i:i32) returns (float);
function $ui2fp.i32.float(i:i32) returns (float);
function $fp2si.float.i24(f:float) returns (i24);
function $fp2ui.float.i24(f:float) returns (i24);
function $si2fp.i24.float(i:i24) returns (float);
function $ui2fp.i24.float(i:i24) returns (float);
function $fp2si.float.i16(f:float) returns (i16);
function $fp2ui.float.i16(f:float) returns (i16);
function $si2fp.i16.float(i:i16) returns (float);
function $ui2fp.i16.float(i:i16) returns (float);
function $fp2si.float.i8(f:float) returns (i8);
function $fp2ui.float.i8(f:float) returns (i8);
function $si2fp.i8.float(i:i8) returns (float);
function $ui2fp.i8.float(i:i8) returns (float);
function $fptrunc.float.float(f:float) returns (float);
function $fpext.float.float(f:float) returns (float);
function $fp2si.float.bv128(f:float) returns (bv128);
function $fp2ui.float.bv128(f:float) returns (bv128);
function $si2fp.bv128.float(i:bv128) returns (float);
function $ui2fp.bv128.float(i:bv128) returns (float);
function $fp2si.float.bv96(f:float) returns (bv96);
function $fp2ui.float.bv96(f:float) returns (bv96);
function $si2fp.bv96.float(i:bv96) returns (float);
function $ui2fp.bv96.float(i:bv96) returns (float);
function $fp2si.float.bv88(f:float) returns (bv88);
function $fp2ui.float.bv88(f:float) returns (bv88);
function $si2fp.bv88.float(i:bv88) returns (float);
function $ui2fp.bv88.float(i:bv88) returns (float);
function $fp2si.float.bv64(f:float) returns (bv64);
function $fp2ui.float.bv64(f:float) returns (bv64);
function $si2fp.bv64.float(i:bv64) returns (float);
function $ui2fp.bv64.float(i:bv64) returns (float);
function $fp2si.float.bv56(f:float) returns (bv56);
function $fp2ui.float.bv56(f:float) returns (bv56);
function $si2fp.bv56.float(i:bv56) returns (float);
function $ui2fp.bv56.float(i:bv56) returns (float);
function $fp2si.float.bv48(f:float) returns (bv48);
function $fp2ui.float.bv48(f:float) returns (bv48);
function $si2fp.bv48.float(i:bv48) returns (float);
function $ui2fp.bv48.float(i:bv48) returns (float);
function $fp2si.float.bv40(f:float) returns (bv40);
function $fp2ui.float.bv40(f:float) returns (bv40);
function $si2fp.bv40.float(i:bv40) returns (float);
function $ui2fp.bv40.float(i:bv40) returns (float);
function $fp2si.float.bv32(f:float) returns (bv32);
function $fp2ui.float.bv32(f:float) returns (bv32);
function $si2fp.bv32.float(i:bv32) returns (float);
function $ui2fp.bv32.float(i:bv32) returns (float);
function $fp2si.float.bv24(f:float) returns (bv24);
function $fp2ui.float.bv24(f:float) returns (bv24);
function $si2fp.bv24.float(i:bv24) returns (float);
function $ui2fp.bv24.float(i:bv24) returns (float);
function $fp2si.float.bv16(f:float) returns (bv16);
function $fp2ui.float.bv16(f:float) returns (bv16);
function $si2fp.bv16.float(i:bv16) returns (float);
function $ui2fp.bv16.float(i:bv16) returns (float);
function $fp2si.float.bv8(f:float) returns (bv8);
function $fp2ui.float.bv8(f:float) returns (bv8);
function $si2fp.bv8.float(i:bv8) returns (float);
function $ui2fp.bv8.float(i:bv8) returns (float);
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;
function {:inline} $isExternal(p: ref) returns (bool) {$slt.ref.bool(p,$EXTERNS_BOTTOM)}
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) { M[p] }
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) { M[p] }
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) { M[p] }
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) { M[p] }
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) { M[p] }
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) { M[p] }
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) { M[p] }
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) { M[p] }
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) { M[p] }
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) { M[p] }
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128){ $load.bytes.bv64(M, $add.ref(p, $8.ref)) ++ $load.bytes.bv64(M, p) }
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96){ $load.bytes.bv64(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88){ $load.bytes.bv56(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64){ $load.bytes.bv32(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56){ $load.bytes.bv24(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48){ $load.bytes.bv16(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40){ M[$add.ref(p, $4.ref)] ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32){ M[$add.ref(p, $3.ref)] ++ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24){ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16){ M[$add.ref(p, $1.ref)] ++ M[p] }
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, v: i128) returns ([ref] i128) { M[p := v] }
function {:inline} $store.i96(M: [ref] i96, p: ref, v: i96) returns ([ref] i96) { M[p := v] }
function {:inline} $store.i88(M: [ref] i88, p: ref, v: i88) returns ([ref] i88) { M[p := v] }
function {:inline} $store.i64(M: [ref] i64, p: ref, v: i64) returns ([ref] i64) { M[p := v] }
function {:inline} $store.i56(M: [ref] i56, p: ref, v: i56) returns ([ref] i56) { M[p := v] }
function {:inline} $store.i48(M: [ref] i48, p: ref, v: i48) returns ([ref] i48) { M[p := v] }
function {:inline} $store.i40(M: [ref] i40, p: ref, v: i40) returns ([ref] i40) { M[p := v] }
function {:inline} $store.i32(M: [ref] i32, p: ref, v: i32) returns ([ref] i32) { M[p := v] }
function {:inline} $store.i24(M: [ref] i24, p: ref, v: i24) returns ([ref] i24) { M[p := v] }
function {:inline} $store.i16(M: [ref] i16, p: ref, v: i16) returns ([ref] i16) { M[p := v] }
function {:inline} $store.i8(M: [ref] i8, p: ref, v: i8) returns ([ref] i8) { M[p := v] }
function {:inline} $store.bv128(M: [ref] bv128, p: ref, v: bv128) returns ([ref] bv128) { M[p := v] }
function {:inline} $store.bv96(M: [ref] bv96, p: ref, v: bv96) returns ([ref] bv96) { M[p := v] }
function {:inline} $store.bv88(M: [ref] bv88, p: ref, v: bv88) returns ([ref] bv88) { M[p := v] }
function {:inline} $store.bv64(M: [ref] bv64, p: ref, v: bv64) returns ([ref] bv64) { M[p := v] }
function {:inline} $store.bv56(M: [ref] bv56, p: ref, v: bv56) returns ([ref] bv56) { M[p := v] }
function {:inline} $store.bv48(M: [ref] bv48, p: ref, v: bv48) returns ([ref] bv48) { M[p := v] }
function {:inline} $store.bv40(M: [ref] bv40, p: ref, v: bv40) returns ([ref] bv40) { M[p := v] }
function {:inline} $store.bv32(M: [ref] bv32, p: ref, v: bv32) returns ([ref] bv32) { M[p := v] }
function {:inline} $store.bv24(M: [ref] bv24, p: ref, v: bv24) returns ([ref] bv24) { M[p := v] }
function {:inline} $store.bv16(M: [ref] bv16, p: ref, v: bv16) returns ([ref] bv16) { M[p := v] }
function {:inline} $store.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) { M[p := v] }
function {:inline} $store.bytes.bv128(M:[ref]bv8, p:ref, v:bv128) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]][$add.ref(p, $11.ref) := v[104:96]][$add.ref(p, $12.ref) := v[112:104]][$add.ref(p, $13.ref) := v[120:112]][$add.ref(p, $14.ref) := v[128:120]]}
function {:inline} $store.bytes.bv96(M:[ref]bv8, p:ref, v:bv96) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]]}
function {:inline} $store.bytes.bv88(M:[ref]bv8, p:ref, v:bv88) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]]}
function {:inline} $store.bytes.bv64(M:[ref]bv8, p:ref, v:bv64) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]]}
function {:inline} $store.bytes.bv56(M:[ref]bv8, p:ref, v:bv56) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]]}
function {:inline} $store.bytes.bv48(M:[ref]bv8, p:ref, v:bv48) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]]}
function {:inline} $store.bytes.bv40(M:[ref]bv8, p:ref, v:bv40) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]]}
function {:inline} $store.bytes.bv32(M:[ref]bv8, p:ref, v:bv32) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]]}
function {:inline} $store.bytes.bv24(M:[ref]bv8, p:ref, v:bv24) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]]}
function {:inline} $store.bytes.bv16(M:[ref]bv8, p:ref, v:bv16) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]]}
function {:inline} $store.bytes.bv8(M:[ref]bv8, p:ref, v:bv8) returns ([ref]bv8) {M[p := v]}
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, v: ref) returns ([ref] ref) { M[p := v] }
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, v: float) returns ([ref] float) { M[p := v] }
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
procedure  boogie_si_record_bool(i: bool);
procedure  boogie_si_record_i1(i: i1);
procedure  boogie_si_record_i8(i: i8);
procedure  boogie_si_record_i16(i: i16);
procedure  boogie_si_record_i24(i: i24);
procedure  boogie_si_record_i32(i: i32);
procedure  boogie_si_record_i40(i: i40);
procedure  boogie_si_record_i48(i: i48);
procedure  boogie_si_record_i56(i: i56);
procedure  boogie_si_record_i64(i: i64);
procedure  boogie_si_record_i88(i: i88);
procedure  boogie_si_record_i96(i: i96);
procedure  boogie_si_record_i128(i: i128);
procedure  boogie_si_record_bv1(i: bv1);
procedure  boogie_si_record_bv8(i: bv8);
procedure  boogie_si_record_bv16(i: bv16);
procedure  boogie_si_record_bv24(i: bv24);
procedure  boogie_si_record_bv32(i: bv32);
procedure  boogie_si_record_bv40(i: bv40);
procedure  boogie_si_record_bv48(i: bv48);
procedure  boogie_si_record_bv56(i: bv56);
procedure  boogie_si_record_bv64(i: bv64);
procedure  boogie_si_record_bv88(i: bv88);
procedure  boogie_si_record_bv96(i: bv96);
procedure  boogie_si_record_bv128(i: bv128);
procedure  boogie_si_record_ref(i: ref);
procedure  boogie_si_record_float(i: float);
var $exn: bool;
var $exnv: int;
function $extractvalue(p: int, i: int) returns (int);

procedure  $alloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 118633));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 119665));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1782, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/mnt/local/smack-project/smack/share/smack/lib/smack.c", 1787, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 120697));
procedure  llvm.dbg.value($p0: ref, $i1: bv64, $p2: ref, $p3: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 121729));
procedure  __SMACK_static_init()
{
$bb0:
  $M.2 := 0bv32;
  call {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_bv32(0bv32);
  $M.4 := 1bv32;
  call {:cexpr "ldv_mutex"} boogie_si_record_bv32(1bv32);
  $M.0 := $store.bytes.ref($M.0, llvm.used, __mod_license55);
  $M.0 := $store.bytes.bv8($M.0, __mod_license55, 108bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license55, 1), 105bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license55, 2), 99bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license55, 3), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license55, 4), 110bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license55, 5), 115bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license55, 6), 101bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license55, 7), 61bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license55, 8), 71bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license55, 9), 80bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license55, 10), 76bv8);
  $M.0 := $store.bytes.bv8($M.0, $add.ref(__mod_license55, 11), 0bv8);
  $M.5 := $store.bytes.bv8($M.5, version, 97bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 1), 98bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 2), 121bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 3), 115bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 4), 115bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 5), 46bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 6), 99bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 7), 58bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 8), 32bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 9), 118bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 10), 49bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 11), 46bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 12), 48bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 13), 50bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 14), 32bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 15), 50bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 16), 51bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 17), 47bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 18), 49bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 19), 49bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 20), 47bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 21), 50bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 22), 48bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 23), 48bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 24), 48bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 25), 32bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 26), 98bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 27), 121bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 28), 32bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 29), 65bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 30), 100bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 31), 97bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 32), 109bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 33), 32bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 34), 70bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 35), 114bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 36), 105bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 37), 116bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 38), 122bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 39), 108bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 40), 101bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 41), 114bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 42), 10bv8);
  $M.5 := $store.bytes.bv8($M.5, $add.ref(version, 43), 0bv8);
  $M.1 := 0bv32;
  call {:cexpr "versionprinted"} boogie_si_record_bv32(0bv32);
  $M.0 := $store.bytes.ref($M.0, abyss_driver, $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_driver, 8), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_driver, 16), .str);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_driver, 24), abyss_pci_tbl);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_driver, 32), abyss_attach);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_driver, 40), abyss_detach);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_driver, 48), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_driver, 56), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_driver, 64), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_driver, 72), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_driver, 80), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_driver, 88), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_driver, 96), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(abyss_driver, 96), 8), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(abyss_driver, 96), 16), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(abyss_driver, 96), 24), $0.ref);
  $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(abyss_driver, 96), 32), 0bv8);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(abyss_driver, 96), 40), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(abyss_driver, 96), 48), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(abyss_driver, 96), 56), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(abyss_driver, 96), 64), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(abyss_driver, 96), 72), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(abyss_driver, 96), 80), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(abyss_driver, 96), 88), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(abyss_driver, 96), 96), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(abyss_driver, 96), 104), $0.ref);
  $M.0 := $store.bytes.bv32($M.0, $add.ref(abyss_driver, 208), 0bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref(abyss_driver, 208), 4), 0bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref(abyss_driver, 208), 8), 0bv32);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(abyss_driver, 208), 16), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(abyss_driver, 208), 24), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(abyss_driver, 208), 24), 8), $0.ref);
  $M.0 := $store.bytes.ref($M.0, abyss_netdev_ops, $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 8), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 16), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 24), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 32), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 40), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 48), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 56), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 64), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 72), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 80), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 88), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 96), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 104), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 112), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 120), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 128), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 136), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 144), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 152), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 160), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 168), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 176), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 184), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 192), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 200), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 208), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 216), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 224), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 232), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 240), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 248), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 256), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 264), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 272), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 280), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 288), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 296), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 304), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 312), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 320), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 328), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 336), $0.ref);
  $M.0 := $store.bytes.ref($M.0, $add.ref(abyss_netdev_ops, 344), $0.ref);
  $M.0 := $store.bytes.bv32($M.0, abyss_pci_tbl, 4278bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref(abyss_pci_tbl, 4), 2bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref(abyss_pci_tbl, 8), $sub.bv32(0bv32, 1bv32));
  $M.0 := $store.bytes.bv32($M.0, $add.ref(abyss_pci_tbl, 12), $sub.bv32(0bv32, 1bv32));
  $M.0 := $store.bytes.bv32($M.0, $add.ref(abyss_pci_tbl, 16), 131328bv32);
  $M.0 := $store.bytes.bv32($M.0, $add.ref(abyss_pci_tbl, 20), 16777215bv32);
  $M.0 := $store.bytes.bv64($M.0, $add.ref(abyss_pci_tbl, 24), 0bv64);
  $M.3 := 0bv32;
  call {:cexpr "res_abyss_attach_4"} boogie_si_record_bv32(0bv32);
  $exn := false;
  return;
}
const devirtbounce: ref;
axiom (devirtbounce == $sub.ref(0, 122761));
procedure  devirtbounce(funcPtr: ref, arg: bv8, arg1: bv32)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.1: ref;
axiom (devirtbounce.1 == $sub.ref(0, 123793));
procedure  devirtbounce.1(funcPtr: ref, arg: bv32)
  returns ($r: bv8)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.2: ref;
axiom (devirtbounce.2 == $sub.ref(0, 124825));
procedure  devirtbounce.2(funcPtr: ref, arg: ref, arg1: bv32, arg2: bv64)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.3: ref;
axiom (devirtbounce.3 == $sub.ref(0, 125857));
procedure  devirtbounce.3(funcPtr: ref, arg: bv16, arg1: bv32)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.4: ref;
axiom (devirtbounce.4 == $sub.ref(0, 126889));
procedure  devirtbounce.4(funcPtr: ref, arg: bv32)
  returns ($r: bv16)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
procedure  $memcpy.bv8(M.dst: [ref] bv8, M.src: [ref] bv8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref] bv8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src,dst),x)]);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M.dst[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M.dst[x]);
}

const $u0: ref;
const $u1: ref;
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
